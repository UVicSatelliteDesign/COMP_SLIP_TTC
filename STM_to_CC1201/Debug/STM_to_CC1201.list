
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  08008e30  08008e30  00009e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b74  08009b74  0000ab74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b7c  08009b7c  0000ab7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009b80  08009b80  0000ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009b84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  08009c0c  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  08009c0c  0000b334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015859  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c58  00000000  00000000  0002090f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef0  00000000  00000000  00023568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b6a  00000000  00000000  00024458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  00024fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015fd0  00000000  00000000  0005d4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ee08  00000000  00000000  00073477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d227f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000044f0  00000000  00000000  001d22c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d67b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e18 	.word	0x08008e18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008e18 	.word	0x08008e18

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_FastTxOn>:
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
    return result;
}

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2031      	movs	r0, #49	@ 0x31
 80006b8:	f000 fa92 	bl	8000be0 <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_EnterRxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
}

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2034      	movs	r0, #52	@ 0x34
 80006d2:	f000 fa85 	bl	8000be0 <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2035      	movs	r0, #53	@ 0x35
 80006ec:	f000 fa78 	bl	8000be0 <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2036      	movs	r0, #54	@ 0x36
 8000706:	f000 fa6b 	bl	8000be0 <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	203a      	movs	r0, #58	@ 0x3a
 8000720:	f000 fa5e 	bl	8000be0 <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	203b      	movs	r0, #59	@ 0x3b
 800073a:	f000 fa51 	bl	8000be0 <CC1201_SendStrobe>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <CC1201_Nop+0x30>)
 8000752:	f007 fcf5 	bl	8008140 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	203d      	movs	r0, #61	@ 0x3d
 800075a:	f000 fa41 	bl	8000be0 <CC1201_SendStrobe>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	4619      	mov	r1, r3
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <CC1201_Nop+0x34>)
 8000768:	f007 fcea 	bl	8008140 <iprintf>
    return result;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08008e8c 	.word	0x08008e8c
 800077c:	08008eb4 	.word	0x08008eb4

08000780 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	2bff      	cmp	r3, #255	@ 0xff
 8000790:	d909      	bls.n	80007a6 <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 8000792:	232f      	movs	r3, #47	@ 0x2f
 8000794:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 800079c:	2300      	movs	r3, #0
 800079e:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007a0:	2303      	movs	r3, #3
 80007a2:	75fb      	strb	r3, [r7, #23]
 80007a4:	e009      	b.n	80007ba <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007b2:	2300      	movs	r3, #0
 80007b4:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007c0:	4815      	ldr	r0, [pc, #84]	@ (8000818 <CC1201_ReadStatus+0x98>)
 80007c2:	f002 fba1 	bl	8002f08 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	f107 0110 	add.w	r1, r7, #16
 80007d2:	f04f 30ff 	mov.w	r0, #4294967295
 80007d6:	9000      	str	r0, [sp, #0]
 80007d8:	4810      	ldr	r0, [pc, #64]	@ (800081c <CC1201_ReadStatus+0x9c>)
 80007da:	f005 fd41 	bl	8006260 <HAL_SPI_TransmitReceive>
 80007de:	4603      	mov	r3, r0
 80007e0:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <CC1201_ReadStatus+0x98>)
 80007ea:	f002 fb8d 	bl	8002f08 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80007ee:	7dbb      	ldrb	r3, [r7, #22]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10c      	bne.n	800080e <CC1201_ReadStatus+0x8e>
        if (read_data != NULL) {
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d009      	beq.n	800080e <CC1201_ReadStatus+0x8e>
            if (reg_addr > 0xFF) {
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	2bff      	cmp	r3, #255	@ 0xff
 80007fe:	d903      	bls.n	8000808 <CC1201_ReadStatus+0x88>
                *read_data = rx_buffer[2]; // Extended register data
 8000800:	7bba      	ldrb	r2, [r7, #14]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e002      	b.n	800080e <CC1201_ReadStatus+0x8e>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000808:	7b7a      	ldrb	r2, [r7, #13]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 800080e:	7dbb      	ldrb	r3, [r7, #22]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58021000 	.word	0x58021000
 800081c:	240000b8 	.word	0x240000b8

08000820 <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	80fb      	strh	r3, [r7, #6]
 800082c:	4613      	mov	r3, r2
 800082e:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	2bff      	cmp	r3, #255	@ 0xff
 8000834:	d909      	bls.n	800084a <CC1201_WriteRegister+0x2a>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command  
 8000836:	232f      	movs	r3, #47	@ 0x2f
 8000838:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 8000840:	797b      	ldrb	r3, [r7, #5]
 8000842:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 8000844:	2303      	movs	r3, #3
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e006      	b.n	8000858 <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <CC1201_WriteRegister+0x70>)
 8000860:	f002 fb52 	bl	8002f08 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	b29a      	uxth	r2, r3
 8000868:	f107 0108 	add.w	r1, r7, #8
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	4808      	ldr	r0, [pc, #32]	@ (8000894 <CC1201_WriteRegister+0x74>)
 8000872:	f005 fb07 	bl	8005e84 <HAL_SPI_Transmit>
 8000876:	4603      	mov	r3, r0
 8000878:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <CC1201_WriteRegister+0x70>)
 8000882:	f002 fb41 	bl	8002f08 <HAL_GPIO_WritePin>

    return status;
 8000886:	7bbb      	ldrb	r3, [r7, #14]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58021000 	.word	0x58021000
 8000894:	240000b8 	.word	0x240000b8

08000898 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	f642 7073 	movw	r0, #12147	@ 0x2f73
 80008a6:	f7ff ff6b 	bl	8000780 <CC1201_ReadStatus>
 80008aa:	4603      	mov	r3, r0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 80008c2:	f7ff ff5d 	bl	8000780 <CC1201_ReadStatus>
 80008c6:	4603      	mov	r3, r0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 80008de:	f7ff ff4f 	bl	8000780 <CC1201_ReadStatus>
 80008e2:	4603      	mov	r3, r0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	b08f      	sub	sp, #60	@ 0x3c
 80008f2:	af02      	add	r7, sp, #8
 80008f4:	6178      	str	r0, [r7, #20]
 80008f6:	460b      	mov	r3, r1
 80008f8:	60fa      	str	r2, [r7, #12]
 80008fa:	74fb      	strb	r3, [r7, #19]
 80008fc:	466b      	mov	r3, sp
 80008fe:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d005      	beq.n	8000912 <CC1201_WriteTxFifo+0x26>
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <CC1201_WriteTxFifo+0x26>
 800090c:	7cfb      	ldrb	r3, [r7, #19]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d101      	bne.n	8000916 <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e08a      	b.n	8000a2c <CC1201_WriteTxFifo+0x140>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 8000916:	7cfb      	ldrb	r3, [r7, #19]
 8000918:	1c99      	adds	r1, r3, #2
 800091a:	1e4b      	subs	r3, r1, #1
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800091e:	460a      	mov	r2, r1
 8000920:	2300      	movs	r3, #0
 8000922:	603a      	str	r2, [r7, #0]
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	f04f 0200 	mov.w	r2, #0
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	00c3      	lsls	r3, r0, #3
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000938:	6838      	ldr	r0, [r7, #0]
 800093a:	00c2      	lsls	r2, r0, #3
 800093c:	460a      	mov	r2, r1
 800093e:	2300      	movs	r3, #0
 8000940:	4692      	mov	sl, r2
 8000942:	469b      	mov	fp, r3
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000958:	460b      	mov	r3, r1
 800095a:	3307      	adds	r3, #7
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	ebad 0d03 	sub.w	sp, sp, r3
 8000964:	ab02      	add	r3, sp, #8
 8000966:	3300      	adds	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 800096a:	7cfb      	ldrb	r3, [r7, #19]
 800096c:	1c99      	adds	r1, r3, #2
 800096e:	1e4b      	subs	r3, r1, #1
 8000970:	623b      	str	r3, [r7, #32]
 8000972:	460a      	mov	r2, r1
 8000974:	2300      	movs	r3, #0
 8000976:	4690      	mov	r8, r2
 8000978:	4699      	mov	r9, r3
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800098a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800098e:	460a      	mov	r2, r1
 8000990:	2300      	movs	r3, #0
 8000992:	4614      	mov	r4, r2
 8000994:	461d      	mov	r5, r3
 8000996:	f04f 0200 	mov.w	r2, #0
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	00eb      	lsls	r3, r5, #3
 80009a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009a4:	00e2      	lsls	r2, r4, #3
 80009a6:	460b      	mov	r3, r1
 80009a8:	3307      	adds	r3, #7
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	ebad 0d03 	sub.w	sp, sp, r3
 80009b2:	ab02      	add	r3, sp, #8
 80009b4:	3300      	adds	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 80009b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ba:	227f      	movs	r2, #127	@ 0x7f
 80009bc:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009c4:	e00e      	b.n	80009e4 <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 80009c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	441a      	add	r2, r3
 80009ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d2:	3301      	adds	r3, #1
 80009d4:	7811      	ldrb	r1, [r2, #0]
 80009d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 80009da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009de:	3301      	adds	r3, #1
 80009e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009e4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3eb      	bcc.n	80009c6 <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <CC1201_WriteTxFifo+0x14c>)
 80009f6:	f002 fa87 	bl	8002f08 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 80009fa:	7cfb      	ldrb	r3, [r7, #19]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	3301      	adds	r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	f04f 32ff 	mov.w	r2, #4294967295
 8000a06:	9200      	str	r2, [sp, #0]
 8000a08:	69fa      	ldr	r2, [r7, #28]
 8000a0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a0c:	480b      	ldr	r0, [pc, #44]	@ (8000a3c <CC1201_WriteTxFifo+0x150>)
 8000a0e:	f005 fc27 	bl	8006260 <HAL_SPI_TransmitReceive>
 8000a12:	4603      	mov	r3, r0
 8000a14:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a1c:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <CC1201_WriteTxFifo+0x14c>)
 8000a1e:	f002 fa73 	bl	8002f08 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000a2a:	7efb      	ldrb	r3, [r7, #27]
 8000a2c:	46b5      	mov	sp, r6
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3734      	adds	r7, #52	@ 0x34
 8000a32:	46bd      	mov	sp, r7
 8000a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a38:	58021000 	.word	0x58021000
 8000a3c:	240000b8 	.word	0x240000b8

08000a40 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a44:	b08f      	sub	sp, #60	@ 0x3c
 8000a46:	af02      	add	r7, sp, #8
 8000a48:	6178      	str	r0, [r7, #20]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	60fa      	str	r2, [r7, #12]
 8000a4e:	74fb      	strb	r3, [r7, #19]
 8000a50:	466b      	mov	r3, sp
 8000a52:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d005      	beq.n	8000a66 <CC1201_ReadRxFifo+0x26>
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <CC1201_ReadRxFifo+0x26>
 8000a60:	7cfb      	ldrb	r3, [r7, #19]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e09d      	b.n	8000ba6 <CC1201_ReadRxFifo+0x166>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000a6a:	7cfb      	ldrb	r3, [r7, #19]
 8000a6c:	1c59      	adds	r1, r3, #1
 8000a6e:	1e4b      	subs	r3, r1, #1
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a72:	460a      	mov	r2, r1
 8000a74:	2300      	movs	r3, #0
 8000a76:	603a      	str	r2, [r7, #0]
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	00c3      	lsls	r3, r0, #3
 8000a86:	6838      	ldr	r0, [r7, #0]
 8000a88:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	00c2      	lsls	r2, r0, #3
 8000a90:	460a      	mov	r2, r1
 8000a92:	2300      	movs	r3, #0
 8000a94:	4692      	mov	sl, r2
 8000a96:	469b      	mov	fp, r3
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000aac:	460b      	mov	r3, r1
 8000aae:	3307      	adds	r3, #7
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ab8:	ab02      	add	r3, sp, #8
 8000aba:	3300      	adds	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000abe:	7cfb      	ldrb	r3, [r7, #19]
 8000ac0:	1c59      	adds	r1, r3, #1
 8000ac2:	1e4b      	subs	r3, r1, #1
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4690      	mov	r8, r2
 8000acc:	4699      	mov	r9, r3
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ae2:	460a      	mov	r2, r1
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4614      	mov	r4, r2
 8000ae8:	461d      	mov	r5, r3
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	f04f 0300 	mov.w	r3, #0
 8000af2:	00eb      	lsls	r3, r5, #3
 8000af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000af8:	00e2      	lsls	r2, r4, #3
 8000afa:	460b      	mov	r3, r1
 8000afc:	3307      	adds	r3, #7
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	ebad 0d03 	sub.w	sp, sp, r3
 8000b06:	ab02      	add	r3, sp, #8
 8000b08:	3300      	adds	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0e:	22ff      	movs	r2, #255	@ 0xff
 8000b10:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000b12:	2301      	movs	r3, #1
 8000b14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b18:	e009      	b.n	8000b2e <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b20:	2100      	movs	r1, #0
 8000b22:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000b24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b28:	3301      	adds	r3, #1
 8000b2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b2e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d9f0      	bls.n	8000b1a <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b3e:	481d      	ldr	r0, [pc, #116]	@ (8000bb4 <CC1201_ReadRxFifo+0x174>)
 8000b40:	f002 f9e2 	bl	8002f08 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000b44:	7cfb      	ldrb	r3, [r7, #19]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	9200      	str	r2, [sp, #0]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b56:	4818      	ldr	r0, [pc, #96]	@ (8000bb8 <CC1201_ReadRxFifo+0x178>)
 8000b58:	f005 fb82 	bl	8006260 <HAL_SPI_TransmitReceive>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <CC1201_ReadRxFifo+0x174>)
 8000b68:	f002 f9ce 	bl	8002f08 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b7a:	e00e      	b.n	8000b9a <CC1201_ReadRxFifo+0x15a>
        data[i] = rx_buffer[1 + i];
 8000b7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b86:	6979      	ldr	r1, [r7, #20]
 8000b88:	440b      	add	r3, r1
 8000b8a:	69f9      	ldr	r1, [r7, #28]
 8000b8c:	5c8a      	ldrb	r2, [r1, r2]
 8000b8e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000b90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b94:	3301      	adds	r3, #1
 8000b96:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b9a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000b9e:	7cfb      	ldrb	r3, [r7, #19]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d3eb      	bcc.n	8000b7c <CC1201_ReadRxFifo+0x13c>
    }
    
    return status;
 8000ba4:	7efb      	ldrb	r3, [r7, #27]
 8000ba6:	46b5      	mov	sp, r6
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3734      	adds	r7, #52	@ 0x34
 8000bac:	46bd      	mov	sp, r7
 8000bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb2:	bf00      	nop
 8000bb4:	58021000 	.word	0x58021000
 8000bb8:	240000b8 	.word	0x240000b8

08000bbc <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe8c 	bl	80008ec <CC1201_WriteTxFifo>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bf2:	4813      	ldr	r0, [pc, #76]	@ (8000c40 <CC1201_SendStrobe+0x60>)
 8000bf4:	f002 f988 	bl	8002f08 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f001 fb73 	bl	80022e4 <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000bfe:	f107 020e 	add.w	r2, r7, #14
 8000c02:	1df9      	adds	r1, r7, #7
 8000c04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <CC1201_SendStrobe+0x64>)
 8000c0e:	f005 fb27 	bl	8006260 <HAL_SPI_TransmitReceive>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c1c:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <CC1201_SendStrobe+0x60>)
 8000c1e:	f002 f973 	bl	8002f08 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d105      	bne.n	8000c34 <CC1201_SendStrobe+0x54>
        if (status_byte != NULL) {
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <CC1201_SendStrobe+0x54>
            *status_byte = rx_data;
 8000c2e:	7bba      	ldrb	r2, [r7, #14]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	58021000 	.word	0x58021000
 8000c44:	240000b8 	.word	0x240000b8

08000c48 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 030f 	and.w	r3, r3, #15
 8000c60:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	4823      	ldr	r0, [pc, #140]	@ (8000cf8 <print_cc1201_status+0xb0>)
 8000c6a:	f007 fa69 	bl	8008140 <iprintf>
    switch(radio_state) {
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b07      	cmp	r3, #7
 8000c72:	d833      	bhi.n	8000cdc <print_cc1201_status+0x94>
 8000c74:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <print_cc1201_status+0x34>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000c9d 	.word	0x08000c9d
 8000c80:	08000ca5 	.word	0x08000ca5
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cb5 	.word	0x08000cb5
 8000c8c:	08000cbd 	.word	0x08000cbd
 8000c90:	08000cc5 	.word	0x08000cc5
 8000c94:	08000ccd 	.word	0x08000ccd
 8000c98:	08000cd5 	.word	0x08000cd5
        case 0x0: printf("(IDLE)"); break;
 8000c9c:	4817      	ldr	r0, [pc, #92]	@ (8000cfc <print_cc1201_status+0xb4>)
 8000c9e:	f007 fa4f 	bl	8008140 <iprintf>
 8000ca2:	e01f      	b.n	8000ce4 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000ca4:	4816      	ldr	r0, [pc, #88]	@ (8000d00 <print_cc1201_status+0xb8>)
 8000ca6:	f007 fa4b 	bl	8008140 <iprintf>
 8000caa:	e01b      	b.n	8000ce4 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000cac:	4815      	ldr	r0, [pc, #84]	@ (8000d04 <print_cc1201_status+0xbc>)
 8000cae:	f007 fa47 	bl	8008140 <iprintf>
 8000cb2:	e017      	b.n	8000ce4 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000cb4:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <print_cc1201_status+0xc0>)
 8000cb6:	f007 fa43 	bl	8008140 <iprintf>
 8000cba:	e013      	b.n	8000ce4 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000cbc:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <print_cc1201_status+0xc4>)
 8000cbe:	f007 fa3f 	bl	8008140 <iprintf>
 8000cc2:	e00f      	b.n	8000ce4 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000cc4:	4812      	ldr	r0, [pc, #72]	@ (8000d10 <print_cc1201_status+0xc8>)
 8000cc6:	f007 fa3b 	bl	8008140 <iprintf>
 8000cca:	e00b      	b.n	8000ce4 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <print_cc1201_status+0xcc>)
 8000cce:	f007 fa37 	bl	8008140 <iprintf>
 8000cd2:	e007      	b.n	8000ce4 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000cd4:	4810      	ldr	r0, [pc, #64]	@ (8000d18 <print_cc1201_status+0xd0>)
 8000cd6:	f007 fa33 	bl	8008140 <iprintf>
 8000cda:	e003      	b.n	8000ce4 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000cdc:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <print_cc1201_status+0xd4>)
 8000cde:	f007 fa2f 	bl	8008140 <iprintf>
 8000ce2:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <print_cc1201_status+0xd8>)
 8000cea:	f007 fa29 	bl	8008140 <iprintf>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	08008ee0 	.word	0x08008ee0
 8000cfc:	08008f00 	.word	0x08008f00
 8000d00:	08008f08 	.word	0x08008f08
 8000d04:	08008f10 	.word	0x08008f10
 8000d08:	08008f18 	.word	0x08008f18
 8000d0c:	08008f24 	.word	0x08008f24
 8000d10:	08008f30 	.word	0x08008f30
 8000d14:	08008f3c 	.word	0x08008f3c
 8000d18:	08008f4c 	.word	0x08008f4c
 8000d1c:	08008f5c 	.word	0x08008f5c
 8000d20:	08008f68 	.word	0x08008f68

08000d24 <test_buffer_operations>:

// Test 1: Buffer Read/Write Operations
void test_buffer_operations(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
    printf("\n=== TEST 1: BUFFER READ/WRITE OPERATIONS ===\n\r");
 8000d2a:	4864      	ldr	r0, [pc, #400]	@ (8000ebc <test_buffer_operations+0x198>)
 8000d2c:	f007 fa08 	bl	8008140 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75bb      	strb	r3, [r7, #22]
    
    // First, ensure we're in IDLE state and flush FIFOs
    printf("1. Preparing for buffer tests...\n\r");
 8000d34:	4862      	ldr	r0, [pc, #392]	@ (8000ec0 <test_buffer_operations+0x19c>)
 8000d36:	f007 fa03 	bl	8008140 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000d3a:	f107 0316 	add.w	r3, r7, #22
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fcdb 	bl	80006fa <CC1201_EnterIdleMode>
 8000d44:	4603      	mov	r3, r0
 8000d46:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d104      	bne.n	8000d58 <test_buffer_operations+0x34>
        print_cc1201_status(status_byte, "IDLE_MODE");
 8000d4e:	7dbb      	ldrb	r3, [r7, #22]
 8000d50:	495c      	ldr	r1, [pc, #368]	@ (8000ec4 <test_buffer_operations+0x1a0>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff78 	bl	8000c48 <print_cc1201_status>
    }
    
    // Flush both FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8000d58:	f107 0316 	add.w	r3, r7, #22
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fce6 	bl	800072e <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 8000d62:	7dbb      	ldrb	r3, [r7, #22]
 8000d64:	4958      	ldr	r1, [pc, #352]	@ (8000ec8 <test_buffer_operations+0x1a4>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff6e 	bl	8000c48 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 8000d6c:	f107 0316 	add.w	r3, r7, #22
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fccf 	bl	8000714 <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	4954      	ldr	r1, [pc, #336]	@ (8000ecc <test_buffer_operations+0x1a8>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff64 	bl	8000c48 <print_cc1201_status>
    
    // Test TX FIFO write operations
    printf("\n2. Testing TX FIFO Write Operations:\n\r");
 8000d80:	4853      	ldr	r0, [pc, #332]	@ (8000ed0 <test_buffer_operations+0x1ac>)
 8000d82:	f007 f9dd 	bl	8008140 <iprintf>
    
    // Test pattern 1: Sequential bytes
    uint8_t test_data_1[] = {0x01, 0x02, 0x03, 0x04, 0x05};
 8000d86:	4a53      	ldr	r2, [pc, #332]	@ (8000ed4 <test_buffer_operations+0x1b0>)
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d90:	6018      	str	r0, [r3, #0]
 8000d92:	3304      	adds	r3, #4
 8000d94:	7019      	strb	r1, [r3, #0]
    status = CC1201_WriteTxFifo(test_data_1, sizeof(test_data_1), &status_byte);
 8000d96:	f107 0216 	add.w	r2, r7, #22
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2105      	movs	r1, #5
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fda3 	bl	80008ec <CC1201_WriteTxFifo>
 8000da6:	4603      	mov	r3, r0
 8000da8:	75fb      	strb	r3, [r7, #23]
    printf("  Write 5 bytes [01,02,03,04,05]: HAL=%d ", status);
 8000daa:	7dfb      	ldrb	r3, [r7, #23]
 8000dac:	4619      	mov	r1, r3
 8000dae:	484a      	ldr	r0, [pc, #296]	@ (8000ed8 <test_buffer_operations+0x1b4>)
 8000db0:	f007 f9c6 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10f      	bne.n	8000dda <test_buffer_operations+0xb6>
        print_cc1201_status(status_byte, "TX_WRITE");
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	4947      	ldr	r1, [pc, #284]	@ (8000edc <test_buffer_operations+0x1b8>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff42 	bl	8000c48 <print_cc1201_status>
        
        // Check TX FIFO count
        uint8_t tx_count = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	70bb      	strb	r3, [r7, #2]
        CC1201_GetNumTXBytes(&tx_count);
 8000dc8:	1cbb      	adds	r3, r7, #2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fd80 	bl	80008d0 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count: %d bytes\n\r", tx_count);
 8000dd0:	78bb      	ldrb	r3, [r7, #2]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4842      	ldr	r0, [pc, #264]	@ (8000ee0 <test_buffer_operations+0x1bc>)
 8000dd6:	f007 f9b3 	bl	8008140 <iprintf>
    }
    
    // Test single byte write
    printf("\n3. Testing Single Byte Write:\n\r");
 8000dda:	4842      	ldr	r0, [pc, #264]	@ (8000ee4 <test_buffer_operations+0x1c0>)
 8000ddc:	f007 f9b0 	bl	8008140 <iprintf>
    status = CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 8000de0:	f107 0316 	add.w	r3, r7, #22
 8000de4:	4619      	mov	r1, r3
 8000de6:	20aa      	movs	r0, #170	@ 0xaa
 8000de8:	f7ff fee8 	bl	8000bbc <CC1201_WriteSingleTxFifo>
 8000dec:	4603      	mov	r3, r0
 8000dee:	75fb      	strb	r3, [r7, #23]
    printf("  Write single byte [AA]: HAL=%d ", status);
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	4619      	mov	r1, r3
 8000df4:	483c      	ldr	r0, [pc, #240]	@ (8000ee8 <test_buffer_operations+0x1c4>)
 8000df6:	f007 f9a3 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10f      	bne.n	8000e20 <test_buffer_operations+0xfc>
        print_cc1201_status(status_byte, "SINGLE_WRITE");
 8000e00:	7dbb      	ldrb	r3, [r7, #22]
 8000e02:	493a      	ldr	r1, [pc, #232]	@ (8000eec <test_buffer_operations+0x1c8>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff1f 	bl	8000c48 <print_cc1201_status>
        
        uint8_t tx_count = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	707b      	strb	r3, [r7, #1]
        CC1201_GetNumTXBytes(&tx_count);
 8000e0e:	1c7b      	adds	r3, r7, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fd5d 	bl	80008d0 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count after single write: %d bytes\n\r", tx_count);
 8000e16:	787b      	ldrb	r3, [r7, #1]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4835      	ldr	r0, [pc, #212]	@ (8000ef0 <test_buffer_operations+0x1cc>)
 8000e1c:	f007 f990 	bl	8008140 <iprintf>
    }
    
    // Test RX FIFO read (should be empty)
    printf("\n4. Testing RX FIFO Read (should be empty):\n\r");
 8000e20:	4834      	ldr	r0, [pc, #208]	@ (8000ef4 <test_buffer_operations+0x1d0>)
 8000e22:	f007 f98d 	bl	8008140 <iprintf>
    uint8_t rx_buffer[10] = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	811a      	strh	r2, [r3, #8]
    status = CC1201_ReadRxFifo(rx_buffer, 1, &status_byte);
 8000e30:	f107 0216 	add.w	r2, r7, #22
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2101      	movs	r1, #1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fe01 	bl	8000a40 <CC1201_ReadRxFifo>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	75fb      	strb	r3, [r7, #23]
    printf("  Read 1 byte from RX FIFO: HAL=%d ", status);
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	4619      	mov	r1, r3
 8000e46:	482c      	ldr	r0, [pc, #176]	@ (8000ef8 <test_buffer_operations+0x1d4>)
 8000e48:	f007 f97a 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d114      	bne.n	8000e7c <test_buffer_operations+0x158>
        print_cc1201_status(status_byte, "RX_READ");
 8000e52:	7dbb      	ldrb	r3, [r7, #22]
 8000e54:	4929      	ldr	r1, [pc, #164]	@ (8000efc <test_buffer_operations+0x1d8>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fef6 	bl	8000c48 <print_cc1201_status>
        printf("  Read data: 0x%02X\n\r", rx_buffer[0]);
 8000e5c:	793b      	ldrb	r3, [r7, #4]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4827      	ldr	r0, [pc, #156]	@ (8000f00 <test_buffer_operations+0x1dc>)
 8000e62:	f007 f96d 	bl	8008140 <iprintf>
        
        uint8_t rx_count = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	703b      	strb	r3, [r7, #0]
        CC1201_GetNumRXBytes(&rx_count);
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd21 	bl	80008b4 <CC1201_GetNumRXBytes>
        printf("  RX FIFO count: %d bytes\n\r", rx_count);
 8000e72:	783b      	ldrb	r3, [r7, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4823      	ldr	r0, [pc, #140]	@ (8000f04 <test_buffer_operations+0x1e0>)
 8000e78:	f007 f962 	bl	8008140 <iprintf>
    }
    
    // Clean up - flush TX FIFO
    printf("\n5. Cleanup - Flushing TX FIFO:\n\r");
 8000e7c:	4822      	ldr	r0, [pc, #136]	@ (8000f08 <test_buffer_operations+0x1e4>)
 8000e7e:	f007 f95f 	bl	8008140 <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 8000e82:	f107 0316 	add.w	r3, r7, #22
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc51 	bl	800072e <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "CLEANUP_FLUSH");
 8000e8c:	7dbb      	ldrb	r3, [r7, #22]
 8000e8e:	491f      	ldr	r1, [pc, #124]	@ (8000f0c <test_buffer_operations+0x1e8>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fed9 	bl	8000c48 <print_cc1201_status>
    
    uint8_t final_tx_count = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	70fb      	strb	r3, [r7, #3]
    CC1201_GetNumTXBytes(&final_tx_count);
 8000e9a:	1cfb      	adds	r3, r7, #3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd17 	bl	80008d0 <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO count: %d bytes\n\r", final_tx_count);
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481a      	ldr	r0, [pc, #104]	@ (8000f10 <test_buffer_operations+0x1ec>)
 8000ea8:	f007 f94a 	bl	8008140 <iprintf>
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
 8000eac:	4819      	ldr	r0, [pc, #100]	@ (8000f14 <test_buffer_operations+0x1f0>)
 8000eae:	f007 f947 	bl	8008140 <iprintf>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08008f74 	.word	0x08008f74
 8000ec0:	08008fa4 	.word	0x08008fa4
 8000ec4:	08008fc8 	.word	0x08008fc8
 8000ec8:	08008fd4 	.word	0x08008fd4
 8000ecc:	08008fe0 	.word	0x08008fe0
 8000ed0:	08008fec 	.word	0x08008fec
 8000ed4:	080091f8 	.word	0x080091f8
 8000ed8:	08009014 	.word	0x08009014
 8000edc:	08009040 	.word	0x08009040
 8000ee0:	0800904c 	.word	0x0800904c
 8000ee4:	08009068 	.word	0x08009068
 8000ee8:	0800908c 	.word	0x0800908c
 8000eec:	080090b0 	.word	0x080090b0
 8000ef0:	080090c0 	.word	0x080090c0
 8000ef4:	080090f0 	.word	0x080090f0
 8000ef8:	08009120 	.word	0x08009120
 8000efc:	08009144 	.word	0x08009144
 8000f00:	0800914c 	.word	0x0800914c
 8000f04:	08009164 	.word	0x08009164
 8000f08:	08009180 	.word	0x08009180
 8000f0c:	080091a4 	.word	0x080091a4
 8000f10:	080091b4 	.word	0x080091b4
 8000f14:	080091d8 	.word	0x080091d8

08000f18 <test_state_changes>:

// Test 2: State Change Operations
void test_state_changes(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 8000f1e:	486c      	ldr	r0, [pc, #432]	@ (80010d0 <test_state_changes+0x1b8>)
 8000f20:	f007 f90e 	bl	8008140 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71bb      	strb	r3, [r7, #6]
    uint8_t marc_state = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	717b      	strb	r3, [r7, #5]
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 8000f2c:	4869      	ldr	r0, [pc, #420]	@ (80010d4 <test_state_changes+0x1bc>)
 8000f2e:	f007 f907 	bl	8008140 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbe0 	bl	80006fa <CC1201_EnterIdleMode>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
    printf("  Enter IDLE: HAL=%d ", status);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4865      	ldr	r0, [pc, #404]	@ (80010d8 <test_state_changes+0x1c0>)
 8000f44:	f007 f8fc 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10d      	bne.n	8000f6a <test_state_changes+0x52>
        print_cc1201_status(status_byte, "IDLE");
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	4962      	ldr	r1, [pc, #392]	@ (80010dc <test_state_changes+0x1c4>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fe78 	bl	8000c48 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000f58:	1d7b      	adds	r3, r7, #5
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fc9c 	bl	8000898 <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000f60:	797b      	ldrb	r3, [r7, #5]
 8000f62:	4619      	mov	r1, r3
 8000f64:	485e      	ldr	r0, [pc, #376]	@ (80010e0 <test_state_changes+0x1c8>)
 8000f66:	f007 f8eb 	bl	8008140 <iprintf>
    }
    HAL_Delay(50);
 8000f6a:	2032      	movs	r0, #50	@ 0x32
 8000f6c:	f001 f9ba 	bl	80022e4 <HAL_Delay>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 8000f70:	485c      	ldr	r0, [pc, #368]	@ (80010e4 <test_state_changes+0x1cc>)
 8000f72:	f007 f8e5 	bl	8008140 <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fba4 	bl	80006c6 <CC1201_EnterRxMode>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
    printf("  Enter RX: HAL=%d ", status);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4858      	ldr	r0, [pc, #352]	@ (80010e8 <test_state_changes+0x1d0>)
 8000f88:	f007 f8da 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d110      	bne.n	8000fb4 <test_state_changes+0x9c>
        print_cc1201_status(status_byte, "RX");
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4955      	ldr	r1, [pc, #340]	@ (80010ec <test_state_changes+0x1d4>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fe56 	bl	8000c48 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 8000f9c:	2064      	movs	r0, #100	@ 0x64
 8000f9e:	f001 f9a1 	bl	80022e4 <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8000fa2:	1d7b      	adds	r3, r7, #5
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fc77 	bl	8000898 <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4850      	ldr	r0, [pc, #320]	@ (80010f0 <test_state_changes+0x1d8>)
 8000fb0:	f007 f8c6 	bl	8008140 <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 8000fb4:	484f      	ldr	r0, [pc, #316]	@ (80010f4 <test_state_changes+0x1dc>)
 8000fb6:	f007 f8c3 	bl	8008140 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000fba:	1dbb      	adds	r3, r7, #6
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb9c 	bl	80006fa <CC1201_EnterIdleMode>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    printf("  RX->IDLE: HAL=%d ", status);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	484b      	ldr	r0, [pc, #300]	@ (80010f8 <test_state_changes+0x1e0>)
 8000fcc:	f007 f8b8 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <test_state_changes+0xc8>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	4948      	ldr	r1, [pc, #288]	@ (80010fc <test_state_changes+0x1e4>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe34 	bl	8000c48 <print_cc1201_status>
    }
    HAL_Delay(50);
 8000fe0:	2032      	movs	r0, #50	@ 0x32
 8000fe2:	f001 f97f 	bl	80022e4 <HAL_Delay>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 8000fe6:	4846      	ldr	r0, [pc, #280]	@ (8001100 <test_state_changes+0x1e8>)
 8000fe8:	f007 f8aa 	bl	8008140 <iprintf>
    status = CC1201_EnterTxMode(&status_byte);
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fb76 	bl	80006e0 <CC1201_EnterTxMode>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
    printf("  Enter TX: HAL=%d ", status);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4841      	ldr	r0, [pc, #260]	@ (8001104 <test_state_changes+0x1ec>)
 8000ffe:	f007 f89f 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d110      	bne.n	800102a <test_state_changes+0x112>
        print_cc1201_status(status_byte, "TX");
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	493f      	ldr	r1, [pc, #252]	@ (8001108 <test_state_changes+0x1f0>)
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe1b 	bl	8000c48 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 8001012:	2032      	movs	r0, #50	@ 0x32
 8001014:	f001 f966 	bl	80022e4 <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8001018:	1d7b      	adds	r3, r7, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fc3c 	bl	8000898 <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	4619      	mov	r1, r3
 8001024:	4839      	ldr	r0, [pc, #228]	@ (800110c <test_state_changes+0x1f4>)
 8001026:	f007 f88b 	bl	8008140 <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 800102a:	4839      	ldr	r0, [pc, #228]	@ (8001110 <test_state_changes+0x1f8>)
 800102c:	f007 f888 	bl	8008140 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fb61 	bl	80006fa <CC1201_EnterIdleMode>
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
    printf("  TX->IDLE: HAL=%d ", status);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4619      	mov	r1, r3
 8001040:	4834      	ldr	r0, [pc, #208]	@ (8001114 <test_state_changes+0x1fc>)
 8001042:	f007 f87d 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <test_state_changes+0x13e>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 800104c:	79bb      	ldrb	r3, [r7, #6]
 800104e:	4932      	ldr	r1, [pc, #200]	@ (8001118 <test_state_changes+0x200>)
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fdf9 	bl	8000c48 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 8001056:	4831      	ldr	r0, [pc, #196]	@ (800111c <test_state_changes+0x204>)
 8001058:	f007 f872 	bl	8008140 <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 800105c:	1dbb      	adds	r3, r7, #6
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fb24 	bl	80006ac <CC1201_FastTxOn>
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
    printf("  Fast TX On: HAL=%d ", status);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4619      	mov	r1, r3
 800106c:	482c      	ldr	r0, [pc, #176]	@ (8001120 <test_state_changes+0x208>)
 800106e:	f007 f867 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10d      	bne.n	8001094 <test_state_changes+0x17c>
        print_cc1201_status(status_byte, "FSTXON");
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	492a      	ldr	r1, [pc, #168]	@ (8001124 <test_state_changes+0x20c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fde3 	bl	8000c48 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8001082:	1d7b      	adds	r3, r7, #5
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fc07 	bl	8000898 <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 800108a:	797b      	ldrb	r3, [r7, #5]
 800108c:	4619      	mov	r1, r3
 800108e:	4826      	ldr	r0, [pc, #152]	@ (8001128 <test_state_changes+0x210>)
 8001090:	f007 f856 	bl	8008140 <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 8001094:	4825      	ldr	r0, [pc, #148]	@ (800112c <test_state_changes+0x214>)
 8001096:	f007 f853 	bl	8008140 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 800109a:	1dbb      	adds	r3, r7, #6
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fb2c 	bl	80006fa <CC1201_EnterIdleMode>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    printf("  Final IDLE: HAL=%d ", status);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4821      	ldr	r0, [pc, #132]	@ (8001130 <test_state_changes+0x218>)
 80010ac:	f007 f848 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d104      	bne.n	80010c0 <test_state_changes+0x1a8>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	491e      	ldr	r1, [pc, #120]	@ (8001134 <test_state_changes+0x21c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdc4 	bl	8000c48 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 80010c0:	481d      	ldr	r0, [pc, #116]	@ (8001138 <test_state_changes+0x220>)
 80010c2:	f007 f83d 	bl	8008140 <iprintf>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08009200 	.word	0x08009200
 80010d4:	0800922c 	.word	0x0800922c
 80010d8:	08009248 	.word	0x08009248
 80010dc:	08009260 	.word	0x08009260
 80010e0:	08009268 	.word	0x08009268
 80010e4:	08009280 	.word	0x08009280
 80010e8:	08009298 	.word	0x08009298
 80010ec:	080092ac 	.word	0x080092ac
 80010f0:	080092b0 	.word	0x080092b0
 80010f4:	080092d4 	.word	0x080092d4
 80010f8:	080092f0 	.word	0x080092f0
 80010fc:	08009304 	.word	0x08009304
 8001100:	08009310 	.word	0x08009310
 8001104:	08009328 	.word	0x08009328
 8001108:	0800933c 	.word	0x0800933c
 800110c:	08009340 	.word	0x08009340
 8001110:	08009360 	.word	0x08009360
 8001114:	0800937c 	.word	0x0800937c
 8001118:	08009390 	.word	0x08009390
 800111c:	0800939c 	.word	0x0800939c
 8001120:	080093c0 	.word	0x080093c0
 8001124:	080093d8 	.word	0x080093d8
 8001128:	080093e0 	.word	0x080093e0
 800112c:	08009404 	.word	0x08009404
 8001130:	08009420 	.word	0x08009420
 8001134:	08009438 	.word	0x08009438
 8001138:	08009444 	.word	0x08009444

0800113c <test_individual_functions>:

// Test 3: Individual Function Tests
void test_individual_functions(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    printf("\n=== TEST 3: INDIVIDUAL FUNCTION TESTS ===\n\r");
 8001142:	486b      	ldr	r0, [pc, #428]	@ (80012f0 <test_individual_functions+0x1b4>)
 8001144:	f006 fffc 	bl	8008140 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t data = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	713b      	strb	r3, [r7, #4]
    uint8_t status_byte = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	70fb      	strb	r3, [r7, #3]
    
    // Test CC1201_ReadStatus (using a safe register like IOCFG2)
    printf("1. Testing CC1201_ReadStatus():\n\r");
 8001150:	4868      	ldr	r0, [pc, #416]	@ (80012f4 <test_individual_functions+0x1b8>)
 8001152:	f006 fff5 	bl	8008140 <iprintf>
    status = CC1201_ReadStatus(0x01, &data); // IOCFG2 register
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fb10 	bl	8000780 <CC1201_ReadStatus>
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
    printf("  Read IOCFG2 (0x01): HAL=%d, Data=0x%02X\n\r", status, data);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	793a      	ldrb	r2, [r7, #4]
 8001168:	4619      	mov	r1, r3
 800116a:	4863      	ldr	r0, [pc, #396]	@ (80012f8 <test_individual_functions+0x1bc>)
 800116c:	f006 ffe8 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <test_individual_functions+0x42>
        printf("  ✓ CC1201_ReadStatus() WORKING\n\r");
 8001176:	4861      	ldr	r0, [pc, #388]	@ (80012fc <test_individual_functions+0x1c0>)
 8001178:	f006 ffe2 	bl	8008140 <iprintf>
 800117c:	e002      	b.n	8001184 <test_individual_functions+0x48>
    } else {
        printf("  ✗ CC1201_ReadStatus() FAILED\n\r");
 800117e:	4860      	ldr	r0, [pc, #384]	@ (8001300 <test_individual_functions+0x1c4>)
 8001180:	f006 ffde 	bl	8008140 <iprintf>
    }
    
    // Test CC1201_WriteRegister and verify with read
    printf("\n2. Testing CC1201_WriteRegister():\n\r");
 8001184:	485f      	ldr	r0, [pc, #380]	@ (8001304 <test_individual_functions+0x1c8>)
 8001186:	f006 ffdb 	bl	8008140 <iprintf>
    uint8_t original_value = data; // Store original value
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	71bb      	strb	r3, [r7, #6]
    uint8_t test_value = 0x55; // Test pattern
 800118e:	2355      	movs	r3, #85	@ 0x55
 8001190:	717b      	strb	r3, [r7, #5]
    
    status = CC1201_WriteRegister(0x01, test_value);
 8001192:	797b      	ldrb	r3, [r7, #5]
 8001194:	4619      	mov	r1, r3
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff fb42 	bl	8000820 <CC1201_WriteRegister>
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
    printf("  Write IOCFG2 (0x55): HAL=%d\n\r", status);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4858      	ldr	r0, [pc, #352]	@ (8001308 <test_individual_functions+0x1cc>)
 80011a6:	f006 ffcb 	bl	8008140 <iprintf>
    
    if (status == HAL_OK) {
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d125      	bne.n	80011fc <test_individual_functions+0xc0>
        // Read back to verify
        status = CC1201_ReadStatus(0x01, &data);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fae3 	bl	8000780 <CC1201_ReadStatus>
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
        printf("  Read back: HAL=%d, Data=0x%02X\n\r", status, data);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	793a      	ldrb	r2, [r7, #4]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4851      	ldr	r0, [pc, #324]	@ (800130c <test_individual_functions+0x1d0>)
 80011c6:	f006 ffbb 	bl	8008140 <iprintf>
        
        if (status == HAL_OK && data == test_value) {
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d107      	bne.n	80011e0 <test_individual_functions+0xa4>
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	797a      	ldrb	r2, [r7, #5]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d103      	bne.n	80011e0 <test_individual_functions+0xa4>
            printf("  ✓ CC1201_WriteRegister() WORKING (Write/Read verified)\n\r");
 80011d8:	484d      	ldr	r0, [pc, #308]	@ (8001310 <test_individual_functions+0x1d4>)
 80011da:	f006 ffb1 	bl	8008140 <iprintf>
 80011de:	e002      	b.n	80011e6 <test_individual_functions+0xaa>
        } else {
            printf("  ✗ CC1201_WriteRegister() FAILED (Data mismatch)\n\r");
 80011e0:	484c      	ldr	r0, [pc, #304]	@ (8001314 <test_individual_functions+0x1d8>)
 80011e2:	f006 ffad 	bl	8008140 <iprintf>
        }
        
        // Restore original value
        CC1201_WriteRegister(0x01, original_value);
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	4619      	mov	r1, r3
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fb18 	bl	8000820 <CC1201_WriteRegister>
        printf("  Restored original value: 0x%02X\n\r", original_value);
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4848      	ldr	r0, [pc, #288]	@ (8001318 <test_individual_functions+0x1dc>)
 80011f6:	f006 ffa3 	bl	8008140 <iprintf>
 80011fa:	e002      	b.n	8001202 <test_individual_functions+0xc6>
    } else {
        printf("  ✗ CC1201_WriteRegister() FAILED\n\r");
 80011fc:	4847      	ldr	r0, [pc, #284]	@ (800131c <test_individual_functions+0x1e0>)
 80011fe:	f006 ff9f 	bl	8008140 <iprintf>
    }
    
    // Test CC1201_SendStrobe (using NOP)
    printf("\n3. Testing CC1201_SendStrobe():\n\r");
 8001202:	4847      	ldr	r0, [pc, #284]	@ (8001320 <test_individual_functions+0x1e4>)
 8001204:	f006 ff9c 	bl	8008140 <iprintf>
    status = CC1201_SendStrobe(0x3D, &status_byte); // NOP strobe
 8001208:	1cfb      	adds	r3, r7, #3
 800120a:	4619      	mov	r1, r3
 800120c:	203d      	movs	r0, #61	@ 0x3d
 800120e:	f7ff fce7 	bl	8000be0 <CC1201_SendStrobe>
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
    printf("  Send NOP strobe: HAL=%d ", status);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4619      	mov	r1, r3
 800121a:	4842      	ldr	r0, [pc, #264]	@ (8001324 <test_individual_functions+0x1e8>)
 800121c:	f006 ff90 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d108      	bne.n	8001238 <test_individual_functions+0xfc>
        print_cc1201_status(status_byte, "STROBE_NOP");
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	493f      	ldr	r1, [pc, #252]	@ (8001328 <test_individual_functions+0x1ec>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fd0c 	bl	8000c48 <print_cc1201_status>
        printf("  ✓ CC1201_SendStrobe() WORKING\n\r");
 8001230:	483e      	ldr	r0, [pc, #248]	@ (800132c <test_individual_functions+0x1f0>)
 8001232:	f006 ff85 	bl	8008140 <iprintf>
 8001236:	e002      	b.n	800123e <test_individual_functions+0x102>
    } else {
        printf("  ✗ CC1201_SendStrobe() FAILED\n\r");
 8001238:	483d      	ldr	r0, [pc, #244]	@ (8001330 <test_individual_functions+0x1f4>)
 800123a:	f006 ff81 	bl	8008140 <iprintf>
    }
    
    // Test CC1201_ReadMARCState
    printf("\n4. Testing CC1201_ReadMARCState():\n\r");
 800123e:	483d      	ldr	r0, [pc, #244]	@ (8001334 <test_individual_functions+0x1f8>)
 8001240:	f006 ff7e 	bl	8008140 <iprintf>
    uint8_t marc_state = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	70bb      	strb	r3, [r7, #2]
    status = CC1201_ReadMARCState(&marc_state);
 8001248:	1cbb      	adds	r3, r7, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fb24 	bl	8000898 <CC1201_ReadMARCState>
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
    printf("  Read MARC State: HAL=%d, State=0x%02X\n\r", status, marc_state);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	78ba      	ldrb	r2, [r7, #2]
 8001258:	4619      	mov	r1, r3
 800125a:	4837      	ldr	r0, [pc, #220]	@ (8001338 <test_individual_functions+0x1fc>)
 800125c:	f006 ff70 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <test_individual_functions+0x132>
        printf("  ✓ CC1201_ReadMARCState() WORKING\n\r");
 8001266:	4835      	ldr	r0, [pc, #212]	@ (800133c <test_individual_functions+0x200>)
 8001268:	f006 ff6a 	bl	8008140 <iprintf>
 800126c:	e002      	b.n	8001274 <test_individual_functions+0x138>
    } else {
        printf("  ✗ CC1201_ReadMARCState() FAILED\n\r");
 800126e:	4834      	ldr	r0, [pc, #208]	@ (8001340 <test_individual_functions+0x204>)
 8001270:	f006 ff66 	bl	8008140 <iprintf>
    }
    
    // Test CC1201_GetNumRXBytes
    printf("\n5. Testing CC1201_GetNumRXBytes():\n\r");
 8001274:	4833      	ldr	r0, [pc, #204]	@ (8001344 <test_individual_functions+0x208>)
 8001276:	f006 ff63 	bl	8008140 <iprintf>
    uint8_t rx_bytes = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	707b      	strb	r3, [r7, #1]
    status = CC1201_GetNumRXBytes(&rx_bytes);
 800127e:	1c7b      	adds	r3, r7, #1
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fb17 	bl	80008b4 <CC1201_GetNumRXBytes>
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
    printf("  Get RX Bytes: HAL=%d, Count=%d\n\r", status, rx_bytes);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	787a      	ldrb	r2, [r7, #1]
 800128e:	4619      	mov	r1, r3
 8001290:	482d      	ldr	r0, [pc, #180]	@ (8001348 <test_individual_functions+0x20c>)
 8001292:	f006 ff55 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <test_individual_functions+0x168>
        printf("  ✓ CC1201_GetNumRXBytes() WORKING\n\r");
 800129c:	482b      	ldr	r0, [pc, #172]	@ (800134c <test_individual_functions+0x210>)
 800129e:	f006 ff4f 	bl	8008140 <iprintf>
 80012a2:	e002      	b.n	80012aa <test_individual_functions+0x16e>
    } else {
        printf("  ✗ CC1201_GetNumRXBytes() FAILED\n\r");
 80012a4:	482a      	ldr	r0, [pc, #168]	@ (8001350 <test_individual_functions+0x214>)
 80012a6:	f006 ff4b 	bl	8008140 <iprintf>
    }
    
    // Test CC1201_GetNumTXBytes
    printf("\n6. Testing CC1201_GetNumTXBytes():\n\r");
 80012aa:	482a      	ldr	r0, [pc, #168]	@ (8001354 <test_individual_functions+0x218>)
 80012ac:	f006 ff48 	bl	8008140 <iprintf>
    uint8_t tx_bytes = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	703b      	strb	r3, [r7, #0]
    status = CC1201_GetNumTXBytes(&tx_bytes);
 80012b4:	463b      	mov	r3, r7
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb0a 	bl	80008d0 <CC1201_GetNumTXBytes>
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
    printf("  Get TX Bytes: HAL=%d, Count=%d\n\r", status, tx_bytes);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	783a      	ldrb	r2, [r7, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4824      	ldr	r0, [pc, #144]	@ (8001358 <test_individual_functions+0x21c>)
 80012c8:	f006 ff3a 	bl	8008140 <iprintf>
    if (status == HAL_OK) {
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d103      	bne.n	80012da <test_individual_functions+0x19e>
        printf("  ✓ CC1201_GetNumTXBytes() WORKING\n\r");
 80012d2:	4822      	ldr	r0, [pc, #136]	@ (800135c <test_individual_functions+0x220>)
 80012d4:	f006 ff34 	bl	8008140 <iprintf>
 80012d8:	e002      	b.n	80012e0 <test_individual_functions+0x1a4>
    } else {
        printf("  ✗ CC1201_GetNumTXBytes() FAILED\n\r");
 80012da:	4821      	ldr	r0, [pc, #132]	@ (8001360 <test_individual_functions+0x224>)
 80012dc:	f006 ff30 	bl	8008140 <iprintf>
    }
    
    printf("=== INDIVIDUAL FUNCTION TEST COMPLETE ===\n\r");
 80012e0:	4820      	ldr	r0, [pc, #128]	@ (8001364 <test_individual_functions+0x228>)
 80012e2:	f006 ff2d 	bl	8008140 <iprintf>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0800946c 	.word	0x0800946c
 80012f4:	0800949c 	.word	0x0800949c
 80012f8:	080094c0 	.word	0x080094c0
 80012fc:	080094ec 	.word	0x080094ec
 8001300:	08009510 	.word	0x08009510
 8001304:	08009534 	.word	0x08009534
 8001308:	0800955c 	.word	0x0800955c
 800130c:	0800957c 	.word	0x0800957c
 8001310:	080095a0 	.word	0x080095a0
 8001314:	080095e0 	.word	0x080095e0
 8001318:	08009618 	.word	0x08009618
 800131c:	0800963c 	.word	0x0800963c
 8001320:	08009664 	.word	0x08009664
 8001324:	08009688 	.word	0x08009688
 8001328:	080096a4 	.word	0x080096a4
 800132c:	080096b0 	.word	0x080096b0
 8001330:	080096d4 	.word	0x080096d4
 8001334:	080096f8 	.word	0x080096f8
 8001338:	08009720 	.word	0x08009720
 800133c:	0800974c 	.word	0x0800974c
 8001340:	08009774 	.word	0x08009774
 8001344:	0800979c 	.word	0x0800979c
 8001348:	080097c4 	.word	0x080097c4
 800134c:	080097e8 	.word	0x080097e8
 8001350:	08009810 	.word	0x08009810
 8001354:	08009838 	.word	0x08009838
 8001358:	08009860 	.word	0x08009860
 800135c:	08009884 	.word	0x08009884
 8001360:	080098ac 	.word	0x080098ac
 8001364:	080098d4 	.word	0x080098d4

08001368 <run_comprehensive_cc1201_tests>:

// Main test runner
void run_comprehensive_cc1201_tests(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
    printf("\n STARTING COMPREHENSIVE CC1201 TEST SUITE \n\r");
 800136e:	4816      	ldr	r0, [pc, #88]	@ (80013c8 <run_comprehensive_cc1201_tests+0x60>)
 8001370:	f006 fee6 	bl	8008140 <iprintf>
    printf("================================================\n\r");
 8001374:	4815      	ldr	r0, [pc, #84]	@ (80013cc <run_comprehensive_cc1201_tests+0x64>)
 8001376:	f006 fee3 	bl	8008140 <iprintf>
    
    // Run all tests
    test_buffer_operations();
 800137a:	f7ff fcd3 	bl	8000d24 <test_buffer_operations>
    HAL_Delay(500);
 800137e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001382:	f000 ffaf 	bl	80022e4 <HAL_Delay>
    
    test_state_changes();
 8001386:	f7ff fdc7 	bl	8000f18 <test_state_changes>
    HAL_Delay(500);
 800138a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800138e:	f000 ffa9 	bl	80022e4 <HAL_Delay>
    
    test_individual_functions();
 8001392:	f7ff fed3 	bl	800113c <test_individual_functions>
    HAL_Delay(500);
 8001396:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800139a:	f000 ffa3 	bl	80022e4 <HAL_Delay>
    
    printf("\n COMPREHENSIVE TEST SUITE COMPLETE! \n\r");
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <run_comprehensive_cc1201_tests+0x68>)
 80013a0:	f006 fece 	bl	8008140 <iprintf>
    printf("=============================================\n\r");
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <run_comprehensive_cc1201_tests+0x6c>)
 80013a6:	f006 fecb 	bl	8008140 <iprintf>
    
    // Final status check
    uint8_t final_status = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
    CC1201_Nop(&final_status);
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f9c9 	bl	8000748 <CC1201_Nop>
    print_cc1201_status(final_status, "FINAL_STATUS");
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4907      	ldr	r1, [pc, #28]	@ (80013d8 <run_comprehensive_cc1201_tests+0x70>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc44 	bl	8000c48 <print_cc1201_status>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	08009900 	.word	0x08009900
 80013cc:	08009930 	.word	0x08009930
 80013d0:	08009964 	.word	0x08009964
 80013d4:	0800998c 	.word	0x0800998c
 80013d8:	080099bc 	.word	0x080099bc

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80013e2:	f000 f9dd 	bl	80017a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f000 feeb 	bl	80021c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f86d 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f000 f92d 	bl	800164c <MX_GPIO_Init>
  MX_SPI4_Init();
 80013f2:	f000 f8d5 	bl	80015a0 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 fc8c 	bl	8001d14 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 fc89 	bl	8001d14 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001402:	2002      	movs	r0, #2
 8001404:	f000 fc86 	bl	8001d14 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001408:	2101      	movs	r1, #1
 800140a:	2000      	movs	r0, #0
 800140c:	f000 fd76 	bl	8001efc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <main+0xd4>)
 8001412:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001416:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001418:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <main+0xd4>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <main+0xd4>)
 8001420:	2200      	movs	r2, #0
 8001422:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <main+0xd4>)
 8001426:	2200      	movs	r2, #0
 8001428:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800142a:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <main+0xd4>)
 800142c:	2200      	movs	r2, #0
 800142e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001430:	491f      	ldr	r1, [pc, #124]	@ (80014b0 <main+0xd4>)
 8001432:	2000      	movs	r0, #0
 8001434:	f000 fde6 	bl	8002004 <BSP_COM_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <main+0x66>
  {
    Error_Handler();
 800143e:	f000 f9ef 	bl	8001820 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8001442:	481c      	ldr	r0, [pc, #112]	@ (80014b4 <main+0xd8>)
 8001444:	f006 fe7c 	bl	8008140 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001448:	2000      	movs	r0, #0
 800144a:	f000 fcd9 	bl	8001e00 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 800144e:	481a      	ldr	r0, [pc, #104]	@ (80014b8 <main+0xdc>)
 8001450:	f006 fe76 	bl	8008140 <iprintf>

  uint8_t test_status = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f974 	bl	8000748 <CC1201_Nop>
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	79ba      	ldrb	r2, [r7, #6]
 8001468:	4619      	mov	r1, r3
 800146a:	4814      	ldr	r0, [pc, #80]	@ (80014bc <main+0xe0>)
 800146c:	f006 fe68 	bl	8008140 <iprintf>
  
  if (nop_result == HAL_OK) {
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <main+0xba>
      printf("Basic CC1201 communication working!\n\r");
 8001476:	4812      	ldr	r0, [pc, #72]	@ (80014c0 <main+0xe4>)
 8001478:	f006 fe62 	bl	8008140 <iprintf>
      BSP_LED_Off(LED_RED);
 800147c:	2002      	movs	r0, #2
 800147e:	f000 fce9 	bl	8001e54 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8001482:	2000      	movs	r0, #0
 8001484:	f000 fcbc 	bl	8001e00 <BSP_LED_On>
      
      // Run comprehensive tests
      HAL_Delay(1000); // Give user time to see initial results
 8001488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800148c:	f000 ff2a 	bl	80022e4 <HAL_Delay>
      run_comprehensive_cc1201_tests();
 8001490:	f7ff ff6a 	bl	8001368 <run_comprehensive_cc1201_tests>
 8001494:	e009      	b.n	80014aa <main+0xce>
  } else {
      printf("CC1201 communication failed!\n\r");
 8001496:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <main+0xe8>)
 8001498:	f006 fe52 	bl	8008140 <iprintf>
      BSP_LED_Off(LED_GREEN);
 800149c:	2000      	movs	r0, #0
 800149e:	f000 fcd9 	bl	8001e54 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 fcac 	bl	8001e00 <BSP_LED_On>
  }

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	e7fd      	b.n	80014aa <main+0xce>
 80014ae:	bf00      	nop
 80014b0:	240000a4 	.word	0x240000a4
 80014b4:	080099cc 	.word	0x080099cc
 80014b8:	080099e8 	.word	0x080099e8
 80014bc:	08009a18 	.word	0x08009a18
 80014c0:	08009a44 	.word	0x08009a44
 80014c4:	08009a6c 	.word	0x08009a6c

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b09c      	sub	sp, #112	@ 0x70
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d2:	224c      	movs	r2, #76	@ 0x4c
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f006 fe87 	bl	80081ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2220      	movs	r2, #32
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 fe81 	bl	80081ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014e8:	2002      	movs	r0, #2
 80014ea:	f001 fd5b 	bl	8002fa4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <SystemClock_Config+0xd0>)
 80014f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f6:	4a28      	ldr	r2, [pc, #160]	@ (8001598 <SystemClock_Config+0xd0>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <SystemClock_Config+0xd0>)
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	4b24      	ldr	r3, [pc, #144]	@ (800159c <SystemClock_Config+0xd4>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001510:	4a22      	ldr	r2, [pc, #136]	@ (800159c <SystemClock_Config+0xd4>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <SystemClock_Config+0xd4>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001524:	bf00      	nop
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <SystemClock_Config+0xd4>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800152e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001532:	d1f8      	bne.n	8001526 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001534:	2302      	movs	r3, #2
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001538:	2301      	movs	r3, #1
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153c:	2340      	movs	r3, #64	@ 0x40
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fd65 	bl	8003018 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001554:	f000 f964 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	233f      	movs	r3, #63	@ 0x3f
 800155a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2101      	movs	r1, #1
 800157e:	4618      	mov	r0, r3
 8001580:	f002 f9a4 	bl	80038cc <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800158a:	f000 f949 	bl	8001820 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3770      	adds	r7, #112	@ 0x70
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	58000400 	.word	0x58000400
 800159c:	58024800 	.word	0x58024800

080015a0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015a6:	4a28      	ldr	r2, [pc, #160]	@ (8001648 <MX_SPI4_Init+0xa8>)
 80015a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015d0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e4:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_SPI4_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <MX_SPI4_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <MX_SPI4_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <MX_SPI4_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_SPI4_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <MX_SPI4_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_SPI4_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <MX_SPI4_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_SPI4_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_SPI4_Init+0xa4>)
 8001630:	f004 fb04 	bl	8005c3c <HAL_SPI_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800163a:	f000 f8f1 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	240000b8 	.word	0x240000b8
 8001648:	40013400 	.word	0x40013400

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b2e      	ldr	r3, [pc, #184]	@ (800171c <MX_GPIO_Init+0xd0>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	4a2c      	ldr	r2, [pc, #176]	@ (800171c <MX_GPIO_Init+0xd0>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <MX_GPIO_Init+0xd0>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <MX_GPIO_Init+0xd0>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001686:	4a25      	ldr	r2, [pc, #148]	@ (800171c <MX_GPIO_Init+0xd0>)
 8001688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001690:	4b22      	ldr	r3, [pc, #136]	@ (800171c <MX_GPIO_Init+0xd0>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a4:	4a1d      	ldr	r2, [pc, #116]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ae:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_GPIO_Init+0xd0>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016f8:	2320      	movs	r3, #32
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_GPIO_Init+0xd4>)
 800170e:	f001 fa4b 	bl	8002ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58024400 	.word	0x58024400
 8001720:	58020c00 	.word	0x58020c00

08001724 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	2b20      	cmp	r3, #32
 8001732:	d129      	bne.n	8001788 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 8001734:	4816      	ldr	r0, [pc, #88]	@ (8001790 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001736:	f006 fd03 	bl	8008140 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 800173e:	f107 030f 	add.w	r3, r7, #15
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f8a8 	bl	8000898 <CC1201_ReadMARCState>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d104      	bne.n	8001758 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4619      	mov	r1, r3
 8001752:	4810      	ldr	r0, [pc, #64]	@ (8001794 <HAL_GPIO_EXTI_Callback+0x70>)
 8001754:	f006 fcf4 	bl	8008140 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 800175c:	f107 030e 	add.w	r3, r7, #14
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f8a7 	bl	80008b4 <CC1201_GetNumRXBytes>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	4619      	mov	r1, r3
 8001770:	4809      	ldr	r0, [pc, #36]	@ (8001798 <HAL_GPIO_EXTI_Callback+0x74>)
 8001772:	f006 fce5 	bl	8008140 <iprintf>
            if (rx_bytes > 0) {
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 800177c:	4807      	ldr	r0, [pc, #28]	@ (800179c <HAL_GPIO_EXTI_Callback+0x78>)
 800177e:	f006 fcdf 	bl	8008140 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 fb90 	bl	8001ea8 <BSP_LED_Toggle>
    }
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08009a8c 	.word	0x08009a8c
 8001794:	08009aac 	.word	0x08009aac
 8001798:	08009ad4 	.word	0x08009ad4
 800179c:	08009af0 	.word	0x08009af0

080017a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017b2:	f000 fed7 	bl	8002564 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80017c2:	231f      	movs	r3, #31
 80017c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80017c6:	2387      	movs	r3, #135	@ 0x87
 80017c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017ce:	2300      	movs	r3, #0
 80017d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017e2:	463b      	mov	r3, r7
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fef5 	bl	80025d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017ea:	2004      	movs	r0, #4
 80017ec:	f000 fed2 	bl	8002594 <HAL_MPU_Enable>

}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <BSP_PB_Callback+0x24>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	240000b4 	.word	0x240000b4

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <Error_Handler+0x8>

0800182c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_MspInit+0x30>)
 8001834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_MspInit+0x30>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_MspInit+0x30>)
 8001844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	58024400 	.word	0x58024400

08001860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0ba      	sub	sp, #232	@ 0xe8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	22c0      	movs	r2, #192	@ 0xc0
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f006 fcb2 	bl	80081ea <memset>
  if(hspi->Instance==SPI4)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a37      	ldr	r2, [pc, #220]	@ (8001968 <HAL_SPI_MspInit+0x108>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d166      	bne.n	800195e <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800189c:	2300      	movs	r3, #0
 800189e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fb9d 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80018b0:	f7ff ffb6 	bl	8001820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_SPI_MspInit+0x10c>)
 80018b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018ba:	4a2c      	ldr	r2, [pc, #176]	@ (800196c <HAL_SPI_MspInit+0x10c>)
 80018bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018c4:	4b29      	ldr	r3, [pc, #164]	@ (800196c <HAL_SPI_MspInit+0x10c>)
 80018c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d2:	4b26      	ldr	r3, [pc, #152]	@ (800196c <HAL_SPI_MspInit+0x10c>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d8:	4a24      	ldr	r2, [pc, #144]	@ (800196c <HAL_SPI_MspInit+0x10c>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e2:	4b22      	ldr	r3, [pc, #136]	@ (800196c <HAL_SPI_MspInit+0x10c>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    
    // Configure SPI pins (SCK, MISO, MOSI) 
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80018f0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80018f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Increased speed
 8001904:	2302      	movs	r3, #2
 8001906:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800190a:	2305      	movs	r3, #5
 800190c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001910:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001914:	4619      	mov	r1, r3
 8001916:	4816      	ldr	r0, [pc, #88]	@ (8001970 <HAL_SPI_MspInit+0x110>)
 8001918:	f001 f946 	bl	8002ba8 <HAL_GPIO_Init>
    
    // Configure PE11 as manual CS (GPIO output)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800191c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001936:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800193a:	4619      	mov	r1, r3
 800193c:	480c      	ldr	r0, [pc, #48]	@ (8001970 <HAL_SPI_MspInit+0x110>)
 800193e:	f001 f933 	bl	8002ba8 <HAL_GPIO_Init>
    
    // Set CS high (inactive) by default
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001948:	4809      	ldr	r0, [pc, #36]	@ (8001970 <HAL_SPI_MspInit+0x110>)
 800194a:	f001 fadd 	bl	8002f08 <HAL_GPIO_WritePin>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2054      	movs	r0, #84	@ 0x54
 8001954:	f000 fdd1 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001958:	2054      	movs	r0, #84	@ 0x54
 800195a:	f000 fde8 	bl	800252e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 800195e:	bf00      	nop
 8001960:	37e8      	adds	r7, #232	@ 0xe8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40013400 	.word	0x40013400
 800196c:	58024400 	.word	0x58024400
 8001970:	58021000 	.word	0x58021000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <NMI_Handler+0x4>

0800197c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <UsageFault_Handler+0x4>

0800199c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ca:	f000 fc6b 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 fb02 	bl	8001fe0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019e4:	2020      	movs	r0, #32
 80019e6:	f001 fac2 	bl	8002f6e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <SPI4_IRQHandler+0x10>)
 80019f6:	f004 ff6d 	bl	80068d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	240000b8 	.word	0x240000b8

08001a04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e00a      	b.n	8001a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	b2ca      	uxtb	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf0      	blt.n	8001a16 <_read+0x12>
  }

  return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e009      	b.n	8001a64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fb35 	bl	80020c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf1      	blt.n	8001a50 <_write+0x12>
  }
  return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_close>:

int _close(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f006 fbba 	bl	8008288 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24080000 	.word	0x24080000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	24000140 	.word	0x24000140
 8001b48:	24000338 	.word	0x24000338

08001b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b50:	4b43      	ldr	r3, [pc, #268]	@ (8001c60 <SystemInit+0x114>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b56:	4a42      	ldr	r2, [pc, #264]	@ (8001c60 <SystemInit+0x114>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b60:	4b40      	ldr	r3, [pc, #256]	@ (8001c64 <SystemInit+0x118>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	2b06      	cmp	r3, #6
 8001b6a:	d807      	bhi.n	8001b7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <SystemInit+0x118>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 030f 	bic.w	r3, r3, #15
 8001b74:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <SystemInit+0x118>)
 8001b76:	f043 0307 	orr.w	r3, r3, #7
 8001b7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c68 <SystemInit+0x11c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a39      	ldr	r2, [pc, #228]	@ (8001c68 <SystemInit+0x11c>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b88:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <SystemInit+0x11c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b8e:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <SystemInit+0x11c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4935      	ldr	r1, [pc, #212]	@ (8001c68 <SystemInit+0x11c>)
 8001b94:	4b35      	ldr	r3, [pc, #212]	@ (8001c6c <SystemInit+0x120>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <SystemInit+0x118>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <SystemInit+0x118>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 030f 	bic.w	r3, r3, #15
 8001bae:	4a2d      	ldr	r2, [pc, #180]	@ (8001c64 <SystemInit+0x118>)
 8001bb0:	f043 0307 	orr.w	r3, r3, #7
 8001bb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <SystemInit+0x11c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <SystemInit+0x11c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <SystemInit+0x11c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <SystemInit+0x11c>)
 8001bca:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <SystemInit+0x124>)
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bce:	4b26      	ldr	r3, [pc, #152]	@ (8001c68 <SystemInit+0x11c>)
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <SystemInit+0x128>)
 8001bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bd4:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <SystemInit+0x11c>)
 8001bd6:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <SystemInit+0x12c>)
 8001bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bda:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <SystemInit+0x11c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <SystemInit+0x11c>)
 8001be2:	4a25      	ldr	r2, [pc, #148]	@ (8001c78 <SystemInit+0x12c>)
 8001be4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001be6:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <SystemInit+0x11c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <SystemInit+0x11c>)
 8001bee:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <SystemInit+0x12c>)
 8001bf0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <SystemInit+0x11c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <SystemInit+0x11c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <SystemInit+0x11c>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <SystemInit+0x11c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <SystemInit+0x130>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <SystemInit+0x134>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c16:	d202      	bcs.n	8001c1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <SystemInit+0x138>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <SystemInit+0x11c>)
 8001c20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d113      	bne.n	8001c54 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <SystemInit+0x11c>)
 8001c2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c32:	4a0d      	ldr	r2, [pc, #52]	@ (8001c68 <SystemInit+0x11c>)
 8001c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c38:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <SystemInit+0x13c>)
 8001c3e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c42:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <SystemInit+0x11c>)
 8001c46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c4a:	4a07      	ldr	r2, [pc, #28]	@ (8001c68 <SystemInit+0x11c>)
 8001c4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c50:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00
 8001c64:	52002000 	.word	0x52002000
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c70:	02020200 	.word	0x02020200
 8001c74:	01ff0000 	.word	0x01ff0000
 8001c78:	01010280 	.word	0x01010280
 8001c7c:	5c001000 	.word	0x5c001000
 8001c80:	ffff0000 	.word	0xffff0000
 8001c84:	51008108 	.word	0x51008108
 8001c88:	52004000 	.word	0x52004000

08001c8c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <ExitRun0Mode+0x2c>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <ExitRun0Mode+0x2c>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c9c:	bf00      	nop
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <ExitRun0Mode+0x2c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f9      	beq.n	8001c9e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	58024800 	.word	0x58024800

08001cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001cf8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001cc0:	f7ff ffe4 	bl	8001c8c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc4:	f7ff ff42 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cca:	490d      	ldr	r1, [pc, #52]	@ (8001d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8001d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cee:	f006 fad1 	bl	8008294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff fb73 	bl	80013dc <main>
  bx  lr
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d00:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001d04:	08009b84 	.word	0x08009b84
  ldr r2, =_sbss
 8001d08:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001d0c:	24000334 	.word	0x24000334

08001d10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC3_IRQHandler>
	...

08001d14 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	@ 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <BSP_LED_Init+0x28>
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d006      	beq.n	8001d3c <BSP_LED_Init+0x28>
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d003      	beq.n	8001d3c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d34:	f06f 0301 	mvn.w	r3, #1
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d3a:	e055      	b.n	8001de8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001d42:	4b2c      	ldr	r3, [pc, #176]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d48:	4a2a      	ldr	r2, [pc, #168]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d52:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	e021      	b.n	8001da6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10f      	bne.n	8001d88 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d6e:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d70:	f043 0310 	orr.w	r3, r3, #16
 8001d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	e00e      	b.n	8001da6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <BSP_LED_Init+0xe0>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4a13      	ldr	r2, [pc, #76]	@ (8001df8 <BSP_LED_Init+0xe4>)
 8001daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dae:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <BSP_LED_Init+0xe8>)
 8001dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc4:	f107 0218 	add.w	r2, r7, #24
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 feec 	bl	8002ba8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <BSP_LED_Init+0xe8>)
 8001dd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <BSP_LED_Init+0xe4>)
 8001ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	f001 f890 	bl	8002f08 <HAL_GPIO_WritePin>
  }

  return ret;
 8001de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3730      	adds	r7, #48	@ 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	58024400 	.word	0x58024400
 8001df8:	08009b1c 	.word	0x08009b1c
 8001dfc:	2400000c 	.word	0x2400000c

08001e00 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <BSP_LED_On+0x28>
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d006      	beq.n	8001e28 <BSP_LED_On+0x28>
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d003      	beq.n	8001e28 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e20:	f06f 0301 	mvn.w	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e00b      	b.n	8001e40 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4a08      	ldr	r2, [pc, #32]	@ (8001e4c <BSP_LED_On+0x4c>)
 8001e2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <BSP_LED_On+0x50>)
 8001e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f001 f864 	bl	8002f08 <HAL_GPIO_WritePin>
  }

  return ret;
 8001e40:	68fb      	ldr	r3, [r7, #12]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2400000c 	.word	0x2400000c
 8001e50:	08009b1c 	.word	0x08009b1c

08001e54 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <BSP_LED_Off+0x28>
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d006      	beq.n	8001e7c <BSP_LED_Off+0x28>
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d003      	beq.n	8001e7c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e74:	f06f 0301 	mvn.w	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e00b      	b.n	8001e94 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ea0 <BSP_LED_Off+0x4c>)
 8001e80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4a07      	ldr	r2, [pc, #28]	@ (8001ea4 <BSP_LED_Off+0x50>)
 8001e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f001 f83a 	bl	8002f08 <HAL_GPIO_WritePin>
  }

  return ret;
 8001e94:	68fb      	ldr	r3, [r7, #12]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2400000c 	.word	0x2400000c
 8001ea4:	08009b1c 	.word	0x08009b1c

08001ea8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <BSP_LED_Toggle+0x28>
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d006      	beq.n	8001ed0 <BSP_LED_Toggle+0x28>
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d003      	beq.n	8001ed0 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ec8:	f06f 0301 	mvn.w	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e00b      	b.n	8001ee8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4a08      	ldr	r2, [pc, #32]	@ (8001ef4 <BSP_LED_Toggle+0x4c>)
 8001ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4907      	ldr	r1, [pc, #28]	@ (8001ef8 <BSP_LED_Toggle+0x50>)
 8001edc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f001 f829 	bl	8002f3a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2400000c 	.word	0x2400000c
 8001ef8:	08009b1c 	.word	0x08009b1c

08001efc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc8 <BSP_PB_Init+0xcc>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f12:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <BSP_PB_Init+0xcc>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc8 <BSP_PB_Init+0xcc>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f2e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001f30:	2302      	movs	r3, #2
 8001f32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001f38:	79bb      	ldrb	r3, [r7, #6]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10c      	bne.n	8001f58 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <BSP_PB_Init+0xd0>)
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fe29 	bl	8002ba8 <HAL_GPIO_Init>
 8001f56:	e031      	b.n	8001fbc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001f58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f5c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4a1a      	ldr	r2, [pc, #104]	@ (8001fcc <BSP_PB_Init+0xd0>)
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	f107 020c 	add.w	r2, r7, #12
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fe1b 	bl	8002ba8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4a16      	ldr	r2, [pc, #88]	@ (8001fd0 <BSP_PB_Init+0xd4>)
 8001f78:	441a      	add	r2, r3
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4915      	ldr	r1, [pc, #84]	@ (8001fd4 <BSP_PB_Init+0xd8>)
 8001f7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f000 fdca 	bl	8002b1e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <BSP_PB_Init+0xd4>)
 8001f90:	1898      	adds	r0, r3, r2
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <BSP_PB_Init+0xdc>)
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	f000 fd9f 	bl	8002ae0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001fa2:	2028      	movs	r0, #40	@ 0x28
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <BSP_PB_Init+0xe0>)
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f000 faa3 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001fb4:	2328      	movs	r3, #40	@ 0x28
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fab9 	bl	800252e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	24000018 	.word	0x24000018
 8001fd0:	24000144 	.word	0x24000144
 8001fd4:	08009b24 	.word	0x08009b24
 8001fd8:	2400001c 	.word	0x2400001c
 8001fdc:	24000020 	.word	0x24000020

08001fe0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <BSP_PB_IRQHandler+0x20>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fda8 	bl	8002b48 <HAL_EXTI_IRQHandler>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	24000144 	.word	0x24000144

08002004 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800201a:	f06f 0301 	mvn.w	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e018      	b.n	8002054 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2294      	movs	r2, #148	@ 0x94
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <BSP_COM_Init+0x5c>)
 800202c:	4413      	add	r3, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f86e 	bl	8002110 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	2294      	movs	r2, #148	@ 0x94
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <BSP_COM_Init+0x5c>)
 800203e:	4413      	add	r3, r2
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f80e 	bl	8002064 <MX_USART3_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800204e:	f06f 0303 	mvn.w	r3, #3
 8002052:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2400014c 	.word	0x2400014c

08002064 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <MX_USART3_Init+0x60>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	220c      	movs	r2, #12
 8002082:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	895b      	ldrh	r3, [r3, #10]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	891b      	ldrh	r3, [r3, #8]
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	899b      	ldrh	r3, [r3, #12]
 80020a4:	461a      	mov	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020b0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f004 ff11 	bl	8006eda <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	24000008 	.word	0x24000008

080020c8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <__io_putchar+0x30>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	2394      	movs	r3, #148	@ 0x94
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	4a07      	ldr	r2, [pc, #28]	@ (80020fc <__io_putchar+0x34>)
 80020de:	1898      	adds	r0, r3, r2
 80020e0:	1d39      	adds	r1, r7, #4
 80020e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e6:	2201      	movs	r2, #1
 80020e8:	f004 ff51 	bl	8006f8e <HAL_UART_Transmit>
  return ch;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	240001e0 	.word	0x240001e0
 80020fc:	2400014c 	.word	0x2400014c

08002100 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff fb77 	bl	80017f8 <BSP_PB_Callback>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	@ 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <COM1_MspInit+0xa8>)
 800211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211e:	4a26      	ldr	r2, [pc, #152]	@ (80021b8 <COM1_MspInit+0xa8>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002128:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <COM1_MspInit+0xa8>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002136:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <COM1_MspInit+0xa8>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213c:	4a1e      	ldr	r2, [pc, #120]	@ (80021b8 <COM1_MspInit+0xa8>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <COM1_MspInit+0xa8>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <COM1_MspInit+0xa8>)
 8002156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800215a:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <COM1_MspInit+0xa8>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002160:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002164:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <COM1_MspInit+0xa8>)
 8002166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800216a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002176:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800217c:	2302      	movs	r3, #2
 800217e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002180:	2301      	movs	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002184:	2307      	movs	r3, #7
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	480b      	ldr	r0, [pc, #44]	@ (80021bc <COM1_MspInit+0xac>)
 8002190:	f000 fd0a 	bl	8002ba8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002198:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800219e:	2307      	movs	r3, #7
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4804      	ldr	r0, [pc, #16]	@ (80021bc <COM1_MspInit+0xac>)
 80021aa:	f000 fcfd 	bl	8002ba8 <HAL_GPIO_Init>
}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	@ 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	58024400 	.word	0x58024400
 80021bc:	58020c00 	.word	0x58020c00

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c6:	2003      	movs	r0, #3
 80021c8:	f000 f98c 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021cc:	f001 fd34 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_Init+0x68>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	4913      	ldr	r1, [pc, #76]	@ (800222c <HAL_Init+0x6c>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <HAL_Init+0x68>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <HAL_Init+0x6c>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_Init+0x70>)
 8002202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002204:	4a0b      	ldr	r2, [pc, #44]	@ (8002234 <HAL_Init+0x74>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f814 	bl	8002238 <HAL_InitTick>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e002      	b.n	8002220 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800221a:	f7ff fb07 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	58024400 	.word	0x58024400
 800222c:	08009b0c 	.word	0x08009b0c
 8002230:	24000004 	.word	0x24000004
 8002234:	24000000 	.word	0x24000000

08002238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_InitTick+0x60>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e021      	b.n	8002290 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800224c:	4b13      	ldr	r3, [pc, #76]	@ (800229c <HAL_InitTick+0x64>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_InitTick+0x60>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f971 	bl	800254a <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 f93b 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	@ (80022a0 <HAL_InitTick+0x68>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	24000028 	.word	0x24000028
 800229c:	24000000 	.word	0x24000000
 80022a0:	24000024 	.word	0x24000024

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	24000028 	.word	0x24000028
 80022c8:	240001e4 	.word	0x240001e4

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	240001e4 	.word	0x240001e4

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	24000028 	.word	0x24000028

0800232c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_GetREVID+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0c1b      	lsrs	r3, r3, #16
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	5c001000 	.word	0x5c001000

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	4313      	orrs	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	05fa0000 	.word	0x05fa0000

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff40 	bl	800238c <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff33 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa4 	bl	80024a0 <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002568:	f3bf 8f5f 	dmb	sy
}
 800256c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800256e:	4b07      	ldr	r3, [pc, #28]	@ (800258c <HAL_MPU_Disable+0x28>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	4a06      	ldr	r2, [pc, #24]	@ (800258c <HAL_MPU_Disable+0x28>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002578:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800257a:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_MPU_Disable+0x2c>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00
 8002590:	e000ed90 	.word	0xe000ed90

08002594 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800259c:	4a0b      	ldr	r2, [pc, #44]	@ (80025cc <HAL_MPU_Enable+0x38>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_MPU_Enable+0x3c>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	4a09      	ldr	r2, [pc, #36]	@ (80025d0 <HAL_MPU_Enable+0x3c>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80025b2:	f3bf 8f4f 	dsb	sy
}
 80025b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025b8:	f3bf 8f6f 	isb	sy
}
 80025bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed90 	.word	0xe000ed90
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	785a      	ldrb	r2, [r3, #1]
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_MPU_ConfigRegion+0x7c>)
 80025e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80025e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <HAL_MPU_ConfigRegion+0x7c>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	4a19      	ldr	r2, [pc, #100]	@ (8002650 <HAL_MPU_ConfigRegion+0x7c>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025f0:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <HAL_MPU_ConfigRegion+0x7c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7b1b      	ldrb	r3, [r3, #12]
 80025fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7adb      	ldrb	r3, [r3, #11]
 8002602:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002604:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7a9b      	ldrb	r3, [r3, #10]
 800260a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800260c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7b5b      	ldrb	r3, [r3, #13]
 8002612:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002614:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7b9b      	ldrb	r3, [r3, #14]
 800261a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800261c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7bdb      	ldrb	r3, [r3, #15]
 8002622:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002624:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7a5b      	ldrb	r3, [r3, #9]
 800262a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800262c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7a1b      	ldrb	r3, [r3, #8]
 8002632:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002634:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	7812      	ldrb	r2, [r2, #0]
 800263a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800263c:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800263e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002640:	6113      	str	r3, [r2, #16]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed90 	.word	0xe000ed90

08002654 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e237      	b.n	8002ad6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d004      	beq.n	800267c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e22c      	b.n	8002ad6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5c      	ldr	r2, [pc, #368]	@ (80027f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d04a      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a5b      	ldr	r2, [pc, #364]	@ (80027f8 <HAL_DMA_Abort_IT+0x1a4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d045      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a59      	ldr	r2, [pc, #356]	@ (80027fc <HAL_DMA_Abort_IT+0x1a8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d040      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a58      	ldr	r2, [pc, #352]	@ (8002800 <HAL_DMA_Abort_IT+0x1ac>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d03b      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a56      	ldr	r2, [pc, #344]	@ (8002804 <HAL_DMA_Abort_IT+0x1b0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d036      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a55      	ldr	r2, [pc, #340]	@ (8002808 <HAL_DMA_Abort_IT+0x1b4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d031      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a53      	ldr	r2, [pc, #332]	@ (800280c <HAL_DMA_Abort_IT+0x1b8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02c      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a52      	ldr	r2, [pc, #328]	@ (8002810 <HAL_DMA_Abort_IT+0x1bc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d027      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <HAL_DMA_Abort_IT+0x1c0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d022      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a4f      	ldr	r2, [pc, #316]	@ (8002818 <HAL_DMA_Abort_IT+0x1c4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01d      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_DMA_Abort_IT+0x1c8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d018      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002820 <HAL_DMA_Abort_IT+0x1cc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002824 <HAL_DMA_Abort_IT+0x1d0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a49      	ldr	r2, [pc, #292]	@ (8002828 <HAL_DMA_Abort_IT+0x1d4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a47      	ldr	r2, [pc, #284]	@ (800282c <HAL_DMA_Abort_IT+0x1d8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_DMA_Abort_IT+0xc8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a46      	ldr	r2, [pc, #280]	@ (8002830 <HAL_DMA_Abort_IT+0x1dc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_DMA_Abort_IT+0xcc>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_DMA_Abort_IT+0xce>
 8002720:	2300      	movs	r3, #0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8086 	beq.w	8002834 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2204      	movs	r2, #4
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2f      	ldr	r2, [pc, #188]	@ (80027f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d04a      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2e      	ldr	r2, [pc, #184]	@ (80027f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d045      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2c      	ldr	r2, [pc, #176]	@ (80027fc <HAL_DMA_Abort_IT+0x1a8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d040      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2b      	ldr	r2, [pc, #172]	@ (8002800 <HAL_DMA_Abort_IT+0x1ac>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d03b      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a29      	ldr	r2, [pc, #164]	@ (8002804 <HAL_DMA_Abort_IT+0x1b0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d036      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a28      	ldr	r2, [pc, #160]	@ (8002808 <HAL_DMA_Abort_IT+0x1b4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d031      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a26      	ldr	r2, [pc, #152]	@ (800280c <HAL_DMA_Abort_IT+0x1b8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d02c      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a25      	ldr	r2, [pc, #148]	@ (8002810 <HAL_DMA_Abort_IT+0x1bc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d027      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <HAL_DMA_Abort_IT+0x1c0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d022      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a22      	ldr	r2, [pc, #136]	@ (8002818 <HAL_DMA_Abort_IT+0x1c4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d01d      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a20      	ldr	r2, [pc, #128]	@ (800281c <HAL_DMA_Abort_IT+0x1c8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d018      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002820 <HAL_DMA_Abort_IT+0x1cc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002824 <HAL_DMA_Abort_IT+0x1d0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <HAL_DMA_Abort_IT+0x1d4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <HAL_DMA_Abort_IT+0x1d8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x17c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <HAL_DMA_Abort_IT+0x1dc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <HAL_DMA_Abort_IT+0x18e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e178      	b.n	8002ad4 <HAL_DMA_Abort_IT+0x480>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e16f      	b.n	8002ad4 <HAL_DMA_Abort_IT+0x480>
 80027f4:	40020010 	.word	0x40020010
 80027f8:	40020028 	.word	0x40020028
 80027fc:	40020040 	.word	0x40020040
 8002800:	40020058 	.word	0x40020058
 8002804:	40020070 	.word	0x40020070
 8002808:	40020088 	.word	0x40020088
 800280c:	400200a0 	.word	0x400200a0
 8002810:	400200b8 	.word	0x400200b8
 8002814:	40020410 	.word	0x40020410
 8002818:	40020428 	.word	0x40020428
 800281c:	40020440 	.word	0x40020440
 8002820:	40020458 	.word	0x40020458
 8002824:	40020470 	.word	0x40020470
 8002828:	40020488 	.word	0x40020488
 800282c:	400204a0 	.word	0x400204a0
 8002830:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 020e 	bic.w	r2, r2, #14
 8002842:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a6c      	ldr	r2, [pc, #432]	@ (80029fc <HAL_DMA_Abort_IT+0x3a8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d04a      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6b      	ldr	r2, [pc, #428]	@ (8002a00 <HAL_DMA_Abort_IT+0x3ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d045      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a69      	ldr	r2, [pc, #420]	@ (8002a04 <HAL_DMA_Abort_IT+0x3b0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d040      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a68      	ldr	r2, [pc, #416]	@ (8002a08 <HAL_DMA_Abort_IT+0x3b4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d03b      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a66      	ldr	r2, [pc, #408]	@ (8002a0c <HAL_DMA_Abort_IT+0x3b8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d036      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a65      	ldr	r2, [pc, #404]	@ (8002a10 <HAL_DMA_Abort_IT+0x3bc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d031      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a63      	ldr	r2, [pc, #396]	@ (8002a14 <HAL_DMA_Abort_IT+0x3c0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d02c      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a62      	ldr	r2, [pc, #392]	@ (8002a18 <HAL_DMA_Abort_IT+0x3c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d027      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a60      	ldr	r2, [pc, #384]	@ (8002a1c <HAL_DMA_Abort_IT+0x3c8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d022      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a20 <HAL_DMA_Abort_IT+0x3cc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01d      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002a24 <HAL_DMA_Abort_IT+0x3d0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d018      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a28 <HAL_DMA_Abort_IT+0x3d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a2c <HAL_DMA_Abort_IT+0x3d8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a59      	ldr	r2, [pc, #356]	@ (8002a30 <HAL_DMA_Abort_IT+0x3dc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a57      	ldr	r2, [pc, #348]	@ (8002a34 <HAL_DMA_Abort_IT+0x3e0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x290>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a56      	ldr	r2, [pc, #344]	@ (8002a38 <HAL_DMA_Abort_IT+0x3e4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <HAL_DMA_Abort_IT+0x2a2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e007      	b.n	8002906 <HAL_DMA_Abort_IT+0x2b2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3c      	ldr	r2, [pc, #240]	@ (80029fc <HAL_DMA_Abort_IT+0x3a8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d072      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3a      	ldr	r2, [pc, #232]	@ (8002a00 <HAL_DMA_Abort_IT+0x3ac>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d06d      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a39      	ldr	r2, [pc, #228]	@ (8002a04 <HAL_DMA_Abort_IT+0x3b0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d068      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a37      	ldr	r2, [pc, #220]	@ (8002a08 <HAL_DMA_Abort_IT+0x3b4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d063      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <HAL_DMA_Abort_IT+0x3b8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d05e      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a34      	ldr	r2, [pc, #208]	@ (8002a10 <HAL_DMA_Abort_IT+0x3bc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d059      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a33      	ldr	r2, [pc, #204]	@ (8002a14 <HAL_DMA_Abort_IT+0x3c0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d054      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a31      	ldr	r2, [pc, #196]	@ (8002a18 <HAL_DMA_Abort_IT+0x3c4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d04f      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a30      	ldr	r2, [pc, #192]	@ (8002a1c <HAL_DMA_Abort_IT+0x3c8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d04a      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2e      	ldr	r2, [pc, #184]	@ (8002a20 <HAL_DMA_Abort_IT+0x3cc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d045      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a24 <HAL_DMA_Abort_IT+0x3d0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d040      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2b      	ldr	r2, [pc, #172]	@ (8002a28 <HAL_DMA_Abort_IT+0x3d4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d03b      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2a      	ldr	r2, [pc, #168]	@ (8002a2c <HAL_DMA_Abort_IT+0x3d8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d036      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a28      	ldr	r2, [pc, #160]	@ (8002a30 <HAL_DMA_Abort_IT+0x3dc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d031      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a27      	ldr	r2, [pc, #156]	@ (8002a34 <HAL_DMA_Abort_IT+0x3e0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d02c      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a25      	ldr	r2, [pc, #148]	@ (8002a38 <HAL_DMA_Abort_IT+0x3e4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d027      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a24      	ldr	r2, [pc, #144]	@ (8002a3c <HAL_DMA_Abort_IT+0x3e8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d022      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a22      	ldr	r2, [pc, #136]	@ (8002a40 <HAL_DMA_Abort_IT+0x3ec>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01d      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a21      	ldr	r2, [pc, #132]	@ (8002a44 <HAL_DMA_Abort_IT+0x3f0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d018      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <HAL_DMA_Abort_IT+0x3f4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a4c <HAL_DMA_Abort_IT+0x3f8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a50 <HAL_DMA_Abort_IT+0x3fc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d009      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a54 <HAL_DMA_Abort_IT+0x400>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x3a2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a19      	ldr	r2, [pc, #100]	@ (8002a58 <HAL_DMA_Abort_IT+0x404>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d132      	bne.n	8002a5c <HAL_DMA_Abort_IT+0x408>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e031      	b.n	8002a5e <HAL_DMA_Abort_IT+0x40a>
 80029fa:	bf00      	nop
 80029fc:	40020010 	.word	0x40020010
 8002a00:	40020028 	.word	0x40020028
 8002a04:	40020040 	.word	0x40020040
 8002a08:	40020058 	.word	0x40020058
 8002a0c:	40020070 	.word	0x40020070
 8002a10:	40020088 	.word	0x40020088
 8002a14:	400200a0 	.word	0x400200a0
 8002a18:	400200b8 	.word	0x400200b8
 8002a1c:	40020410 	.word	0x40020410
 8002a20:	40020428 	.word	0x40020428
 8002a24:	40020440 	.word	0x40020440
 8002a28:	40020458 	.word	0x40020458
 8002a2c:	40020470 	.word	0x40020470
 8002a30:	40020488 	.word	0x40020488
 8002a34:	400204a0 	.word	0x400204a0
 8002a38:	400204b8 	.word	0x400204b8
 8002a3c:	58025408 	.word	0x58025408
 8002a40:	5802541c 	.word	0x5802541c
 8002a44:	58025430 	.word	0x58025430
 8002a48:	58025444 	.word	0x58025444
 8002a4c:	58025458 	.word	0x58025458
 8002a50:	5802546c 	.word	0x5802546c
 8002a54:	58025480 	.word	0x58025480
 8002a58:	58025494 	.word	0x58025494
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d028      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ab2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop

08002ae0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e00a      	b.n	8002b12 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	605a      	str	r2, [r3, #4]
      break;
 8002b08:	e002      	b.n	8002b10 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b0e:	bf00      	nop
  }

  return status;
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e003      	b.n	8002b3a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
  }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2201      	movs	r2, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	011a      	lsls	r2, r3, #4
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <HAL_EXTI_IRQHandler+0x5c>)
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4798      	blx	r3
    }
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	58000088 	.word	0x58000088

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	@ 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bb6:	4b89      	ldr	r3, [pc, #548]	@ (8002ddc <HAL_GPIO_Init+0x234>)
 8002bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bba:	e194      	b.n	8002ee6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8186 	beq.w	8002ee0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d005      	beq.n	8002bec <HAL_GPIO_Init+0x44>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d130      	bne.n	8002c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c22:	2201      	movs	r2, #1
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0201 	and.w	r2, r3, #1
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d017      	beq.n	8002c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d123      	bne.n	8002cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80e0 	beq.w	8002ee0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d20:	4b2f      	ldr	r3, [pc, #188]	@ (8002de0 <HAL_GPIO_Init+0x238>)
 8002d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d26:	4a2e      	ldr	r2, [pc, #184]	@ (8002de0 <HAL_GPIO_Init+0x238>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d30:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <HAL_GPIO_Init+0x238>)
 8002d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d3e:	4a29      	ldr	r2, [pc, #164]	@ (8002de4 <HAL_GPIO_Init+0x23c>)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a20      	ldr	r2, [pc, #128]	@ (8002de8 <HAL_GPIO_Init+0x240>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d052      	beq.n	8002e10 <HAL_GPIO_Init+0x268>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dec <HAL_GPIO_Init+0x244>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_GPIO_Init+0x22e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <HAL_GPIO_Init+0x248>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <HAL_GPIO_Init+0x22a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <HAL_GPIO_Init+0x24c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d025      	beq.n	8002dce <HAL_GPIO_Init+0x226>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <HAL_GPIO_Init+0x250>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <HAL_GPIO_Init+0x222>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dfc <HAL_GPIO_Init+0x254>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x21e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	@ (8002e00 <HAL_GPIO_Init+0x258>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x21a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <HAL_GPIO_Init+0x25c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x216>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <HAL_GPIO_Init+0x260>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x212>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <HAL_GPIO_Init+0x264>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x20e>
 8002db2:	2309      	movs	r3, #9
 8002db4:	e02d      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002db6:	230a      	movs	r3, #10
 8002db8:	e02b      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e029      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e027      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e025      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e023      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e021      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e01f      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e01d      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e01b      	b.n	8002e12 <HAL_GPIO_Init+0x26a>
 8002dda:	bf00      	nop
 8002ddc:	58000080 	.word	0x58000080
 8002de0:	58024400 	.word	0x58024400
 8002de4:	58000400 	.word	0x58000400
 8002de8:	58020000 	.word	0x58020000
 8002dec:	58020400 	.word	0x58020400
 8002df0:	58020800 	.word	0x58020800
 8002df4:	58020c00 	.word	0x58020c00
 8002df8:	58021000 	.word	0x58021000
 8002dfc:	58021400 	.word	0x58021400
 8002e00:	58021800 	.word	0x58021800
 8002e04:	58021c00 	.word	0x58021c00
 8002e08:	58022000 	.word	0x58022000
 8002e0c:	58022400 	.word	0x58022400
 8002e10:	2300      	movs	r3, #0
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e22:	4938      	ldr	r1, [pc, #224]	@ (8002f04 <HAL_GPIO_Init+0x35c>)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f ae63 	bne.w	8002bbc <HAL_GPIO_Init+0x14>
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	3724      	adds	r7, #36	@ 0x24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	58000400 	.word	0x58000400

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f4c:	887a      	ldrh	r2, [r7, #2]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	041a      	lsls	r2, r3, #16
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	619a      	str	r2, [r3, #24]
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe fbc5 	bl	8001724 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002fac:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <HAL_PWREx_ConfigSupply+0x70>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d00a      	beq.n	8002fce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002fb8:	4b16      	ldr	r3, [pc, #88]	@ (8003014 <HAL_PWREx_ConfigSupply+0x70>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e01f      	b.n	800300a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e01d      	b.n	800300a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fce:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_PWREx_ConfigSupply+0x70>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	490f      	ldr	r1, [pc, #60]	@ (8003014 <HAL_PWREx_ConfigSupply+0x70>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fde:	f7ff f975 	bl	80022cc <HAL_GetTick>
 8002fe2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fe4:	e009      	b.n	8002ffa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fe6:	f7ff f971 	bl	80022cc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ff4:	d901      	bls.n	8002ffa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e007      	b.n	800300a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_PWREx_ConfigSupply+0x70>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003006:	d1ee      	bne.n	8002fe6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	58024800 	.word	0x58024800

08003018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	@ 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f000 bc48 	b.w	80038bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8088 	beq.w	800314a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303a:	4b99      	ldr	r3, [pc, #612]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003044:	4b96      	ldr	r3, [pc, #600]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800304a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304c:	2b10      	cmp	r3, #16
 800304e:	d007      	beq.n	8003060 <HAL_RCC_OscConfig+0x48>
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	2b18      	cmp	r3, #24
 8003054:	d111      	bne.n	800307a <HAL_RCC_OscConfig+0x62>
 8003056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d10c      	bne.n	800307a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	4b8f      	ldr	r3, [pc, #572]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d06d      	beq.n	8003148 <HAL_RCC_OscConfig+0x130>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d169      	bne.n	8003148 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f000 bc21 	b.w	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x7a>
 8003084:	4b86      	ldr	r3, [pc, #536]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a85      	ldr	r2, [pc, #532]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800308a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e02e      	b.n	80030f0 <HAL_RCC_OscConfig+0xd8>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x9c>
 800309a:	4b81      	ldr	r3, [pc, #516]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a80      	ldr	r2, [pc, #512]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b7e      	ldr	r3, [pc, #504]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a7d      	ldr	r2, [pc, #500]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xd8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030be:	4b78      	ldr	r3, [pc, #480]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a77      	ldr	r2, [pc, #476]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b75      	ldr	r3, [pc, #468]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a74      	ldr	r2, [pc, #464]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xd8>
 80030d8:	4b71      	ldr	r3, [pc, #452]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a70      	ldr	r2, [pc, #448]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b6e      	ldr	r3, [pc, #440]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6d      	ldr	r2, [pc, #436]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7ff f8e8 	bl	80022cc <HAL_GetTick>
 80030fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7ff f8e4 	bl	80022cc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e3d4      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003112:	4b63      	ldr	r3, [pc, #396]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7ff f8d4 	bl	80022cc <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7ff f8d0 	bl	80022cc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e3c0      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313a:	4b59      	ldr	r3, [pc, #356]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x110>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80ca 	beq.w	80032ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003158:	4b51      	ldr	r3, [pc, #324]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003160:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003162:	4b4f      	ldr	r3, [pc, #316]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_RCC_OscConfig+0x166>
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2b18      	cmp	r3, #24
 8003172:	d156      	bne.n	8003222 <HAL_RCC_OscConfig+0x20a>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d151      	bne.n	8003222 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317e:	4b48      	ldr	r3, [pc, #288]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e392      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003196:	4b42      	ldr	r3, [pc, #264]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 0219 	bic.w	r2, r3, #25
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	493f      	ldr	r1, [pc, #252]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff f890 	bl	80022cc <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7ff f88c 	bl	80022cc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e37c      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c2:	4b37      	ldr	r3, [pc, #220]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	f7ff f8ad 	bl	800232c <HAL_GetREVID>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031d8:	4293      	cmp	r3, r2
 80031da:	d817      	bhi.n	800320c <HAL_RCC_OscConfig+0x1f4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b40      	cmp	r3, #64	@ 0x40
 80031e2:	d108      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1de>
 80031e4:	4b2e      	ldr	r3, [pc, #184]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80031ec:	4a2c      	ldr	r2, [pc, #176]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f4:	e07a      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b2a      	ldr	r3, [pc, #168]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	031b      	lsls	r3, r3, #12
 8003204:	4926      	ldr	r1, [pc, #152]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320a:	e06f      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	4921      	ldr	r1, [pc, #132]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003220:	e064      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d047      	beq.n	80032ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800322a:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0219 	bic.w	r2, r3, #25
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	491a      	ldr	r1, [pc, #104]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7ff f846 	bl	80022cc <HAL_GetTick>
 8003240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7ff f842 	bl	80022cc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e332      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003256:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	f7ff f863 	bl	800232c <HAL_GetREVID>
 8003266:	4603      	mov	r3, r0
 8003268:	f241 0203 	movw	r2, #4099	@ 0x1003
 800326c:	4293      	cmp	r3, r2
 800326e:	d819      	bhi.n	80032a4 <HAL_RCC_OscConfig+0x28c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d108      	bne.n	800328a <HAL_RCC_OscConfig+0x272>
 8003278:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003280:	4a07      	ldr	r2, [pc, #28]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003286:	6053      	str	r3, [r2, #4]
 8003288:	e030      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
 800328a:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	031b      	lsls	r3, r3, #12
 8003298:	4901      	ldr	r1, [pc, #4]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
 800329e:	e025      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
 80032a0:	58024400 	.word	0x58024400
 80032a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	4997      	ldr	r1, [pc, #604]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
 80032b8:	e018      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b95      	ldr	r3, [pc, #596]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a94      	ldr	r2, [pc, #592]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7ff f801 	bl	80022cc <HAL_GetTick>
 80032ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe fffd 	bl	80022cc <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e2ed      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032e0:	4b8b      	ldr	r3, [pc, #556]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a9 	beq.w	800344c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003302:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003304:	4b82      	ldr	r3, [pc, #520]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d007      	beq.n	8003320 <HAL_RCC_OscConfig+0x308>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b18      	cmp	r3, #24
 8003314:	d13a      	bne.n	800338c <HAL_RCC_OscConfig+0x374>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d135      	bne.n	800338c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003320:	4b7b      	ldr	r3, [pc, #492]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x320>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b80      	cmp	r3, #128	@ 0x80
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e2c1      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003338:	f7fe fff8 	bl	800232c <HAL_GetREVID>
 800333c:	4603      	mov	r3, r0
 800333e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003342:	4293      	cmp	r3, r2
 8003344:	d817      	bhi.n	8003376 <HAL_RCC_OscConfig+0x35e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	2b20      	cmp	r3, #32
 800334c:	d108      	bne.n	8003360 <HAL_RCC_OscConfig+0x348>
 800334e:	4b70      	ldr	r3, [pc, #448]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003356:	4a6e      	ldr	r2, [pc, #440]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003358:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800335c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800335e:	e075      	b.n	800344c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003360:	4b6b      	ldr	r3, [pc, #428]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	069b      	lsls	r3, r3, #26
 800336e:	4968      	ldr	r1, [pc, #416]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003374:	e06a      	b.n	800344c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003376:	4b66      	ldr	r3, [pc, #408]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4962      	ldr	r1, [pc, #392]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800338a:	e05f      	b.n	800344c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d042      	beq.n	800341a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003394:	4b5e      	ldr	r3, [pc, #376]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5d      	ldr	r2, [pc, #372]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 800339a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe ff94 	bl	80022cc <HAL_GetTick>
 80033a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033a8:	f7fe ff90 	bl	80022cc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e280      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033ba:	4b55      	ldr	r3, [pc, #340]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033c6:	f7fe ffb1 	bl	800232c <HAL_GetREVID>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d817      	bhi.n	8003404 <HAL_RCC_OscConfig+0x3ec>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d108      	bne.n	80033ee <HAL_RCC_OscConfig+0x3d6>
 80033dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ea:	6053      	str	r3, [r2, #4]
 80033ec:	e02e      	b.n	800344c <HAL_RCC_OscConfig+0x434>
 80033ee:	4b48      	ldr	r3, [pc, #288]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	069b      	lsls	r3, r3, #26
 80033fc:	4944      	ldr	r1, [pc, #272]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
 8003402:	e023      	b.n	800344c <HAL_RCC_OscConfig+0x434>
 8003404:	4b42      	ldr	r3, [pc, #264]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	493f      	ldr	r1, [pc, #252]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003414:	4313      	orrs	r3, r2
 8003416:	60cb      	str	r3, [r1, #12]
 8003418:	e018      	b.n	800344c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800341a:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fe ff51 	bl	80022cc <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800342e:	f7fe ff4d 	bl	80022cc <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e23d      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003440:	4b33      	ldr	r3, [pc, #204]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d036      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d019      	beq.n	8003494 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003460:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003464:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe ff2e 	bl	80022cc <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003474:	f7fe ff2a 	bl	80022cc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e21a      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x45c>
 8003492:	e018      	b.n	80034c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003494:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003498:	4a1d      	ldr	r2, [pc, #116]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe ff14 	bl	80022cc <HAL_GetTick>
 80034a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fe ff10 	bl	80022cc <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e200      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d039      	beq.n	8003546 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01c      	beq.n	8003514 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034da:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a0c      	ldr	r2, [pc, #48]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fef1 	bl	80022cc <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ee:	f7fe feed 	bl	80022cc <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1dd      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x4d6>
 800350c:	e01b      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
 800350e:	bf00      	nop
 8003510:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003514:	4b9b      	ldr	r3, [pc, #620]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a9a      	ldr	r2, [pc, #616]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800351a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800351e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003520:	f7fe fed4 	bl	80022cc <HAL_GetTick>
 8003524:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003528:	f7fe fed0 	bl	80022cc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1c0      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800353a:	4b92      	ldr	r3, [pc, #584]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8081 	beq.w	8003656 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003554:	4b8c      	ldr	r3, [pc, #560]	@ (8003788 <HAL_RCC_OscConfig+0x770>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a8b      	ldr	r2, [pc, #556]	@ (8003788 <HAL_RCC_OscConfig+0x770>)
 800355a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003560:	f7fe feb4 	bl	80022cc <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003568:	f7fe feb0 	bl	80022cc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1a0      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357a:	4b83      	ldr	r3, [pc, #524]	@ (8003788 <HAL_RCC_OscConfig+0x770>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x584>
 800358e:	4b7d      	ldr	r3, [pc, #500]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a7c      	ldr	r2, [pc, #496]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
 800359a:	e02d      	b.n	80035f8 <HAL_RCC_OscConfig+0x5e0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x5a6>
 80035a4:	4b77      	ldr	r3, [pc, #476]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	4a76      	ldr	r2, [pc, #472]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b0:	4b74      	ldr	r3, [pc, #464]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	4a73      	ldr	r2, [pc, #460]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035b6:	f023 0304 	bic.w	r3, r3, #4
 80035ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80035bc:	e01c      	b.n	80035f8 <HAL_RCC_OscConfig+0x5e0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c8>
 80035c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0x5e0>
 80035e0:	4b68      	ldr	r3, [pc, #416]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e4:	4a67      	ldr	r2, [pc, #412]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ec:	4b65      	ldr	r3, [pc, #404]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	4a64      	ldr	r2, [pc, #400]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035f2:	f023 0304 	bic.w	r3, r3, #4
 80035f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe fe64 	bl	80022cc <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fe fe60 	bl	80022cc <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e14e      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800361e:	4b59      	ldr	r3, [pc, #356]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0ee      	beq.n	8003608 <HAL_RCC_OscConfig+0x5f0>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe fe4e 	bl	80022cc <HAL_GetTick>
 8003630:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe fe4a 	bl	80022cc <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e138      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800364a:	4b4e      	ldr	r3, [pc, #312]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ee      	bne.n	8003634 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 812d 	beq.w	80038ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003660:	4b48      	ldr	r3, [pc, #288]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003668:	2b18      	cmp	r3, #24
 800366a:	f000 80bd 	beq.w	80037e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b02      	cmp	r3, #2
 8003674:	f040 809e 	bne.w	80037b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b42      	ldr	r3, [pc, #264]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a41      	ldr	r2, [pc, #260]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800367e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe fe22 	bl	80022cc <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fe fe1e 	bl	80022cc <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e10e      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800369e:	4b39      	ldr	r3, [pc, #228]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036aa:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ae:	4b37      	ldr	r3, [pc, #220]	@ (800378c <HAL_RCC_OscConfig+0x774>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	430a      	orrs	r2, r1
 80036be:	4931      	ldr	r1, [pc, #196]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	3b01      	subs	r3, #1
 80036ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d2:	3b01      	subs	r3, #1
 80036d4:	025b      	lsls	r3, r3, #9
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036de:	3b01      	subs	r3, #1
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	3b01      	subs	r3, #1
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036f4:	4923      	ldr	r1, [pc, #140]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036fa:	4b22      	ldr	r3, [pc, #136]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fe:	4a21      	ldr	r2, [pc, #132]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003706:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800370a:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003712:	00d2      	lsls	r2, r2, #3
 8003714:	491b      	ldr	r1, [pc, #108]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800371a:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	f023 020c 	bic.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	4917      	ldr	r1, [pc, #92]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800372c:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	f023 0202 	bic.w	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	4912      	ldr	r1, [pc, #72]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800373e:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	4a10      	ldr	r2, [pc, #64]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374a:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003756:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003762:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	4a07      	ldr	r2, [pc, #28]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376e:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003774:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fe fda7 	bl	80022cc <HAL_GetTick>
 800377e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003780:	e011      	b.n	80037a6 <HAL_RCC_OscConfig+0x78e>
 8003782:	bf00      	nop
 8003784:	58024400 	.word	0x58024400
 8003788:	58024800 	.word	0x58024800
 800378c:	fffffc0c 	.word	0xfffffc0c
 8003790:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fd9a 	bl	80022cc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e08a      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037a6:	4b47      	ldr	r3, [pc, #284]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x77c>
 80037b2:	e082      	b.n	80038ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4b43      	ldr	r3, [pc, #268]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a42      	ldr	r2, [pc, #264]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe fd84 	bl	80022cc <HAL_GetTick>
 80037c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe fd80 	bl	80022cc <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e070      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037da:	4b3a      	ldr	r3, [pc, #232]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x7b0>
 80037e6:	e068      	b.n	80038ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037e8:	4b36      	ldr	r3, [pc, #216]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037ee:	4b35      	ldr	r3, [pc, #212]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d031      	beq.n	8003860 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d12a      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d122      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d11a      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	0a5b      	lsrs	r3, r3, #9
 800382e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d111      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d108      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0e1b      	lsrs	r3, r3, #24
 8003852:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e02b      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003864:	4b17      	ldr	r3, [pc, #92]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 8003866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800386e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	429a      	cmp	r2, r3
 8003878:	d01f      	beq.n	80038ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800387a:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	4a11      	ldr	r2, [pc, #68]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003886:	f7fe fd21 	bl	80022cc <HAL_GetTick>
 800388a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800388c:	bf00      	nop
 800388e:	f7fe fd1d 	bl	80022cc <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	4293      	cmp	r3, r2
 8003898:	d0f9      	beq.n	800388e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800389a:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 800389c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_RCC_OscConfig+0x8b0>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038a6:	00d2      	lsls	r2, r2, #3
 80038a8:	4906      	ldr	r1, [pc, #24]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038ae:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	4a04      	ldr	r2, [pc, #16]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3730      	adds	r7, #48	@ 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	58024400 	.word	0x58024400
 80038c8:	ffff0007 	.word	0xffff0007

080038cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e19c      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b8a      	ldr	r3, [pc, #552]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d910      	bls.n	8003910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b87      	ldr	r3, [pc, #540]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 020f 	bic.w	r2, r3, #15
 80038f6:	4985      	ldr	r1, [pc, #532]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b83      	ldr	r3, [pc, #524]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e184      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	4b7b      	ldr	r3, [pc, #492]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003928:	429a      	cmp	r2, r3
 800392a:	d908      	bls.n	800393e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800392c:	4b78      	ldr	r3, [pc, #480]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	4975      	ldr	r1, [pc, #468]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800393a:	4313      	orrs	r3, r2
 800393c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	4b70      	ldr	r3, [pc, #448]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003956:	429a      	cmp	r2, r3
 8003958:	d908      	bls.n	800396c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800395a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	496a      	ldr	r1, [pc, #424]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003968:	4313      	orrs	r3, r2
 800396a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699a      	ldr	r2, [r3, #24]
 800397c:	4b64      	ldr	r3, [pc, #400]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003984:	429a      	cmp	r2, r3
 8003986:	d908      	bls.n	800399a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003988:	4b61      	ldr	r3, [pc, #388]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	495e      	ldr	r1, [pc, #376]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003996:	4313      	orrs	r3, r2
 8003998:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d010      	beq.n	80039c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	4b59      	ldr	r3, [pc, #356]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d908      	bls.n	80039c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039b6:	4b56      	ldr	r3, [pc, #344]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4953      	ldr	r1, [pc, #332]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d908      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f023 020f 	bic.w	r2, r3, #15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4947      	ldr	r1, [pc, #284]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d055      	beq.n	8003aae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a02:	4b43      	ldr	r3, [pc, #268]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	4940      	ldr	r1, [pc, #256]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d121      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0f6      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a34:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d115      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0ea      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0de      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0d6      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6c:	4b28      	ldr	r3, [pc, #160]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f023 0207 	bic.w	r2, r3, #7
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4925      	ldr	r1, [pc, #148]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7e:	f7fe fc25 	bl	80022cc <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a86:	f7fe fc21 	bl	80022cc <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0be      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d1eb      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d208      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aca:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	490e      	ldr	r1, [pc, #56]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003adc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d214      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 020f 	bic.w	r2, r3, #15
 8003af2:	4906      	ldr	r1, [pc, #24]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e086      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
 8003b0c:	52002000 	.word	0x52002000
 8003b10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	4b3f      	ldr	r3, [pc, #252]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d208      	bcs.n	8003b42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b30:	4b3c      	ldr	r3, [pc, #240]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	4939      	ldr	r1, [pc, #228]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	4b34      	ldr	r3, [pc, #208]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d208      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b5e:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	492e      	ldr	r1, [pc, #184]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d208      	bcs.n	8003b9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b8c:	4b25      	ldr	r3, [pc, #148]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4922      	ldr	r1, [pc, #136]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d010      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d208      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bba:	4b1a      	ldr	r3, [pc, #104]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4917      	ldr	r1, [pc, #92]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bcc:	f000 f834 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	4912      	ldr	r1, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x35c>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bea:	4b0e      	ldr	r3, [pc, #56]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c28 <HAL_RCC_ClockConfig+0x35c>)
 8003bf4:	5cd3      	ldrb	r3, [r2, r3]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x360>)
 8003c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c04:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <HAL_RCC_ClockConfig+0x364>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_RCC_ClockConfig+0x368>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fb12 	bl	8002238 <HAL_InitTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	58024400 	.word	0x58024400
 8003c28:	08009b0c 	.word	0x08009b0c
 8003c2c:	24000004 	.word	0x24000004
 8003c30:	24000000 	.word	0x24000000
 8003c34:	24000024 	.word	0x24000024

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	@ 0x24
 8003c3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3e:	4bb3      	ldr	r3, [pc, #716]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c46:	2b18      	cmp	r3, #24
 8003c48:	f200 8155 	bhi.w	8003ef6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003cb9 	.word	0x08003cb9
 8003c58:	08003ef7 	.word	0x08003ef7
 8003c5c:	08003ef7 	.word	0x08003ef7
 8003c60:	08003ef7 	.word	0x08003ef7
 8003c64:	08003ef7 	.word	0x08003ef7
 8003c68:	08003ef7 	.word	0x08003ef7
 8003c6c:	08003ef7 	.word	0x08003ef7
 8003c70:	08003ef7 	.word	0x08003ef7
 8003c74:	08003cdf 	.word	0x08003cdf
 8003c78:	08003ef7 	.word	0x08003ef7
 8003c7c:	08003ef7 	.word	0x08003ef7
 8003c80:	08003ef7 	.word	0x08003ef7
 8003c84:	08003ef7 	.word	0x08003ef7
 8003c88:	08003ef7 	.word	0x08003ef7
 8003c8c:	08003ef7 	.word	0x08003ef7
 8003c90:	08003ef7 	.word	0x08003ef7
 8003c94:	08003ce5 	.word	0x08003ce5
 8003c98:	08003ef7 	.word	0x08003ef7
 8003c9c:	08003ef7 	.word	0x08003ef7
 8003ca0:	08003ef7 	.word	0x08003ef7
 8003ca4:	08003ef7 	.word	0x08003ef7
 8003ca8:	08003ef7 	.word	0x08003ef7
 8003cac:	08003ef7 	.word	0x08003ef7
 8003cb0:	08003ef7 	.word	0x08003ef7
 8003cb4:	08003ceb 	.word	0x08003ceb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb8:	4b94      	ldr	r3, [pc, #592]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cc4:	4b91      	ldr	r3, [pc, #580]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	4a90      	ldr	r2, [pc, #576]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cd6:	e111      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cd8:	4b8d      	ldr	r3, [pc, #564]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cda:	61bb      	str	r3, [r7, #24]
      break;
 8003cdc:	e10e      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003cde:	4b8d      	ldr	r3, [pc, #564]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ce0:	61bb      	str	r3, [r7, #24]
      break;
 8003ce2:	e10b      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ce6:	61bb      	str	r3, [r7, #24]
      break;
 8003ce8:	e108      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cea:	4b88      	ldr	r3, [pc, #544]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cf4:	4b85      	ldr	r3, [pc, #532]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d00:	4b82      	ldr	r3, [pc, #520]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d0a:	4b80      	ldr	r3, [pc, #512]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0e:	08db      	lsrs	r3, r3, #3
 8003d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80e1 	beq.w	8003ef0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f000 8083 	beq.w	8003e3c <HAL_RCC_GetSysClockFreq+0x204>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	f200 80a1 	bhi.w	8003e80 <HAL_RCC_GetSysClockFreq+0x248>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x114>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d056      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d4a:	e099      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d02d      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d58:	4b6c      	ldr	r3, [pc, #432]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	4a6b      	ldr	r2, [pc, #428]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d82:	4b62      	ldr	r3, [pc, #392]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003db2:	e087      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003f20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc6:	4b51      	ldr	r3, [pc, #324]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dda:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003df6:	e065      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b40      	ldr	r3, [pc, #256]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e3a:	e043      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003f28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e7e:	e021      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ec2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ec4:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ece:	3301      	adds	r3, #1
 8003ed0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee8:	ee17 3a90 	vmov	r3, s15
 8003eec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003eee:	e005      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
      break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ef8:	61bb      	str	r3, [r7, #24]
      break;
 8003efa:	bf00      	nop
  }

  return sysclockfreq;
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	03d09000 	.word	0x03d09000
 8003f14:	003d0900 	.word	0x003d0900
 8003f18:	017d7840 	.word	0x017d7840
 8003f1c:	46000000 	.word	0x46000000
 8003f20:	4c742400 	.word	0x4c742400
 8003f24:	4a742400 	.word	0x4a742400
 8003f28:	4bbebc20 	.word	0x4bbebc20

08003f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f32:	f7ff fe81 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490f      	ldr	r1, [pc, #60]	@ (8003f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	4a07      	ldr	r2, [pc, #28]	@ (8003f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f6a:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	08009b0c 	.word	0x08009b0c
 8003f84:	24000004 	.word	0x24000004
 8003f88:	24000000 	.word	0x24000000

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f90:	f7ff ffcc 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4904      	ldr	r1, [pc, #16]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	08009b0c 	.word	0x08009b0c

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fbc:	f7ff ffb6 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4904      	ldr	r1, [pc, #16]	@ (8003fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	08009b0c 	.word	0x08009b0c

08003fe4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b0ca      	sub	sp, #296	@ 0x128
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004008:	2500      	movs	r5, #0
 800400a:	ea54 0305 	orrs.w	r3, r4, r5
 800400e:	d049      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004016:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800401a:	d02f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800401c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004020:	d828      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004026:	d01a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800402c:	d822      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004036:	d007      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004038:	e01c      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403a:	4bb8      	ldr	r3, [pc, #736]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	4ab7      	ldr	r2, [pc, #732]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004046:	e01a      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	3308      	adds	r3, #8
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fc8f 	bl	8005974 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800405c:	e00f      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	3328      	adds	r3, #40	@ 0x28
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fd36 	bl	8005ad8 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004086:	4ba5      	ldr	r3, [pc, #660]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004094:	4aa1      	ldr	r2, [pc, #644]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004096:	430b      	orrs	r3, r1
 8004098:	6513      	str	r3, [r2, #80]	@ 0x50
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80040b0:	f04f 0900 	mov.w	r9, #0
 80040b4:	ea58 0309 	orrs.w	r3, r8, r9
 80040b8:	d047      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d82a      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040ef 	.word	0x080040ef
 80040d4:	08004105 	.word	0x08004105
 80040d8:	08004123 	.word	0x08004123
 80040dc:	08004123 	.word	0x08004123
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4b8e      	ldr	r3, [pc, #568]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4a8d      	ldr	r2, [pc, #564]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e01a      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3308      	adds	r3, #8
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fc3c 	bl	8005974 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004102:	e00f      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004108:	3328      	adds	r3, #40	@ 0x28
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fce3 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004118:	e004      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800412c:	4b7b      	ldr	r3, [pc, #492]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800412e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004130:	f023 0107 	bic.w	r1, r3, #7
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4a78      	ldr	r2, [pc, #480]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800413c:	430b      	orrs	r3, r1
 800413e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004140:	e003      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004156:	f04f 0b00 	mov.w	fp, #0
 800415a:	ea5a 030b 	orrs.w	r3, sl, fp
 800415e:	d04c      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416a:	d030      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800416c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004170:	d829      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004172:	2bc0      	cmp	r3, #192	@ 0xc0
 8004174:	d02d      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004176:	2bc0      	cmp	r3, #192	@ 0xc0
 8004178:	d825      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d018      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800417e:	2b80      	cmp	r3, #128	@ 0x80
 8004180:	d821      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004186:	2b40      	cmp	r3, #64	@ 0x40
 8004188:	d007      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800418a:	e01c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4b63      	ldr	r3, [pc, #396]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	4a62      	ldr	r2, [pc, #392]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004198:	e01c      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	3308      	adds	r3, #8
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fbe6 	bl	8005974 <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041ae:	e011      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	3328      	adds	r3, #40	@ 0x28
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 fc8d 	bl	8005ad8 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041c4:	e006      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041cc:	e002      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041dc:	4b4f      	ldr	r3, [pc, #316]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	4a4c      	ldr	r2, [pc, #304]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004206:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004210:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004214:	460b      	mov	r3, r1
 8004216:	4313      	orrs	r3, r2
 8004218:	d053      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004222:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004226:	d035      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800422c:	d82e      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800422e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004232:	d031      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004234:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004238:	d828      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800423e:	d01a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004244:	d822      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800424a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800424e:	d007      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004250:	e01c      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004252:	4b32      	ldr	r3, [pc, #200]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	4a31      	ldr	r2, [pc, #196]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800425e:	e01c      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	3308      	adds	r3, #8
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fb83 	bl	8005974 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004274:	e011      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	3328      	adds	r3, #40	@ 0x28
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f001 fc2a 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800428a:	e006      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004292:	e002      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042a2:	4b1e      	ldr	r3, [pc, #120]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042b2:	4a1a      	ldr	r2, [pc, #104]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80042d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d056      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ee:	d038      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80042f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f4:	d831      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042fa:	d034      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80042fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004300:	d82b      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004306:	d01d      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800430c:	d825      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004318:	e01f      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4ba2      	ldr	r3, [pc, #648]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4aa1      	ldr	r2, [pc, #644]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800432c:	e01c      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	3308      	adds	r3, #8
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fb1c 	bl	8005974 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004342:	e011      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	3328      	adds	r3, #40	@ 0x28
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fbc3 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004370:	4b8e      	ldr	r3, [pc, #568]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004374:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004380:	4a8a      	ldr	r2, [pc, #552]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004382:	430b      	orrs	r3, r1
 8004384:	6593      	str	r3, [r2, #88]	@ 0x58
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800439c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d03a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d01f      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80043ba:	2b30      	cmp	r3, #48	@ 0x30
 80043bc:	d819      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d00c      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d815      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d019      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d111      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ce:	4b77      	ldr	r3, [pc, #476]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	4a76      	ldr	r2, [pc, #472]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043da:	e011      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	3308      	adds	r3, #8
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fac5 	bl	8005974 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004408:	4b68      	ldr	r3, [pc, #416]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800440a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	4a65      	ldr	r2, [pc, #404]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004418:	430b      	orrs	r3, r1
 800441a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004432:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800443c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d051      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004450:	d035      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004456:	d82e      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004458:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800445c:	d031      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800445e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004462:	d828      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004468:	d01a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446e:	d822      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004478:	d007      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800447a:	e01c      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4b4b      	ldr	r3, [pc, #300]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4a4a      	ldr	r2, [pc, #296]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004488:	e01c      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	3308      	adds	r3, #8
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f001 fa6e 	bl	8005974 <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800449e:	e011      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	3328      	adds	r3, #40	@ 0x28
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 fb15 	bl	8005ad8 <RCCEx_PLL3_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044cc:	4b37      	ldr	r3, [pc, #220]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044da:	4a34      	ldr	r2, [pc, #208]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	@ 0x50
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004500:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d056      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004514:	d033      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800451a:	d82c      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800451c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004520:	d02f      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004522:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004526:	d826      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004528:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800452c:	d02b      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800452e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004532:	d820      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004538:	d012      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800453a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800453e:	d81a      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004548:	d115      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3308      	adds	r3, #8
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fa0e 	bl	8005974 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800455e:	e015      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004564:	3328      	adds	r3, #40	@ 0x28
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f001 fab5 	bl	8005ad8 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004574:	e00a      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800457e:	bf00      	nop
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800458a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004598:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a2:	4a02      	ldr	r2, [pc, #8]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80045a8:	e006      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80045aa:	bf00      	nop
 80045ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d055      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045e4:	d033      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80045e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ea:	d82c      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f0:	d02f      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f6:	d826      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045fc:	d02b      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80045fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004602:	d820      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004608:	d012      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800460a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800460e:	d81a      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d022      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004614:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004618:	d115      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	3308      	adds	r3, #8
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f001 f9a6 	bl	8005974 <RCCEx_PLL2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800462e:	e015      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	3328      	adds	r3, #40	@ 0x28
 8004636:	2101      	movs	r1, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f001 fa4d 	bl	8005ad8 <RCCEx_PLL3_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004644:	e00a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800464c:	e006      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800465a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004664:	4ba3      	ldr	r3, [pc, #652]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004668:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004674:	4a9f      	ldr	r2, [pc, #636]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004676:	430b      	orrs	r3, r1
 8004678:	6593      	str	r3, [r2, #88]	@ 0x58
 800467a:	e003      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800469a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d037      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046ae:	d00e      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80046b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b4:	d816      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80046ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046be:	d111      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c0:	4b8c      	ldr	r3, [pc, #560]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	4a8b      	ldr	r2, [pc, #556]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046cc:	e00f      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	3308      	adds	r3, #8
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 f94c 	bl	8005974 <RCCEx_PLL2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046e2:	e004      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80046ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046f6:	4b7f      	ldr	r3, [pc, #508]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	4a7b      	ldr	r2, [pc, #492]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004706:	430b      	orrs	r3, r1
 8004708:	6513      	str	r3, [r2, #80]	@ 0x50
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800472a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d039      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473a:	2b03      	cmp	r3, #3
 800473c:	d81c      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800473e:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004781 	.word	0x08004781
 8004748:	08004755 	.word	0x08004755
 800474c:	08004763 	.word	0x08004763
 8004750:	08004781 	.word	0x08004781
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004754:	4b67      	ldr	r3, [pc, #412]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4a66      	ldr	r2, [pc, #408]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800475a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004760:	e00f      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3308      	adds	r3, #8
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f902 	bl	8005974 <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800478a:	4b5a      	ldr	r3, [pc, #360]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478e:	f023 0103 	bic.w	r1, r3, #3
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004798:	4a56      	ldr	r2, [pc, #344]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479a:	430b      	orrs	r3, r1
 800479c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80047b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f000 809f 	beq.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ca:	4b4b      	ldr	r3, [pc, #300]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a4a      	ldr	r2, [pc, #296]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d6:	f7fd fd79 	bl	80022cc <HAL_GetTick>
 80047da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047de:	e00b      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd fd74 	bl	80022cc <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b64      	cmp	r3, #100	@ 0x64
 80047ee:	d903      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f6:	e005      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f8:	4b3f      	ldr	r3, [pc, #252]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ed      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004808:	2b00      	cmp	r3, #0
 800480a:	d179      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800480c:	4b39      	ldr	r3, [pc, #228]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800480e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004818:	4053      	eors	r3, r2
 800481a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004822:	4b34      	ldr	r3, [pc, #208]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800482e:	4b31      	ldr	r3, [pc, #196]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	4a30      	ldr	r2, [pc, #192]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800483a:	4b2e      	ldr	r3, [pc, #184]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004844:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004846:	4a2b      	ldr	r2, [pc, #172]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800484c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485a:	d118      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd fd36 	bl	80022cc <HAL_GetTick>
 8004860:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004864:	e00d      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd fd31 	bl	80022cc <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004870:	1ad2      	subs	r2, r2, r3
 8004872:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004876:	429a      	cmp	r2, r3
 8004878:	d903      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004880:	e005      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004882:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0eb      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	2b00      	cmp	r3, #0
 8004894:	d129      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800489e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a6:	d10e      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80048a8:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048b8:	091a      	lsrs	r2, r3, #4
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80048bc:	4013      	ands	r3, r2
 80048be:	4a0d      	ldr	r2, [pc, #52]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6113      	str	r3, [r2, #16]
 80048c4:	e005      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4a0a      	ldr	r2, [pc, #40]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048d0:	6113      	str	r3, [r2, #16]
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e2:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e8:	e00e      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80048f2:	e009      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80048f4:	58024400 	.word	0x58024400
 80048f8:	58024800 	.word	0x58024800
 80048fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f002 0301 	and.w	r3, r2, #1
 8004914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800491e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004922:	460b      	mov	r3, r1
 8004924:	4313      	orrs	r3, r2
 8004926:	f000 8089 	beq.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004930:	2b28      	cmp	r3, #40	@ 0x28
 8004932:	d86b      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	08004a15 	.word	0x08004a15
 8004940:	08004a0d 	.word	0x08004a0d
 8004944:	08004a0d 	.word	0x08004a0d
 8004948:	08004a0d 	.word	0x08004a0d
 800494c:	08004a0d 	.word	0x08004a0d
 8004950:	08004a0d 	.word	0x08004a0d
 8004954:	08004a0d 	.word	0x08004a0d
 8004958:	08004a0d 	.word	0x08004a0d
 800495c:	080049e1 	.word	0x080049e1
 8004960:	08004a0d 	.word	0x08004a0d
 8004964:	08004a0d 	.word	0x08004a0d
 8004968:	08004a0d 	.word	0x08004a0d
 800496c:	08004a0d 	.word	0x08004a0d
 8004970:	08004a0d 	.word	0x08004a0d
 8004974:	08004a0d 	.word	0x08004a0d
 8004978:	08004a0d 	.word	0x08004a0d
 800497c:	080049f7 	.word	0x080049f7
 8004980:	08004a0d 	.word	0x08004a0d
 8004984:	08004a0d 	.word	0x08004a0d
 8004988:	08004a0d 	.word	0x08004a0d
 800498c:	08004a0d 	.word	0x08004a0d
 8004990:	08004a0d 	.word	0x08004a0d
 8004994:	08004a0d 	.word	0x08004a0d
 8004998:	08004a0d 	.word	0x08004a0d
 800499c:	08004a15 	.word	0x08004a15
 80049a0:	08004a0d 	.word	0x08004a0d
 80049a4:	08004a0d 	.word	0x08004a0d
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004a0d 	.word	0x08004a0d
 80049b0:	08004a0d 	.word	0x08004a0d
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a0d 	.word	0x08004a0d
 80049c4:	08004a0d 	.word	0x08004a0d
 80049c8:	08004a0d 	.word	0x08004a0d
 80049cc:	08004a0d 	.word	0x08004a0d
 80049d0:	08004a0d 	.word	0x08004a0d
 80049d4:	08004a0d 	.word	0x08004a0d
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a15 	.word	0x08004a15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	3308      	adds	r3, #8
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 ffc3 	bl	8005974 <RCCEx_PLL2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049f4:	e00f      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	3328      	adds	r3, #40	@ 0x28
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 f86a 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a0a:	e004      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a12:	e000      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a1e:	4bbf      	ldr	r3, [pc, #764]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a2c:	4abb      	ldr	r2, [pc, #748]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a32:	e003      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f002 0302 	and.w	r3, r2, #2
 8004a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d041      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d824      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004ab9 	.word	0x08004ab9
 8004a70:	08004a85 	.word	0x08004a85
 8004a74:	08004a9b 	.word	0x08004a9b
 8004a78:	08004ab9 	.word	0x08004ab9
 8004a7c:	08004ab9 	.word	0x08004ab9
 8004a80:	08004ab9 	.word	0x08004ab9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	3308      	adds	r3, #8
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff71 	bl	8005974 <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a98:	e00f      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	3328      	adds	r3, #40	@ 0x28
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f818 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ac2:	4b96      	ldr	r3, [pc, #600]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	f023 0107 	bic.w	r1, r3, #7
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ad0:	4a92      	ldr	r2, [pc, #584]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ad6:	e003      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f002 0304 	and.w	r3, r2, #4
 8004aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4313      	orrs	r3, r2
 8004afe:	d044      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d825      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b61 	.word	0x08004b61
 8004b18:	08004b2d 	.word	0x08004b2d
 8004b1c:	08004b43 	.word	0x08004b43
 8004b20:	08004b61 	.word	0x08004b61
 8004b24:	08004b61 	.word	0x08004b61
 8004b28:	08004b61 	.word	0x08004b61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b30:	3308      	adds	r3, #8
 8004b32:	2101      	movs	r1, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 ff1d 	bl	8005974 <RCCEx_PLL2_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b40:	e00f      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b46:	3328      	adds	r3, #40	@ 0x28
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 ffc4 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b56:	e004      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b5e:	e000      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	f023 0107 	bic.w	r1, r3, #7
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7a:	4a68      	ldr	r2, [pc, #416]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f002 0320 	and.w	r3, r2, #32
 8004b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	d055      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb6:	d033      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bbc:	d82c      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc2:	d02f      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d826      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bce:	d02b      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004bd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bd4:	d820      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bda:	d012      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be0:	d81a      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d022      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bea:	d115      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 febd 	bl	8005974 <RCCEx_PLL2_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c00:	e015      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	3328      	adds	r3, #40	@ 0x28
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 ff64 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c16:	e00a      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c1e:	e006      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c20:	bf00      	nop
 8004c22:	e004      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c24:	bf00      	nop
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c36:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	4a35      	ldr	r2, [pc, #212]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c4c:	e003      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004c6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d058      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c7e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c82:	d033      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004c84:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c88:	d82c      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8e:	d02f      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c94:	d826      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c9a:	d02b      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca0:	d820      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca6:	d012      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cac:	d81a      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d022      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d115      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fe57 	bl	8005974 <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ccc:	e015      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	3328      	adds	r3, #40	@ 0x28
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fefe 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cea:	e006      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cec:	bf00      	nop
 8004cee:	e004      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cf0:	bf00      	nop
 8004cf2:	e002      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cf4:	bf00      	nop
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d02:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d06:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d12:	4a02      	ldr	r2, [pc, #8]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004d1a:	bf00      	nop
 8004d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004d42:	460b      	mov	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	d055      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d50:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d54:	d033      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004d56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d5a:	d82c      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d60:	d02f      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d66:	d826      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d68:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d6c:	d02b      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004d6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d72:	d820      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d78:	d012      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d7e:	d81a      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d88:	d115      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8e:	3308      	adds	r3, #8
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fdee 	bl	8005974 <RCCEx_PLL2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d9e:	e015      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	3328      	adds	r3, #40	@ 0x28
 8004da6:	2102      	movs	r1, #2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fe95 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004db4:	e00a      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e004      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004dd4:	4ba1      	ldr	r3, [pc, #644]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004de4:	4a9d      	ldr	r2, [pc, #628]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f002 0308 	and.w	r3, r2, #8
 8004e00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d01e      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e26:	3328      	adds	r3, #40	@ 0x28
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fe54 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e3c:	4b87      	ldr	r3, [pc, #540]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e4c:	4a83      	ldr	r2, [pc, #524]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f002 0310 	and.w	r3, r2, #16
 8004e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	d01e      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e84:	3328      	adds	r3, #40	@ 0x28
 8004e86:	2102      	movs	r1, #2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fe25 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e9a:	4b70      	ldr	r3, [pc, #448]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eaa:	4a6c      	ldr	r2, [pc, #432]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ec6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	d03e      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004edc:	d022      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ee2:	d81b      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eec:	d00b      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004eee:	e015      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fd3b 	bl	8005974 <RCCEx_PLL2_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f04:	e00f      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	3328      	adds	r3, #40	@ 0x28
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fde2 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f1a:	e004      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f22:	e000      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f3e:	4a47      	ldr	r2, [pc, #284]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f44:	e003      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d03b      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f76:	d01f      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f7c:	d818      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004f84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f88:	d007      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f8a:	e011      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8c:	4b33      	ldr	r3, [pc, #204]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	4a32      	ldr	r2, [pc, #200]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f98:	e00f      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	3328      	adds	r3, #40	@ 0x28
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fd98 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fae:	e004      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	4a22      	ldr	r2, [pc, #136]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004fee:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ff4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	d034      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500c:	d007      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800500e:	e011      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005010:	4b12      	ldr	r3, [pc, #72]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	4a11      	ldr	r2, [pc, #68]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800501a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800501c:	e00e      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	3308      	adds	r3, #8
 8005024:	2102      	movs	r1, #2
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fca4 	bl	8005974 <RCCEx_PLL2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005032:	e003      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800503a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10d      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005048:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005052:	4a02      	ldr	r2, [pc, #8]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005054:	430b      	orrs	r3, r1
 8005056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005076:	2300      	movs	r3, #0
 8005078:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800507a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d00c      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005088:	3328      	adds	r3, #40	@ 0x28
 800508a:	2102      	movs	r1, #2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fd23 	bl	8005ad8 <RCCEx_PLL3_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800509e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80050aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ac:	2300      	movs	r3, #0
 80050ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80050b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80050b4:	460b      	mov	r3, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d038      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c6:	d018      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80050c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050cc:	d811      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80050ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d2:	d014      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d8:	d80b      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80050de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e2:	d106      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e4:	4bc3      	ldr	r3, [pc, #780]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	4ac2      	ldr	r2, [pc, #776]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050f8:	e004      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800510c:	4bb9      	ldr	r3, [pc, #740]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800511c:	4ab5      	ldr	r2, [pc, #724]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800511e:	430b      	orrs	r3, r1
 8005120:	6553      	str	r3, [r2, #84]	@ 0x54
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800513a:	2300      	movs	r3, #0
 800513c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800513e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005148:	4baa      	ldr	r3, [pc, #680]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800514a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005156:	4aa7      	ldr	r2, [pc, #668]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005158:	430b      	orrs	r3, r1
 800515a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005168:	653b      	str	r3, [r7, #80]	@ 0x50
 800516a:	2300      	movs	r3, #0
 800516c:	657b      	str	r3, [r7, #84]	@ 0x54
 800516e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005172:	460b      	mov	r3, r1
 8005174:	4313      	orrs	r3, r2
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005178:	4b9e      	ldr	r3, [pc, #632]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005184:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005188:	4a9a      	ldr	r2, [pc, #616]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800518a:	430b      	orrs	r3, r1
 800518c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800519a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800519c:	2300      	movs	r3, #0
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051aa:	4b92      	ldr	r3, [pc, #584]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051b8:	4a8e      	ldr	r2, [pc, #568]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80051ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80051cc:	2300      	movs	r3, #0
 80051ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051da:	4b86      	ldr	r3, [pc, #536]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	4a85      	ldr	r2, [pc, #532]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051e4:	6113      	str	r3, [r2, #16]
 80051e6:	4b83      	ldr	r3, [pc, #524]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e8:	6919      	ldr	r1, [r3, #16]
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051f2:	4a80      	ldr	r2, [pc, #512]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005206:	2300      	movs	r3, #0
 8005208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800520a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005214:	4b77      	ldr	r3, [pc, #476]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005218:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	4a74      	ldr	r2, [pc, #464]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005224:	430b      	orrs	r3, r1
 8005226:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005234:	633b      	str	r3, [r7, #48]	@ 0x30
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
 800523a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800523e:	460b      	mov	r3, r1
 8005240:	4313      	orrs	r3, r2
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005244:	4b6b      	ldr	r3, [pc, #428]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005248:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005254:	4a67      	ldr	r2, [pc, #412]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005256:	430b      	orrs	r3, r1
 8005258:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	2100      	movs	r1, #0
 8005264:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005270:	460b      	mov	r3, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	d011      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	3308      	adds	r3, #8
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb78 	bl	8005974 <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	2100      	movs	r1, #0
 80052a4:	6239      	str	r1, [r7, #32]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052b0:	460b      	mov	r3, r1
 80052b2:	4313      	orrs	r3, r2
 80052b4:	d011      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	3308      	adds	r3, #8
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fb58 	bl	8005974 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	2100      	movs	r1, #0
 80052e4:	61b9      	str	r1, [r7, #24]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052f0:	460b      	mov	r3, r1
 80052f2:	4313      	orrs	r3, r2
 80052f4:	d011      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	3308      	adds	r3, #8
 80052fc:	2102      	movs	r1, #2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb38 	bl	8005974 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800530a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	2100      	movs	r1, #0
 8005324:	6139      	str	r1, [r7, #16]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	d011      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	3328      	adds	r3, #40	@ 0x28
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbca 	bl	8005ad8 <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	2100      	movs	r1, #0
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	f003 0310 	and.w	r3, r3, #16
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005370:	460b      	mov	r3, r1
 8005372:	4313      	orrs	r3, r2
 8005374:	d011      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	3328      	adds	r3, #40	@ 0x28
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fbaa 	bl	8005ad8 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	2100      	movs	r1, #0
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053b0:	460b      	mov	r3, r1
 80053b2:	4313      	orrs	r3, r2
 80053b4:	d011      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ba:	3328      	adds	r3, #40	@ 0x28
 80053bc:	2102      	movs	r1, #2
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fb8a 	bl	8005ad8 <RCCEx_PLL3_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80053da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80053ee:	46bd      	mov	sp, r7
 80053f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f4:	58024400 	.word	0x58024400

080053f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053fc:	f7fe fd96 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4904      	ldr	r1, [pc, #16]	@ (8005420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	58024400 	.word	0x58024400
 8005420:	08009b0c 	.word	0x08009b0c

08005424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	@ 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800542c:	4ba1      	ldr	r3, [pc, #644]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005436:	4b9f      	ldr	r3, [pc, #636]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	0b1b      	lsrs	r3, r3, #12
 800543c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005442:	4b9c      	ldr	r3, [pc, #624]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800544e:	4b99      	ldr	r3, [pc, #612]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8111 	beq.w	8005694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b02      	cmp	r3, #2
 8005476:	f000 8083 	beq.w	8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f200 80a1 	bhi.w	80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d056      	beq.n	800553c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800548e:	e099      	b.n	80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005490:	4b88      	ldr	r3, [pc, #544]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02d      	beq.n	80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800549c:	4b85      	ldr	r3, [pc, #532]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	4a84      	ldr	r2, [pc, #528]	@ (80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b7b      	ldr	r3, [pc, #492]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054f6:	e087      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b6a      	ldr	r3, [pc, #424]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a03 	vldr	s12, [r7, #12]
 800551e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553a:	e065      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800554a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554e:	4b59      	ldr	r3, [pc, #356]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005562:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557e:	e043      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800558e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005592:	4b48      	ldr	r3, [pc, #288]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c2:	e021      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d6:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005608:	4b2a      	ldr	r3, [pc, #168]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	0a5b      	lsrs	r3, r3, #9
 800560e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800561e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005622:	edd7 6a07 	vldr	s13, [r7, #28]
 8005626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562e:	ee17 2a90 	vmov	r2, s15
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005636:	4b1f      	ldr	r3, [pc, #124]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800564c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005650:	edd7 6a07 	vldr	s13, [r7, #28]
 8005654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800565c:	ee17 2a90 	vmov	r2, s15
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005664:	4b13      	ldr	r3, [pc, #76]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800567a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800567e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568a:	ee17 2a90 	vmov	r2, s15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005692:	e008      	b.n	80056a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
}
 80056a6:	bf00      	nop
 80056a8:	3724      	adds	r7, #36	@ 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	03d09000 	.word	0x03d09000
 80056bc:	46000000 	.word	0x46000000
 80056c0:	4c742400 	.word	0x4c742400
 80056c4:	4a742400 	.word	0x4a742400
 80056c8:	4bbebc20 	.word	0x4bbebc20

080056cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b089      	sub	sp, #36	@ 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056d4:	4ba1      	ldr	r3, [pc, #644]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80056de:	4b9f      	ldr	r3, [pc, #636]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	0d1b      	lsrs	r3, r3, #20
 80056e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056ea:	4b9c      	ldr	r3, [pc, #624]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80056f6:	4b99      	ldr	r3, [pc, #612]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	08db      	lsrs	r3, r3, #3
 80056fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8111 	beq.w	800593c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b02      	cmp	r3, #2
 800571e:	f000 8083 	beq.w	8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b02      	cmp	r3, #2
 8005726:	f200 80a1 	bhi.w	800586c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d056      	beq.n	80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005736:	e099      	b.n	800586c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005738:	4b88      	ldr	r3, [pc, #544]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02d      	beq.n	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005744:	4b85      	ldr	r3, [pc, #532]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	4a84      	ldr	r2, [pc, #528]	@ (8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
 8005754:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576e:	4b7b      	ldr	r3, [pc, #492]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005782:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800579e:	e087      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b2:	4b6a      	ldr	r3, [pc, #424]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e2:	e065      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800596c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f6:	4b59      	ldr	r3, [pc, #356]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005806:	ed97 6a03 	vldr	s12, [r7, #12]
 800580a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800580e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005826:	e043      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583a:	4b48      	ldr	r3, [pc, #288]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a03 	vldr	s12, [r7, #12]
 800584e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586a:	e021      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800596c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587e:	4b37      	ldr	r3, [pc, #220]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005892:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80058b0:	4b2a      	ldr	r3, [pc, #168]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	0a5b      	lsrs	r3, r3, #9
 80058b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d6:	ee17 2a90 	vmov	r2, s15
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80058de:	4b1f      	ldr	r3, [pc, #124]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005904:	ee17 2a90 	vmov	r2, s15
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005926:	edd7 6a07 	vldr	s13, [r7, #28]
 800592a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005932:	ee17 2a90 	vmov	r2, s15
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800593a:	e008      	b.n	800594e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
}
 800594e:	bf00      	nop
 8005950:	3724      	adds	r7, #36	@ 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
 8005960:	03d09000 	.word	0x03d09000
 8005964:	46000000 	.word	0x46000000
 8005968:	4c742400 	.word	0x4c742400
 800596c:	4a742400 	.word	0x4a742400
 8005970:	4bbebc20 	.word	0x4bbebc20

08005974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005982:	4b53      	ldr	r3, [pc, #332]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d101      	bne.n	8005992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e099      	b.n	8005ac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005992:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a4e      	ldr	r2, [pc, #312]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005998:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800599c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599e:	f7fc fc95 	bl	80022cc <HAL_GetTick>
 80059a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059a4:	e008      	b.n	80059b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059a6:	f7fc fc91 	bl	80022cc <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e086      	b.n	8005ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059b8:	4b45      	ldr	r3, [pc, #276]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f0      	bne.n	80059a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059c4:	4b42      	ldr	r3, [pc, #264]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	493f      	ldr	r1, [pc, #252]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	3b01      	subs	r3, #1
 80059de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	025b      	lsls	r3, r3, #9
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	061b      	lsls	r3, r3, #24
 8005a04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a08:	4931      	ldr	r1, [pc, #196]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a0e:	4b30      	ldr	r3, [pc, #192]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	492d      	ldr	r1, [pc, #180]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a20:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	f023 0220 	bic.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	4928      	ldr	r1, [pc, #160]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a32:	4b27      	ldr	r3, [pc, #156]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	4a26      	ldr	r2, [pc, #152]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a38:	f023 0310 	bic.w	r3, r3, #16
 8005a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a3e:	4b24      	ldr	r3, [pc, #144]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a42:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <RCCEx_PLL2_Config+0x160>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	69d2      	ldr	r2, [r2, #28]
 8005a4a:	00d2      	lsls	r2, r2, #3
 8005a4c:	4920      	ldr	r1, [pc, #128]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	f043 0310 	orr.w	r3, r3, #16
 8005a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a64:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a70:	e00f      	b.n	8005a92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d106      	bne.n	8005a86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a78:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a84:	e005      	b.n	8005a92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a86:	4b12      	ldr	r3, [pc, #72]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	4a11      	ldr	r2, [pc, #68]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9e:	f7fc fc15 	bl	80022cc <HAL_GetTick>
 8005aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005aa6:	f7fc fc11 	bl	80022cc <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	ffff0007 	.word	0xffff0007

08005ad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ae6:	4b53      	ldr	r3, [pc, #332]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d101      	bne.n	8005af6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e099      	b.n	8005c2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005af6:	4b4f      	ldr	r3, [pc, #316]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a4e      	ldr	r2, [pc, #312]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fc fbe3 	bl	80022cc <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b08:	e008      	b.n	8005b1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b0a:	f7fc fbdf 	bl	80022cc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e086      	b.n	8005c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b1c:	4b45      	ldr	r3, [pc, #276]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f0      	bne.n	8005b0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b28:	4b42      	ldr	r3, [pc, #264]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	493f      	ldr	r1, [pc, #252]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	025b      	lsls	r3, r3, #9
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	061b      	lsls	r3, r3, #24
 8005b68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b6c:	4931      	ldr	r1, [pc, #196]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b72:	4b30      	ldr	r3, [pc, #192]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	492d      	ldr	r1, [pc, #180]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b84:	4b2b      	ldr	r3, [pc, #172]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	4928      	ldr	r1, [pc, #160]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b96:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	4a26      	ldr	r2, [pc, #152]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ba2:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba6:	4b24      	ldr	r3, [pc, #144]	@ (8005c38 <RCCEx_PLL3_Config+0x160>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	69d2      	ldr	r2, [r2, #28]
 8005bae:	00d2      	lsls	r2, r2, #3
 8005bb0:	4920      	ldr	r1, [pc, #128]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	4a1e      	ldr	r2, [pc, #120]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bd4:	e00f      	b.n	8005bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d106      	bne.n	8005bea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bdc:	4b15      	ldr	r3, [pc, #84]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	4a14      	ldr	r2, [pc, #80]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005be2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005be6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005be8:	e005      	b.n	8005bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bea:	4b12      	ldr	r3, [pc, #72]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	4a11      	ldr	r2, [pc, #68]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c02:	f7fc fb63 	bl	80022cc <HAL_GetTick>
 8005c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c08:	e008      	b.n	8005c1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c0a:	f7fc fb5f 	bl	80022cc <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e006      	b.n	8005c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	58024400 	.word	0x58024400
 8005c38:	ffff0007 	.word	0xffff0007

08005c3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e10f      	b.n	8005e6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a87      	ldr	r2, [pc, #540]	@ (8005e78 <HAL_SPI_Init+0x23c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <HAL_SPI_Init+0x42>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a86      	ldr	r2, [pc, #536]	@ (8005e7c <HAL_SPI_Init+0x240>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00a      	beq.n	8005c7e <HAL_SPI_Init+0x42>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a84      	ldr	r2, [pc, #528]	@ (8005e80 <HAL_SPI_Init+0x244>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d005      	beq.n	8005c7e <HAL_SPI_Init+0x42>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b0f      	cmp	r3, #15
 8005c78:	d901      	bls.n	8005c7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0f7      	b.n	8005e6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f910 	bl	8006ea4 <SPI_GetPacketSize>
 8005c84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a7b      	ldr	r2, [pc, #492]	@ (8005e78 <HAL_SPI_Init+0x23c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00c      	beq.n	8005caa <HAL_SPI_Init+0x6e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a79      	ldr	r2, [pc, #484]	@ (8005e7c <HAL_SPI_Init+0x240>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <HAL_SPI_Init+0x6e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a78      	ldr	r2, [pc, #480]	@ (8005e80 <HAL_SPI_Init+0x244>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_Init+0x6e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d811      	bhi.n	8005cce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cae:	4a72      	ldr	r2, [pc, #456]	@ (8005e78 <HAL_SPI_Init+0x23c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a70      	ldr	r2, [pc, #448]	@ (8005e7c <HAL_SPI_Init+0x240>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_SPI_Init+0x8c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6f      	ldr	r2, [pc, #444]	@ (8005e80 <HAL_SPI_Init+0x244>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d104      	bne.n	8005cd2 <HAL_SPI_Init+0x96>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d901      	bls.n	8005cd2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e0cd      	b.n	8005e6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fb fdba 	bl	8001860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0201 	bic.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005d0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d18:	d119      	bne.n	8005d4e <HAL_SPI_Init+0x112>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d22:	d103      	bne.n	8005d2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10c      	bne.n	8005d4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d3c:	d107      	bne.n	8005d4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00f      	beq.n	8005d7a <HAL_SPI_Init+0x13e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d90b      	bls.n	8005d7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e007      	b.n	8005d8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	431a      	orrs	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9c:	ea42 0103 	orr.w	r1, r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dea:	ea42 0103 	orr.w	r1, r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40013000 	.word	0x40013000
 8005e7c:	40003800 	.word	0x40003800
 8005e80:	40003c00 	.word	0x40003c00

08005e84 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3320      	adds	r3, #32
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e9c:	f7fc fa16 	bl	80022cc <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e1d1      	b.n	8006256 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_SPI_Transmit+0x3a>
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e1c9      	b.n	8006256 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_SPI_Transmit+0x4c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e1c2      	b.n	8006256 <HAL_SPI_Transmit+0x3d2>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2203      	movs	r2, #3
 8005edc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005f28:	d108      	bne.n	8005f3c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e009      	b.n	8005f50 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005f4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	4b96      	ldr	r3, [pc, #600]	@ (80061b0 <HAL_SPI_Transmit+0x32c>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	88f9      	ldrh	r1, [r7, #6]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f7c:	d107      	bne.n	8005f8e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	d947      	bls.n	8006026 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f96:	e03f      	b.n	8006018 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d114      	bne.n	8005fd0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb6:	1d1a      	adds	r2, r3, #4
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005fce:	e023      	b.n	8006018 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd0:	f7fc f97c 	bl	80022cc <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d803      	bhi.n	8005fe8 <HAL_SPI_Transmit+0x164>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	d102      	bne.n	8005fee <HAL_SPI_Transmit+0x16a>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d114      	bne.n	8006018 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fe8a 	bl	8006d08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ffa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e11e      	b.n	8006256 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1b9      	bne.n	8005f98 <HAL_SPI_Transmit+0x114>
 8006024:	e0f1      	b.n	800620a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b07      	cmp	r3, #7
 800602c:	f240 80e6 	bls.w	80061fc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006030:	e05d      	b.n	80060ee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d132      	bne.n	80060a6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d918      	bls.n	800607e <HAL_SPI_Transmit+0x1fa>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d014      	beq.n	800607e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	1d1a      	adds	r2, r3, #4
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b02      	subs	r3, #2
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800607c:	e037      	b.n	80060ee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608c:	1c9a      	adds	r2, r3, #2
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80060a4:	e023      	b.n	80060ee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a6:	f7fc f911 	bl	80022cc <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d803      	bhi.n	80060be <HAL_SPI_Transmit+0x23a>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d102      	bne.n	80060c4 <HAL_SPI_Transmit+0x240>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d114      	bne.n	80060ee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fe1f 	bl	8006d08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0b3      	b.n	8006256 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d19b      	bne.n	8006032 <HAL_SPI_Transmit+0x1ae>
 80060fa:	e086      	b.n	800620a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d154      	bne.n	80061b4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b03      	cmp	r3, #3
 8006114:	d918      	bls.n	8006148 <HAL_SPI_Transmit+0x2c4>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d914      	bls.n	8006148 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b04      	subs	r3, #4
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006146:	e059      	b.n	80061fc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b01      	cmp	r3, #1
 8006152:	d917      	bls.n	8006184 <HAL_SPI_Transmit+0x300>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d013      	beq.n	8006184 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b02      	subs	r3, #2
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006182:	e03b      	b.n	80061fc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3320      	adds	r3, #32
 800618e:	7812      	ldrb	r2, [r2, #0]
 8006190:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061ae:	e025      	b.n	80061fc <HAL_SPI_Transmit+0x378>
 80061b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b4:	f7fc f88a 	bl	80022cc <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d803      	bhi.n	80061cc <HAL_SPI_Transmit+0x348>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d102      	bne.n	80061d2 <HAL_SPI_Transmit+0x34e>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d114      	bne.n	80061fc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fd98 	bl	8006d08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e02c      	b.n	8006256 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	f47f af79 	bne.w	80060fc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2200      	movs	r2, #0
 8006212:	2108      	movs	r1, #8
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fe17 	bl	8006e48 <SPI_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fd69 	bl	8006d08 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006254:	2300      	movs	r3, #0
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop

08006260 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	@ 0x38
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3320      	adds	r3, #32
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3330      	adds	r3, #48	@ 0x30
 800627c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	b29b      	uxth	r3, r3
 8006286:	3301      	adds	r3, #1
 8006288:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628a:	f7fc f81f 	bl	80022cc <HAL_GetTick>
 800628e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006290:	887b      	ldrh	r3, [r7, #2]
 8006292:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d001      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	e310      	b.n	80068ca <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x5a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x5a>
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e305      	b.n	80068ca <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x6c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e2fe      	b.n	80068ca <HAL_SPI_TransmitReceive+0x66a>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2205      	movs	r2, #5
 80062d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	887a      	ldrh	r2, [r7, #2]
 80062ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	887a      	ldrh	r2, [r7, #2]
 80062f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	887a      	ldrh	r2, [r7, #2]
 8006304:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	887a      	ldrh	r2, [r7, #2]
 800630c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800632a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a70      	ldr	r2, [pc, #448]	@ (80064f4 <HAL_SPI_TransmitReceive+0x294>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <HAL_SPI_TransmitReceive+0xea>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a6f      	ldr	r2, [pc, #444]	@ (80064f8 <HAL_SPI_TransmitReceive+0x298>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_SPI_TransmitReceive+0xea>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a6d      	ldr	r2, [pc, #436]	@ (80064fc <HAL_SPI_TransmitReceive+0x29c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d102      	bne.n	8006350 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800634a:	2310      	movs	r3, #16
 800634c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634e:	e001      	b.n	8006354 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006350:	2308      	movs	r3, #8
 8006352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	4b69      	ldr	r3, [pc, #420]	@ (8006500 <HAL_SPI_TransmitReceive+0x2a0>)
 800635c:	4013      	ands	r3, r2
 800635e:	8879      	ldrh	r1, [r7, #2]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	430b      	orrs	r3, r1
 8006366:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006380:	d107      	bne.n	8006392 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	f240 80a2 	bls.w	80064e0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800639c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639e:	089b      	lsrs	r3, r3, #2
 80063a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80063a2:	e094      	b.n	80064ce <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d120      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x194>
 80063b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01d      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80063b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80063ba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d217      	bcs.n	80063f4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80063fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d065      	beq.n	80064ce <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b01      	cmp	r3, #1
 800640e:	d118      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006418:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800641a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006420:	1d1a      	adds	r2, r3, #4
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800643e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006440:	e045      	b.n	80064ce <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006442:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006444:	8bfb      	ldrh	r3, [r7, #30]
 8006446:	429a      	cmp	r2, r3
 8006448:	d21d      	bcs.n	8006486 <HAL_SPI_TransmitReceive+0x226>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d018      	beq.n	8006486 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800645c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800645e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006464:	1d1a      	adds	r2, r3, #4
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006482:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006484:	e023      	b.n	80064ce <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006486:	f7fb ff21 	bl	80022cc <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006492:	429a      	cmp	r2, r3
 8006494:	d803      	bhi.n	800649e <HAL_SPI_TransmitReceive+0x23e>
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d102      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x244>
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d114      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fc2f 	bl	8006d08 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e1fd      	b.n	80068ca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80064ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f47f af67 	bne.w	80063a4 <HAL_SPI_TransmitReceive+0x144>
 80064d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f af63 	bne.w	80063a4 <HAL_SPI_TransmitReceive+0x144>
 80064de:	e1ce      	b.n	800687e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b07      	cmp	r3, #7
 80064e6:	f240 81c2 	bls.w	800686e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80064f0:	e0c9      	b.n	8006686 <HAL_SPI_TransmitReceive+0x426>
 80064f2:	bf00      	nop
 80064f4:	40013000 	.word	0x40013000
 80064f8:	40003800 	.word	0x40003800
 80064fc:	40003c00 	.word	0x40003c00
 8006500:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b02      	cmp	r3, #2
 8006510:	d11f      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x2f2>
 8006512:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01c      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006518:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800651a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006520:	429a      	cmp	r2, r3
 8006522:	d216      	bcs.n	8006552 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006528:	881a      	ldrh	r2, [r3, #0]
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006532:	1c9a      	adds	r2, r3, #2
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006550:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800655a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8092 	beq.w	8006686 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	d118      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006574:	6a3a      	ldr	r2, [r7, #32]
 8006576:	8812      	ldrh	r2, [r2, #0]
 8006578:	b292      	uxth	r2, r2
 800657a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006580:	1c9a      	adds	r2, r3, #2
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800659e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065a0:	e071      	b.n	8006686 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80065a2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80065a4:	8bfb      	ldrh	r3, [r7, #30]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d228      	bcs.n	80065fc <HAL_SPI_TransmitReceive+0x39c>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d023      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	8812      	ldrh	r2, [r2, #0]
 80065bc:	b292      	uxth	r2, r2
 80065be:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c4:	1c9a      	adds	r2, r3, #2
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	8812      	ldrh	r2, [r2, #0]
 80065d2:	b292      	uxth	r2, r2
 80065d4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b02      	subs	r3, #2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065fa:	e044      	b.n	8006686 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80065fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d11d      	bne.n	800663e <HAL_SPI_TransmitReceive+0x3de>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d018      	beq.n	800663e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006610:	6a3a      	ldr	r2, [r7, #32]
 8006612:	8812      	ldrh	r2, [r2, #0]
 8006614:	b292      	uxth	r2, r2
 8006616:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800663a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800663c:	e023      	b.n	8006686 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800663e:	f7fb fe45 	bl	80022cc <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800664a:	429a      	cmp	r2, r3
 800664c:	d803      	bhi.n	8006656 <HAL_SPI_TransmitReceive+0x3f6>
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d102      	bne.n	800665c <HAL_SPI_TransmitReceive+0x3fc>
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d114      	bne.n	8006686 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fb53 	bl	8006d08 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006668:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e121      	b.n	80068ca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006686:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006688:	2b00      	cmp	r3, #0
 800668a:	f47f af3b 	bne.w	8006504 <HAL_SPI_TransmitReceive+0x2a4>
 800668e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	f47f af37 	bne.w	8006504 <HAL_SPI_TransmitReceive+0x2a4>
 8006696:	e0f2      	b.n	800687e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d121      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x48a>
 80066a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01e      	beq.n	80066ea <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80066ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80066ae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80066b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d218      	bcs.n	80066ea <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3320      	adds	r3, #32
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80066f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80ba 	beq.w	800686e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d11b      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800673c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800673e:	e096      	b.n	800686e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006740:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006742:	8bfb      	ldrh	r3, [r7, #30]
 8006744:	429a      	cmp	r2, r3
 8006746:	d24a      	bcs.n	80067de <HAL_SPI_TransmitReceive+0x57e>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d045      	beq.n	80067de <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800677a:	7812      	ldrb	r2, [r2, #0]
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006796:	7812      	ldrb	r2, [r2, #0]
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b04      	subs	r3, #4
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80067dc:	e047      	b.n	800686e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80067de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d820      	bhi.n	8006826 <HAL_SPI_TransmitReceive+0x5c6>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01b      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006822:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006824:	e023      	b.n	800686e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006826:	f7fb fd51 	bl	80022cc <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006832:	429a      	cmp	r2, r3
 8006834:	d803      	bhi.n	800683e <HAL_SPI_TransmitReceive+0x5de>
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d102      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x5e4>
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	2b00      	cmp	r3, #0
 8006842:	d114      	bne.n	800686e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fa5f 	bl	8006d08 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006850:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e02d      	b.n	80068ca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800686e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f af11 	bne.w	8006698 <HAL_SPI_TransmitReceive+0x438>
 8006876:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006878:	2b00      	cmp	r3, #0
 800687a:	f47f af0d 	bne.w	8006698 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	2200      	movs	r2, #0
 8006886:	2108      	movs	r1, #8
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fadd 	bl	8006e48 <SPI_WaitOnFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d007      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fa2f 	bl	8006d08 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80068c8:	2300      	movs	r3, #0
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3730      	adds	r7, #48	@ 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop

080068d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	@ 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4013      	ands	r3, r2
 80068f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006906:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3330      	adds	r3, #48	@ 0x30
 800690e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006916:	2b00      	cmp	r3, #0
 8006918:	d010      	beq.n	800693c <HAL_SPI_IRQHandler+0x68>
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006932:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f9c3 	bl	8006cc0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800693a:	e192      	b.n	8006c62 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d113      	bne.n	800696e <HAL_SPI_IRQHandler+0x9a>
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10e      	bne.n	800696e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
    handled = 1UL;
 800696a:	2301      	movs	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10f      	bne.n	8006998 <HAL_SPI_IRQHandler+0xc4>
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
    handled = 1UL;
 8006994:	2301      	movs	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <HAL_SPI_IRQHandler+0xee>
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
    handled = 1UL;
 80069be:	2301      	movs	r3, #1
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f040 8147 	bne.w	8006c58 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 808b 	beq.w	8006aec <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0208 	orr.w	r2, r2, #8
 80069e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0210 	orr.w	r2, r2, #16
 80069f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a04:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0208 	bic.w	r2, r2, #8
 8006a14:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d13d      	bne.n	8006aa0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006a24:	e036      	b.n	8006a94 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b0f      	cmp	r3, #15
 8006a2c:	d90b      	bls.n	8006a46 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a38:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3e:	1d1a      	adds	r2, r3, #4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	665a      	str	r2, [r3, #100]	@ 0x64
 8006a44:	e01d      	b.n	8006a82 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b07      	cmp	r3, #7
 8006a4c:	d90b      	bls.n	8006a66 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	8812      	ldrh	r2, [r2, #0]
 8006a56:	b292      	uxth	r2, r2
 8006a58:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	665a      	str	r2, [r3, #100]	@ 0x64
 8006a64:	e00d      	b.n	8006a82 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1c2      	bne.n	8006a26 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f931 	bl	8006d08 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f8f7 	bl	8006cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006abe:	e0d0      	b.n	8006c62 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d103      	bne.n	8006ace <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8e6 	bl	8006c98 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006acc:	e0c6      	b.n	8006c5c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006ace:	7cfb      	ldrb	r3, [r7, #19]
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d103      	bne.n	8006adc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f8d5 	bl	8006c84 <HAL_SPI_RxCpltCallback>
    return;
 8006ada:	e0bf      	b.n	8006c5c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	f040 80bc 	bne.w	8006c5c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f8c3 	bl	8006c70 <HAL_SPI_TxCpltCallback>
    return;
 8006aea:	e0b7      	b.n	8006c5c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80b5 	beq.w	8006c62 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b08:	f043 0204 	orr.w	r2, r3, #4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b20:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00f      	beq.n	8006b4c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b32:	f043 0201 	orr.w	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b4a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00f      	beq.n	8006b76 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b5c:	f043 0208 	orr.w	r2, r3, #8
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b74:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00f      	beq.n	8006ba0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0220 	orr.w	r2, r2, #32
 8006b9e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d05a      	beq.n	8006c60 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6919      	ldr	r1, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	4b28      	ldr	r3, [pc, #160]	@ (8006c68 <HAL_SPI_IRQHandler+0x394>)
 8006bc6:	400b      	ands	r3, r1
 8006bc8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006bd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006bd4:	d138      	bne.n	8006c48 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006be4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d013      	beq.n	8006c16 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c6c <HAL_SPI_IRQHandler+0x398>)
 8006bf4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fb fd2a 	bl	8002654 <HAL_DMA_Abort_IT>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d020      	beq.n	8006c60 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c22:	4a12      	ldr	r2, [pc, #72]	@ (8006c6c <HAL_SPI_IRQHandler+0x398>)
 8006c24:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fb fd12 	bl	8002654 <HAL_DMA_Abort_IT>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d014      	beq.n	8006c60 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c46:	e00b      	b.n	8006c60 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f82b 	bl	8006cac <HAL_SPI_ErrorCallback>
    return;
 8006c56:	e003      	b.n	8006c60 <HAL_SPI_IRQHandler+0x38c>
    return;
 8006c58:	bf00      	nop
 8006c5a:	e002      	b.n	8006c62 <HAL_SPI_IRQHandler+0x38e>
    return;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <HAL_SPI_IRQHandler+0x38e>
    return;
 8006c60:	bf00      	nop
  }
}
 8006c62:	3728      	adds	r7, #40	@ 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	fffffc94 	.word	0xfffffc94
 8006c6c:	08006cd5 	.word	0x08006cd5

08006c70 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff ffd6 	bl	8006cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699a      	ldr	r2, [r3, #24]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0208 	orr.w	r2, r2, #8
 8006d26:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0210 	orr.w	r2, r2, #16
 8006d36:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6919      	ldr	r1, [r3, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b3c      	ldr	r3, [pc, #240]	@ (8006e44 <SPI_CloseTransfer+0x13c>)
 8006d54:	400b      	ands	r3, r1
 8006d56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d014      	beq.n	8006d9e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00f      	beq.n	8006d9e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699a      	ldr	r2, [r3, #24]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0220 	orr.w	r2, r2, #32
 8006d9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d014      	beq.n	8006dd4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00f      	beq.n	8006dd4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dd2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00f      	beq.n	8006dfe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de4:	f043 0201 	orr.w	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dfc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00f      	beq.n	8006e28 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e0e:	f043 0208 	orr.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e26:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	fffffc90 	.word	0xfffffc90

08006e48 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	4613      	mov	r3, r2
 8006e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e58:	e010      	b.n	8006e7c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5a:	f7fb fa37 	bl	80022cc <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d803      	bhi.n	8006e72 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d102      	bne.n	8006e78 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e00f      	b.n	8006e9c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	4013      	ands	r3, r2
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	bf0c      	ite	eq
 8006e8c:	2301      	moveq	r3, #1
 8006e8e:	2300      	movne	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d0df      	beq.n	8006e5a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	3307      	adds	r3, #7
 8006ec2:	08db      	lsrs	r3, r3, #3
 8006ec4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	fb02 f303 	mul.w	r3, r2, r3
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e042      	b.n	8006f72 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d106      	bne.n	8006f04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f83b 	bl	8006f7a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2224      	movs	r2, #36	@ 0x24
 8006f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fe29 	bl	8007b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f8be 	bl	80070ac <UART_SetConfig>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e01b      	b.n	8006f72 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0201 	orr.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fea8 	bl	8007cc0 <UART_CheckIdleState>
 8006f70:	4603      	mov	r3, r0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b08a      	sub	sp, #40	@ 0x28
 8006f92:	af02      	add	r7, sp, #8
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d17b      	bne.n	80070a0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Transmit+0x26>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e074      	b.n	80070a2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2221      	movs	r2, #33	@ 0x21
 8006fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fc8:	f7fb f980 	bl	80022cc <HAL_GetTick>
 8006fcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	88fa      	ldrh	r2, [r7, #6]
 8006fda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe6:	d108      	bne.n	8006ffa <HAL_UART_Transmit+0x6c>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	e003      	b.n	8007002 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007002:	e030      	b.n	8007066 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2200      	movs	r2, #0
 800700c:	2180      	movs	r1, #128	@ 0x80
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 ff00 	bl	8007e14 <UART_WaitOnFlagUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e03d      	b.n	80070a2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800703a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	3302      	adds	r3, #2
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	e007      	b.n	8007054 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3301      	adds	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1c8      	bne.n	8007004 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2200      	movs	r2, #0
 800707a:	2140      	movs	r1, #64	@ 0x40
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fec9 	bl	8007e14 <UART_WaitOnFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e006      	b.n	80070a2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070a0:	2302      	movs	r3, #2
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b0:	b092      	sub	sp, #72	@ 0x48
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4bbe      	ldr	r3, [pc, #760]	@ (80073d4 <UART_SetConfig+0x328>)
 80070dc:	4013      	ands	r3, r2
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070e4:	430b      	orrs	r3, r1
 80070e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4ab3      	ldr	r2, [pc, #716]	@ (80073d8 <UART_SetConfig+0x32c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007114:	4313      	orrs	r3, r2
 8007116:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	4baf      	ldr	r3, [pc, #700]	@ (80073dc <UART_SetConfig+0x330>)
 8007120:	4013      	ands	r3, r2
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007128:	430b      	orrs	r3, r1
 800712a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	f023 010f 	bic.w	r1, r3, #15
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4aa6      	ldr	r2, [pc, #664]	@ (80073e0 <UART_SetConfig+0x334>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d177      	bne.n	800723c <UART_SetConfig+0x190>
 800714c:	4ba5      	ldr	r3, [pc, #660]	@ (80073e4 <UART_SetConfig+0x338>)
 800714e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007154:	2b28      	cmp	r3, #40	@ 0x28
 8007156:	d86d      	bhi.n	8007234 <UART_SetConfig+0x188>
 8007158:	a201      	add	r2, pc, #4	@ (adr r2, 8007160 <UART_SetConfig+0xb4>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007205 	.word	0x08007205
 8007164:	08007235 	.word	0x08007235
 8007168:	08007235 	.word	0x08007235
 800716c:	08007235 	.word	0x08007235
 8007170:	08007235 	.word	0x08007235
 8007174:	08007235 	.word	0x08007235
 8007178:	08007235 	.word	0x08007235
 800717c:	08007235 	.word	0x08007235
 8007180:	0800720d 	.word	0x0800720d
 8007184:	08007235 	.word	0x08007235
 8007188:	08007235 	.word	0x08007235
 800718c:	08007235 	.word	0x08007235
 8007190:	08007235 	.word	0x08007235
 8007194:	08007235 	.word	0x08007235
 8007198:	08007235 	.word	0x08007235
 800719c:	08007235 	.word	0x08007235
 80071a0:	08007215 	.word	0x08007215
 80071a4:	08007235 	.word	0x08007235
 80071a8:	08007235 	.word	0x08007235
 80071ac:	08007235 	.word	0x08007235
 80071b0:	08007235 	.word	0x08007235
 80071b4:	08007235 	.word	0x08007235
 80071b8:	08007235 	.word	0x08007235
 80071bc:	08007235 	.word	0x08007235
 80071c0:	0800721d 	.word	0x0800721d
 80071c4:	08007235 	.word	0x08007235
 80071c8:	08007235 	.word	0x08007235
 80071cc:	08007235 	.word	0x08007235
 80071d0:	08007235 	.word	0x08007235
 80071d4:	08007235 	.word	0x08007235
 80071d8:	08007235 	.word	0x08007235
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007225 	.word	0x08007225
 80071e4:	08007235 	.word	0x08007235
 80071e8:	08007235 	.word	0x08007235
 80071ec:	08007235 	.word	0x08007235
 80071f0:	08007235 	.word	0x08007235
 80071f4:	08007235 	.word	0x08007235
 80071f8:	08007235 	.word	0x08007235
 80071fc:	08007235 	.word	0x08007235
 8007200:	0800722d 	.word	0x0800722d
 8007204:	2301      	movs	r3, #1
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e222      	b.n	8007652 <UART_SetConfig+0x5a6>
 800720c:	2304      	movs	r3, #4
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007212:	e21e      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007214:	2308      	movs	r3, #8
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721a:	e21a      	b.n	8007652 <UART_SetConfig+0x5a6>
 800721c:	2310      	movs	r3, #16
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007222:	e216      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007224:	2320      	movs	r3, #32
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722a:	e212      	b.n	8007652 <UART_SetConfig+0x5a6>
 800722c:	2340      	movs	r3, #64	@ 0x40
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007232:	e20e      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007234:	2380      	movs	r3, #128	@ 0x80
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723a:	e20a      	b.n	8007652 <UART_SetConfig+0x5a6>
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a69      	ldr	r2, [pc, #420]	@ (80073e8 <UART_SetConfig+0x33c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d130      	bne.n	80072a8 <UART_SetConfig+0x1fc>
 8007246:	4b67      	ldr	r3, [pc, #412]	@ (80073e4 <UART_SetConfig+0x338>)
 8007248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	2b05      	cmp	r3, #5
 8007250:	d826      	bhi.n	80072a0 <UART_SetConfig+0x1f4>
 8007252:	a201      	add	r2, pc, #4	@ (adr r2, 8007258 <UART_SetConfig+0x1ac>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	08007271 	.word	0x08007271
 800725c:	08007279 	.word	0x08007279
 8007260:	08007281 	.word	0x08007281
 8007264:	08007289 	.word	0x08007289
 8007268:	08007291 	.word	0x08007291
 800726c:	08007299 	.word	0x08007299
 8007270:	2300      	movs	r3, #0
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e1ec      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e1e8      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007286:	e1e4      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728e:	e1e0      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007290:	2320      	movs	r3, #32
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007296:	e1dc      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007298:	2340      	movs	r3, #64	@ 0x40
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729e:	e1d8      	b.n	8007652 <UART_SetConfig+0x5a6>
 80072a0:	2380      	movs	r3, #128	@ 0x80
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a6:	e1d4      	b.n	8007652 <UART_SetConfig+0x5a6>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a4f      	ldr	r2, [pc, #316]	@ (80073ec <UART_SetConfig+0x340>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d130      	bne.n	8007314 <UART_SetConfig+0x268>
 80072b2:	4b4c      	ldr	r3, [pc, #304]	@ (80073e4 <UART_SetConfig+0x338>)
 80072b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d826      	bhi.n	800730c <UART_SetConfig+0x260>
 80072be:	a201      	add	r2, pc, #4	@ (adr r2, 80072c4 <UART_SetConfig+0x218>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072dd 	.word	0x080072dd
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072ed 	.word	0x080072ed
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	080072fd 	.word	0x080072fd
 80072d8:	08007305 	.word	0x08007305
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e1b6      	b.n	8007652 <UART_SetConfig+0x5a6>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e1b2      	b.n	8007652 <UART_SetConfig+0x5a6>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f2:	e1ae      	b.n	8007652 <UART_SetConfig+0x5a6>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fa:	e1aa      	b.n	8007652 <UART_SetConfig+0x5a6>
 80072fc:	2320      	movs	r3, #32
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007302:	e1a6      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007304:	2340      	movs	r3, #64	@ 0x40
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730a:	e1a2      	b.n	8007652 <UART_SetConfig+0x5a6>
 800730c:	2380      	movs	r3, #128	@ 0x80
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007312:	e19e      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a35      	ldr	r2, [pc, #212]	@ (80073f0 <UART_SetConfig+0x344>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d130      	bne.n	8007380 <UART_SetConfig+0x2d4>
 800731e:	4b31      	ldr	r3, [pc, #196]	@ (80073e4 <UART_SetConfig+0x338>)
 8007320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b05      	cmp	r3, #5
 8007328:	d826      	bhi.n	8007378 <UART_SetConfig+0x2cc>
 800732a:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <UART_SetConfig+0x284>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007349 	.word	0x08007349
 8007334:	08007351 	.word	0x08007351
 8007338:	08007359 	.word	0x08007359
 800733c:	08007361 	.word	0x08007361
 8007340:	08007369 	.word	0x08007369
 8007344:	08007371 	.word	0x08007371
 8007348:	2300      	movs	r3, #0
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e180      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e17c      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e178      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e174      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007368:	2320      	movs	r3, #32
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e170      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007370:	2340      	movs	r3, #64	@ 0x40
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e16c      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007378:	2380      	movs	r3, #128	@ 0x80
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e168      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1b      	ldr	r2, [pc, #108]	@ (80073f4 <UART_SetConfig+0x348>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d142      	bne.n	8007410 <UART_SetConfig+0x364>
 800738a:	4b16      	ldr	r3, [pc, #88]	@ (80073e4 <UART_SetConfig+0x338>)
 800738c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	2b05      	cmp	r3, #5
 8007394:	d838      	bhi.n	8007408 <UART_SetConfig+0x35c>
 8007396:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <UART_SetConfig+0x2f0>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073b5 	.word	0x080073b5
 80073a0:	080073bd 	.word	0x080073bd
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073cd 	.word	0x080073cd
 80073ac:	080073f9 	.word	0x080073f9
 80073b0:	08007401 	.word	0x08007401
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ba:	e14a      	b.n	8007652 <UART_SetConfig+0x5a6>
 80073bc:	2304      	movs	r3, #4
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e146      	b.n	8007652 <UART_SetConfig+0x5a6>
 80073c4:	2308      	movs	r3, #8
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ca:	e142      	b.n	8007652 <UART_SetConfig+0x5a6>
 80073cc:	2310      	movs	r3, #16
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d2:	e13e      	b.n	8007652 <UART_SetConfig+0x5a6>
 80073d4:	cfff69f3 	.word	0xcfff69f3
 80073d8:	58000c00 	.word	0x58000c00
 80073dc:	11fff4ff 	.word	0x11fff4ff
 80073e0:	40011000 	.word	0x40011000
 80073e4:	58024400 	.word	0x58024400
 80073e8:	40004400 	.word	0x40004400
 80073ec:	40004800 	.word	0x40004800
 80073f0:	40004c00 	.word	0x40004c00
 80073f4:	40005000 	.word	0x40005000
 80073f8:	2320      	movs	r3, #32
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e128      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007400:	2340      	movs	r3, #64	@ 0x40
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007406:	e124      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007408:	2380      	movs	r3, #128	@ 0x80
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740e:	e120      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4acb      	ldr	r2, [pc, #812]	@ (8007744 <UART_SetConfig+0x698>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d176      	bne.n	8007508 <UART_SetConfig+0x45c>
 800741a:	4bcb      	ldr	r3, [pc, #812]	@ (8007748 <UART_SetConfig+0x69c>)
 800741c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007422:	2b28      	cmp	r3, #40	@ 0x28
 8007424:	d86c      	bhi.n	8007500 <UART_SetConfig+0x454>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <UART_SetConfig+0x380>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	080074d1 	.word	0x080074d1
 8007430:	08007501 	.word	0x08007501
 8007434:	08007501 	.word	0x08007501
 8007438:	08007501 	.word	0x08007501
 800743c:	08007501 	.word	0x08007501
 8007440:	08007501 	.word	0x08007501
 8007444:	08007501 	.word	0x08007501
 8007448:	08007501 	.word	0x08007501
 800744c:	080074d9 	.word	0x080074d9
 8007450:	08007501 	.word	0x08007501
 8007454:	08007501 	.word	0x08007501
 8007458:	08007501 	.word	0x08007501
 800745c:	08007501 	.word	0x08007501
 8007460:	08007501 	.word	0x08007501
 8007464:	08007501 	.word	0x08007501
 8007468:	08007501 	.word	0x08007501
 800746c:	080074e1 	.word	0x080074e1
 8007470:	08007501 	.word	0x08007501
 8007474:	08007501 	.word	0x08007501
 8007478:	08007501 	.word	0x08007501
 800747c:	08007501 	.word	0x08007501
 8007480:	08007501 	.word	0x08007501
 8007484:	08007501 	.word	0x08007501
 8007488:	08007501 	.word	0x08007501
 800748c:	080074e9 	.word	0x080074e9
 8007490:	08007501 	.word	0x08007501
 8007494:	08007501 	.word	0x08007501
 8007498:	08007501 	.word	0x08007501
 800749c:	08007501 	.word	0x08007501
 80074a0:	08007501 	.word	0x08007501
 80074a4:	08007501 	.word	0x08007501
 80074a8:	08007501 	.word	0x08007501
 80074ac:	080074f1 	.word	0x080074f1
 80074b0:	08007501 	.word	0x08007501
 80074b4:	08007501 	.word	0x08007501
 80074b8:	08007501 	.word	0x08007501
 80074bc:	08007501 	.word	0x08007501
 80074c0:	08007501 	.word	0x08007501
 80074c4:	08007501 	.word	0x08007501
 80074c8:	08007501 	.word	0x08007501
 80074cc:	080074f9 	.word	0x080074f9
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e0bc      	b.n	8007652 <UART_SetConfig+0x5a6>
 80074d8:	2304      	movs	r3, #4
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e0b8      	b.n	8007652 <UART_SetConfig+0x5a6>
 80074e0:	2308      	movs	r3, #8
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e0b4      	b.n	8007652 <UART_SetConfig+0x5a6>
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e0b0      	b.n	8007652 <UART_SetConfig+0x5a6>
 80074f0:	2320      	movs	r3, #32
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e0ac      	b.n	8007652 <UART_SetConfig+0x5a6>
 80074f8:	2340      	movs	r3, #64	@ 0x40
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fe:	e0a8      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007500:	2380      	movs	r3, #128	@ 0x80
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007506:	e0a4      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a8f      	ldr	r2, [pc, #572]	@ (800774c <UART_SetConfig+0x6a0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d130      	bne.n	8007574 <UART_SetConfig+0x4c8>
 8007512:	4b8d      	ldr	r3, [pc, #564]	@ (8007748 <UART_SetConfig+0x69c>)
 8007514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b05      	cmp	r3, #5
 800751c:	d826      	bhi.n	800756c <UART_SetConfig+0x4c0>
 800751e:	a201      	add	r2, pc, #4	@ (adr r2, 8007524 <UART_SetConfig+0x478>)
 8007520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007524:	0800753d 	.word	0x0800753d
 8007528:	08007545 	.word	0x08007545
 800752c:	0800754d 	.word	0x0800754d
 8007530:	08007555 	.word	0x08007555
 8007534:	0800755d 	.word	0x0800755d
 8007538:	08007565 	.word	0x08007565
 800753c:	2300      	movs	r3, #0
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e086      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007544:	2304      	movs	r3, #4
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e082      	b.n	8007652 <UART_SetConfig+0x5a6>
 800754c:	2308      	movs	r3, #8
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e07e      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007554:	2310      	movs	r3, #16
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e07a      	b.n	8007652 <UART_SetConfig+0x5a6>
 800755c:	2320      	movs	r3, #32
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	e076      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007564:	2340      	movs	r3, #64	@ 0x40
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e072      	b.n	8007652 <UART_SetConfig+0x5a6>
 800756c:	2380      	movs	r3, #128	@ 0x80
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e06e      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a75      	ldr	r2, [pc, #468]	@ (8007750 <UART_SetConfig+0x6a4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d130      	bne.n	80075e0 <UART_SetConfig+0x534>
 800757e:	4b72      	ldr	r3, [pc, #456]	@ (8007748 <UART_SetConfig+0x69c>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	2b05      	cmp	r3, #5
 8007588:	d826      	bhi.n	80075d8 <UART_SetConfig+0x52c>
 800758a:	a201      	add	r2, pc, #4	@ (adr r2, 8007590 <UART_SetConfig+0x4e4>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075a9 	.word	0x080075a9
 8007594:	080075b1 	.word	0x080075b1
 8007598:	080075b9 	.word	0x080075b9
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075c9 	.word	0x080075c9
 80075a4:	080075d1 	.word	0x080075d1
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e050      	b.n	8007652 <UART_SetConfig+0x5a6>
 80075b0:	2304      	movs	r3, #4
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e04c      	b.n	8007652 <UART_SetConfig+0x5a6>
 80075b8:	2308      	movs	r3, #8
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e048      	b.n	8007652 <UART_SetConfig+0x5a6>
 80075c0:	2310      	movs	r3, #16
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e044      	b.n	8007652 <UART_SetConfig+0x5a6>
 80075c8:	2320      	movs	r3, #32
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e040      	b.n	8007652 <UART_SetConfig+0x5a6>
 80075d0:	2340      	movs	r3, #64	@ 0x40
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e03c      	b.n	8007652 <UART_SetConfig+0x5a6>
 80075d8:	2380      	movs	r3, #128	@ 0x80
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e038      	b.n	8007652 <UART_SetConfig+0x5a6>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a5b      	ldr	r2, [pc, #364]	@ (8007754 <UART_SetConfig+0x6a8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d130      	bne.n	800764c <UART_SetConfig+0x5a0>
 80075ea:	4b57      	ldr	r3, [pc, #348]	@ (8007748 <UART_SetConfig+0x69c>)
 80075ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	d826      	bhi.n	8007644 <UART_SetConfig+0x598>
 80075f6:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <UART_SetConfig+0x550>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007615 	.word	0x08007615
 8007600:	0800761d 	.word	0x0800761d
 8007604:	08007625 	.word	0x08007625
 8007608:	0800762d 	.word	0x0800762d
 800760c:	08007635 	.word	0x08007635
 8007610:	0800763d 	.word	0x0800763d
 8007614:	2302      	movs	r3, #2
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e01a      	b.n	8007652 <UART_SetConfig+0x5a6>
 800761c:	2304      	movs	r3, #4
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e016      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007624:	2308      	movs	r3, #8
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e012      	b.n	8007652 <UART_SetConfig+0x5a6>
 800762c:	2310      	movs	r3, #16
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e00e      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007634:	2320      	movs	r3, #32
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e00a      	b.n	8007652 <UART_SetConfig+0x5a6>
 800763c:	2340      	movs	r3, #64	@ 0x40
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e006      	b.n	8007652 <UART_SetConfig+0x5a6>
 8007644:	2380      	movs	r3, #128	@ 0x80
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e002      	b.n	8007652 <UART_SetConfig+0x5a6>
 800764c:	2380      	movs	r3, #128	@ 0x80
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a3f      	ldr	r2, [pc, #252]	@ (8007754 <UART_SetConfig+0x6a8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	f040 80f8 	bne.w	800784e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800765e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007662:	2b20      	cmp	r3, #32
 8007664:	dc46      	bgt.n	80076f4 <UART_SetConfig+0x648>
 8007666:	2b02      	cmp	r3, #2
 8007668:	f2c0 8082 	blt.w	8007770 <UART_SetConfig+0x6c4>
 800766c:	3b02      	subs	r3, #2
 800766e:	2b1e      	cmp	r3, #30
 8007670:	d87e      	bhi.n	8007770 <UART_SetConfig+0x6c4>
 8007672:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0x5cc>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076fb 	.word	0x080076fb
 800767c:	08007771 	.word	0x08007771
 8007680:	08007703 	.word	0x08007703
 8007684:	08007771 	.word	0x08007771
 8007688:	08007771 	.word	0x08007771
 800768c:	08007771 	.word	0x08007771
 8007690:	08007713 	.word	0x08007713
 8007694:	08007771 	.word	0x08007771
 8007698:	08007771 	.word	0x08007771
 800769c:	08007771 	.word	0x08007771
 80076a0:	08007771 	.word	0x08007771
 80076a4:	08007771 	.word	0x08007771
 80076a8:	08007771 	.word	0x08007771
 80076ac:	08007771 	.word	0x08007771
 80076b0:	08007723 	.word	0x08007723
 80076b4:	08007771 	.word	0x08007771
 80076b8:	08007771 	.word	0x08007771
 80076bc:	08007771 	.word	0x08007771
 80076c0:	08007771 	.word	0x08007771
 80076c4:	08007771 	.word	0x08007771
 80076c8:	08007771 	.word	0x08007771
 80076cc:	08007771 	.word	0x08007771
 80076d0:	08007771 	.word	0x08007771
 80076d4:	08007771 	.word	0x08007771
 80076d8:	08007771 	.word	0x08007771
 80076dc:	08007771 	.word	0x08007771
 80076e0:	08007771 	.word	0x08007771
 80076e4:	08007771 	.word	0x08007771
 80076e8:	08007771 	.word	0x08007771
 80076ec:	08007771 	.word	0x08007771
 80076f0:	08007763 	.word	0x08007763
 80076f4:	2b40      	cmp	r3, #64	@ 0x40
 80076f6:	d037      	beq.n	8007768 <UART_SetConfig+0x6bc>
 80076f8:	e03a      	b.n	8007770 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076fa:	f7fd fe7d 	bl	80053f8 <HAL_RCCEx_GetD3PCLK1Freq>
 80076fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007700:	e03c      	b.n	800777c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007706:	4618      	mov	r0, r3
 8007708:	f7fd fe8c 	bl	8005424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800770c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007710:	e034      	b.n	800777c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007712:	f107 0318 	add.w	r3, r7, #24
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd ffd8 	bl	80056cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007720:	e02c      	b.n	800777c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007722:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <UART_SetConfig+0x69c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d016      	beq.n	800775c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800772e:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <UART_SetConfig+0x69c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	08db      	lsrs	r3, r3, #3
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	4a07      	ldr	r2, [pc, #28]	@ (8007758 <UART_SetConfig+0x6ac>)
 800773a:	fa22 f303 	lsr.w	r3, r2, r3
 800773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007740:	e01c      	b.n	800777c <UART_SetConfig+0x6d0>
 8007742:	bf00      	nop
 8007744:	40011400 	.word	0x40011400
 8007748:	58024400 	.word	0x58024400
 800774c:	40007800 	.word	0x40007800
 8007750:	40007c00 	.word	0x40007c00
 8007754:	58000c00 	.word	0x58000c00
 8007758:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800775c:	4b9d      	ldr	r3, [pc, #628]	@ (80079d4 <UART_SetConfig+0x928>)
 800775e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007760:	e00c      	b.n	800777c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007762:	4b9d      	ldr	r3, [pc, #628]	@ (80079d8 <UART_SetConfig+0x92c>)
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007766:	e009      	b.n	800777c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776e:	e005      	b.n	800777c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800777a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800777c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 81de 	beq.w	8007b40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	4a94      	ldr	r2, [pc, #592]	@ (80079dc <UART_SetConfig+0x930>)
 800778a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800778e:	461a      	mov	r2, r3
 8007790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007792:	fbb3 f3f2 	udiv	r3, r3, r2
 8007796:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d305      	bcc.n	80077b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d903      	bls.n	80077bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077ba:	e1c1      	b.n	8007b40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077be:	2200      	movs	r2, #0
 80077c0:	60bb      	str	r3, [r7, #8]
 80077c2:	60fa      	str	r2, [r7, #12]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	4a84      	ldr	r2, [pc, #528]	@ (80079dc <UART_SetConfig+0x930>)
 80077ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2200      	movs	r2, #0
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077de:	f7f8 fdcf 	bl	8000380 <__aeabi_uldivmod>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4610      	mov	r0, r2
 80077e8:	4619      	mov	r1, r3
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	f04f 0300 	mov.w	r3, #0
 80077f2:	020b      	lsls	r3, r1, #8
 80077f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077f8:	0202      	lsls	r2, r0, #8
 80077fa:	6979      	ldr	r1, [r7, #20]
 80077fc:	6849      	ldr	r1, [r1, #4]
 80077fe:	0849      	lsrs	r1, r1, #1
 8007800:	2000      	movs	r0, #0
 8007802:	460c      	mov	r4, r1
 8007804:	4605      	mov	r5, r0
 8007806:	eb12 0804 	adds.w	r8, r2, r4
 800780a:	eb43 0905 	adc.w	r9, r3, r5
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	469a      	mov	sl, r3
 8007816:	4693      	mov	fp, r2
 8007818:	4652      	mov	r2, sl
 800781a:	465b      	mov	r3, fp
 800781c:	4640      	mov	r0, r8
 800781e:	4649      	mov	r1, r9
 8007820:	f7f8 fdae 	bl	8000380 <__aeabi_uldivmod>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4613      	mov	r3, r2
 800782a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007832:	d308      	bcc.n	8007846 <UART_SetConfig+0x79a>
 8007834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800783a:	d204      	bcs.n	8007846 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007842:	60da      	str	r2, [r3, #12]
 8007844:	e17c      	b.n	8007b40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800784c:	e178      	b.n	8007b40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007856:	f040 80c5 	bne.w	80079e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800785a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800785e:	2b20      	cmp	r3, #32
 8007860:	dc48      	bgt.n	80078f4 <UART_SetConfig+0x848>
 8007862:	2b00      	cmp	r3, #0
 8007864:	db7b      	blt.n	800795e <UART_SetConfig+0x8b2>
 8007866:	2b20      	cmp	r3, #32
 8007868:	d879      	bhi.n	800795e <UART_SetConfig+0x8b2>
 800786a:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <UART_SetConfig+0x7c4>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	080078fb 	.word	0x080078fb
 8007874:	08007903 	.word	0x08007903
 8007878:	0800795f 	.word	0x0800795f
 800787c:	0800795f 	.word	0x0800795f
 8007880:	0800790b 	.word	0x0800790b
 8007884:	0800795f 	.word	0x0800795f
 8007888:	0800795f 	.word	0x0800795f
 800788c:	0800795f 	.word	0x0800795f
 8007890:	0800791b 	.word	0x0800791b
 8007894:	0800795f 	.word	0x0800795f
 8007898:	0800795f 	.word	0x0800795f
 800789c:	0800795f 	.word	0x0800795f
 80078a0:	0800795f 	.word	0x0800795f
 80078a4:	0800795f 	.word	0x0800795f
 80078a8:	0800795f 	.word	0x0800795f
 80078ac:	0800795f 	.word	0x0800795f
 80078b0:	0800792b 	.word	0x0800792b
 80078b4:	0800795f 	.word	0x0800795f
 80078b8:	0800795f 	.word	0x0800795f
 80078bc:	0800795f 	.word	0x0800795f
 80078c0:	0800795f 	.word	0x0800795f
 80078c4:	0800795f 	.word	0x0800795f
 80078c8:	0800795f 	.word	0x0800795f
 80078cc:	0800795f 	.word	0x0800795f
 80078d0:	0800795f 	.word	0x0800795f
 80078d4:	0800795f 	.word	0x0800795f
 80078d8:	0800795f 	.word	0x0800795f
 80078dc:	0800795f 	.word	0x0800795f
 80078e0:	0800795f 	.word	0x0800795f
 80078e4:	0800795f 	.word	0x0800795f
 80078e8:	0800795f 	.word	0x0800795f
 80078ec:	0800795f 	.word	0x0800795f
 80078f0:	08007951 	.word	0x08007951
 80078f4:	2b40      	cmp	r3, #64	@ 0x40
 80078f6:	d02e      	beq.n	8007956 <UART_SetConfig+0x8aa>
 80078f8:	e031      	b.n	800795e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fa:	f7fc fb47 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 80078fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007900:	e033      	b.n	800796a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007902:	f7fc fb59 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8007906:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007908:	e02f      	b.n	800796a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800790e:	4618      	mov	r0, r3
 8007910:	f7fd fd88 	bl	8005424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007918:	e027      	b.n	800796a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800791a:	f107 0318 	add.w	r3, r7, #24
 800791e:	4618      	mov	r0, r3
 8007920:	f7fd fed4 	bl	80056cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007928:	e01f      	b.n	800796a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800792a:	4b2d      	ldr	r3, [pc, #180]	@ (80079e0 <UART_SetConfig+0x934>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007936:	4b2a      	ldr	r3, [pc, #168]	@ (80079e0 <UART_SetConfig+0x934>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	08db      	lsrs	r3, r3, #3
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	4a24      	ldr	r2, [pc, #144]	@ (80079d4 <UART_SetConfig+0x928>)
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007948:	e00f      	b.n	800796a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800794a:	4b22      	ldr	r3, [pc, #136]	@ (80079d4 <UART_SetConfig+0x928>)
 800794c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794e:	e00c      	b.n	800796a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007950:	4b21      	ldr	r3, [pc, #132]	@ (80079d8 <UART_SetConfig+0x92c>)
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007954:	e009      	b.n	800796a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800795a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800795c:	e005      	b.n	800796a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800796a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 80e7 	beq.w	8007b40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	4a19      	ldr	r2, [pc, #100]	@ (80079dc <UART_SetConfig+0x930>)
 8007978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800797c:	461a      	mov	r2, r3
 800797e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007980:	fbb3 f3f2 	udiv	r3, r3, r2
 8007984:	005a      	lsls	r2, r3, #1
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	441a      	add	r2, r3
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	fbb2 f3f3 	udiv	r3, r2, r3
 8007996:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	2b0f      	cmp	r3, #15
 800799c:	d916      	bls.n	80079cc <UART_SetConfig+0x920>
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a4:	d212      	bcs.n	80079cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f023 030f 	bic.w	r3, r3, #15
 80079ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80079be:	4313      	orrs	r3, r2
 80079c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	e0b9      	b.n	8007b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079d2:	e0b5      	b.n	8007b40 <UART_SetConfig+0xa94>
 80079d4:	03d09000 	.word	0x03d09000
 80079d8:	003d0900 	.word	0x003d0900
 80079dc:	08009b28 	.word	0x08009b28
 80079e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80079e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	dc49      	bgt.n	8007a80 <UART_SetConfig+0x9d4>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	db7c      	blt.n	8007aea <UART_SetConfig+0xa3e>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d87a      	bhi.n	8007aea <UART_SetConfig+0xa3e>
 80079f4:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <UART_SetConfig+0x950>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a87 	.word	0x08007a87
 8007a00:	08007a8f 	.word	0x08007a8f
 8007a04:	08007aeb 	.word	0x08007aeb
 8007a08:	08007aeb 	.word	0x08007aeb
 8007a0c:	08007a97 	.word	0x08007a97
 8007a10:	08007aeb 	.word	0x08007aeb
 8007a14:	08007aeb 	.word	0x08007aeb
 8007a18:	08007aeb 	.word	0x08007aeb
 8007a1c:	08007aa7 	.word	0x08007aa7
 8007a20:	08007aeb 	.word	0x08007aeb
 8007a24:	08007aeb 	.word	0x08007aeb
 8007a28:	08007aeb 	.word	0x08007aeb
 8007a2c:	08007aeb 	.word	0x08007aeb
 8007a30:	08007aeb 	.word	0x08007aeb
 8007a34:	08007aeb 	.word	0x08007aeb
 8007a38:	08007aeb 	.word	0x08007aeb
 8007a3c:	08007ab7 	.word	0x08007ab7
 8007a40:	08007aeb 	.word	0x08007aeb
 8007a44:	08007aeb 	.word	0x08007aeb
 8007a48:	08007aeb 	.word	0x08007aeb
 8007a4c:	08007aeb 	.word	0x08007aeb
 8007a50:	08007aeb 	.word	0x08007aeb
 8007a54:	08007aeb 	.word	0x08007aeb
 8007a58:	08007aeb 	.word	0x08007aeb
 8007a5c:	08007aeb 	.word	0x08007aeb
 8007a60:	08007aeb 	.word	0x08007aeb
 8007a64:	08007aeb 	.word	0x08007aeb
 8007a68:	08007aeb 	.word	0x08007aeb
 8007a6c:	08007aeb 	.word	0x08007aeb
 8007a70:	08007aeb 	.word	0x08007aeb
 8007a74:	08007aeb 	.word	0x08007aeb
 8007a78:	08007aeb 	.word	0x08007aeb
 8007a7c:	08007add 	.word	0x08007add
 8007a80:	2b40      	cmp	r3, #64	@ 0x40
 8007a82:	d02e      	beq.n	8007ae2 <UART_SetConfig+0xa36>
 8007a84:	e031      	b.n	8007aea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a86:	f7fc fa81 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8007a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a8c:	e033      	b.n	8007af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a8e:	f7fc fa93 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8007a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a94:	e02f      	b.n	8007af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fd fcc2 	bl	8005424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa4:	e027      	b.n	8007af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa6:	f107 0318 	add.w	r3, r7, #24
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fd fe0e 	bl	80056cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab4:	e01f      	b.n	8007af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b6c <UART_SetConfig+0xac0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b6c <UART_SetConfig+0xac0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	08db      	lsrs	r3, r3, #3
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	4a28      	ldr	r2, [pc, #160]	@ (8007b70 <UART_SetConfig+0xac4>)
 8007ace:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ad4:	e00f      	b.n	8007af6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ad6:	4b26      	ldr	r3, [pc, #152]	@ (8007b70 <UART_SetConfig+0xac4>)
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ada:	e00c      	b.n	8007af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007adc:	4b25      	ldr	r3, [pc, #148]	@ (8007b74 <UART_SetConfig+0xac8>)
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae0:	e009      	b.n	8007af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae8:	e005      	b.n	8007af6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007af4:	bf00      	nop
    }

    if (pclk != 0U)
 8007af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d021      	beq.n	8007b40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	4a1d      	ldr	r2, [pc, #116]	@ (8007b78 <UART_SetConfig+0xacc>)
 8007b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b06:	461a      	mov	r2, r3
 8007b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	085b      	lsrs	r3, r3, #1
 8007b14:	441a      	add	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b22:	2b0f      	cmp	r3, #15
 8007b24:	d909      	bls.n	8007b3a <UART_SetConfig+0xa8e>
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b2c:	d205      	bcs.n	8007b3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60da      	str	r2, [r3, #12]
 8007b38:	e002      	b.n	8007b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2200      	movs	r2, #0
 8007b54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b5c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3748      	adds	r7, #72	@ 0x48
 8007b64:	46bd      	mov	sp, r7
 8007b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b6a:	bf00      	nop
 8007b6c:	58024400 	.word	0x58024400
 8007b70:	03d09000 	.word	0x03d09000
 8007b74:	003d0900 	.word	0x003d0900
 8007b78:	08009b28 	.word	0x08009b28

08007b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c10:	f003 0310 	and.w	r3, r3, #16
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c7a:	d10a      	bne.n	8007c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b098      	sub	sp, #96	@ 0x60
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cd0:	f7fa fafc 	bl	80022cc <HAL_GetTick>
 8007cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d12f      	bne.n	8007d44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cec:	2200      	movs	r2, #0
 8007cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f88e 	bl	8007e14 <UART_WaitOnFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d022      	beq.n	8007d44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e6      	bne.n	8007cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e063      	b.n	8007e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d149      	bne.n	8007de6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f857 	bl	8007e14 <UART_WaitOnFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d03c      	beq.n	8007de6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e6      	bne.n	8007d6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f023 0301 	bic.w	r3, r3, #1
 8007db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dbe:	61fa      	str	r2, [r7, #28]
 8007dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	69b9      	ldr	r1, [r7, #24]
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	617b      	str	r3, [r7, #20]
   return(result);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e012      	b.n	8007e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3758      	adds	r7, #88	@ 0x58
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	4613      	mov	r3, r2
 8007e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e24:	e04f      	b.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d04b      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e2e:	f7fa fa4d 	bl	80022cc <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d302      	bcc.n	8007e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e04e      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d037      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b80      	cmp	r3, #128	@ 0x80
 8007e5a:	d034      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b40      	cmp	r3, #64	@ 0x40
 8007e60:	d031      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d110      	bne.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2208      	movs	r2, #8
 8007e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f839 	bl	8007ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2208      	movs	r2, #8
 8007e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e029      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ea0:	d111      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f81f 	bl	8007ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e00f      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d0a0      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b095      	sub	sp, #84	@ 0x54
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e6      	bne.n	8007ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb8 <UART_EndRxTransfer+0xc8>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3308      	adds	r3, #8
 8007f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e5      	bne.n	8007f2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d118      	bne.n	8007f98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f84:	61bb      	str	r3, [r7, #24]
 8007f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fac:	bf00      	nop
 8007fae:	3754      	adds	r7, #84	@ 0x54
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	effffffe 	.word	0xeffffffe

08007fbc <std>:
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fca:	6083      	str	r3, [r0, #8]
 8007fcc:	8181      	strh	r1, [r0, #12]
 8007fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fd0:	81c2      	strh	r2, [r0, #14]
 8007fd2:	6183      	str	r3, [r0, #24]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	305c      	adds	r0, #92	@ 0x5c
 8007fda:	f000 f906 	bl	80081ea <memset>
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <std+0x58>)
 8007fe0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8008018 <std+0x5c>)
 8007fe4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <std+0x60>)
 8007fe8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fea:	4b0d      	ldr	r3, [pc, #52]	@ (8008020 <std+0x64>)
 8007fec:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <std+0x68>)
 8007ff0:	6224      	str	r4, [r4, #32]
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d006      	beq.n	8008004 <std+0x48>
 8007ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ffa:	4294      	cmp	r4, r2
 8007ffc:	d002      	beq.n	8008004 <std+0x48>
 8007ffe:	33d0      	adds	r3, #208	@ 0xd0
 8008000:	429c      	cmp	r4, r3
 8008002:	d105      	bne.n	8008010 <std+0x54>
 8008004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800800c:	f000 b966 	b.w	80082dc <__retarget_lock_init_recursive>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	bf00      	nop
 8008014:	08008165 	.word	0x08008165
 8008018:	08008187 	.word	0x08008187
 800801c:	080081bf 	.word	0x080081bf
 8008020:	080081e3 	.word	0x080081e3
 8008024:	240001e8 	.word	0x240001e8

08008028 <stdio_exit_handler>:
 8008028:	4a02      	ldr	r2, [pc, #8]	@ (8008034 <stdio_exit_handler+0xc>)
 800802a:	4903      	ldr	r1, [pc, #12]	@ (8008038 <stdio_exit_handler+0x10>)
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <stdio_exit_handler+0x14>)
 800802e:	f000 b869 	b.w	8008104 <_fwalk_sglue>
 8008032:	bf00      	nop
 8008034:	2400002c 	.word	0x2400002c
 8008038:	08008b79 	.word	0x08008b79
 800803c:	2400003c 	.word	0x2400003c

08008040 <cleanup_stdio>:
 8008040:	6841      	ldr	r1, [r0, #4]
 8008042:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <cleanup_stdio+0x34>)
 8008044:	4299      	cmp	r1, r3
 8008046:	b510      	push	{r4, lr}
 8008048:	4604      	mov	r4, r0
 800804a:	d001      	beq.n	8008050 <cleanup_stdio+0x10>
 800804c:	f000 fd94 	bl	8008b78 <_fflush_r>
 8008050:	68a1      	ldr	r1, [r4, #8]
 8008052:	4b09      	ldr	r3, [pc, #36]	@ (8008078 <cleanup_stdio+0x38>)
 8008054:	4299      	cmp	r1, r3
 8008056:	d002      	beq.n	800805e <cleanup_stdio+0x1e>
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fd8d 	bl	8008b78 <_fflush_r>
 800805e:	68e1      	ldr	r1, [r4, #12]
 8008060:	4b06      	ldr	r3, [pc, #24]	@ (800807c <cleanup_stdio+0x3c>)
 8008062:	4299      	cmp	r1, r3
 8008064:	d004      	beq.n	8008070 <cleanup_stdio+0x30>
 8008066:	4620      	mov	r0, r4
 8008068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800806c:	f000 bd84 	b.w	8008b78 <_fflush_r>
 8008070:	bd10      	pop	{r4, pc}
 8008072:	bf00      	nop
 8008074:	240001e8 	.word	0x240001e8
 8008078:	24000250 	.word	0x24000250
 800807c:	240002b8 	.word	0x240002b8

08008080 <global_stdio_init.part.0>:
 8008080:	b510      	push	{r4, lr}
 8008082:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <global_stdio_init.part.0+0x30>)
 8008084:	4c0b      	ldr	r4, [pc, #44]	@ (80080b4 <global_stdio_init.part.0+0x34>)
 8008086:	4a0c      	ldr	r2, [pc, #48]	@ (80080b8 <global_stdio_init.part.0+0x38>)
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	4620      	mov	r0, r4
 800808c:	2200      	movs	r2, #0
 800808e:	2104      	movs	r1, #4
 8008090:	f7ff ff94 	bl	8007fbc <std>
 8008094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008098:	2201      	movs	r2, #1
 800809a:	2109      	movs	r1, #9
 800809c:	f7ff ff8e 	bl	8007fbc <std>
 80080a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080a4:	2202      	movs	r2, #2
 80080a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080aa:	2112      	movs	r1, #18
 80080ac:	f7ff bf86 	b.w	8007fbc <std>
 80080b0:	24000320 	.word	0x24000320
 80080b4:	240001e8 	.word	0x240001e8
 80080b8:	08008029 	.word	0x08008029

080080bc <__sfp_lock_acquire>:
 80080bc:	4801      	ldr	r0, [pc, #4]	@ (80080c4 <__sfp_lock_acquire+0x8>)
 80080be:	f000 b90e 	b.w	80082de <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	24000329 	.word	0x24000329

080080c8 <__sfp_lock_release>:
 80080c8:	4801      	ldr	r0, [pc, #4]	@ (80080d0 <__sfp_lock_release+0x8>)
 80080ca:	f000 b909 	b.w	80082e0 <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	24000329 	.word	0x24000329

080080d4 <__sinit>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	4604      	mov	r4, r0
 80080d8:	f7ff fff0 	bl	80080bc <__sfp_lock_acquire>
 80080dc:	6a23      	ldr	r3, [r4, #32]
 80080de:	b11b      	cbz	r3, 80080e8 <__sinit+0x14>
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f7ff bff0 	b.w	80080c8 <__sfp_lock_release>
 80080e8:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <__sinit+0x28>)
 80080ea:	6223      	str	r3, [r4, #32]
 80080ec:	4b04      	ldr	r3, [pc, #16]	@ (8008100 <__sinit+0x2c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1f5      	bne.n	80080e0 <__sinit+0xc>
 80080f4:	f7ff ffc4 	bl	8008080 <global_stdio_init.part.0>
 80080f8:	e7f2      	b.n	80080e0 <__sinit+0xc>
 80080fa:	bf00      	nop
 80080fc:	08008041 	.word	0x08008041
 8008100:	24000320 	.word	0x24000320

08008104 <_fwalk_sglue>:
 8008104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008108:	4607      	mov	r7, r0
 800810a:	4688      	mov	r8, r1
 800810c:	4614      	mov	r4, r2
 800810e:	2600      	movs	r6, #0
 8008110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008114:	f1b9 0901 	subs.w	r9, r9, #1
 8008118:	d505      	bpl.n	8008126 <_fwalk_sglue+0x22>
 800811a:	6824      	ldr	r4, [r4, #0]
 800811c:	2c00      	cmp	r4, #0
 800811e:	d1f7      	bne.n	8008110 <_fwalk_sglue+0xc>
 8008120:	4630      	mov	r0, r6
 8008122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008126:	89ab      	ldrh	r3, [r5, #12]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d907      	bls.n	800813c <_fwalk_sglue+0x38>
 800812c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008130:	3301      	adds	r3, #1
 8008132:	d003      	beq.n	800813c <_fwalk_sglue+0x38>
 8008134:	4629      	mov	r1, r5
 8008136:	4638      	mov	r0, r7
 8008138:	47c0      	blx	r8
 800813a:	4306      	orrs	r6, r0
 800813c:	3568      	adds	r5, #104	@ 0x68
 800813e:	e7e9      	b.n	8008114 <_fwalk_sglue+0x10>

08008140 <iprintf>:
 8008140:	b40f      	push	{r0, r1, r2, r3}
 8008142:	b507      	push	{r0, r1, r2, lr}
 8008144:	4906      	ldr	r1, [pc, #24]	@ (8008160 <iprintf+0x20>)
 8008146:	ab04      	add	r3, sp, #16
 8008148:	6808      	ldr	r0, [r1, #0]
 800814a:	f853 2b04 	ldr.w	r2, [r3], #4
 800814e:	6881      	ldr	r1, [r0, #8]
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	f000 f9e9 	bl	8008528 <_vfiprintf_r>
 8008156:	b003      	add	sp, #12
 8008158:	f85d eb04 	ldr.w	lr, [sp], #4
 800815c:	b004      	add	sp, #16
 800815e:	4770      	bx	lr
 8008160:	24000038 	.word	0x24000038

08008164 <__sread>:
 8008164:	b510      	push	{r4, lr}
 8008166:	460c      	mov	r4, r1
 8008168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816c:	f000 f868 	bl	8008240 <_read_r>
 8008170:	2800      	cmp	r0, #0
 8008172:	bfab      	itete	ge
 8008174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008176:	89a3      	ldrhlt	r3, [r4, #12]
 8008178:	181b      	addge	r3, r3, r0
 800817a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800817e:	bfac      	ite	ge
 8008180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008182:	81a3      	strhlt	r3, [r4, #12]
 8008184:	bd10      	pop	{r4, pc}

08008186 <__swrite>:
 8008186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818a:	461f      	mov	r7, r3
 800818c:	898b      	ldrh	r3, [r1, #12]
 800818e:	05db      	lsls	r3, r3, #23
 8008190:	4605      	mov	r5, r0
 8008192:	460c      	mov	r4, r1
 8008194:	4616      	mov	r6, r2
 8008196:	d505      	bpl.n	80081a4 <__swrite+0x1e>
 8008198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819c:	2302      	movs	r3, #2
 800819e:	2200      	movs	r2, #0
 80081a0:	f000 f83c 	bl	800821c <_lseek_r>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	4632      	mov	r2, r6
 80081b2:	463b      	mov	r3, r7
 80081b4:	4628      	mov	r0, r5
 80081b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081ba:	f000 b853 	b.w	8008264 <_write_r>

080081be <__sseek>:
 80081be:	b510      	push	{r4, lr}
 80081c0:	460c      	mov	r4, r1
 80081c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c6:	f000 f829 	bl	800821c <_lseek_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	bf15      	itete	ne
 80081d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081da:	81a3      	strheq	r3, [r4, #12]
 80081dc:	bf18      	it	ne
 80081de:	81a3      	strhne	r3, [r4, #12]
 80081e0:	bd10      	pop	{r4, pc}

080081e2 <__sclose>:
 80081e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e6:	f000 b809 	b.w	80081fc <_close_r>

080081ea <memset>:
 80081ea:	4402      	add	r2, r0
 80081ec:	4603      	mov	r3, r0
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d100      	bne.n	80081f4 <memset+0xa>
 80081f2:	4770      	bx	lr
 80081f4:	f803 1b01 	strb.w	r1, [r3], #1
 80081f8:	e7f9      	b.n	80081ee <memset+0x4>
	...

080081fc <_close_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d06      	ldr	r5, [pc, #24]	@ (8008218 <_close_r+0x1c>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7f9 fc35 	bl	8001a76 <_close>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_close_r+0x1a>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_close_r+0x1a>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	24000324 	.word	0x24000324

0800821c <_lseek_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d07      	ldr	r5, [pc, #28]	@ (800823c <_lseek_r+0x20>)
 8008220:	4604      	mov	r4, r0
 8008222:	4608      	mov	r0, r1
 8008224:	4611      	mov	r1, r2
 8008226:	2200      	movs	r2, #0
 8008228:	602a      	str	r2, [r5, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f7f9 fc4a 	bl	8001ac4 <_lseek>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_lseek_r+0x1e>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_lseek_r+0x1e>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	24000324 	.word	0x24000324

08008240 <_read_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d07      	ldr	r5, [pc, #28]	@ (8008260 <_read_r+0x20>)
 8008244:	4604      	mov	r4, r0
 8008246:	4608      	mov	r0, r1
 8008248:	4611      	mov	r1, r2
 800824a:	2200      	movs	r2, #0
 800824c:	602a      	str	r2, [r5, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	f7f9 fbd8 	bl	8001a04 <_read>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_read_r+0x1e>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	b103      	cbz	r3, 800825e <_read_r+0x1e>
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	24000324 	.word	0x24000324

08008264 <_write_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d07      	ldr	r5, [pc, #28]	@ (8008284 <_write_r+0x20>)
 8008268:	4604      	mov	r4, r0
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	2200      	movs	r2, #0
 8008270:	602a      	str	r2, [r5, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	f7f9 fbe3 	bl	8001a3e <_write>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_write_r+0x1e>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_write_r+0x1e>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	24000324 	.word	0x24000324

08008288 <__errno>:
 8008288:	4b01      	ldr	r3, [pc, #4]	@ (8008290 <__errno+0x8>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	24000038 	.word	0x24000038

08008294 <__libc_init_array>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	4d0d      	ldr	r5, [pc, #52]	@ (80082cc <__libc_init_array+0x38>)
 8008298:	4c0d      	ldr	r4, [pc, #52]	@ (80082d0 <__libc_init_array+0x3c>)
 800829a:	1b64      	subs	r4, r4, r5
 800829c:	10a4      	asrs	r4, r4, #2
 800829e:	2600      	movs	r6, #0
 80082a0:	42a6      	cmp	r6, r4
 80082a2:	d109      	bne.n	80082b8 <__libc_init_array+0x24>
 80082a4:	4d0b      	ldr	r5, [pc, #44]	@ (80082d4 <__libc_init_array+0x40>)
 80082a6:	4c0c      	ldr	r4, [pc, #48]	@ (80082d8 <__libc_init_array+0x44>)
 80082a8:	f000 fdb6 	bl	8008e18 <_init>
 80082ac:	1b64      	subs	r4, r4, r5
 80082ae:	10a4      	asrs	r4, r4, #2
 80082b0:	2600      	movs	r6, #0
 80082b2:	42a6      	cmp	r6, r4
 80082b4:	d105      	bne.n	80082c2 <__libc_init_array+0x2e>
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082bc:	4798      	blx	r3
 80082be:	3601      	adds	r6, #1
 80082c0:	e7ee      	b.n	80082a0 <__libc_init_array+0xc>
 80082c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c6:	4798      	blx	r3
 80082c8:	3601      	adds	r6, #1
 80082ca:	e7f2      	b.n	80082b2 <__libc_init_array+0x1e>
 80082cc:	08009b7c 	.word	0x08009b7c
 80082d0:	08009b7c 	.word	0x08009b7c
 80082d4:	08009b7c 	.word	0x08009b7c
 80082d8:	08009b80 	.word	0x08009b80

080082dc <__retarget_lock_init_recursive>:
 80082dc:	4770      	bx	lr

080082de <__retarget_lock_acquire_recursive>:
 80082de:	4770      	bx	lr

080082e0 <__retarget_lock_release_recursive>:
 80082e0:	4770      	bx	lr
	...

080082e4 <_free_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4605      	mov	r5, r0
 80082e8:	2900      	cmp	r1, #0
 80082ea:	d041      	beq.n	8008370 <_free_r+0x8c>
 80082ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f0:	1f0c      	subs	r4, r1, #4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bfb8      	it	lt
 80082f6:	18e4      	addlt	r4, r4, r3
 80082f8:	f000 f8e0 	bl	80084bc <__malloc_lock>
 80082fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008374 <_free_r+0x90>)
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	b933      	cbnz	r3, 8008310 <_free_r+0x2c>
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	6014      	str	r4, [r2, #0]
 8008306:	4628      	mov	r0, r5
 8008308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830c:	f000 b8dc 	b.w	80084c8 <__malloc_unlock>
 8008310:	42a3      	cmp	r3, r4
 8008312:	d908      	bls.n	8008326 <_free_r+0x42>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	1821      	adds	r1, r4, r0
 8008318:	428b      	cmp	r3, r1
 800831a:	bf01      	itttt	eq
 800831c:	6819      	ldreq	r1, [r3, #0]
 800831e:	685b      	ldreq	r3, [r3, #4]
 8008320:	1809      	addeq	r1, r1, r0
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	e7ed      	b.n	8008302 <_free_r+0x1e>
 8008326:	461a      	mov	r2, r3
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b10b      	cbz	r3, 8008330 <_free_r+0x4c>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d9fa      	bls.n	8008326 <_free_r+0x42>
 8008330:	6811      	ldr	r1, [r2, #0]
 8008332:	1850      	adds	r0, r2, r1
 8008334:	42a0      	cmp	r0, r4
 8008336:	d10b      	bne.n	8008350 <_free_r+0x6c>
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	4401      	add	r1, r0
 800833c:	1850      	adds	r0, r2, r1
 800833e:	4283      	cmp	r3, r0
 8008340:	6011      	str	r1, [r2, #0]
 8008342:	d1e0      	bne.n	8008306 <_free_r+0x22>
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	6053      	str	r3, [r2, #4]
 800834a:	4408      	add	r0, r1
 800834c:	6010      	str	r0, [r2, #0]
 800834e:	e7da      	b.n	8008306 <_free_r+0x22>
 8008350:	d902      	bls.n	8008358 <_free_r+0x74>
 8008352:	230c      	movs	r3, #12
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	e7d6      	b.n	8008306 <_free_r+0x22>
 8008358:	6820      	ldr	r0, [r4, #0]
 800835a:	1821      	adds	r1, r4, r0
 800835c:	428b      	cmp	r3, r1
 800835e:	bf04      	itt	eq
 8008360:	6819      	ldreq	r1, [r3, #0]
 8008362:	685b      	ldreq	r3, [r3, #4]
 8008364:	6063      	str	r3, [r4, #4]
 8008366:	bf04      	itt	eq
 8008368:	1809      	addeq	r1, r1, r0
 800836a:	6021      	streq	r1, [r4, #0]
 800836c:	6054      	str	r4, [r2, #4]
 800836e:	e7ca      	b.n	8008306 <_free_r+0x22>
 8008370:	bd38      	pop	{r3, r4, r5, pc}
 8008372:	bf00      	nop
 8008374:	24000330 	.word	0x24000330

08008378 <sbrk_aligned>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4e0f      	ldr	r6, [pc, #60]	@ (80083b8 <sbrk_aligned+0x40>)
 800837c:	460c      	mov	r4, r1
 800837e:	6831      	ldr	r1, [r6, #0]
 8008380:	4605      	mov	r5, r0
 8008382:	b911      	cbnz	r1, 800838a <sbrk_aligned+0x12>
 8008384:	f000 fcb4 	bl	8008cf0 <_sbrk_r>
 8008388:	6030      	str	r0, [r6, #0]
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f000 fcaf 	bl	8008cf0 <_sbrk_r>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d103      	bne.n	800839e <sbrk_aligned+0x26>
 8008396:	f04f 34ff 	mov.w	r4, #4294967295
 800839a:	4620      	mov	r0, r4
 800839c:	bd70      	pop	{r4, r5, r6, pc}
 800839e:	1cc4      	adds	r4, r0, #3
 80083a0:	f024 0403 	bic.w	r4, r4, #3
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	d0f8      	beq.n	800839a <sbrk_aligned+0x22>
 80083a8:	1a21      	subs	r1, r4, r0
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 fca0 	bl	8008cf0 <_sbrk_r>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d1f2      	bne.n	800839a <sbrk_aligned+0x22>
 80083b4:	e7ef      	b.n	8008396 <sbrk_aligned+0x1e>
 80083b6:	bf00      	nop
 80083b8:	2400032c 	.word	0x2400032c

080083bc <_malloc_r>:
 80083bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c0:	1ccd      	adds	r5, r1, #3
 80083c2:	f025 0503 	bic.w	r5, r5, #3
 80083c6:	3508      	adds	r5, #8
 80083c8:	2d0c      	cmp	r5, #12
 80083ca:	bf38      	it	cc
 80083cc:	250c      	movcc	r5, #12
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	4606      	mov	r6, r0
 80083d2:	db01      	blt.n	80083d8 <_malloc_r+0x1c>
 80083d4:	42a9      	cmp	r1, r5
 80083d6:	d904      	bls.n	80083e2 <_malloc_r+0x26>
 80083d8:	230c      	movs	r3, #12
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	2000      	movs	r0, #0
 80083de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084b8 <_malloc_r+0xfc>
 80083e6:	f000 f869 	bl	80084bc <__malloc_lock>
 80083ea:	f8d8 3000 	ldr.w	r3, [r8]
 80083ee:	461c      	mov	r4, r3
 80083f0:	bb44      	cbnz	r4, 8008444 <_malloc_r+0x88>
 80083f2:	4629      	mov	r1, r5
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff ffbf 	bl	8008378 <sbrk_aligned>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	4604      	mov	r4, r0
 80083fe:	d158      	bne.n	80084b2 <_malloc_r+0xf6>
 8008400:	f8d8 4000 	ldr.w	r4, [r8]
 8008404:	4627      	mov	r7, r4
 8008406:	2f00      	cmp	r7, #0
 8008408:	d143      	bne.n	8008492 <_malloc_r+0xd6>
 800840a:	2c00      	cmp	r4, #0
 800840c:	d04b      	beq.n	80084a6 <_malloc_r+0xea>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	4639      	mov	r1, r7
 8008412:	4630      	mov	r0, r6
 8008414:	eb04 0903 	add.w	r9, r4, r3
 8008418:	f000 fc6a 	bl	8008cf0 <_sbrk_r>
 800841c:	4581      	cmp	r9, r0
 800841e:	d142      	bne.n	80084a6 <_malloc_r+0xea>
 8008420:	6821      	ldr	r1, [r4, #0]
 8008422:	1a6d      	subs	r5, r5, r1
 8008424:	4629      	mov	r1, r5
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ffa6 	bl	8008378 <sbrk_aligned>
 800842c:	3001      	adds	r0, #1
 800842e:	d03a      	beq.n	80084a6 <_malloc_r+0xea>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	442b      	add	r3, r5
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	f8d8 3000 	ldr.w	r3, [r8]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	bb62      	cbnz	r2, 8008498 <_malloc_r+0xdc>
 800843e:	f8c8 7000 	str.w	r7, [r8]
 8008442:	e00f      	b.n	8008464 <_malloc_r+0xa8>
 8008444:	6822      	ldr	r2, [r4, #0]
 8008446:	1b52      	subs	r2, r2, r5
 8008448:	d420      	bmi.n	800848c <_malloc_r+0xd0>
 800844a:	2a0b      	cmp	r2, #11
 800844c:	d917      	bls.n	800847e <_malloc_r+0xc2>
 800844e:	1961      	adds	r1, r4, r5
 8008450:	42a3      	cmp	r3, r4
 8008452:	6025      	str	r5, [r4, #0]
 8008454:	bf18      	it	ne
 8008456:	6059      	strne	r1, [r3, #4]
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	bf08      	it	eq
 800845c:	f8c8 1000 	streq.w	r1, [r8]
 8008460:	5162      	str	r2, [r4, r5]
 8008462:	604b      	str	r3, [r1, #4]
 8008464:	4630      	mov	r0, r6
 8008466:	f000 f82f 	bl	80084c8 <__malloc_unlock>
 800846a:	f104 000b 	add.w	r0, r4, #11
 800846e:	1d23      	adds	r3, r4, #4
 8008470:	f020 0007 	bic.w	r0, r0, #7
 8008474:	1ac2      	subs	r2, r0, r3
 8008476:	bf1c      	itt	ne
 8008478:	1a1b      	subne	r3, r3, r0
 800847a:	50a3      	strne	r3, [r4, r2]
 800847c:	e7af      	b.n	80083de <_malloc_r+0x22>
 800847e:	6862      	ldr	r2, [r4, #4]
 8008480:	42a3      	cmp	r3, r4
 8008482:	bf0c      	ite	eq
 8008484:	f8c8 2000 	streq.w	r2, [r8]
 8008488:	605a      	strne	r2, [r3, #4]
 800848a:	e7eb      	b.n	8008464 <_malloc_r+0xa8>
 800848c:	4623      	mov	r3, r4
 800848e:	6864      	ldr	r4, [r4, #4]
 8008490:	e7ae      	b.n	80083f0 <_malloc_r+0x34>
 8008492:	463c      	mov	r4, r7
 8008494:	687f      	ldr	r7, [r7, #4]
 8008496:	e7b6      	b.n	8008406 <_malloc_r+0x4a>
 8008498:	461a      	mov	r2, r3
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	42a3      	cmp	r3, r4
 800849e:	d1fb      	bne.n	8008498 <_malloc_r+0xdc>
 80084a0:	2300      	movs	r3, #0
 80084a2:	6053      	str	r3, [r2, #4]
 80084a4:	e7de      	b.n	8008464 <_malloc_r+0xa8>
 80084a6:	230c      	movs	r3, #12
 80084a8:	6033      	str	r3, [r6, #0]
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 f80c 	bl	80084c8 <__malloc_unlock>
 80084b0:	e794      	b.n	80083dc <_malloc_r+0x20>
 80084b2:	6005      	str	r5, [r0, #0]
 80084b4:	e7d6      	b.n	8008464 <_malloc_r+0xa8>
 80084b6:	bf00      	nop
 80084b8:	24000330 	.word	0x24000330

080084bc <__malloc_lock>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__malloc_lock+0x8>)
 80084be:	f7ff bf0e 	b.w	80082de <__retarget_lock_acquire_recursive>
 80084c2:	bf00      	nop
 80084c4:	24000328 	.word	0x24000328

080084c8 <__malloc_unlock>:
 80084c8:	4801      	ldr	r0, [pc, #4]	@ (80084d0 <__malloc_unlock+0x8>)
 80084ca:	f7ff bf09 	b.w	80082e0 <__retarget_lock_release_recursive>
 80084ce:	bf00      	nop
 80084d0:	24000328 	.word	0x24000328

080084d4 <__sfputc_r>:
 80084d4:	6893      	ldr	r3, [r2, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	b410      	push	{r4}
 80084dc:	6093      	str	r3, [r2, #8]
 80084de:	da08      	bge.n	80084f2 <__sfputc_r+0x1e>
 80084e0:	6994      	ldr	r4, [r2, #24]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	db01      	blt.n	80084ea <__sfputc_r+0x16>
 80084e6:	290a      	cmp	r1, #10
 80084e8:	d103      	bne.n	80084f2 <__sfputc_r+0x1e>
 80084ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ee:	f000 bb6b 	b.w	8008bc8 <__swbuf_r>
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	1c58      	adds	r0, r3, #1
 80084f6:	6010      	str	r0, [r2, #0]
 80084f8:	7019      	strb	r1, [r3, #0]
 80084fa:	4608      	mov	r0, r1
 80084fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008500:	4770      	bx	lr

08008502 <__sfputs_r>:
 8008502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	4614      	mov	r4, r2
 800850a:	18d5      	adds	r5, r2, r3
 800850c:	42ac      	cmp	r4, r5
 800850e:	d101      	bne.n	8008514 <__sfputs_r+0x12>
 8008510:	2000      	movs	r0, #0
 8008512:	e007      	b.n	8008524 <__sfputs_r+0x22>
 8008514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008518:	463a      	mov	r2, r7
 800851a:	4630      	mov	r0, r6
 800851c:	f7ff ffda 	bl	80084d4 <__sfputc_r>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d1f3      	bne.n	800850c <__sfputs_r+0xa>
 8008524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008528 <_vfiprintf_r>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	460d      	mov	r5, r1
 800852e:	b09d      	sub	sp, #116	@ 0x74
 8008530:	4614      	mov	r4, r2
 8008532:	4698      	mov	r8, r3
 8008534:	4606      	mov	r6, r0
 8008536:	b118      	cbz	r0, 8008540 <_vfiprintf_r+0x18>
 8008538:	6a03      	ldr	r3, [r0, #32]
 800853a:	b90b      	cbnz	r3, 8008540 <_vfiprintf_r+0x18>
 800853c:	f7ff fdca 	bl	80080d4 <__sinit>
 8008540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008542:	07d9      	lsls	r1, r3, #31
 8008544:	d405      	bmi.n	8008552 <_vfiprintf_r+0x2a>
 8008546:	89ab      	ldrh	r3, [r5, #12]
 8008548:	059a      	lsls	r2, r3, #22
 800854a:	d402      	bmi.n	8008552 <_vfiprintf_r+0x2a>
 800854c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800854e:	f7ff fec6 	bl	80082de <__retarget_lock_acquire_recursive>
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	071b      	lsls	r3, r3, #28
 8008556:	d501      	bpl.n	800855c <_vfiprintf_r+0x34>
 8008558:	692b      	ldr	r3, [r5, #16]
 800855a:	b99b      	cbnz	r3, 8008584 <_vfiprintf_r+0x5c>
 800855c:	4629      	mov	r1, r5
 800855e:	4630      	mov	r0, r6
 8008560:	f000 fb70 	bl	8008c44 <__swsetup_r>
 8008564:	b170      	cbz	r0, 8008584 <_vfiprintf_r+0x5c>
 8008566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008568:	07dc      	lsls	r4, r3, #31
 800856a:	d504      	bpl.n	8008576 <_vfiprintf_r+0x4e>
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	b01d      	add	sp, #116	@ 0x74
 8008572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	0598      	lsls	r0, r3, #22
 800857a:	d4f7      	bmi.n	800856c <_vfiprintf_r+0x44>
 800857c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857e:	f7ff feaf 	bl	80082e0 <__retarget_lock_release_recursive>
 8008582:	e7f3      	b.n	800856c <_vfiprintf_r+0x44>
 8008584:	2300      	movs	r3, #0
 8008586:	9309      	str	r3, [sp, #36]	@ 0x24
 8008588:	2320      	movs	r3, #32
 800858a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800858e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008592:	2330      	movs	r3, #48	@ 0x30
 8008594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008744 <_vfiprintf_r+0x21c>
 8008598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800859c:	f04f 0901 	mov.w	r9, #1
 80085a0:	4623      	mov	r3, r4
 80085a2:	469a      	mov	sl, r3
 80085a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a8:	b10a      	cbz	r2, 80085ae <_vfiprintf_r+0x86>
 80085aa:	2a25      	cmp	r2, #37	@ 0x25
 80085ac:	d1f9      	bne.n	80085a2 <_vfiprintf_r+0x7a>
 80085ae:	ebba 0b04 	subs.w	fp, sl, r4
 80085b2:	d00b      	beq.n	80085cc <_vfiprintf_r+0xa4>
 80085b4:	465b      	mov	r3, fp
 80085b6:	4622      	mov	r2, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff ffa1 	bl	8008502 <__sfputs_r>
 80085c0:	3001      	adds	r0, #1
 80085c2:	f000 80a7 	beq.w	8008714 <_vfiprintf_r+0x1ec>
 80085c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c8:	445a      	add	r2, fp
 80085ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 809f 	beq.w	8008714 <_vfiprintf_r+0x1ec>
 80085d6:	2300      	movs	r3, #0
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e0:	f10a 0a01 	add.w	sl, sl, #1
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	9307      	str	r3, [sp, #28]
 80085e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80085ee:	4654      	mov	r4, sl
 80085f0:	2205      	movs	r2, #5
 80085f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f6:	4853      	ldr	r0, [pc, #332]	@ (8008744 <_vfiprintf_r+0x21c>)
 80085f8:	f7f7 fe72 	bl	80002e0 <memchr>
 80085fc:	9a04      	ldr	r2, [sp, #16]
 80085fe:	b9d8      	cbnz	r0, 8008638 <_vfiprintf_r+0x110>
 8008600:	06d1      	lsls	r1, r2, #27
 8008602:	bf44      	itt	mi
 8008604:	2320      	movmi	r3, #32
 8008606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800860a:	0713      	lsls	r3, r2, #28
 800860c:	bf44      	itt	mi
 800860e:	232b      	movmi	r3, #43	@ 0x2b
 8008610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008614:	f89a 3000 	ldrb.w	r3, [sl]
 8008618:	2b2a      	cmp	r3, #42	@ 0x2a
 800861a:	d015      	beq.n	8008648 <_vfiprintf_r+0x120>
 800861c:	9a07      	ldr	r2, [sp, #28]
 800861e:	4654      	mov	r4, sl
 8008620:	2000      	movs	r0, #0
 8008622:	f04f 0c0a 	mov.w	ip, #10
 8008626:	4621      	mov	r1, r4
 8008628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862c:	3b30      	subs	r3, #48	@ 0x30
 800862e:	2b09      	cmp	r3, #9
 8008630:	d94b      	bls.n	80086ca <_vfiprintf_r+0x1a2>
 8008632:	b1b0      	cbz	r0, 8008662 <_vfiprintf_r+0x13a>
 8008634:	9207      	str	r2, [sp, #28]
 8008636:	e014      	b.n	8008662 <_vfiprintf_r+0x13a>
 8008638:	eba0 0308 	sub.w	r3, r0, r8
 800863c:	fa09 f303 	lsl.w	r3, r9, r3
 8008640:	4313      	orrs	r3, r2
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	46a2      	mov	sl, r4
 8008646:	e7d2      	b.n	80085ee <_vfiprintf_r+0xc6>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	1d19      	adds	r1, r3, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	9103      	str	r1, [sp, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	bfbb      	ittet	lt
 8008654:	425b      	neglt	r3, r3
 8008656:	f042 0202 	orrlt.w	r2, r2, #2
 800865a:	9307      	strge	r3, [sp, #28]
 800865c:	9307      	strlt	r3, [sp, #28]
 800865e:	bfb8      	it	lt
 8008660:	9204      	strlt	r2, [sp, #16]
 8008662:	7823      	ldrb	r3, [r4, #0]
 8008664:	2b2e      	cmp	r3, #46	@ 0x2e
 8008666:	d10a      	bne.n	800867e <_vfiprintf_r+0x156>
 8008668:	7863      	ldrb	r3, [r4, #1]
 800866a:	2b2a      	cmp	r3, #42	@ 0x2a
 800866c:	d132      	bne.n	80086d4 <_vfiprintf_r+0x1ac>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	1d1a      	adds	r2, r3, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	9203      	str	r2, [sp, #12]
 8008676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800867a:	3402      	adds	r4, #2
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008754 <_vfiprintf_r+0x22c>
 8008682:	7821      	ldrb	r1, [r4, #0]
 8008684:	2203      	movs	r2, #3
 8008686:	4650      	mov	r0, sl
 8008688:	f7f7 fe2a 	bl	80002e0 <memchr>
 800868c:	b138      	cbz	r0, 800869e <_vfiprintf_r+0x176>
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	eba0 000a 	sub.w	r0, r0, sl
 8008694:	2240      	movs	r2, #64	@ 0x40
 8008696:	4082      	lsls	r2, r0
 8008698:	4313      	orrs	r3, r2
 800869a:	3401      	adds	r4, #1
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a2:	4829      	ldr	r0, [pc, #164]	@ (8008748 <_vfiprintf_r+0x220>)
 80086a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086a8:	2206      	movs	r2, #6
 80086aa:	f7f7 fe19 	bl	80002e0 <memchr>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d03f      	beq.n	8008732 <_vfiprintf_r+0x20a>
 80086b2:	4b26      	ldr	r3, [pc, #152]	@ (800874c <_vfiprintf_r+0x224>)
 80086b4:	bb1b      	cbnz	r3, 80086fe <_vfiprintf_r+0x1d6>
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	3307      	adds	r3, #7
 80086ba:	f023 0307 	bic.w	r3, r3, #7
 80086be:	3308      	adds	r3, #8
 80086c0:	9303      	str	r3, [sp, #12]
 80086c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c4:	443b      	add	r3, r7
 80086c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c8:	e76a      	b.n	80085a0 <_vfiprintf_r+0x78>
 80086ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ce:	460c      	mov	r4, r1
 80086d0:	2001      	movs	r0, #1
 80086d2:	e7a8      	b.n	8008626 <_vfiprintf_r+0xfe>
 80086d4:	2300      	movs	r3, #0
 80086d6:	3401      	adds	r4, #1
 80086d8:	9305      	str	r3, [sp, #20]
 80086da:	4619      	mov	r1, r3
 80086dc:	f04f 0c0a 	mov.w	ip, #10
 80086e0:	4620      	mov	r0, r4
 80086e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e6:	3a30      	subs	r2, #48	@ 0x30
 80086e8:	2a09      	cmp	r2, #9
 80086ea:	d903      	bls.n	80086f4 <_vfiprintf_r+0x1cc>
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0c6      	beq.n	800867e <_vfiprintf_r+0x156>
 80086f0:	9105      	str	r1, [sp, #20]
 80086f2:	e7c4      	b.n	800867e <_vfiprintf_r+0x156>
 80086f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f8:	4604      	mov	r4, r0
 80086fa:	2301      	movs	r3, #1
 80086fc:	e7f0      	b.n	80086e0 <_vfiprintf_r+0x1b8>
 80086fe:	ab03      	add	r3, sp, #12
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	462a      	mov	r2, r5
 8008704:	4b12      	ldr	r3, [pc, #72]	@ (8008750 <_vfiprintf_r+0x228>)
 8008706:	a904      	add	r1, sp, #16
 8008708:	4630      	mov	r0, r6
 800870a:	f3af 8000 	nop.w
 800870e:	4607      	mov	r7, r0
 8008710:	1c78      	adds	r0, r7, #1
 8008712:	d1d6      	bne.n	80086c2 <_vfiprintf_r+0x19a>
 8008714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008716:	07d9      	lsls	r1, r3, #31
 8008718:	d405      	bmi.n	8008726 <_vfiprintf_r+0x1fe>
 800871a:	89ab      	ldrh	r3, [r5, #12]
 800871c:	059a      	lsls	r2, r3, #22
 800871e:	d402      	bmi.n	8008726 <_vfiprintf_r+0x1fe>
 8008720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008722:	f7ff fddd 	bl	80082e0 <__retarget_lock_release_recursive>
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	065b      	lsls	r3, r3, #25
 800872a:	f53f af1f 	bmi.w	800856c <_vfiprintf_r+0x44>
 800872e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008730:	e71e      	b.n	8008570 <_vfiprintf_r+0x48>
 8008732:	ab03      	add	r3, sp, #12
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	462a      	mov	r2, r5
 8008738:	4b05      	ldr	r3, [pc, #20]	@ (8008750 <_vfiprintf_r+0x228>)
 800873a:	a904      	add	r1, sp, #16
 800873c:	4630      	mov	r0, r6
 800873e:	f000 f879 	bl	8008834 <_printf_i>
 8008742:	e7e4      	b.n	800870e <_vfiprintf_r+0x1e6>
 8008744:	08009b40 	.word	0x08009b40
 8008748:	08009b4a 	.word	0x08009b4a
 800874c:	00000000 	.word	0x00000000
 8008750:	08008503 	.word	0x08008503
 8008754:	08009b46 	.word	0x08009b46

08008758 <_printf_common>:
 8008758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	4616      	mov	r6, r2
 800875e:	4698      	mov	r8, r3
 8008760:	688a      	ldr	r2, [r1, #8]
 8008762:	690b      	ldr	r3, [r1, #16]
 8008764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008768:	4293      	cmp	r3, r2
 800876a:	bfb8      	it	lt
 800876c:	4613      	movlt	r3, r2
 800876e:	6033      	str	r3, [r6, #0]
 8008770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008774:	4607      	mov	r7, r0
 8008776:	460c      	mov	r4, r1
 8008778:	b10a      	cbz	r2, 800877e <_printf_common+0x26>
 800877a:	3301      	adds	r3, #1
 800877c:	6033      	str	r3, [r6, #0]
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	0699      	lsls	r1, r3, #26
 8008782:	bf42      	ittt	mi
 8008784:	6833      	ldrmi	r3, [r6, #0]
 8008786:	3302      	addmi	r3, #2
 8008788:	6033      	strmi	r3, [r6, #0]
 800878a:	6825      	ldr	r5, [r4, #0]
 800878c:	f015 0506 	ands.w	r5, r5, #6
 8008790:	d106      	bne.n	80087a0 <_printf_common+0x48>
 8008792:	f104 0a19 	add.w	sl, r4, #25
 8008796:	68e3      	ldr	r3, [r4, #12]
 8008798:	6832      	ldr	r2, [r6, #0]
 800879a:	1a9b      	subs	r3, r3, r2
 800879c:	42ab      	cmp	r3, r5
 800879e:	dc26      	bgt.n	80087ee <_printf_common+0x96>
 80087a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	3b00      	subs	r3, #0
 80087a8:	bf18      	it	ne
 80087aa:	2301      	movne	r3, #1
 80087ac:	0692      	lsls	r2, r2, #26
 80087ae:	d42b      	bmi.n	8008808 <_printf_common+0xb0>
 80087b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087b4:	4641      	mov	r1, r8
 80087b6:	4638      	mov	r0, r7
 80087b8:	47c8      	blx	r9
 80087ba:	3001      	adds	r0, #1
 80087bc:	d01e      	beq.n	80087fc <_printf_common+0xa4>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	6922      	ldr	r2, [r4, #16]
 80087c2:	f003 0306 	and.w	r3, r3, #6
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	bf02      	ittt	eq
 80087ca:	68e5      	ldreq	r5, [r4, #12]
 80087cc:	6833      	ldreq	r3, [r6, #0]
 80087ce:	1aed      	subeq	r5, r5, r3
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	bf0c      	ite	eq
 80087d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087d8:	2500      	movne	r5, #0
 80087da:	4293      	cmp	r3, r2
 80087dc:	bfc4      	itt	gt
 80087de:	1a9b      	subgt	r3, r3, r2
 80087e0:	18ed      	addgt	r5, r5, r3
 80087e2:	2600      	movs	r6, #0
 80087e4:	341a      	adds	r4, #26
 80087e6:	42b5      	cmp	r5, r6
 80087e8:	d11a      	bne.n	8008820 <_printf_common+0xc8>
 80087ea:	2000      	movs	r0, #0
 80087ec:	e008      	b.n	8008800 <_printf_common+0xa8>
 80087ee:	2301      	movs	r3, #1
 80087f0:	4652      	mov	r2, sl
 80087f2:	4641      	mov	r1, r8
 80087f4:	4638      	mov	r0, r7
 80087f6:	47c8      	blx	r9
 80087f8:	3001      	adds	r0, #1
 80087fa:	d103      	bne.n	8008804 <_printf_common+0xac>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008804:	3501      	adds	r5, #1
 8008806:	e7c6      	b.n	8008796 <_printf_common+0x3e>
 8008808:	18e1      	adds	r1, r4, r3
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	2030      	movs	r0, #48	@ 0x30
 800880e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008812:	4422      	add	r2, r4
 8008814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800881c:	3302      	adds	r3, #2
 800881e:	e7c7      	b.n	80087b0 <_printf_common+0x58>
 8008820:	2301      	movs	r3, #1
 8008822:	4622      	mov	r2, r4
 8008824:	4641      	mov	r1, r8
 8008826:	4638      	mov	r0, r7
 8008828:	47c8      	blx	r9
 800882a:	3001      	adds	r0, #1
 800882c:	d0e6      	beq.n	80087fc <_printf_common+0xa4>
 800882e:	3601      	adds	r6, #1
 8008830:	e7d9      	b.n	80087e6 <_printf_common+0x8e>
	...

08008834 <_printf_i>:
 8008834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008838:	7e0f      	ldrb	r7, [r1, #24]
 800883a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800883c:	2f78      	cmp	r7, #120	@ 0x78
 800883e:	4691      	mov	r9, r2
 8008840:	4680      	mov	r8, r0
 8008842:	460c      	mov	r4, r1
 8008844:	469a      	mov	sl, r3
 8008846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800884a:	d807      	bhi.n	800885c <_printf_i+0x28>
 800884c:	2f62      	cmp	r7, #98	@ 0x62
 800884e:	d80a      	bhi.n	8008866 <_printf_i+0x32>
 8008850:	2f00      	cmp	r7, #0
 8008852:	f000 80d1 	beq.w	80089f8 <_printf_i+0x1c4>
 8008856:	2f58      	cmp	r7, #88	@ 0x58
 8008858:	f000 80b8 	beq.w	80089cc <_printf_i+0x198>
 800885c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008864:	e03a      	b.n	80088dc <_printf_i+0xa8>
 8008866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800886a:	2b15      	cmp	r3, #21
 800886c:	d8f6      	bhi.n	800885c <_printf_i+0x28>
 800886e:	a101      	add	r1, pc, #4	@ (adr r1, 8008874 <_printf_i+0x40>)
 8008870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008874:	080088cd 	.word	0x080088cd
 8008878:	080088e1 	.word	0x080088e1
 800887c:	0800885d 	.word	0x0800885d
 8008880:	0800885d 	.word	0x0800885d
 8008884:	0800885d 	.word	0x0800885d
 8008888:	0800885d 	.word	0x0800885d
 800888c:	080088e1 	.word	0x080088e1
 8008890:	0800885d 	.word	0x0800885d
 8008894:	0800885d 	.word	0x0800885d
 8008898:	0800885d 	.word	0x0800885d
 800889c:	0800885d 	.word	0x0800885d
 80088a0:	080089df 	.word	0x080089df
 80088a4:	0800890b 	.word	0x0800890b
 80088a8:	08008999 	.word	0x08008999
 80088ac:	0800885d 	.word	0x0800885d
 80088b0:	0800885d 	.word	0x0800885d
 80088b4:	08008a01 	.word	0x08008a01
 80088b8:	0800885d 	.word	0x0800885d
 80088bc:	0800890b 	.word	0x0800890b
 80088c0:	0800885d 	.word	0x0800885d
 80088c4:	0800885d 	.word	0x0800885d
 80088c8:	080089a1 	.word	0x080089a1
 80088cc:	6833      	ldr	r3, [r6, #0]
 80088ce:	1d1a      	adds	r2, r3, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6032      	str	r2, [r6, #0]
 80088d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088dc:	2301      	movs	r3, #1
 80088de:	e09c      	b.n	8008a1a <_printf_i+0x1e6>
 80088e0:	6833      	ldr	r3, [r6, #0]
 80088e2:	6820      	ldr	r0, [r4, #0]
 80088e4:	1d19      	adds	r1, r3, #4
 80088e6:	6031      	str	r1, [r6, #0]
 80088e8:	0606      	lsls	r6, r0, #24
 80088ea:	d501      	bpl.n	80088f0 <_printf_i+0xbc>
 80088ec:	681d      	ldr	r5, [r3, #0]
 80088ee:	e003      	b.n	80088f8 <_printf_i+0xc4>
 80088f0:	0645      	lsls	r5, r0, #25
 80088f2:	d5fb      	bpl.n	80088ec <_printf_i+0xb8>
 80088f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	da03      	bge.n	8008904 <_printf_i+0xd0>
 80088fc:	232d      	movs	r3, #45	@ 0x2d
 80088fe:	426d      	negs	r5, r5
 8008900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008904:	4858      	ldr	r0, [pc, #352]	@ (8008a68 <_printf_i+0x234>)
 8008906:	230a      	movs	r3, #10
 8008908:	e011      	b.n	800892e <_printf_i+0xfa>
 800890a:	6821      	ldr	r1, [r4, #0]
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	0608      	lsls	r0, r1, #24
 8008910:	f853 5b04 	ldr.w	r5, [r3], #4
 8008914:	d402      	bmi.n	800891c <_printf_i+0xe8>
 8008916:	0649      	lsls	r1, r1, #25
 8008918:	bf48      	it	mi
 800891a:	b2ad      	uxthmi	r5, r5
 800891c:	2f6f      	cmp	r7, #111	@ 0x6f
 800891e:	4852      	ldr	r0, [pc, #328]	@ (8008a68 <_printf_i+0x234>)
 8008920:	6033      	str	r3, [r6, #0]
 8008922:	bf14      	ite	ne
 8008924:	230a      	movne	r3, #10
 8008926:	2308      	moveq	r3, #8
 8008928:	2100      	movs	r1, #0
 800892a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800892e:	6866      	ldr	r6, [r4, #4]
 8008930:	60a6      	str	r6, [r4, #8]
 8008932:	2e00      	cmp	r6, #0
 8008934:	db05      	blt.n	8008942 <_printf_i+0x10e>
 8008936:	6821      	ldr	r1, [r4, #0]
 8008938:	432e      	orrs	r6, r5
 800893a:	f021 0104 	bic.w	r1, r1, #4
 800893e:	6021      	str	r1, [r4, #0]
 8008940:	d04b      	beq.n	80089da <_printf_i+0x1a6>
 8008942:	4616      	mov	r6, r2
 8008944:	fbb5 f1f3 	udiv	r1, r5, r3
 8008948:	fb03 5711 	mls	r7, r3, r1, r5
 800894c:	5dc7      	ldrb	r7, [r0, r7]
 800894e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008952:	462f      	mov	r7, r5
 8008954:	42bb      	cmp	r3, r7
 8008956:	460d      	mov	r5, r1
 8008958:	d9f4      	bls.n	8008944 <_printf_i+0x110>
 800895a:	2b08      	cmp	r3, #8
 800895c:	d10b      	bne.n	8008976 <_printf_i+0x142>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	07df      	lsls	r7, r3, #31
 8008962:	d508      	bpl.n	8008976 <_printf_i+0x142>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	6861      	ldr	r1, [r4, #4]
 8008968:	4299      	cmp	r1, r3
 800896a:	bfde      	ittt	le
 800896c:	2330      	movle	r3, #48	@ 0x30
 800896e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008972:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008976:	1b92      	subs	r2, r2, r6
 8008978:	6122      	str	r2, [r4, #16]
 800897a:	f8cd a000 	str.w	sl, [sp]
 800897e:	464b      	mov	r3, r9
 8008980:	aa03      	add	r2, sp, #12
 8008982:	4621      	mov	r1, r4
 8008984:	4640      	mov	r0, r8
 8008986:	f7ff fee7 	bl	8008758 <_printf_common>
 800898a:	3001      	adds	r0, #1
 800898c:	d14a      	bne.n	8008a24 <_printf_i+0x1f0>
 800898e:	f04f 30ff 	mov.w	r0, #4294967295
 8008992:	b004      	add	sp, #16
 8008994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	f043 0320 	orr.w	r3, r3, #32
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	4832      	ldr	r0, [pc, #200]	@ (8008a6c <_printf_i+0x238>)
 80089a2:	2778      	movs	r7, #120	@ 0x78
 80089a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	6831      	ldr	r1, [r6, #0]
 80089ac:	061f      	lsls	r7, r3, #24
 80089ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80089b2:	d402      	bmi.n	80089ba <_printf_i+0x186>
 80089b4:	065f      	lsls	r7, r3, #25
 80089b6:	bf48      	it	mi
 80089b8:	b2ad      	uxthmi	r5, r5
 80089ba:	6031      	str	r1, [r6, #0]
 80089bc:	07d9      	lsls	r1, r3, #31
 80089be:	bf44      	itt	mi
 80089c0:	f043 0320 	orrmi.w	r3, r3, #32
 80089c4:	6023      	strmi	r3, [r4, #0]
 80089c6:	b11d      	cbz	r5, 80089d0 <_printf_i+0x19c>
 80089c8:	2310      	movs	r3, #16
 80089ca:	e7ad      	b.n	8008928 <_printf_i+0xf4>
 80089cc:	4826      	ldr	r0, [pc, #152]	@ (8008a68 <_printf_i+0x234>)
 80089ce:	e7e9      	b.n	80089a4 <_printf_i+0x170>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	f023 0320 	bic.w	r3, r3, #32
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	e7f6      	b.n	80089c8 <_printf_i+0x194>
 80089da:	4616      	mov	r6, r2
 80089dc:	e7bd      	b.n	800895a <_printf_i+0x126>
 80089de:	6833      	ldr	r3, [r6, #0]
 80089e0:	6825      	ldr	r5, [r4, #0]
 80089e2:	6961      	ldr	r1, [r4, #20]
 80089e4:	1d18      	adds	r0, r3, #4
 80089e6:	6030      	str	r0, [r6, #0]
 80089e8:	062e      	lsls	r6, r5, #24
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	d501      	bpl.n	80089f2 <_printf_i+0x1be>
 80089ee:	6019      	str	r1, [r3, #0]
 80089f0:	e002      	b.n	80089f8 <_printf_i+0x1c4>
 80089f2:	0668      	lsls	r0, r5, #25
 80089f4:	d5fb      	bpl.n	80089ee <_printf_i+0x1ba>
 80089f6:	8019      	strh	r1, [r3, #0]
 80089f8:	2300      	movs	r3, #0
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	4616      	mov	r6, r2
 80089fe:	e7bc      	b.n	800897a <_printf_i+0x146>
 8008a00:	6833      	ldr	r3, [r6, #0]
 8008a02:	1d1a      	adds	r2, r3, #4
 8008a04:	6032      	str	r2, [r6, #0]
 8008a06:	681e      	ldr	r6, [r3, #0]
 8008a08:	6862      	ldr	r2, [r4, #4]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7f7 fc67 	bl	80002e0 <memchr>
 8008a12:	b108      	cbz	r0, 8008a18 <_printf_i+0x1e4>
 8008a14:	1b80      	subs	r0, r0, r6
 8008a16:	6060      	str	r0, [r4, #4]
 8008a18:	6863      	ldr	r3, [r4, #4]
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a22:	e7aa      	b.n	800897a <_printf_i+0x146>
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	4632      	mov	r2, r6
 8008a28:	4649      	mov	r1, r9
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	47d0      	blx	sl
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d0ad      	beq.n	800898e <_printf_i+0x15a>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	079b      	lsls	r3, r3, #30
 8008a36:	d413      	bmi.n	8008a60 <_printf_i+0x22c>
 8008a38:	68e0      	ldr	r0, [r4, #12]
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	4298      	cmp	r0, r3
 8008a3e:	bfb8      	it	lt
 8008a40:	4618      	movlt	r0, r3
 8008a42:	e7a6      	b.n	8008992 <_printf_i+0x15e>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4632      	mov	r2, r6
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	47d0      	blx	sl
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d09d      	beq.n	800898e <_printf_i+0x15a>
 8008a52:	3501      	adds	r5, #1
 8008a54:	68e3      	ldr	r3, [r4, #12]
 8008a56:	9903      	ldr	r1, [sp, #12]
 8008a58:	1a5b      	subs	r3, r3, r1
 8008a5a:	42ab      	cmp	r3, r5
 8008a5c:	dcf2      	bgt.n	8008a44 <_printf_i+0x210>
 8008a5e:	e7eb      	b.n	8008a38 <_printf_i+0x204>
 8008a60:	2500      	movs	r5, #0
 8008a62:	f104 0619 	add.w	r6, r4, #25
 8008a66:	e7f5      	b.n	8008a54 <_printf_i+0x220>
 8008a68:	08009b51 	.word	0x08009b51
 8008a6c:	08009b62 	.word	0x08009b62

08008a70 <__sflush_r>:
 8008a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	0716      	lsls	r6, r2, #28
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	d454      	bmi.n	8008b2a <__sflush_r+0xba>
 8008a80:	684b      	ldr	r3, [r1, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc02      	bgt.n	8008a8c <__sflush_r+0x1c>
 8008a86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dd48      	ble.n	8008b1e <__sflush_r+0xae>
 8008a8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d045      	beq.n	8008b1e <__sflush_r+0xae>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a98:	682f      	ldr	r7, [r5, #0]
 8008a9a:	6a21      	ldr	r1, [r4, #32]
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	d030      	beq.n	8008b02 <__sflush_r+0x92>
 8008aa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	0759      	lsls	r1, r3, #29
 8008aa6:	d505      	bpl.n	8008ab4 <__sflush_r+0x44>
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	1ad2      	subs	r2, r2, r3
 8008aac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aae:	b10b      	cbz	r3, 8008ab4 <__sflush_r+0x44>
 8008ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ab2:	1ad2      	subs	r2, r2, r3
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ab8:	6a21      	ldr	r1, [r4, #32]
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b0      	blx	r6
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	d106      	bne.n	8008ad2 <__sflush_r+0x62>
 8008ac4:	6829      	ldr	r1, [r5, #0]
 8008ac6:	291d      	cmp	r1, #29
 8008ac8:	d82b      	bhi.n	8008b22 <__sflush_r+0xb2>
 8008aca:	4a2a      	ldr	r2, [pc, #168]	@ (8008b74 <__sflush_r+0x104>)
 8008acc:	40ca      	lsrs	r2, r1
 8008ace:	07d6      	lsls	r6, r2, #31
 8008ad0:	d527      	bpl.n	8008b22 <__sflush_r+0xb2>
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	6062      	str	r2, [r4, #4]
 8008ad6:	04d9      	lsls	r1, r3, #19
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	6022      	str	r2, [r4, #0]
 8008adc:	d504      	bpl.n	8008ae8 <__sflush_r+0x78>
 8008ade:	1c42      	adds	r2, r0, #1
 8008ae0:	d101      	bne.n	8008ae6 <__sflush_r+0x76>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b903      	cbnz	r3, 8008ae8 <__sflush_r+0x78>
 8008ae6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aea:	602f      	str	r7, [r5, #0]
 8008aec:	b1b9      	cbz	r1, 8008b1e <__sflush_r+0xae>
 8008aee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af2:	4299      	cmp	r1, r3
 8008af4:	d002      	beq.n	8008afc <__sflush_r+0x8c>
 8008af6:	4628      	mov	r0, r5
 8008af8:	f7ff fbf4 	bl	80082e4 <_free_r>
 8008afc:	2300      	movs	r3, #0
 8008afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b00:	e00d      	b.n	8008b1e <__sflush_r+0xae>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b0      	blx	r6
 8008b08:	4602      	mov	r2, r0
 8008b0a:	1c50      	adds	r0, r2, #1
 8008b0c:	d1c9      	bne.n	8008aa2 <__sflush_r+0x32>
 8008b0e:	682b      	ldr	r3, [r5, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0c6      	beq.n	8008aa2 <__sflush_r+0x32>
 8008b14:	2b1d      	cmp	r3, #29
 8008b16:	d001      	beq.n	8008b1c <__sflush_r+0xac>
 8008b18:	2b16      	cmp	r3, #22
 8008b1a:	d11e      	bne.n	8008b5a <__sflush_r+0xea>
 8008b1c:	602f      	str	r7, [r5, #0]
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e022      	b.n	8008b68 <__sflush_r+0xf8>
 8008b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b26:	b21b      	sxth	r3, r3
 8008b28:	e01b      	b.n	8008b62 <__sflush_r+0xf2>
 8008b2a:	690f      	ldr	r7, [r1, #16]
 8008b2c:	2f00      	cmp	r7, #0
 8008b2e:	d0f6      	beq.n	8008b1e <__sflush_r+0xae>
 8008b30:	0793      	lsls	r3, r2, #30
 8008b32:	680e      	ldr	r6, [r1, #0]
 8008b34:	bf08      	it	eq
 8008b36:	694b      	ldreq	r3, [r1, #20]
 8008b38:	600f      	str	r7, [r1, #0]
 8008b3a:	bf18      	it	ne
 8008b3c:	2300      	movne	r3, #0
 8008b3e:	eba6 0807 	sub.w	r8, r6, r7
 8008b42:	608b      	str	r3, [r1, #8]
 8008b44:	f1b8 0f00 	cmp.w	r8, #0
 8008b48:	dde9      	ble.n	8008b1e <__sflush_r+0xae>
 8008b4a:	6a21      	ldr	r1, [r4, #32]
 8008b4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b4e:	4643      	mov	r3, r8
 8008b50:	463a      	mov	r2, r7
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b0      	blx	r6
 8008b56:	2800      	cmp	r0, #0
 8008b58:	dc08      	bgt.n	8008b6c <__sflush_r+0xfc>
 8008b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	4407      	add	r7, r0
 8008b6e:	eba8 0800 	sub.w	r8, r8, r0
 8008b72:	e7e7      	b.n	8008b44 <__sflush_r+0xd4>
 8008b74:	20400001 	.word	0x20400001

08008b78 <_fflush_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	690b      	ldr	r3, [r1, #16]
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b913      	cbnz	r3, 8008b88 <_fflush_r+0x10>
 8008b82:	2500      	movs	r5, #0
 8008b84:	4628      	mov	r0, r5
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	b118      	cbz	r0, 8008b92 <_fflush_r+0x1a>
 8008b8a:	6a03      	ldr	r3, [r0, #32]
 8008b8c:	b90b      	cbnz	r3, 8008b92 <_fflush_r+0x1a>
 8008b8e:	f7ff faa1 	bl	80080d4 <__sinit>
 8008b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f3      	beq.n	8008b82 <_fflush_r+0xa>
 8008b9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b9c:	07d0      	lsls	r0, r2, #31
 8008b9e:	d404      	bmi.n	8008baa <_fflush_r+0x32>
 8008ba0:	0599      	lsls	r1, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_fflush_r+0x32>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba6:	f7ff fb9a 	bl	80082de <__retarget_lock_acquire_recursive>
 8008baa:	4628      	mov	r0, r5
 8008bac:	4621      	mov	r1, r4
 8008bae:	f7ff ff5f 	bl	8008a70 <__sflush_r>
 8008bb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bb4:	07da      	lsls	r2, r3, #31
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	d4e4      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	059b      	lsls	r3, r3, #22
 8008bbe:	d4e1      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bc2:	f7ff fb8d 	bl	80082e0 <__retarget_lock_release_recursive>
 8008bc6:	e7dd      	b.n	8008b84 <_fflush_r+0xc>

08008bc8 <__swbuf_r>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	460e      	mov	r6, r1
 8008bcc:	4614      	mov	r4, r2
 8008bce:	4605      	mov	r5, r0
 8008bd0:	b118      	cbz	r0, 8008bda <__swbuf_r+0x12>
 8008bd2:	6a03      	ldr	r3, [r0, #32]
 8008bd4:	b90b      	cbnz	r3, 8008bda <__swbuf_r+0x12>
 8008bd6:	f7ff fa7d 	bl	80080d4 <__sinit>
 8008bda:	69a3      	ldr	r3, [r4, #24]
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	071a      	lsls	r2, r3, #28
 8008be2:	d501      	bpl.n	8008be8 <__swbuf_r+0x20>
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	b943      	cbnz	r3, 8008bfa <__swbuf_r+0x32>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 f82a 	bl	8008c44 <__swsetup_r>
 8008bf0:	b118      	cbz	r0, 8008bfa <__swbuf_r+0x32>
 8008bf2:	f04f 37ff 	mov.w	r7, #4294967295
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	6922      	ldr	r2, [r4, #16]
 8008bfe:	1a98      	subs	r0, r3, r2
 8008c00:	6963      	ldr	r3, [r4, #20]
 8008c02:	b2f6      	uxtb	r6, r6
 8008c04:	4283      	cmp	r3, r0
 8008c06:	4637      	mov	r7, r6
 8008c08:	dc05      	bgt.n	8008c16 <__swbuf_r+0x4e>
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f7ff ffb3 	bl	8008b78 <_fflush_r>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d1ed      	bne.n	8008bf2 <__swbuf_r+0x2a>
 8008c16:	68a3      	ldr	r3, [r4, #8]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	60a3      	str	r3, [r4, #8]
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	6022      	str	r2, [r4, #0]
 8008c22:	701e      	strb	r6, [r3, #0]
 8008c24:	6962      	ldr	r2, [r4, #20]
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d004      	beq.n	8008c36 <__swbuf_r+0x6e>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	07db      	lsls	r3, r3, #31
 8008c30:	d5e1      	bpl.n	8008bf6 <__swbuf_r+0x2e>
 8008c32:	2e0a      	cmp	r6, #10
 8008c34:	d1df      	bne.n	8008bf6 <__swbuf_r+0x2e>
 8008c36:	4621      	mov	r1, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f7ff ff9d 	bl	8008b78 <_fflush_r>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d0d9      	beq.n	8008bf6 <__swbuf_r+0x2e>
 8008c42:	e7d6      	b.n	8008bf2 <__swbuf_r+0x2a>

08008c44 <__swsetup_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4b29      	ldr	r3, [pc, #164]	@ (8008cec <__swsetup_r+0xa8>)
 8008c48:	4605      	mov	r5, r0
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	b118      	cbz	r0, 8008c58 <__swsetup_r+0x14>
 8008c50:	6a03      	ldr	r3, [r0, #32]
 8008c52:	b90b      	cbnz	r3, 8008c58 <__swsetup_r+0x14>
 8008c54:	f7ff fa3e 	bl	80080d4 <__sinit>
 8008c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c5c:	0719      	lsls	r1, r3, #28
 8008c5e:	d422      	bmi.n	8008ca6 <__swsetup_r+0x62>
 8008c60:	06da      	lsls	r2, r3, #27
 8008c62:	d407      	bmi.n	8008c74 <__swsetup_r+0x30>
 8008c64:	2209      	movs	r2, #9
 8008c66:	602a      	str	r2, [r5, #0]
 8008c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	e033      	b.n	8008cdc <__swsetup_r+0x98>
 8008c74:	0758      	lsls	r0, r3, #29
 8008c76:	d512      	bpl.n	8008c9e <__swsetup_r+0x5a>
 8008c78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c7a:	b141      	cbz	r1, 8008c8e <__swsetup_r+0x4a>
 8008c7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c80:	4299      	cmp	r1, r3
 8008c82:	d002      	beq.n	8008c8a <__swsetup_r+0x46>
 8008c84:	4628      	mov	r0, r5
 8008c86:	f7ff fb2d 	bl	80082e4 <_free_r>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c94:	81a3      	strh	r3, [r4, #12]
 8008c96:	2300      	movs	r3, #0
 8008c98:	6063      	str	r3, [r4, #4]
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f043 0308 	orr.w	r3, r3, #8
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	b94b      	cbnz	r3, 8008cbe <__swsetup_r+0x7a>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb4:	d003      	beq.n	8008cbe <__swsetup_r+0x7a>
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f000 f84f 	bl	8008d5c <__smakebuf_r>
 8008cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc2:	f013 0201 	ands.w	r2, r3, #1
 8008cc6:	d00a      	beq.n	8008cde <__swsetup_r+0x9a>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	60a2      	str	r2, [r4, #8]
 8008ccc:	6962      	ldr	r2, [r4, #20]
 8008cce:	4252      	negs	r2, r2
 8008cd0:	61a2      	str	r2, [r4, #24]
 8008cd2:	6922      	ldr	r2, [r4, #16]
 8008cd4:	b942      	cbnz	r2, 8008ce8 <__swsetup_r+0xa4>
 8008cd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cda:	d1c5      	bne.n	8008c68 <__swsetup_r+0x24>
 8008cdc:	bd38      	pop	{r3, r4, r5, pc}
 8008cde:	0799      	lsls	r1, r3, #30
 8008ce0:	bf58      	it	pl
 8008ce2:	6962      	ldrpl	r2, [r4, #20]
 8008ce4:	60a2      	str	r2, [r4, #8]
 8008ce6:	e7f4      	b.n	8008cd2 <__swsetup_r+0x8e>
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e7f7      	b.n	8008cdc <__swsetup_r+0x98>
 8008cec:	24000038 	.word	0x24000038

08008cf0 <_sbrk_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d06      	ldr	r5, [pc, #24]	@ (8008d0c <_sbrk_r+0x1c>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7f8 fef0 	bl	8001ae0 <_sbrk>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_sbrk_r+0x1a>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_sbrk_r+0x1a>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	24000324 	.word	0x24000324

08008d10 <__swhatbuf_r>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	460c      	mov	r4, r1
 8008d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d18:	2900      	cmp	r1, #0
 8008d1a:	b096      	sub	sp, #88	@ 0x58
 8008d1c:	4615      	mov	r5, r2
 8008d1e:	461e      	mov	r6, r3
 8008d20:	da0d      	bge.n	8008d3e <__swhatbuf_r+0x2e>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d28:	f04f 0100 	mov.w	r1, #0
 8008d2c:	bf14      	ite	ne
 8008d2e:	2340      	movne	r3, #64	@ 0x40
 8008d30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d34:	2000      	movs	r0, #0
 8008d36:	6031      	str	r1, [r6, #0]
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	b016      	add	sp, #88	@ 0x58
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
 8008d3e:	466a      	mov	r2, sp
 8008d40:	f000 f848 	bl	8008dd4 <_fstat_r>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	dbec      	blt.n	8008d22 <__swhatbuf_r+0x12>
 8008d48:	9901      	ldr	r1, [sp, #4]
 8008d4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d52:	4259      	negs	r1, r3
 8008d54:	4159      	adcs	r1, r3
 8008d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d5a:	e7eb      	b.n	8008d34 <__swhatbuf_r+0x24>

08008d5c <__smakebuf_r>:
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d60:	079d      	lsls	r5, r3, #30
 8008d62:	4606      	mov	r6, r0
 8008d64:	460c      	mov	r4, r1
 8008d66:	d507      	bpl.n	8008d78 <__smakebuf_r+0x1c>
 8008d68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	2301      	movs	r3, #1
 8008d72:	6163      	str	r3, [r4, #20]
 8008d74:	b003      	add	sp, #12
 8008d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d78:	ab01      	add	r3, sp, #4
 8008d7a:	466a      	mov	r2, sp
 8008d7c:	f7ff ffc8 	bl	8008d10 <__swhatbuf_r>
 8008d80:	9f00      	ldr	r7, [sp, #0]
 8008d82:	4605      	mov	r5, r0
 8008d84:	4639      	mov	r1, r7
 8008d86:	4630      	mov	r0, r6
 8008d88:	f7ff fb18 	bl	80083bc <_malloc_r>
 8008d8c:	b948      	cbnz	r0, 8008da2 <__smakebuf_r+0x46>
 8008d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d92:	059a      	lsls	r2, r3, #22
 8008d94:	d4ee      	bmi.n	8008d74 <__smakebuf_r+0x18>
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	f043 0302 	orr.w	r3, r3, #2
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	e7e2      	b.n	8008d68 <__smakebuf_r+0xc>
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	6020      	str	r0, [r4, #0]
 8008da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008daa:	81a3      	strh	r3, [r4, #12]
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008db2:	b15b      	cbz	r3, 8008dcc <__smakebuf_r+0x70>
 8008db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008db8:	4630      	mov	r0, r6
 8008dba:	f000 f81d 	bl	8008df8 <_isatty_r>
 8008dbe:	b128      	cbz	r0, 8008dcc <__smakebuf_r+0x70>
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	81a3      	strh	r3, [r4, #12]
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	431d      	orrs	r5, r3
 8008dd0:	81a5      	strh	r5, [r4, #12]
 8008dd2:	e7cf      	b.n	8008d74 <__smakebuf_r+0x18>

08008dd4 <_fstat_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d07      	ldr	r5, [pc, #28]	@ (8008df4 <_fstat_r+0x20>)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	4611      	mov	r1, r2
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	f7f8 fe54 	bl	8001a8e <_fstat>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d102      	bne.n	8008df0 <_fstat_r+0x1c>
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	b103      	cbz	r3, 8008df0 <_fstat_r+0x1c>
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	bd38      	pop	{r3, r4, r5, pc}
 8008df2:	bf00      	nop
 8008df4:	24000324 	.word	0x24000324

08008df8 <_isatty_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d06      	ldr	r5, [pc, #24]	@ (8008e14 <_isatty_r+0x1c>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	f7f8 fe53 	bl	8001aae <_isatty>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_isatty_r+0x1a>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_isatty_r+0x1a>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	24000324 	.word	0x24000324

08008e18 <_init>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr

08008e24 <_fini>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr
