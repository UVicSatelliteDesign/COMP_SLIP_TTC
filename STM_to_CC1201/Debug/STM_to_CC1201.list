
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b48  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  08008de8  08008de8  00009de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b2c  08009b2c  0000ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b34  08009b34  0000ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009b38  08009b38  0000ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009b3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  08009bc4  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  08009bc4  0000b334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015816  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c58  00000000  00000000  000208cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef0  00000000  00000000  00023528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b6a  00000000  00000000  00024418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  00024f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015fc0  00000000  00000000  0005d467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ee07  00000000  00000000  00073427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d222e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000044f0  00000000  00000000  001d2274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d6764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008dd0 	.word	0x08008dd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008dd0 	.word	0x08008dd0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_FastTxOn>:
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
    return result;
}

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2031      	movs	r0, #49	@ 0x31
 80006b8:	f000 fa8a 	bl	8000bd0 <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_EnterRxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
}

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2034      	movs	r0, #52	@ 0x34
 80006d2:	f000 fa7d 	bl	8000bd0 <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2035      	movs	r0, #53	@ 0x35
 80006ec:	f000 fa70 	bl	8000bd0 <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2036      	movs	r0, #54	@ 0x36
 8000706:	f000 fa63 	bl	8000bd0 <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	203a      	movs	r0, #58	@ 0x3a
 8000720:	f000 fa56 	bl	8000bd0 <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	203b      	movs	r0, #59	@ 0x3b
 800073a:	f000 fa49 	bl	8000bd0 <CC1201_SendStrobe>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <CC1201_Nop+0x30>)
 8000752:	f007 fcd1 	bl	80080f8 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	203d      	movs	r0, #61	@ 0x3d
 800075a:	f000 fa39 	bl	8000bd0 <CC1201_SendStrobe>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	4619      	mov	r1, r3
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <CC1201_Nop+0x34>)
 8000768:	f007 fcc6 	bl	80080f8 <iprintf>
    return result;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08008e44 	.word	0x08008e44
 800077c:	08008e6c 	.word	0x08008e6c

08000780 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	2bff      	cmp	r3, #255	@ 0xff
 8000790:	d909      	bls.n	80007a6 <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 8000792:	232f      	movs	r3, #47	@ 0x2f
 8000794:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 800079c:	2300      	movs	r3, #0
 800079e:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007a0:	2303      	movs	r3, #3
 80007a2:	75fb      	strb	r3, [r7, #23]
 80007a4:	e009      	b.n	80007ba <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007b2:	2300      	movs	r3, #0
 80007b4:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007ba:	2200      	movs	r2, #0
 80007bc:	2110      	movs	r1, #16
 80007be:	4815      	ldr	r0, [pc, #84]	@ (8000814 <CC1201_ReadStatus+0x94>)
 80007c0:	f002 fb7e 	bl	8002ec0 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	f107 020c 	add.w	r2, r7, #12
 80007cc:	f107 0110 	add.w	r1, r7, #16
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	4810      	ldr	r0, [pc, #64]	@ (8000818 <CC1201_ReadStatus+0x98>)
 80007d8:	f005 fd1e 	bl	8006218 <HAL_SPI_TransmitReceive>
 80007dc:	4603      	mov	r3, r0
 80007de:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007e0:	2201      	movs	r2, #1
 80007e2:	2110      	movs	r1, #16
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <CC1201_ReadStatus+0x94>)
 80007e6:	f002 fb6b 	bl	8002ec0 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80007ea:	7dbb      	ldrb	r3, [r7, #22]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10c      	bne.n	800080a <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d009      	beq.n	800080a <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2bff      	cmp	r3, #255	@ 0xff
 80007fa:	d903      	bls.n	8000804 <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 80007fc:	7bba      	ldrb	r2, [r7, #14]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	e002      	b.n	800080a <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000804:	7b7a      	ldrb	r2, [r7, #13]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 800080a:	7dbb      	ldrb	r3, [r7, #22]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	58021000 	.word	0x58021000
 8000818:	240000b8 	.word	0x240000b8

0800081c <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	80fb      	strh	r3, [r7, #6]
 8000828:	4613      	mov	r3, r2
 800082a:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	2bff      	cmp	r3, #255	@ 0xff
 8000830:	d909      	bls.n	8000846 <CC1201_WriteRegister+0x2a>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command  
 8000832:	232f      	movs	r3, #47	@ 0x2f
 8000834:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 800083c:	797b      	ldrb	r3, [r7, #5]
 800083e:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 8000840:	2303      	movs	r3, #3
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e006      	b.n	8000854 <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 800084c:	797b      	ldrb	r3, [r7, #5]
 800084e:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	480b      	ldr	r0, [pc, #44]	@ (8000888 <CC1201_WriteRegister+0x6c>)
 800085a:	f002 fb31 	bl	8002ec0 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	b29a      	uxth	r2, r3
 8000862:	f107 0108 	add.w	r1, r7, #8
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <CC1201_WriteRegister+0x70>)
 800086c:	f005 fae6 	bl	8005e3c <HAL_SPI_Transmit>
 8000870:	4603      	mov	r3, r0
 8000872:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000874:	2201      	movs	r2, #1
 8000876:	2110      	movs	r1, #16
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <CC1201_WriteRegister+0x6c>)
 800087a:	f002 fb21 	bl	8002ec0 <HAL_GPIO_WritePin>

    return status;
 800087e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58021000 	.word	0x58021000
 800088c:	240000b8 	.word	0x240000b8

08000890 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800089e:	f7ff ff6f 	bl	8000780 <CC1201_ReadStatus>
 80008a2:	4603      	mov	r3, r0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 80008ba:	f7ff ff61 	bl	8000780 <CC1201_ReadStatus>
 80008be:	4603      	mov	r3, r0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 80008d6:	f7ff ff53 	bl	8000780 <CC1201_ReadStatus>
 80008da:	4603      	mov	r3, r0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80008e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e8:	b08f      	sub	sp, #60	@ 0x3c
 80008ea:	af02      	add	r7, sp, #8
 80008ec:	6178      	str	r0, [r7, #20]
 80008ee:	460b      	mov	r3, r1
 80008f0:	60fa      	str	r2, [r7, #12]
 80008f2:	74fb      	strb	r3, [r7, #19]
 80008f4:	466b      	mov	r3, sp
 80008f6:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d005      	beq.n	800090a <CC1201_WriteTxFifo+0x26>
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <CC1201_WriteTxFifo+0x26>
 8000904:	7cfb      	ldrb	r3, [r7, #19]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d101      	bne.n	800090e <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e088      	b.n	8000a20 <CC1201_WriteTxFifo+0x13c>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800090e:	7cfb      	ldrb	r3, [r7, #19]
 8000910:	1c99      	adds	r1, r3, #2
 8000912:	1e4b      	subs	r3, r1, #1
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000916:	460a      	mov	r2, r1
 8000918:	2300      	movs	r3, #0
 800091a:	603a      	str	r2, [r7, #0]
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	f04f 0300 	mov.w	r3, #0
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	00c3      	lsls	r3, r0, #3
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000930:	6838      	ldr	r0, [r7, #0]
 8000932:	00c2      	lsls	r2, r0, #3
 8000934:	460a      	mov	r2, r1
 8000936:	2300      	movs	r3, #0
 8000938:	4692      	mov	sl, r2
 800093a:	469b      	mov	fp, r3
 800093c:	f04f 0200 	mov.w	r2, #0
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800094c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000950:	460b      	mov	r3, r1
 8000952:	3307      	adds	r3, #7
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	ebad 0d03 	sub.w	sp, sp, r3
 800095c:	ab02      	add	r3, sp, #8
 800095e:	3300      	adds	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	1c99      	adds	r1, r3, #2
 8000966:	1e4b      	subs	r3, r1, #1
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	460a      	mov	r2, r1
 800096c:	2300      	movs	r3, #0
 800096e:	4690      	mov	r8, r2
 8000970:	4699      	mov	r9, r3
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800097e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000986:	460a      	mov	r2, r1
 8000988:	2300      	movs	r3, #0
 800098a:	4614      	mov	r4, r2
 800098c:	461d      	mov	r5, r3
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	00eb      	lsls	r3, r5, #3
 8000998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800099c:	00e2      	lsls	r2, r4, #3
 800099e:	460b      	mov	r3, r1
 80009a0:	3307      	adds	r3, #7
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	ebad 0d03 	sub.w	sp, sp, r3
 80009aa:	ab02      	add	r3, sp, #8
 80009ac:	3300      	adds	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 80009b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b2:	227f      	movs	r2, #127	@ 0x7f
 80009b4:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009bc:	e00e      	b.n	80009dc <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	441a      	add	r2, r3
 80009c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ca:	3301      	adds	r3, #1
 80009cc:	7811      	ldrb	r1, [r2, #0]
 80009ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 80009d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d6:	3301      	adds	r3, #1
 80009d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009dc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009e0:	7cfb      	ldrb	r3, [r7, #19]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d3eb      	bcc.n	80009be <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2110      	movs	r1, #16
 80009ea:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <CC1201_WriteTxFifo+0x148>)
 80009ec:	f002 fa68 	bl	8002ec0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 80009f0:	7cfb      	ldrb	r3, [r7, #19]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	3301      	adds	r3, #1
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a02:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <CC1201_WriteTxFifo+0x14c>)
 8000a04:	f005 fc08 	bl	8006218 <HAL_SPI_TransmitReceive>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <CC1201_WriteTxFifo+0x148>)
 8000a12:	f002 fa55 	bl	8002ec0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000a1e:	7efb      	ldrb	r3, [r7, #27]
 8000a20:	46b5      	mov	sp, r6
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3734      	adds	r7, #52	@ 0x34
 8000a26:	46bd      	mov	sp, r7
 8000a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a2c:	58021000 	.word	0x58021000
 8000a30:	240000b8 	.word	0x240000b8

08000a34 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a38:	b08f      	sub	sp, #60	@ 0x3c
 8000a3a:	af02      	add	r7, sp, #8
 8000a3c:	6178      	str	r0, [r7, #20]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	60fa      	str	r2, [r7, #12]
 8000a42:	74fb      	strb	r3, [r7, #19]
 8000a44:	466b      	mov	r3, sp
 8000a46:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d005      	beq.n	8000a5a <CC1201_ReadRxFifo+0x26>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <CC1201_ReadRxFifo+0x26>
 8000a54:	7cfb      	ldrb	r3, [r7, #19]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e09b      	b.n	8000b96 <CC1201_ReadRxFifo+0x162>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000a5e:	7cfb      	ldrb	r3, [r7, #19]
 8000a60:	1c59      	adds	r1, r3, #1
 8000a62:	1e4b      	subs	r3, r1, #1
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a66:	460a      	mov	r2, r1
 8000a68:	2300      	movs	r3, #0
 8000a6a:	603a      	str	r2, [r7, #0]
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	00c3      	lsls	r3, r0, #3
 8000a7a:	6838      	ldr	r0, [r7, #0]
 8000a7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a80:	6838      	ldr	r0, [r7, #0]
 8000a82:	00c2      	lsls	r2, r0, #3
 8000a84:	460a      	mov	r2, r1
 8000a86:	2300      	movs	r3, #0
 8000a88:	4692      	mov	sl, r2
 8000a8a:	469b      	mov	fp, r3
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	3307      	adds	r3, #7
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	ebad 0d03 	sub.w	sp, sp, r3
 8000aac:	ab02      	add	r3, sp, #8
 8000aae:	3300      	adds	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000ab2:	7cfb      	ldrb	r3, [r7, #19]
 8000ab4:	1c59      	adds	r1, r3, #1
 8000ab6:	1e4b      	subs	r3, r1, #1
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	460a      	mov	r2, r1
 8000abc:	2300      	movs	r3, #0
 8000abe:	4690      	mov	r8, r2
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	2300      	movs	r3, #0
 8000ada:	4614      	mov	r4, r2
 8000adc:	461d      	mov	r5, r3
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	00eb      	lsls	r3, r5, #3
 8000ae8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000aec:	00e2      	lsls	r2, r4, #3
 8000aee:	460b      	mov	r3, r1
 8000af0:	3307      	adds	r3, #7
 8000af2:	08db      	lsrs	r3, r3, #3
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	ebad 0d03 	sub.w	sp, sp, r3
 8000afa:	ab02      	add	r3, sp, #8
 8000afc:	3300      	adds	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	22ff      	movs	r2, #255	@ 0xff
 8000b04:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b0c:	e009      	b.n	8000b22 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000b18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b22:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000b26:	7cfb      	ldrb	r3, [r7, #19]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d9f0      	bls.n	8000b0e <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	481c      	ldr	r0, [pc, #112]	@ (8000ba4 <CC1201_ReadRxFifo+0x170>)
 8000b32:	f002 f9c5 	bl	8002ec0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000b36:	7cfb      	ldrb	r3, [r7, #19]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b42:	9200      	str	r2, [sp, #0]
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b48:	4817      	ldr	r0, [pc, #92]	@ (8000ba8 <CC1201_ReadRxFifo+0x174>)
 8000b4a:	f005 fb65 	bl	8006218 <HAL_SPI_TransmitReceive>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2110      	movs	r1, #16
 8000b56:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <CC1201_ReadRxFifo+0x170>)
 8000b58:	f002 f9b2 	bl	8002ec0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b6a:	e00e      	b.n	8000b8a <CC1201_ReadRxFifo+0x156>
        data[i] = rx_buffer[1 + i];
 8000b6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b76:	6979      	ldr	r1, [r7, #20]
 8000b78:	440b      	add	r3, r1
 8000b7a:	69f9      	ldr	r1, [r7, #28]
 8000b7c:	5c8a      	ldrb	r2, [r1, r2]
 8000b7e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000b80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b84:	3301      	adds	r3, #1
 8000b86:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b8a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000b8e:	7cfb      	ldrb	r3, [r7, #19]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3eb      	bcc.n	8000b6c <CC1201_ReadRxFifo+0x138>
    }
    
    return status;
 8000b94:	7efb      	ldrb	r3, [r7, #27]
 8000b96:	46b5      	mov	sp, r6
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3734      	adds	r7, #52	@ 0x34
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58021000 	.word	0x58021000
 8000ba8:	240000b8 	.word	0x240000b8

08000bac <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fe90 	bl	80008e4 <CC1201_WriteTxFifo>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	4812      	ldr	r0, [pc, #72]	@ (8000c2c <CC1201_SendStrobe+0x5c>)
 8000be2:	f002 f96d 	bl	8002ec0 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f001 fb58 	bl	800229c <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000bec:	f107 020e 	add.w	r2, r7, #14
 8000bf0:	1df9      	adds	r1, r7, #7
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <CC1201_SendStrobe+0x60>)
 8000bfc:	f005 fb0c 	bl	8006218 <HAL_SPI_TransmitReceive>
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <CC1201_SendStrobe+0x5c>)
 8000c0a:	f002 f959 	bl	8002ec0 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d105      	bne.n	8000c20 <CC1201_SendStrobe+0x50>
        if (status_byte != NULL) {
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <CC1201_SendStrobe+0x50>
            *status_byte = rx_data;
 8000c1a:	7bba      	ldrb	r2, [r7, #14]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	58021000 	.word	0x58021000
 8000c30:	240000b8 	.word	0x240000b8

08000c34 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000c4e:	79fa      	ldrb	r2, [r7, #7]
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	4823      	ldr	r0, [pc, #140]	@ (8000ce4 <print_cc1201_status+0xb0>)
 8000c56:	f007 fa4f 	bl	80080f8 <iprintf>
    switch(radio_state) {
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d833      	bhi.n	8000cc8 <print_cc1201_status+0x94>
 8000c60:	a201      	add	r2, pc, #4	@ (adr r2, 8000c68 <print_cc1201_status+0x34>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c89 	.word	0x08000c89
 8000c6c:	08000c91 	.word	0x08000c91
 8000c70:	08000c99 	.word	0x08000c99
 8000c74:	08000ca1 	.word	0x08000ca1
 8000c78:	08000ca9 	.word	0x08000ca9
 8000c7c:	08000cb1 	.word	0x08000cb1
 8000c80:	08000cb9 	.word	0x08000cb9
 8000c84:	08000cc1 	.word	0x08000cc1
        case 0x0: printf("(IDLE)"); break;
 8000c88:	4817      	ldr	r0, [pc, #92]	@ (8000ce8 <print_cc1201_status+0xb4>)
 8000c8a:	f007 fa35 	bl	80080f8 <iprintf>
 8000c8e:	e01f      	b.n	8000cd0 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000c90:	4816      	ldr	r0, [pc, #88]	@ (8000cec <print_cc1201_status+0xb8>)
 8000c92:	f007 fa31 	bl	80080f8 <iprintf>
 8000c96:	e01b      	b.n	8000cd0 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000c98:	4815      	ldr	r0, [pc, #84]	@ (8000cf0 <print_cc1201_status+0xbc>)
 8000c9a:	f007 fa2d 	bl	80080f8 <iprintf>
 8000c9e:	e017      	b.n	8000cd0 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000ca0:	4814      	ldr	r0, [pc, #80]	@ (8000cf4 <print_cc1201_status+0xc0>)
 8000ca2:	f007 fa29 	bl	80080f8 <iprintf>
 8000ca6:	e013      	b.n	8000cd0 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000ca8:	4813      	ldr	r0, [pc, #76]	@ (8000cf8 <print_cc1201_status+0xc4>)
 8000caa:	f007 fa25 	bl	80080f8 <iprintf>
 8000cae:	e00f      	b.n	8000cd0 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000cb0:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <print_cc1201_status+0xc8>)
 8000cb2:	f007 fa21 	bl	80080f8 <iprintf>
 8000cb6:	e00b      	b.n	8000cd0 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <print_cc1201_status+0xcc>)
 8000cba:	f007 fa1d 	bl	80080f8 <iprintf>
 8000cbe:	e007      	b.n	8000cd0 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000cc0:	4810      	ldr	r0, [pc, #64]	@ (8000d04 <print_cc1201_status+0xd0>)
 8000cc2:	f007 fa19 	bl	80080f8 <iprintf>
 8000cc6:	e003      	b.n	8000cd0 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000cc8:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <print_cc1201_status+0xd4>)
 8000cca:	f007 fa15 	bl	80080f8 <iprintf>
 8000cce:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <print_cc1201_status+0xd8>)
 8000cd6:	f007 fa0f 	bl	80080f8 <iprintf>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08008e98 	.word	0x08008e98
 8000ce8:	08008eb8 	.word	0x08008eb8
 8000cec:	08008ec0 	.word	0x08008ec0
 8000cf0:	08008ec8 	.word	0x08008ec8
 8000cf4:	08008ed0 	.word	0x08008ed0
 8000cf8:	08008edc 	.word	0x08008edc
 8000cfc:	08008ee8 	.word	0x08008ee8
 8000d00:	08008ef4 	.word	0x08008ef4
 8000d04:	08008f04 	.word	0x08008f04
 8000d08:	08008f14 	.word	0x08008f14
 8000d0c:	08008f20 	.word	0x08008f20

08000d10 <test_buffer_operations>:

// Test 1: Buffer Read/Write Operations
void test_buffer_operations(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
    printf("\n=== TEST 1: BUFFER READ/WRITE OPERATIONS ===\n\r");
 8000d16:	4864      	ldr	r0, [pc, #400]	@ (8000ea8 <test_buffer_operations+0x198>)
 8000d18:	f007 f9ee 	bl	80080f8 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	75bb      	strb	r3, [r7, #22]
    
    // First, ensure we're in IDLE state and flush FIFOs
    printf("1. Preparing for buffer tests...\n\r");
 8000d20:	4862      	ldr	r0, [pc, #392]	@ (8000eac <test_buffer_operations+0x19c>)
 8000d22:	f007 f9e9 	bl	80080f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000d26:	f107 0316 	add.w	r3, r7, #22
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fce5 	bl	80006fa <CC1201_EnterIdleMode>
 8000d30:	4603      	mov	r3, r0
 8000d32:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <test_buffer_operations+0x34>
        print_cc1201_status(status_byte, "IDLE_MODE");
 8000d3a:	7dbb      	ldrb	r3, [r7, #22]
 8000d3c:	495c      	ldr	r1, [pc, #368]	@ (8000eb0 <test_buffer_operations+0x1a0>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff78 	bl	8000c34 <print_cc1201_status>
    }
    
    // Flush both FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8000d44:	f107 0316 	add.w	r3, r7, #22
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fcf0 	bl	800072e <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 8000d4e:	7dbb      	ldrb	r3, [r7, #22]
 8000d50:	4958      	ldr	r1, [pc, #352]	@ (8000eb4 <test_buffer_operations+0x1a4>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff6e 	bl	8000c34 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 8000d58:	f107 0316 	add.w	r3, r7, #22
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcd9 	bl	8000714 <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 8000d62:	7dbb      	ldrb	r3, [r7, #22]
 8000d64:	4954      	ldr	r1, [pc, #336]	@ (8000eb8 <test_buffer_operations+0x1a8>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff64 	bl	8000c34 <print_cc1201_status>
    
    // Test TX FIFO write operations
    printf("\n2. Testing TX FIFO Write Operations:\n\r");
 8000d6c:	4853      	ldr	r0, [pc, #332]	@ (8000ebc <test_buffer_operations+0x1ac>)
 8000d6e:	f007 f9c3 	bl	80080f8 <iprintf>
    
    // Test pattern 1: Sequential bytes
    uint8_t test_data_1[] = {0x01, 0x02, 0x03, 0x04, 0x05};
 8000d72:	4a53      	ldr	r2, [pc, #332]	@ (8000ec0 <test_buffer_operations+0x1b0>)
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d7c:	6018      	str	r0, [r3, #0]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	7019      	strb	r1, [r3, #0]
    status = CC1201_WriteTxFifo(test_data_1, sizeof(test_data_1), &status_byte);
 8000d82:	f107 0216 	add.w	r2, r7, #22
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	2105      	movs	r1, #5
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fda9 	bl	80008e4 <CC1201_WriteTxFifo>
 8000d92:	4603      	mov	r3, r0
 8000d94:	75fb      	strb	r3, [r7, #23]
    printf("  Write 5 bytes [01,02,03,04,05]: HAL=%d ", status);
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	484a      	ldr	r0, [pc, #296]	@ (8000ec4 <test_buffer_operations+0x1b4>)
 8000d9c:	f007 f9ac 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10f      	bne.n	8000dc6 <test_buffer_operations+0xb6>
        print_cc1201_status(status_byte, "TX_WRITE");
 8000da6:	7dbb      	ldrb	r3, [r7, #22]
 8000da8:	4947      	ldr	r1, [pc, #284]	@ (8000ec8 <test_buffer_operations+0x1b8>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff42 	bl	8000c34 <print_cc1201_status>
        
        // Check TX FIFO count
        uint8_t tx_count = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	70bb      	strb	r3, [r7, #2]
        CC1201_GetNumTXBytes(&tx_count);
 8000db4:	1cbb      	adds	r3, r7, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fd86 	bl	80008c8 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count: %d bytes\n\r", tx_count);
 8000dbc:	78bb      	ldrb	r3, [r7, #2]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4842      	ldr	r0, [pc, #264]	@ (8000ecc <test_buffer_operations+0x1bc>)
 8000dc2:	f007 f999 	bl	80080f8 <iprintf>
    }
    
    // Test single byte write
    printf("\n3. Testing Single Byte Write:\n\r");
 8000dc6:	4842      	ldr	r0, [pc, #264]	@ (8000ed0 <test_buffer_operations+0x1c0>)
 8000dc8:	f007 f996 	bl	80080f8 <iprintf>
    status = CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 8000dcc:	f107 0316 	add.w	r3, r7, #22
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	20aa      	movs	r0, #170	@ 0xaa
 8000dd4:	f7ff feea 	bl	8000bac <CC1201_WriteSingleTxFifo>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	75fb      	strb	r3, [r7, #23]
    printf("  Write single byte [AA]: HAL=%d ", status);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	483c      	ldr	r0, [pc, #240]	@ (8000ed4 <test_buffer_operations+0x1c4>)
 8000de2:	f007 f989 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10f      	bne.n	8000e0c <test_buffer_operations+0xfc>
        print_cc1201_status(status_byte, "SINGLE_WRITE");
 8000dec:	7dbb      	ldrb	r3, [r7, #22]
 8000dee:	493a      	ldr	r1, [pc, #232]	@ (8000ed8 <test_buffer_operations+0x1c8>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff1f 	bl	8000c34 <print_cc1201_status>
        
        uint8_t tx_count = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	707b      	strb	r3, [r7, #1]
        CC1201_GetNumTXBytes(&tx_count);
 8000dfa:	1c7b      	adds	r3, r7, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fd63 	bl	80008c8 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count after single write: %d bytes\n\r", tx_count);
 8000e02:	787b      	ldrb	r3, [r7, #1]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4835      	ldr	r0, [pc, #212]	@ (8000edc <test_buffer_operations+0x1cc>)
 8000e08:	f007 f976 	bl	80080f8 <iprintf>
    }
    
    // Test RX FIFO read (should be empty)
    printf("\n4. Testing RX FIFO Read (should be empty):\n\r");
 8000e0c:	4834      	ldr	r0, [pc, #208]	@ (8000ee0 <test_buffer_operations+0x1d0>)
 8000e0e:	f007 f973 	bl	80080f8 <iprintf>
    uint8_t rx_buffer[10] = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	811a      	strh	r2, [r3, #8]
    status = CC1201_ReadRxFifo(rx_buffer, 1, &status_byte);
 8000e1c:	f107 0216 	add.w	r2, r7, #22
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2101      	movs	r1, #1
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fe05 	bl	8000a34 <CC1201_ReadRxFifo>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    printf("  Read 1 byte from RX FIFO: HAL=%d ", status);
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	4619      	mov	r1, r3
 8000e32:	482c      	ldr	r0, [pc, #176]	@ (8000ee4 <test_buffer_operations+0x1d4>)
 8000e34:	f007 f960 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d114      	bne.n	8000e68 <test_buffer_operations+0x158>
        print_cc1201_status(status_byte, "RX_READ");
 8000e3e:	7dbb      	ldrb	r3, [r7, #22]
 8000e40:	4929      	ldr	r1, [pc, #164]	@ (8000ee8 <test_buffer_operations+0x1d8>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fef6 	bl	8000c34 <print_cc1201_status>
        printf("  Read data: 0x%02X\n\r", rx_buffer[0]);
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4827      	ldr	r0, [pc, #156]	@ (8000eec <test_buffer_operations+0x1dc>)
 8000e4e:	f007 f953 	bl	80080f8 <iprintf>
        
        uint8_t rx_count = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	703b      	strb	r3, [r7, #0]
        CC1201_GetNumRXBytes(&rx_count);
 8000e56:	463b      	mov	r3, r7
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fd27 	bl	80008ac <CC1201_GetNumRXBytes>
        printf("  RX FIFO count: %d bytes\n\r", rx_count);
 8000e5e:	783b      	ldrb	r3, [r7, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4823      	ldr	r0, [pc, #140]	@ (8000ef0 <test_buffer_operations+0x1e0>)
 8000e64:	f007 f948 	bl	80080f8 <iprintf>
    }
    
    // Clean up - flush TX FIFO
    printf("\n5. Cleanup - Flushing TX FIFO:\n\r");
 8000e68:	4822      	ldr	r0, [pc, #136]	@ (8000ef4 <test_buffer_operations+0x1e4>)
 8000e6a:	f007 f945 	bl	80080f8 <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 8000e6e:	f107 0316 	add.w	r3, r7, #22
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc5b 	bl	800072e <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "CLEANUP_FLUSH");
 8000e78:	7dbb      	ldrb	r3, [r7, #22]
 8000e7a:	491f      	ldr	r1, [pc, #124]	@ (8000ef8 <test_buffer_operations+0x1e8>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fed9 	bl	8000c34 <print_cc1201_status>
    
    uint8_t final_tx_count = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	70fb      	strb	r3, [r7, #3]
    CC1201_GetNumTXBytes(&final_tx_count);
 8000e86:	1cfb      	adds	r3, r7, #3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fd1d 	bl	80008c8 <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO count: %d bytes\n\r", final_tx_count);
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	4619      	mov	r1, r3
 8000e92:	481a      	ldr	r0, [pc, #104]	@ (8000efc <test_buffer_operations+0x1ec>)
 8000e94:	f007 f930 	bl	80080f8 <iprintf>
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
 8000e98:	4819      	ldr	r0, [pc, #100]	@ (8000f00 <test_buffer_operations+0x1f0>)
 8000e9a:	f007 f92d 	bl	80080f8 <iprintf>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	08008f2c 	.word	0x08008f2c
 8000eac:	08008f5c 	.word	0x08008f5c
 8000eb0:	08008f80 	.word	0x08008f80
 8000eb4:	08008f8c 	.word	0x08008f8c
 8000eb8:	08008f98 	.word	0x08008f98
 8000ebc:	08008fa4 	.word	0x08008fa4
 8000ec0:	080091b0 	.word	0x080091b0
 8000ec4:	08008fcc 	.word	0x08008fcc
 8000ec8:	08008ff8 	.word	0x08008ff8
 8000ecc:	08009004 	.word	0x08009004
 8000ed0:	08009020 	.word	0x08009020
 8000ed4:	08009044 	.word	0x08009044
 8000ed8:	08009068 	.word	0x08009068
 8000edc:	08009078 	.word	0x08009078
 8000ee0:	080090a8 	.word	0x080090a8
 8000ee4:	080090d8 	.word	0x080090d8
 8000ee8:	080090fc 	.word	0x080090fc
 8000eec:	08009104 	.word	0x08009104
 8000ef0:	0800911c 	.word	0x0800911c
 8000ef4:	08009138 	.word	0x08009138
 8000ef8:	0800915c 	.word	0x0800915c
 8000efc:	0800916c 	.word	0x0800916c
 8000f00:	08009190 	.word	0x08009190

08000f04 <test_state_changes>:

// Test 2: State Change Operations
void test_state_changes(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 8000f0a:	486c      	ldr	r0, [pc, #432]	@ (80010bc <test_state_changes+0x1b8>)
 8000f0c:	f007 f8f4 	bl	80080f8 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	71bb      	strb	r3, [r7, #6]
    uint8_t marc_state = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	717b      	strb	r3, [r7, #5]
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 8000f18:	4869      	ldr	r0, [pc, #420]	@ (80010c0 <test_state_changes+0x1bc>)
 8000f1a:	f007 f8ed 	bl	80080f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000f1e:	1dbb      	adds	r3, r7, #6
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fbea 	bl	80006fa <CC1201_EnterIdleMode>
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    printf("  Enter IDLE: HAL=%d ", status);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4865      	ldr	r0, [pc, #404]	@ (80010c4 <test_state_changes+0x1c0>)
 8000f30:	f007 f8e2 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10d      	bne.n	8000f56 <test_state_changes+0x52>
        print_cc1201_status(status_byte, "IDLE");
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	4962      	ldr	r1, [pc, #392]	@ (80010c8 <test_state_changes+0x1c4>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fe78 	bl	8000c34 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000f44:	1d7b      	adds	r3, r7, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fca2 	bl	8000890 <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	485e      	ldr	r0, [pc, #376]	@ (80010cc <test_state_changes+0x1c8>)
 8000f52:	f007 f8d1 	bl	80080f8 <iprintf>
    }
    HAL_Delay(50);
 8000f56:	2032      	movs	r0, #50	@ 0x32
 8000f58:	f001 f9a0 	bl	800229c <HAL_Delay>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 8000f5c:	485c      	ldr	r0, [pc, #368]	@ (80010d0 <test_state_changes+0x1cc>)
 8000f5e:	f007 f8cb 	bl	80080f8 <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 8000f62:	1dbb      	adds	r3, r7, #6
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbae 	bl	80006c6 <CC1201_EnterRxMode>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
    printf("  Enter RX: HAL=%d ", status);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4858      	ldr	r0, [pc, #352]	@ (80010d4 <test_state_changes+0x1d0>)
 8000f74:	f007 f8c0 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d110      	bne.n	8000fa0 <test_state_changes+0x9c>
        print_cc1201_status(status_byte, "RX");
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	4955      	ldr	r1, [pc, #340]	@ (80010d8 <test_state_changes+0x1d4>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe56 	bl	8000c34 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 8000f88:	2064      	movs	r0, #100	@ 0x64
 8000f8a:	f001 f987 	bl	800229c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8000f8e:	1d7b      	adds	r3, r7, #5
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fc7d 	bl	8000890 <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 8000f96:	797b      	ldrb	r3, [r7, #5]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4850      	ldr	r0, [pc, #320]	@ (80010dc <test_state_changes+0x1d8>)
 8000f9c:	f007 f8ac 	bl	80080f8 <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 8000fa0:	484f      	ldr	r0, [pc, #316]	@ (80010e0 <test_state_changes+0x1dc>)
 8000fa2:	f007 f8a9 	bl	80080f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000fa6:	1dbb      	adds	r3, r7, #6
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fba6 	bl	80006fa <CC1201_EnterIdleMode>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    printf("  RX->IDLE: HAL=%d ", status);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	484b      	ldr	r0, [pc, #300]	@ (80010e4 <test_state_changes+0x1e0>)
 8000fb8:	f007 f89e 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d104      	bne.n	8000fcc <test_state_changes+0xc8>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	4948      	ldr	r1, [pc, #288]	@ (80010e8 <test_state_changes+0x1e4>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe34 	bl	8000c34 <print_cc1201_status>
    }
    HAL_Delay(50);
 8000fcc:	2032      	movs	r0, #50	@ 0x32
 8000fce:	f001 f965 	bl	800229c <HAL_Delay>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 8000fd2:	4846      	ldr	r0, [pc, #280]	@ (80010ec <test_state_changes+0x1e8>)
 8000fd4:	f007 f890 	bl	80080f8 <iprintf>
    status = CC1201_EnterTxMode(&status_byte);
 8000fd8:	1dbb      	adds	r3, r7, #6
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fb80 	bl	80006e0 <CC1201_EnterTxMode>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
    printf("  Enter TX: HAL=%d ", status);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4841      	ldr	r0, [pc, #260]	@ (80010f0 <test_state_changes+0x1ec>)
 8000fea:	f007 f885 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d110      	bne.n	8001016 <test_state_changes+0x112>
        print_cc1201_status(status_byte, "TX");
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	493f      	ldr	r1, [pc, #252]	@ (80010f4 <test_state_changes+0x1f0>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe1b 	bl	8000c34 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 8000ffe:	2032      	movs	r0, #50	@ 0x32
 8001000:	f001 f94c 	bl	800229c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8001004:	1d7b      	adds	r3, r7, #5
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fc42 	bl	8000890 <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 800100c:	797b      	ldrb	r3, [r7, #5]
 800100e:	4619      	mov	r1, r3
 8001010:	4839      	ldr	r0, [pc, #228]	@ (80010f8 <test_state_changes+0x1f4>)
 8001012:	f007 f871 	bl	80080f8 <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 8001016:	4839      	ldr	r0, [pc, #228]	@ (80010fc <test_state_changes+0x1f8>)
 8001018:	f007 f86e 	bl	80080f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 800101c:	1dbb      	adds	r3, r7, #6
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb6b 	bl	80006fa <CC1201_EnterIdleMode>
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
    printf("  TX->IDLE: HAL=%d ", status);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4619      	mov	r1, r3
 800102c:	4834      	ldr	r0, [pc, #208]	@ (8001100 <test_state_changes+0x1fc>)
 800102e:	f007 f863 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d104      	bne.n	8001042 <test_state_changes+0x13e>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	4932      	ldr	r1, [pc, #200]	@ (8001104 <test_state_changes+0x200>)
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fdf9 	bl	8000c34 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 8001042:	4831      	ldr	r0, [pc, #196]	@ (8001108 <test_state_changes+0x204>)
 8001044:	f007 f858 	bl	80080f8 <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 8001048:	1dbb      	adds	r3, r7, #6
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fb2e 	bl	80006ac <CC1201_FastTxOn>
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
    printf("  Fast TX On: HAL=%d ", status);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4619      	mov	r1, r3
 8001058:	482c      	ldr	r0, [pc, #176]	@ (800110c <test_state_changes+0x208>)
 800105a:	f007 f84d 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10d      	bne.n	8001080 <test_state_changes+0x17c>
        print_cc1201_status(status_byte, "FSTXON");
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	492a      	ldr	r1, [pc, #168]	@ (8001110 <test_state_changes+0x20c>)
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fde3 	bl	8000c34 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 800106e:	1d7b      	adds	r3, r7, #5
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fc0d 	bl	8000890 <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	4619      	mov	r1, r3
 800107a:	4826      	ldr	r0, [pc, #152]	@ (8001114 <test_state_changes+0x210>)
 800107c:	f007 f83c 	bl	80080f8 <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 8001080:	4825      	ldr	r0, [pc, #148]	@ (8001118 <test_state_changes+0x214>)
 8001082:	f007 f839 	bl	80080f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8001086:	1dbb      	adds	r3, r7, #6
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fb36 	bl	80006fa <CC1201_EnterIdleMode>
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    printf("  Final IDLE: HAL=%d ", status);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4619      	mov	r1, r3
 8001096:	4821      	ldr	r0, [pc, #132]	@ (800111c <test_state_changes+0x218>)
 8001098:	f007 f82e 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d104      	bne.n	80010ac <test_state_changes+0x1a8>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	491e      	ldr	r1, [pc, #120]	@ (8001120 <test_state_changes+0x21c>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fdc4 	bl	8000c34 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 80010ac:	481d      	ldr	r0, [pc, #116]	@ (8001124 <test_state_changes+0x220>)
 80010ae:	f007 f823 	bl	80080f8 <iprintf>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	080091b8 	.word	0x080091b8
 80010c0:	080091e4 	.word	0x080091e4
 80010c4:	08009200 	.word	0x08009200
 80010c8:	08009218 	.word	0x08009218
 80010cc:	08009220 	.word	0x08009220
 80010d0:	08009238 	.word	0x08009238
 80010d4:	08009250 	.word	0x08009250
 80010d8:	08009264 	.word	0x08009264
 80010dc:	08009268 	.word	0x08009268
 80010e0:	0800928c 	.word	0x0800928c
 80010e4:	080092a8 	.word	0x080092a8
 80010e8:	080092bc 	.word	0x080092bc
 80010ec:	080092c8 	.word	0x080092c8
 80010f0:	080092e0 	.word	0x080092e0
 80010f4:	080092f4 	.word	0x080092f4
 80010f8:	080092f8 	.word	0x080092f8
 80010fc:	08009318 	.word	0x08009318
 8001100:	08009334 	.word	0x08009334
 8001104:	08009348 	.word	0x08009348
 8001108:	08009354 	.word	0x08009354
 800110c:	08009378 	.word	0x08009378
 8001110:	08009390 	.word	0x08009390
 8001114:	08009398 	.word	0x08009398
 8001118:	080093bc 	.word	0x080093bc
 800111c:	080093d8 	.word	0x080093d8
 8001120:	080093f0 	.word	0x080093f0
 8001124:	080093fc 	.word	0x080093fc

08001128 <test_individual_functions>:

// Test 3: Individual Function Tests
void test_individual_functions(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
    printf("\n=== TEST 3: INDIVIDUAL FUNCTION TESTS ===\n\r");
 800112e:	486b      	ldr	r0, [pc, #428]	@ (80012dc <test_individual_functions+0x1b4>)
 8001130:	f006 ffe2 	bl	80080f8 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t data = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	713b      	strb	r3, [r7, #4]
    uint8_t status_byte = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	70fb      	strb	r3, [r7, #3]
    
    // Test CC1201_ReadStatus (using a safe register like IOCFG2)
    printf("1. Testing CC1201_ReadStatus():\n\r");
 800113c:	4868      	ldr	r0, [pc, #416]	@ (80012e0 <test_individual_functions+0x1b8>)
 800113e:	f006 ffdb 	bl	80080f8 <iprintf>
    status = CC1201_ReadStatus(0x01, &data); // IOCFG2 register
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff fb1a 	bl	8000780 <CC1201_ReadStatus>
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
    printf("  Read IOCFG2 (0x01): HAL=%d, Data=0x%02X\n\r", status, data);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	793a      	ldrb	r2, [r7, #4]
 8001154:	4619      	mov	r1, r3
 8001156:	4863      	ldr	r0, [pc, #396]	@ (80012e4 <test_individual_functions+0x1bc>)
 8001158:	f006 ffce 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <test_individual_functions+0x42>
        printf("  ✓ CC1201_ReadStatus() WORKING\n\r");
 8001162:	4861      	ldr	r0, [pc, #388]	@ (80012e8 <test_individual_functions+0x1c0>)
 8001164:	f006 ffc8 	bl	80080f8 <iprintf>
 8001168:	e002      	b.n	8001170 <test_individual_functions+0x48>
    } else {
        printf("  ✗ CC1201_ReadStatus() FAILED\n\r");
 800116a:	4860      	ldr	r0, [pc, #384]	@ (80012ec <test_individual_functions+0x1c4>)
 800116c:	f006 ffc4 	bl	80080f8 <iprintf>
    }
    
    // Test CC1201_WriteRegister and verify with read
    printf("\n2. Testing CC1201_WriteRegister():\n\r");
 8001170:	485f      	ldr	r0, [pc, #380]	@ (80012f0 <test_individual_functions+0x1c8>)
 8001172:	f006 ffc1 	bl	80080f8 <iprintf>
    uint8_t original_value = data; // Store original value
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	71bb      	strb	r3, [r7, #6]
    uint8_t test_value = 0x55; // Test pattern
 800117a:	2355      	movs	r3, #85	@ 0x55
 800117c:	717b      	strb	r3, [r7, #5]
    
    status = CC1201_WriteRegister(0x01, test_value);
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4619      	mov	r1, r3
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fb4a 	bl	800081c <CC1201_WriteRegister>
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
    printf("  Write IOCFG2 (0x55): HAL=%d\n\r", status);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4619      	mov	r1, r3
 8001190:	4858      	ldr	r0, [pc, #352]	@ (80012f4 <test_individual_functions+0x1cc>)
 8001192:	f006 ffb1 	bl	80080f8 <iprintf>
    
    if (status == HAL_OK) {
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d125      	bne.n	80011e8 <test_individual_functions+0xc0>
        // Read back to verify
        status = CC1201_ReadStatus(0x01, &data);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff faed 	bl	8000780 <CC1201_ReadStatus>
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
        printf("  Read back: HAL=%d, Data=0x%02X\n\r", status, data);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	793a      	ldrb	r2, [r7, #4]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4851      	ldr	r0, [pc, #324]	@ (80012f8 <test_individual_functions+0x1d0>)
 80011b2:	f006 ffa1 	bl	80080f8 <iprintf>
        
        if (status == HAL_OK && data == test_value) {
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <test_individual_functions+0xa4>
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	797a      	ldrb	r2, [r7, #5]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d103      	bne.n	80011cc <test_individual_functions+0xa4>
            printf("  ✓ CC1201_WriteRegister() WORKING (Write/Read verified)\n\r");
 80011c4:	484d      	ldr	r0, [pc, #308]	@ (80012fc <test_individual_functions+0x1d4>)
 80011c6:	f006 ff97 	bl	80080f8 <iprintf>
 80011ca:	e002      	b.n	80011d2 <test_individual_functions+0xaa>
        } else {
            printf("  ✗ CC1201_WriteRegister() FAILED (Data mismatch)\n\r");
 80011cc:	484c      	ldr	r0, [pc, #304]	@ (8001300 <test_individual_functions+0x1d8>)
 80011ce:	f006 ff93 	bl	80080f8 <iprintf>
        }
        
        // Restore original value
        CC1201_WriteRegister(0x01, original_value);
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	4619      	mov	r1, r3
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff fb20 	bl	800081c <CC1201_WriteRegister>
        printf("  Restored original value: 0x%02X\n\r", original_value);
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	4619      	mov	r1, r3
 80011e0:	4848      	ldr	r0, [pc, #288]	@ (8001304 <test_individual_functions+0x1dc>)
 80011e2:	f006 ff89 	bl	80080f8 <iprintf>
 80011e6:	e002      	b.n	80011ee <test_individual_functions+0xc6>
    } else {
        printf("  ✗ CC1201_WriteRegister() FAILED\n\r");
 80011e8:	4847      	ldr	r0, [pc, #284]	@ (8001308 <test_individual_functions+0x1e0>)
 80011ea:	f006 ff85 	bl	80080f8 <iprintf>
    }
    
    // Test CC1201_SendStrobe (using NOP)
    printf("\n3. Testing CC1201_SendStrobe():\n\r");
 80011ee:	4847      	ldr	r0, [pc, #284]	@ (800130c <test_individual_functions+0x1e4>)
 80011f0:	f006 ff82 	bl	80080f8 <iprintf>
    status = CC1201_SendStrobe(0x3D, &status_byte); // NOP strobe
 80011f4:	1cfb      	adds	r3, r7, #3
 80011f6:	4619      	mov	r1, r3
 80011f8:	203d      	movs	r0, #61	@ 0x3d
 80011fa:	f7ff fce9 	bl	8000bd0 <CC1201_SendStrobe>
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    printf("  Send NOP strobe: HAL=%d ", status);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4619      	mov	r1, r3
 8001206:	4842      	ldr	r0, [pc, #264]	@ (8001310 <test_individual_functions+0x1e8>)
 8001208:	f006 ff76 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <test_individual_functions+0xfc>
        print_cc1201_status(status_byte, "STROBE_NOP");
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	493f      	ldr	r1, [pc, #252]	@ (8001314 <test_individual_functions+0x1ec>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd0c 	bl	8000c34 <print_cc1201_status>
        printf("  ✓ CC1201_SendStrobe() WORKING\n\r");
 800121c:	483e      	ldr	r0, [pc, #248]	@ (8001318 <test_individual_functions+0x1f0>)
 800121e:	f006 ff6b 	bl	80080f8 <iprintf>
 8001222:	e002      	b.n	800122a <test_individual_functions+0x102>
    } else {
        printf("  ✗ CC1201_SendStrobe() FAILED\n\r");
 8001224:	483d      	ldr	r0, [pc, #244]	@ (800131c <test_individual_functions+0x1f4>)
 8001226:	f006 ff67 	bl	80080f8 <iprintf>
    }
    
    // Test CC1201_ReadMARCState
    printf("\n4. Testing CC1201_ReadMARCState():\n\r");
 800122a:	483d      	ldr	r0, [pc, #244]	@ (8001320 <test_individual_functions+0x1f8>)
 800122c:	f006 ff64 	bl	80080f8 <iprintf>
    uint8_t marc_state = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	70bb      	strb	r3, [r7, #2]
    status = CC1201_ReadMARCState(&marc_state);
 8001234:	1cbb      	adds	r3, r7, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fb2a 	bl	8000890 <CC1201_ReadMARCState>
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
    printf("  Read MARC State: HAL=%d, State=0x%02X\n\r", status, marc_state);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	78ba      	ldrb	r2, [r7, #2]
 8001244:	4619      	mov	r1, r3
 8001246:	4837      	ldr	r0, [pc, #220]	@ (8001324 <test_individual_functions+0x1fc>)
 8001248:	f006 ff56 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <test_individual_functions+0x132>
        printf("  ✓ CC1201_ReadMARCState() WORKING\n\r");
 8001252:	4835      	ldr	r0, [pc, #212]	@ (8001328 <test_individual_functions+0x200>)
 8001254:	f006 ff50 	bl	80080f8 <iprintf>
 8001258:	e002      	b.n	8001260 <test_individual_functions+0x138>
    } else {
        printf("  ✗ CC1201_ReadMARCState() FAILED\n\r");
 800125a:	4834      	ldr	r0, [pc, #208]	@ (800132c <test_individual_functions+0x204>)
 800125c:	f006 ff4c 	bl	80080f8 <iprintf>
    }
    
    // Test CC1201_GetNumRXBytes
    printf("\n5. Testing CC1201_GetNumRXBytes():\n\r");
 8001260:	4833      	ldr	r0, [pc, #204]	@ (8001330 <test_individual_functions+0x208>)
 8001262:	f006 ff49 	bl	80080f8 <iprintf>
    uint8_t rx_bytes = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	707b      	strb	r3, [r7, #1]
    status = CC1201_GetNumRXBytes(&rx_bytes);
 800126a:	1c7b      	adds	r3, r7, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb1d 	bl	80008ac <CC1201_GetNumRXBytes>
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
    printf("  Get RX Bytes: HAL=%d, Count=%d\n\r", status, rx_bytes);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	787a      	ldrb	r2, [r7, #1]
 800127a:	4619      	mov	r1, r3
 800127c:	482d      	ldr	r0, [pc, #180]	@ (8001334 <test_individual_functions+0x20c>)
 800127e:	f006 ff3b 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <test_individual_functions+0x168>
        printf("  ✓ CC1201_GetNumRXBytes() WORKING\n\r");
 8001288:	482b      	ldr	r0, [pc, #172]	@ (8001338 <test_individual_functions+0x210>)
 800128a:	f006 ff35 	bl	80080f8 <iprintf>
 800128e:	e002      	b.n	8001296 <test_individual_functions+0x16e>
    } else {
        printf("  ✗ CC1201_GetNumRXBytes() FAILED\n\r");
 8001290:	482a      	ldr	r0, [pc, #168]	@ (800133c <test_individual_functions+0x214>)
 8001292:	f006 ff31 	bl	80080f8 <iprintf>
    }
    
    // Test CC1201_GetNumTXBytes
    printf("\n6. Testing CC1201_GetNumTXBytes():\n\r");
 8001296:	482a      	ldr	r0, [pc, #168]	@ (8001340 <test_individual_functions+0x218>)
 8001298:	f006 ff2e 	bl	80080f8 <iprintf>
    uint8_t tx_bytes = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	703b      	strb	r3, [r7, #0]
    status = CC1201_GetNumTXBytes(&tx_bytes);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fb10 	bl	80008c8 <CC1201_GetNumTXBytes>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
    printf("  Get TX Bytes: HAL=%d, Count=%d\n\r", status, tx_bytes);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	783a      	ldrb	r2, [r7, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4824      	ldr	r0, [pc, #144]	@ (8001344 <test_individual_functions+0x21c>)
 80012b4:	f006 ff20 	bl	80080f8 <iprintf>
    if (status == HAL_OK) {
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <test_individual_functions+0x19e>
        printf("  ✓ CC1201_GetNumTXBytes() WORKING\n\r");
 80012be:	4822      	ldr	r0, [pc, #136]	@ (8001348 <test_individual_functions+0x220>)
 80012c0:	f006 ff1a 	bl	80080f8 <iprintf>
 80012c4:	e002      	b.n	80012cc <test_individual_functions+0x1a4>
    } else {
        printf("  ✗ CC1201_GetNumTXBytes() FAILED\n\r");
 80012c6:	4821      	ldr	r0, [pc, #132]	@ (800134c <test_individual_functions+0x224>)
 80012c8:	f006 ff16 	bl	80080f8 <iprintf>
    }
    
    printf("=== INDIVIDUAL FUNCTION TEST COMPLETE ===\n\r");
 80012cc:	4820      	ldr	r0, [pc, #128]	@ (8001350 <test_individual_functions+0x228>)
 80012ce:	f006 ff13 	bl	80080f8 <iprintf>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08009424 	.word	0x08009424
 80012e0:	08009454 	.word	0x08009454
 80012e4:	08009478 	.word	0x08009478
 80012e8:	080094a4 	.word	0x080094a4
 80012ec:	080094c8 	.word	0x080094c8
 80012f0:	080094ec 	.word	0x080094ec
 80012f4:	08009514 	.word	0x08009514
 80012f8:	08009534 	.word	0x08009534
 80012fc:	08009558 	.word	0x08009558
 8001300:	08009598 	.word	0x08009598
 8001304:	080095d0 	.word	0x080095d0
 8001308:	080095f4 	.word	0x080095f4
 800130c:	0800961c 	.word	0x0800961c
 8001310:	08009640 	.word	0x08009640
 8001314:	0800965c 	.word	0x0800965c
 8001318:	08009668 	.word	0x08009668
 800131c:	0800968c 	.word	0x0800968c
 8001320:	080096b0 	.word	0x080096b0
 8001324:	080096d8 	.word	0x080096d8
 8001328:	08009704 	.word	0x08009704
 800132c:	0800972c 	.word	0x0800972c
 8001330:	08009754 	.word	0x08009754
 8001334:	0800977c 	.word	0x0800977c
 8001338:	080097a0 	.word	0x080097a0
 800133c:	080097c8 	.word	0x080097c8
 8001340:	080097f0 	.word	0x080097f0
 8001344:	08009818 	.word	0x08009818
 8001348:	0800983c 	.word	0x0800983c
 800134c:	08009864 	.word	0x08009864
 8001350:	0800988c 	.word	0x0800988c

08001354 <run_comprehensive_cc1201_tests>:

// Main test runner
void run_comprehensive_cc1201_tests(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
    printf("\n STARTING COMPREHENSIVE CC1201 TEST SUITE \n\r");
 800135a:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <run_comprehensive_cc1201_tests+0x60>)
 800135c:	f006 fecc 	bl	80080f8 <iprintf>
    printf("================================================\n\r");
 8001360:	4815      	ldr	r0, [pc, #84]	@ (80013b8 <run_comprehensive_cc1201_tests+0x64>)
 8001362:	f006 fec9 	bl	80080f8 <iprintf>
    
    // Run all tests
    test_buffer_operations();
 8001366:	f7ff fcd3 	bl	8000d10 <test_buffer_operations>
    HAL_Delay(500);
 800136a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800136e:	f000 ff95 	bl	800229c <HAL_Delay>
    
    test_state_changes();
 8001372:	f7ff fdc7 	bl	8000f04 <test_state_changes>
    HAL_Delay(500);
 8001376:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800137a:	f000 ff8f 	bl	800229c <HAL_Delay>
    
    test_individual_functions();
 800137e:	f7ff fed3 	bl	8001128 <test_individual_functions>
    HAL_Delay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001386:	f000 ff89 	bl	800229c <HAL_Delay>
    
    printf("\n COMPREHENSIVE TEST SUITE COMPLETE! \n\r");
 800138a:	480c      	ldr	r0, [pc, #48]	@ (80013bc <run_comprehensive_cc1201_tests+0x68>)
 800138c:	f006 feb4 	bl	80080f8 <iprintf>
    printf("=============================================\n\r");
 8001390:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <run_comprehensive_cc1201_tests+0x6c>)
 8001392:	f006 feb1 	bl	80080f8 <iprintf>
    
    // Final status check
    uint8_t final_status = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
    CC1201_Nop(&final_status);
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f9d3 	bl	8000748 <CC1201_Nop>
    print_cc1201_status(final_status, "FINAL_STATUS");
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4907      	ldr	r1, [pc, #28]	@ (80013c4 <run_comprehensive_cc1201_tests+0x70>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fc44 	bl	8000c34 <print_cc1201_status>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	080098b8 	.word	0x080098b8
 80013b8:	080098e8 	.word	0x080098e8
 80013bc:	0800991c 	.word	0x0800991c
 80013c0:	08009944 	.word	0x08009944
 80013c4:	08009974 	.word	0x08009974

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80013ce:	f000 f9dd 	bl	800178c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fed1 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f86d 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 f92d 	bl	8001638 <MX_GPIO_Init>
  MX_SPI4_Init();
 80013de:	f000 f8d5 	bl	800158c <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 fc72 	bl	8001ccc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 fc6f 	bl	8001ccc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80013ee:	2002      	movs	r0, #2
 80013f0:	f000 fc6c 	bl	8001ccc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80013f4:	2101      	movs	r1, #1
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 fd5c 	bl	8001eb4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80013fc:	4b27      	ldr	r3, [pc, #156]	@ (800149c <main+0xd4>)
 80013fe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001402:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001404:	4b25      	ldr	r3, [pc, #148]	@ (800149c <main+0xd4>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <main+0xd4>)
 800140c:	2200      	movs	r2, #0
 800140e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <main+0xd4>)
 8001412:	2200      	movs	r2, #0
 8001414:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <main+0xd4>)
 8001418:	2200      	movs	r2, #0
 800141a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800141c:	491f      	ldr	r1, [pc, #124]	@ (800149c <main+0xd4>)
 800141e:	2000      	movs	r0, #0
 8001420:	f000 fdcc 	bl	8001fbc <BSP_COM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <main+0x66>
  {
    Error_Handler();
 800142a:	f000 f9ef 	bl	800180c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800142e:	481c      	ldr	r0, [pc, #112]	@ (80014a0 <main+0xd8>)
 8001430:	f006 fe62 	bl	80080f8 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fcbf 	bl	8001db8 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 800143a:	481a      	ldr	r0, [pc, #104]	@ (80014a4 <main+0xdc>)
 800143c:	f006 fe5c 	bl	80080f8 <iprintf>

  uint8_t test_status = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f97e 	bl	8000748 <CC1201_Nop>
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	79ba      	ldrb	r2, [r7, #6]
 8001454:	4619      	mov	r1, r3
 8001456:	4814      	ldr	r0, [pc, #80]	@ (80014a8 <main+0xe0>)
 8001458:	f006 fe4e 	bl	80080f8 <iprintf>
  
  if (nop_result == HAL_OK) {
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <main+0xba>
      printf("Basic CC1201 communication working!\n\r");
 8001462:	4812      	ldr	r0, [pc, #72]	@ (80014ac <main+0xe4>)
 8001464:	f006 fe48 	bl	80080f8 <iprintf>
      BSP_LED_Off(LED_RED);
 8001468:	2002      	movs	r0, #2
 800146a:	f000 fccf 	bl	8001e0c <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 800146e:	2000      	movs	r0, #0
 8001470:	f000 fca2 	bl	8001db8 <BSP_LED_On>
      
      // Run comprehensive tests
      HAL_Delay(1000); // Give user time to see initial results
 8001474:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001478:	f000 ff10 	bl	800229c <HAL_Delay>
      run_comprehensive_cc1201_tests();
 800147c:	f7ff ff6a 	bl	8001354 <run_comprehensive_cc1201_tests>
 8001480:	e009      	b.n	8001496 <main+0xce>
  } else {
      printf("CC1201 communication failed!\n\r");
 8001482:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <main+0xe8>)
 8001484:	f006 fe38 	bl	80080f8 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fcbf 	bl	8001e0c <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 800148e:	2002      	movs	r0, #2
 8001490:	f000 fc92 	bl	8001db8 <BSP_LED_On>
  }

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <main+0xce>
 800149a:	bf00      	nop
 800149c:	240000a4 	.word	0x240000a4
 80014a0:	08009984 	.word	0x08009984
 80014a4:	080099a0 	.word	0x080099a0
 80014a8:	080099d0 	.word	0x080099d0
 80014ac:	080099fc 	.word	0x080099fc
 80014b0:	08009a24 	.word	0x08009a24

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09c      	sub	sp, #112	@ 0x70
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014be:	224c      	movs	r2, #76	@ 0x4c
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 fe6d 	bl	80081a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2220      	movs	r2, #32
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f006 fe67 	bl	80081a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014d4:	2002      	movs	r0, #2
 80014d6:	f001 fd41 	bl	8002f5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <SystemClock_Config+0xd0>)
 80014e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e2:	4a28      	ldr	r2, [pc, #160]	@ (8001584 <SystemClock_Config+0xd0>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <SystemClock_Config+0xd0>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <SystemClock_Config+0xd4>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014fc:	4a22      	ldr	r2, [pc, #136]	@ (8001588 <SystemClock_Config+0xd4>)
 80014fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <SystemClock_Config+0xd4>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001510:	bf00      	nop
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <SystemClock_Config+0xd4>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800151a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800151e:	d1f8      	bne.n	8001512 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001524:	2301      	movs	r3, #1
 8001526:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2340      	movs	r3, #64	@ 0x40
 800152a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fd4b 	bl	8002fd0 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001540:	f000 f964 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	233f      	movs	r3, #63	@ 0x3f
 8001546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800155c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2101      	movs	r1, #1
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f98a 	bl	8003884 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001576:	f000 f949 	bl	800180c <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3770      	adds	r7, #112	@ 0x70
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	58000400 	.word	0x58000400
 8001588:	58024800 	.word	0x58024800

0800158c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001590:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <MX_SPI4_Init+0xa4>)
 8001592:	4a28      	ldr	r2, [pc, #160]	@ (8001634 <MX_SPI4_Init+0xa8>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <MX_SPI4_Init+0xa4>)
 8001598:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800159c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80015a4:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015a6:	2203      	movs	r2, #3
 80015a8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80015bc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d0:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_SPI4_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_SPI4_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_SPI4_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_SPI4_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_SPI4_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_SPI4_Init+0xa4>)
 800161c:	f004 faea 	bl	8005bf4 <HAL_SPI_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001626:	f000 f8f1 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	240000b8 	.word	0x240000b8
 8001634:	40013400 	.word	0x40013400

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <MX_GPIO_Init+0xd0>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001654:	4a2c      	ldr	r2, [pc, #176]	@ (8001708 <MX_GPIO_Init+0xd0>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <MX_GPIO_Init+0xd0>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166c:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <MX_GPIO_Init+0xd0>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <MX_GPIO_Init+0xd0>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <MX_GPIO_Init+0xd0>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <MX_GPIO_Init+0xd0>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <MX_GPIO_Init+0xd0>)
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_GPIO_Init+0xd0>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_GPIO_Init+0xd0>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ae:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <MX_GPIO_Init+0xd0>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_GPIO_Init+0xd0>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <MX_GPIO_Init+0xd0>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <MX_GPIO_Init+0xd0>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <MX_GPIO_Init+0xd0>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016e4:	2320      	movs	r3, #32
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <MX_GPIO_Init+0xd4>)
 80016fa:	f001 fa31 	bl	8002b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	58024400 	.word	0x58024400
 800170c:	58020c00 	.word	0x58020c00

08001710 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	2b20      	cmp	r3, #32
 800171e:	d129      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 8001720:	4816      	ldr	r0, [pc, #88]	@ (800177c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001722:	f006 fce9 	bl	80080f8 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 800172a:	f107 030f 	add.w	r3, r7, #15
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f8ae 	bl	8000890 <CC1201_ReadMARCState>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d104      	bne.n	8001744 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	4619      	mov	r1, r3
 800173e:	4810      	ldr	r0, [pc, #64]	@ (8001780 <HAL_GPIO_EXTI_Callback+0x70>)
 8001740:	f006 fcda 	bl	80080f8 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 8001748:	f107 030e 	add.w	r3, r7, #14
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f8ad 	bl	80008ac <CC1201_GetNumRXBytes>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10a      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	4619      	mov	r1, r3
 800175c:	4809      	ldr	r0, [pc, #36]	@ (8001784 <HAL_GPIO_EXTI_Callback+0x74>)
 800175e:	f006 fccb 	bl	80080f8 <iprintf>
            if (rx_bytes > 0) {
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 8001768:	4807      	ldr	r0, [pc, #28]	@ (8001788 <HAL_GPIO_EXTI_Callback+0x78>)
 800176a:	f006 fcc5 	bl	80080f8 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 800176e:	2000      	movs	r0, #0
 8001770:	f000 fb76 	bl	8001e60 <BSP_LED_Toggle>
    }
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	08009a44 	.word	0x08009a44
 8001780:	08009a64 	.word	0x08009a64
 8001784:	08009a8c 	.word	0x08009a8c
 8001788:	08009aa8 	.word	0x08009aa8

0800178c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001792:	463b      	mov	r3, r7
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800179e:	f000 febd 	bl	800251c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80017ae:	231f      	movs	r3, #31
 80017b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80017b2:	2387      	movs	r3, #135	@ 0x87
 80017b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017ba:	2300      	movs	r3, #0
 80017bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017ce:	463b      	mov	r3, r7
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fedb 	bl	800258c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017d6:	2004      	movs	r0, #4
 80017d8:	f000 feb8 	bl	800254c <HAL_MPU_Enable>

}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <BSP_PB_Callback+0x24>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	240000b4 	.word	0x240000b4

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_MspInit+0x30>)
 8001820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001824:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_MspInit+0x30>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_MspInit+0x30>)
 8001830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	58024400 	.word	0x58024400

0800184c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0ba      	sub	sp, #232	@ 0xe8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	22c0      	movs	r2, #192	@ 0xc0
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f006 fc98 	bl	80081a2 <memset>
  if(hspi->Instance==SPI4)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a2a      	ldr	r2, [pc, #168]	@ (8001920 <HAL_SPI_MspInit+0xd4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d14d      	bne.n	8001918 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800187c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001888:	2300      	movs	r3, #0
 800188a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fb83 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800189c:	f7ff ffb6 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018a0:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_SPI_MspInit+0xd8>)
 80018a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001924 <HAL_SPI_MspInit+0xd8>)
 80018a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <HAL_SPI_MspInit+0xd8>)
 80018b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018be:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <HAL_SPI_MspInit+0xd8>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c4:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_SPI_MspInit+0xd8>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_SPI_MspInit+0xd8>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80018dc:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80018e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018f6:	2305      	movs	r3, #5
 80018f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001900:	4619      	mov	r1, r3
 8001902:	4809      	ldr	r0, [pc, #36]	@ (8001928 <HAL_SPI_MspInit+0xdc>)
 8001904:	f001 f92c 	bl	8002b60 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2054      	movs	r0, #84	@ 0x54
 800190e:	f000 fdd0 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001912:	2054      	movs	r0, #84	@ 0x54
 8001914:	f000 fde7 	bl	80024e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001918:	bf00      	nop
 800191a:	37e8      	adds	r7, #232	@ 0xe8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40013400 	.word	0x40013400
 8001924:	58024400 	.word	0x58024400
 8001928:	58021000 	.word	0x58021000

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <NMI_Handler+0x4>

08001934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <MemManage_Handler+0x4>

08001944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <UsageFault_Handler+0x4>

08001954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001982:	f000 fc6b 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}

0800198a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800198e:	2020      	movs	r0, #32
 8001990:	f001 fac9 	bl	8002f26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800199c:	2000      	movs	r0, #0
 800199e:	f000 fafb 	bl	8001f98 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <SPI4_IRQHandler+0x10>)
 80019ae:	f004 ff6d 	bl	800688c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	240000b8 	.word	0x240000b8

080019bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00a      	b.n	80019e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	4601      	mov	r1, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	60ba      	str	r2, [r7, #8]
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf0      	blt.n	80019ce <_read+0x12>
  }

  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e009      	b.n	8001a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fb35 	bl	8002080 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf1      	blt.n	8001a08 <_write+0x12>
  }
  return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_close>:

int _close(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a56:	605a      	str	r2, [r3, #4]
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_isatty>:

int _isatty(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f006 fbba 	bl	8008240 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	24080000 	.word	0x24080000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	24000140 	.word	0x24000140
 8001b00:	24000338 	.word	0x24000338

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b08:	4b43      	ldr	r3, [pc, #268]	@ (8001c18 <SystemInit+0x114>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0e:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <SystemInit+0x114>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b18:	4b40      	ldr	r3, [pc, #256]	@ (8001c1c <SystemInit+0x118>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d807      	bhi.n	8001b34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b24:	4b3d      	ldr	r3, [pc, #244]	@ (8001c1c <SystemInit+0x118>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 030f 	bic.w	r3, r3, #15
 8001b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c1c <SystemInit+0x118>)
 8001b2e:	f043 0307 	orr.w	r3, r3, #7
 8001b32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b34:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <SystemInit+0x11c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a39      	ldr	r2, [pc, #228]	@ (8001c20 <SystemInit+0x11c>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b40:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <SystemInit+0x11c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b46:	4b36      	ldr	r3, [pc, #216]	@ (8001c20 <SystemInit+0x11c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4935      	ldr	r1, [pc, #212]	@ (8001c20 <SystemInit+0x11c>)
 8001b4c:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <SystemInit+0x120>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b52:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <SystemInit+0x118>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <SystemInit+0x118>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 030f 	bic.w	r3, r3, #15
 8001b66:	4a2d      	ldr	r2, [pc, #180]	@ (8001c1c <SystemInit+0x118>)
 8001b68:	f043 0307 	orr.w	r3, r3, #7
 8001b6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <SystemInit+0x11c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b74:	4b2a      	ldr	r3, [pc, #168]	@ (8001c20 <SystemInit+0x11c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b7a:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <SystemInit+0x11c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b80:	4b27      	ldr	r3, [pc, #156]	@ (8001c20 <SystemInit+0x11c>)
 8001b82:	4a29      	ldr	r2, [pc, #164]	@ (8001c28 <SystemInit+0x124>)
 8001b84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b86:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <SystemInit+0x11c>)
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <SystemInit+0x128>)
 8001b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b8c:	4b24      	ldr	r3, [pc, #144]	@ (8001c20 <SystemInit+0x11c>)
 8001b8e:	4a28      	ldr	r2, [pc, #160]	@ (8001c30 <SystemInit+0x12c>)
 8001b90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b92:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <SystemInit+0x11c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b98:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <SystemInit+0x11c>)
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <SystemInit+0x12c>)
 8001b9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <SystemInit+0x11c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <SystemInit+0x11c>)
 8001ba6:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <SystemInit+0x12c>)
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <SystemInit+0x11c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <SystemInit+0x11c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c20 <SystemInit+0x11c>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <SystemInit+0x11c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <SystemInit+0x130>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <SystemInit+0x134>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bce:	d202      	bcs.n	8001bd6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <SystemInit+0x138>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <SystemInit+0x11c>)
 8001bd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d113      	bne.n	8001c0c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <SystemInit+0x11c>)
 8001be6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bea:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <SystemInit+0x11c>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bf0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <SystemInit+0x13c>)
 8001bf6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <SystemInit+0x11c>)
 8001bfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c02:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <SystemInit+0x11c>)
 8001c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c08:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	52002000 	.word	0x52002000
 8001c20:	58024400 	.word	0x58024400
 8001c24:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c28:	02020200 	.word	0x02020200
 8001c2c:	01ff0000 	.word	0x01ff0000
 8001c30:	01010280 	.word	0x01010280
 8001c34:	5c001000 	.word	0x5c001000
 8001c38:	ffff0000 	.word	0xffff0000
 8001c3c:	51008108 	.word	0x51008108
 8001c40:	52004000 	.word	0x52004000

08001c44 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <ExitRun0Mode+0x2c>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <ExitRun0Mode+0x2c>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c54:	bf00      	nop
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <ExitRun0Mode+0x2c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f9      	beq.n	8001c56 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	58024800 	.word	0x58024800

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001cb0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001c78:	f7ff ffe4 	bl	8001c44 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c7c:	f7ff ff42 	bl	8001b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f006 fad1 	bl	800824c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff fb8d 	bl	80013c8 <main>
  bx  lr
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cb8:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001cbc:	08009b3c 	.word	0x08009b3c
  ldr r2, =_sbss
 8001cc0:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001cc4:	24000334 	.word	0x24000334

08001cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC3_IRQHandler>
	...

08001ccc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	@ 0x30
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <BSP_LED_Init+0x28>
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d006      	beq.n	8001cf4 <BSP_LED_Init+0x28>
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d003      	beq.n	8001cf4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cec:	f06f 0301 	mvn.w	r3, #1
 8001cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cf2:	e055      	b.n	8001da0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10f      	bne.n	8001d1a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d00:	4a2a      	ldr	r2, [pc, #168]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d02:	f043 0302 	orr.w	r3, r3, #2
 8001d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d0a:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	e021      	b.n	8001d5e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d10f      	bne.n	8001d40 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d26:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d28:	f043 0310 	orr.w	r3, r3, #16
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d30:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	e00e      	b.n	8001d5e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001d40:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d46:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d50:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <BSP_LED_Init+0xe0>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4a13      	ldr	r2, [pc, #76]	@ (8001db0 <BSP_LED_Init+0xe4>)
 8001d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d66:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <BSP_LED_Init+0xe8>)
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	f107 0218 	add.w	r2, r7, #24
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 feec 	bl	8002b60 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <BSP_LED_Init+0xe8>)
 8001d8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4a07      	ldr	r2, [pc, #28]	@ (8001db0 <BSP_LED_Init+0xe4>)
 8001d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f001 f890 	bl	8002ec0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3730      	adds	r7, #48	@ 0x30
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	58024400 	.word	0x58024400
 8001db0:	08009ad4 	.word	0x08009ad4
 8001db4:	2400000c 	.word	0x2400000c

08001db8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <BSP_LED_On+0x28>
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d006      	beq.n	8001de0 <BSP_LED_On+0x28>
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d003      	beq.n	8001de0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001dd8:	f06f 0301 	mvn.w	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e00b      	b.n	8001df8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <BSP_LED_On+0x4c>)
 8001de4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4a07      	ldr	r2, [pc, #28]	@ (8001e08 <BSP_LED_On+0x50>)
 8001dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	f001 f864 	bl	8002ec0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001df8:	68fb      	ldr	r3, [r7, #12]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2400000c 	.word	0x2400000c
 8001e08:	08009ad4 	.word	0x08009ad4

08001e0c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <BSP_LED_Off+0x28>
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d006      	beq.n	8001e34 <BSP_LED_Off+0x28>
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d003      	beq.n	8001e34 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e2c:	f06f 0301 	mvn.w	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e00b      	b.n	8001e4c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4a08      	ldr	r2, [pc, #32]	@ (8001e58 <BSP_LED_Off+0x4c>)
 8001e38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4a07      	ldr	r2, [pc, #28]	@ (8001e5c <BSP_LED_Off+0x50>)
 8001e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	f001 f83a 	bl	8002ec0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2400000c 	.word	0x2400000c
 8001e5c:	08009ad4 	.word	0x08009ad4

08001e60 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <BSP_LED_Toggle+0x28>
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d006      	beq.n	8001e88 <BSP_LED_Toggle+0x28>
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d003      	beq.n	8001e88 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e80:	f06f 0301 	mvn.w	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	e00b      	b.n	8001ea0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	4a08      	ldr	r2, [pc, #32]	@ (8001eac <BSP_LED_Toggle+0x4c>)
 8001e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4907      	ldr	r1, [pc, #28]	@ (8001eb0 <BSP_LED_Toggle+0x50>)
 8001e94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f001 f829 	bl	8002ef2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2400000c 	.word	0x2400000c
 8001eb0:	08009ad4 	.word	0x08009ad4

08001eb4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <BSP_PB_Init+0xcc>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	4a2d      	ldr	r2, [pc, #180]	@ (8001f80 <BSP_PB_Init+0xcc>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f80 <BSP_PB_Init+0xcc>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001ee2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001ef0:	79bb      	ldrb	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <BSP_PB_Init+0xd0>)
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	f107 020c 	add.w	r2, r7, #12
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fe29 	bl	8002b60 <HAL_GPIO_Init>
 8001f0e:	e031      	b.n	8001f74 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001f10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f14:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <BSP_PB_Init+0xd0>)
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	f107 020c 	add.w	r2, r7, #12
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fe1b 	bl	8002b60 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4a16      	ldr	r2, [pc, #88]	@ (8001f88 <BSP_PB_Init+0xd4>)
 8001f30:	441a      	add	r2, r3
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	4915      	ldr	r1, [pc, #84]	@ (8001f8c <BSP_PB_Init+0xd8>)
 8001f36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	f000 fdca 	bl	8002ad6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <BSP_PB_Init+0xd4>)
 8001f48:	1898      	adds	r0, r3, r2
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <BSP_PB_Init+0xdc>)
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	461a      	mov	r2, r3
 8001f54:	2100      	movs	r1, #0
 8001f56:	f000 fd9f 	bl	8002a98 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001f5a:	2028      	movs	r0, #40	@ 0x28
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <BSP_PB_Init+0xe0>)
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	2200      	movs	r2, #0
 8001f66:	4619      	mov	r1, r3
 8001f68:	f000 faa3 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f6c:	2328      	movs	r3, #40	@ 0x28
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fab9 	bl	80024e6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	58024400 	.word	0x58024400
 8001f84:	24000018 	.word	0x24000018
 8001f88:	24000144 	.word	0x24000144
 8001f8c:	08009adc 	.word	0x08009adc
 8001f90:	2400001c 	.word	0x2400001c
 8001f94:	24000020 	.word	0x24000020

08001f98 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <BSP_PB_IRQHandler+0x20>)
 8001fa8:	4413      	add	r3, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fda8 	bl	8002b00 <HAL_EXTI_IRQHandler>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	24000144 	.word	0x24000144

08001fbc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001fd2:	f06f 0301 	mvn.w	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e018      	b.n	800200c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	2294      	movs	r2, #148	@ 0x94
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <BSP_COM_Init+0x5c>)
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f86e 	bl	80020c8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	2294      	movs	r2, #148	@ 0x94
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <BSP_COM_Init+0x5c>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	6839      	ldr	r1, [r7, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f80e 	bl	800201c <MX_USART3_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002006:	f06f 0303 	mvn.w	r3, #3
 800200a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2400014c 	.word	0x2400014c

0800201c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_USART3_Init+0x60>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	220c      	movs	r2, #12
 800203a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	895b      	ldrh	r3, [r3, #10]
 8002040:	461a      	mov	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	891b      	ldrh	r3, [r3, #8]
 8002052:	461a      	mov	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	899b      	ldrh	r3, [r3, #12]
 800205c:	461a      	mov	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002068:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f004 ff11 	bl	8006e92 <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	24000008 	.word	0x24000008

08002080 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <__io_putchar+0x30>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	2394      	movs	r3, #148	@ 0x94
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	4a07      	ldr	r2, [pc, #28]	@ (80020b4 <__io_putchar+0x34>)
 8002096:	1898      	adds	r0, r3, r2
 8002098:	1d39      	adds	r1, r7, #4
 800209a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209e:	2201      	movs	r2, #1
 80020a0:	f004 ff51 	bl	8006f46 <HAL_UART_Transmit>
  return ch;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	240001e0 	.word	0x240001e0
 80020b4:	2400014c 	.word	0x2400014c

080020b8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fb91 	bl	80017e4 <BSP_PB_Callback>
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <COM1_MspInit+0xa8>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d6:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <COM1_MspInit+0xa8>)
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e0:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <COM1_MspInit+0xa8>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <COM1_MspInit+0xa8>)
 80020f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002170 <COM1_MspInit+0xa8>)
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <COM1_MspInit+0xa8>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <COM1_MspInit+0xa8>)
 800210e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002112:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <COM1_MspInit+0xa8>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <COM1_MspInit+0xa8>)
 800211e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800212a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800212e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002134:	2302      	movs	r3, #2
 8002136:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002138:	2301      	movs	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800213c:	2307      	movs	r3, #7
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	480b      	ldr	r0, [pc, #44]	@ (8002174 <COM1_MspInit+0xac>)
 8002148:	f000 fd0a 	bl	8002b60 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800214c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002150:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002156:	2307      	movs	r3, #7
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	4804      	ldr	r0, [pc, #16]	@ (8002174 <COM1_MspInit+0xac>)
 8002162:	f000 fcfd 	bl	8002b60 <HAL_GPIO_Init>
}
 8002166:	bf00      	nop
 8002168:	3728      	adds	r7, #40	@ 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	58024400 	.word	0x58024400
 8002174:	58020c00 	.word	0x58020c00

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217e:	2003      	movs	r0, #3
 8002180:	f000 f98c 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002184:	f001 fd34 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <HAL_Init+0x68>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	4913      	ldr	r1, [pc, #76]	@ (80021e4 <HAL_Init+0x6c>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021a2:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <HAL_Init+0x68>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a0e      	ldr	r2, [pc, #56]	@ (80021e4 <HAL_Init+0x6c>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	4a0b      	ldr	r2, [pc, #44]	@ (80021e8 <HAL_Init+0x70>)
 80021ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021bc:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <HAL_Init+0x74>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 f814 	bl	80021f0 <HAL_InitTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e002      	b.n	80021d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021d2:	f7ff fb21 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	58024400 	.word	0x58024400
 80021e4:	08009ac4 	.word	0x08009ac4
 80021e8:	24000004 	.word	0x24000004
 80021ec:	24000000 	.word	0x24000000

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021f8:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <HAL_InitTick+0x60>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e021      	b.n	8002248 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002204:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <HAL_InitTick+0x64>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_InitTick+0x60>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f971 	bl	8002502 <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 f93b 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	@ (8002258 <HAL_InitTick+0x68>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	24000028 	.word	0x24000028
 8002254:	24000000 	.word	0x24000000
 8002258:	24000024 	.word	0x24000024

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	24000028 	.word	0x24000028
 8002280:	240001e4 	.word	0x240001e4

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	240001e4 	.word	0x240001e4

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	24000028 	.word	0x24000028

080022e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <HAL_GetREVID+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0c1b      	lsrs	r3, r3, #16
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	5c001000 	.word	0x5c001000

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <__NVIC_SetPriorityGrouping+0x40>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	4313      	orrs	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <__NVIC_SetPriorityGrouping+0x40>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00
 8002340:	05fa0000 	.word	0x05fa0000

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	@ (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	@ (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	@ (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff40 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff90 	bl	80023f0 <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5f 	bl	800239c <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff33 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa4 	bl	8002458 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002520:	f3bf 8f5f 	dmb	sy
}
 8002524:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002526:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <HAL_MPU_Disable+0x28>)
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <HAL_MPU_Disable+0x28>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002530:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_MPU_Disable+0x2c>)
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	e000ed90 	.word	0xe000ed90

0800254c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002554:	4a0b      	ldr	r2, [pc, #44]	@ (8002584 <HAL_MPU_Enable+0x38>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_MPU_Enable+0x3c>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	4a09      	ldr	r2, [pc, #36]	@ (8002588 <HAL_MPU_Enable+0x3c>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800256a:	f3bf 8f4f 	dsb	sy
}
 800256e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002570:	f3bf 8f6f 	isb	sy
}
 8002574:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed90 	.word	0xe000ed90
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	785a      	ldrb	r2, [r3, #1]
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_MPU_ConfigRegion+0x7c>)
 800259a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800259c:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <HAL_MPU_ConfigRegion+0x7c>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4a19      	ldr	r2, [pc, #100]	@ (8002608 <HAL_MPU_ConfigRegion+0x7c>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025a8:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_MPU_ConfigRegion+0x7c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7b1b      	ldrb	r3, [r3, #12]
 80025b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7adb      	ldrb	r3, [r3, #11]
 80025ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7a9b      	ldrb	r3, [r3, #10]
 80025c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7b5b      	ldrb	r3, [r3, #13]
 80025ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7b9b      	ldrb	r3, [r3, #14]
 80025d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7bdb      	ldrb	r3, [r3, #15]
 80025da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7a5b      	ldrb	r3, [r3, #9]
 80025e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7a1b      	ldrb	r3, [r3, #8]
 80025ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f4:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f8:	6113      	str	r3, [r2, #16]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed90 	.word	0xe000ed90

0800260c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e237      	b.n	8002a8e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d004      	beq.n	8002634 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2280      	movs	r2, #128	@ 0x80
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e22c      	b.n	8002a8e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5c      	ldr	r2, [pc, #368]	@ (80027ac <HAL_DMA_Abort_IT+0x1a0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d04a      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a5b      	ldr	r2, [pc, #364]	@ (80027b0 <HAL_DMA_Abort_IT+0x1a4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d045      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a59      	ldr	r2, [pc, #356]	@ (80027b4 <HAL_DMA_Abort_IT+0x1a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d040      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a58      	ldr	r2, [pc, #352]	@ (80027b8 <HAL_DMA_Abort_IT+0x1ac>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d03b      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a56      	ldr	r2, [pc, #344]	@ (80027bc <HAL_DMA_Abort_IT+0x1b0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d036      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a55      	ldr	r2, [pc, #340]	@ (80027c0 <HAL_DMA_Abort_IT+0x1b4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d031      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a53      	ldr	r2, [pc, #332]	@ (80027c4 <HAL_DMA_Abort_IT+0x1b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d02c      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a52      	ldr	r2, [pc, #328]	@ (80027c8 <HAL_DMA_Abort_IT+0x1bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d027      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a50      	ldr	r2, [pc, #320]	@ (80027cc <HAL_DMA_Abort_IT+0x1c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d022      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a4f      	ldr	r2, [pc, #316]	@ (80027d0 <HAL_DMA_Abort_IT+0x1c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d01d      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a4d      	ldr	r2, [pc, #308]	@ (80027d4 <HAL_DMA_Abort_IT+0x1c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d018      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a4c      	ldr	r2, [pc, #304]	@ (80027d8 <HAL_DMA_Abort_IT+0x1cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	@ (80027dc <HAL_DMA_Abort_IT+0x1d0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00e      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a49      	ldr	r2, [pc, #292]	@ (80027e0 <HAL_DMA_Abort_IT+0x1d4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a47      	ldr	r2, [pc, #284]	@ (80027e4 <HAL_DMA_Abort_IT+0x1d8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xc8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a46      	ldr	r2, [pc, #280]	@ (80027e8 <HAL_DMA_Abort_IT+0x1dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_DMA_Abort_IT+0xcc>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_DMA_Abort_IT+0xce>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8086 	beq.w	80027ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2204      	movs	r2, #4
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2f      	ldr	r2, [pc, #188]	@ (80027ac <HAL_DMA_Abort_IT+0x1a0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04a      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2e      	ldr	r2, [pc, #184]	@ (80027b0 <HAL_DMA_Abort_IT+0x1a4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d045      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2c      	ldr	r2, [pc, #176]	@ (80027b4 <HAL_DMA_Abort_IT+0x1a8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d040      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2b      	ldr	r2, [pc, #172]	@ (80027b8 <HAL_DMA_Abort_IT+0x1ac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d03b      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a29      	ldr	r2, [pc, #164]	@ (80027bc <HAL_DMA_Abort_IT+0x1b0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d036      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a28      	ldr	r2, [pc, #160]	@ (80027c0 <HAL_DMA_Abort_IT+0x1b4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d031      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a26      	ldr	r2, [pc, #152]	@ (80027c4 <HAL_DMA_Abort_IT+0x1b8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02c      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a25      	ldr	r2, [pc, #148]	@ (80027c8 <HAL_DMA_Abort_IT+0x1bc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d027      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a23      	ldr	r2, [pc, #140]	@ (80027cc <HAL_DMA_Abort_IT+0x1c0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d022      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_DMA_Abort_IT+0x1c4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d01d      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a20      	ldr	r2, [pc, #128]	@ (80027d4 <HAL_DMA_Abort_IT+0x1c8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d018      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1f      	ldr	r2, [pc, #124]	@ (80027d8 <HAL_DMA_Abort_IT+0x1cc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d013      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <HAL_DMA_Abort_IT+0x1d0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00e      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1c      	ldr	r2, [pc, #112]	@ (80027e0 <HAL_DMA_Abort_IT+0x1d4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d009      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1a      	ldr	r2, [pc, #104]	@ (80027e4 <HAL_DMA_Abort_IT+0x1d8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_DMA_Abort_IT+0x17c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a19      	ldr	r2, [pc, #100]	@ (80027e8 <HAL_DMA_Abort_IT+0x1dc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d108      	bne.n	800279a <HAL_DMA_Abort_IT+0x18e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e178      	b.n	8002a8c <HAL_DMA_Abort_IT+0x480>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e16f      	b.n	8002a8c <HAL_DMA_Abort_IT+0x480>
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020e 	bic.w	r2, r2, #14
 80027fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a6c      	ldr	r2, [pc, #432]	@ (80029b4 <HAL_DMA_Abort_IT+0x3a8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6b      	ldr	r2, [pc, #428]	@ (80029b8 <HAL_DMA_Abort_IT+0x3ac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a69      	ldr	r2, [pc, #420]	@ (80029bc <HAL_DMA_Abort_IT+0x3b0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a68      	ldr	r2, [pc, #416]	@ (80029c0 <HAL_DMA_Abort_IT+0x3b4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a66      	ldr	r2, [pc, #408]	@ (80029c4 <HAL_DMA_Abort_IT+0x3b8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a65      	ldr	r2, [pc, #404]	@ (80029c8 <HAL_DMA_Abort_IT+0x3bc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a63      	ldr	r2, [pc, #396]	@ (80029cc <HAL_DMA_Abort_IT+0x3c0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a62      	ldr	r2, [pc, #392]	@ (80029d0 <HAL_DMA_Abort_IT+0x3c4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a60      	ldr	r2, [pc, #384]	@ (80029d4 <HAL_DMA_Abort_IT+0x3c8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5f      	ldr	r2, [pc, #380]	@ (80029d8 <HAL_DMA_Abort_IT+0x3cc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5d      	ldr	r2, [pc, #372]	@ (80029dc <HAL_DMA_Abort_IT+0x3d0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5c      	ldr	r2, [pc, #368]	@ (80029e0 <HAL_DMA_Abort_IT+0x3d4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5a      	ldr	r2, [pc, #360]	@ (80029e4 <HAL_DMA_Abort_IT+0x3d8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a59      	ldr	r2, [pc, #356]	@ (80029e8 <HAL_DMA_Abort_IT+0x3dc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a57      	ldr	r2, [pc, #348]	@ (80029ec <HAL_DMA_Abort_IT+0x3e0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Abort_IT+0x290>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a56      	ldr	r2, [pc, #344]	@ (80029f0 <HAL_DMA_Abort_IT+0x3e4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d108      	bne.n	80028ae <HAL_DMA_Abort_IT+0x2a2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e007      	b.n	80028be <HAL_DMA_Abort_IT+0x2b2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3c      	ldr	r2, [pc, #240]	@ (80029b4 <HAL_DMA_Abort_IT+0x3a8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d072      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a3a      	ldr	r2, [pc, #232]	@ (80029b8 <HAL_DMA_Abort_IT+0x3ac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d06d      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a39      	ldr	r2, [pc, #228]	@ (80029bc <HAL_DMA_Abort_IT+0x3b0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d068      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a37      	ldr	r2, [pc, #220]	@ (80029c0 <HAL_DMA_Abort_IT+0x3b4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d063      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a36      	ldr	r2, [pc, #216]	@ (80029c4 <HAL_DMA_Abort_IT+0x3b8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d05e      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a34      	ldr	r2, [pc, #208]	@ (80029c8 <HAL_DMA_Abort_IT+0x3bc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d059      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a33      	ldr	r2, [pc, #204]	@ (80029cc <HAL_DMA_Abort_IT+0x3c0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d054      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a31      	ldr	r2, [pc, #196]	@ (80029d0 <HAL_DMA_Abort_IT+0x3c4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d04f      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a30      	ldr	r2, [pc, #192]	@ (80029d4 <HAL_DMA_Abort_IT+0x3c8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d04a      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a2e      	ldr	r2, [pc, #184]	@ (80029d8 <HAL_DMA_Abort_IT+0x3cc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d045      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2d      	ldr	r2, [pc, #180]	@ (80029dc <HAL_DMA_Abort_IT+0x3d0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d040      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <HAL_DMA_Abort_IT+0x3d4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d03b      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2a      	ldr	r2, [pc, #168]	@ (80029e4 <HAL_DMA_Abort_IT+0x3d8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d036      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a28      	ldr	r2, [pc, #160]	@ (80029e8 <HAL_DMA_Abort_IT+0x3dc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d031      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a27      	ldr	r2, [pc, #156]	@ (80029ec <HAL_DMA_Abort_IT+0x3e0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d02c      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a25      	ldr	r2, [pc, #148]	@ (80029f0 <HAL_DMA_Abort_IT+0x3e4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d027      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a24      	ldr	r2, [pc, #144]	@ (80029f4 <HAL_DMA_Abort_IT+0x3e8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d022      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_DMA_Abort_IT+0x3ec>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01d      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a21      	ldr	r2, [pc, #132]	@ (80029fc <HAL_DMA_Abort_IT+0x3f0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d018      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <HAL_DMA_Abort_IT+0x3f4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <HAL_DMA_Abort_IT+0x3f8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00e      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_DMA_Abort_IT+0x3fc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_DMA_Abort_IT+0x400>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d004      	beq.n	80029ae <HAL_DMA_Abort_IT+0x3a2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <HAL_DMA_Abort_IT+0x404>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d132      	bne.n	8002a14 <HAL_DMA_Abort_IT+0x408>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e031      	b.n	8002a16 <HAL_DMA_Abort_IT+0x40a>
 80029b2:	bf00      	nop
 80029b4:	40020010 	.word	0x40020010
 80029b8:	40020028 	.word	0x40020028
 80029bc:	40020040 	.word	0x40020040
 80029c0:	40020058 	.word	0x40020058
 80029c4:	40020070 	.word	0x40020070
 80029c8:	40020088 	.word	0x40020088
 80029cc:	400200a0 	.word	0x400200a0
 80029d0:	400200b8 	.word	0x400200b8
 80029d4:	40020410 	.word	0x40020410
 80029d8:	40020428 	.word	0x40020428
 80029dc:	40020440 	.word	0x40020440
 80029e0:	40020458 	.word	0x40020458
 80029e4:	40020470 	.word	0x40020470
 80029e8:	40020488 	.word	0x40020488
 80029ec:	400204a0 	.word	0x400204a0
 80029f0:	400204b8 	.word	0x400204b8
 80029f4:	58025408 	.word	0x58025408
 80029f8:	5802541c 	.word	0x5802541c
 80029fc:	58025430 	.word	0x58025430
 8002a00:	58025444 	.word	0x58025444
 8002a04:	58025458 	.word	0x58025458
 8002a08:	5802546c 	.word	0x5802546c
 8002a0c:	58025480 	.word	0x58025480
 8002a10:	58025494 	.word	0x58025494
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d028      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2201      	movs	r2, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop

08002a98 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e00a      	b.n	8002aca <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002ab4:	7afb      	ldrb	r3, [r7, #11]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	605a      	str	r2, [r3, #4]
      break;
 8002ac0:	e002      	b.n	8002ac8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac6:	bf00      	nop
  }

  return status;
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e003      	b.n	8002af2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	011a      	lsls	r2, r3, #4
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <HAL_EXTI_IRQHandler+0x5c>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4798      	blx	r3
    }
  }
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	58000088 	.word	0x58000088

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b6e:	4b89      	ldr	r3, [pc, #548]	@ (8002d94 <HAL_GPIO_Init+0x234>)
 8002b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b72:	e194      	b.n	8002e9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8186 	beq.w	8002e98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d005      	beq.n	8002ba4 <HAL_GPIO_Init+0x44>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d130      	bne.n	8002c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bda:	2201      	movs	r2, #1
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 0201 	and.w	r2, r3, #1
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d017      	beq.n	8002c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d123      	bne.n	8002c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	69b9      	ldr	r1, [r7, #24]
 8002c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e0 	beq.w	8002e98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <HAL_GPIO_Init+0x238>)
 8002cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cde:	4a2e      	ldr	r2, [pc, #184]	@ (8002d98 <HAL_GPIO_Init+0x238>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <HAL_GPIO_Init+0x238>)
 8002cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf6:	4a29      	ldr	r2, [pc, #164]	@ (8002d9c <HAL_GPIO_Init+0x23c>)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	@ (8002da0 <HAL_GPIO_Init+0x240>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d052      	beq.n	8002dc8 <HAL_GPIO_Init+0x268>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <HAL_GPIO_Init+0x244>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d031      	beq.n	8002d8e <HAL_GPIO_Init+0x22e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002da8 <HAL_GPIO_Init+0x248>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02b      	beq.n	8002d8a <HAL_GPIO_Init+0x22a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a1d      	ldr	r2, [pc, #116]	@ (8002dac <HAL_GPIO_Init+0x24c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d025      	beq.n	8002d86 <HAL_GPIO_Init+0x226>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_GPIO_Init+0x250>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <HAL_GPIO_Init+0x222>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1b      	ldr	r2, [pc, #108]	@ (8002db4 <HAL_GPIO_Init+0x254>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_Init+0x21e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002db8 <HAL_GPIO_Init+0x258>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_Init+0x21a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <HAL_GPIO_Init+0x25c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x216>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	@ (8002dc0 <HAL_GPIO_Init+0x260>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <HAL_GPIO_Init+0x264>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x20e>
 8002d6a:	2309      	movs	r3, #9
 8002d6c:	e02d      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d6e:	230a      	movs	r3, #10
 8002d70:	e02b      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d72:	2308      	movs	r3, #8
 8002d74:	e029      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d76:	2307      	movs	r3, #7
 8002d78:	e027      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d7a:	2306      	movs	r3, #6
 8002d7c:	e025      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d7e:	2305      	movs	r3, #5
 8002d80:	e023      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d82:	2304      	movs	r3, #4
 8002d84:	e021      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d86:	2303      	movs	r3, #3
 8002d88:	e01f      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e01d      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e01b      	b.n	8002dca <HAL_GPIO_Init+0x26a>
 8002d92:	bf00      	nop
 8002d94:	58000080 	.word	0x58000080
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	58000400 	.word	0x58000400
 8002da0:	58020000 	.word	0x58020000
 8002da4:	58020400 	.word	0x58020400
 8002da8:	58020800 	.word	0x58020800
 8002dac:	58020c00 	.word	0x58020c00
 8002db0:	58021000 	.word	0x58021000
 8002db4:	58021400 	.word	0x58021400
 8002db8:	58021800 	.word	0x58021800
 8002dbc:	58021c00 	.word	0x58021c00
 8002dc0:	58022000 	.word	0x58022000
 8002dc4:	58022400 	.word	0x58022400
 8002dc8:	2300      	movs	r3, #0
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	f002 0203 	and.w	r2, r2, #3
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	4093      	lsls	r3, r2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dda:	4938      	ldr	r1, [pc, #224]	@ (8002ebc <HAL_GPIO_Init+0x35c>)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	3302      	adds	r3, #2
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f ae63 	bne.w	8002b74 <HAL_GPIO_Init+0x14>
  }
}
 8002eae:	bf00      	nop
 8002eb0:	bf00      	nop
 8002eb2:	3724      	adds	r7, #36	@ 0x24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	58000400 	.word	0x58000400

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002edc:	e003      	b.n	8002ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	041a      	lsls	r2, r3, #16
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	400b      	ands	r3, r1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f34:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fbdf 	bl	8001710 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f64:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_PWREx_ConfigSupply+0x70>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d00a      	beq.n	8002f86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f70:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <HAL_PWREx_ConfigSupply+0x70>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e01f      	b.n	8002fc2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e01d      	b.n	8002fc2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f86:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_PWREx_ConfigSupply+0x70>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	490f      	ldr	r1, [pc, #60]	@ (8002fcc <HAL_PWREx_ConfigSupply+0x70>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f96:	f7ff f975 	bl	8002284 <HAL_GetTick>
 8002f9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f9c:	e009      	b.n	8002fb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f9e:	f7ff f971 	bl	8002284 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fac:	d901      	bls.n	8002fb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_PWREx_ConfigSupply+0x70>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	58024800 	.word	0x58024800

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08c      	sub	sp, #48	@ 0x30
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f000 bc48 	b.w	8003874 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8088 	beq.w	8003102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff2:	4b99      	ldr	r3, [pc, #612]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ffc:	4b96      	ldr	r3, [pc, #600]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003004:	2b10      	cmp	r3, #16
 8003006:	d007      	beq.n	8003018 <HAL_RCC_OscConfig+0x48>
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	2b18      	cmp	r3, #24
 800300c:	d111      	bne.n	8003032 <HAL_RCC_OscConfig+0x62>
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d10c      	bne.n	8003032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	4b8f      	ldr	r3, [pc, #572]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d06d      	beq.n	8003100 <HAL_RCC_OscConfig+0x130>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d169      	bne.n	8003100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f000 bc21 	b.w	8003874 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x7a>
 800303c:	4b86      	ldr	r3, [pc, #536]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a85      	ldr	r2, [pc, #532]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	e02e      	b.n	80030a8 <HAL_RCC_OscConfig+0xd8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x9c>
 8003052:	4b81      	ldr	r3, [pc, #516]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a80      	ldr	r2, [pc, #512]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b7e      	ldr	r3, [pc, #504]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7d      	ldr	r2, [pc, #500]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003064:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e01d      	b.n	80030a8 <HAL_RCC_OscConfig+0xd8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0xc0>
 8003076:	4b78      	ldr	r3, [pc, #480]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a77      	ldr	r2, [pc, #476]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b75      	ldr	r3, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a74      	ldr	r2, [pc, #464]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0xd8>
 8003090:	4b71      	ldr	r3, [pc, #452]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a70      	ldr	r2, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b6e      	ldr	r3, [pc, #440]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6d      	ldr	r2, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7ff f8e8 	bl	8002284 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b8:	f7ff f8e4 	bl	8002284 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	@ 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e3d4      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030ca:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0xe8>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7ff f8d4 	bl	8002284 <HAL_GetTick>
 80030dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7ff f8d0 	bl	8002284 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	@ 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e3c0      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030f2:	4b59      	ldr	r3, [pc, #356]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x110>
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80ca 	beq.w	80032a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003110:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003118:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800311a:	4b4f      	ldr	r3, [pc, #316]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_RCC_OscConfig+0x166>
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	2b18      	cmp	r3, #24
 800312a:	d156      	bne.n	80031da <HAL_RCC_OscConfig+0x20a>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d151      	bne.n	80031da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003136:	4b48      	ldr	r3, [pc, #288]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_RCC_OscConfig+0x17e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e392      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800314e:	4b42      	ldr	r3, [pc, #264]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0219 	bic.w	r2, r3, #25
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	493f      	ldr	r1, [pc, #252]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7ff f890 	bl	8002284 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003168:	f7ff f88c 	bl	8002284 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e37c      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800317a:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003186:	f7ff f8ad 	bl	80022e4 <HAL_GetREVID>
 800318a:	4603      	mov	r3, r0
 800318c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003190:	4293      	cmp	r3, r2
 8003192:	d817      	bhi.n	80031c4 <HAL_RCC_OscConfig+0x1f4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b40      	cmp	r3, #64	@ 0x40
 800319a:	d108      	bne.n	80031ae <HAL_RCC_OscConfig+0x1de>
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80031a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ac:	e07a      	b.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	031b      	lsls	r3, r3, #12
 80031bc:	4926      	ldr	r1, [pc, #152]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c2:	e06f      	b.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	4921      	ldr	r1, [pc, #132]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d8:	e064      	b.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d047      	beq.n	8003272 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 0219 	bic.w	r2, r3, #25
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	491a      	ldr	r1, [pc, #104]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7ff f846 	bl	8002284 <HAL_GetTick>
 80031f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fc:	f7ff f842 	bl	8002284 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e332      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800320e:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	f7ff f863 	bl	80022e4 <HAL_GetREVID>
 800321e:	4603      	mov	r3, r0
 8003220:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003224:	4293      	cmp	r3, r2
 8003226:	d819      	bhi.n	800325c <HAL_RCC_OscConfig+0x28c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b40      	cmp	r3, #64	@ 0x40
 800322e:	d108      	bne.n	8003242 <HAL_RCC_OscConfig+0x272>
 8003230:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003238:	4a07      	ldr	r2, [pc, #28]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 800323a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800323e:	6053      	str	r3, [r2, #4]
 8003240:	e030      	b.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
 8003242:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	4901      	ldr	r1, [pc, #4]	@ (8003258 <HAL_RCC_OscConfig+0x288>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	e025      	b.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
 8003258:	58024400 	.word	0x58024400
 800325c:	4b9a      	ldr	r3, [pc, #616]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	4997      	ldr	r1, [pc, #604]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
 8003270:	e018      	b.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003272:	4b95      	ldr	r3, [pc, #596]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a94      	ldr	r2, [pc, #592]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7ff f801 	bl	8002284 <HAL_GetTick>
 8003282:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7fe fffd 	bl	8002284 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e2ed      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003298:	4b8b      	ldr	r3, [pc, #556]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a9 	beq.w	8003404 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4b85      	ldr	r3, [pc, #532]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032bc:	4b82      	ldr	r3, [pc, #520]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d007      	beq.n	80032d8 <HAL_RCC_OscConfig+0x308>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b18      	cmp	r3, #24
 80032cc:	d13a      	bne.n	8003344 <HAL_RCC_OscConfig+0x374>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d135      	bne.n	8003344 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032d8:	4b7b      	ldr	r3, [pc, #492]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_OscConfig+0x320>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2b80      	cmp	r3, #128	@ 0x80
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e2c1      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032f0:	f7fe fff8 	bl	80022e4 <HAL_GetREVID>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d817      	bhi.n	800332e <HAL_RCC_OscConfig+0x35e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	2b20      	cmp	r3, #32
 8003304:	d108      	bne.n	8003318 <HAL_RCC_OscConfig+0x348>
 8003306:	4b70      	ldr	r3, [pc, #448]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800330e:	4a6e      	ldr	r2, [pc, #440]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003310:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003314:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003316:	e075      	b.n	8003404 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003318:	4b6b      	ldr	r3, [pc, #428]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	069b      	lsls	r3, r3, #26
 8003326:	4968      	ldr	r1, [pc, #416]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800332c:	e06a      	b.n	8003404 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800332e:	4b66      	ldr	r3, [pc, #408]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	4962      	ldr	r1, [pc, #392]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003342:	e05f      	b.n	8003404 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d042      	beq.n	80033d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800334c:	4b5e      	ldr	r3, [pc, #376]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5d      	ldr	r2, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe ff94 	bl	8002284 <HAL_GetTick>
 800335c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003360:	f7fe ff90 	bl	8002284 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e280      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003372:	4b55      	ldr	r3, [pc, #340]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800337e:	f7fe ffb1 	bl	80022e4 <HAL_GetREVID>
 8003382:	4603      	mov	r3, r0
 8003384:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003388:	4293      	cmp	r3, r2
 800338a:	d817      	bhi.n	80033bc <HAL_RCC_OscConfig+0x3ec>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	2b20      	cmp	r3, #32
 8003392:	d108      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3d6>
 8003394:	4b4c      	ldr	r3, [pc, #304]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800339c:	4a4a      	ldr	r2, [pc, #296]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800339e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033a2:	6053      	str	r3, [r2, #4]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0x434>
 80033a6:	4b48      	ldr	r3, [pc, #288]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	069b      	lsls	r3, r3, #26
 80033b4:	4944      	ldr	r1, [pc, #272]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
 80033ba:	e023      	b.n	8003404 <HAL_RCC_OscConfig+0x434>
 80033bc:	4b42      	ldr	r3, [pc, #264]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	493f      	ldr	r1, [pc, #252]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60cb      	str	r3, [r1, #12]
 80033d0:	e018      	b.n	8003404 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033d2:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3c      	ldr	r2, [pc, #240]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80033d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe ff51 	bl	8002284 <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033e6:	f7fe ff4d 	bl	8002284 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e23d      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033f8:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d036      	beq.n	800347e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d019      	beq.n	800344c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003418:	4b2b      	ldr	r3, [pc, #172]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800341a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800341c:	4a2a      	ldr	r2, [pc, #168]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fe ff2e 	bl	8002284 <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7fe ff2a 	bl	8002284 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e21a      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800343e:	4b22      	ldr	r3, [pc, #136]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x45c>
 800344a:	e018      	b.n	800347e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344c:	4b1e      	ldr	r3, [pc, #120]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800344e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003450:	4a1d      	ldr	r2, [pc, #116]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fe ff14 	bl	8002284 <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003460:	f7fe ff10 	bl	8002284 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e200      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003472:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d039      	beq.n	80034fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01c      	beq.n	80034cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003498:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800349c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800349e:	f7fe fef1 	bl	8002284 <HAL_GetTick>
 80034a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a6:	f7fe feed 	bl	8002284 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1dd      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034b8:	4b03      	ldr	r3, [pc, #12]	@ (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x4d6>
 80034c4:	e01b      	b.n	80034fe <HAL_RCC_OscConfig+0x52e>
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034cc:	4b9b      	ldr	r3, [pc, #620]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a9a      	ldr	r2, [pc, #616]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80034d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034d8:	f7fe fed4 	bl	8002284 <HAL_GetTick>
 80034dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e0:	f7fe fed0 	bl	8002284 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1c0      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034f2:	4b92      	ldr	r3, [pc, #584]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8081 	beq.w	800360e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800350c:	4b8c      	ldr	r3, [pc, #560]	@ (8003740 <HAL_RCC_OscConfig+0x770>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a8b      	ldr	r2, [pc, #556]	@ (8003740 <HAL_RCC_OscConfig+0x770>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003518:	f7fe feb4 	bl	8002284 <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe feb0 	bl	8002284 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1a0      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003532:	4b83      	ldr	r3, [pc, #524]	@ (8003740 <HAL_RCC_OscConfig+0x770>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x584>
 8003546:	4b7d      	ldr	r3, [pc, #500]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	4a7c      	ldr	r2, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
 8003552:	e02d      	b.n	80035b0 <HAL_RCC_OscConfig+0x5e0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x5a6>
 800355c:	4b77      	ldr	r3, [pc, #476]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	4a76      	ldr	r2, [pc, #472]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	@ 0x70
 8003568:	4b74      	ldr	r3, [pc, #464]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a73      	ldr	r2, [pc, #460]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800356e:	f023 0304 	bic.w	r3, r3, #4
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
 8003574:	e01c      	b.n	80035b0 <HAL_RCC_OscConfig+0x5e0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x5c8>
 800357e:	4b6f      	ldr	r3, [pc, #444]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003582:	4a6e      	ldr	r2, [pc, #440]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	@ 0x70
 800358a:	4b6c      	ldr	r3, [pc, #432]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	4a6b      	ldr	r2, [pc, #428]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	@ 0x70
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x5e0>
 8003598:	4b68      	ldr	r3, [pc, #416]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	4a67      	ldr	r2, [pc, #412]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a4:	4b65      	ldr	r3, [pc, #404]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	4a64      	ldr	r2, [pc, #400]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fe fe64 	bl	8002284 <HAL_GetTick>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe fe60 	bl	8002284 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e14e      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035d6:	4b59      	ldr	r3, [pc, #356]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ee      	beq.n	80035c0 <HAL_RCC_OscConfig+0x5f0>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe fe4e 	bl	8002284 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe fe4a 	bl	8002284 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e138      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003602:	4b4e      	ldr	r3, [pc, #312]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ee      	bne.n	80035ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 812d 	beq.w	8003872 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003618:	4b48      	ldr	r3, [pc, #288]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003620:	2b18      	cmp	r3, #24
 8003622:	f000 80bd 	beq.w	80037a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	2b02      	cmp	r3, #2
 800362c:	f040 809e 	bne.w	800376c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b42      	ldr	r3, [pc, #264]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a41      	ldr	r2, [pc, #260]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe fe22 	bl	8002284 <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe fe1e 	bl	8002284 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e10e      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003656:	4b39      	ldr	r3, [pc, #228]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003662:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003666:	4b37      	ldr	r3, [pc, #220]	@ (8003744 <HAL_RCC_OscConfig+0x774>)
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	430a      	orrs	r2, r1
 8003676:	4931      	ldr	r1, [pc, #196]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	628b      	str	r3, [r1, #40]	@ 0x28
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	3b01      	subs	r3, #1
 8003682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368a:	3b01      	subs	r3, #1
 800368c:	025b      	lsls	r3, r3, #9
 800368e:	b29b      	uxth	r3, r3
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	3b01      	subs	r3, #1
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036ac:	4923      	ldr	r1, [pc, #140]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036b2:	4b22      	ldr	r3, [pc, #136]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	4a21      	ldr	r2, [pc, #132]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036be:	4b1f      	ldr	r3, [pc, #124]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036c2:	4b21      	ldr	r3, [pc, #132]	@ (8003748 <HAL_RCC_OscConfig+0x778>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036ca:	00d2      	lsls	r2, r2, #3
 80036cc:	491b      	ldr	r1, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036d2:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	f023 020c 	bic.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	4917      	ldr	r1, [pc, #92]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036e4:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	f023 0202 	bic.w	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	4912      	ldr	r1, [pc, #72]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	4a10      	ldr	r2, [pc, #64]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003702:	4b0e      	ldr	r3, [pc, #56]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800370e:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003712:	4a0a      	ldr	r2, [pc, #40]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003718:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800371a:	4b08      	ldr	r3, [pc, #32]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	4a07      	ldr	r2, [pc, #28]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003726:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a04      	ldr	r2, [pc, #16]	@ (800373c <HAL_RCC_OscConfig+0x76c>)
 800372c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fe fda7 	bl	8002284 <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003738:	e011      	b.n	800375e <HAL_RCC_OscConfig+0x78e>
 800373a:	bf00      	nop
 800373c:	58024400 	.word	0x58024400
 8003740:	58024800 	.word	0x58024800
 8003744:	fffffc0c 	.word	0xfffffc0c
 8003748:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fd9a 	bl	8002284 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e08a      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800375e:	4b47      	ldr	r3, [pc, #284]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x77c>
 800376a:	e082      	b.n	8003872 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b43      	ldr	r3, [pc, #268]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a42      	ldr	r2, [pc, #264]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fd84 	bl	8002284 <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fe fd80 	bl	8002284 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e070      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003792:	4b3a      	ldr	r3, [pc, #232]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x7b0>
 800379e:	e068      	b.n	8003872 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037a0:	4b36      	ldr	r3, [pc, #216]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037a6:	4b35      	ldr	r3, [pc, #212]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d031      	beq.n	8003818 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d12a      	bne.n	8003818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d122      	bne.n	8003818 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d11a      	bne.n	8003818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	0a5b      	lsrs	r3, r3, #9
 80037e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d111      	bne.n	8003818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	0c1b      	lsrs	r3, r3, #16
 80037f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d108      	bne.n	8003818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0e1b      	lsrs	r3, r3, #24
 800380a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003812:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e02b      	b.n	8003874 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800381c:	4b17      	ldr	r3, [pc, #92]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003826:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	d01f      	beq.n	8003872 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003832:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	4a11      	ldr	r2, [pc, #68]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800383e:	f7fe fd21 	bl	8002284 <HAL_GetTick>
 8003842:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003844:	bf00      	nop
 8003846:	f7fe fd1d 	bl	8002284 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	4293      	cmp	r3, r2
 8003850:	d0f9      	beq.n	8003846 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003856:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <HAL_RCC_OscConfig+0x8b0>)
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800385e:	00d2      	lsls	r2, r2, #3
 8003860:	4906      	ldr	r1, [pc, #24]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003862:	4313      	orrs	r3, r2
 8003864:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003866:	4b05      	ldr	r3, [pc, #20]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 8003868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386a:	4a04      	ldr	r2, [pc, #16]	@ (800387c <HAL_RCC_OscConfig+0x8ac>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3730      	adds	r7, #48	@ 0x30
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	58024400 	.word	0x58024400
 8003880:	ffff0007 	.word	0xffff0007

08003884 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e19c      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b8a      	ldr	r3, [pc, #552]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d910      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b87      	ldr	r3, [pc, #540]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 020f 	bic.w	r2, r3, #15
 80038ae:	4985      	ldr	r1, [pc, #532]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b83      	ldr	r3, [pc, #524]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e184      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d908      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038e4:	4b78      	ldr	r3, [pc, #480]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	4975      	ldr	r1, [pc, #468]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d010      	beq.n	8003924 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	4b70      	ldr	r3, [pc, #448]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800390e:	429a      	cmp	r2, r3
 8003910:	d908      	bls.n	8003924 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003912:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	496a      	ldr	r1, [pc, #424]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003920:	4313      	orrs	r3, r2
 8003922:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d010      	beq.n	8003952 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	4b64      	ldr	r3, [pc, #400]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800393c:	429a      	cmp	r2, r3
 800393e:	d908      	bls.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003940:	4b61      	ldr	r3, [pc, #388]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	495e      	ldr	r1, [pc, #376]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 800394e:	4313      	orrs	r3, r2
 8003950:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d010      	beq.n	8003980 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800396a:	429a      	cmp	r2, r3
 800396c:	d908      	bls.n	8003980 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800396e:	4b56      	ldr	r3, [pc, #344]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4953      	ldr	r1, [pc, #332]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 800397c:	4313      	orrs	r3, r2
 800397e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	429a      	cmp	r2, r3
 800399a:	d908      	bls.n	80039ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f023 020f 	bic.w	r2, r3, #15
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4947      	ldr	r1, [pc, #284]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d055      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039ba:	4b43      	ldr	r3, [pc, #268]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4940      	ldr	r1, [pc, #256]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039d4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d121      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0f6      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ec:	4b36      	ldr	r3, [pc, #216]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d115      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0ea      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a04:	4b30      	ldr	r3, [pc, #192]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0de      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a14:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0d6      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a24:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f023 0207 	bic.w	r2, r3, #7
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4925      	ldr	r1, [pc, #148]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a36:	f7fe fc25 	bl	8002284 <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3e:	f7fe fc21 	bl	8002284 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e0be      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a54:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d1eb      	bne.n	8003a3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d208      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f023 020f 	bic.w	r2, r3, #15
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	490e      	ldr	r1, [pc, #56]	@ (8003ac8 <HAL_RCC_ClockConfig+0x244>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d214      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 020f 	bic.w	r2, r3, #15
 8003aaa:	4906      	ldr	r1, [pc, #24]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <HAL_RCC_ClockConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e086      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x34e>
 8003ac4:	52002000 	.word	0x52002000
 8003ac8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b3f      	ldr	r3, [pc, #252]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d208      	bcs.n	8003afa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	4939      	ldr	r1, [pc, #228]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	4b34      	ldr	r3, [pc, #208]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d208      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	492e      	ldr	r1, [pc, #184]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	4b28      	ldr	r3, [pc, #160]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d208      	bcs.n	8003b56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b44:	4b25      	ldr	r3, [pc, #148]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	4922      	ldr	r1, [pc, #136]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d208      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b72:	4b1a      	ldr	r3, [pc, #104]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4917      	ldr	r1, [pc, #92]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b84:	f000 f834 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	4912      	ldr	r1, [pc, #72]	@ (8003be0 <HAL_RCC_ClockConfig+0x35c>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bdc <HAL_RCC_ClockConfig+0x358>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	4a0d      	ldr	r2, [pc, #52]	@ (8003be0 <HAL_RCC_ClockConfig+0x35c>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003be4 <HAL_RCC_ClockConfig+0x360>)
 8003bba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <HAL_RCC_ClockConfig+0x364>)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <HAL_RCC_ClockConfig+0x368>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fb12 	bl	80021f0 <HAL_InitTick>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	08009ac4 	.word	0x08009ac4
 8003be4:	24000004 	.word	0x24000004
 8003be8:	24000000 	.word	0x24000000
 8003bec:	24000024 	.word	0x24000024

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	@ 0x24
 8003bf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf6:	4bb3      	ldr	r3, [pc, #716]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bfe:	2b18      	cmp	r3, #24
 8003c00:	f200 8155 	bhi.w	8003eae <HAL_RCC_GetSysClockFreq+0x2be>
 8003c04:	a201      	add	r2, pc, #4	@ (adr r2, 8003c0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003eaf 	.word	0x08003eaf
 8003c14:	08003eaf 	.word	0x08003eaf
 8003c18:	08003eaf 	.word	0x08003eaf
 8003c1c:	08003eaf 	.word	0x08003eaf
 8003c20:	08003eaf 	.word	0x08003eaf
 8003c24:	08003eaf 	.word	0x08003eaf
 8003c28:	08003eaf 	.word	0x08003eaf
 8003c2c:	08003c97 	.word	0x08003c97
 8003c30:	08003eaf 	.word	0x08003eaf
 8003c34:	08003eaf 	.word	0x08003eaf
 8003c38:	08003eaf 	.word	0x08003eaf
 8003c3c:	08003eaf 	.word	0x08003eaf
 8003c40:	08003eaf 	.word	0x08003eaf
 8003c44:	08003eaf 	.word	0x08003eaf
 8003c48:	08003eaf 	.word	0x08003eaf
 8003c4c:	08003c9d 	.word	0x08003c9d
 8003c50:	08003eaf 	.word	0x08003eaf
 8003c54:	08003eaf 	.word	0x08003eaf
 8003c58:	08003eaf 	.word	0x08003eaf
 8003c5c:	08003eaf 	.word	0x08003eaf
 8003c60:	08003eaf 	.word	0x08003eaf
 8003c64:	08003eaf 	.word	0x08003eaf
 8003c68:	08003eaf 	.word	0x08003eaf
 8003c6c:	08003ca3 	.word	0x08003ca3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c70:	4b94      	ldr	r3, [pc, #592]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c7c:	4b91      	ldr	r3, [pc, #580]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	4a90      	ldr	r2, [pc, #576]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c8e:	e111      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c90:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c92:	61bb      	str	r3, [r7, #24]
      break;
 8003c94:	e10e      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c96:	4b8d      	ldr	r3, [pc, #564]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c98:	61bb      	str	r3, [r7, #24]
      break;
 8003c9a:	e10b      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c9e:	61bb      	str	r3, [r7, #24]
      break;
 8003ca0:	e108      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ca2:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cac:	4b85      	ldr	r3, [pc, #532]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003cb8:	4b82      	ldr	r3, [pc, #520]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003cc2:	4b80      	ldr	r3, [pc, #512]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc6:	08db      	lsrs	r3, r3, #3
 8003cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80e1 	beq.w	8003ea8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	f000 8083 	beq.w	8003df4 <HAL_RCC_GetSysClockFreq+0x204>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f200 80a1 	bhi.w	8003e38 <HAL_RCC_GetSysClockFreq+0x248>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x114>
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d056      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d02:	e099      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d04:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d02d      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d10:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3a:	4b62      	ldr	r3, [pc, #392]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003ed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d6a:	e087      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ed8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7e:	4b51      	ldr	r3, [pc, #324]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d92:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003ed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003daa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dae:	e065      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	4b40      	ldr	r3, [pc, #256]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003ed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003df2:	e043      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ee0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e1a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003ed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e36:	e021      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e5e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003ed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	0a5b      	lsrs	r3, r3, #9
 8003e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e86:	3301      	adds	r3, #1
 8003e88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea0:	ee17 3a90 	vmov	r3, s15
 8003ea4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
      break;
 8003eac:	e002      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003eae:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003eb0:	61bb      	str	r3, [r7, #24]
      break;
 8003eb2:	bf00      	nop
  }

  return sysclockfreq;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	@ 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	03d09000 	.word	0x03d09000
 8003ecc:	003d0900 	.word	0x003d0900
 8003ed0:	017d7840 	.word	0x017d7840
 8003ed4:	46000000 	.word	0x46000000
 8003ed8:	4c742400 	.word	0x4c742400
 8003edc:	4a742400 	.word	0x4a742400
 8003ee0:	4bbebc20 	.word	0x4bbebc20

08003ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003eea:	f7ff fe81 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	490f      	ldr	r1, [pc, #60]	@ (8003f38 <HAL_RCC_GetHCLKFreq+0x54>)
 8003efc:	5ccb      	ldrb	r3, [r1, r3]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f08:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f12:	5cd3      	ldrb	r3, [r2, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a07      	ldr	r2, [pc, #28]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f22:	4a07      	ldr	r2, [pc, #28]	@ (8003f40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f28:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	58024400 	.word	0x58024400
 8003f38:	08009ac4 	.word	0x08009ac4
 8003f3c:	24000004 	.word	0x24000004
 8003f40:	24000000 	.word	0x24000000

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f48:	f7ff ffcc 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4904      	ldr	r1, [pc, #16]	@ (8003f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	08009ac4 	.word	0x08009ac4

08003f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f74:	f7ff ffb6 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4904      	ldr	r1, [pc, #16]	@ (8003f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	58024400 	.word	0x58024400
 8003f98:	08009ac4 	.word	0x08009ac4

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa0:	b0ca      	sub	sp, #296	@ 0x128
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003fc0:	2500      	movs	r5, #0
 8003fc2:	ea54 0305 	orrs.w	r3, r4, r5
 8003fc6:	d049      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd2:	d02f      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003fd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd8:	d828      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fde:	d01a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fe4:	d822      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fee:	d007      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ff0:	e01c      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff2:	4bb8      	ldr	r3, [pc, #736]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4ab7      	ldr	r2, [pc, #732]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ffe:	e01a      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	3308      	adds	r3, #8
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f001 fc8f 	bl	800592c <RCCEx_PLL2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004014:	e00f      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401a:	3328      	adds	r3, #40	@ 0x28
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fd36 	bl	8005a90 <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800402a:	e004      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004032:	e000      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800403e:	4ba5      	ldr	r3, [pc, #660]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004042:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800404c:	4aa1      	ldr	r2, [pc, #644]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800404e:	430b      	orrs	r3, r1
 8004050:	6513      	str	r3, [r2, #80]	@ 0x50
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004068:	f04f 0900 	mov.w	r9, #0
 800406c:	ea58 0309 	orrs.w	r3, r8, r9
 8004070:	d047      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	2b04      	cmp	r3, #4
 800407a:	d82a      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800407c:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	08004099 	.word	0x08004099
 8004088:	080040a7 	.word	0x080040a7
 800408c:	080040bd 	.word	0x080040bd
 8004090:	080040db 	.word	0x080040db
 8004094:	080040db 	.word	0x080040db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004098:	4b8e      	ldr	r3, [pc, #568]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	4a8d      	ldr	r2, [pc, #564]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040a4:	e01a      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	3308      	adds	r3, #8
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fc3c 	bl	800592c <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ba:	e00f      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	3328      	adds	r3, #40	@ 0x28
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fce3 	bl	8005a90 <RCCEx_PLL3_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040d0:	e004      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80040da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e4:	4b7b      	ldr	r3, [pc, #492]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e8:	f023 0107 	bic.w	r1, r3, #7
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	4a78      	ldr	r2, [pc, #480]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800410e:	f04f 0b00 	mov.w	fp, #0
 8004112:	ea5a 030b 	orrs.w	r3, sl, fp
 8004116:	d04c      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	d030      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004128:	d829      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800412a:	2bc0      	cmp	r3, #192	@ 0xc0
 800412c:	d02d      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800412e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004130:	d825      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004132:	2b80      	cmp	r3, #128	@ 0x80
 8004134:	d018      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d821      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	d007      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004142:	e01c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004144:	4b63      	ldr	r3, [pc, #396]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	4a62      	ldr	r2, [pc, #392]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004150:	e01c      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	3308      	adds	r3, #8
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f001 fbe6 	bl	800592c <RCCEx_PLL2_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004166:	e011      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	3328      	adds	r3, #40	@ 0x28
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f001 fc8d 	bl	8005a90 <RCCEx_PLL3_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800417c:	e006      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004184:	e002      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800418a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004194:	4b4f      	ldr	r3, [pc, #316]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004198:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	4a4c      	ldr	r2, [pc, #304]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80041be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80041c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d053      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041de:	d035      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80041e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041e4:	d82e      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80041ea:	d031      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80041ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80041f0:	d828      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041f6:	d01a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80041f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041fc:	d822      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004206:	d007      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004208:	e01c      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420a:	4b32      	ldr	r3, [pc, #200]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	4a31      	ldr	r2, [pc, #196]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004216:	e01c      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	3308      	adds	r3, #8
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f001 fb83 	bl	800592c <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800422c:	e011      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	3328      	adds	r3, #40	@ 0x28
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f001 fc2a 	bl	8005a90 <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004242:	e006      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424a:	e002      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800425a:	4b1e      	ldr	r3, [pc, #120]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800426a:	4a1a      	ldr	r2, [pc, #104]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800426c:	430b      	orrs	r3, r1
 800426e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004270:	e003      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004286:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800428a:	2300      	movs	r3, #0
 800428c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004290:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004294:	460b      	mov	r3, r1
 8004296:	4313      	orrs	r3, r2
 8004298:	d056      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042a6:	d038      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80042a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ac:	d831      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042b2:	d034      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80042b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042b8:	d82b      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042be:	d01d      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80042c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042c4:	d825      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d006      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80042ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80042d0:	e01f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042d2:	bf00      	nop
 80042d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4ba2      	ldr	r3, [pc, #648]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	4aa1      	ldr	r2, [pc, #644]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042e4:	e01c      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	3308      	adds	r3, #8
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 fb1c 	bl	800592c <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80042fa:	e011      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	3328      	adds	r3, #40	@ 0x28
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f001 fbc3 	bl	8005a90 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004318:	e002      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800431a:	bf00      	nop
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800431e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004328:	4b8e      	ldr	r3, [pc, #568]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004338:	4a8a      	ldr	r2, [pc, #552]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6593      	str	r3, [r2, #88]	@ 0x58
 800433e:	e003      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004354:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800435e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	d03a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436e:	2b30      	cmp	r3, #48	@ 0x30
 8004370:	d01f      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004372:	2b30      	cmp	r3, #48	@ 0x30
 8004374:	d819      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004376:	2b20      	cmp	r3, #32
 8004378:	d00c      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800437a:	2b20      	cmp	r3, #32
 800437c:	d815      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d019      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004382:	2b10      	cmp	r3, #16
 8004384:	d111      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004386:	4b77      	ldr	r3, [pc, #476]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	4a76      	ldr	r2, [pc, #472]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800438c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004398:	3308      	adds	r3, #8
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fac5 	bl	800592c <RCCEx_PLL2_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043c0:	4b68      	ldr	r3, [pc, #416]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	4a65      	ldr	r2, [pc, #404]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80043ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80043ee:	2300      	movs	r3, #0
 80043f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d051      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004404:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004408:	d035      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800440a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800440e:	d82e      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004410:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004414:	d031      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004416:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800441a:	d828      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800441c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004420:	d01a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004426:	d822      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800442c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004430:	d007      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004432:	e01c      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004434:	4b4b      	ldr	r3, [pc, #300]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4a4a      	ldr	r2, [pc, #296]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800443a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004440:	e01c      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004446:	3308      	adds	r3, #8
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f001 fa6e 	bl	800592c <RCCEx_PLL2_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004456:	e011      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	3328      	adds	r3, #40	@ 0x28
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fb15 	bl	8005a90 <RCCEx_PLL3_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800447a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004484:	4b37      	ldr	r3, [pc, #220]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004488:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004492:	4a34      	ldr	r2, [pc, #208]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6513      	str	r3, [r2, #80]	@ 0x50
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80044b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80044bc:	460b      	mov	r3, r1
 80044be:	4313      	orrs	r3, r2
 80044c0:	d056      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044cc:	d033      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80044ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d2:	d82c      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044d8:	d02f      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80044da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044de:	d826      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044e4:	d02b      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80044e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044ea:	d820      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f0:	d012      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80044f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f6:	d81a      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d115      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	3308      	adds	r3, #8
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f001 fa0e 	bl	800592c <RCCEx_PLL2_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004516:	e015      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	3328      	adds	r3, #40	@ 0x28
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fab5 	bl	8005a90 <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800452c:	e00a      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004536:	bf00      	nop
 8004538:	e004      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800453a:	bf00      	nop
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10d      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800454e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004550:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800455a:	4a02      	ldr	r2, [pc, #8]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800455c:	430b      	orrs	r3, r1
 800455e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004560:	e006      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800457c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004586:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800458a:	460b      	mov	r3, r1
 800458c:	4313      	orrs	r3, r2
 800458e:	d055      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459c:	d033      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800459e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a2:	d82c      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a8:	d02f      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ae:	d826      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045b4:	d02b      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80045b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045ba:	d820      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c0:	d012      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80045c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c6:	d81a      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d022      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80045cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d0:	d115      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	3308      	adds	r3, #8
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 f9a6 	bl	800592c <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045e6:	e015      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ec:	3328      	adds	r3, #40	@ 0x28
 80045ee:	2101      	movs	r1, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 fa4d 	bl	8005a90 <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045fc:	e00a      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004606:	bf00      	nop
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800461c:	4ba3      	ldr	r3, [pc, #652]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800462c:	4a9f      	ldr	r2, [pc, #636]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462e:	430b      	orrs	r3, r1
 8004630:	6593      	str	r3, [r2, #88]	@ 0x58
 8004632:	e003      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800464c:	2300      	movs	r3, #0
 800464e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004656:	460b      	mov	r3, r1
 8004658:	4313      	orrs	r3, r2
 800465a:	d037      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004666:	d00e      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800466c:	d816      	bhi.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004676:	d111      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004678:	4b8c      	ldr	r3, [pc, #560]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	4a8b      	ldr	r2, [pc, #556]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800467e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004684:	e00f      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	3308      	adds	r3, #8
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f001 f94c 	bl	800592c <RCCEx_PLL2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800469a:	e004      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80046a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046ae:	4b7f      	ldr	r3, [pc, #508]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	4a7b      	ldr	r2, [pc, #492]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046be:	430b      	orrs	r3, r1
 80046c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80046c2:	e003      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80046d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046dc:	2300      	movs	r3, #0
 80046de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80046e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d039      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d81c      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80046f6:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004739 	.word	0x08004739
 8004700:	0800470d 	.word	0x0800470d
 8004704:	0800471b 	.word	0x0800471b
 8004708:	08004739 	.word	0x08004739
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800470c:	4b67      	ldr	r3, [pc, #412]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	4a66      	ldr	r2, [pc, #408]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004718:	e00f      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	3308      	adds	r3, #8
 8004720:	2102      	movs	r1, #2
 8004722:	4618      	mov	r0, r3
 8004724:	f001 f902 	bl	800592c <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800472e:	e004      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004736:	e000      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004742:	4b5a      	ldr	r3, [pc, #360]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004746:	f023 0103 	bic.w	r1, r3, #3
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004750:	4a56      	ldr	r2, [pc, #344]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004752:	430b      	orrs	r3, r1
 8004754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004756:	e003      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800475c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800476c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004776:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	f000 809f 	beq.w	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004782:	4b4b      	ldr	r3, [pc, #300]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a4a      	ldr	r2, [pc, #296]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800478e:	f7fd fd79 	bl	8002284 <HAL_GetTick>
 8004792:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004796:	e00b      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004798:	f7fd fd74 	bl	8002284 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	@ 0x64
 80047a6:	d903      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ae:	e005      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b0:	4b3f      	ldr	r3, [pc, #252]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ed      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80047bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d179      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047c4:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047d0:	4053      	eors	r3, r2
 80047d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d015      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047da:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e6:	4b31      	ldr	r3, [pc, #196]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ea:	4a30      	ldr	r2, [pc, #192]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f2:	4b2e      	ldr	r3, [pc, #184]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f6:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047fc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047fe:	4a2b      	ldr	r2, [pc, #172]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004800:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004804:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800480e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004812:	d118      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd fd36 	bl	8002284 <HAL_GetTick>
 8004818:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800481c:	e00d      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fd fd31 	bl	8002284 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004828:	1ad2      	subs	r2, r2, r3
 800482a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800482e:	429a      	cmp	r2, r3
 8004830:	d903      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004838:	e005      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800483a:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0eb      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d129      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485e:	d10e      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004860:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004870:	091a      	lsrs	r2, r3, #4
 8004872:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004874:	4013      	ands	r3, r2
 8004876:	4a0d      	ldr	r2, [pc, #52]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004878:	430b      	orrs	r3, r1
 800487a:	6113      	str	r3, [r2, #16]
 800487c:	e005      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800487e:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	4a0a      	ldr	r2, [pc, #40]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004884:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004888:	6113      	str	r3, [r2, #16]
 800488a:	4b08      	ldr	r3, [pc, #32]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800488c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489a:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a0:	e00e      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80048aa:	e009      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80048ac:	58024400 	.word	0x58024400
 80048b0:	58024800 	.word	0x58024800
 80048b4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f002 0301 	and.w	r3, r2, #1
 80048cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048da:	460b      	mov	r3, r1
 80048dc:	4313      	orrs	r3, r2
 80048de:	f000 8089 	beq.w	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048e8:	2b28      	cmp	r3, #40	@ 0x28
 80048ea:	d86b      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80048ec:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	080049cd 	.word	0x080049cd
 80048f8:	080049c5 	.word	0x080049c5
 80048fc:	080049c5 	.word	0x080049c5
 8004900:	080049c5 	.word	0x080049c5
 8004904:	080049c5 	.word	0x080049c5
 8004908:	080049c5 	.word	0x080049c5
 800490c:	080049c5 	.word	0x080049c5
 8004910:	080049c5 	.word	0x080049c5
 8004914:	08004999 	.word	0x08004999
 8004918:	080049c5 	.word	0x080049c5
 800491c:	080049c5 	.word	0x080049c5
 8004920:	080049c5 	.word	0x080049c5
 8004924:	080049c5 	.word	0x080049c5
 8004928:	080049c5 	.word	0x080049c5
 800492c:	080049c5 	.word	0x080049c5
 8004930:	080049c5 	.word	0x080049c5
 8004934:	080049af 	.word	0x080049af
 8004938:	080049c5 	.word	0x080049c5
 800493c:	080049c5 	.word	0x080049c5
 8004940:	080049c5 	.word	0x080049c5
 8004944:	080049c5 	.word	0x080049c5
 8004948:	080049c5 	.word	0x080049c5
 800494c:	080049c5 	.word	0x080049c5
 8004950:	080049c5 	.word	0x080049c5
 8004954:	080049cd 	.word	0x080049cd
 8004958:	080049c5 	.word	0x080049c5
 800495c:	080049c5 	.word	0x080049c5
 8004960:	080049c5 	.word	0x080049c5
 8004964:	080049c5 	.word	0x080049c5
 8004968:	080049c5 	.word	0x080049c5
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049c5 	.word	0x080049c5
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049c5 	.word	0x080049c5
 800497c:	080049c5 	.word	0x080049c5
 8004980:	080049c5 	.word	0x080049c5
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049c5 	.word	0x080049c5
 800498c:	080049c5 	.word	0x080049c5
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049cd 	.word	0x080049cd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	3308      	adds	r3, #8
 800499e:	2101      	movs	r1, #1
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 ffc3 	bl	800592c <RCCEx_PLL2_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049ac:	e00f      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	3328      	adds	r3, #40	@ 0x28
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 f86a 	bl	8005a90 <RCCEx_PLL3_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049c2:	e004      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ca:	e000      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80049cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049d6:	4bbf      	ldr	r3, [pc, #764]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049e4:	4abb      	ldr	r2, [pc, #748]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049e6:	430b      	orrs	r3, r1
 80049e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80049ea:	e003      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f002 0302 	and.w	r3, r2, #2
 8004a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4313      	orrs	r3, r2
 8004a12:	d041      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d824      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a71 	.word	0x08004a71
 8004a28:	08004a3d 	.word	0x08004a3d
 8004a2c:	08004a53 	.word	0x08004a53
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a71 	.word	0x08004a71
 8004a38:	08004a71 	.word	0x08004a71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a40:	3308      	adds	r3, #8
 8004a42:	2101      	movs	r1, #1
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 ff71 	bl	800592c <RCCEx_PLL2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a50:	e00f      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	3328      	adds	r3, #40	@ 0x28
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f818 	bl	8005a90 <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a66:	e004      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a6e:	e000      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a7a:	4b96      	ldr	r3, [pc, #600]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7e:	f023 0107 	bic.w	r1, r3, #7
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a88:	4a92      	ldr	r2, [pc, #584]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f002 0304 	and.w	r3, r2, #4
 8004aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d044      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	d825      	bhi.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8004acc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004b19 	.word	0x08004b19
 8004ad0:	08004ae5 	.word	0x08004ae5
 8004ad4:	08004afb 	.word	0x08004afb
 8004ad8:	08004b19 	.word	0x08004b19
 8004adc:	08004b19 	.word	0x08004b19
 8004ae0:	08004b19 	.word	0x08004b19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	3308      	adds	r3, #8
 8004aea:	2101      	movs	r1, #1
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 ff1d 	bl	800592c <RCCEx_PLL2_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004af8:	e00f      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afe:	3328      	adds	r3, #40	@ 0x28
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ffc4 	bl	8005a90 <RCCEx_PLL3_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b0e:	e004      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b16:	e000      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b22:	4b6c      	ldr	r3, [pc, #432]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b26:	f023 0107 	bic.w	r1, r3, #7
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b32:	4a68      	ldr	r2, [pc, #416]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b38:	e003      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	f002 0320 	and.w	r3, r2, #32
 8004b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	d055      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b6e:	d033      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b74:	d82c      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7a:	d02f      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b80:	d826      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b86:	d02b      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004b88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b8c:	d820      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b92:	d012      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b98:	d81a      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d022      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ba2:	d115      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba8:	3308      	adds	r3, #8
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 febd 	bl	800592c <RCCEx_PLL2_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bb8:	e015      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbe:	3328      	adds	r3, #40	@ 0x28
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 ff64 	bl	8005a90 <RCCEx_PLL3_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bce:	e00a      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bd6:	e006      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004bd8:	bf00      	nop
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bee:	4b39      	ldr	r3, [pc, #228]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	4a35      	ldr	r2, [pc, #212]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c04:	e003      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004c24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	d058      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c3a:	d033      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004c3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c40:	d82c      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c46:	d02f      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	d826      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c52:	d02b      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004c54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c58:	d820      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c5e:	d012      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c64:	d81a      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d022      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d115      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c74:	3308      	adds	r3, #8
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fe57 	bl	800592c <RCCEx_PLL2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c84:	e015      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8a:	3328      	adds	r3, #40	@ 0x28
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fefe 	bl	8005a90 <RCCEx_PLL3_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ca2:	e006      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ca4:	bf00      	nop
 8004ca6:	e004      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e002      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cac:	bf00      	nop
 8004cae:	e000      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cba:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cca:	4a02      	ldr	r2, [pc, #8]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cf6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d055      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d0c:	d033      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004d0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d12:	d82c      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d18:	d02f      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d1e:	d826      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d24:	d02b      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004d26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d2a:	d820      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d30:	d012      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d36:	d81a      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d022      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d40:	d115      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	3308      	adds	r3, #8
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fdee 	bl	800592c <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d56:	e015      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5c:	3328      	adds	r3, #40	@ 0x28
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fe95 	bl	8005a90 <RCCEx_PLL3_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d74:	e006      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d76:	bf00      	nop
 8004d78:	e004      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d8c:	4ba1      	ldr	r3, [pc, #644]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d9c:	4a9d      	ldr	r2, [pc, #628]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da2:	e003      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f002 0308 	and.w	r3, r2, #8
 8004db8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d01e      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dde:	3328      	adds	r3, #40	@ 0x28
 8004de0:	2102      	movs	r1, #2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fe54 	bl	8005a90 <RCCEx_PLL3_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004df4:	4b87      	ldr	r3, [pc, #540]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e04:	4a83      	ldr	r2, [pc, #524]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f002 0310 	and.w	r3, r2, #16
 8004e16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e24:	460b      	mov	r3, r1
 8004e26:	4313      	orrs	r3, r2
 8004e28:	d01e      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3c:	3328      	adds	r3, #40	@ 0x28
 8004e3e:	2102      	movs	r1, #2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fe25 	bl	8005a90 <RCCEx_PLL3_Config>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e52:	4b70      	ldr	r3, [pc, #448]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e62:	4a6c      	ldr	r2, [pc, #432]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e82:	460b      	mov	r3, r1
 8004e84:	4313      	orrs	r3, r2
 8004e86:	d03e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e94:	d022      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e9a:	d81b      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea4:	d00b      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eac:	3308      	adds	r3, #8
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fd3b 	bl	800592c <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ebc:	e00f      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	3328      	adds	r3, #40	@ 0x28
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fde2 	bl	8005a90 <RCCEx_PLL3_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ed2:	e004      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eda:	e000      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ef6:	4a47      	ldr	r2, [pc, #284]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004efc:	e003      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f14:	2300      	movs	r3, #0
 8004f16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f18:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	d03b      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f2e:	d01f      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f34:	d818      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3a:	d003      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004f3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f40:	d007      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f42:	e011      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f44:	4b33      	ldr	r3, [pc, #204]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	4a32      	ldr	r2, [pc, #200]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f50:	e00f      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f56:	3328      	adds	r3, #40	@ 0x28
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fd98 	bl	8005a90 <RCCEx_PLL3_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f66:	e004      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f6e:	e000      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f7a:	4b26      	ldr	r3, [pc, #152]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8a:	4a22      	ldr	r2, [pc, #136]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f90:	e003      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004fa6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fa8:	2300      	movs	r3, #0
 8004faa:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d034      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc4:	d007      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004fc6:	e011      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc8:	4b12      	ldr	r3, [pc, #72]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4a11      	ldr	r2, [pc, #68]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fd4:	e00e      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fda:	3308      	adds	r3, #8
 8004fdc:	2102      	movs	r1, #2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fca4 	bl	800592c <RCCEx_PLL2_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10d      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ffc:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005000:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800500a:	4a02      	ldr	r2, [pc, #8]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800500c:	430b      	orrs	r3, r1
 800500e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005010:	e006      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800502c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800502e:	2300      	movs	r3, #0
 8005030:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005032:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005036:	460b      	mov	r3, r1
 8005038:	4313      	orrs	r3, r2
 800503a:	d00c      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	3328      	adds	r3, #40	@ 0x28
 8005042:	2102      	movs	r1, #2
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fd23 	bl	8005a90 <RCCEx_PLL3_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005062:	663b      	str	r3, [r7, #96]	@ 0x60
 8005064:	2300      	movs	r3, #0
 8005066:	667b      	str	r3, [r7, #100]	@ 0x64
 8005068:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d038      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800507a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507e:	d018      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005084:	d811      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508a:	d014      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800508c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005090:	d80b      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d011      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800509a:	d106      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4bc3      	ldr	r3, [pc, #780]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	4ac2      	ldr	r2, [pc, #776]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80050a8:	e008      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b0:	e004      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050c4:	4bb9      	ldr	r3, [pc, #740]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d4:	4ab5      	ldr	r2, [pc, #724]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d6:	430b      	orrs	r3, r1
 80050d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80050da:	e003      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80050f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050f2:	2300      	movs	r3, #0
 80050f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80050fa:	460b      	mov	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005100:	4baa      	ldr	r3, [pc, #680]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005104:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510e:	4aa7      	ldr	r2, [pc, #668]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005110:	430b      	orrs	r3, r1
 8005112:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005120:	653b      	str	r3, [r7, #80]	@ 0x50
 8005122:	2300      	movs	r3, #0
 8005124:	657b      	str	r3, [r7, #84]	@ 0x54
 8005126:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005130:	4b9e      	ldr	r3, [pc, #632]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005140:	4a9a      	ldr	r2, [pc, #616]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005142:	430b      	orrs	r3, r1
 8005144:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005154:	2300      	movs	r3, #0
 8005156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005158:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800515c:	460b      	mov	r3, r1
 800515e:	4313      	orrs	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005162:	4b92      	ldr	r3, [pc, #584]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005166:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005170:	4a8e      	ldr	r2, [pc, #568]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005172:	430b      	orrs	r3, r1
 8005174:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005182:	643b      	str	r3, [r7, #64]	@ 0x40
 8005184:	2300      	movs	r3, #0
 8005186:	647b      	str	r3, [r7, #68]	@ 0x44
 8005188:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800518c:	460b      	mov	r3, r1
 800518e:	4313      	orrs	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005192:	4b86      	ldr	r3, [pc, #536]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	4a85      	ldr	r2, [pc, #532]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005198:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800519c:	6113      	str	r3, [r2, #16]
 800519e:	4b83      	ldr	r3, [pc, #524]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051a0:	6919      	ldr	r1, [r3, #16]
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051aa:	4a80      	ldr	r2, [pc, #512]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80051bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051be:	2300      	movs	r3, #0
 80051c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80051cc:	4b77      	ldr	r3, [pc, #476]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	4a74      	ldr	r2, [pc, #464]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051dc:	430b      	orrs	r3, r1
 80051de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80051ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051fc:	4b6b      	ldr	r3, [pc, #428]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005200:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800520c:	4a67      	ldr	r2, [pc, #412]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800520e:	430b      	orrs	r3, r1
 8005210:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	2100      	movs	r1, #0
 800521c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005224:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005228:	460b      	mov	r3, r1
 800522a:	4313      	orrs	r3, r2
 800522c:	d011      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005232:	3308      	adds	r3, #8
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fb78 	bl	800592c <RCCEx_PLL2_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800524e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	2100      	movs	r1, #0
 800525c:	6239      	str	r1, [r7, #32]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
 8005264:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d011      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005272:	3308      	adds	r3, #8
 8005274:	2101      	movs	r1, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fb58 	bl	800592c <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	2100      	movs	r1, #0
 800529c:	61b9      	str	r1, [r7, #24]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052a8:	460b      	mov	r3, r1
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d011      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	3308      	adds	r3, #8
 80052b4:	2102      	movs	r1, #2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb38 	bl	800592c <RCCEx_PLL2_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	2100      	movs	r1, #0
 80052dc:	6139      	str	r1, [r7, #16]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052e8:	460b      	mov	r3, r1
 80052ea:	4313      	orrs	r3, r2
 80052ec:	d011      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f2:	3328      	adds	r3, #40	@ 0x28
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fbca 	bl	8005a90 <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	2100      	movs	r1, #0
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005328:	460b      	mov	r3, r1
 800532a:	4313      	orrs	r3, r2
 800532c:	d011      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005332:	3328      	adds	r3, #40	@ 0x28
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fbaa 	bl	8005a90 <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	2100      	movs	r1, #0
 800535c:	6039      	str	r1, [r7, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005368:	460b      	mov	r3, r1
 800536a:	4313      	orrs	r3, r2
 800536c:	d011      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005372:	3328      	adds	r3, #40	@ 0x28
 8005374:	2102      	movs	r1, #2
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fb8a 	bl	8005a90 <RCCEx_PLL3_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005392:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80053a6:	46bd      	mov	sp, r7
 80053a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ac:	58024400 	.word	0x58024400

080053b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053b4:	f7fe fd96 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4904      	ldr	r1, [pc, #16]	@ (80053d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	58024400 	.word	0x58024400
 80053d8:	08009ac4 	.word	0x08009ac4

080053dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	@ 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053e4:	4ba1      	ldr	r3, [pc, #644]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80053ee:	4b9f      	ldr	r3, [pc, #636]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	0b1b      	lsrs	r3, r3, #12
 80053f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80053fa:	4b9c      	ldr	r3, [pc, #624]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005406:	4b99      	ldr	r3, [pc, #612]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8111 	beq.w	800564c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b02      	cmp	r3, #2
 800542e:	f000 8083 	beq.w	8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f200 80a1 	bhi.w	800557c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d056      	beq.n	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005446:	e099      	b.n	800557c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005448:	4b88      	ldr	r3, [pc, #544]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02d      	beq.n	80054b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005454:	4b85      	ldr	r3, [pc, #532]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	08db      	lsrs	r3, r3, #3
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	4a84      	ldr	r2, [pc, #528]	@ (8005670 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
 8005464:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547e:	4b7b      	ldr	r3, [pc, #492]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005492:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054ae:	e087      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005678 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c2:	4b6a      	ldr	r3, [pc, #424]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054f2:	e065      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005506:	4b59      	ldr	r3, [pc, #356]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005516:	ed97 6a03 	vldr	s12, [r7, #12]
 800551a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800551e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005536:	e043      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005542:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554a:	4b48      	ldr	r3, [pc, #288]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555a:	ed97 6a03 	vldr	s12, [r7, #12]
 800555e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800556e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557a:	e021      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800558a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558e:	4b37      	ldr	r3, [pc, #220]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559e:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80055c0:	4b2a      	ldr	r3, [pc, #168]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	0a5b      	lsrs	r3, r3, #9
 80055c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055da:	edd7 6a07 	vldr	s13, [r7, #28]
 80055de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e6:	ee17 2a90 	vmov	r2, s15
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80055ee:	4b1f      	ldr	r3, [pc, #124]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005600:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005608:	edd7 6a07 	vldr	s13, [r7, #28]
 800560c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005614:	ee17 2a90 	vmov	r2, s15
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800561c:	4b13      	ldr	r3, [pc, #76]	@ (800566c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	0e1b      	lsrs	r3, r3, #24
 8005622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005636:	edd7 6a07 	vldr	s13, [r7, #28]
 800563a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005642:	ee17 2a90 	vmov	r2, s15
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800564a:	e008      	b.n	800565e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
}
 800565e:	bf00      	nop
 8005660:	3724      	adds	r7, #36	@ 0x24
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	03d09000 	.word	0x03d09000
 8005674:	46000000 	.word	0x46000000
 8005678:	4c742400 	.word	0x4c742400
 800567c:	4a742400 	.word	0x4a742400
 8005680:	4bbebc20 	.word	0x4bbebc20

08005684 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005684:	b480      	push	{r7}
 8005686:	b089      	sub	sp, #36	@ 0x24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800568c:	4ba1      	ldr	r3, [pc, #644]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800568e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005696:	4b9f      	ldr	r3, [pc, #636]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569a:	0d1b      	lsrs	r3, r3, #20
 800569c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056a2:	4b9c      	ldr	r3, [pc, #624]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80056ae:	4b99      	ldr	r3, [pc, #612]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	08db      	lsrs	r3, r3, #3
 80056b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8111 	beq.w	80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	f000 8083 	beq.w	80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	f200 80a1 	bhi.w	8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d056      	beq.n	800579c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056ee:	e099      	b.n	8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f0:	4b88      	ldr	r3, [pc, #544]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d02d      	beq.n	8005758 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056fc:	4b85      	ldr	r3, [pc, #532]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	08db      	lsrs	r3, r3, #3
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	4a84      	ldr	r2, [pc, #528]	@ (8005918 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005726:	4b7b      	ldr	r3, [pc, #492]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005736:	ed97 6a03 	vldr	s12, [r7, #12]
 800573a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800591c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800573e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800574a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005752:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005756:	e087      	b.n	8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005762:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005920 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576a:	4b6a      	ldr	r3, [pc, #424]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577a:	ed97 6a03 	vldr	s12, [r7, #12]
 800577e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800591c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800578e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800579a:	e065      	b.n	8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ae:	4b59      	ldr	r3, [pc, #356]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057be:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800591c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057de:	e043      	b.n	8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f2:	4b48      	ldr	r3, [pc, #288]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005802:	ed97 6a03 	vldr	s12, [r7, #12]
 8005806:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800591c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800580a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005822:	e021      	b.n	8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	4b37      	ldr	r3, [pc, #220]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	ed97 6a03 	vldr	s12, [r7, #12]
 800584a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800591c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005866:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005868:	4b2a      	ldr	r3, [pc, #168]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	0a5b      	lsrs	r3, r3, #9
 800586e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800587e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005882:	edd7 6a07 	vldr	s13, [r7, #28]
 8005886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800588a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588e:	ee17 2a90 	vmov	r2, s15
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005896:	4b1f      	ldr	r3, [pc, #124]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	0c1b      	lsrs	r3, r3, #16
 800589c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058bc:	ee17 2a90 	vmov	r2, s15
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80058c4:	4b13      	ldr	r3, [pc, #76]	@ (8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c8:	0e1b      	lsrs	r3, r3, #24
 80058ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058de:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ea:	ee17 2a90 	vmov	r2, s15
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058f2:	e008      	b.n	8005906 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	609a      	str	r2, [r3, #8]
}
 8005906:	bf00      	nop
 8005908:	3724      	adds	r7, #36	@ 0x24
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	58024400 	.word	0x58024400
 8005918:	03d09000 	.word	0x03d09000
 800591c:	46000000 	.word	0x46000000
 8005920:	4c742400 	.word	0x4c742400
 8005924:	4a742400 	.word	0x4a742400
 8005928:	4bbebc20 	.word	0x4bbebc20

0800592c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800593a:	4b53      	ldr	r3, [pc, #332]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 800593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b03      	cmp	r3, #3
 8005944:	d101      	bne.n	800594a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e099      	b.n	8005a7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800594a:	4b4f      	ldr	r3, [pc, #316]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a4e      	ldr	r2, [pc, #312]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005950:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005956:	f7fc fc95 	bl	8002284 <HAL_GetTick>
 800595a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800595c:	e008      	b.n	8005970 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800595e:	f7fc fc91 	bl	8002284 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e086      	b.n	8005a7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005970:	4b45      	ldr	r3, [pc, #276]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f0      	bne.n	800595e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800597c:	4b42      	ldr	r3, [pc, #264]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	031b      	lsls	r3, r3, #12
 800598a:	493f      	ldr	r1, [pc, #252]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 800598c:	4313      	orrs	r3, r2
 800598e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	3b01      	subs	r3, #1
 8005996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	3b01      	subs	r3, #1
 80059a0:	025b      	lsls	r3, r3, #9
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	061b      	lsls	r3, r3, #24
 80059bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059c0:	4931      	ldr	r1, [pc, #196]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059c6:	4b30      	ldr	r3, [pc, #192]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	492d      	ldr	r1, [pc, #180]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	f023 0220 	bic.w	r2, r3, #32
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	4928      	ldr	r1, [pc, #160]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059ea:	4b27      	ldr	r3, [pc, #156]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	4a26      	ldr	r2, [pc, #152]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059f0:	f023 0310 	bic.w	r3, r3, #16
 80059f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059f6:	4b24      	ldr	r3, [pc, #144]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059fa:	4b24      	ldr	r3, [pc, #144]	@ (8005a8c <RCCEx_PLL2_Config+0x160>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	69d2      	ldr	r2, [r2, #28]
 8005a02:	00d2      	lsls	r2, r2, #3
 8005a04:	4920      	ldr	r1, [pc, #128]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a10:	f043 0310 	orr.w	r3, r3, #16
 8005a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	4a19      	ldr	r2, [pc, #100]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a28:	e00f      	b.n	8005a4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d106      	bne.n	8005a3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a30:	4b15      	ldr	r3, [pc, #84]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	4a14      	ldr	r2, [pc, #80]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a3c:	e005      	b.n	8005a4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a3e:	4b12      	ldr	r3, [pc, #72]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	4a11      	ldr	r2, [pc, #68]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a56:	f7fc fc15 	bl	8002284 <HAL_GetTick>
 8005a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a5c:	e008      	b.n	8005a70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a5e:	f7fc fc11 	bl	8002284 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e006      	b.n	8005a7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a70:	4b05      	ldr	r3, [pc, #20]	@ (8005a88 <RCCEx_PLL2_Config+0x15c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	ffff0007 	.word	0xffff0007

08005a90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a9e:	4b53      	ldr	r3, [pc, #332]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d101      	bne.n	8005aae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e099      	b.n	8005be2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005aae:	4b4f      	ldr	r3, [pc, #316]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a4e      	ldr	r2, [pc, #312]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aba:	f7fc fbe3 	bl	8002284 <HAL_GetTick>
 8005abe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ac0:	e008      	b.n	8005ad4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ac2:	f7fc fbdf 	bl	8002284 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e086      	b.n	8005be2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ad4:	4b45      	ldr	r3, [pc, #276]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ae0:	4b42      	ldr	r3, [pc, #264]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	051b      	lsls	r3, r3, #20
 8005aee:	493f      	ldr	r1, [pc, #252]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	025b      	lsls	r3, r3, #9
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	061b      	lsls	r3, r3, #24
 8005b20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b24:	4931      	ldr	r1, [pc, #196]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b2a:	4b30      	ldr	r3, [pc, #192]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	492d      	ldr	r1, [pc, #180]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	4928      	ldr	r1, [pc, #160]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b4e:	4b27      	ldr	r3, [pc, #156]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b52:	4a26      	ldr	r2, [pc, #152]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b5e:	4b24      	ldr	r3, [pc, #144]	@ (8005bf0 <RCCEx_PLL3_Config+0x160>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	69d2      	ldr	r2, [r2, #28]
 8005b66:	00d2      	lsls	r2, r2, #3
 8005b68:	4920      	ldr	r1, [pc, #128]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	4a1e      	ldr	r2, [pc, #120]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b80:	4b1a      	ldr	r3, [pc, #104]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	4a19      	ldr	r2, [pc, #100]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b8c:	e00f      	b.n	8005bae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d106      	bne.n	8005ba2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b94:	4b15      	ldr	r3, [pc, #84]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a14      	ldr	r2, [pc, #80]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ba0:	e005      	b.n	8005bae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ba2:	4b12      	ldr	r3, [pc, #72]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	4a11      	ldr	r2, [pc, #68]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bae:	4b0f      	ldr	r3, [pc, #60]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bba:	f7fc fb63 	bl	8002284 <HAL_GetTick>
 8005bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bc0:	e008      	b.n	8005bd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bc2:	f7fc fb5f 	bl	8002284 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e006      	b.n	8005be2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bd4:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <RCCEx_PLL3_Config+0x15c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0f0      	beq.n	8005bc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	ffff0007 	.word	0xffff0007

08005bf4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e10f      	b.n	8005e26 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a87      	ldr	r2, [pc, #540]	@ (8005e30 <HAL_SPI_Init+0x23c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00f      	beq.n	8005c36 <HAL_SPI_Init+0x42>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a86      	ldr	r2, [pc, #536]	@ (8005e34 <HAL_SPI_Init+0x240>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00a      	beq.n	8005c36 <HAL_SPI_Init+0x42>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a84      	ldr	r2, [pc, #528]	@ (8005e38 <HAL_SPI_Init+0x244>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d005      	beq.n	8005c36 <HAL_SPI_Init+0x42>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d901      	bls.n	8005c36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0f7      	b.n	8005e26 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 f910 	bl	8006e5c <SPI_GetPacketSize>
 8005c3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7b      	ldr	r2, [pc, #492]	@ (8005e30 <HAL_SPI_Init+0x23c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00c      	beq.n	8005c62 <HAL_SPI_Init+0x6e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a79      	ldr	r2, [pc, #484]	@ (8005e34 <HAL_SPI_Init+0x240>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <HAL_SPI_Init+0x6e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a78      	ldr	r2, [pc, #480]	@ (8005e38 <HAL_SPI_Init+0x244>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d002      	beq.n	8005c62 <HAL_SPI_Init+0x6e>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d811      	bhi.n	8005c86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c66:	4a72      	ldr	r2, [pc, #456]	@ (8005e30 <HAL_SPI_Init+0x23c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a70      	ldr	r2, [pc, #448]	@ (8005e34 <HAL_SPI_Init+0x240>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_SPI_Init+0x8c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a6f      	ldr	r2, [pc, #444]	@ (8005e38 <HAL_SPI_Init+0x244>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d104      	bne.n	8005c8a <HAL_SPI_Init+0x96>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d901      	bls.n	8005c8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e0cd      	b.n	8005e26 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb fdd4 	bl	800184c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005cc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cd0:	d119      	bne.n	8005d06 <HAL_SPI_Init+0x112>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cda:	d103      	bne.n	8005ce4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10c      	bne.n	8005d06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cf4:	d107      	bne.n	8005d06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00f      	beq.n	8005d32 <HAL_SPI_Init+0x13e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d90b      	bls.n	8005d32 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e007      	b.n	8005d42 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d54:	ea42 0103 	orr.w	r1, r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da2:	ea42 0103 	orr.w	r1, r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d113      	bne.n	8005de2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dcc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005de0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40013000 	.word	0x40013000
 8005e34:	40003800 	.word	0x40003800
 8005e38:	40003c00 	.word	0x40003c00

08005e3c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3320      	adds	r3, #32
 8005e52:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e54:	f7fc fa16 	bl	8002284 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d001      	beq.n	8005e6a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	e1d1      	b.n	800620e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_SPI_Transmit+0x3a>
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e1c9      	b.n	800620e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_SPI_Transmit+0x4c>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e1c2      	b.n	800620e <HAL_SPI_Transmit+0x3d2>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2203      	movs	r2, #3
 8005e94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88fa      	ldrh	r2, [r7, #6]
 8005eb2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005ee0:	d108      	bne.n	8005ef4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	e009      	b.n	8005f08 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005f06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4b96      	ldr	r3, [pc, #600]	@ (8006168 <HAL_SPI_Transmit+0x32c>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	88f9      	ldrh	r1, [r7, #6]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f34:	d107      	bne.n	8005f46 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b0f      	cmp	r3, #15
 8005f4c:	d947      	bls.n	8005fde <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f4e:	e03f      	b.n	8005fd0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d114      	bne.n	8005f88 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005f86:	e023      	b.n	8005fd0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f88:	f7fc f97c 	bl	8002284 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d803      	bhi.n	8005fa0 <HAL_SPI_Transmit+0x164>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d102      	bne.n	8005fa6 <HAL_SPI_Transmit+0x16a>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d114      	bne.n	8005fd0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fe8a 	bl	8006cc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e11e      	b.n	800620e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1b9      	bne.n	8005f50 <HAL_SPI_Transmit+0x114>
 8005fdc:	e0f1      	b.n	80061c2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b07      	cmp	r3, #7
 8005fe4:	f240 80e6 	bls.w	80061b4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005fe8:	e05d      	b.n	80060a6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d132      	bne.n	800605e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d918      	bls.n	8006036 <HAL_SPI_Transmit+0x1fa>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d014      	beq.n	8006036 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b02      	subs	r3, #2
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006034:	e037      	b.n	80060a6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603a:	881a      	ldrh	r2, [r3, #0]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006044:	1c9a      	adds	r2, r3, #2
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800605c:	e023      	b.n	80060a6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605e:	f7fc f911 	bl	8002284 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d803      	bhi.n	8006076 <HAL_SPI_Transmit+0x23a>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d102      	bne.n	800607c <HAL_SPI_Transmit+0x240>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d114      	bne.n	80060a6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fe1f 	bl	8006cc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006088:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e0b3      	b.n	800620e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d19b      	bne.n	8005fea <HAL_SPI_Transmit+0x1ae>
 80060b2:	e086      	b.n	80061c2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d154      	bne.n	800616c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d918      	bls.n	8006100 <HAL_SPI_Transmit+0x2c4>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d2:	2b40      	cmp	r3, #64	@ 0x40
 80060d4:	d914      	bls.n	8006100 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b04      	subs	r3, #4
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80060fe:	e059      	b.n	80061b4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d917      	bls.n	800613c <HAL_SPI_Transmit+0x300>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d013      	beq.n	800613c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006118:	881a      	ldrh	r2, [r3, #0]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b02      	subs	r3, #2
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800613a:	e03b      	b.n	80061b4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3320      	adds	r3, #32
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006166:	e025      	b.n	80061b4 <HAL_SPI_Transmit+0x378>
 8006168:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800616c:	f7fc f88a 	bl	8002284 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d803      	bhi.n	8006184 <HAL_SPI_Transmit+0x348>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d102      	bne.n	800618a <HAL_SPI_Transmit+0x34e>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d114      	bne.n	80061b4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fd98 	bl	8006cc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006196:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e02c      	b.n	800620e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f47f af79 	bne.w	80060b4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	2108      	movs	r1, #8
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fe17 	bl	8006e00 <SPI_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fd69 	bl	8006cc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800620c:	2300      	movs	r3, #0
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop

08006218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	@ 0x38
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3320      	adds	r3, #32
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3330      	adds	r3, #48	@ 0x30
 8006234:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	b29b      	uxth	r3, r3
 800623e:	3301      	adds	r3, #1
 8006240:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006242:	f7fc f81f 	bl	8002284 <HAL_GetTick>
 8006246:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006248:	887b      	ldrh	r3, [r7, #2]
 800624a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d001      	beq.n	8006260 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
 800625e:	e310      	b.n	8006882 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x5a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x5a>
 800626c:	887b      	ldrh	r3, [r7, #2]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e305      	b.n	8006882 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x6c>
 8006280:	2302      	movs	r3, #2
 8006282:	e2fe      	b.n	8006882 <HAL_SPI_TransmitReceive+0x66a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2205      	movs	r2, #5
 8006290:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	887a      	ldrh	r2, [r7, #2]
 80062a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	887a      	ldrh	r2, [r7, #2]
 80062ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	887a      	ldrh	r2, [r7, #2]
 80062bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	887a      	ldrh	r2, [r7, #2]
 80062c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80062e2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a70      	ldr	r2, [pc, #448]	@ (80064ac <HAL_SPI_TransmitReceive+0x294>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_SPI_TransmitReceive+0xea>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a6f      	ldr	r2, [pc, #444]	@ (80064b0 <HAL_SPI_TransmitReceive+0x298>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_SPI_TransmitReceive+0xea>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a6d      	ldr	r2, [pc, #436]	@ (80064b4 <HAL_SPI_TransmitReceive+0x29c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d102      	bne.n	8006308 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006302:	2310      	movs	r3, #16
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006306:	e001      	b.n	800630c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006308:	2308      	movs	r3, #8
 800630a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4b69      	ldr	r3, [pc, #420]	@ (80064b8 <HAL_SPI_TransmitReceive+0x2a0>)
 8006314:	4013      	ands	r3, r2
 8006316:	8879      	ldrh	r1, [r7, #2]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	430b      	orrs	r3, r1
 800631e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006338:	d107      	bne.n	800634a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006348:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b0f      	cmp	r3, #15
 8006350:	f240 80a2 	bls.w	8006498 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800635a:	e094      	b.n	8006486 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d120      	bne.n	80063ac <HAL_SPI_TransmitReceive+0x194>
 800636a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01d      	beq.n	80063ac <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006370:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006372:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006378:	429a      	cmp	r2, r3
 800637a:	d217      	bcs.n	80063ac <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638c:	1d1a      	adds	r2, r3, #4
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063aa:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80063b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d065      	beq.n	8006486 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d118      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063d2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80063f8:	e045      	b.n	8006486 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80063fa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80063fc:	8bfb      	ldrh	r3, [r7, #30]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d21d      	bcs.n	800643e <HAL_SPI_TransmitReceive+0x226>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d018      	beq.n	800643e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006414:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006416:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800641c:	1d1a      	adds	r2, r3, #4
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800643a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800643c:	e023      	b.n	8006486 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800643e:	f7fb ff21 	bl	8002284 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800644a:	429a      	cmp	r2, r3
 800644c:	d803      	bhi.n	8006456 <HAL_SPI_TransmitReceive+0x23e>
 800644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d102      	bne.n	800645c <HAL_SPI_TransmitReceive+0x244>
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d114      	bne.n	8006486 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fc2f 	bl	8006cc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006468:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e1fd      	b.n	8006882 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006486:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f af67 	bne.w	800635c <HAL_SPI_TransmitReceive+0x144>
 800648e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	f47f af63 	bne.w	800635c <HAL_SPI_TransmitReceive+0x144>
 8006496:	e1ce      	b.n	8006836 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b07      	cmp	r3, #7
 800649e:	f240 81c2 	bls.w	8006826 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80064a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80064a8:	e0c9      	b.n	800663e <HAL_SPI_TransmitReceive+0x426>
 80064aa:	bf00      	nop
 80064ac:	40013000 	.word	0x40013000
 80064b0:	40003800 	.word	0x40003800
 80064b4:	40003c00 	.word	0x40003c00
 80064b8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d11f      	bne.n	800650a <HAL_SPI_TransmitReceive+0x2f2>
 80064ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01c      	beq.n	800650a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80064d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80064d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80064d8:	429a      	cmp	r2, r3
 80064da:	d216      	bcs.n	800650a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ea:	1c9a      	adds	r2, r3, #2
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006508:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006512:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8092 	beq.w	800663e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b01      	cmp	r3, #1
 8006526:	d118      	bne.n	800655a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	8812      	ldrh	r2, [r2, #0]
 8006530:	b292      	uxth	r2, r2
 8006532:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006538:	1c9a      	adds	r2, r3, #2
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006556:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006558:	e071      	b.n	800663e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800655a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800655c:	8bfb      	ldrh	r3, [r7, #30]
 800655e:	429a      	cmp	r2, r3
 8006560:	d228      	bcs.n	80065b4 <HAL_SPI_TransmitReceive+0x39c>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d023      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006570:	6a3a      	ldr	r2, [r7, #32]
 8006572:	8812      	ldrh	r2, [r2, #0]
 8006574:	b292      	uxth	r2, r2
 8006576:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800657c:	1c9a      	adds	r2, r3, #2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006586:	6a3a      	ldr	r2, [r7, #32]
 8006588:	8812      	ldrh	r2, [r2, #0]
 800658a:	b292      	uxth	r2, r2
 800658c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b02      	subs	r3, #2
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065b2:	e044      	b.n	800663e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80065b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d11d      	bne.n	80065f6 <HAL_SPI_TransmitReceive+0x3de>
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d018      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c8:	6a3a      	ldr	r2, [r7, #32]
 80065ca:	8812      	ldrh	r2, [r2, #0]
 80065cc:	b292      	uxth	r2, r2
 80065ce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d4:	1c9a      	adds	r2, r3, #2
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065f4:	e023      	b.n	800663e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f6:	f7fb fe45 	bl	8002284 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006602:	429a      	cmp	r2, r3
 8006604:	d803      	bhi.n	800660e <HAL_SPI_TransmitReceive+0x3f6>
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d102      	bne.n	8006614 <HAL_SPI_TransmitReceive+0x3fc>
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	2b00      	cmp	r3, #0
 8006612:	d114      	bne.n	800663e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fb53 	bl	8006cc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006620:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e121      	b.n	8006882 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800663e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006640:	2b00      	cmp	r3, #0
 8006642:	f47f af3b 	bne.w	80064bc <HAL_SPI_TransmitReceive+0x2a4>
 8006646:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	f47f af37 	bne.w	80064bc <HAL_SPI_TransmitReceive+0x2a4>
 800664e:	e0f2      	b.n	8006836 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b02      	cmp	r3, #2
 800665c:	d121      	bne.n	80066a2 <HAL_SPI_TransmitReceive+0x48a>
 800665e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01e      	beq.n	80066a2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006664:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006666:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800666c:	429a      	cmp	r2, r3
 800666e:	d218      	bcs.n	80066a2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3320      	adds	r3, #32
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80066aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80ba 	beq.w	8006826 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d11b      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066cc:	7812      	ldrb	r2, [r2, #0]
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066f6:	e096      	b.n	8006826 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80066f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80066fa:	8bfb      	ldrh	r3, [r7, #30]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d24a      	bcs.n	8006796 <HAL_SPI_TransmitReceive+0x57e>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d045      	beq.n	8006796 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006732:	7812      	ldrb	r2, [r2, #0]
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800674e:	7812      	ldrb	r2, [r2, #0]
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800676a:	7812      	ldrb	r2, [r2, #0]
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b04      	subs	r3, #4
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006792:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006794:	e047      	b.n	8006826 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006796:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006798:	2b03      	cmp	r3, #3
 800679a:	d820      	bhi.n	80067de <HAL_SPI_TransmitReceive+0x5c6>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01b      	beq.n	80067de <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80067dc:	e023      	b.n	8006826 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067de:	f7fb fd51 	bl	8002284 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d803      	bhi.n	80067f6 <HAL_SPI_TransmitReceive+0x5de>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d102      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x5e4>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d114      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fa5f 	bl	8006cc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006808:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e02d      	b.n	8006882 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006826:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006828:	2b00      	cmp	r3, #0
 800682a:	f47f af11 	bne.w	8006650 <HAL_SPI_TransmitReceive+0x438>
 800682e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006830:	2b00      	cmp	r3, #0
 8006832:	f47f af0d 	bne.w	8006650 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	2200      	movs	r2, #0
 800683e:	2108      	movs	r1, #8
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fadd 	bl	8006e00 <SPI_WaitOnFlagUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fa2f 	bl	8006cc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006880:	2300      	movs	r3, #0
  }
}
 8006882:	4618      	mov	r0, r3
 8006884:	3730      	adds	r7, #48	@ 0x30
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	@ 0x28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	4013      	ands	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80068be:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3330      	adds	r3, #48	@ 0x30
 80068c6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d010      	beq.n	80068f4 <HAL_SPI_IRQHandler+0x68>
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ea:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f9c3 	bl	8006c78 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80068f2:	e192      	b.n	8006c1a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d113      	bne.n	8006926 <HAL_SPI_IRQHandler+0x9a>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10e      	bne.n	8006926 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800690e:	2b00      	cmp	r3, #0
 8006910:	d009      	beq.n	8006926 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
    hspi->RxISR(hspi);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
    handled = 1UL;
 8006922:	2301      	movs	r3, #1
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10f      	bne.n	8006950 <HAL_SPI_IRQHandler+0xc4>
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	4798      	blx	r3
    handled = 1UL;
 800694c:	2301      	movs	r3, #1
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10f      	bne.n	800697a <HAL_SPI_IRQHandler+0xee>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800696a:	2b00      	cmp	r3, #0
 800696c:	d105      	bne.n	800697a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
    handled = 1UL;
 8006976:	2301      	movs	r3, #1
 8006978:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8147 	bne.w	8006c10 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 808b 	beq.w	8006aa4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0208 	orr.w	r2, r2, #8
 800699c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0210 	orr.w	r2, r2, #16
 80069ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069bc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0208 	bic.w	r2, r2, #8
 80069cc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d13d      	bne.n	8006a58 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80069dc:	e036      	b.n	8006a4c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2b0f      	cmp	r3, #15
 80069e4:	d90b      	bls.n	80069fe <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069f0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	665a      	str	r2, [r3, #100]	@ 0x64
 80069fc:	e01d      	b.n	8006a3a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2b07      	cmp	r3, #7
 8006a04:	d90b      	bls.n	8006a1e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	8812      	ldrh	r2, [r2, #0]
 8006a0e:	b292      	uxth	r2, r2
 8006a10:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	665a      	str	r2, [r3, #100]	@ 0x64
 8006a1c:	e00d      	b.n	8006a3a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a2a:	7812      	ldrb	r2, [r2, #0]
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1c2      	bne.n	80069de <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f931 	bl	8006cc0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f8f7 	bl	8006c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a76:	e0d0      	b.n	8006c1a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d103      	bne.n	8006a86 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8e6 	bl	8006c50 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006a84:	e0c6      	b.n	8006c14 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006a86:	7cfb      	ldrb	r3, [r7, #19]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d103      	bne.n	8006a94 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f8d5 	bl	8006c3c <HAL_SPI_RxCpltCallback>
    return;
 8006a92:	e0bf      	b.n	8006c14 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	f040 80bc 	bne.w	8006c14 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8c3 	bl	8006c28 <HAL_SPI_TxCpltCallback>
    return;
 8006aa2:	e0b7      	b.n	8006c14 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80b5 	beq.w	8006c1a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00f      	beq.n	8006ada <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac0:	f043 0204 	orr.w	r2, r3, #4
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ad8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00f      	beq.n	8006b04 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aea:	f043 0201 	orr.w	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b02:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00f      	beq.n	8006b2e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b14:	f043 0208 	orr.w	r2, r3, #8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00f      	beq.n	8006b58 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0220 	orr.w	r2, r2, #32
 8006b56:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d05a      	beq.n	8006c18 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6919      	ldr	r1, [r3, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	4b28      	ldr	r3, [pc, #160]	@ (8006c20 <HAL_SPI_IRQHandler+0x394>)
 8006b7e:	400b      	ands	r3, r1
 8006b80:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b8c:	d138      	bne.n	8006c00 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006b9c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d013      	beq.n	8006bce <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006baa:	4a1e      	ldr	r2, [pc, #120]	@ (8006c24 <HAL_SPI_IRQHandler+0x398>)
 8006bac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fb fd2a 	bl	800260c <HAL_DMA_Abort_IT>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d020      	beq.n	8006c18 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bda:	4a12      	ldr	r2, [pc, #72]	@ (8006c24 <HAL_SPI_IRQHandler+0x398>)
 8006bdc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fb fd12 	bl	800260c <HAL_DMA_Abort_IT>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d014      	beq.n	8006c18 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bf4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006bfe:	e00b      	b.n	8006c18 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f82b 	bl	8006c64 <HAL_SPI_ErrorCallback>
    return;
 8006c0e:	e003      	b.n	8006c18 <HAL_SPI_IRQHandler+0x38c>
    return;
 8006c10:	bf00      	nop
 8006c12:	e002      	b.n	8006c1a <HAL_SPI_IRQHandler+0x38e>
    return;
 8006c14:	bf00      	nop
 8006c16:	e000      	b.n	8006c1a <HAL_SPI_IRQHandler+0x38e>
    return;
 8006c18:	bf00      	nop
  }
}
 8006c1a:	3728      	adds	r7, #40	@ 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	fffffc94 	.word	0xfffffc94
 8006c24:	08006c8d 	.word	0x08006c8d

08006c28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff ffd6 	bl	8006c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0208 	orr.w	r2, r2, #8
 8006cde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0210 	orr.w	r2, r2, #16
 8006cee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6919      	ldr	r1, [r3, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006dfc <SPI_CloseTransfer+0x13c>)
 8006d0c:	400b      	ands	r3, r1
 8006d0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d014      	beq.n	8006d56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00f      	beq.n	8006d56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0220 	orr.w	r2, r2, #32
 8006d54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d014      	beq.n	8006d8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00f      	beq.n	8006d8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d72:	f043 0204 	orr.w	r2, r3, #4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00f      	beq.n	8006db6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d9c:	f043 0201 	orr.w	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006db4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00f      	beq.n	8006de0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dc6:	f043 0208 	orr.w	r2, r3, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dde:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	fffffc90 	.word	0xfffffc90

08006e00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e10:	e010      	b.n	8006e34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e12:	f7fb fa37 	bl	8002284 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d803      	bhi.n	8006e2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e28:	d102      	bne.n	8006e30 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e00f      	b.n	8006e54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	bf0c      	ite	eq
 8006e44:	2301      	moveq	r3, #1
 8006e46:	2300      	movne	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d0df      	beq.n	8006e12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	3307      	adds	r3, #7
 8006e7a:	08db      	lsrs	r3, r3, #3
 8006e7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e042      	b.n	8006f2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f83b 	bl	8006f32 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2224      	movs	r2, #36	@ 0x24
 8006ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fe29 	bl	8007b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8be 	bl	8007064 <UART_SetConfig>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e01b      	b.n	8006f2a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0201 	orr.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fea8 	bl	8007c78 <UART_CheckIdleState>
 8006f28:	4603      	mov	r3, r0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b08a      	sub	sp, #40	@ 0x28
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d17b      	bne.n	8007058 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <HAL_UART_Transmit+0x26>
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e074      	b.n	800705a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2221      	movs	r2, #33	@ 0x21
 8006f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f80:	f7fb f980 	bl	8002284 <HAL_GetTick>
 8006f84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f9e:	d108      	bne.n	8006fb2 <HAL_UART_Transmit+0x6c>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	e003      	b.n	8006fba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fba:	e030      	b.n	800701e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2180      	movs	r1, #128	@ 0x80
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 ff00 	bl	8007dcc <UART_WaitOnFlagUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e03d      	b.n	800705a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10b      	bne.n	8006ffc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	e007      	b.n	800700c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	781a      	ldrb	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	3301      	adds	r3, #1
 800700a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1c8      	bne.n	8006fbc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2200      	movs	r2, #0
 8007032:	2140      	movs	r1, #64	@ 0x40
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fec9 	bl	8007dcc <UART_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e006      	b.n	800705a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	e000      	b.n	800705a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007068:	b092      	sub	sp, #72	@ 0x48
 800706a:	af00      	add	r7, sp, #0
 800706c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	431a      	orrs	r2, r3
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	431a      	orrs	r2, r3
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4313      	orrs	r3, r2
 800708a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4bbe      	ldr	r3, [pc, #760]	@ (800738c <UART_SetConfig+0x328>)
 8007094:	4013      	ands	r3, r2
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	6812      	ldr	r2, [r2, #0]
 800709a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800709c:	430b      	orrs	r3, r1
 800709e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4ab3      	ldr	r2, [pc, #716]	@ (8007390 <UART_SetConfig+0x32c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070cc:	4313      	orrs	r3, r2
 80070ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	4baf      	ldr	r3, [pc, #700]	@ (8007394 <UART_SetConfig+0x330>)
 80070d8:	4013      	ands	r3, r2
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	f023 010f 	bic.w	r1, r3, #15
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4aa6      	ldr	r2, [pc, #664]	@ (8007398 <UART_SetConfig+0x334>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d177      	bne.n	80071f4 <UART_SetConfig+0x190>
 8007104:	4ba5      	ldr	r3, [pc, #660]	@ (800739c <UART_SetConfig+0x338>)
 8007106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007108:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800710c:	2b28      	cmp	r3, #40	@ 0x28
 800710e:	d86d      	bhi.n	80071ec <UART_SetConfig+0x188>
 8007110:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <UART_SetConfig+0xb4>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	080071bd 	.word	0x080071bd
 800711c:	080071ed 	.word	0x080071ed
 8007120:	080071ed 	.word	0x080071ed
 8007124:	080071ed 	.word	0x080071ed
 8007128:	080071ed 	.word	0x080071ed
 800712c:	080071ed 	.word	0x080071ed
 8007130:	080071ed 	.word	0x080071ed
 8007134:	080071ed 	.word	0x080071ed
 8007138:	080071c5 	.word	0x080071c5
 800713c:	080071ed 	.word	0x080071ed
 8007140:	080071ed 	.word	0x080071ed
 8007144:	080071ed 	.word	0x080071ed
 8007148:	080071ed 	.word	0x080071ed
 800714c:	080071ed 	.word	0x080071ed
 8007150:	080071ed 	.word	0x080071ed
 8007154:	080071ed 	.word	0x080071ed
 8007158:	080071cd 	.word	0x080071cd
 800715c:	080071ed 	.word	0x080071ed
 8007160:	080071ed 	.word	0x080071ed
 8007164:	080071ed 	.word	0x080071ed
 8007168:	080071ed 	.word	0x080071ed
 800716c:	080071ed 	.word	0x080071ed
 8007170:	080071ed 	.word	0x080071ed
 8007174:	080071ed 	.word	0x080071ed
 8007178:	080071d5 	.word	0x080071d5
 800717c:	080071ed 	.word	0x080071ed
 8007180:	080071ed 	.word	0x080071ed
 8007184:	080071ed 	.word	0x080071ed
 8007188:	080071ed 	.word	0x080071ed
 800718c:	080071ed 	.word	0x080071ed
 8007190:	080071ed 	.word	0x080071ed
 8007194:	080071ed 	.word	0x080071ed
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071ed 	.word	0x080071ed
 80071a0:	080071ed 	.word	0x080071ed
 80071a4:	080071ed 	.word	0x080071ed
 80071a8:	080071ed 	.word	0x080071ed
 80071ac:	080071ed 	.word	0x080071ed
 80071b0:	080071ed 	.word	0x080071ed
 80071b4:	080071ed 	.word	0x080071ed
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c2:	e222      	b.n	800760a <UART_SetConfig+0x5a6>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ca:	e21e      	b.n	800760a <UART_SetConfig+0x5a6>
 80071cc:	2308      	movs	r3, #8
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d2:	e21a      	b.n	800760a <UART_SetConfig+0x5a6>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071da:	e216      	b.n	800760a <UART_SetConfig+0x5a6>
 80071dc:	2320      	movs	r3, #32
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e212      	b.n	800760a <UART_SetConfig+0x5a6>
 80071e4:	2340      	movs	r3, #64	@ 0x40
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e20e      	b.n	800760a <UART_SetConfig+0x5a6>
 80071ec:	2380      	movs	r3, #128	@ 0x80
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e20a      	b.n	800760a <UART_SetConfig+0x5a6>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a69      	ldr	r2, [pc, #420]	@ (80073a0 <UART_SetConfig+0x33c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d130      	bne.n	8007260 <UART_SetConfig+0x1fc>
 80071fe:	4b67      	ldr	r3, [pc, #412]	@ (800739c <UART_SetConfig+0x338>)
 8007200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b05      	cmp	r3, #5
 8007208:	d826      	bhi.n	8007258 <UART_SetConfig+0x1f4>
 800720a:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <UART_SetConfig+0x1ac>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007229 	.word	0x08007229
 8007214:	08007231 	.word	0x08007231
 8007218:	08007239 	.word	0x08007239
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722e:	e1ec      	b.n	800760a <UART_SetConfig+0x5a6>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007236:	e1e8      	b.n	800760a <UART_SetConfig+0x5a6>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723e:	e1e4      	b.n	800760a <UART_SetConfig+0x5a6>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007246:	e1e0      	b.n	800760a <UART_SetConfig+0x5a6>
 8007248:	2320      	movs	r3, #32
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e1dc      	b.n	800760a <UART_SetConfig+0x5a6>
 8007250:	2340      	movs	r3, #64	@ 0x40
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007256:	e1d8      	b.n	800760a <UART_SetConfig+0x5a6>
 8007258:	2380      	movs	r3, #128	@ 0x80
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e1d4      	b.n	800760a <UART_SetConfig+0x5a6>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a4f      	ldr	r2, [pc, #316]	@ (80073a4 <UART_SetConfig+0x340>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d130      	bne.n	80072cc <UART_SetConfig+0x268>
 800726a:	4b4c      	ldr	r3, [pc, #304]	@ (800739c <UART_SetConfig+0x338>)
 800726c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b05      	cmp	r3, #5
 8007274:	d826      	bhi.n	80072c4 <UART_SetConfig+0x260>
 8007276:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <UART_SetConfig+0x218>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	08007295 	.word	0x08007295
 8007280:	0800729d 	.word	0x0800729d
 8007284:	080072a5 	.word	0x080072a5
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	2300      	movs	r3, #0
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e1b6      	b.n	800760a <UART_SetConfig+0x5a6>
 800729c:	2304      	movs	r3, #4
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a2:	e1b2      	b.n	800760a <UART_SetConfig+0x5a6>
 80072a4:	2308      	movs	r3, #8
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072aa:	e1ae      	b.n	800760a <UART_SetConfig+0x5a6>
 80072ac:	2310      	movs	r3, #16
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b2:	e1aa      	b.n	800760a <UART_SetConfig+0x5a6>
 80072b4:	2320      	movs	r3, #32
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e1a6      	b.n	800760a <UART_SetConfig+0x5a6>
 80072bc:	2340      	movs	r3, #64	@ 0x40
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e1a2      	b.n	800760a <UART_SetConfig+0x5a6>
 80072c4:	2380      	movs	r3, #128	@ 0x80
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e19e      	b.n	800760a <UART_SetConfig+0x5a6>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a35      	ldr	r2, [pc, #212]	@ (80073a8 <UART_SetConfig+0x344>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d130      	bne.n	8007338 <UART_SetConfig+0x2d4>
 80072d6:	4b31      	ldr	r3, [pc, #196]	@ (800739c <UART_SetConfig+0x338>)
 80072d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d826      	bhi.n	8007330 <UART_SetConfig+0x2cc>
 80072e2:	a201      	add	r2, pc, #4	@ (adr r2, 80072e8 <UART_SetConfig+0x284>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	08007301 	.word	0x08007301
 80072ec:	08007309 	.word	0x08007309
 80072f0:	08007311 	.word	0x08007311
 80072f4:	08007319 	.word	0x08007319
 80072f8:	08007321 	.word	0x08007321
 80072fc:	08007329 	.word	0x08007329
 8007300:	2300      	movs	r3, #0
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007306:	e180      	b.n	800760a <UART_SetConfig+0x5a6>
 8007308:	2304      	movs	r3, #4
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730e:	e17c      	b.n	800760a <UART_SetConfig+0x5a6>
 8007310:	2308      	movs	r3, #8
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007316:	e178      	b.n	800760a <UART_SetConfig+0x5a6>
 8007318:	2310      	movs	r3, #16
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731e:	e174      	b.n	800760a <UART_SetConfig+0x5a6>
 8007320:	2320      	movs	r3, #32
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e170      	b.n	800760a <UART_SetConfig+0x5a6>
 8007328:	2340      	movs	r3, #64	@ 0x40
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e16c      	b.n	800760a <UART_SetConfig+0x5a6>
 8007330:	2380      	movs	r3, #128	@ 0x80
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e168      	b.n	800760a <UART_SetConfig+0x5a6>
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1b      	ldr	r2, [pc, #108]	@ (80073ac <UART_SetConfig+0x348>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d142      	bne.n	80073c8 <UART_SetConfig+0x364>
 8007342:	4b16      	ldr	r3, [pc, #88]	@ (800739c <UART_SetConfig+0x338>)
 8007344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	2b05      	cmp	r3, #5
 800734c:	d838      	bhi.n	80073c0 <UART_SetConfig+0x35c>
 800734e:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <UART_SetConfig+0x2f0>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	0800736d 	.word	0x0800736d
 8007358:	08007375 	.word	0x08007375
 800735c:	0800737d 	.word	0x0800737d
 8007360:	08007385 	.word	0x08007385
 8007364:	080073b1 	.word	0x080073b1
 8007368:	080073b9 	.word	0x080073b9
 800736c:	2300      	movs	r3, #0
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007372:	e14a      	b.n	800760a <UART_SetConfig+0x5a6>
 8007374:	2304      	movs	r3, #4
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737a:	e146      	b.n	800760a <UART_SetConfig+0x5a6>
 800737c:	2308      	movs	r3, #8
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007382:	e142      	b.n	800760a <UART_SetConfig+0x5a6>
 8007384:	2310      	movs	r3, #16
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738a:	e13e      	b.n	800760a <UART_SetConfig+0x5a6>
 800738c:	cfff69f3 	.word	0xcfff69f3
 8007390:	58000c00 	.word	0x58000c00
 8007394:	11fff4ff 	.word	0x11fff4ff
 8007398:	40011000 	.word	0x40011000
 800739c:	58024400 	.word	0x58024400
 80073a0:	40004400 	.word	0x40004400
 80073a4:	40004800 	.word	0x40004800
 80073a8:	40004c00 	.word	0x40004c00
 80073ac:	40005000 	.word	0x40005000
 80073b0:	2320      	movs	r3, #32
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b6:	e128      	b.n	800760a <UART_SetConfig+0x5a6>
 80073b8:	2340      	movs	r3, #64	@ 0x40
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073be:	e124      	b.n	800760a <UART_SetConfig+0x5a6>
 80073c0:	2380      	movs	r3, #128	@ 0x80
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c6:	e120      	b.n	800760a <UART_SetConfig+0x5a6>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4acb      	ldr	r2, [pc, #812]	@ (80076fc <UART_SetConfig+0x698>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d176      	bne.n	80074c0 <UART_SetConfig+0x45c>
 80073d2:	4bcb      	ldr	r3, [pc, #812]	@ (8007700 <UART_SetConfig+0x69c>)
 80073d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073da:	2b28      	cmp	r3, #40	@ 0x28
 80073dc:	d86c      	bhi.n	80074b8 <UART_SetConfig+0x454>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <UART_SetConfig+0x380>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007489 	.word	0x08007489
 80073e8:	080074b9 	.word	0x080074b9
 80073ec:	080074b9 	.word	0x080074b9
 80073f0:	080074b9 	.word	0x080074b9
 80073f4:	080074b9 	.word	0x080074b9
 80073f8:	080074b9 	.word	0x080074b9
 80073fc:	080074b9 	.word	0x080074b9
 8007400:	080074b9 	.word	0x080074b9
 8007404:	08007491 	.word	0x08007491
 8007408:	080074b9 	.word	0x080074b9
 800740c:	080074b9 	.word	0x080074b9
 8007410:	080074b9 	.word	0x080074b9
 8007414:	080074b9 	.word	0x080074b9
 8007418:	080074b9 	.word	0x080074b9
 800741c:	080074b9 	.word	0x080074b9
 8007420:	080074b9 	.word	0x080074b9
 8007424:	08007499 	.word	0x08007499
 8007428:	080074b9 	.word	0x080074b9
 800742c:	080074b9 	.word	0x080074b9
 8007430:	080074b9 	.word	0x080074b9
 8007434:	080074b9 	.word	0x080074b9
 8007438:	080074b9 	.word	0x080074b9
 800743c:	080074b9 	.word	0x080074b9
 8007440:	080074b9 	.word	0x080074b9
 8007444:	080074a1 	.word	0x080074a1
 8007448:	080074b9 	.word	0x080074b9
 800744c:	080074b9 	.word	0x080074b9
 8007450:	080074b9 	.word	0x080074b9
 8007454:	080074b9 	.word	0x080074b9
 8007458:	080074b9 	.word	0x080074b9
 800745c:	080074b9 	.word	0x080074b9
 8007460:	080074b9 	.word	0x080074b9
 8007464:	080074a9 	.word	0x080074a9
 8007468:	080074b9 	.word	0x080074b9
 800746c:	080074b9 	.word	0x080074b9
 8007470:	080074b9 	.word	0x080074b9
 8007474:	080074b9 	.word	0x080074b9
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074b9 	.word	0x080074b9
 8007480:	080074b9 	.word	0x080074b9
 8007484:	080074b1 	.word	0x080074b1
 8007488:	2301      	movs	r3, #1
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748e:	e0bc      	b.n	800760a <UART_SetConfig+0x5a6>
 8007490:	2304      	movs	r3, #4
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007496:	e0b8      	b.n	800760a <UART_SetConfig+0x5a6>
 8007498:	2308      	movs	r3, #8
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749e:	e0b4      	b.n	800760a <UART_SetConfig+0x5a6>
 80074a0:	2310      	movs	r3, #16
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a6:	e0b0      	b.n	800760a <UART_SetConfig+0x5a6>
 80074a8:	2320      	movs	r3, #32
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e0ac      	b.n	800760a <UART_SetConfig+0x5a6>
 80074b0:	2340      	movs	r3, #64	@ 0x40
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e0a8      	b.n	800760a <UART_SetConfig+0x5a6>
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e0a4      	b.n	800760a <UART_SetConfig+0x5a6>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a8f      	ldr	r2, [pc, #572]	@ (8007704 <UART_SetConfig+0x6a0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d130      	bne.n	800752c <UART_SetConfig+0x4c8>
 80074ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007700 <UART_SetConfig+0x69c>)
 80074cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	d826      	bhi.n	8007524 <UART_SetConfig+0x4c0>
 80074d6:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <UART_SetConfig+0x478>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074f5 	.word	0x080074f5
 80074e0:	080074fd 	.word	0x080074fd
 80074e4:	08007505 	.word	0x08007505
 80074e8:	0800750d 	.word	0x0800750d
 80074ec:	08007515 	.word	0x08007515
 80074f0:	0800751d 	.word	0x0800751d
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fa:	e086      	b.n	800760a <UART_SetConfig+0x5a6>
 80074fc:	2304      	movs	r3, #4
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007502:	e082      	b.n	800760a <UART_SetConfig+0x5a6>
 8007504:	2308      	movs	r3, #8
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750a:	e07e      	b.n	800760a <UART_SetConfig+0x5a6>
 800750c:	2310      	movs	r3, #16
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007512:	e07a      	b.n	800760a <UART_SetConfig+0x5a6>
 8007514:	2320      	movs	r3, #32
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e076      	b.n	800760a <UART_SetConfig+0x5a6>
 800751c:	2340      	movs	r3, #64	@ 0x40
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e072      	b.n	800760a <UART_SetConfig+0x5a6>
 8007524:	2380      	movs	r3, #128	@ 0x80
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e06e      	b.n	800760a <UART_SetConfig+0x5a6>
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a75      	ldr	r2, [pc, #468]	@ (8007708 <UART_SetConfig+0x6a4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d130      	bne.n	8007598 <UART_SetConfig+0x534>
 8007536:	4b72      	ldr	r3, [pc, #456]	@ (8007700 <UART_SetConfig+0x69c>)
 8007538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	2b05      	cmp	r3, #5
 8007540:	d826      	bhi.n	8007590 <UART_SetConfig+0x52c>
 8007542:	a201      	add	r2, pc, #4	@ (adr r2, 8007548 <UART_SetConfig+0x4e4>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	08007561 	.word	0x08007561
 800754c:	08007569 	.word	0x08007569
 8007550:	08007571 	.word	0x08007571
 8007554:	08007579 	.word	0x08007579
 8007558:	08007581 	.word	0x08007581
 800755c:	08007589 	.word	0x08007589
 8007560:	2300      	movs	r3, #0
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e050      	b.n	800760a <UART_SetConfig+0x5a6>
 8007568:	2304      	movs	r3, #4
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756e:	e04c      	b.n	800760a <UART_SetConfig+0x5a6>
 8007570:	2308      	movs	r3, #8
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007576:	e048      	b.n	800760a <UART_SetConfig+0x5a6>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757e:	e044      	b.n	800760a <UART_SetConfig+0x5a6>
 8007580:	2320      	movs	r3, #32
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e040      	b.n	800760a <UART_SetConfig+0x5a6>
 8007588:	2340      	movs	r3, #64	@ 0x40
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e03c      	b.n	800760a <UART_SetConfig+0x5a6>
 8007590:	2380      	movs	r3, #128	@ 0x80
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e038      	b.n	800760a <UART_SetConfig+0x5a6>
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5b      	ldr	r2, [pc, #364]	@ (800770c <UART_SetConfig+0x6a8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d130      	bne.n	8007604 <UART_SetConfig+0x5a0>
 80075a2:	4b57      	ldr	r3, [pc, #348]	@ (8007700 <UART_SetConfig+0x69c>)
 80075a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	d826      	bhi.n	80075fc <UART_SetConfig+0x598>
 80075ae:	a201      	add	r2, pc, #4	@ (adr r2, 80075b4 <UART_SetConfig+0x550>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075cd 	.word	0x080075cd
 80075b8:	080075d5 	.word	0x080075d5
 80075bc:	080075dd 	.word	0x080075dd
 80075c0:	080075e5 	.word	0x080075e5
 80075c4:	080075ed 	.word	0x080075ed
 80075c8:	080075f5 	.word	0x080075f5
 80075cc:	2302      	movs	r3, #2
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e01a      	b.n	800760a <UART_SetConfig+0x5a6>
 80075d4:	2304      	movs	r3, #4
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e016      	b.n	800760a <UART_SetConfig+0x5a6>
 80075dc:	2308      	movs	r3, #8
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e012      	b.n	800760a <UART_SetConfig+0x5a6>
 80075e4:	2310      	movs	r3, #16
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e00e      	b.n	800760a <UART_SetConfig+0x5a6>
 80075ec:	2320      	movs	r3, #32
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e00a      	b.n	800760a <UART_SetConfig+0x5a6>
 80075f4:	2340      	movs	r3, #64	@ 0x40
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e006      	b.n	800760a <UART_SetConfig+0x5a6>
 80075fc:	2380      	movs	r3, #128	@ 0x80
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e002      	b.n	800760a <UART_SetConfig+0x5a6>
 8007604:	2380      	movs	r3, #128	@ 0x80
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a3f      	ldr	r2, [pc, #252]	@ (800770c <UART_SetConfig+0x6a8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	f040 80f8 	bne.w	8007806 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007616:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800761a:	2b20      	cmp	r3, #32
 800761c:	dc46      	bgt.n	80076ac <UART_SetConfig+0x648>
 800761e:	2b02      	cmp	r3, #2
 8007620:	f2c0 8082 	blt.w	8007728 <UART_SetConfig+0x6c4>
 8007624:	3b02      	subs	r3, #2
 8007626:	2b1e      	cmp	r3, #30
 8007628:	d87e      	bhi.n	8007728 <UART_SetConfig+0x6c4>
 800762a:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <UART_SetConfig+0x5cc>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	080076b3 	.word	0x080076b3
 8007634:	08007729 	.word	0x08007729
 8007638:	080076bb 	.word	0x080076bb
 800763c:	08007729 	.word	0x08007729
 8007640:	08007729 	.word	0x08007729
 8007644:	08007729 	.word	0x08007729
 8007648:	080076cb 	.word	0x080076cb
 800764c:	08007729 	.word	0x08007729
 8007650:	08007729 	.word	0x08007729
 8007654:	08007729 	.word	0x08007729
 8007658:	08007729 	.word	0x08007729
 800765c:	08007729 	.word	0x08007729
 8007660:	08007729 	.word	0x08007729
 8007664:	08007729 	.word	0x08007729
 8007668:	080076db 	.word	0x080076db
 800766c:	08007729 	.word	0x08007729
 8007670:	08007729 	.word	0x08007729
 8007674:	08007729 	.word	0x08007729
 8007678:	08007729 	.word	0x08007729
 800767c:	08007729 	.word	0x08007729
 8007680:	08007729 	.word	0x08007729
 8007684:	08007729 	.word	0x08007729
 8007688:	08007729 	.word	0x08007729
 800768c:	08007729 	.word	0x08007729
 8007690:	08007729 	.word	0x08007729
 8007694:	08007729 	.word	0x08007729
 8007698:	08007729 	.word	0x08007729
 800769c:	08007729 	.word	0x08007729
 80076a0:	08007729 	.word	0x08007729
 80076a4:	08007729 	.word	0x08007729
 80076a8:	0800771b 	.word	0x0800771b
 80076ac:	2b40      	cmp	r3, #64	@ 0x40
 80076ae:	d037      	beq.n	8007720 <UART_SetConfig+0x6bc>
 80076b0:	e03a      	b.n	8007728 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076b2:	f7fd fe7d 	bl	80053b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80076b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076b8:	e03c      	b.n	8007734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fd fe8c 	bl	80053dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c8:	e034      	b.n	8007734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ca:	f107 0318 	add.w	r3, r7, #24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fd ffd8 	bl	8005684 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d8:	e02c      	b.n	8007734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076da:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <UART_SetConfig+0x69c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d016      	beq.n	8007714 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076e6:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <UART_SetConfig+0x69c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	08db      	lsrs	r3, r3, #3
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	4a07      	ldr	r2, [pc, #28]	@ (8007710 <UART_SetConfig+0x6ac>)
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076f8:	e01c      	b.n	8007734 <UART_SetConfig+0x6d0>
 80076fa:	bf00      	nop
 80076fc:	40011400 	.word	0x40011400
 8007700:	58024400 	.word	0x58024400
 8007704:	40007800 	.word	0x40007800
 8007708:	40007c00 	.word	0x40007c00
 800770c:	58000c00 	.word	0x58000c00
 8007710:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007714:	4b9d      	ldr	r3, [pc, #628]	@ (800798c <UART_SetConfig+0x928>)
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007718:	e00c      	b.n	8007734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800771a:	4b9d      	ldr	r3, [pc, #628]	@ (8007990 <UART_SetConfig+0x92c>)
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800771e:	e009      	b.n	8007734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007726:	e005      	b.n	8007734 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007732:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 81de 	beq.w	8007af8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	4a94      	ldr	r2, [pc, #592]	@ (8007994 <UART_SetConfig+0x930>)
 8007742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007746:	461a      	mov	r2, r3
 8007748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774a:	fbb3 f3f2 	udiv	r3, r3, r2
 800774e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	4413      	add	r3, r2
 800775a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800775c:	429a      	cmp	r2, r3
 800775e:	d305      	bcc.n	800776c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007768:	429a      	cmp	r2, r3
 800776a:	d903      	bls.n	8007774 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007772:	e1c1      	b.n	8007af8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007776:	2200      	movs	r2, #0
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	60fa      	str	r2, [r7, #12]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007780:	4a84      	ldr	r2, [pc, #528]	@ (8007994 <UART_SetConfig+0x930>)
 8007782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007786:	b29b      	uxth	r3, r3
 8007788:	2200      	movs	r2, #0
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007796:	f7f8 fdf3 	bl	8000380 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4610      	mov	r0, r2
 80077a0:	4619      	mov	r1, r3
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	020b      	lsls	r3, r1, #8
 80077ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077b0:	0202      	lsls	r2, r0, #8
 80077b2:	6979      	ldr	r1, [r7, #20]
 80077b4:	6849      	ldr	r1, [r1, #4]
 80077b6:	0849      	lsrs	r1, r1, #1
 80077b8:	2000      	movs	r0, #0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4605      	mov	r5, r0
 80077be:	eb12 0804 	adds.w	r8, r2, r4
 80077c2:	eb43 0905 	adc.w	r9, r3, r5
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	469a      	mov	sl, r3
 80077ce:	4693      	mov	fp, r2
 80077d0:	4652      	mov	r2, sl
 80077d2:	465b      	mov	r3, fp
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f8 fdd2 	bl	8000380 <__aeabi_uldivmod>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4613      	mov	r3, r2
 80077e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ea:	d308      	bcc.n	80077fe <UART_SetConfig+0x79a>
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077f2:	d204      	bcs.n	80077fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077fa:	60da      	str	r2, [r3, #12]
 80077fc:	e17c      	b.n	8007af8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007804:	e178      	b.n	8007af8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800780e:	f040 80c5 	bne.w	800799c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007812:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007816:	2b20      	cmp	r3, #32
 8007818:	dc48      	bgt.n	80078ac <UART_SetConfig+0x848>
 800781a:	2b00      	cmp	r3, #0
 800781c:	db7b      	blt.n	8007916 <UART_SetConfig+0x8b2>
 800781e:	2b20      	cmp	r3, #32
 8007820:	d879      	bhi.n	8007916 <UART_SetConfig+0x8b2>
 8007822:	a201      	add	r2, pc, #4	@ (adr r2, 8007828 <UART_SetConfig+0x7c4>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	080078b3 	.word	0x080078b3
 800782c:	080078bb 	.word	0x080078bb
 8007830:	08007917 	.word	0x08007917
 8007834:	08007917 	.word	0x08007917
 8007838:	080078c3 	.word	0x080078c3
 800783c:	08007917 	.word	0x08007917
 8007840:	08007917 	.word	0x08007917
 8007844:	08007917 	.word	0x08007917
 8007848:	080078d3 	.word	0x080078d3
 800784c:	08007917 	.word	0x08007917
 8007850:	08007917 	.word	0x08007917
 8007854:	08007917 	.word	0x08007917
 8007858:	08007917 	.word	0x08007917
 800785c:	08007917 	.word	0x08007917
 8007860:	08007917 	.word	0x08007917
 8007864:	08007917 	.word	0x08007917
 8007868:	080078e3 	.word	0x080078e3
 800786c:	08007917 	.word	0x08007917
 8007870:	08007917 	.word	0x08007917
 8007874:	08007917 	.word	0x08007917
 8007878:	08007917 	.word	0x08007917
 800787c:	08007917 	.word	0x08007917
 8007880:	08007917 	.word	0x08007917
 8007884:	08007917 	.word	0x08007917
 8007888:	08007917 	.word	0x08007917
 800788c:	08007917 	.word	0x08007917
 8007890:	08007917 	.word	0x08007917
 8007894:	08007917 	.word	0x08007917
 8007898:	08007917 	.word	0x08007917
 800789c:	08007917 	.word	0x08007917
 80078a0:	08007917 	.word	0x08007917
 80078a4:	08007917 	.word	0x08007917
 80078a8:	08007909 	.word	0x08007909
 80078ac:	2b40      	cmp	r3, #64	@ 0x40
 80078ae:	d02e      	beq.n	800790e <UART_SetConfig+0x8aa>
 80078b0:	e031      	b.n	8007916 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b2:	f7fc fb47 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 80078b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078b8:	e033      	b.n	8007922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ba:	f7fc fb59 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 80078be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078c0:	e02f      	b.n	8007922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fd fd88 	bl	80053dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d0:	e027      	b.n	8007922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d2:	f107 0318 	add.w	r3, r7, #24
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fd fed4 	bl	8005684 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e0:	e01f      	b.n	8007922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007998 <UART_SetConfig+0x934>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007998 <UART_SetConfig+0x934>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	08db      	lsrs	r3, r3, #3
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	4a24      	ldr	r2, [pc, #144]	@ (800798c <UART_SetConfig+0x928>)
 80078fa:	fa22 f303 	lsr.w	r3, r2, r3
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007900:	e00f      	b.n	8007922 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007902:	4b22      	ldr	r3, [pc, #136]	@ (800798c <UART_SetConfig+0x928>)
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007906:	e00c      	b.n	8007922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007908:	4b21      	ldr	r3, [pc, #132]	@ (8007990 <UART_SetConfig+0x92c>)
 800790a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790c:	e009      	b.n	8007922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007914:	e005      	b.n	8007922 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80e7 	beq.w	8007af8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	4a19      	ldr	r2, [pc, #100]	@ (8007994 <UART_SetConfig+0x930>)
 8007930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007934:	461a      	mov	r2, r3
 8007936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007938:	fbb3 f3f2 	udiv	r3, r3, r2
 800793c:	005a      	lsls	r2, r3, #1
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	085b      	lsrs	r3, r3, #1
 8007944:	441a      	add	r2, r3
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	2b0f      	cmp	r3, #15
 8007954:	d916      	bls.n	8007984 <UART_SetConfig+0x920>
 8007956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800795c:	d212      	bcs.n	8007984 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	b29b      	uxth	r3, r3
 8007962:	f023 030f 	bic.w	r3, r3, #15
 8007966:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796a:	085b      	lsrs	r3, r3, #1
 800796c:	b29b      	uxth	r3, r3
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	b29a      	uxth	r2, r3
 8007974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007976:	4313      	orrs	r3, r2
 8007978:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	e0b9      	b.n	8007af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800798a:	e0b5      	b.n	8007af8 <UART_SetConfig+0xa94>
 800798c:	03d09000 	.word	0x03d09000
 8007990:	003d0900 	.word	0x003d0900
 8007994:	08009ae0 	.word	0x08009ae0
 8007998:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800799c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	dc49      	bgt.n	8007a38 <UART_SetConfig+0x9d4>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	db7c      	blt.n	8007aa2 <UART_SetConfig+0xa3e>
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	d87a      	bhi.n	8007aa2 <UART_SetConfig+0xa3e>
 80079ac:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <UART_SetConfig+0x950>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	08007a3f 	.word	0x08007a3f
 80079b8:	08007a47 	.word	0x08007a47
 80079bc:	08007aa3 	.word	0x08007aa3
 80079c0:	08007aa3 	.word	0x08007aa3
 80079c4:	08007a4f 	.word	0x08007a4f
 80079c8:	08007aa3 	.word	0x08007aa3
 80079cc:	08007aa3 	.word	0x08007aa3
 80079d0:	08007aa3 	.word	0x08007aa3
 80079d4:	08007a5f 	.word	0x08007a5f
 80079d8:	08007aa3 	.word	0x08007aa3
 80079dc:	08007aa3 	.word	0x08007aa3
 80079e0:	08007aa3 	.word	0x08007aa3
 80079e4:	08007aa3 	.word	0x08007aa3
 80079e8:	08007aa3 	.word	0x08007aa3
 80079ec:	08007aa3 	.word	0x08007aa3
 80079f0:	08007aa3 	.word	0x08007aa3
 80079f4:	08007a6f 	.word	0x08007a6f
 80079f8:	08007aa3 	.word	0x08007aa3
 80079fc:	08007aa3 	.word	0x08007aa3
 8007a00:	08007aa3 	.word	0x08007aa3
 8007a04:	08007aa3 	.word	0x08007aa3
 8007a08:	08007aa3 	.word	0x08007aa3
 8007a0c:	08007aa3 	.word	0x08007aa3
 8007a10:	08007aa3 	.word	0x08007aa3
 8007a14:	08007aa3 	.word	0x08007aa3
 8007a18:	08007aa3 	.word	0x08007aa3
 8007a1c:	08007aa3 	.word	0x08007aa3
 8007a20:	08007aa3 	.word	0x08007aa3
 8007a24:	08007aa3 	.word	0x08007aa3
 8007a28:	08007aa3 	.word	0x08007aa3
 8007a2c:	08007aa3 	.word	0x08007aa3
 8007a30:	08007aa3 	.word	0x08007aa3
 8007a34:	08007a95 	.word	0x08007a95
 8007a38:	2b40      	cmp	r3, #64	@ 0x40
 8007a3a:	d02e      	beq.n	8007a9a <UART_SetConfig+0xa36>
 8007a3c:	e031      	b.n	8007aa2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a3e:	f7fc fa81 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8007a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a44:	e033      	b.n	8007aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a46:	f7fc fa93 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8007a4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a4c:	e02f      	b.n	8007aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fd fcc2 	bl	80053dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a5c:	e027      	b.n	8007aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5e:	f107 0318 	add.w	r3, r7, #24
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fd fe0e 	bl	8005684 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6c:	e01f      	b.n	8007aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b24 <UART_SetConfig+0xac0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8007b24 <UART_SetConfig+0xac0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	4a28      	ldr	r2, [pc, #160]	@ (8007b28 <UART_SetConfig+0xac4>)
 8007a86:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a8c:	e00f      	b.n	8007aae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007a8e:	4b26      	ldr	r3, [pc, #152]	@ (8007b28 <UART_SetConfig+0xac4>)
 8007a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a92:	e00c      	b.n	8007aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a94:	4b25      	ldr	r3, [pc, #148]	@ (8007b2c <UART_SetConfig+0xac8>)
 8007a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a98:	e009      	b.n	8007aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa0:	e005      	b.n	8007aae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007aac:	bf00      	nop
    }

    if (pclk != 0U)
 8007aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d021      	beq.n	8007af8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b30 <UART_SetConfig+0xacc>)
 8007aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	441a      	add	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	2b0f      	cmp	r3, #15
 8007adc:	d909      	bls.n	8007af2 <UART_SetConfig+0xa8e>
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae4:	d205      	bcs.n	8007af2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60da      	str	r2, [r3, #12]
 8007af0:	e002      	b.n	8007af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b14:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3748      	adds	r7, #72	@ 0x48
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b22:	bf00      	nop
 8007b24:	58024400 	.word	0x58024400
 8007b28:	03d09000 	.word	0x03d09000
 8007b2c:	003d0900 	.word	0x003d0900
 8007b30:	08009ae0 	.word	0x08009ae0

08007b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01a      	beq.n	8007c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c32:	d10a      	bne.n	8007c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	605a      	str	r2, [r3, #4]
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b098      	sub	sp, #96	@ 0x60
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c88:	f7fa fafc 	bl	8002284 <HAL_GetTick>
 8007c8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d12f      	bne.n	8007cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f88e 	bl	8007dcc <UART_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d022      	beq.n	8007cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e063      	b.n	8007dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d149      	bne.n	8007d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d12:	2200      	movs	r2, #0
 8007d14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f857 	bl	8007dcc <UART_WaitOnFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d03c      	beq.n	8007d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	623b      	str	r3, [r7, #32]
   return(result);
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d76:	61fa      	str	r2, [r7, #28]
 8007d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	69b9      	ldr	r1, [r7, #24]
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	617b      	str	r3, [r7, #20]
   return(result);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e5      	bne.n	8007d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e012      	b.n	8007dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3758      	adds	r7, #88	@ 0x58
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ddc:	e04f      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d04b      	beq.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de6:	f7fa fa4d 	bl	8002284 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d302      	bcc.n	8007dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e04e      	b.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d037      	beq.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b80      	cmp	r3, #128	@ 0x80
 8007e12:	d034      	beq.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b40      	cmp	r3, #64	@ 0x40
 8007e18:	d031      	beq.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d110      	bne.n	8007e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f839 	bl	8007ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2208      	movs	r2, #8
 8007e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e029      	b.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e58:	d111      	bne.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f81f 	bl	8007ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e00f      	b.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4013      	ands	r3, r2
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	bf0c      	ite	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	2300      	movne	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d0a0      	beq.n	8007dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b095      	sub	sp, #84	@ 0x54
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e6      	bne.n	8007eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f70 <UART_EndRxTransfer+0xc8>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3308      	adds	r3, #8
 8007f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e5      	bne.n	8007ee2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d118      	bne.n	8007f50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	e853 3f00 	ldrex	r3, [r3]
 8007f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f023 0310 	bic.w	r3, r3, #16
 8007f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6979      	ldr	r1, [r7, #20]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e6      	bne.n	8007f1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f64:	bf00      	nop
 8007f66:	3754      	adds	r7, #84	@ 0x54
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	effffffe 	.word	0xeffffffe

08007f74 <std>:
 8007f74:	2300      	movs	r3, #0
 8007f76:	b510      	push	{r4, lr}
 8007f78:	4604      	mov	r4, r0
 8007f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f82:	6083      	str	r3, [r0, #8]
 8007f84:	8181      	strh	r1, [r0, #12]
 8007f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f88:	81c2      	strh	r2, [r0, #14]
 8007f8a:	6183      	str	r3, [r0, #24]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	2208      	movs	r2, #8
 8007f90:	305c      	adds	r0, #92	@ 0x5c
 8007f92:	f000 f906 	bl	80081a2 <memset>
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <std+0x58>)
 8007f98:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <std+0x5c>)
 8007f9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <std+0x60>)
 8007fa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd8 <std+0x64>)
 8007fa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <std+0x68>)
 8007fa8:	6224      	str	r4, [r4, #32]
 8007faa:	429c      	cmp	r4, r3
 8007fac:	d006      	beq.n	8007fbc <std+0x48>
 8007fae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fb2:	4294      	cmp	r4, r2
 8007fb4:	d002      	beq.n	8007fbc <std+0x48>
 8007fb6:	33d0      	adds	r3, #208	@ 0xd0
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d105      	bne.n	8007fc8 <std+0x54>
 8007fbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc4:	f000 b966 	b.w	8008294 <__retarget_lock_init_recursive>
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	bf00      	nop
 8007fcc:	0800811d 	.word	0x0800811d
 8007fd0:	0800813f 	.word	0x0800813f
 8007fd4:	08008177 	.word	0x08008177
 8007fd8:	0800819b 	.word	0x0800819b
 8007fdc:	240001e8 	.word	0x240001e8

08007fe0 <stdio_exit_handler>:
 8007fe0:	4a02      	ldr	r2, [pc, #8]	@ (8007fec <stdio_exit_handler+0xc>)
 8007fe2:	4903      	ldr	r1, [pc, #12]	@ (8007ff0 <stdio_exit_handler+0x10>)
 8007fe4:	4803      	ldr	r0, [pc, #12]	@ (8007ff4 <stdio_exit_handler+0x14>)
 8007fe6:	f000 b869 	b.w	80080bc <_fwalk_sglue>
 8007fea:	bf00      	nop
 8007fec:	2400002c 	.word	0x2400002c
 8007ff0:	08008b31 	.word	0x08008b31
 8007ff4:	2400003c 	.word	0x2400003c

08007ff8 <cleanup_stdio>:
 8007ff8:	6841      	ldr	r1, [r0, #4]
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800802c <cleanup_stdio+0x34>)
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	b510      	push	{r4, lr}
 8008000:	4604      	mov	r4, r0
 8008002:	d001      	beq.n	8008008 <cleanup_stdio+0x10>
 8008004:	f000 fd94 	bl	8008b30 <_fflush_r>
 8008008:	68a1      	ldr	r1, [r4, #8]
 800800a:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <cleanup_stdio+0x38>)
 800800c:	4299      	cmp	r1, r3
 800800e:	d002      	beq.n	8008016 <cleanup_stdio+0x1e>
 8008010:	4620      	mov	r0, r4
 8008012:	f000 fd8d 	bl	8008b30 <_fflush_r>
 8008016:	68e1      	ldr	r1, [r4, #12]
 8008018:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <cleanup_stdio+0x3c>)
 800801a:	4299      	cmp	r1, r3
 800801c:	d004      	beq.n	8008028 <cleanup_stdio+0x30>
 800801e:	4620      	mov	r0, r4
 8008020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008024:	f000 bd84 	b.w	8008b30 <_fflush_r>
 8008028:	bd10      	pop	{r4, pc}
 800802a:	bf00      	nop
 800802c:	240001e8 	.word	0x240001e8
 8008030:	24000250 	.word	0x24000250
 8008034:	240002b8 	.word	0x240002b8

08008038 <global_stdio_init.part.0>:
 8008038:	b510      	push	{r4, lr}
 800803a:	4b0b      	ldr	r3, [pc, #44]	@ (8008068 <global_stdio_init.part.0+0x30>)
 800803c:	4c0b      	ldr	r4, [pc, #44]	@ (800806c <global_stdio_init.part.0+0x34>)
 800803e:	4a0c      	ldr	r2, [pc, #48]	@ (8008070 <global_stdio_init.part.0+0x38>)
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	4620      	mov	r0, r4
 8008044:	2200      	movs	r2, #0
 8008046:	2104      	movs	r1, #4
 8008048:	f7ff ff94 	bl	8007f74 <std>
 800804c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008050:	2201      	movs	r2, #1
 8008052:	2109      	movs	r1, #9
 8008054:	f7ff ff8e 	bl	8007f74 <std>
 8008058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800805c:	2202      	movs	r2, #2
 800805e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008062:	2112      	movs	r1, #18
 8008064:	f7ff bf86 	b.w	8007f74 <std>
 8008068:	24000320 	.word	0x24000320
 800806c:	240001e8 	.word	0x240001e8
 8008070:	08007fe1 	.word	0x08007fe1

08008074 <__sfp_lock_acquire>:
 8008074:	4801      	ldr	r0, [pc, #4]	@ (800807c <__sfp_lock_acquire+0x8>)
 8008076:	f000 b90e 	b.w	8008296 <__retarget_lock_acquire_recursive>
 800807a:	bf00      	nop
 800807c:	24000329 	.word	0x24000329

08008080 <__sfp_lock_release>:
 8008080:	4801      	ldr	r0, [pc, #4]	@ (8008088 <__sfp_lock_release+0x8>)
 8008082:	f000 b909 	b.w	8008298 <__retarget_lock_release_recursive>
 8008086:	bf00      	nop
 8008088:	24000329 	.word	0x24000329

0800808c <__sinit>:
 800808c:	b510      	push	{r4, lr}
 800808e:	4604      	mov	r4, r0
 8008090:	f7ff fff0 	bl	8008074 <__sfp_lock_acquire>
 8008094:	6a23      	ldr	r3, [r4, #32]
 8008096:	b11b      	cbz	r3, 80080a0 <__sinit+0x14>
 8008098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809c:	f7ff bff0 	b.w	8008080 <__sfp_lock_release>
 80080a0:	4b04      	ldr	r3, [pc, #16]	@ (80080b4 <__sinit+0x28>)
 80080a2:	6223      	str	r3, [r4, #32]
 80080a4:	4b04      	ldr	r3, [pc, #16]	@ (80080b8 <__sinit+0x2c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1f5      	bne.n	8008098 <__sinit+0xc>
 80080ac:	f7ff ffc4 	bl	8008038 <global_stdio_init.part.0>
 80080b0:	e7f2      	b.n	8008098 <__sinit+0xc>
 80080b2:	bf00      	nop
 80080b4:	08007ff9 	.word	0x08007ff9
 80080b8:	24000320 	.word	0x24000320

080080bc <_fwalk_sglue>:
 80080bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	4607      	mov	r7, r0
 80080c2:	4688      	mov	r8, r1
 80080c4:	4614      	mov	r4, r2
 80080c6:	2600      	movs	r6, #0
 80080c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080cc:	f1b9 0901 	subs.w	r9, r9, #1
 80080d0:	d505      	bpl.n	80080de <_fwalk_sglue+0x22>
 80080d2:	6824      	ldr	r4, [r4, #0]
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	d1f7      	bne.n	80080c8 <_fwalk_sglue+0xc>
 80080d8:	4630      	mov	r0, r6
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d907      	bls.n	80080f4 <_fwalk_sglue+0x38>
 80080e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080e8:	3301      	adds	r3, #1
 80080ea:	d003      	beq.n	80080f4 <_fwalk_sglue+0x38>
 80080ec:	4629      	mov	r1, r5
 80080ee:	4638      	mov	r0, r7
 80080f0:	47c0      	blx	r8
 80080f2:	4306      	orrs	r6, r0
 80080f4:	3568      	adds	r5, #104	@ 0x68
 80080f6:	e7e9      	b.n	80080cc <_fwalk_sglue+0x10>

080080f8 <iprintf>:
 80080f8:	b40f      	push	{r0, r1, r2, r3}
 80080fa:	b507      	push	{r0, r1, r2, lr}
 80080fc:	4906      	ldr	r1, [pc, #24]	@ (8008118 <iprintf+0x20>)
 80080fe:	ab04      	add	r3, sp, #16
 8008100:	6808      	ldr	r0, [r1, #0]
 8008102:	f853 2b04 	ldr.w	r2, [r3], #4
 8008106:	6881      	ldr	r1, [r0, #8]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	f000 f9e9 	bl	80084e0 <_vfiprintf_r>
 800810e:	b003      	add	sp, #12
 8008110:	f85d eb04 	ldr.w	lr, [sp], #4
 8008114:	b004      	add	sp, #16
 8008116:	4770      	bx	lr
 8008118:	24000038 	.word	0x24000038

0800811c <__sread>:
 800811c:	b510      	push	{r4, lr}
 800811e:	460c      	mov	r4, r1
 8008120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008124:	f000 f868 	bl	80081f8 <_read_r>
 8008128:	2800      	cmp	r0, #0
 800812a:	bfab      	itete	ge
 800812c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800812e:	89a3      	ldrhlt	r3, [r4, #12]
 8008130:	181b      	addge	r3, r3, r0
 8008132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008136:	bfac      	ite	ge
 8008138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800813a:	81a3      	strhlt	r3, [r4, #12]
 800813c:	bd10      	pop	{r4, pc}

0800813e <__swrite>:
 800813e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	461f      	mov	r7, r3
 8008144:	898b      	ldrh	r3, [r1, #12]
 8008146:	05db      	lsls	r3, r3, #23
 8008148:	4605      	mov	r5, r0
 800814a:	460c      	mov	r4, r1
 800814c:	4616      	mov	r6, r2
 800814e:	d505      	bpl.n	800815c <__swrite+0x1e>
 8008150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008154:	2302      	movs	r3, #2
 8008156:	2200      	movs	r2, #0
 8008158:	f000 f83c 	bl	80081d4 <_lseek_r>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	4632      	mov	r2, r6
 800816a:	463b      	mov	r3, r7
 800816c:	4628      	mov	r0, r5
 800816e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008172:	f000 b853 	b.w	800821c <_write_r>

08008176 <__sseek>:
 8008176:	b510      	push	{r4, lr}
 8008178:	460c      	mov	r4, r1
 800817a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817e:	f000 f829 	bl	80081d4 <_lseek_r>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	bf15      	itete	ne
 8008188:	6560      	strne	r0, [r4, #84]	@ 0x54
 800818a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800818e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008192:	81a3      	strheq	r3, [r4, #12]
 8008194:	bf18      	it	ne
 8008196:	81a3      	strhne	r3, [r4, #12]
 8008198:	bd10      	pop	{r4, pc}

0800819a <__sclose>:
 800819a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819e:	f000 b809 	b.w	80081b4 <_close_r>

080081a2 <memset>:
 80081a2:	4402      	add	r2, r0
 80081a4:	4603      	mov	r3, r0
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d100      	bne.n	80081ac <memset+0xa>
 80081aa:	4770      	bx	lr
 80081ac:	f803 1b01 	strb.w	r1, [r3], #1
 80081b0:	e7f9      	b.n	80081a6 <memset+0x4>
	...

080081b4 <_close_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d06      	ldr	r5, [pc, #24]	@ (80081d0 <_close_r+0x1c>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7f9 fc35 	bl	8001a2e <_close>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_close_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_close_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	24000324 	.word	0x24000324

080081d4 <_lseek_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4d07      	ldr	r5, [pc, #28]	@ (80081f4 <_lseek_r+0x20>)
 80081d8:	4604      	mov	r4, r0
 80081da:	4608      	mov	r0, r1
 80081dc:	4611      	mov	r1, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f7f9 fc4a 	bl	8001a7c <_lseek>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_lseek_r+0x1e>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_lseek_r+0x1e>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	24000324 	.word	0x24000324

080081f8 <_read_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	@ (8008218 <_read_r+0x20>)
 80081fc:	4604      	mov	r4, r0
 80081fe:	4608      	mov	r0, r1
 8008200:	4611      	mov	r1, r2
 8008202:	2200      	movs	r2, #0
 8008204:	602a      	str	r2, [r5, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f7f9 fbd8 	bl	80019bc <_read>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_read_r+0x1e>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_read_r+0x1e>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	24000324 	.word	0x24000324

0800821c <_write_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d07      	ldr	r5, [pc, #28]	@ (800823c <_write_r+0x20>)
 8008220:	4604      	mov	r4, r0
 8008222:	4608      	mov	r0, r1
 8008224:	4611      	mov	r1, r2
 8008226:	2200      	movs	r2, #0
 8008228:	602a      	str	r2, [r5, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f7f9 fbe3 	bl	80019f6 <_write>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_write_r+0x1e>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_write_r+0x1e>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	24000324 	.word	0x24000324

08008240 <__errno>:
 8008240:	4b01      	ldr	r3, [pc, #4]	@ (8008248 <__errno+0x8>)
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	24000038 	.word	0x24000038

0800824c <__libc_init_array>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4d0d      	ldr	r5, [pc, #52]	@ (8008284 <__libc_init_array+0x38>)
 8008250:	4c0d      	ldr	r4, [pc, #52]	@ (8008288 <__libc_init_array+0x3c>)
 8008252:	1b64      	subs	r4, r4, r5
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	2600      	movs	r6, #0
 8008258:	42a6      	cmp	r6, r4
 800825a:	d109      	bne.n	8008270 <__libc_init_array+0x24>
 800825c:	4d0b      	ldr	r5, [pc, #44]	@ (800828c <__libc_init_array+0x40>)
 800825e:	4c0c      	ldr	r4, [pc, #48]	@ (8008290 <__libc_init_array+0x44>)
 8008260:	f000 fdb6 	bl	8008dd0 <_init>
 8008264:	1b64      	subs	r4, r4, r5
 8008266:	10a4      	asrs	r4, r4, #2
 8008268:	2600      	movs	r6, #0
 800826a:	42a6      	cmp	r6, r4
 800826c:	d105      	bne.n	800827a <__libc_init_array+0x2e>
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	f855 3b04 	ldr.w	r3, [r5], #4
 8008274:	4798      	blx	r3
 8008276:	3601      	adds	r6, #1
 8008278:	e7ee      	b.n	8008258 <__libc_init_array+0xc>
 800827a:	f855 3b04 	ldr.w	r3, [r5], #4
 800827e:	4798      	blx	r3
 8008280:	3601      	adds	r6, #1
 8008282:	e7f2      	b.n	800826a <__libc_init_array+0x1e>
 8008284:	08009b34 	.word	0x08009b34
 8008288:	08009b34 	.word	0x08009b34
 800828c:	08009b34 	.word	0x08009b34
 8008290:	08009b38 	.word	0x08009b38

08008294 <__retarget_lock_init_recursive>:
 8008294:	4770      	bx	lr

08008296 <__retarget_lock_acquire_recursive>:
 8008296:	4770      	bx	lr

08008298 <__retarget_lock_release_recursive>:
 8008298:	4770      	bx	lr
	...

0800829c <_free_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4605      	mov	r5, r0
 80082a0:	2900      	cmp	r1, #0
 80082a2:	d041      	beq.n	8008328 <_free_r+0x8c>
 80082a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a8:	1f0c      	subs	r4, r1, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfb8      	it	lt
 80082ae:	18e4      	addlt	r4, r4, r3
 80082b0:	f000 f8e0 	bl	8008474 <__malloc_lock>
 80082b4:	4a1d      	ldr	r2, [pc, #116]	@ (800832c <_free_r+0x90>)
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	b933      	cbnz	r3, 80082c8 <_free_r+0x2c>
 80082ba:	6063      	str	r3, [r4, #4]
 80082bc:	6014      	str	r4, [r2, #0]
 80082be:	4628      	mov	r0, r5
 80082c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c4:	f000 b8dc 	b.w	8008480 <__malloc_unlock>
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	d908      	bls.n	80082de <_free_r+0x42>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	1821      	adds	r1, r4, r0
 80082d0:	428b      	cmp	r3, r1
 80082d2:	bf01      	itttt	eq
 80082d4:	6819      	ldreq	r1, [r3, #0]
 80082d6:	685b      	ldreq	r3, [r3, #4]
 80082d8:	1809      	addeq	r1, r1, r0
 80082da:	6021      	streq	r1, [r4, #0]
 80082dc:	e7ed      	b.n	80082ba <_free_r+0x1e>
 80082de:	461a      	mov	r2, r3
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	b10b      	cbz	r3, 80082e8 <_free_r+0x4c>
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	d9fa      	bls.n	80082de <_free_r+0x42>
 80082e8:	6811      	ldr	r1, [r2, #0]
 80082ea:	1850      	adds	r0, r2, r1
 80082ec:	42a0      	cmp	r0, r4
 80082ee:	d10b      	bne.n	8008308 <_free_r+0x6c>
 80082f0:	6820      	ldr	r0, [r4, #0]
 80082f2:	4401      	add	r1, r0
 80082f4:	1850      	adds	r0, r2, r1
 80082f6:	4283      	cmp	r3, r0
 80082f8:	6011      	str	r1, [r2, #0]
 80082fa:	d1e0      	bne.n	80082be <_free_r+0x22>
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	6053      	str	r3, [r2, #4]
 8008302:	4408      	add	r0, r1
 8008304:	6010      	str	r0, [r2, #0]
 8008306:	e7da      	b.n	80082be <_free_r+0x22>
 8008308:	d902      	bls.n	8008310 <_free_r+0x74>
 800830a:	230c      	movs	r3, #12
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	e7d6      	b.n	80082be <_free_r+0x22>
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	1821      	adds	r1, r4, r0
 8008314:	428b      	cmp	r3, r1
 8008316:	bf04      	itt	eq
 8008318:	6819      	ldreq	r1, [r3, #0]
 800831a:	685b      	ldreq	r3, [r3, #4]
 800831c:	6063      	str	r3, [r4, #4]
 800831e:	bf04      	itt	eq
 8008320:	1809      	addeq	r1, r1, r0
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	6054      	str	r4, [r2, #4]
 8008326:	e7ca      	b.n	80082be <_free_r+0x22>
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	24000330 	.word	0x24000330

08008330 <sbrk_aligned>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	4e0f      	ldr	r6, [pc, #60]	@ (8008370 <sbrk_aligned+0x40>)
 8008334:	460c      	mov	r4, r1
 8008336:	6831      	ldr	r1, [r6, #0]
 8008338:	4605      	mov	r5, r0
 800833a:	b911      	cbnz	r1, 8008342 <sbrk_aligned+0x12>
 800833c:	f000 fcb4 	bl	8008ca8 <_sbrk_r>
 8008340:	6030      	str	r0, [r6, #0]
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f000 fcaf 	bl	8008ca8 <_sbrk_r>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d103      	bne.n	8008356 <sbrk_aligned+0x26>
 800834e:	f04f 34ff 	mov.w	r4, #4294967295
 8008352:	4620      	mov	r0, r4
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	1cc4      	adds	r4, r0, #3
 8008358:	f024 0403 	bic.w	r4, r4, #3
 800835c:	42a0      	cmp	r0, r4
 800835e:	d0f8      	beq.n	8008352 <sbrk_aligned+0x22>
 8008360:	1a21      	subs	r1, r4, r0
 8008362:	4628      	mov	r0, r5
 8008364:	f000 fca0 	bl	8008ca8 <_sbrk_r>
 8008368:	3001      	adds	r0, #1
 800836a:	d1f2      	bne.n	8008352 <sbrk_aligned+0x22>
 800836c:	e7ef      	b.n	800834e <sbrk_aligned+0x1e>
 800836e:	bf00      	nop
 8008370:	2400032c 	.word	0x2400032c

08008374 <_malloc_r>:
 8008374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008378:	1ccd      	adds	r5, r1, #3
 800837a:	f025 0503 	bic.w	r5, r5, #3
 800837e:	3508      	adds	r5, #8
 8008380:	2d0c      	cmp	r5, #12
 8008382:	bf38      	it	cc
 8008384:	250c      	movcc	r5, #12
 8008386:	2d00      	cmp	r5, #0
 8008388:	4606      	mov	r6, r0
 800838a:	db01      	blt.n	8008390 <_malloc_r+0x1c>
 800838c:	42a9      	cmp	r1, r5
 800838e:	d904      	bls.n	800839a <_malloc_r+0x26>
 8008390:	230c      	movs	r3, #12
 8008392:	6033      	str	r3, [r6, #0]
 8008394:	2000      	movs	r0, #0
 8008396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800839a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008470 <_malloc_r+0xfc>
 800839e:	f000 f869 	bl	8008474 <__malloc_lock>
 80083a2:	f8d8 3000 	ldr.w	r3, [r8]
 80083a6:	461c      	mov	r4, r3
 80083a8:	bb44      	cbnz	r4, 80083fc <_malloc_r+0x88>
 80083aa:	4629      	mov	r1, r5
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ffbf 	bl	8008330 <sbrk_aligned>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	4604      	mov	r4, r0
 80083b6:	d158      	bne.n	800846a <_malloc_r+0xf6>
 80083b8:	f8d8 4000 	ldr.w	r4, [r8]
 80083bc:	4627      	mov	r7, r4
 80083be:	2f00      	cmp	r7, #0
 80083c0:	d143      	bne.n	800844a <_malloc_r+0xd6>
 80083c2:	2c00      	cmp	r4, #0
 80083c4:	d04b      	beq.n	800845e <_malloc_r+0xea>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	4639      	mov	r1, r7
 80083ca:	4630      	mov	r0, r6
 80083cc:	eb04 0903 	add.w	r9, r4, r3
 80083d0:	f000 fc6a 	bl	8008ca8 <_sbrk_r>
 80083d4:	4581      	cmp	r9, r0
 80083d6:	d142      	bne.n	800845e <_malloc_r+0xea>
 80083d8:	6821      	ldr	r1, [r4, #0]
 80083da:	1a6d      	subs	r5, r5, r1
 80083dc:	4629      	mov	r1, r5
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff ffa6 	bl	8008330 <sbrk_aligned>
 80083e4:	3001      	adds	r0, #1
 80083e6:	d03a      	beq.n	800845e <_malloc_r+0xea>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	442b      	add	r3, r5
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	f8d8 3000 	ldr.w	r3, [r8]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	bb62      	cbnz	r2, 8008450 <_malloc_r+0xdc>
 80083f6:	f8c8 7000 	str.w	r7, [r8]
 80083fa:	e00f      	b.n	800841c <_malloc_r+0xa8>
 80083fc:	6822      	ldr	r2, [r4, #0]
 80083fe:	1b52      	subs	r2, r2, r5
 8008400:	d420      	bmi.n	8008444 <_malloc_r+0xd0>
 8008402:	2a0b      	cmp	r2, #11
 8008404:	d917      	bls.n	8008436 <_malloc_r+0xc2>
 8008406:	1961      	adds	r1, r4, r5
 8008408:	42a3      	cmp	r3, r4
 800840a:	6025      	str	r5, [r4, #0]
 800840c:	bf18      	it	ne
 800840e:	6059      	strne	r1, [r3, #4]
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	bf08      	it	eq
 8008414:	f8c8 1000 	streq.w	r1, [r8]
 8008418:	5162      	str	r2, [r4, r5]
 800841a:	604b      	str	r3, [r1, #4]
 800841c:	4630      	mov	r0, r6
 800841e:	f000 f82f 	bl	8008480 <__malloc_unlock>
 8008422:	f104 000b 	add.w	r0, r4, #11
 8008426:	1d23      	adds	r3, r4, #4
 8008428:	f020 0007 	bic.w	r0, r0, #7
 800842c:	1ac2      	subs	r2, r0, r3
 800842e:	bf1c      	itt	ne
 8008430:	1a1b      	subne	r3, r3, r0
 8008432:	50a3      	strne	r3, [r4, r2]
 8008434:	e7af      	b.n	8008396 <_malloc_r+0x22>
 8008436:	6862      	ldr	r2, [r4, #4]
 8008438:	42a3      	cmp	r3, r4
 800843a:	bf0c      	ite	eq
 800843c:	f8c8 2000 	streq.w	r2, [r8]
 8008440:	605a      	strne	r2, [r3, #4]
 8008442:	e7eb      	b.n	800841c <_malloc_r+0xa8>
 8008444:	4623      	mov	r3, r4
 8008446:	6864      	ldr	r4, [r4, #4]
 8008448:	e7ae      	b.n	80083a8 <_malloc_r+0x34>
 800844a:	463c      	mov	r4, r7
 800844c:	687f      	ldr	r7, [r7, #4]
 800844e:	e7b6      	b.n	80083be <_malloc_r+0x4a>
 8008450:	461a      	mov	r2, r3
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	42a3      	cmp	r3, r4
 8008456:	d1fb      	bne.n	8008450 <_malloc_r+0xdc>
 8008458:	2300      	movs	r3, #0
 800845a:	6053      	str	r3, [r2, #4]
 800845c:	e7de      	b.n	800841c <_malloc_r+0xa8>
 800845e:	230c      	movs	r3, #12
 8008460:	6033      	str	r3, [r6, #0]
 8008462:	4630      	mov	r0, r6
 8008464:	f000 f80c 	bl	8008480 <__malloc_unlock>
 8008468:	e794      	b.n	8008394 <_malloc_r+0x20>
 800846a:	6005      	str	r5, [r0, #0]
 800846c:	e7d6      	b.n	800841c <_malloc_r+0xa8>
 800846e:	bf00      	nop
 8008470:	24000330 	.word	0x24000330

08008474 <__malloc_lock>:
 8008474:	4801      	ldr	r0, [pc, #4]	@ (800847c <__malloc_lock+0x8>)
 8008476:	f7ff bf0e 	b.w	8008296 <__retarget_lock_acquire_recursive>
 800847a:	bf00      	nop
 800847c:	24000328 	.word	0x24000328

08008480 <__malloc_unlock>:
 8008480:	4801      	ldr	r0, [pc, #4]	@ (8008488 <__malloc_unlock+0x8>)
 8008482:	f7ff bf09 	b.w	8008298 <__retarget_lock_release_recursive>
 8008486:	bf00      	nop
 8008488:	24000328 	.word	0x24000328

0800848c <__sfputc_r>:
 800848c:	6893      	ldr	r3, [r2, #8]
 800848e:	3b01      	subs	r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	b410      	push	{r4}
 8008494:	6093      	str	r3, [r2, #8]
 8008496:	da08      	bge.n	80084aa <__sfputc_r+0x1e>
 8008498:	6994      	ldr	r4, [r2, #24]
 800849a:	42a3      	cmp	r3, r4
 800849c:	db01      	blt.n	80084a2 <__sfputc_r+0x16>
 800849e:	290a      	cmp	r1, #10
 80084a0:	d103      	bne.n	80084aa <__sfputc_r+0x1e>
 80084a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a6:	f000 bb6b 	b.w	8008b80 <__swbuf_r>
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	1c58      	adds	r0, r3, #1
 80084ae:	6010      	str	r0, [r2, #0]
 80084b0:	7019      	strb	r1, [r3, #0]
 80084b2:	4608      	mov	r0, r1
 80084b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <__sfputs_r>:
 80084ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	18d5      	adds	r5, r2, r3
 80084c4:	42ac      	cmp	r4, r5
 80084c6:	d101      	bne.n	80084cc <__sfputs_r+0x12>
 80084c8:	2000      	movs	r0, #0
 80084ca:	e007      	b.n	80084dc <__sfputs_r+0x22>
 80084cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d0:	463a      	mov	r2, r7
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7ff ffda 	bl	800848c <__sfputc_r>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d1f3      	bne.n	80084c4 <__sfputs_r+0xa>
 80084dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084e0 <_vfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	460d      	mov	r5, r1
 80084e6:	b09d      	sub	sp, #116	@ 0x74
 80084e8:	4614      	mov	r4, r2
 80084ea:	4698      	mov	r8, r3
 80084ec:	4606      	mov	r6, r0
 80084ee:	b118      	cbz	r0, 80084f8 <_vfiprintf_r+0x18>
 80084f0:	6a03      	ldr	r3, [r0, #32]
 80084f2:	b90b      	cbnz	r3, 80084f8 <_vfiprintf_r+0x18>
 80084f4:	f7ff fdca 	bl	800808c <__sinit>
 80084f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084fa:	07d9      	lsls	r1, r3, #31
 80084fc:	d405      	bmi.n	800850a <_vfiprintf_r+0x2a>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	059a      	lsls	r2, r3, #22
 8008502:	d402      	bmi.n	800850a <_vfiprintf_r+0x2a>
 8008504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008506:	f7ff fec6 	bl	8008296 <__retarget_lock_acquire_recursive>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	071b      	lsls	r3, r3, #28
 800850e:	d501      	bpl.n	8008514 <_vfiprintf_r+0x34>
 8008510:	692b      	ldr	r3, [r5, #16]
 8008512:	b99b      	cbnz	r3, 800853c <_vfiprintf_r+0x5c>
 8008514:	4629      	mov	r1, r5
 8008516:	4630      	mov	r0, r6
 8008518:	f000 fb70 	bl	8008bfc <__swsetup_r>
 800851c:	b170      	cbz	r0, 800853c <_vfiprintf_r+0x5c>
 800851e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008520:	07dc      	lsls	r4, r3, #31
 8008522:	d504      	bpl.n	800852e <_vfiprintf_r+0x4e>
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b01d      	add	sp, #116	@ 0x74
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	0598      	lsls	r0, r3, #22
 8008532:	d4f7      	bmi.n	8008524 <_vfiprintf_r+0x44>
 8008534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008536:	f7ff feaf 	bl	8008298 <__retarget_lock_release_recursive>
 800853a:	e7f3      	b.n	8008524 <_vfiprintf_r+0x44>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008540:	2320      	movs	r3, #32
 8008542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	2330      	movs	r3, #48	@ 0x30
 800854c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086fc <_vfiprintf_r+0x21c>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008554:	f04f 0901 	mov.w	r9, #1
 8008558:	4623      	mov	r3, r4
 800855a:	469a      	mov	sl, r3
 800855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008560:	b10a      	cbz	r2, 8008566 <_vfiprintf_r+0x86>
 8008562:	2a25      	cmp	r2, #37	@ 0x25
 8008564:	d1f9      	bne.n	800855a <_vfiprintf_r+0x7a>
 8008566:	ebba 0b04 	subs.w	fp, sl, r4
 800856a:	d00b      	beq.n	8008584 <_vfiprintf_r+0xa4>
 800856c:	465b      	mov	r3, fp
 800856e:	4622      	mov	r2, r4
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ffa1 	bl	80084ba <__sfputs_r>
 8008578:	3001      	adds	r0, #1
 800857a:	f000 80a7 	beq.w	80086cc <_vfiprintf_r+0x1ec>
 800857e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008580:	445a      	add	r2, fp
 8008582:	9209      	str	r2, [sp, #36]	@ 0x24
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 809f 	beq.w	80086cc <_vfiprintf_r+0x1ec>
 800858e:	2300      	movs	r3, #0
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80085a6:	4654      	mov	r4, sl
 80085a8:	2205      	movs	r2, #5
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4853      	ldr	r0, [pc, #332]	@ (80086fc <_vfiprintf_r+0x21c>)
 80085b0:	f7f7 fe96 	bl	80002e0 <memchr>
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	b9d8      	cbnz	r0, 80085f0 <_vfiprintf_r+0x110>
 80085b8:	06d1      	lsls	r1, r2, #27
 80085ba:	bf44      	itt	mi
 80085bc:	2320      	movmi	r3, #32
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c2:	0713      	lsls	r3, r2, #28
 80085c4:	bf44      	itt	mi
 80085c6:	232b      	movmi	r3, #43	@ 0x2b
 80085c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80085d2:	d015      	beq.n	8008600 <_vfiprintf_r+0x120>
 80085d4:	9a07      	ldr	r2, [sp, #28]
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4621      	mov	r1, r4
 80085e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e4:	3b30      	subs	r3, #48	@ 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d94b      	bls.n	8008682 <_vfiprintf_r+0x1a2>
 80085ea:	b1b0      	cbz	r0, 800861a <_vfiprintf_r+0x13a>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e014      	b.n	800861a <_vfiprintf_r+0x13a>
 80085f0:	eba0 0308 	sub.w	r3, r0, r8
 80085f4:	fa09 f303 	lsl.w	r3, r9, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	46a2      	mov	sl, r4
 80085fe:	e7d2      	b.n	80085a6 <_vfiprintf_r+0xc6>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bfbb      	ittet	lt
 800860c:	425b      	neglt	r3, r3
 800860e:	f042 0202 	orrlt.w	r2, r2, #2
 8008612:	9307      	strge	r3, [sp, #28]
 8008614:	9307      	strlt	r3, [sp, #28]
 8008616:	bfb8      	it	lt
 8008618:	9204      	strlt	r2, [sp, #16]
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	2b2e      	cmp	r3, #46	@ 0x2e
 800861e:	d10a      	bne.n	8008636 <_vfiprintf_r+0x156>
 8008620:	7863      	ldrb	r3, [r4, #1]
 8008622:	2b2a      	cmp	r3, #42	@ 0x2a
 8008624:	d132      	bne.n	800868c <_vfiprintf_r+0x1ac>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	9203      	str	r2, [sp, #12]
 800862e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008632:	3402      	adds	r4, #2
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800870c <_vfiprintf_r+0x22c>
 800863a:	7821      	ldrb	r1, [r4, #0]
 800863c:	2203      	movs	r2, #3
 800863e:	4650      	mov	r0, sl
 8008640:	f7f7 fe4e 	bl	80002e0 <memchr>
 8008644:	b138      	cbz	r0, 8008656 <_vfiprintf_r+0x176>
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	eba0 000a 	sub.w	r0, r0, sl
 800864c:	2240      	movs	r2, #64	@ 0x40
 800864e:	4082      	lsls	r2, r0
 8008650:	4313      	orrs	r3, r2
 8008652:	3401      	adds	r4, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865a:	4829      	ldr	r0, [pc, #164]	@ (8008700 <_vfiprintf_r+0x220>)
 800865c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008660:	2206      	movs	r2, #6
 8008662:	f7f7 fe3d 	bl	80002e0 <memchr>
 8008666:	2800      	cmp	r0, #0
 8008668:	d03f      	beq.n	80086ea <_vfiprintf_r+0x20a>
 800866a:	4b26      	ldr	r3, [pc, #152]	@ (8008704 <_vfiprintf_r+0x224>)
 800866c:	bb1b      	cbnz	r3, 80086b6 <_vfiprintf_r+0x1d6>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	3307      	adds	r3, #7
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	3308      	adds	r3, #8
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800867c:	443b      	add	r3, r7
 800867e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008680:	e76a      	b.n	8008558 <_vfiprintf_r+0x78>
 8008682:	fb0c 3202 	mla	r2, ip, r2, r3
 8008686:	460c      	mov	r4, r1
 8008688:	2001      	movs	r0, #1
 800868a:	e7a8      	b.n	80085de <_vfiprintf_r+0xfe>
 800868c:	2300      	movs	r3, #0
 800868e:	3401      	adds	r4, #1
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	4619      	mov	r1, r3
 8008694:	f04f 0c0a 	mov.w	ip, #10
 8008698:	4620      	mov	r0, r4
 800869a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869e:	3a30      	subs	r2, #48	@ 0x30
 80086a0:	2a09      	cmp	r2, #9
 80086a2:	d903      	bls.n	80086ac <_vfiprintf_r+0x1cc>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0c6      	beq.n	8008636 <_vfiprintf_r+0x156>
 80086a8:	9105      	str	r1, [sp, #20]
 80086aa:	e7c4      	b.n	8008636 <_vfiprintf_r+0x156>
 80086ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b0:	4604      	mov	r4, r0
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7f0      	b.n	8008698 <_vfiprintf_r+0x1b8>
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <_vfiprintf_r+0x228>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4630      	mov	r0, r6
 80086c2:	f3af 8000 	nop.w
 80086c6:	4607      	mov	r7, r0
 80086c8:	1c78      	adds	r0, r7, #1
 80086ca:	d1d6      	bne.n	800867a <_vfiprintf_r+0x19a>
 80086cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ce:	07d9      	lsls	r1, r3, #31
 80086d0:	d405      	bmi.n	80086de <_vfiprintf_r+0x1fe>
 80086d2:	89ab      	ldrh	r3, [r5, #12]
 80086d4:	059a      	lsls	r2, r3, #22
 80086d6:	d402      	bmi.n	80086de <_vfiprintf_r+0x1fe>
 80086d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086da:	f7ff fddd 	bl	8008298 <__retarget_lock_release_recursive>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	065b      	lsls	r3, r3, #25
 80086e2:	f53f af1f 	bmi.w	8008524 <_vfiprintf_r+0x44>
 80086e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e8:	e71e      	b.n	8008528 <_vfiprintf_r+0x48>
 80086ea:	ab03      	add	r3, sp, #12
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	462a      	mov	r2, r5
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <_vfiprintf_r+0x228>)
 80086f2:	a904      	add	r1, sp, #16
 80086f4:	4630      	mov	r0, r6
 80086f6:	f000 f879 	bl	80087ec <_printf_i>
 80086fa:	e7e4      	b.n	80086c6 <_vfiprintf_r+0x1e6>
 80086fc:	08009af8 	.word	0x08009af8
 8008700:	08009b02 	.word	0x08009b02
 8008704:	00000000 	.word	0x00000000
 8008708:	080084bb 	.word	0x080084bb
 800870c:	08009afe 	.word	0x08009afe

08008710 <_printf_common>:
 8008710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008714:	4616      	mov	r6, r2
 8008716:	4698      	mov	r8, r3
 8008718:	688a      	ldr	r2, [r1, #8]
 800871a:	690b      	ldr	r3, [r1, #16]
 800871c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008720:	4293      	cmp	r3, r2
 8008722:	bfb8      	it	lt
 8008724:	4613      	movlt	r3, r2
 8008726:	6033      	str	r3, [r6, #0]
 8008728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800872c:	4607      	mov	r7, r0
 800872e:	460c      	mov	r4, r1
 8008730:	b10a      	cbz	r2, 8008736 <_printf_common+0x26>
 8008732:	3301      	adds	r3, #1
 8008734:	6033      	str	r3, [r6, #0]
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	0699      	lsls	r1, r3, #26
 800873a:	bf42      	ittt	mi
 800873c:	6833      	ldrmi	r3, [r6, #0]
 800873e:	3302      	addmi	r3, #2
 8008740:	6033      	strmi	r3, [r6, #0]
 8008742:	6825      	ldr	r5, [r4, #0]
 8008744:	f015 0506 	ands.w	r5, r5, #6
 8008748:	d106      	bne.n	8008758 <_printf_common+0x48>
 800874a:	f104 0a19 	add.w	sl, r4, #25
 800874e:	68e3      	ldr	r3, [r4, #12]
 8008750:	6832      	ldr	r2, [r6, #0]
 8008752:	1a9b      	subs	r3, r3, r2
 8008754:	42ab      	cmp	r3, r5
 8008756:	dc26      	bgt.n	80087a6 <_printf_common+0x96>
 8008758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	3b00      	subs	r3, #0
 8008760:	bf18      	it	ne
 8008762:	2301      	movne	r3, #1
 8008764:	0692      	lsls	r2, r2, #26
 8008766:	d42b      	bmi.n	80087c0 <_printf_common+0xb0>
 8008768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800876c:	4641      	mov	r1, r8
 800876e:	4638      	mov	r0, r7
 8008770:	47c8      	blx	r9
 8008772:	3001      	adds	r0, #1
 8008774:	d01e      	beq.n	80087b4 <_printf_common+0xa4>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	6922      	ldr	r2, [r4, #16]
 800877a:	f003 0306 	and.w	r3, r3, #6
 800877e:	2b04      	cmp	r3, #4
 8008780:	bf02      	ittt	eq
 8008782:	68e5      	ldreq	r5, [r4, #12]
 8008784:	6833      	ldreq	r3, [r6, #0]
 8008786:	1aed      	subeq	r5, r5, r3
 8008788:	68a3      	ldr	r3, [r4, #8]
 800878a:	bf0c      	ite	eq
 800878c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008790:	2500      	movne	r5, #0
 8008792:	4293      	cmp	r3, r2
 8008794:	bfc4      	itt	gt
 8008796:	1a9b      	subgt	r3, r3, r2
 8008798:	18ed      	addgt	r5, r5, r3
 800879a:	2600      	movs	r6, #0
 800879c:	341a      	adds	r4, #26
 800879e:	42b5      	cmp	r5, r6
 80087a0:	d11a      	bne.n	80087d8 <_printf_common+0xc8>
 80087a2:	2000      	movs	r0, #0
 80087a4:	e008      	b.n	80087b8 <_printf_common+0xa8>
 80087a6:	2301      	movs	r3, #1
 80087a8:	4652      	mov	r2, sl
 80087aa:	4641      	mov	r1, r8
 80087ac:	4638      	mov	r0, r7
 80087ae:	47c8      	blx	r9
 80087b0:	3001      	adds	r0, #1
 80087b2:	d103      	bne.n	80087bc <_printf_common+0xac>
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087bc:	3501      	adds	r5, #1
 80087be:	e7c6      	b.n	800874e <_printf_common+0x3e>
 80087c0:	18e1      	adds	r1, r4, r3
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	2030      	movs	r0, #48	@ 0x30
 80087c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087ca:	4422      	add	r2, r4
 80087cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087d4:	3302      	adds	r3, #2
 80087d6:	e7c7      	b.n	8008768 <_printf_common+0x58>
 80087d8:	2301      	movs	r3, #1
 80087da:	4622      	mov	r2, r4
 80087dc:	4641      	mov	r1, r8
 80087de:	4638      	mov	r0, r7
 80087e0:	47c8      	blx	r9
 80087e2:	3001      	adds	r0, #1
 80087e4:	d0e6      	beq.n	80087b4 <_printf_common+0xa4>
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7d9      	b.n	800879e <_printf_common+0x8e>
	...

080087ec <_printf_i>:
 80087ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	7e0f      	ldrb	r7, [r1, #24]
 80087f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087f4:	2f78      	cmp	r7, #120	@ 0x78
 80087f6:	4691      	mov	r9, r2
 80087f8:	4680      	mov	r8, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	469a      	mov	sl, r3
 80087fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008802:	d807      	bhi.n	8008814 <_printf_i+0x28>
 8008804:	2f62      	cmp	r7, #98	@ 0x62
 8008806:	d80a      	bhi.n	800881e <_printf_i+0x32>
 8008808:	2f00      	cmp	r7, #0
 800880a:	f000 80d1 	beq.w	80089b0 <_printf_i+0x1c4>
 800880e:	2f58      	cmp	r7, #88	@ 0x58
 8008810:	f000 80b8 	beq.w	8008984 <_printf_i+0x198>
 8008814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800881c:	e03a      	b.n	8008894 <_printf_i+0xa8>
 800881e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008822:	2b15      	cmp	r3, #21
 8008824:	d8f6      	bhi.n	8008814 <_printf_i+0x28>
 8008826:	a101      	add	r1, pc, #4	@ (adr r1, 800882c <_printf_i+0x40>)
 8008828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800882c:	08008885 	.word	0x08008885
 8008830:	08008899 	.word	0x08008899
 8008834:	08008815 	.word	0x08008815
 8008838:	08008815 	.word	0x08008815
 800883c:	08008815 	.word	0x08008815
 8008840:	08008815 	.word	0x08008815
 8008844:	08008899 	.word	0x08008899
 8008848:	08008815 	.word	0x08008815
 800884c:	08008815 	.word	0x08008815
 8008850:	08008815 	.word	0x08008815
 8008854:	08008815 	.word	0x08008815
 8008858:	08008997 	.word	0x08008997
 800885c:	080088c3 	.word	0x080088c3
 8008860:	08008951 	.word	0x08008951
 8008864:	08008815 	.word	0x08008815
 8008868:	08008815 	.word	0x08008815
 800886c:	080089b9 	.word	0x080089b9
 8008870:	08008815 	.word	0x08008815
 8008874:	080088c3 	.word	0x080088c3
 8008878:	08008815 	.word	0x08008815
 800887c:	08008815 	.word	0x08008815
 8008880:	08008959 	.word	0x08008959
 8008884:	6833      	ldr	r3, [r6, #0]
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6032      	str	r2, [r6, #0]
 800888c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008894:	2301      	movs	r3, #1
 8008896:	e09c      	b.n	80089d2 <_printf_i+0x1e6>
 8008898:	6833      	ldr	r3, [r6, #0]
 800889a:	6820      	ldr	r0, [r4, #0]
 800889c:	1d19      	adds	r1, r3, #4
 800889e:	6031      	str	r1, [r6, #0]
 80088a0:	0606      	lsls	r6, r0, #24
 80088a2:	d501      	bpl.n	80088a8 <_printf_i+0xbc>
 80088a4:	681d      	ldr	r5, [r3, #0]
 80088a6:	e003      	b.n	80088b0 <_printf_i+0xc4>
 80088a8:	0645      	lsls	r5, r0, #25
 80088aa:	d5fb      	bpl.n	80088a4 <_printf_i+0xb8>
 80088ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	da03      	bge.n	80088bc <_printf_i+0xd0>
 80088b4:	232d      	movs	r3, #45	@ 0x2d
 80088b6:	426d      	negs	r5, r5
 80088b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088bc:	4858      	ldr	r0, [pc, #352]	@ (8008a20 <_printf_i+0x234>)
 80088be:	230a      	movs	r3, #10
 80088c0:	e011      	b.n	80088e6 <_printf_i+0xfa>
 80088c2:	6821      	ldr	r1, [r4, #0]
 80088c4:	6833      	ldr	r3, [r6, #0]
 80088c6:	0608      	lsls	r0, r1, #24
 80088c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80088cc:	d402      	bmi.n	80088d4 <_printf_i+0xe8>
 80088ce:	0649      	lsls	r1, r1, #25
 80088d0:	bf48      	it	mi
 80088d2:	b2ad      	uxthmi	r5, r5
 80088d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80088d6:	4852      	ldr	r0, [pc, #328]	@ (8008a20 <_printf_i+0x234>)
 80088d8:	6033      	str	r3, [r6, #0]
 80088da:	bf14      	ite	ne
 80088dc:	230a      	movne	r3, #10
 80088de:	2308      	moveq	r3, #8
 80088e0:	2100      	movs	r1, #0
 80088e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088e6:	6866      	ldr	r6, [r4, #4]
 80088e8:	60a6      	str	r6, [r4, #8]
 80088ea:	2e00      	cmp	r6, #0
 80088ec:	db05      	blt.n	80088fa <_printf_i+0x10e>
 80088ee:	6821      	ldr	r1, [r4, #0]
 80088f0:	432e      	orrs	r6, r5
 80088f2:	f021 0104 	bic.w	r1, r1, #4
 80088f6:	6021      	str	r1, [r4, #0]
 80088f8:	d04b      	beq.n	8008992 <_printf_i+0x1a6>
 80088fa:	4616      	mov	r6, r2
 80088fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008900:	fb03 5711 	mls	r7, r3, r1, r5
 8008904:	5dc7      	ldrb	r7, [r0, r7]
 8008906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800890a:	462f      	mov	r7, r5
 800890c:	42bb      	cmp	r3, r7
 800890e:	460d      	mov	r5, r1
 8008910:	d9f4      	bls.n	80088fc <_printf_i+0x110>
 8008912:	2b08      	cmp	r3, #8
 8008914:	d10b      	bne.n	800892e <_printf_i+0x142>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	07df      	lsls	r7, r3, #31
 800891a:	d508      	bpl.n	800892e <_printf_i+0x142>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	6861      	ldr	r1, [r4, #4]
 8008920:	4299      	cmp	r1, r3
 8008922:	bfde      	ittt	le
 8008924:	2330      	movle	r3, #48	@ 0x30
 8008926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800892a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800892e:	1b92      	subs	r2, r2, r6
 8008930:	6122      	str	r2, [r4, #16]
 8008932:	f8cd a000 	str.w	sl, [sp]
 8008936:	464b      	mov	r3, r9
 8008938:	aa03      	add	r2, sp, #12
 800893a:	4621      	mov	r1, r4
 800893c:	4640      	mov	r0, r8
 800893e:	f7ff fee7 	bl	8008710 <_printf_common>
 8008942:	3001      	adds	r0, #1
 8008944:	d14a      	bne.n	80089dc <_printf_i+0x1f0>
 8008946:	f04f 30ff 	mov.w	r0, #4294967295
 800894a:	b004      	add	sp, #16
 800894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	f043 0320 	orr.w	r3, r3, #32
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	4832      	ldr	r0, [pc, #200]	@ (8008a24 <_printf_i+0x238>)
 800895a:	2778      	movs	r7, #120	@ 0x78
 800895c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	6831      	ldr	r1, [r6, #0]
 8008964:	061f      	lsls	r7, r3, #24
 8008966:	f851 5b04 	ldr.w	r5, [r1], #4
 800896a:	d402      	bmi.n	8008972 <_printf_i+0x186>
 800896c:	065f      	lsls	r7, r3, #25
 800896e:	bf48      	it	mi
 8008970:	b2ad      	uxthmi	r5, r5
 8008972:	6031      	str	r1, [r6, #0]
 8008974:	07d9      	lsls	r1, r3, #31
 8008976:	bf44      	itt	mi
 8008978:	f043 0320 	orrmi.w	r3, r3, #32
 800897c:	6023      	strmi	r3, [r4, #0]
 800897e:	b11d      	cbz	r5, 8008988 <_printf_i+0x19c>
 8008980:	2310      	movs	r3, #16
 8008982:	e7ad      	b.n	80088e0 <_printf_i+0xf4>
 8008984:	4826      	ldr	r0, [pc, #152]	@ (8008a20 <_printf_i+0x234>)
 8008986:	e7e9      	b.n	800895c <_printf_i+0x170>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	f023 0320 	bic.w	r3, r3, #32
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	e7f6      	b.n	8008980 <_printf_i+0x194>
 8008992:	4616      	mov	r6, r2
 8008994:	e7bd      	b.n	8008912 <_printf_i+0x126>
 8008996:	6833      	ldr	r3, [r6, #0]
 8008998:	6825      	ldr	r5, [r4, #0]
 800899a:	6961      	ldr	r1, [r4, #20]
 800899c:	1d18      	adds	r0, r3, #4
 800899e:	6030      	str	r0, [r6, #0]
 80089a0:	062e      	lsls	r6, r5, #24
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	d501      	bpl.n	80089aa <_printf_i+0x1be>
 80089a6:	6019      	str	r1, [r3, #0]
 80089a8:	e002      	b.n	80089b0 <_printf_i+0x1c4>
 80089aa:	0668      	lsls	r0, r5, #25
 80089ac:	d5fb      	bpl.n	80089a6 <_printf_i+0x1ba>
 80089ae:	8019      	strh	r1, [r3, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	4616      	mov	r6, r2
 80089b6:	e7bc      	b.n	8008932 <_printf_i+0x146>
 80089b8:	6833      	ldr	r3, [r6, #0]
 80089ba:	1d1a      	adds	r2, r3, #4
 80089bc:	6032      	str	r2, [r6, #0]
 80089be:	681e      	ldr	r6, [r3, #0]
 80089c0:	6862      	ldr	r2, [r4, #4]
 80089c2:	2100      	movs	r1, #0
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7f7 fc8b 	bl	80002e0 <memchr>
 80089ca:	b108      	cbz	r0, 80089d0 <_printf_i+0x1e4>
 80089cc:	1b80      	subs	r0, r0, r6
 80089ce:	6060      	str	r0, [r4, #4]
 80089d0:	6863      	ldr	r3, [r4, #4]
 80089d2:	6123      	str	r3, [r4, #16]
 80089d4:	2300      	movs	r3, #0
 80089d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089da:	e7aa      	b.n	8008932 <_printf_i+0x146>
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	4632      	mov	r2, r6
 80089e0:	4649      	mov	r1, r9
 80089e2:	4640      	mov	r0, r8
 80089e4:	47d0      	blx	sl
 80089e6:	3001      	adds	r0, #1
 80089e8:	d0ad      	beq.n	8008946 <_printf_i+0x15a>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	079b      	lsls	r3, r3, #30
 80089ee:	d413      	bmi.n	8008a18 <_printf_i+0x22c>
 80089f0:	68e0      	ldr	r0, [r4, #12]
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	4298      	cmp	r0, r3
 80089f6:	bfb8      	it	lt
 80089f8:	4618      	movlt	r0, r3
 80089fa:	e7a6      	b.n	800894a <_printf_i+0x15e>
 80089fc:	2301      	movs	r3, #1
 80089fe:	4632      	mov	r2, r6
 8008a00:	4649      	mov	r1, r9
 8008a02:	4640      	mov	r0, r8
 8008a04:	47d0      	blx	sl
 8008a06:	3001      	adds	r0, #1
 8008a08:	d09d      	beq.n	8008946 <_printf_i+0x15a>
 8008a0a:	3501      	adds	r5, #1
 8008a0c:	68e3      	ldr	r3, [r4, #12]
 8008a0e:	9903      	ldr	r1, [sp, #12]
 8008a10:	1a5b      	subs	r3, r3, r1
 8008a12:	42ab      	cmp	r3, r5
 8008a14:	dcf2      	bgt.n	80089fc <_printf_i+0x210>
 8008a16:	e7eb      	b.n	80089f0 <_printf_i+0x204>
 8008a18:	2500      	movs	r5, #0
 8008a1a:	f104 0619 	add.w	r6, r4, #25
 8008a1e:	e7f5      	b.n	8008a0c <_printf_i+0x220>
 8008a20:	08009b09 	.word	0x08009b09
 8008a24:	08009b1a 	.word	0x08009b1a

08008a28 <__sflush_r>:
 8008a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a30:	0716      	lsls	r6, r2, #28
 8008a32:	4605      	mov	r5, r0
 8008a34:	460c      	mov	r4, r1
 8008a36:	d454      	bmi.n	8008ae2 <__sflush_r+0xba>
 8008a38:	684b      	ldr	r3, [r1, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dc02      	bgt.n	8008a44 <__sflush_r+0x1c>
 8008a3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dd48      	ble.n	8008ad6 <__sflush_r+0xae>
 8008a44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	d045      	beq.n	8008ad6 <__sflush_r+0xae>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a50:	682f      	ldr	r7, [r5, #0]
 8008a52:	6a21      	ldr	r1, [r4, #32]
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	d030      	beq.n	8008aba <__sflush_r+0x92>
 8008a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	0759      	lsls	r1, r3, #29
 8008a5e:	d505      	bpl.n	8008a6c <__sflush_r+0x44>
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	1ad2      	subs	r2, r2, r3
 8008a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a66:	b10b      	cbz	r3, 8008a6c <__sflush_r+0x44>
 8008a68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a6a:	1ad2      	subs	r2, r2, r3
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a70:	6a21      	ldr	r1, [r4, #32]
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b0      	blx	r6
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	d106      	bne.n	8008a8a <__sflush_r+0x62>
 8008a7c:	6829      	ldr	r1, [r5, #0]
 8008a7e:	291d      	cmp	r1, #29
 8008a80:	d82b      	bhi.n	8008ada <__sflush_r+0xb2>
 8008a82:	4a2a      	ldr	r2, [pc, #168]	@ (8008b2c <__sflush_r+0x104>)
 8008a84:	40ca      	lsrs	r2, r1
 8008a86:	07d6      	lsls	r6, r2, #31
 8008a88:	d527      	bpl.n	8008ada <__sflush_r+0xb2>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	6062      	str	r2, [r4, #4]
 8008a8e:	04d9      	lsls	r1, r3, #19
 8008a90:	6922      	ldr	r2, [r4, #16]
 8008a92:	6022      	str	r2, [r4, #0]
 8008a94:	d504      	bpl.n	8008aa0 <__sflush_r+0x78>
 8008a96:	1c42      	adds	r2, r0, #1
 8008a98:	d101      	bne.n	8008a9e <__sflush_r+0x76>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	b903      	cbnz	r3, 8008aa0 <__sflush_r+0x78>
 8008a9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aa2:	602f      	str	r7, [r5, #0]
 8008aa4:	b1b9      	cbz	r1, 8008ad6 <__sflush_r+0xae>
 8008aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	d002      	beq.n	8008ab4 <__sflush_r+0x8c>
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7ff fbf4 	bl	800829c <_free_r>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ab8:	e00d      	b.n	8008ad6 <__sflush_r+0xae>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b0      	blx	r6
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	1c50      	adds	r0, r2, #1
 8008ac4:	d1c9      	bne.n	8008a5a <__sflush_r+0x32>
 8008ac6:	682b      	ldr	r3, [r5, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0c6      	beq.n	8008a5a <__sflush_r+0x32>
 8008acc:	2b1d      	cmp	r3, #29
 8008ace:	d001      	beq.n	8008ad4 <__sflush_r+0xac>
 8008ad0:	2b16      	cmp	r3, #22
 8008ad2:	d11e      	bne.n	8008b12 <__sflush_r+0xea>
 8008ad4:	602f      	str	r7, [r5, #0]
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e022      	b.n	8008b20 <__sflush_r+0xf8>
 8008ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ade:	b21b      	sxth	r3, r3
 8008ae0:	e01b      	b.n	8008b1a <__sflush_r+0xf2>
 8008ae2:	690f      	ldr	r7, [r1, #16]
 8008ae4:	2f00      	cmp	r7, #0
 8008ae6:	d0f6      	beq.n	8008ad6 <__sflush_r+0xae>
 8008ae8:	0793      	lsls	r3, r2, #30
 8008aea:	680e      	ldr	r6, [r1, #0]
 8008aec:	bf08      	it	eq
 8008aee:	694b      	ldreq	r3, [r1, #20]
 8008af0:	600f      	str	r7, [r1, #0]
 8008af2:	bf18      	it	ne
 8008af4:	2300      	movne	r3, #0
 8008af6:	eba6 0807 	sub.w	r8, r6, r7
 8008afa:	608b      	str	r3, [r1, #8]
 8008afc:	f1b8 0f00 	cmp.w	r8, #0
 8008b00:	dde9      	ble.n	8008ad6 <__sflush_r+0xae>
 8008b02:	6a21      	ldr	r1, [r4, #32]
 8008b04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b06:	4643      	mov	r3, r8
 8008b08:	463a      	mov	r2, r7
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b0      	blx	r6
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	dc08      	bgt.n	8008b24 <__sflush_r+0xfc>
 8008b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	4407      	add	r7, r0
 8008b26:	eba8 0800 	sub.w	r8, r8, r0
 8008b2a:	e7e7      	b.n	8008afc <__sflush_r+0xd4>
 8008b2c:	20400001 	.word	0x20400001

08008b30 <_fflush_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	690b      	ldr	r3, [r1, #16]
 8008b34:	4605      	mov	r5, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	b913      	cbnz	r3, 8008b40 <_fflush_r+0x10>
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	b118      	cbz	r0, 8008b4a <_fflush_r+0x1a>
 8008b42:	6a03      	ldr	r3, [r0, #32]
 8008b44:	b90b      	cbnz	r3, 8008b4a <_fflush_r+0x1a>
 8008b46:	f7ff faa1 	bl	800808c <__sinit>
 8008b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0f3      	beq.n	8008b3a <_fflush_r+0xa>
 8008b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b54:	07d0      	lsls	r0, r2, #31
 8008b56:	d404      	bmi.n	8008b62 <_fflush_r+0x32>
 8008b58:	0599      	lsls	r1, r3, #22
 8008b5a:	d402      	bmi.n	8008b62 <_fflush_r+0x32>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5e:	f7ff fb9a 	bl	8008296 <__retarget_lock_acquire_recursive>
 8008b62:	4628      	mov	r0, r5
 8008b64:	4621      	mov	r1, r4
 8008b66:	f7ff ff5f 	bl	8008a28 <__sflush_r>
 8008b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	4605      	mov	r5, r0
 8008b70:	d4e4      	bmi.n	8008b3c <_fflush_r+0xc>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	059b      	lsls	r3, r3, #22
 8008b76:	d4e1      	bmi.n	8008b3c <_fflush_r+0xc>
 8008b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b7a:	f7ff fb8d 	bl	8008298 <__retarget_lock_release_recursive>
 8008b7e:	e7dd      	b.n	8008b3c <_fflush_r+0xc>

08008b80 <__swbuf_r>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	460e      	mov	r6, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	4605      	mov	r5, r0
 8008b88:	b118      	cbz	r0, 8008b92 <__swbuf_r+0x12>
 8008b8a:	6a03      	ldr	r3, [r0, #32]
 8008b8c:	b90b      	cbnz	r3, 8008b92 <__swbuf_r+0x12>
 8008b8e:	f7ff fa7d 	bl	800808c <__sinit>
 8008b92:	69a3      	ldr	r3, [r4, #24]
 8008b94:	60a3      	str	r3, [r4, #8]
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	071a      	lsls	r2, r3, #28
 8008b9a:	d501      	bpl.n	8008ba0 <__swbuf_r+0x20>
 8008b9c:	6923      	ldr	r3, [r4, #16]
 8008b9e:	b943      	cbnz	r3, 8008bb2 <__swbuf_r+0x32>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 f82a 	bl	8008bfc <__swsetup_r>
 8008ba8:	b118      	cbz	r0, 8008bb2 <__swbuf_r+0x32>
 8008baa:	f04f 37ff 	mov.w	r7, #4294967295
 8008bae:	4638      	mov	r0, r7
 8008bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	6922      	ldr	r2, [r4, #16]
 8008bb6:	1a98      	subs	r0, r3, r2
 8008bb8:	6963      	ldr	r3, [r4, #20]
 8008bba:	b2f6      	uxtb	r6, r6
 8008bbc:	4283      	cmp	r3, r0
 8008bbe:	4637      	mov	r7, r6
 8008bc0:	dc05      	bgt.n	8008bce <__swbuf_r+0x4e>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f7ff ffb3 	bl	8008b30 <_fflush_r>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d1ed      	bne.n	8008baa <__swbuf_r+0x2a>
 8008bce:	68a3      	ldr	r3, [r4, #8]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	60a3      	str	r3, [r4, #8]
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	6022      	str	r2, [r4, #0]
 8008bda:	701e      	strb	r6, [r3, #0]
 8008bdc:	6962      	ldr	r2, [r4, #20]
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d004      	beq.n	8008bee <__swbuf_r+0x6e>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	07db      	lsls	r3, r3, #31
 8008be8:	d5e1      	bpl.n	8008bae <__swbuf_r+0x2e>
 8008bea:	2e0a      	cmp	r6, #10
 8008bec:	d1df      	bne.n	8008bae <__swbuf_r+0x2e>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7ff ff9d 	bl	8008b30 <_fflush_r>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d0d9      	beq.n	8008bae <__swbuf_r+0x2e>
 8008bfa:	e7d6      	b.n	8008baa <__swbuf_r+0x2a>

08008bfc <__swsetup_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4b29      	ldr	r3, [pc, #164]	@ (8008ca4 <__swsetup_r+0xa8>)
 8008c00:	4605      	mov	r5, r0
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	460c      	mov	r4, r1
 8008c06:	b118      	cbz	r0, 8008c10 <__swsetup_r+0x14>
 8008c08:	6a03      	ldr	r3, [r0, #32]
 8008c0a:	b90b      	cbnz	r3, 8008c10 <__swsetup_r+0x14>
 8008c0c:	f7ff fa3e 	bl	800808c <__sinit>
 8008c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c14:	0719      	lsls	r1, r3, #28
 8008c16:	d422      	bmi.n	8008c5e <__swsetup_r+0x62>
 8008c18:	06da      	lsls	r2, r3, #27
 8008c1a:	d407      	bmi.n	8008c2c <__swsetup_r+0x30>
 8008c1c:	2209      	movs	r2, #9
 8008c1e:	602a      	str	r2, [r5, #0]
 8008c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c24:	81a3      	strh	r3, [r4, #12]
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	e033      	b.n	8008c94 <__swsetup_r+0x98>
 8008c2c:	0758      	lsls	r0, r3, #29
 8008c2e:	d512      	bpl.n	8008c56 <__swsetup_r+0x5a>
 8008c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c32:	b141      	cbz	r1, 8008c46 <__swsetup_r+0x4a>
 8008c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d002      	beq.n	8008c42 <__swsetup_r+0x46>
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f7ff fb2d 	bl	800829c <_free_r>
 8008c42:	2300      	movs	r3, #0
 8008c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	6063      	str	r3, [r4, #4]
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f043 0308 	orr.w	r3, r3, #8
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	b94b      	cbnz	r3, 8008c76 <__swsetup_r+0x7a>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c6c:	d003      	beq.n	8008c76 <__swsetup_r+0x7a>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f000 f84f 	bl	8008d14 <__smakebuf_r>
 8008c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7a:	f013 0201 	ands.w	r2, r3, #1
 8008c7e:	d00a      	beq.n	8008c96 <__swsetup_r+0x9a>
 8008c80:	2200      	movs	r2, #0
 8008c82:	60a2      	str	r2, [r4, #8]
 8008c84:	6962      	ldr	r2, [r4, #20]
 8008c86:	4252      	negs	r2, r2
 8008c88:	61a2      	str	r2, [r4, #24]
 8008c8a:	6922      	ldr	r2, [r4, #16]
 8008c8c:	b942      	cbnz	r2, 8008ca0 <__swsetup_r+0xa4>
 8008c8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c92:	d1c5      	bne.n	8008c20 <__swsetup_r+0x24>
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	0799      	lsls	r1, r3, #30
 8008c98:	bf58      	it	pl
 8008c9a:	6962      	ldrpl	r2, [r4, #20]
 8008c9c:	60a2      	str	r2, [r4, #8]
 8008c9e:	e7f4      	b.n	8008c8a <__swsetup_r+0x8e>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e7f7      	b.n	8008c94 <__swsetup_r+0x98>
 8008ca4:	24000038 	.word	0x24000038

08008ca8 <_sbrk_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d06      	ldr	r5, [pc, #24]	@ (8008cc4 <_sbrk_r+0x1c>)
 8008cac:	2300      	movs	r3, #0
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	f7f8 fef0 	bl	8001a98 <_sbrk>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d102      	bne.n	8008cc2 <_sbrk_r+0x1a>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b103      	cbz	r3, 8008cc2 <_sbrk_r+0x1a>
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	24000324 	.word	0x24000324

08008cc8 <__swhatbuf_r>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	460c      	mov	r4, r1
 8008ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	b096      	sub	sp, #88	@ 0x58
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	461e      	mov	r6, r3
 8008cd8:	da0d      	bge.n	8008cf6 <__swhatbuf_r+0x2e>
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ce0:	f04f 0100 	mov.w	r1, #0
 8008ce4:	bf14      	ite	ne
 8008ce6:	2340      	movne	r3, #64	@ 0x40
 8008ce8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cec:	2000      	movs	r0, #0
 8008cee:	6031      	str	r1, [r6, #0]
 8008cf0:	602b      	str	r3, [r5, #0]
 8008cf2:	b016      	add	sp, #88	@ 0x58
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	466a      	mov	r2, sp
 8008cf8:	f000 f848 	bl	8008d8c <_fstat_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	dbec      	blt.n	8008cda <__swhatbuf_r+0x12>
 8008d00:	9901      	ldr	r1, [sp, #4]
 8008d02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d0a:	4259      	negs	r1, r3
 8008d0c:	4159      	adcs	r1, r3
 8008d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d12:	e7eb      	b.n	8008cec <__swhatbuf_r+0x24>

08008d14 <__smakebuf_r>:
 8008d14:	898b      	ldrh	r3, [r1, #12]
 8008d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d18:	079d      	lsls	r5, r3, #30
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	d507      	bpl.n	8008d30 <__smakebuf_r+0x1c>
 8008d20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	6123      	str	r3, [r4, #16]
 8008d28:	2301      	movs	r3, #1
 8008d2a:	6163      	str	r3, [r4, #20]
 8008d2c:	b003      	add	sp, #12
 8008d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d30:	ab01      	add	r3, sp, #4
 8008d32:	466a      	mov	r2, sp
 8008d34:	f7ff ffc8 	bl	8008cc8 <__swhatbuf_r>
 8008d38:	9f00      	ldr	r7, [sp, #0]
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7ff fb18 	bl	8008374 <_malloc_r>
 8008d44:	b948      	cbnz	r0, 8008d5a <__smakebuf_r+0x46>
 8008d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d4a:	059a      	lsls	r2, r3, #22
 8008d4c:	d4ee      	bmi.n	8008d2c <__smakebuf_r+0x18>
 8008d4e:	f023 0303 	bic.w	r3, r3, #3
 8008d52:	f043 0302 	orr.w	r3, r3, #2
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	e7e2      	b.n	8008d20 <__smakebuf_r+0xc>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	6020      	str	r0, [r4, #0]
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d6a:	b15b      	cbz	r3, 8008d84 <__smakebuf_r+0x70>
 8008d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d70:	4630      	mov	r0, r6
 8008d72:	f000 f81d 	bl	8008db0 <_isatty_r>
 8008d76:	b128      	cbz	r0, 8008d84 <__smakebuf_r+0x70>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f023 0303 	bic.w	r3, r3, #3
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	81a3      	strh	r3, [r4, #12]
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	431d      	orrs	r5, r3
 8008d88:	81a5      	strh	r5, [r4, #12]
 8008d8a:	e7cf      	b.n	8008d2c <__smakebuf_r+0x18>

08008d8c <_fstat_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4d07      	ldr	r5, [pc, #28]	@ (8008dac <_fstat_r+0x20>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	4604      	mov	r4, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f7f8 fe54 	bl	8001a46 <_fstat>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d102      	bne.n	8008da8 <_fstat_r+0x1c>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	b103      	cbz	r3, 8008da8 <_fstat_r+0x1c>
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	bd38      	pop	{r3, r4, r5, pc}
 8008daa:	bf00      	nop
 8008dac:	24000324 	.word	0x24000324

08008db0 <_isatty_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d06      	ldr	r5, [pc, #24]	@ (8008dcc <_isatty_r+0x1c>)
 8008db4:	2300      	movs	r3, #0
 8008db6:	4604      	mov	r4, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	602b      	str	r3, [r5, #0]
 8008dbc:	f7f8 fe53 	bl	8001a66 <_isatty>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_isatty_r+0x1a>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_isatty_r+0x1a>
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	24000324 	.word	0x24000324

08008dd0 <_init>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr

08008ddc <_fini>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr
