
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e24  08008158  08008158  00009158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f7c  08009f7c  0000af7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f84  08009f84  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009f88  08009f88  0000af88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009f8c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800a014  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800a014  0000b334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b5b  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca0  00000000  00000000  00020c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f18  00000000  00000000  000238b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b8f  00000000  00000000  000247d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  0002535f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000163d1  00000000  00000000  0005d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eea9  00000000  00000000  00073c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2abe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045b0  00000000  00000000  001d2b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d70b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008140 	.word	0x08008140

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008140 	.word	0x08008140

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_Nop+0x30>)
 80006b6:	f006 fed7 	bl	8007468 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	203d      	movs	r0, #61	@ 0x3d
 80006be:	f000 f811 	bl	80006e4 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_Nop+0x34>)
 80006cc:	f006 fecc 	bl	8007468 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	080081b4 	.word	0x080081b4
 80006e0:	080081dc 	.word	0x080081dc

080006e4 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    printf("    [DEBUG] SendStrobe called with command 0x%02X\n\r", strobe_command);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4619      	mov	r1, r3
 80006f4:	483f      	ldr	r0, [pc, #252]	@ (80007f4 <CC1201_SendStrobe+0x110>)
 80006f6:	f006 feb7 	bl	8007468 <iprintf>

    // Debug: Check CS pin before transaction
    printf("  Strobe 0x%02X: CS before=", strobe_command);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4619      	mov	r1, r3
 80006fe:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <CC1201_SendStrobe+0x114>)
 8000700:	f006 feb2 	bl	8007468 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000704:	2110      	movs	r1, #16
 8000706:	483d      	ldr	r0, [pc, #244]	@ (80007fc <CC1201_SendStrobe+0x118>)
 8000708:	f001 ff82 	bl	8002610 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d101      	bne.n	8000716 <CC1201_SendStrobe+0x32>
 8000712:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <CC1201_SendStrobe+0x11c>)
 8000714:	e000      	b.n	8000718 <CC1201_SendStrobe+0x34>
 8000716:	4b3b      	ldr	r3, [pc, #236]	@ (8000804 <CC1201_SendStrobe+0x120>)
 8000718:	4619      	mov	r1, r3
 800071a:	483b      	ldr	r0, [pc, #236]	@ (8000808 <CC1201_SendStrobe+0x124>)
 800071c:	f006 fea4 	bl	8007468 <iprintf>

    printf("    [DEBUG] About to pull CS low...\n\r");
 8000720:	483a      	ldr	r0, [pc, #232]	@ (800080c <CC1201_SendStrobe+0x128>)
 8000722:	f006 fea1 	bl	8007468 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4834      	ldr	r0, [pc, #208]	@ (80007fc <CC1201_SendStrobe+0x118>)
 800072c:	f001 ff88 	bl	8002640 <HAL_GPIO_WritePin>
    
    // Debug: Check CS pin during transaction
    printf(", CS during=");
 8000730:	4837      	ldr	r0, [pc, #220]	@ (8000810 <CC1201_SendStrobe+0x12c>)
 8000732:	f006 fe99 	bl	8007468 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000736:	2110      	movs	r1, #16
 8000738:	4830      	ldr	r0, [pc, #192]	@ (80007fc <CC1201_SendStrobe+0x118>)
 800073a:	f001 ff69 	bl	8002610 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d101      	bne.n	8000748 <CC1201_SendStrobe+0x64>
 8000744:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <CC1201_SendStrobe+0x11c>)
 8000746:	e000      	b.n	800074a <CC1201_SendStrobe+0x66>
 8000748:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <CC1201_SendStrobe+0x120>)
 800074a:	4619      	mov	r1, r3
 800074c:	482e      	ldr	r0, [pc, #184]	@ (8000808 <CC1201_SendStrobe+0x124>)
 800074e:	f006 fe8b 	bl	8007468 <iprintf>
    
    printf("    [DEBUG] About to start SPI transaction...\n\r");
 8000752:	4830      	ldr	r0, [pc, #192]	@ (8000814 <CC1201_SendStrobe+0x130>)
 8000754:	f006 fe88 	bl	8007468 <iprintf>
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f001 f947 	bl	80019ec <HAL_Delay>

    // Use shorter timeout to avoid infinite hang
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000); // 1 second timeout
 800075e:	f107 020e 	add.w	r2, r7, #14
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	482a      	ldr	r0, [pc, #168]	@ (8000818 <CC1201_SendStrobe+0x134>)
 800076e:	f004 ff0b 	bl	8005588 <HAL_SPI_TransmitReceive>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]
    
    printf("    [DEBUG] SPI transaction returned with status: %d\n\r", status);
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	4619      	mov	r1, r3
 800077a:	4828      	ldr	r0, [pc, #160]	@ (800081c <CC1201_SendStrobe+0x138>)
 800077c:	f006 fe74 	bl	8007468 <iprintf>
    
    if (status != HAL_OK) {
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d016      	beq.n	80007b4 <CC1201_SendStrobe+0xd0>
        printf("    [ERROR] SPI transaction failed! Status: %d\n\r", status);
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4619      	mov	r1, r3
 800078a:	4825      	ldr	r0, [pc, #148]	@ (8000820 <CC1201_SendStrobe+0x13c>)
 800078c:	f006 fe6c 	bl	8007468 <iprintf>
        if (status == HAL_TIMEOUT) {
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b03      	cmp	r3, #3
 8000794:	d102      	bne.n	800079c <CC1201_SendStrobe+0xb8>
            printf("    [ERROR] SPI TIMEOUT occurred!\n\r");
 8000796:	4823      	ldr	r0, [pc, #140]	@ (8000824 <CC1201_SendStrobe+0x140>)
 8000798:	f006 fe66 	bl	8007468 <iprintf>
        }
        if (status == HAL_ERROR) {
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d102      	bne.n	80007a8 <CC1201_SendStrobe+0xc4>
            printf("    [ERROR] SPI ERROR occurred!\n\r");
 80007a2:	4821      	ldr	r0, [pc, #132]	@ (8000828 <CC1201_SendStrobe+0x144>)
 80007a4:	f006 fe60 	bl	8007468 <iprintf>
        }
        if (status == HAL_BUSY) {
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d102      	bne.n	80007b4 <CC1201_SendStrobe+0xd0>
            printf("    [ERROR] SPI BUSY occurred!\n\r");
 80007ae:	481f      	ldr	r0, [pc, #124]	@ (800082c <CC1201_SendStrobe+0x148>)
 80007b0:	f006 fe5a 	bl	8007468 <iprintf>
        }
    }

    printf("    [DEBUG] SPI transaction complete, pulling CS high...\n\r");
 80007b4:	481e      	ldr	r0, [pc, #120]	@ (8000830 <CC1201_SendStrobe+0x14c>)
 80007b6:	f006 fe57 	bl	8007468 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007ba:	2201      	movs	r2, #1
 80007bc:	2110      	movs	r1, #16
 80007be:	480f      	ldr	r0, [pc, #60]	@ (80007fc <CC1201_SendStrobe+0x118>)
 80007c0:	f001 ff3e 	bl	8002640 <HAL_GPIO_WritePin>

    // Debug output
    printf(", CS after=HIGH, RX=0x%02X, HAL=%d\n\r", rx_data, status);
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	4619      	mov	r1, r3
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4819      	ldr	r0, [pc, #100]	@ (8000834 <CC1201_SendStrobe+0x150>)
 80007ce:	f006 fe4b 	bl	8007468 <iprintf>
    printf("    [DEBUG] SendStrobe complete\n\r");
 80007d2:	4819      	ldr	r0, [pc, #100]	@ (8000838 <CC1201_SendStrobe+0x154>)
 80007d4:	f006 fe48 	bl	8007468 <iprintf>

    if (status == HAL_OK) {
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d105      	bne.n	80007ea <CC1201_SendStrobe+0x106>
        if (status_byte != NULL) {
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <CC1201_SendStrobe+0x106>
            *status_byte = rx_data;
 80007e4:	7bba      	ldrb	r2, [r7, #14]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08008208 	.word	0x08008208
 80007f8:	0800823c 	.word	0x0800823c
 80007fc:	58021000 	.word	0x58021000
 8000800:	08008258 	.word	0x08008258
 8000804:	08008260 	.word	0x08008260
 8000808:	08008264 	.word	0x08008264
 800080c:	08008268 	.word	0x08008268
 8000810:	08008290 	.word	0x08008290
 8000814:	080082a0 	.word	0x080082a0
 8000818:	240000b8 	.word	0x240000b8
 800081c:	080082d0 	.word	0x080082d0
 8000820:	08008308 	.word	0x08008308
 8000824:	0800833c 	.word	0x0800833c
 8000828:	08008360 	.word	0x08008360
 800082c:	08008384 	.word	0x08008384
 8000830:	080083a8 	.word	0x080083a8
 8000834:	080083e4 	.word	0x080083e4
 8000838:	0800840c 	.word	0x0800840c

0800083c <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 8000842:	485c      	ldr	r0, [pc, #368]	@ (80009b4 <test_GPIO_pins+0x178>)
 8000844:	f006 fe10 	bl	8007468 <iprintf>
    
    // Test CS pin more thoroughly
    printf("CS Pin (PE4) Detailed Test:\n\r");
 8000848:	485b      	ldr	r0, [pc, #364]	@ (80009b8 <test_GPIO_pins+0x17c>)
 800084a:	f006 fe0d 	bl	8007468 <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 800084e:	2110      	movs	r1, #16
 8000850:	485a      	ldr	r0, [pc, #360]	@ (80009bc <test_GPIO_pins+0x180>)
 8000852:	f001 fedd 	bl	8002610 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
    printf("  Initial state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d101      	bne.n	8000864 <test_GPIO_pins+0x28>
 8000860:	4b57      	ldr	r3, [pc, #348]	@ (80009c0 <test_GPIO_pins+0x184>)
 8000862:	e000      	b.n	8000866 <test_GPIO_pins+0x2a>
 8000864:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <test_GPIO_pins+0x188>)
 8000866:	4619      	mov	r1, r3
 8000868:	4857      	ldr	r0, [pc, #348]	@ (80009c8 <test_GPIO_pins+0x18c>)
 800086a:	f006 fdfd 	bl	8007468 <iprintf>
    
    // Force CS LOW and check multiple times
    printf("  Forcing CS LOW...\n\r");
 800086e:	4857      	ldr	r0, [pc, #348]	@ (80009cc <test_GPIO_pins+0x190>)
 8000870:	f006 fdfa 	bl	8007468 <iprintf>
    for (int i = 0; i < 5; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e01c      	b.n	80008b4 <test_GPIO_pins+0x78>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2110      	movs	r1, #16
 800087e:	484f      	ldr	r0, [pc, #316]	@ (80009bc <test_GPIO_pins+0x180>)
 8000880:	f001 fede 	bl	8002640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000884:	200a      	movs	r0, #10
 8000886:	f001 f8b1 	bl	80019ec <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 800088a:	2110      	movs	r1, #16
 800088c:	484b      	ldr	r0, [pc, #300]	@ (80009bc <test_GPIO_pins+0x180>)
 800088e:	f001 febf 	bl	8002610 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	1c59      	adds	r1, r3, #1
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d101      	bne.n	80008a4 <test_GPIO_pins+0x68>
 80008a0:	4b47      	ldr	r3, [pc, #284]	@ (80009c0 <test_GPIO_pins+0x184>)
 80008a2:	e000      	b.n	80008a6 <test_GPIO_pins+0x6a>
 80008a4:	4b47      	ldr	r3, [pc, #284]	@ (80009c4 <test_GPIO_pins+0x188>)
 80008a6:	461a      	mov	r2, r3
 80008a8:	4849      	ldr	r0, [pc, #292]	@ (80009d0 <test_GPIO_pins+0x194>)
 80008aa:	f006 fddd 	bl	8007468 <iprintf>
    for (int i = 0; i < 5; i++) {
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	dddf      	ble.n	800087a <test_GPIO_pins+0x3e>
    }
    
    // Force CS HIGH and check multiple times
    printf("  Forcing CS HIGH...\n\r");
 80008ba:	4846      	ldr	r0, [pc, #280]	@ (80009d4 <test_GPIO_pins+0x198>)
 80008bc:	f006 fdd4 	bl	8007468 <iprintf>
    for (int i = 0; i < 5; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	e01c      	b.n	8000900 <test_GPIO_pins+0xc4>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2110      	movs	r1, #16
 80008ca:	483c      	ldr	r0, [pc, #240]	@ (80009bc <test_GPIO_pins+0x180>)
 80008cc:	f001 feb8 	bl	8002640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f001 f88b 	bl	80019ec <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80008d6:	2110      	movs	r1, #16
 80008d8:	4838      	ldr	r0, [pc, #224]	@ (80009bc <test_GPIO_pins+0x180>)
 80008da:	f001 fe99 	bl	8002610 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1c59      	adds	r1, r3, #1
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d101      	bne.n	80008f0 <test_GPIO_pins+0xb4>
 80008ec:	4b34      	ldr	r3, [pc, #208]	@ (80009c0 <test_GPIO_pins+0x184>)
 80008ee:	e000      	b.n	80008f2 <test_GPIO_pins+0xb6>
 80008f0:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <test_GPIO_pins+0x188>)
 80008f2:	461a      	mov	r2, r3
 80008f4:	4836      	ldr	r0, [pc, #216]	@ (80009d0 <test_GPIO_pins+0x194>)
 80008f6:	f006 fdb7 	bl	8007468 <iprintf>
    for (int i = 0; i < 5; i++) {
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b04      	cmp	r3, #4
 8000904:	dddf      	ble.n	80008c6 <test_GPIO_pins+0x8a>
    }
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8000906:	4834      	ldr	r0, [pc, #208]	@ (80009d8 <test_GPIO_pins+0x19c>)
 8000908:	f006 fdae 	bl	8007468 <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 800090c:	2110      	movs	r1, #16
 800090e:	4833      	ldr	r0, [pc, #204]	@ (80009dc <test_GPIO_pins+0x1a0>)
 8000910:	f001 fe7e 	bl	8002610 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d101      	bne.n	8000922 <test_GPIO_pins+0xe6>
 800091e:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <test_GPIO_pins+0x184>)
 8000920:	e000      	b.n	8000924 <test_GPIO_pins+0xe8>
 8000922:	4b28      	ldr	r3, [pc, #160]	@ (80009c4 <test_GPIO_pins+0x188>)
 8000924:	4619      	mov	r1, r3
 8000926:	482e      	ldr	r0, [pc, #184]	@ (80009e0 <test_GPIO_pins+0x1a4>)
 8000928:	f006 fd9e 	bl	8007468 <iprintf>
    
    // Check SPI state
    printf("SPI2 State: ");
 800092c:	482d      	ldr	r0, [pc, #180]	@ (80009e4 <test_GPIO_pins+0x1a8>)
 800092e:	f006 fd9b 	bl	8007468 <iprintf>
    if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_READY) {
 8000932:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <test_GPIO_pins+0x1ac>)
 8000934:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b01      	cmp	r3, #1
 800093c:	d103      	bne.n	8000946 <test_GPIO_pins+0x10a>
        printf("READY\n\r");
 800093e:	482b      	ldr	r0, [pc, #172]	@ (80009ec <test_GPIO_pins+0x1b0>)
 8000940:	f006 fd92 	bl	8007468 <iprintf>
 8000944:	e02f      	b.n	80009a6 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY) {
 8000946:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <test_GPIO_pins+0x1ac>)
 8000948:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d103      	bne.n	800095a <test_GPIO_pins+0x11e>
        printf("BUSY\n\r");
 8000952:	4827      	ldr	r0, [pc, #156]	@ (80009f0 <test_GPIO_pins+0x1b4>)
 8000954:	f006 fd88 	bl	8007468 <iprintf>
 8000958:	e025      	b.n	80009a6 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX) {
 800095a:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <test_GPIO_pins+0x1ac>)
 800095c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b03      	cmp	r3, #3
 8000964:	d103      	bne.n	800096e <test_GPIO_pins+0x132>
        printf("BUSY_TX\n\r");
 8000966:	4823      	ldr	r0, [pc, #140]	@ (80009f4 <test_GPIO_pins+0x1b8>)
 8000968:	f006 fd7e 	bl	8007468 <iprintf>
 800096c:	e01b      	b.n	80009a6 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_RX) {
 800096e:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <test_GPIO_pins+0x1ac>)
 8000970:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b04      	cmp	r3, #4
 8000978:	d103      	bne.n	8000982 <test_GPIO_pins+0x146>
        printf("BUSY_RX\n\r");
 800097a:	481f      	ldr	r0, [pc, #124]	@ (80009f8 <test_GPIO_pins+0x1bc>)
 800097c:	f006 fd74 	bl	8007468 <iprintf>
 8000980:	e011      	b.n	80009a6 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX_RX) {
 8000982:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <test_GPIO_pins+0x1ac>)
 8000984:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b05      	cmp	r3, #5
 800098c:	d103      	bne.n	8000996 <test_GPIO_pins+0x15a>
        printf("BUSY_TX_RX\n\r");
 800098e:	481b      	ldr	r0, [pc, #108]	@ (80009fc <test_GPIO_pins+0x1c0>)
 8000990:	f006 fd6a 	bl	8007468 <iprintf>
 8000994:	e007      	b.n	80009a6 <test_GPIO_pins+0x16a>
    } else {
        printf("ERROR/RESET (%d)\n\r", CC1201_SPI_HANDLE.State);
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <test_GPIO_pins+0x1ac>)
 8000998:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	4817      	ldr	r0, [pc, #92]	@ (8000a00 <test_GPIO_pins+0x1c4>)
 80009a2:	f006 fd61 	bl	8007468 <iprintf>
    }
    
    printf("===================\n\r");
 80009a6:	4817      	ldr	r0, [pc, #92]	@ (8000a04 <test_GPIO_pins+0x1c8>)
 80009a8:	f006 fd5e 	bl	8007468 <iprintf>
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08009418 	.word	0x08009418
 80009b8:	08009430 	.word	0x08009430
 80009bc:	58021000 	.word	0x58021000
 80009c0:	08009450 	.word	0x08009450
 80009c4:	08009458 	.word	0x08009458
 80009c8:	0800945c 	.word	0x0800945c
 80009cc:	08009474 	.word	0x08009474
 80009d0:	0800948c 	.word	0x0800948c
 80009d4:	080094a4 	.word	0x080094a4
 80009d8:	080094bc 	.word	0x080094bc
 80009dc:	58020c00 	.word	0x58020c00
 80009e0:	080094cc 	.word	0x080094cc
 80009e4:	080094d4 	.word	0x080094d4
 80009e8:	240000b8 	.word	0x240000b8
 80009ec:	080094e4 	.word	0x080094e4
 80009f0:	080094ec 	.word	0x080094ec
 80009f4:	080094f4 	.word	0x080094f4
 80009f8:	08009500 	.word	0x08009500
 80009fc:	0800950c 	.word	0x0800950c
 8000a00:	0800951c 	.word	0x0800951c
 8000a04:	08009530 	.word	0x08009530

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a0e:	f000 fa57 	bl	8000ec0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 ff59 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f8ef 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 f9c1 	bl	8000da0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a1e:	f000 f969 	bl	8000cf4 <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fcfa 	bl	800141c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 fcf7 	bl	800141c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f000 fcf4 	bl	800141c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a34:	2101      	movs	r1, #1
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 fde4 	bl	8001604 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000bb8 <main+0x1b0>)
 8000a3e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a42:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a44:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb8 <main+0x1b0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8000bb8 <main+0x1b0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a50:	4b59      	ldr	r3, [pc, #356]	@ (8000bb8 <main+0x1b0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a56:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <main+0x1b0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a5c:	4956      	ldr	r1, [pc, #344]	@ (8000bb8 <main+0x1b0>)
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 fe54 	bl	800170c <BSP_COM_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <main+0x66>
  {
    Error_Handler();
 8000a6a:	f000 fa69 	bl	8000f40 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a6e:	4853      	ldr	r0, [pc, #332]	@ (8000bbc <main+0x1b4>)
 8000a70:	f006 fcfa 	bl	8007468 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 fd47 	bl	8001508 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 fd44 	bl	8001508 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f000 fd41 	bl	8001508 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8000a86:	484e      	ldr	r0, [pc, #312]	@ (8000bc0 <main+0x1b8>)
 8000a88:	f006 fcee 	bl	8007468 <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8000a8c:	f7ff fed6 	bl	800083c <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 8000a90:	484c      	ldr	r0, [pc, #304]	@ (8000bc4 <main+0x1bc>)
 8000a92:	f006 fce9 	bl	8007468 <iprintf>
  HAL_Delay(100);
 8000a96:	2064      	movs	r0, #100	@ 0x64
 8000a98:	f000 ffa8 	bl	80019ec <HAL_Delay>
  
  printf("Test 1: Creating status byte variable...\n\r");
 8000a9c:	484a      	ldr	r0, [pc, #296]	@ (8000bc8 <main+0x1c0>)
 8000a9e:	f006 fce3 	bl	8007468 <iprintf>
  uint8_t test_status = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	713b      	strb	r3, [r7, #4]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 8000aa6:	4849      	ldr	r0, [pc, #292]	@ (8000bcc <main+0x1c4>)
 8000aa8:	f006 fcde 	bl	8007468 <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fdfc 	bl	80006ac <CC1201_Nop>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	793a      	ldrb	r2, [r7, #4]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4844      	ldr	r0, [pc, #272]	@ (8000bd0 <main+0x1c8>)
 8000ac0:	f006 fcd2 	bl	8007468 <iprintf>
  
  if (nop_result == HAL_OK) {
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d109      	bne.n	8000ade <main+0xd6>
      printf("Basic CC1201 communication working!\n\r");
 8000aca:	4842      	ldr	r0, [pc, #264]	@ (8000bd4 <main+0x1cc>)
 8000acc:	f006 fccc 	bl	8007468 <iprintf>
      BSP_LED_Off(LED_RED);
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f000 fd43 	bl	800155c <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 fd16 	bl	8001508 <BSP_LED_On>
 8000adc:	e008      	b.n	8000af0 <main+0xe8>
  } else {
      printf("CC1201 communication failed!\n\r");
 8000ade:	483e      	ldr	r0, [pc, #248]	@ (8000bd8 <main+0x1d0>)
 8000ae0:	f006 fcc2 	bl	8007468 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fd39 	bl	800155c <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f000 fd0c 	bl	8001508 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  uint32_t test_counter = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 8000af8:	4838      	ldr	r0, [pc, #224]	@ (8000bdc <main+0x1d4>)
 8000afa:	f006 fcb5 	bl	8007468 <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000afe:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <main+0x1d8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d11c      	bne.n	8000b40 <main+0x138>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000b06:	4b36      	ldr	r3, [pc, #216]	@ (8000be0 <main+0x1d8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fd4f 	bl	80015b0 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 fd4c 	bl	80015b0 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f000 fd49 	bl	80015b0 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual test triggered...\n\r");
 8000b1e:	4831      	ldr	r0, [pc, #196]	@ (8000be4 <main+0x1dc>)
 8000b20:	f006 fca2 	bl	8007468 <iprintf>
      uint8_t button_status = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef button_result = CC1201_Nop(&button_status);
 8000b28:	1cfb      	adds	r3, r7, #3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fdbe 	bl	80006ac <CC1201_Nop>
 8000b30:	4603      	mov	r3, r0
 8000b32:	71bb      	strb	r3, [r7, #6]
      printf("Button test - HAL: %d, Status: 0x%02X\n\r", button_result, button_status);
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	78fa      	ldrb	r2, [r7, #3]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482b      	ldr	r0, [pc, #172]	@ (8000be8 <main+0x1e0>)
 8000b3c:	f006 fc94 	bl	8007468 <iprintf>
    }
    
    // Simple periodic test every 5 seconds
    if (HAL_GetTick() - last_test > 5000) {
 8000b40:	f000 ff48 	bl	80019d4 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d92e      	bls.n	8000bb0 <main+0x1a8>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 8000b52:	f000 ff3f 	bl	80019d4 <HAL_GetTick>
 8000b56:	4601      	mov	r1, r0
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	4822      	ldr	r0, [pc, #136]	@ (8000bec <main+0x1e4>)
 8000b62:	f006 fc81 	bl	8007468 <iprintf>
      
      uint8_t status_byte = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	70bb      	strb	r3, [r7, #2]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8000b6a:	1cbb      	adds	r3, r7, #2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fd9d 	bl	80006ac <CC1201_Nop>
 8000b72:	4603      	mov	r3, r0
 8000b74:	717b      	strb	r3, [r7, #5]
      
      if (hal_status == HAL_OK) {
 8000b76:	797b      	ldrb	r3, [r7, #5]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10b      	bne.n	8000b94 <main+0x18c>
        printf("OK - Status: 0x%02X\n\r", status_byte);
 8000b7c:	78bb      	ldrb	r3, [r7, #2]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481b      	ldr	r0, [pc, #108]	@ (8000bf0 <main+0x1e8>)
 8000b82:	f006 fc71 	bl	8007468 <iprintf>
        BSP_LED_On(LED_GREEN);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 fcbe 	bl	8001508 <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fce5 	bl	800155c <BSP_LED_Off>
 8000b92:	e00a      	b.n	8000baa <main+0x1a2>
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4816      	ldr	r0, [pc, #88]	@ (8000bf4 <main+0x1ec>)
 8000b9a:	f006 fc65 	bl	8007468 <iprintf>
        BSP_LED_Off(LED_GREEN);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 fcdc 	bl	800155c <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f000 fcaf 	bl	8001508 <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 8000baa:	f000 ff13 	bl	80019d4 <HAL_GetTick>
 8000bae:	60f8      	str	r0, [r7, #12]
    }
    
    HAL_Delay(100);
 8000bb0:	2064      	movs	r0, #100	@ 0x64
 8000bb2:	f000 ff1b 	bl	80019ec <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8000bb6:	e7a2      	b.n	8000afe <main+0xf6>
 8000bb8:	240000a4 	.word	0x240000a4
 8000bbc:	08009c94 	.word	0x08009c94
 8000bc0:	08009cb0 	.word	0x08009cb0
 8000bc4:	08009ce0 	.word	0x08009ce0
 8000bc8:	08009d04 	.word	0x08009d04
 8000bcc:	08009d30 	.word	0x08009d30
 8000bd0:	08009d58 	.word	0x08009d58
 8000bd4:	08009d8c 	.word	0x08009d8c
 8000bd8:	08009db4 	.word	0x08009db4
 8000bdc:	08009dd4 	.word	0x08009dd4
 8000be0:	240000b4 	.word	0x240000b4
 8000be4:	08009e04 	.word	0x08009e04
 8000be8:	08009e2c 	.word	0x08009e2c
 8000bec:	08009e54 	.word	0x08009e54
 8000bf0:	08009e68 	.word	0x08009e68
 8000bf4:	08009e80 	.word	0x08009e80

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	@ 0x70
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	224c      	movs	r2, #76	@ 0x4c
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f006 fc83 	bl	8007512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f006 fc7d 	bl	8007512 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f001 fd45 	bl	80026a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b32      	ldr	r3, [pc, #200]	@ (8000cec <SystemClock_Config+0xf4>)
 8000c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c26:	4a31      	ldr	r2, [pc, #196]	@ (8000cec <SystemClock_Config+0xf4>)
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <SystemClock_Config+0xf4>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <SystemClock_Config+0xf8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c40:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <SystemClock_Config+0xf8>)
 8000c42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <SystemClock_Config+0xf8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c54:	bf00      	nop
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <SystemClock_Config+0xf8>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c62:	d1f8      	bne.n	8000c56 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	2340      	movs	r3, #64	@ 0x40
 8000c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c74:	2300      	movs	r3, #0
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c90:	2302      	movs	r3, #2
 8000c92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fd3d 	bl	800271c <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ca8:	f000 f94a 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	233f      	movs	r3, #63	@ 0x3f
 8000cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 f97c 	bl	8002fd0 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000cde:	f000 f92f 	bl	8000f40 <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3770      	adds	r7, #112	@ 0x70
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58000400 	.word	0x58000400
 8000cf0:	58024800 	.word	0x58024800

08000cf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000cfa:	4a28      	ldr	r2, [pc, #160]	@ (8000d9c <MX_SPI2_Init+0xa8>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d12:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_SPI2_Init+0xa4>)
 8000d84:	f004 fadc 	bl	8005340 <HAL_SPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000d8e:	f000 f8d7 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	240000b8 	.word	0x240000b8
 8000d9c:	40003800 	.word	0x40003800

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	@ 0x30
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	4b3f      	ldr	r3, [pc, #252]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	4b37      	ldr	r3, [pc, #220]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a36      	ldr	r2, [pc, #216]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b28      	ldr	r3, [pc, #160]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a27      	ldr	r2, [pc, #156]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a18      	ldr	r2, [pc, #96]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_GPIO_Init+0x114>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4812      	ldr	r0, [pc, #72]	@ (8000eb8 <MX_GPIO_Init+0x118>)
 8000e70:	f001 fbe6 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e74:	2310      	movs	r3, #16
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480b      	ldr	r0, [pc, #44]	@ (8000eb8 <MX_GPIO_Init+0x118>)
 8000e8c:	f001 fa10 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e90:	2310      	movs	r3, #16
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_GPIO_Init+0x11c>)
 8000ea6:	f001 fa03 	bl	80022b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	@ 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58021000 	.word	0x58021000
 8000ebc:	58020c00 	.word	0x58020c00

08000ec0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ed2:	f000 fecb 	bl	8001c6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ee6:	2387      	movs	r3, #135	@ 0x87
 8000ee8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f02:	463b      	mov	r3, r7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fee9 	bl	8001cdc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f000 fec6 	bl	8001c9c <HAL_MPU_Enable>

}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <BSP_PB_Callback+0x24>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	240000b4 	.word	0x240000b4

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_MspInit+0x30>)
 8000f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f58:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <HAL_MspInit+0x30>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_MspInit+0x30>)
 8000f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	58024400 	.word	0x58024400

08000f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0ba      	sub	sp, #232	@ 0xe8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	22c0      	movs	r2, #192	@ 0xc0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fab6 	bl	8007512 <memset>
  if(hspi->Instance==SPI2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a35      	ldr	r2, [pc, #212]	@ (8001080 <HAL_SPI_MspInit+0x100>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d163      	bne.n	8001078 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000fb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fb8f 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000fd0:	f7ff ffb6 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <HAL_SPI_MspInit+0x104>)
 8000fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fda:	4a2a      	ldr	r2, [pc, #168]	@ (8001084 <HAL_SPI_MspInit+0x104>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <HAL_SPI_MspInit+0x104>)
 8000fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <HAL_SPI_MspInit+0x104>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <HAL_SPI_MspInit+0x104>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <HAL_SPI_MspInit+0x104>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800102a:	2305      	movs	r3, #5
 800102c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	@ (8001088 <HAL_SPI_MspInit+0x108>)
 8001038:	f001 f93a 	bl	80022b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800103c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001040:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001056:	2305      	movs	r3, #5
 8001058:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001060:	4619      	mov	r1, r3
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <HAL_SPI_MspInit+0x108>)
 8001064:	f001 f924 	bl	80022b0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2024      	movs	r0, #36	@ 0x24
 800106e:	f000 fdc8 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001072:	2024      	movs	r0, #36	@ 0x24
 8001074:	f000 fddf 	bl	8001c36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001078:	bf00      	nop
 800107a:	37e8      	adds	r7, #232	@ 0xe8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40003800 	.word	0x40003800
 8001084:	58024400 	.word	0x58024400
 8001088:	58020400 	.word	0x58020400

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 fc63 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <SPI2_IRQHandler+0x10>)
 80010f2:	f004 fd83 	bl	8005bfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	240000b8 	.word	0x240000b8

08001100 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001104:	2000      	movs	r0, #0
 8001106:	f000 faef 	bl	80016e8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}

0800110e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e00a      	b.n	8001136 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001120:	f3af 8000 	nop.w
 8001124:	4601      	mov	r1, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	b2ca      	uxtb	r2, r1
 800112e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbf0      	blt.n	8001120 <_read+0x12>
  }

  return len;
 800113e:	687b      	ldr	r3, [r7, #4]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e009      	b.n	800116e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fb34 	bl	80017d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbf1      	blt.n	800115a <_write+0x12>
  }
  return len;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_close>:

int _close(int file)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011a8:	605a      	str	r2, [r3, #4]
  return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_isatty>:

int _isatty(int file)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	@ (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f006 f9ca 	bl	80075b0 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24080000 	.word	0x24080000
 8001248:	00000400 	.word	0x00000400
 800124c:	24000140 	.word	0x24000140
 8001250:	24000338 	.word	0x24000338

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001258:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <SystemInit+0x114>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125e:	4a42      	ldr	r2, [pc, #264]	@ (8001368 <SystemInit+0x114>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001268:	4b40      	ldr	r3, [pc, #256]	@ (800136c <SystemInit+0x118>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	2b06      	cmp	r3, #6
 8001272:	d807      	bhi.n	8001284 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001274:	4b3d      	ldr	r3, [pc, #244]	@ (800136c <SystemInit+0x118>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 030f 	bic.w	r3, r3, #15
 800127c:	4a3b      	ldr	r2, [pc, #236]	@ (800136c <SystemInit+0x118>)
 800127e:	f043 0307 	orr.w	r3, r3, #7
 8001282:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <SystemInit+0x11c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a39      	ldr	r2, [pc, #228]	@ (8001370 <SystemInit+0x11c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <SystemInit+0x11c>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <SystemInit+0x11c>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4935      	ldr	r1, [pc, #212]	@ (8001370 <SystemInit+0x11c>)
 800129c:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <SystemInit+0x120>)
 800129e:	4013      	ands	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a2:	4b32      	ldr	r3, [pc, #200]	@ (800136c <SystemInit+0x118>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ae:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <SystemInit+0x118>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 030f 	bic.w	r3, r3, #15
 80012b6:	4a2d      	ldr	r2, [pc, #180]	@ (800136c <SystemInit+0x118>)
 80012b8:	f043 0307 	orr.w	r3, r3, #7
 80012bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012be:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <SystemInit+0x11c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <SystemInit+0x11c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <SystemInit+0x11c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <SystemInit+0x11c>)
 80012d2:	4a29      	ldr	r2, [pc, #164]	@ (8001378 <SystemInit+0x124>)
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012d6:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <SystemInit+0x11c>)
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <SystemInit+0x128>)
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <SystemInit+0x11c>)
 80012de:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <SystemInit+0x12c>)
 80012e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <SystemInit+0x11c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <SystemInit+0x11c>)
 80012ea:	4a25      	ldr	r2, [pc, #148]	@ (8001380 <SystemInit+0x12c>)
 80012ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <SystemInit+0x11c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <SystemInit+0x11c>)
 80012f6:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <SystemInit+0x12c>)
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <SystemInit+0x11c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <SystemInit+0x11c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <SystemInit+0x11c>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800130a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <SystemInit+0x11c>)
 800130e:	2200      	movs	r2, #0
 8001310:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <SystemInit+0x130>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <SystemInit+0x134>)
 8001318:	4013      	ands	r3, r2
 800131a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800131e:	d202      	bcs.n	8001326 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <SystemInit+0x138>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <SystemInit+0x11c>)
 8001328:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800132c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d113      	bne.n	800135c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <SystemInit+0x11c>)
 8001336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800133a:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <SystemInit+0x11c>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001340:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <SystemInit+0x13c>)
 8001346:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800134a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <SystemInit+0x11c>)
 800134e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001352:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <SystemInit+0x11c>)
 8001354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001358:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	52002000 	.word	0x52002000
 8001370:	58024400 	.word	0x58024400
 8001374:	eaf6ed7f 	.word	0xeaf6ed7f
 8001378:	02020200 	.word	0x02020200
 800137c:	01ff0000 	.word	0x01ff0000
 8001380:	01010280 	.word	0x01010280
 8001384:	5c001000 	.word	0x5c001000
 8001388:	ffff0000 	.word	0xffff0000
 800138c:	51008108 	.word	0x51008108
 8001390:	52004000 	.word	0x52004000

08001394 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <ExitRun0Mode+0x2c>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <ExitRun0Mode+0x2c>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80013a4:	bf00      	nop
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <ExitRun0Mode+0x2c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	58024800 	.word	0x58024800

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013c4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001400 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80013c8:	f7ff ffe4 	bl	8001394 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013cc:	f7ff ff42 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f006 f8e1 	bl	80075bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fb05 	bl	8000a08 <main>
  bx  lr
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001404:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001408:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800140c:	08009f8c 	.word	0x08009f8c
  ldr r2, =_sbss
 8001410:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001414:	24000334 	.word	0x24000334

08001418 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC3_IRQHandler>
	...

0800141c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	@ 0x30
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d009      	beq.n	8001444 <BSP_LED_Init+0x28>
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d006      	beq.n	8001444 <BSP_LED_Init+0x28>
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d003      	beq.n	8001444 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800143c:	f06f 0301 	mvn.w	r3, #1
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001442:	e055      	b.n	80014f0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10f      	bne.n	800146a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <BSP_LED_Init+0xe0>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001450:	4a2a      	ldr	r2, [pc, #168]	@ (80014fc <BSP_LED_Init+0xe0>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145a:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <BSP_LED_Init+0xe0>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	e021      	b.n	80014ae <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10f      	bne.n	8001490 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <BSP_LED_Init+0xe0>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001476:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <BSP_LED_Init+0xe0>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <BSP_LED_Init+0xe0>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	e00e      	b.n	80014ae <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <BSP_LED_Init+0xe0>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001496:	4a19      	ldr	r2, [pc, #100]	@ (80014fc <BSP_LED_Init+0xe0>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <BSP_LED_Init+0xe0>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <BSP_LED_Init+0xe4>)
 80014b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <BSP_LED_Init+0xe8>)
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	f107 0218 	add.w	r2, r7, #24
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 feec 	bl	80022b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <BSP_LED_Init+0xe8>)
 80014dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <BSP_LED_Init+0xe4>)
 80014e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	f001 f8a8 	bl	8002640 <HAL_GPIO_WritePin>
  }

  return ret;
 80014f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3730      	adds	r7, #48	@ 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	58024400 	.word	0x58024400
 8001500:	08009f24 	.word	0x08009f24
 8001504:	2400000c 	.word	0x2400000c

08001508 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <BSP_LED_On+0x28>
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d006      	beq.n	8001530 <BSP_LED_On+0x28>
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d003      	beq.n	8001530 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001528:	f06f 0301 	mvn.w	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e00b      	b.n	8001548 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <BSP_LED_On+0x4c>)
 8001534:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <BSP_LED_On+0x50>)
 800153c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001540:	2201      	movs	r2, #1
 8001542:	4619      	mov	r1, r3
 8001544:	f001 f87c 	bl	8002640 <HAL_GPIO_WritePin>
  }

  return ret;
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2400000c 	.word	0x2400000c
 8001558:	08009f24 	.word	0x08009f24

0800155c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <BSP_LED_Off+0x28>
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d006      	beq.n	8001584 <BSP_LED_Off+0x28>
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d003      	beq.n	8001584 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800157c:	f06f 0301 	mvn.w	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e00b      	b.n	800159c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <BSP_LED_Off+0x4c>)
 8001588:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <BSP_LED_Off+0x50>)
 8001590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001594:	2200      	movs	r2, #0
 8001596:	4619      	mov	r1, r3
 8001598:	f001 f852 	bl	8002640 <HAL_GPIO_WritePin>
  }

  return ret;
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2400000c 	.word	0x2400000c
 80015ac:	08009f24 	.word	0x08009f24

080015b0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <BSP_LED_Toggle+0x28>
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d006      	beq.n	80015d8 <BSP_LED_Toggle+0x28>
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d003      	beq.n	80015d8 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015d0:	f06f 0301 	mvn.w	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e00b      	b.n	80015f0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <BSP_LED_Toggle+0x4c>)
 80015dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4907      	ldr	r1, [pc, #28]	@ (8001600 <BSP_LED_Toggle+0x50>)
 80015e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f001 f841 	bl	8002672 <HAL_GPIO_TogglePin>
  }

  return ret;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400000c 	.word	0x2400000c
 8001600:	08009f24 	.word	0x08009f24

08001604 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001614:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <BSP_PB_Init+0xcc>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	4a2d      	ldr	r2, [pc, #180]	@ (80016d0 <BSP_PB_Init+0xcc>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001624:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <BSP_PB_Init+0xcc>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001636:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10c      	bne.n	8001660 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	4a21      	ldr	r2, [pc, #132]	@ (80016d4 <BSP_PB_Init+0xd0>)
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	f107 020c 	add.w	r2, r7, #12
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fe29 	bl	80022b0 <HAL_GPIO_Init>
 800165e:	e031      	b.n	80016c4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001660:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001664:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4a1a      	ldr	r2, [pc, #104]	@ (80016d4 <BSP_PB_Init+0xd0>)
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	f107 020c 	add.w	r2, r7, #12
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fe1b 	bl	80022b0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4a16      	ldr	r2, [pc, #88]	@ (80016d8 <BSP_PB_Init+0xd4>)
 8001680:	441a      	add	r2, r3
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4915      	ldr	r1, [pc, #84]	@ (80016dc <BSP_PB_Init+0xd8>)
 8001686:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f000 fdca 	bl	8002226 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <BSP_PB_Init+0xd4>)
 8001698:	1898      	adds	r0, r3, r2
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <BSP_PB_Init+0xdc>)
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	461a      	mov	r2, r3
 80016a4:	2100      	movs	r1, #0
 80016a6:	f000 fd9f 	bl	80021e8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80016aa:	2028      	movs	r0, #40	@ 0x28
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <BSP_PB_Init+0xe0>)
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	2200      	movs	r2, #0
 80016b6:	4619      	mov	r1, r3
 80016b8:	f000 faa3 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80016bc:	2328      	movs	r3, #40	@ 0x28
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fab9 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	58024400 	.word	0x58024400
 80016d4:	24000018 	.word	0x24000018
 80016d8:	24000144 	.word	0x24000144
 80016dc:	08009f2c 	.word	0x08009f2c
 80016e0:	2400001c 	.word	0x2400001c
 80016e4:	24000020 	.word	0x24000020

080016e8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <BSP_PB_IRQHandler+0x20>)
 80016f8:	4413      	add	r3, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fda8 	bl	8002250 <HAL_EXTI_IRQHandler>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	24000144 	.word	0x24000144

0800170c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001722:	f06f 0301 	mvn.w	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e018      	b.n	800175c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2294      	movs	r2, #148	@ 0x94
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <BSP_COM_Init+0x5c>)
 8001734:	4413      	add	r3, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f86e 	bl	8001818 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2294      	movs	r2, #148	@ 0x94
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <BSP_COM_Init+0x5c>)
 8001746:	4413      	add	r3, r2
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f80e 	bl	800176c <MX_USART3_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001756:	f06f 0303 	mvn.w	r3, #3
 800175a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2400014c 	.word	0x2400014c

0800176c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <MX_USART3_Init+0x60>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	220c      	movs	r2, #12
 800178a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	895b      	ldrh	r3, [r3, #10]
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	891b      	ldrh	r3, [r3, #8]
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	899b      	ldrh	r3, [r3, #12]
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017b8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f004 fd21 	bl	8006202 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24000008 	.word	0x24000008

080017d0 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <__io_putchar+0x30>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	2394      	movs	r3, #148	@ 0x94
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <__io_putchar+0x34>)
 80017e6:	1898      	adds	r0, r3, r2
 80017e8:	1d39      	adds	r1, r7, #4
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	2201      	movs	r2, #1
 80017f0:	f004 fd61 	bl	80062b6 <HAL_UART_Transmit>
  return ch;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	240001e0 	.word	0x240001e0
 8001804:	2400014c 	.word	0x2400014c

08001808 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff fb83 	bl	8000f18 <BSP_PB_Callback>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001820:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <COM1_MspInit+0xa8>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <COM1_MspInit+0xa8>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001830:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <COM1_MspInit+0xa8>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800183e:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <COM1_MspInit+0xa8>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001844:	4a1e      	ldr	r2, [pc, #120]	@ (80018c0 <COM1_MspInit+0xa8>)
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184e:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <COM1_MspInit+0xa8>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800185c:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <COM1_MspInit+0xa8>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001862:	4a17      	ldr	r2, [pc, #92]	@ (80018c0 <COM1_MspInit+0xa8>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001868:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <COM1_MspInit+0xa8>)
 800186e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800187a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800188c:	2307      	movs	r3, #7
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <COM1_MspInit+0xac>)
 8001898:	f000 fd0a 	bl	80022b0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800189c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80018a6:	2307      	movs	r3, #7
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <COM1_MspInit+0xac>)
 80018b2:	f000 fcfd 	bl	80022b0 <HAL_GPIO_Init>
}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58020c00 	.word	0x58020c00

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ce:	2003      	movs	r0, #3
 80018d0:	f000 f98c 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018d4:	f001 fd32 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_Init+0x68>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	4913      	ldr	r1, [pc, #76]	@ (8001934 <HAL_Init+0x6c>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_Init+0x68>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <HAL_Init+0x6c>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	4a0b      	ldr	r2, [pc, #44]	@ (8001938 <HAL_Init+0x70>)
 800190a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800190c:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <HAL_Init+0x74>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f814 	bl	8001940 <HAL_InitTick>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e002      	b.n	8001928 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001922:	f7ff fb13 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	58024400 	.word	0x58024400
 8001934:	08009f14 	.word	0x08009f14
 8001938:	24000004 	.word	0x24000004
 800193c:	24000000 	.word	0x24000000

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_InitTick+0x60>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e021      	b.n	8001998 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_InitTick+0x64>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_InitTick+0x60>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f971 	bl	8001c52 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 f93b 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_InitTick+0x68>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	24000028 	.word	0x24000028
 80019a4:	24000000 	.word	0x24000000
 80019a8:	24000024 	.word	0x24000024

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	24000028 	.word	0x24000028
 80019d0:	240001e4 	.word	0x240001e4

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	240001e4 	.word	0x240001e4

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff ffee 	bl	80019d4 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_Delay+0x44>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	24000028 	.word	0x24000028

08001a34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetREVID+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	5c001000 	.word	0x5c001000

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	05fa0000 	.word	0x05fa0000

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	@ (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	@ (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	@ (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	@ 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff40 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff90 	bl	8001b40 <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5f 	bl	8001aec <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff33 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa4 	bl	8001ba8 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c70:	f3bf 8f5f 	dmb	sy
}
 8001c74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c76:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <HAL_MPU_Disable+0x28>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	4a06      	ldr	r2, [pc, #24]	@ (8001c94 <HAL_MPU_Disable+0x28>)
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c80:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_MPU_Disable+0x2c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	e000ed90 	.word	0xe000ed90

08001c9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <HAL_MPU_Enable+0x38>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_MPU_Enable+0x3c>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <HAL_MPU_Enable+0x3c>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cba:	f3bf 8f4f 	dsb	sy
}
 8001cbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cc0:	f3bf 8f6f 	isb	sy
}
 8001cc4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed90 	.word	0xe000ed90
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	785a      	ldrb	r2, [r3, #1]
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_MPU_ConfigRegion+0x7c>)
 8001cea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_MPU_ConfigRegion+0x7c>)
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	@ (8001d58 <HAL_MPU_ConfigRegion+0x7c>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cf8:	4a17      	ldr	r2, [pc, #92]	@ (8001d58 <HAL_MPU_ConfigRegion+0x7c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7b1b      	ldrb	r3, [r3, #12]
 8001d04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7adb      	ldrb	r3, [r3, #11]
 8001d0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7a9b      	ldrb	r3, [r3, #10]
 8001d12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7b5b      	ldrb	r3, [r3, #13]
 8001d1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7b9b      	ldrb	r3, [r3, #14]
 8001d22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7bdb      	ldrb	r3, [r3, #15]
 8001d2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7a5b      	ldrb	r3, [r3, #9]
 8001d32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7a1b      	ldrb	r3, [r3, #8]
 8001d3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d44:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d48:	6113      	str	r3, [r2, #16]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed90 	.word	0xe000ed90

08001d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e237      	b.n	80021de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d004      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2280      	movs	r2, #128	@ 0x80
 8001d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e22c      	b.n	80021de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a5c      	ldr	r2, [pc, #368]	@ (8001efc <HAL_DMA_Abort_IT+0x1a0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d04a      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a5b      	ldr	r2, [pc, #364]	@ (8001f00 <HAL_DMA_Abort_IT+0x1a4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d045      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a59      	ldr	r2, [pc, #356]	@ (8001f04 <HAL_DMA_Abort_IT+0x1a8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d040      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a58      	ldr	r2, [pc, #352]	@ (8001f08 <HAL_DMA_Abort_IT+0x1ac>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d03b      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a56      	ldr	r2, [pc, #344]	@ (8001f0c <HAL_DMA_Abort_IT+0x1b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d036      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a55      	ldr	r2, [pc, #340]	@ (8001f10 <HAL_DMA_Abort_IT+0x1b4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d031      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a53      	ldr	r2, [pc, #332]	@ (8001f14 <HAL_DMA_Abort_IT+0x1b8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02c      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_DMA_Abort_IT+0x1bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d027      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	@ (8001f1c <HAL_DMA_Abort_IT+0x1c0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d022      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f20 <HAL_DMA_Abort_IT+0x1c4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d01d      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	@ (8001f24 <HAL_DMA_Abort_IT+0x1c8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d018      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f28 <HAL_DMA_Abort_IT+0x1cc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a4a      	ldr	r2, [pc, #296]	@ (8001f2c <HAL_DMA_Abort_IT+0x1d0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a49      	ldr	r2, [pc, #292]	@ (8001f30 <HAL_DMA_Abort_IT+0x1d4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a47      	ldr	r2, [pc, #284]	@ (8001f34 <HAL_DMA_Abort_IT+0x1d8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a46      	ldr	r2, [pc, #280]	@ (8001f38 <HAL_DMA_Abort_IT+0x1dc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Abort_IT+0xcc>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_DMA_Abort_IT+0xce>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8086 	beq.w	8001f3c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2204      	movs	r2, #4
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001efc <HAL_DMA_Abort_IT+0x1a0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d04a      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2e      	ldr	r2, [pc, #184]	@ (8001f00 <HAL_DMA_Abort_IT+0x1a4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d045      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a2c      	ldr	r2, [pc, #176]	@ (8001f04 <HAL_DMA_Abort_IT+0x1a8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d040      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f08 <HAL_DMA_Abort_IT+0x1ac>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d03b      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <HAL_DMA_Abort_IT+0x1b0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d036      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <HAL_DMA_Abort_IT+0x1b4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d031      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a26      	ldr	r2, [pc, #152]	@ (8001f14 <HAL_DMA_Abort_IT+0x1b8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d02c      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a25      	ldr	r2, [pc, #148]	@ (8001f18 <HAL_DMA_Abort_IT+0x1bc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d027      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <HAL_DMA_Abort_IT+0x1c0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d022      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <HAL_DMA_Abort_IT+0x1c4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01d      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a20      	ldr	r2, [pc, #128]	@ (8001f24 <HAL_DMA_Abort_IT+0x1c8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d018      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f28 <HAL_DMA_Abort_IT+0x1cc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f2c <HAL_DMA_Abort_IT+0x1d0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00e      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8001f30 <HAL_DMA_Abort_IT+0x1d4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f34 <HAL_DMA_Abort_IT+0x1d8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <HAL_DMA_Abort_IT+0x1dc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d108      	bne.n	8001eea <HAL_DMA_Abort_IT+0x18e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e178      	b.n	80021dc <HAL_DMA_Abort_IT+0x480>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e16f      	b.n	80021dc <HAL_DMA_Abort_IT+0x480>
 8001efc:	40020010 	.word	0x40020010
 8001f00:	40020028 	.word	0x40020028
 8001f04:	40020040 	.word	0x40020040
 8001f08:	40020058 	.word	0x40020058
 8001f0c:	40020070 	.word	0x40020070
 8001f10:	40020088 	.word	0x40020088
 8001f14:	400200a0 	.word	0x400200a0
 8001f18:	400200b8 	.word	0x400200b8
 8001f1c:	40020410 	.word	0x40020410
 8001f20:	40020428 	.word	0x40020428
 8001f24:	40020440 	.word	0x40020440
 8001f28:	40020458 	.word	0x40020458
 8001f2c:	40020470 	.word	0x40020470
 8001f30:	40020488 	.word	0x40020488
 8001f34:	400204a0 	.word	0x400204a0
 8001f38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 020e 	bic.w	r2, r2, #14
 8001f4a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6c      	ldr	r2, [pc, #432]	@ (8002104 <HAL_DMA_Abort_IT+0x3a8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d04a      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6b      	ldr	r2, [pc, #428]	@ (8002108 <HAL_DMA_Abort_IT+0x3ac>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d045      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a69      	ldr	r2, [pc, #420]	@ (800210c <HAL_DMA_Abort_IT+0x3b0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d040      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a68      	ldr	r2, [pc, #416]	@ (8002110 <HAL_DMA_Abort_IT+0x3b4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d03b      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a66      	ldr	r2, [pc, #408]	@ (8002114 <HAL_DMA_Abort_IT+0x3b8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d036      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a65      	ldr	r2, [pc, #404]	@ (8002118 <HAL_DMA_Abort_IT+0x3bc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d031      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a63      	ldr	r2, [pc, #396]	@ (800211c <HAL_DMA_Abort_IT+0x3c0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02c      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a62      	ldr	r2, [pc, #392]	@ (8002120 <HAL_DMA_Abort_IT+0x3c4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d027      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a60      	ldr	r2, [pc, #384]	@ (8002124 <HAL_DMA_Abort_IT+0x3c8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d022      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5f      	ldr	r2, [pc, #380]	@ (8002128 <HAL_DMA_Abort_IT+0x3cc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d01d      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800212c <HAL_DMA_Abort_IT+0x3d0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d018      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8002130 <HAL_DMA_Abort_IT+0x3d4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002134 <HAL_DMA_Abort_IT+0x3d8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00e      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a59      	ldr	r2, [pc, #356]	@ (8002138 <HAL_DMA_Abort_IT+0x3dc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a57      	ldr	r2, [pc, #348]	@ (800213c <HAL_DMA_Abort_IT+0x3e0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_Abort_IT+0x290>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a56      	ldr	r2, [pc, #344]	@ (8002140 <HAL_DMA_Abort_IT+0x3e4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <HAL_DMA_Abort_IT+0x2a2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e007      	b.n	800200e <HAL_DMA_Abort_IT+0x2b2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3c      	ldr	r2, [pc, #240]	@ (8002104 <HAL_DMA_Abort_IT+0x3a8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d072      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3a      	ldr	r2, [pc, #232]	@ (8002108 <HAL_DMA_Abort_IT+0x3ac>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d06d      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a39      	ldr	r2, [pc, #228]	@ (800210c <HAL_DMA_Abort_IT+0x3b0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d068      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a37      	ldr	r2, [pc, #220]	@ (8002110 <HAL_DMA_Abort_IT+0x3b4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d063      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a36      	ldr	r2, [pc, #216]	@ (8002114 <HAL_DMA_Abort_IT+0x3b8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d05e      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a34      	ldr	r2, [pc, #208]	@ (8002118 <HAL_DMA_Abort_IT+0x3bc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d059      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a33      	ldr	r2, [pc, #204]	@ (800211c <HAL_DMA_Abort_IT+0x3c0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d054      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a31      	ldr	r2, [pc, #196]	@ (8002120 <HAL_DMA_Abort_IT+0x3c4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d04f      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a30      	ldr	r2, [pc, #192]	@ (8002124 <HAL_DMA_Abort_IT+0x3c8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d04a      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <HAL_DMA_Abort_IT+0x3cc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d045      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <HAL_DMA_Abort_IT+0x3d0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d040      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <HAL_DMA_Abort_IT+0x3d4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d03b      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2a      	ldr	r2, [pc, #168]	@ (8002134 <HAL_DMA_Abort_IT+0x3d8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d036      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a28      	ldr	r2, [pc, #160]	@ (8002138 <HAL_DMA_Abort_IT+0x3dc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d031      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a27      	ldr	r2, [pc, #156]	@ (800213c <HAL_DMA_Abort_IT+0x3e0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d02c      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <HAL_DMA_Abort_IT+0x3e4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d027      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <HAL_DMA_Abort_IT+0x3e8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d022      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a22      	ldr	r2, [pc, #136]	@ (8002148 <HAL_DMA_Abort_IT+0x3ec>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01d      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a21      	ldr	r2, [pc, #132]	@ (800214c <HAL_DMA_Abort_IT+0x3f0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d018      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_DMA_Abort_IT+0x3f4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <HAL_DMA_Abort_IT+0x3f8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00e      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002158 <HAL_DMA_Abort_IT+0x3fc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1b      	ldr	r2, [pc, #108]	@ (800215c <HAL_DMA_Abort_IT+0x400>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d004      	beq.n	80020fe <HAL_DMA_Abort_IT+0x3a2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	@ (8002160 <HAL_DMA_Abort_IT+0x404>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d132      	bne.n	8002164 <HAL_DMA_Abort_IT+0x408>
 80020fe:	2301      	movs	r3, #1
 8002100:	e031      	b.n	8002166 <HAL_DMA_Abort_IT+0x40a>
 8002102:	bf00      	nop
 8002104:	40020010 	.word	0x40020010
 8002108:	40020028 	.word	0x40020028
 800210c:	40020040 	.word	0x40020040
 8002110:	40020058 	.word	0x40020058
 8002114:	40020070 	.word	0x40020070
 8002118:	40020088 	.word	0x40020088
 800211c:	400200a0 	.word	0x400200a0
 8002120:	400200b8 	.word	0x400200b8
 8002124:	40020410 	.word	0x40020410
 8002128:	40020428 	.word	0x40020428
 800212c:	40020440 	.word	0x40020440
 8002130:	40020458 	.word	0x40020458
 8002134:	40020470 	.word	0x40020470
 8002138:	40020488 	.word	0x40020488
 800213c:	400204a0 	.word	0x400204a0
 8002140:	400204b8 	.word	0x400204b8
 8002144:	58025408 	.word	0x58025408
 8002148:	5802541c 	.word	0x5802541c
 800214c:	58025430 	.word	0x58025430
 8002150:	58025444 	.word	0x58025444
 8002154:	58025458 	.word	0x58025458
 8002158:	5802546c 	.word	0x5802546c
 800215c:	58025480 	.word	0x58025480
 8002160:	58025494 	.word	0x58025494
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d028      	beq.n	80021bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002178:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2201      	movs	r2, #1
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002198:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop

080021e8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	460b      	mov	r3, r1
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e00a      	b.n	800221a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002204:	7afb      	ldrb	r3, [r7, #11]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]
      break;
 8002210:	e002      	b.n	8002218 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
      break;
 8002216:	bf00      	nop
  }

  return status;
 8002218:	7dfb      	ldrb	r3, [r7, #23]
}
 800221a:	4618      	mov	r0, r3
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e003      	b.n	8002242 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002240:	2300      	movs	r3, #0
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2201      	movs	r2, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	011a      	lsls	r2, r3, #4
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <HAL_EXTI_IRQHandler+0x5c>)
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4798      	blx	r3
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	58000088 	.word	0x58000088

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022be:	4b89      	ldr	r3, [pc, #548]	@ (80024e4 <HAL_GPIO_Init+0x234>)
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022c2:	e194      	b.n	80025ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8186 	beq.w	80025e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_GPIO_Init+0x44>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b03      	cmp	r3, #3
 8002360:	d017      	beq.n	8002392 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	69b9      	ldr	r1, [r7, #24]
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80e0 	beq.w	80025e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002428:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <HAL_GPIO_Init+0x238>)
 800242a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800242e:	4a2e      	ldr	r2, [pc, #184]	@ (80024e8 <HAL_GPIO_Init+0x238>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_GPIO_Init+0x238>)
 800243a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002446:	4a29      	ldr	r2, [pc, #164]	@ (80024ec <HAL_GPIO_Init+0x23c>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <HAL_GPIO_Init+0x240>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d052      	beq.n	8002518 <HAL_GPIO_Init+0x268>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_GPIO_Init+0x244>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d031      	beq.n	80024de <HAL_GPIO_Init+0x22e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_GPIO_Init+0x248>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02b      	beq.n	80024da <HAL_GPIO_Init+0x22a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_GPIO_Init+0x24c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d025      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <HAL_GPIO_Init+0x250>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <HAL_GPIO_Init+0x222>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <HAL_GPIO_Init+0x254>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_GPIO_Init+0x21e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1a      	ldr	r2, [pc, #104]	@ (8002508 <HAL_GPIO_Init+0x258>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0x21a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a19      	ldr	r2, [pc, #100]	@ (800250c <HAL_GPIO_Init+0x25c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_GPIO_Init+0x216>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <HAL_GPIO_Init+0x260>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x212>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <HAL_GPIO_Init+0x264>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_GPIO_Init+0x20e>
 80024ba:	2309      	movs	r3, #9
 80024bc:	e02d      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024be:	230a      	movs	r3, #10
 80024c0:	e02b      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e029      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e027      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e025      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e023      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e021      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e01f      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024da:	2302      	movs	r3, #2
 80024dc:	e01d      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024de:	2301      	movs	r3, #1
 80024e0:	e01b      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024e2:	bf00      	nop
 80024e4:	58000080 	.word	0x58000080
 80024e8:	58024400 	.word	0x58024400
 80024ec:	58000400 	.word	0x58000400
 80024f0:	58020000 	.word	0x58020000
 80024f4:	58020400 	.word	0x58020400
 80024f8:	58020800 	.word	0x58020800
 80024fc:	58020c00 	.word	0x58020c00
 8002500:	58021000 	.word	0x58021000
 8002504:	58021400 	.word	0x58021400
 8002508:	58021800 	.word	0x58021800
 800250c:	58021c00 	.word	0x58021c00
 8002510:	58022000 	.word	0x58022000
 8002514:	58022400 	.word	0x58022400
 8002518:	2300      	movs	r3, #0
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252a:	4938      	ldr	r1, [pc, #224]	@ (800260c <HAL_GPIO_Init+0x35c>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800255e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800258c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f ae63 	bne.w	80022c4 <HAL_GPIO_Init+0x14>
  }
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3724      	adds	r7, #36	@ 0x24
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	58000400 	.word	0x58000400

08002610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e001      	b.n	8002632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800265c:	e003      	b.n	8002666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800265e:	887b      	ldrh	r3, [r7, #2]
 8002660:	041a      	lsls	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	619a      	str	r2, [r3, #24]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002684:	887a      	ldrh	r2, [r7, #2]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	041a      	lsls	r2, r3, #16
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43d9      	mvns	r1, r3
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	400b      	ands	r3, r1
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d00a      	beq.n	80026d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e01f      	b.n	800270e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e01d      	b.n	800270e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026d2:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	490f      	ldr	r1, [pc, #60]	@ (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026e2:	f7ff f977 	bl	80019d4 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026e8:	e009      	b.n	80026fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026ea:	f7ff f973 	bl	80019d4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026f8:	d901      	bls.n	80026fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e007      	b.n	800270e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800270a:	d1ee      	bne.n	80026ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	58024800 	.word	0x58024800

0800271c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	@ 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	f000 bc48 	b.w	8002fc0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8088 	beq.w	800284e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273e:	4b99      	ldr	r3, [pc, #612]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002748:	4b96      	ldr	r3, [pc, #600]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002750:	2b10      	cmp	r3, #16
 8002752:	d007      	beq.n	8002764 <HAL_RCC_OscConfig+0x48>
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	2b18      	cmp	r3, #24
 8002758:	d111      	bne.n	800277e <HAL_RCC_OscConfig+0x62>
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d10c      	bne.n	800277e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4b8f      	ldr	r3, [pc, #572]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d06d      	beq.n	800284c <HAL_RCC_OscConfig+0x130>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d169      	bne.n	800284c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	f000 bc21 	b.w	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x7a>
 8002788:	4b86      	ldr	r3, [pc, #536]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a85      	ldr	r2, [pc, #532]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800278e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	e02e      	b.n	80027f4 <HAL_RCC_OscConfig+0xd8>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x9c>
 800279e:	4b81      	ldr	r3, [pc, #516]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a80      	ldr	r2, [pc, #512]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b7e      	ldr	r3, [pc, #504]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7d      	ldr	r2, [pc, #500]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e01d      	b.n	80027f4 <HAL_RCC_OscConfig+0xd8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0xc0>
 80027c2:	4b78      	ldr	r3, [pc, #480]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a77      	ldr	r2, [pc, #476]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b75      	ldr	r3, [pc, #468]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a74      	ldr	r2, [pc, #464]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0xd8>
 80027dc:	4b71      	ldr	r3, [pc, #452]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a70      	ldr	r2, [pc, #448]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b6e      	ldr	r3, [pc, #440]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a6d      	ldr	r2, [pc, #436]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7ff f8ea 	bl	80019d4 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7ff f8e6 	bl	80019d4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	@ 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e3d4      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0xe8>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff f8d6 	bl	80019d4 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff f8d2 	bl	80019d4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	@ 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e3c0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800283e:	4b59      	ldr	r3, [pc, #356]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x110>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80ca 	beq.w	80029f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285c:	4b51      	ldr	r3, [pc, #324]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002864:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002866:	4b4f      	ldr	r3, [pc, #316]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_RCC_OscConfig+0x166>
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	2b18      	cmp	r3, #24
 8002876:	d156      	bne.n	8002926 <HAL_RCC_OscConfig+0x20a>
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d151      	bne.n	8002926 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002882:	4b48      	ldr	r3, [pc, #288]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_RCC_OscConfig+0x17e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e392      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800289a:	4b42      	ldr	r3, [pc, #264]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0219 	bic.w	r2, r3, #25
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	493f      	ldr	r1, [pc, #252]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7ff f892 	bl	80019d4 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b4:	f7ff f88e 	bl	80019d4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e37c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c6:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d2:	f7ff f8af 	bl	8001a34 <HAL_GetREVID>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028dc:	4293      	cmp	r3, r2
 80028de:	d817      	bhi.n	8002910 <HAL_RCC_OscConfig+0x1f4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b40      	cmp	r3, #64	@ 0x40
 80028e6:	d108      	bne.n	80028fa <HAL_RCC_OscConfig+0x1de>
 80028e8:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028f0:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80028f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f8:	e07a      	b.n	80029f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	031b      	lsls	r3, r3, #12
 8002908:	4926      	ldr	r1, [pc, #152]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290e:	e06f      	b.n	80029f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	4921      	ldr	r1, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002924:	e064      	b.n	80029f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d047      	beq.n	80029be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800292e:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0219 	bic.w	r2, r3, #25
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	491a      	ldr	r1, [pc, #104]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7ff f848 	bl	80019d4 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002948:	f7ff f844 	bl	80019d4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e332      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800295a:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	f7ff f865 	bl	8001a34 <HAL_GetREVID>
 800296a:	4603      	mov	r3, r0
 800296c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002970:	4293      	cmp	r3, r2
 8002972:	d819      	bhi.n	80029a8 <HAL_RCC_OscConfig+0x28c>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b40      	cmp	r3, #64	@ 0x40
 800297a:	d108      	bne.n	800298e <HAL_RCC_OscConfig+0x272>
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002984:	4a07      	ldr	r2, [pc, #28]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298a:	6053      	str	r3, [r2, #4]
 800298c:	e030      	b.n	80029f0 <HAL_RCC_OscConfig+0x2d4>
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	031b      	lsls	r3, r3, #12
 800299c:	4901      	ldr	r1, [pc, #4]	@ (80029a4 <HAL_RCC_OscConfig+0x288>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	e025      	b.n	80029f0 <HAL_RCC_OscConfig+0x2d4>
 80029a4:	58024400 	.word	0x58024400
 80029a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	4997      	ldr	r1, [pc, #604]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
 80029bc:	e018      	b.n	80029f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b95      	ldr	r3, [pc, #596]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a94      	ldr	r2, [pc, #592]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff f803 	bl	80019d4 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe ffff 	bl	80019d4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e2ed      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a9 	beq.w	8002b50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fe:	4b85      	ldr	r3, [pc, #532]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a08:	4b82      	ldr	r3, [pc, #520]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d007      	beq.n	8002a24 <HAL_RCC_OscConfig+0x308>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b18      	cmp	r3, #24
 8002a18:	d13a      	bne.n	8002a90 <HAL_RCC_OscConfig+0x374>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d135      	bne.n	8002a90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a24:	4b7b      	ldr	r3, [pc, #492]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x320>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b80      	cmp	r3, #128	@ 0x80
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e2c1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a3c:	f7fe fffa 	bl	8001a34 <HAL_GetREVID>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d817      	bhi.n	8002a7a <HAL_RCC_OscConfig+0x35e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d108      	bne.n	8002a64 <HAL_RCC_OscConfig+0x348>
 8002a52:	4b70      	ldr	r3, [pc, #448]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a62:	e075      	b.n	8002b50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a64:	4b6b      	ldr	r3, [pc, #428]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	069b      	lsls	r3, r3, #26
 8002a72:	4968      	ldr	r1, [pc, #416]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a78:	e06a      	b.n	8002b50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a7a:	4b66      	ldr	r3, [pc, #408]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	4962      	ldr	r1, [pc, #392]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a8e:	e05f      	b.n	8002b50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d042      	beq.n	8002b1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a98:	4b5e      	ldr	r3, [pc, #376]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff96 	bl	80019d4 <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002aac:	f7fe ff92 	bl	80019d4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e280      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002abe:	4b55      	ldr	r3, [pc, #340]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aca:	f7fe ffb3 	bl	8001a34 <HAL_GetREVID>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d817      	bhi.n	8002b08 <HAL_RCC_OscConfig+0x3ec>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d108      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3d6>
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002aee:	6053      	str	r3, [r2, #4]
 8002af0:	e02e      	b.n	8002b50 <HAL_RCC_OscConfig+0x434>
 8002af2:	4b48      	ldr	r3, [pc, #288]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	069b      	lsls	r3, r3, #26
 8002b00:	4944      	ldr	r1, [pc, #272]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
 8002b06:	e023      	b.n	8002b50 <HAL_RCC_OscConfig+0x434>
 8002b08:	4b42      	ldr	r3, [pc, #264]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	493f      	ldr	r1, [pc, #252]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
 8002b1c:	e018      	b.n	8002b50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3c      	ldr	r2, [pc, #240]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ff53 	bl	80019d4 <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b32:	f7fe ff4f 	bl	80019d4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e23d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b44:	4b33      	ldr	r3, [pc, #204]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d036      	beq.n	8002bca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d019      	beq.n	8002b98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b64:	4b2b      	ldr	r3, [pc, #172]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b68:	4a2a      	ldr	r2, [pc, #168]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe ff30 	bl	80019d4 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b78:	f7fe ff2c 	bl	80019d4 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e21a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b8a:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x45c>
 8002b96:	e018      	b.n	8002bca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b98:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe ff16 	bl	80019d4 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe ff12 	bl	80019d4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e200      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d039      	beq.n	8002c4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bde:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a0c      	ldr	r2, [pc, #48]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002be8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bea:	f7fe fef3 	bl	80019d4 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf2:	f7fe feef 	bl	80019d4 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1dd      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
 8002c10:	e01b      	b.n	8002c4a <HAL_RCC_OscConfig+0x52e>
 8002c12:	bf00      	nop
 8002c14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c18:	4b9b      	ldr	r3, [pc, #620]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a9a      	ldr	r2, [pc, #616]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c24:	f7fe fed6 	bl	80019d4 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c2c:	f7fe fed2 	bl	80019d4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1c0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c3e:	4b92      	ldr	r3, [pc, #584]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8081 	beq.w	8002d5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c58:	4b8c      	ldr	r3, [pc, #560]	@ (8002e8c <HAL_RCC_OscConfig+0x770>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a8b      	ldr	r2, [pc, #556]	@ (8002e8c <HAL_RCC_OscConfig+0x770>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c64:	f7fe feb6 	bl	80019d4 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6c:	f7fe feb2 	bl	80019d4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	@ 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1a0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7e:	4b83      	ldr	r3, [pc, #524]	@ (8002e8c <HAL_RCC_OscConfig+0x770>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x584>
 8002c92:	4b7d      	ldr	r3, [pc, #500]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	4a7c      	ldr	r2, [pc, #496]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9e:	e02d      	b.n	8002cfc <HAL_RCC_OscConfig+0x5e0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x5a6>
 8002ca8:	4b77      	ldr	r3, [pc, #476]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a76      	ldr	r2, [pc, #472]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	4b74      	ldr	r3, [pc, #464]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	4a73      	ldr	r2, [pc, #460]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc0:	e01c      	b.n	8002cfc <HAL_RCC_OscConfig+0x5e0>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c8>
 8002cca:	4b6f      	ldr	r3, [pc, #444]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a6e      	ldr	r2, [pc, #440]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	4a6b      	ldr	r2, [pc, #428]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0x5e0>
 8002ce4:	4b68      	ldr	r3, [pc, #416]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a67      	ldr	r2, [pc, #412]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf0:	4b65      	ldr	r3, [pc, #404]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	4a64      	ldr	r2, [pc, #400]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002cf6:	f023 0304 	bic.w	r3, r3, #4
 8002cfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fe66 	bl	80019d4 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fe62 	bl	80019d4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e14e      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d22:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ee      	beq.n	8002d0c <HAL_RCC_OscConfig+0x5f0>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fe50 	bl	80019d4 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fe4c 	bl	80019d4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e138      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1ee      	bne.n	8002d38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 812d 	beq.w	8002fbe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d64:	4b48      	ldr	r3, [pc, #288]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d6c:	2b18      	cmp	r3, #24
 8002d6e:	f000 80bd 	beq.w	8002eec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	f040 809e 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	4b42      	ldr	r3, [pc, #264]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a41      	ldr	r2, [pc, #260]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fe24 	bl	80019d4 <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fe20 	bl	80019d4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e10e      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da2:	4b39      	ldr	r3, [pc, #228]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dae:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002db2:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <HAL_RCC_OscConfig+0x774>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	4931      	ldr	r1, [pc, #196]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	025b      	lsls	r3, r3, #9
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de2:	3b01      	subs	r3, #1
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	3b01      	subs	r3, #1
 8002df2:	061b      	lsls	r3, r3, #24
 8002df4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002df8:	4923      	ldr	r1, [pc, #140]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002dfe:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	4a21      	ldr	r2, [pc, #132]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e0e:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_RCC_OscConfig+0x778>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e16:	00d2      	lsls	r2, r2, #3
 8002e18:	491b      	ldr	r1, [pc, #108]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	f023 020c 	bic.w	r2, r3, #12
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	4917      	ldr	r1, [pc, #92]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e30:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	f023 0202 	bic.w	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3c:	4912      	ldr	r1, [pc, #72]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	4a10      	ldr	r2, [pc, #64]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	4a0d      	ldr	r2, [pc, #52]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	4a07      	ldr	r2, [pc, #28]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <HAL_RCC_OscConfig+0x76c>)
 8002e78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fda9 	bl	80019d4 <HAL_GetTick>
 8002e82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e84:	e011      	b.n	8002eaa <HAL_RCC_OscConfig+0x78e>
 8002e86:	bf00      	nop
 8002e88:	58024400 	.word	0x58024400
 8002e8c:	58024800 	.word	0x58024800
 8002e90:	fffffc0c 	.word	0xfffffc0c
 8002e94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe fd9c 	bl	80019d4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e08a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x77c>
 8002eb6:	e082      	b.n	8002fbe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b43      	ldr	r3, [pc, #268]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a42      	ldr	r2, [pc, #264]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fd86 	bl	80019d4 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fd82 	bl	80019d4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e070      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ede:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x7b0>
 8002eea:	e068      	b.n	8002fbe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002eec:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d031      	beq.n	8002f64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f003 0203 	and.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d12a      	bne.n	8002f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d122      	bne.n	8002f64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d11a      	bne.n	8002f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	0a5b      	lsrs	r3, r3, #9
 8002f32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d111      	bne.n	8002f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d108      	bne.n	8002f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0e1b      	lsrs	r3, r3, #24
 8002f56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e02b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f68:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6c:	08db      	lsrs	r3, r3, #3
 8002f6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d01f      	beq.n	8002fbe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f7e:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	4a11      	ldr	r2, [pc, #68]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f8a:	f7fe fd23 	bl	80019d4 <HAL_GetTick>
 8002f8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f90:	bf00      	nop
 8002f92:	f7fe fd1f 	bl	80019d4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d0f9      	beq.n	8002f92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <HAL_RCC_OscConfig+0x8b0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002faa:	00d2      	lsls	r2, r2, #3
 8002fac:	4906      	ldr	r1, [pc, #24]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_RCC_OscConfig+0x8ac>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3730      	adds	r7, #48	@ 0x30
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	ffff0007 	.word	0xffff0007

08002fd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e19c      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b87      	ldr	r3, [pc, #540]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 020f 	bic.w	r2, r3, #15
 8002ffa:	4985      	ldr	r1, [pc, #532]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b83      	ldr	r3, [pc, #524]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e184      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	4b7b      	ldr	r3, [pc, #492]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800302c:	429a      	cmp	r2, r3
 800302e:	d908      	bls.n	8003042 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003030:	4b78      	ldr	r3, [pc, #480]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	4975      	ldr	r1, [pc, #468]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 800303e:	4313      	orrs	r3, r2
 8003040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	4b70      	ldr	r3, [pc, #448]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800305a:	429a      	cmp	r2, r3
 800305c:	d908      	bls.n	8003070 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800305e:	4b6d      	ldr	r3, [pc, #436]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	496a      	ldr	r1, [pc, #424]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 800306c:	4313      	orrs	r3, r2
 800306e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	4b64      	ldr	r3, [pc, #400]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003088:	429a      	cmp	r2, r3
 800308a:	d908      	bls.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800308c:	4b61      	ldr	r3, [pc, #388]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	495e      	ldr	r1, [pc, #376]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 800309a:	4313      	orrs	r3, r2
 800309c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	4b59      	ldr	r3, [pc, #356]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d908      	bls.n	80030cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030ba:	4b56      	ldr	r3, [pc, #344]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	4953      	ldr	r1, [pc, #332]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f023 020f 	bic.w	r2, r3, #15
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4947      	ldr	r1, [pc, #284]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d055      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003106:	4b43      	ldr	r3, [pc, #268]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4940      	ldr	r1, [pc, #256]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003114:	4313      	orrs	r3, r2
 8003116:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d107      	bne.n	8003130 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003120:	4b3c      	ldr	r3, [pc, #240]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d121      	bne.n	8003170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0f6      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d107      	bne.n	8003148 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003138:	4b36      	ldr	r3, [pc, #216]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d115      	bne.n	8003170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0ea      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003150:	4b30      	ldr	r3, [pc, #192]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0de      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003160:	4b2c      	ldr	r3, [pc, #176]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0d6      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003170:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f023 0207 	bic.w	r2, r3, #7
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4925      	ldr	r1, [pc, #148]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 800317e:	4313      	orrs	r3, r2
 8003180:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003182:	f7fe fc27 	bl	80019d4 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318a:	f7fe fc23 	bl	80019d4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0be      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d1eb      	bne.n	800318a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d208      	bcs.n	80031e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ce:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f023 020f 	bic.w	r2, r3, #15
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	490e      	ldr	r1, [pc, #56]	@ (8003214 <HAL_RCC_ClockConfig+0x244>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d214      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 020f 	bic.w	r2, r3, #15
 80031f6:	4906      	ldr	r1, [pc, #24]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <HAL_RCC_ClockConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e086      	b.n	800331e <HAL_RCC_ClockConfig+0x34e>
 8003210:	52002000 	.word	0x52002000
 8003214:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	4b3f      	ldr	r3, [pc, #252]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003230:	429a      	cmp	r2, r3
 8003232:	d208      	bcs.n	8003246 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003234:	4b3c      	ldr	r3, [pc, #240]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	4939      	ldr	r1, [pc, #228]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 8003242:	4313      	orrs	r3, r2
 8003244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800325e:	429a      	cmp	r2, r3
 8003260:	d208      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003262:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	492e      	ldr	r1, [pc, #184]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 8003270:	4313      	orrs	r3, r2
 8003272:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	4b28      	ldr	r3, [pc, #160]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800328c:	429a      	cmp	r2, r3
 800328e:	d208      	bcs.n	80032a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003290:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4922      	ldr	r1, [pc, #136]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d208      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032be:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4917      	ldr	r1, [pc, #92]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032d0:	f000 f834 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	4912      	ldr	r1, [pc, #72]	@ (800332c <HAL_RCC_ClockConfig+0x35c>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <HAL_RCC_ClockConfig+0x358>)
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	4a0d      	ldr	r2, [pc, #52]	@ (800332c <HAL_RCC_ClockConfig+0x35c>)
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <HAL_RCC_ClockConfig+0x360>)
 8003306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003308:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <HAL_RCC_ClockConfig+0x364>)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <HAL_RCC_ClockConfig+0x368>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fb14 	bl	8001940 <HAL_InitTick>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	58024400 	.word	0x58024400
 800332c:	08009f14 	.word	0x08009f14
 8003330:	24000004 	.word	0x24000004
 8003334:	24000000 	.word	0x24000000
 8003338:	24000024 	.word	0x24000024

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	@ 0x24
 8003340:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003342:	4bb3      	ldr	r3, [pc, #716]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800334a:	2b18      	cmp	r3, #24
 800334c:	f200 8155 	bhi.w	80035fa <HAL_RCC_GetSysClockFreq+0x2be>
 8003350:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	080033bd 	.word	0x080033bd
 800335c:	080035fb 	.word	0x080035fb
 8003360:	080035fb 	.word	0x080035fb
 8003364:	080035fb 	.word	0x080035fb
 8003368:	080035fb 	.word	0x080035fb
 800336c:	080035fb 	.word	0x080035fb
 8003370:	080035fb 	.word	0x080035fb
 8003374:	080035fb 	.word	0x080035fb
 8003378:	080033e3 	.word	0x080033e3
 800337c:	080035fb 	.word	0x080035fb
 8003380:	080035fb 	.word	0x080035fb
 8003384:	080035fb 	.word	0x080035fb
 8003388:	080035fb 	.word	0x080035fb
 800338c:	080035fb 	.word	0x080035fb
 8003390:	080035fb 	.word	0x080035fb
 8003394:	080035fb 	.word	0x080035fb
 8003398:	080033e9 	.word	0x080033e9
 800339c:	080035fb 	.word	0x080035fb
 80033a0:	080035fb 	.word	0x080035fb
 80033a4:	080035fb 	.word	0x080035fb
 80033a8:	080035fb 	.word	0x080035fb
 80033ac:	080035fb 	.word	0x080035fb
 80033b0:	080035fb 	.word	0x080035fb
 80033b4:	080035fb 	.word	0x080035fb
 80033b8:	080033ef 	.word	0x080033ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033bc:	4b94      	ldr	r3, [pc, #592]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033c8:	4b91      	ldr	r3, [pc, #580]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	4a90      	ldr	r2, [pc, #576]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033da:	e111      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033dc:	4b8d      	ldr	r3, [pc, #564]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033de:	61bb      	str	r3, [r7, #24]
      break;
 80033e0:	e10e      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033e4:	61bb      	str	r3, [r7, #24]
      break;
 80033e6:	e10b      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033e8:	4b8c      	ldr	r3, [pc, #560]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033ea:	61bb      	str	r3, [r7, #24]
      break;
 80033ec:	e108      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033ee:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033f8:	4b85      	ldr	r3, [pc, #532]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003402:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003404:	4b82      	ldr	r3, [pc, #520]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800340e:	4b80      	ldr	r3, [pc, #512]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003412:	08db      	lsrs	r3, r3, #3
 8003414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80e1 	beq.w	80035f4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b02      	cmp	r3, #2
 8003436:	f000 8083 	beq.w	8003540 <HAL_RCC_GetSysClockFreq+0x204>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b02      	cmp	r3, #2
 800343e:	f200 80a1 	bhi.w	8003584 <HAL_RCC_GetSysClockFreq+0x248>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x114>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d056      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800344e:	e099      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003450:	4b6f      	ldr	r3, [pc, #444]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02d      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800345c:	4b6c      	ldr	r3, [pc, #432]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	08db      	lsrs	r3, r3, #3
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	4a6b      	ldr	r2, [pc, #428]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003486:	4b62      	ldr	r3, [pc, #392]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003496:	ed97 6a02 	vldr	s12, [r7, #8]
 800349a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800349e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034b6:	e087      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ca:	4b51      	ldr	r3, [pc, #324]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034da:	ed97 6a02 	vldr	s12, [r7, #8]
 80034de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034fa:	e065      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003506:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003628 <HAL_RCC_GetSysClockFreq+0x2ec>
 800350a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350e:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003522:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003620 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800352a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800353e:	e043      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2f0>
 800354e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003552:	4b2f      	ldr	r3, [pc, #188]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003562:	ed97 6a02 	vldr	s12, [r7, #8]
 8003566:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800356a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003582:	e021      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003628 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003596:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035c8:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	0a5b      	lsrs	r3, r3, #9
 80035ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d2:	3301      	adds	r3, #1
 80035d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ec:	ee17 3a90 	vmov	r3, s15
 80035f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035f2:	e005      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
      break;
 80035f8:	e002      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035fa:	4b07      	ldr	r3, [pc, #28]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035fc:	61bb      	str	r3, [r7, #24]
      break;
 80035fe:	bf00      	nop
  }

  return sysclockfreq;
 8003600:	69bb      	ldr	r3, [r7, #24]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	@ 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	58024400 	.word	0x58024400
 8003614:	03d09000 	.word	0x03d09000
 8003618:	003d0900 	.word	0x003d0900
 800361c:	017d7840 	.word	0x017d7840
 8003620:	46000000 	.word	0x46000000
 8003624:	4c742400 	.word	0x4c742400
 8003628:	4a742400 	.word	0x4a742400
 800362c:	4bbebc20 	.word	0x4bbebc20

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003636:	f7ff fe81 	bl	800333c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b10      	ldr	r3, [pc, #64]	@ (8003680 <HAL_RCC_GetHCLKFreq+0x50>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490f      	ldr	r1, [pc, #60]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x54>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <HAL_RCC_GetHCLKFreq+0x50>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	4a09      	ldr	r2, [pc, #36]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x54>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	4a07      	ldr	r2, [pc, #28]	@ (8003688 <HAL_RCC_GetHCLKFreq+0x58>)
 800366c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800366e:	4a07      	ldr	r2, [pc, #28]	@ (800368c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <HAL_RCC_GetHCLKFreq+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	58024400 	.word	0x58024400
 8003684:	08009f14 	.word	0x08009f14
 8003688:	24000004 	.word	0x24000004
 800368c:	24000000 	.word	0x24000000

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003694:	f7ff ffcc 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4904      	ldr	r1, [pc, #16]	@ (80036b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	58024400 	.word	0x58024400
 80036b8:	08009f14 	.word	0x08009f14

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036c0:	f7ff ffb6 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4904      	ldr	r1, [pc, #16]	@ (80036e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	58024400 	.word	0x58024400
 80036e4:	08009f14 	.word	0x08009f14

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ec:	b0ca      	sub	sp, #296	@ 0x128
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800370c:	2500      	movs	r5, #0
 800370e:	ea54 0305 	orrs.w	r3, r4, r5
 8003712:	d049      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800371a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800371e:	d02f      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003720:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003724:	d828      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800372a:	d01a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800372c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003730:	d822      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800373a:	d007      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800373c:	e01c      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373e:	4bb8      	ldr	r3, [pc, #736]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	4ab7      	ldr	r2, [pc, #732]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800374a:	e01a      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	3308      	adds	r3, #8
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fc8f 	bl	8005078 <RCCEx_PLL2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003760:	e00f      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	3328      	adds	r3, #40	@ 0x28
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fd36 	bl	80051dc <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003776:	e004      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800377e:	e000      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800378a:	4ba5      	ldr	r3, [pc, #660]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003798:	4aa1      	ldr	r2, [pc, #644]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379a:	430b      	orrs	r3, r1
 800379c:	6513      	str	r3, [r2, #80]	@ 0x50
 800379e:	e003      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80037b4:	f04f 0900 	mov.w	r9, #0
 80037b8:	ea58 0309 	orrs.w	r3, r8, r9
 80037bc:	d047      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d82a      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037c8:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037e5 	.word	0x080037e5
 80037d4:	080037f3 	.word	0x080037f3
 80037d8:	08003809 	.word	0x08003809
 80037dc:	08003827 	.word	0x08003827
 80037e0:	08003827 	.word	0x08003827
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	4a8d      	ldr	r2, [pc, #564]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037f0:	e01a      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	3308      	adds	r3, #8
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fc3c 	bl	8005078 <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003806:	e00f      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	3328      	adds	r3, #40	@ 0x28
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fce3 	bl	80051dc <RCCEx_PLL3_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800381c:	e004      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003830:	4b7b      	ldr	r3, [pc, #492]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003834:	f023 0107 	bic.w	r1, r3, #7
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	4a78      	ldr	r2, [pc, #480]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6513      	str	r3, [r2, #80]	@ 0x50
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800385a:	f04f 0b00 	mov.w	fp, #0
 800385e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003862:	d04c      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800386e:	d030      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003874:	d829      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003876:	2bc0      	cmp	r3, #192	@ 0xc0
 8003878:	d02d      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800387a:	2bc0      	cmp	r3, #192	@ 0xc0
 800387c:	d825      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800387e:	2b80      	cmp	r3, #128	@ 0x80
 8003880:	d018      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003882:	2b80      	cmp	r3, #128	@ 0x80
 8003884:	d821      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	d007      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800388e:	e01c      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	4a62      	ldr	r2, [pc, #392]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800389c:	e01c      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	3308      	adds	r3, #8
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 fbe6 	bl	8005078 <RCCEx_PLL2_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038b2:	e011      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b8:	3328      	adds	r3, #40	@ 0x28
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fc8d 	bl	80051dc <RCCEx_PLL3_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038c8:	e006      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d0:	e002      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800390a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003914:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003918:	460b      	mov	r3, r1
 800391a:	4313      	orrs	r3, r2
 800391c:	d053      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003926:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800392a:	d035      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800392c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003930:	d82e      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003932:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003936:	d031      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003938:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800393c:	d828      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003942:	d01a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003948:	d822      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800394e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003952:	d007      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003954:	e01c      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003956:	4b32      	ldr	r3, [pc, #200]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	4a31      	ldr	r2, [pc, #196]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800395c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003962:	e01c      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	3308      	adds	r3, #8
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fb83 	bl	8005078 <RCCEx_PLL2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003978:	e011      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	3328      	adds	r3, #40	@ 0x28
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fc2a 	bl	80051dc <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800398e:	e006      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003996:	e002      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80039dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d056      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039f2:	d038      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039f8:	d831      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039fe:	d034      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a04:	d82b      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a0a:	d01d      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a10:	d825      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a1c:	e01f      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a24:	4ba2      	ldr	r3, [pc, #648]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	4aa1      	ldr	r2, [pc, #644]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a30:	e01c      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	3308      	adds	r3, #8
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fb1c 	bl	8005078 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a46:	e011      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	3328      	adds	r3, #40	@ 0x28
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 fbc3 	bl	80051dc <RCCEx_PLL3_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e006      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a64:	e002      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a74:	4b8e      	ldr	r3, [pc, #568]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a84:	4a8a      	ldr	r2, [pc, #552]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a8a:	e003      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003aaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	d03a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aba:	2b30      	cmp	r3, #48	@ 0x30
 8003abc:	d01f      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003abe:	2b30      	cmp	r3, #48	@ 0x30
 8003ac0:	d819      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d815      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d019      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d111      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad2:	4b77      	ldr	r3, [pc, #476]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad6:	4a76      	ldr	r2, [pc, #472]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ade:	e011      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 fac5 	bl	8005078 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b0c:	4b68      	ldr	r3, [pc, #416]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1a:	4a65      	ldr	r2, [pc, #404]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b20:	e003      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	d051      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b54:	d035      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b5a:	d82e      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b60:	d031      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b66:	d828      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b6c:	d01a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b72:	d822      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7c:	d007      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b7e:	e01c      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b80:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	4a4a      	ldr	r2, [pc, #296]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	3308      	adds	r3, #8
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 fa6e 	bl	8005078 <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ba2:	e011      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	3328      	adds	r3, #40	@ 0x28
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fb15 	bl	80051dc <RCCEx_PLL3_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e006      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bd0:	4b37      	ldr	r3, [pc, #220]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bde:	4a34      	ldr	r2, [pc, #208]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003be4:	e003      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d056      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c18:	d033      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c1e:	d82c      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c24:	d02f      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c2a:	d826      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c30:	d02b      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c36:	d820      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c3c:	d012      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c42:	d81a      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d022      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4c:	d115      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	3308      	adds	r3, #8
 8003c54:	2101      	movs	r1, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fa0e 	bl	8005078 <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c62:	e015      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c68:	3328      	adds	r3, #40	@ 0x28
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fab5 	bl	80051dc <RCCEx_PLL3_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c82:	bf00      	nop
 8003c84:	e004      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10d      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c98:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca6:	4a02      	ldr	r2, [pc, #8]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	d055      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce8:	d033      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cee:	d82c      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf4:	d02f      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfa:	d826      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d00:	d02b      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d06:	d820      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d0c:	d012      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d12:	d81a      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d022      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	3308      	adds	r3, #8
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f9a6 	bl	8005078 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d32:	e015      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	3328      	adds	r3, #40	@ 0x28
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 fa4d 	bl	80051dc <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d48:	e00a      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d68:	4ba3      	ldr	r3, [pc, #652]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d78:	4a9f      	ldr	r2, [pc, #636]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7e:	e003      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003da2:	460b      	mov	r3, r1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	d037      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003db2:	d00e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003db8:	d816      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d018      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a8b      	ldr	r2, [pc, #556]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dd0:	e00f      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 f94c 	bl	8005078 <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003de6:	e004      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	4a7b      	ldr	r2, [pc, #492]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d039      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d81c      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e42:	a201      	add	r2, pc, #4	@ (adr r2, 8003e48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e85 	.word	0x08003e85
 8003e4c:	08003e59 	.word	0x08003e59
 8003e50:	08003e67 	.word	0x08003e67
 8003e54:	08003e85 	.word	0x08003e85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e58:	4b67      	ldr	r3, [pc, #412]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	4a66      	ldr	r2, [pc, #408]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e64:	e00f      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 f902 	bl	8005078 <RCCEx_PLL2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e7a:	e004      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e82:	e000      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	f023 0103 	bic.w	r1, r3, #3
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e9c:	4a56      	ldr	r2, [pc, #344]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ec2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f000 809f 	beq.w	800400c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ece:	4b4b      	ldr	r3, [pc, #300]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eda:	f7fd fd7b 	bl	80019d4 <HAL_GetTick>
 8003ede:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee2:	e00b      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee4:	f7fd fd76 	bl	80019d4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	@ 0x64
 8003ef2:	d903      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003efa:	e005      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ed      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d179      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f10:	4b39      	ldr	r3, [pc, #228]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f1c:	4053      	eors	r3, r2
 8003f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d015      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f26:	4b34      	ldr	r3, [pc, #208]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f32:	4b31      	ldr	r3, [pc, #196]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	4a30      	ldr	r2, [pc, #192]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5e:	d118      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd fd38 	bl	80019d4 <HAL_GetTick>
 8003f64:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f68:	e00d      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fd fd33 	bl	80019d4 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f74:	1ad2      	subs	r2, r2, r3
 8003f76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d903      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003f84:	e005      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f86:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0eb      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d129      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003faa:	d10e      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003fac:	4b12      	ldr	r3, [pc, #72]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fbc:	091a      	lsrs	r2, r3, #4
 8003fbe:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6113      	str	r3, [r2, #16]
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003fca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fd4:	6113      	str	r3, [r2, #16]
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe6:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fec:	e00e      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003ff6:	e009      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	58024800 	.word	0x58024800
 8004000:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f002 0301 	and.w	r3, r2, #1
 8004018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004026:	460b      	mov	r3, r1
 8004028:	4313      	orrs	r3, r2
 800402a:	f000 8089 	beq.w	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004034:	2b28      	cmp	r3, #40	@ 0x28
 8004036:	d86b      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004038:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004119 	.word	0x08004119
 8004044:	08004111 	.word	0x08004111
 8004048:	08004111 	.word	0x08004111
 800404c:	08004111 	.word	0x08004111
 8004050:	08004111 	.word	0x08004111
 8004054:	08004111 	.word	0x08004111
 8004058:	08004111 	.word	0x08004111
 800405c:	08004111 	.word	0x08004111
 8004060:	080040e5 	.word	0x080040e5
 8004064:	08004111 	.word	0x08004111
 8004068:	08004111 	.word	0x08004111
 800406c:	08004111 	.word	0x08004111
 8004070:	08004111 	.word	0x08004111
 8004074:	08004111 	.word	0x08004111
 8004078:	08004111 	.word	0x08004111
 800407c:	08004111 	.word	0x08004111
 8004080:	080040fb 	.word	0x080040fb
 8004084:	08004111 	.word	0x08004111
 8004088:	08004111 	.word	0x08004111
 800408c:	08004111 	.word	0x08004111
 8004090:	08004111 	.word	0x08004111
 8004094:	08004111 	.word	0x08004111
 8004098:	08004111 	.word	0x08004111
 800409c:	08004111 	.word	0x08004111
 80040a0:	08004119 	.word	0x08004119
 80040a4:	08004111 	.word	0x08004111
 80040a8:	08004111 	.word	0x08004111
 80040ac:	08004111 	.word	0x08004111
 80040b0:	08004111 	.word	0x08004111
 80040b4:	08004111 	.word	0x08004111
 80040b8:	08004111 	.word	0x08004111
 80040bc:	08004111 	.word	0x08004111
 80040c0:	08004119 	.word	0x08004119
 80040c4:	08004111 	.word	0x08004111
 80040c8:	08004111 	.word	0x08004111
 80040cc:	08004111 	.word	0x08004111
 80040d0:	08004111 	.word	0x08004111
 80040d4:	08004111 	.word	0x08004111
 80040d8:	08004111 	.word	0x08004111
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004119 	.word	0x08004119
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	3308      	adds	r3, #8
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 ffc3 	bl	8005078 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	3328      	adds	r3, #40	@ 0x28
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f001 f86a 	bl	80051dc <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004122:	4bbf      	ldr	r3, [pc, #764]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004130:	4abb      	ldr	r2, [pc, #748]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004132:	430b      	orrs	r3, r1
 8004134:	6553      	str	r3, [r2, #84]	@ 0x54
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f002 0302 	and.w	r3, r2, #2
 800414c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004156:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	d041      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004166:	2b05      	cmp	r3, #5
 8004168:	d824      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041bd 	.word	0x080041bd
 8004174:	08004189 	.word	0x08004189
 8004178:	0800419f 	.word	0x0800419f
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041bd 	.word	0x080041bd
 8004184:	080041bd 	.word	0x080041bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	3308      	adds	r3, #8
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f000 ff71 	bl	8005078 <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800419c:	e00f      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a2:	3328      	adds	r3, #40	@ 0x28
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f818 	bl	80051dc <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041c6:	4b96      	ldr	r3, [pc, #600]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ca:	f023 0107 	bic.w	r1, r3, #7
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d4:	4a92      	ldr	r2, [pc, #584]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f002 0304 	and.w	r3, r2, #4
 80041f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d044      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420c:	2b05      	cmp	r3, #5
 800420e:	d825      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004210:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	08004265 	.word	0x08004265
 800421c:	08004231 	.word	0x08004231
 8004220:	08004247 	.word	0x08004247
 8004224:	08004265 	.word	0x08004265
 8004228:	08004265 	.word	0x08004265
 800422c:	08004265 	.word	0x08004265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	3308      	adds	r3, #8
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f000 ff1d 	bl	8005078 <RCCEx_PLL2_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004244:	e00f      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	3328      	adds	r3, #40	@ 0x28
 800424c:	2101      	movs	r1, #1
 800424e:	4618      	mov	r0, r3
 8004250:	f000 ffc4 	bl	80051dc <RCCEx_PLL3_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800425a:	e004      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004262:	e000      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800426e:	4b6c      	ldr	r3, [pc, #432]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	f023 0107 	bic.w	r1, r3, #7
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427e:	4a68      	ldr	r2, [pc, #416]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004280:	430b      	orrs	r3, r1
 8004282:	6593      	str	r3, [r2, #88]	@ 0x58
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f002 0320 	and.w	r3, r2, #32
 800429a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042a8:	460b      	mov	r3, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	d055      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ba:	d033      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80042bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042c0:	d82c      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c6:	d02f      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042cc:	d826      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042d2:	d02b      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80042d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042d8:	d820      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042de:	d012      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80042e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042e4:	d81a      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d022      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80042ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ee:	d115      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	3308      	adds	r3, #8
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 febd 	bl	8005078 <RCCEx_PLL2_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004304:	e015      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	3328      	adds	r3, #40	@ 0x28
 800430c:	2102      	movs	r1, #2
 800430e:	4618      	mov	r0, r3
 8004310:	f000 ff64 	bl	80051dc <RCCEx_PLL3_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800431a:	e00a      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004322:	e006      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004324:	bf00      	nop
 8004326:	e004      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004328:	bf00      	nop
 800432a:	e002      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800432c:	bf00      	nop
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800433a:	4b39      	ldr	r3, [pc, #228]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800433c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	4a35      	ldr	r2, [pc, #212]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800434c:	430b      	orrs	r3, r1
 800434e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004350:	e003      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800436a:	2300      	movs	r3, #0
 800436c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004370:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d058      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004382:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004386:	d033      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004388:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800438c:	d82c      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	d02f      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004398:	d826      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800439a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800439e:	d02b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043a4:	d820      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043aa:	d012      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b0:	d81a      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d022      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ba:	d115      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	3308      	adds	r3, #8
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fe57 	bl	8005078 <RCCEx_PLL2_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043d0:	e015      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3328      	adds	r3, #40	@ 0x28
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fefe 	bl	80051dc <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043e6:	e00a      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ee:	e006      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043f0:	bf00      	nop
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043f4:	bf00      	nop
 80043f6:	e002      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004406:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004416:	4a02      	ldr	r2, [pc, #8]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004418:	430b      	orrs	r3, r1
 800441a:	6593      	str	r3, [r2, #88]	@ 0x58
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004442:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d055      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004454:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004458:	d033      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800445a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800445e:	d82c      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004464:	d02f      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446a:	d826      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800446c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004470:	d02b      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004472:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004476:	d820      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004478:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800447c:	d012      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800447e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004482:	d81a      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d022      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800448c:	d115      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	3308      	adds	r3, #8
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fdee 	bl	8005078 <RCCEx_PLL2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044a2:	e015      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	3328      	adds	r3, #40	@ 0x28
 80044aa:	2102      	movs	r1, #2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fe95 	bl	80051dc <RCCEx_PLL3_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044b8:	e00a      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044c0:	e006      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044c2:	bf00      	nop
 80044c4:	e004      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044c6:	bf00      	nop
 80044c8:	e002      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10b      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044e8:	4a9d      	ldr	r2, [pc, #628]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ee:	e003      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f002 0308 	and.w	r3, r2, #8
 8004504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004508:	2300      	movs	r3, #0
 800450a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800450e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d01e      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	3328      	adds	r3, #40	@ 0x28
 800452c:	2102      	movs	r1, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fe54 	bl	80051dc <RCCEx_PLL3_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004540:	4b87      	ldr	r3, [pc, #540]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004544:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004550:	4a83      	ldr	r2, [pc, #524]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004552:	430b      	orrs	r3, r1
 8004554:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f002 0310 	and.w	r3, r2, #16
 8004562:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800456c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d01e      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800457e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004582:	d10c      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004588:	3328      	adds	r3, #40	@ 0x28
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe25 	bl	80051dc <RCCEx_PLL3_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800459e:	4b70      	ldr	r3, [pc, #448]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80045c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d03e      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045e0:	d022      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80045e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045e6:	d81b      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f0:	d00b      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80045f2:	e015      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	3308      	adds	r3, #8
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fd3b 	bl	8005078 <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004608:	e00f      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	3328      	adds	r3, #40	@ 0x28
 8004610:	2102      	movs	r1, #2
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fde2 	bl	80051dc <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800461e:	e004      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004626:	e000      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004632:	4b4b      	ldr	r3, [pc, #300]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004642:	4a47      	ldr	r2, [pc, #284]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004644:	430b      	orrs	r3, r1
 8004646:	6593      	str	r3, [r2, #88]	@ 0x58
 8004648:	e003      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800465e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004660:	2300      	movs	r3, #0
 8004662:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004664:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d03b      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004676:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800467a:	d01f      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800467c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004680:	d818      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004686:	d003      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004688:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800468c:	d007      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800468e:	e011      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004690:	4b33      	ldr	r3, [pc, #204]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	4a32      	ldr	r2, [pc, #200]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800469c:	e00f      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	3328      	adds	r3, #40	@ 0x28
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fd98 	bl	80051dc <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80046b2:	e004      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80046bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046c6:	4b26      	ldr	r3, [pc, #152]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d6:	4a22      	ldr	r2, [pc, #136]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d8:	430b      	orrs	r3, r1
 80046da:	6553      	str	r3, [r2, #84]	@ 0x54
 80046dc:	e003      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80046f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80046f4:	2300      	movs	r3, #0
 80046f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80046f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d034      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004710:	d007      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004712:	e011      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004714:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	4a11      	ldr	r2, [pc, #68]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004720:	e00e      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	3308      	adds	r3, #8
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fca4 	bl	8005078 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800473e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004756:	4a02      	ldr	r2, [pc, #8]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004758:	430b      	orrs	r3, r1
 800475a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800477a:	2300      	movs	r3, #0
 800477c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800477e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d00c      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478c:	3328      	adds	r3, #40	@ 0x28
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fd23 	bl	80051dc <RCCEx_PLL3_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80047ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b0:	2300      	movs	r3, #0
 80047b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80047b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80047b8:	460b      	mov	r3, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	d038      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ca:	d018      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80047cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047d0:	d811      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d6:	d014      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047dc:	d80b      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d011      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e6:	d106      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e8:	4bc3      	ldr	r3, [pc, #780]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	4ac2      	ldr	r2, [pc, #776]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047f4:	e008      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047fc:	e004      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047fe:	bf00      	nop
 8004800:	e002      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004802:	bf00      	nop
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004810:	4bb9      	ldr	r3, [pc, #740]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004820:	4ab5      	ldr	r2, [pc, #724]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004822:	430b      	orrs	r3, r1
 8004824:	6553      	str	r3, [r2, #84]	@ 0x54
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800483c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800483e:	2300      	movs	r3, #0
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004842:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004846:	460b      	mov	r3, r1
 8004848:	4313      	orrs	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800484c:	4baa      	ldr	r3, [pc, #680]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800484e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004850:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485a:	4aa7      	ldr	r2, [pc, #668]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485c:	430b      	orrs	r3, r1
 800485e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800486c:	653b      	str	r3, [r7, #80]	@ 0x50
 800486e:	2300      	movs	r3, #0
 8004870:	657b      	str	r3, [r7, #84]	@ 0x54
 8004872:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004876:	460b      	mov	r3, r1
 8004878:	4313      	orrs	r3, r2
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800487c:	4b9e      	ldr	r3, [pc, #632]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800488c:	4a9a      	ldr	r2, [pc, #616]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800488e:	430b      	orrs	r3, r1
 8004890:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048a0:	2300      	movs	r3, #0
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ae:	4b92      	ldr	r3, [pc, #584]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048bc:	4a8e      	ldr	r2, [pc, #568]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80048ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80048d0:	2300      	movs	r3, #0
 80048d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d00e      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048de:	4b86      	ldr	r3, [pc, #536]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	4a85      	ldr	r2, [pc, #532]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048e8:	6113      	str	r3, [r2, #16]
 80048ea:	4b83      	ldr	r3, [pc, #524]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ec:	6919      	ldr	r1, [r3, #16]
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80048f6:	4a80      	ldr	r2, [pc, #512]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004908:	63bb      	str	r3, [r7, #56]	@ 0x38
 800490a:	2300      	movs	r3, #0
 800490c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800490e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004912:	460b      	mov	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004918:	4b77      	ldr	r3, [pc, #476]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800491a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004926:	4a74      	ldr	r2, [pc, #464]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004928:	430b      	orrs	r3, r1
 800492a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004938:	633b      	str	r3, [r7, #48]	@ 0x30
 800493a:	2300      	movs	r3, #0
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
 800493e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004942:	460b      	mov	r3, r1
 8004944:	4313      	orrs	r3, r2
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004948:	4b6b      	ldr	r3, [pc, #428]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004958:	4a67      	ldr	r2, [pc, #412]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800495a:	430b      	orrs	r3, r1
 800495c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	2100      	movs	r1, #0
 8004968:	62b9      	str	r1, [r7, #40]	@ 0x28
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004970:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004974:	460b      	mov	r3, r1
 8004976:	4313      	orrs	r3, r2
 8004978:	d011      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	3308      	adds	r3, #8
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb78 	bl	8005078 <RCCEx_PLL2_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800498e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	2100      	movs	r1, #0
 80049a8:	6239      	str	r1, [r7, #32]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80049b4:	460b      	mov	r3, r1
 80049b6:	4313      	orrs	r3, r2
 80049b8:	d011      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049be:	3308      	adds	r3, #8
 80049c0:	2101      	movs	r1, #1
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fb58 	bl	8005078 <RCCEx_PLL2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	2100      	movs	r1, #0
 80049e8:	61b9      	str	r1, [r7, #24]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d011      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	3308      	adds	r3, #8
 8004a00:	2102      	movs	r1, #2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fb38 	bl	8005078 <RCCEx_PLL2_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	2100      	movs	r1, #0
 8004a28:	6139      	str	r1, [r7, #16]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d011      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	3328      	adds	r3, #40	@ 0x28
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fbca 	bl	80051dc <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	2100      	movs	r1, #0
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a74:	460b      	mov	r3, r1
 8004a76:	4313      	orrs	r3, r2
 8004a78:	d011      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	3328      	adds	r3, #40	@ 0x28
 8004a80:	2101      	movs	r1, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fbaa 	bl	80051dc <RCCEx_PLL3_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	d011      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	3328      	adds	r3, #40	@ 0x28
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fb8a 	bl	80051dc <RCCEx_PLL3_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004ade:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004af2:	46bd      	mov	sp, r7
 8004af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af8:	58024400 	.word	0x58024400

08004afc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b00:	f7fe fd96 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4904      	ldr	r1, [pc, #16]	@ (8004b24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	58024400 	.word	0x58024400
 8004b24:	08009f14 	.word	0x08009f14

08004b28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b30:	4ba1      	ldr	r3, [pc, #644]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b3a:	4b9f      	ldr	r3, [pc, #636]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3e:	0b1b      	lsrs	r3, r3, #12
 8004b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b46:	4b9c      	ldr	r3, [pc, #624]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b52:	4b99      	ldr	r3, [pc, #612]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b56:	08db      	lsrs	r3, r3, #3
 8004b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8111 	beq.w	8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	f000 8083 	beq.w	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f200 80a1 	bhi.w	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d056      	beq.n	8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b92:	e099      	b.n	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b94:	4b88      	ldr	r3, [pc, #544]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02d      	beq.n	8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ba0:	4b85      	ldr	r3, [pc, #532]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	4a84      	ldr	r2, [pc, #528]	@ (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b7b      	ldr	r3, [pc, #492]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bfa:	e087      	b.n	8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3e:	e065      	b.n	8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b59      	ldr	r3, [pc, #356]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c82:	e043      	b.n	8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b48      	ldr	r3, [pc, #288]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004caa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc6:	e021      	b.n	8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	4b37      	ldr	r3, [pc, #220]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d10:	0a5b      	lsrs	r3, r3, #9
 8004d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d32:	ee17 2a90 	vmov	r2, s15
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d60:	ee17 2a90 	vmov	r2, s15
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d68:	4b13      	ldr	r3, [pc, #76]	@ (8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	0e1b      	lsrs	r3, r3, #24
 8004d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8e:	ee17 2a90 	vmov	r2, s15
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d96:	e008      	b.n	8004daa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
}
 8004daa:	bf00      	nop
 8004dac:	3724      	adds	r7, #36	@ 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	03d09000 	.word	0x03d09000
 8004dc0:	46000000 	.word	0x46000000
 8004dc4:	4c742400 	.word	0x4c742400
 8004dc8:	4a742400 	.word	0x4a742400
 8004dcc:	4bbebc20 	.word	0x4bbebc20

08004dd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	@ 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dd8:	4ba1      	ldr	r3, [pc, #644]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004de2:	4b9f      	ldr	r3, [pc, #636]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	0d1b      	lsrs	r3, r3, #20
 8004de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dee:	4b9c      	ldr	r3, [pc, #624]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004dfa:	4b99      	ldr	r3, [pc, #612]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfe:	08db      	lsrs	r3, r3, #3
 8004e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8111 	beq.w	8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f000 8083 	beq.w	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f200 80a1 	bhi.w	8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d056      	beq.n	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e3a:	e099      	b.n	8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e3c:	4b88      	ldr	r3, [pc, #544]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02d      	beq.n	8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e48:	4b85      	ldr	r3, [pc, #532]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	4a84      	ldr	r2, [pc, #528]	@ (8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b7b      	ldr	r3, [pc, #492]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ea2:	e087      	b.n	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800506c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ee6:	e065      	b.n	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b59      	ldr	r3, [pc, #356]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2a:	e043      	b.n	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	4b48      	ldr	r3, [pc, #288]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f6e:	e021      	b.n	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f82:	4b37      	ldr	r3, [pc, #220]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	0a5b      	lsrs	r3, r3, #9
 8004fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fda:	ee17 2a90 	vmov	r2, s15
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005008:	ee17 2a90 	vmov	r2, s15
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005010:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	0e1b      	lsrs	r3, r3, #24
 8005016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800502a:	edd7 6a07 	vldr	s13, [r7, #28]
 800502e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005036:	ee17 2a90 	vmov	r2, s15
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800503e:	e008      	b.n	8005052 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
}
 8005052:	bf00      	nop
 8005054:	3724      	adds	r7, #36	@ 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
 8005064:	03d09000 	.word	0x03d09000
 8005068:	46000000 	.word	0x46000000
 800506c:	4c742400 	.word	0x4c742400
 8005070:	4a742400 	.word	0x4a742400
 8005074:	4bbebc20 	.word	0x4bbebc20

08005078 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005086:	4b53      	ldr	r3, [pc, #332]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b03      	cmp	r3, #3
 8005090:	d101      	bne.n	8005096 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e099      	b.n	80051ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005096:	4b4f      	ldr	r3, [pc, #316]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a4e      	ldr	r2, [pc, #312]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800509c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fc fc97 	bl	80019d4 <HAL_GetTick>
 80050a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050a8:	e008      	b.n	80050bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050aa:	f7fc fc93 	bl	80019d4 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e086      	b.n	80051ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050bc:	4b45      	ldr	r3, [pc, #276]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050c8:	4b42      	ldr	r3, [pc, #264]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80050ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	031b      	lsls	r3, r3, #12
 80050d6:	493f      	ldr	r1, [pc, #252]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	628b      	str	r3, [r1, #40]	@ 0x28
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	025b      	lsls	r3, r3, #9
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	3b01      	subs	r3, #1
 8005106:	061b      	lsls	r3, r3, #24
 8005108:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800510c:	4931      	ldr	r1, [pc, #196]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005112:	4b30      	ldr	r3, [pc, #192]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	492d      	ldr	r1, [pc, #180]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005124:	4b2b      	ldr	r3, [pc, #172]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	f023 0220 	bic.w	r2, r3, #32
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4928      	ldr	r1, [pc, #160]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005136:	4b27      	ldr	r3, [pc, #156]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a26      	ldr	r2, [pc, #152]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800513c:	f023 0310 	bic.w	r3, r3, #16
 8005140:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005142:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005146:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <RCCEx_PLL2_Config+0x160>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	69d2      	ldr	r2, [r2, #28]
 800514e:	00d2      	lsls	r2, r2, #3
 8005150:	4920      	ldr	r1, [pc, #128]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005156:	4b1f      	ldr	r3, [pc, #124]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	4a1e      	ldr	r2, [pc, #120]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800515c:	f043 0310 	orr.w	r3, r3, #16
 8005160:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005168:	4b1a      	ldr	r3, [pc, #104]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800516e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005172:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005174:	e00f      	b.n	8005196 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800517c:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	4a14      	ldr	r2, [pc, #80]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005186:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005188:	e005      	b.n	8005196 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800518a:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005194:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005196:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a0e      	ldr	r2, [pc, #56]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800519c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a2:	f7fc fc17 	bl	80019d4 <HAL_GetTick>
 80051a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051a8:	e008      	b.n	80051bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051aa:	f7fc fc13 	bl	80019d4 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e006      	b.n	80051ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
 80051d8:	ffff0007 	.word	0xffff0007

080051dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ea:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d101      	bne.n	80051fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e099      	b.n	800532e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a4e      	ldr	r2, [pc, #312]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005206:	f7fc fbe5 	bl	80019d4 <HAL_GetTick>
 800520a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800520c:	e008      	b.n	8005220 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800520e:	f7fc fbe1 	bl	80019d4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e086      	b.n	800532e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005220:	4b45      	ldr	r3, [pc, #276]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800522c:	4b42      	ldr	r3, [pc, #264]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	051b      	lsls	r3, r3, #20
 800523a:	493f      	ldr	r1, [pc, #252]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	3b01      	subs	r3, #1
 8005246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	3b01      	subs	r3, #1
 8005250:	025b      	lsls	r3, r3, #9
 8005252:	b29b      	uxth	r3, r3
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	3b01      	subs	r3, #1
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	3b01      	subs	r3, #1
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005270:	4931      	ldr	r1, [pc, #196]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005272:	4313      	orrs	r3, r2
 8005274:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005276:	4b30      	ldr	r3, [pc, #192]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	492d      	ldr	r1, [pc, #180]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005284:	4313      	orrs	r3, r2
 8005286:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005288:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	4928      	ldr	r1, [pc, #160]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800529a:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529e:	4a26      	ldr	r2, [pc, #152]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052a6:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052aa:	4b24      	ldr	r3, [pc, #144]	@ (800533c <RCCEx_PLL3_Config+0x160>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	69d2      	ldr	r2, [r2, #28]
 80052b2:	00d2      	lsls	r2, r2, #3
 80052b4:	4920      	ldr	r1, [pc, #128]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052d8:	e00f      	b.n	80052fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d106      	bne.n	80052ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052e0:	4b15      	ldr	r3, [pc, #84]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	4a14      	ldr	r2, [pc, #80]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052ec:	e005      	b.n	80052fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005306:	f7fc fb65 	bl	80019d4 <HAL_GetTick>
 800530a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800530c:	e008      	b.n	8005320 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800530e:	f7fc fb61 	bl	80019d4 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	58024400 	.word	0x58024400
 800533c:	ffff0007 	.word	0xffff0007

08005340 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e10f      	b.n	8005572 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a87      	ldr	r2, [pc, #540]	@ (800557c <HAL_SPI_Init+0x23c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <HAL_SPI_Init+0x42>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a86      	ldr	r2, [pc, #536]	@ (8005580 <HAL_SPI_Init+0x240>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00a      	beq.n	8005382 <HAL_SPI_Init+0x42>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a84      	ldr	r2, [pc, #528]	@ (8005584 <HAL_SPI_Init+0x244>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d005      	beq.n	8005382 <HAL_SPI_Init+0x42>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d901      	bls.n	8005382 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e0f7      	b.n	8005572 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 ff22 	bl	80061cc <SPI_GetPacketSize>
 8005388:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7b      	ldr	r2, [pc, #492]	@ (800557c <HAL_SPI_Init+0x23c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00c      	beq.n	80053ae <HAL_SPI_Init+0x6e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a79      	ldr	r2, [pc, #484]	@ (8005580 <HAL_SPI_Init+0x240>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <HAL_SPI_Init+0x6e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a78      	ldr	r2, [pc, #480]	@ (8005584 <HAL_SPI_Init+0x244>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d002      	beq.n	80053ae <HAL_SPI_Init+0x6e>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d811      	bhi.n	80053d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80053b2:	4a72      	ldr	r2, [pc, #456]	@ (800557c <HAL_SPI_Init+0x23c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a70      	ldr	r2, [pc, #448]	@ (8005580 <HAL_SPI_Init+0x240>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_SPI_Init+0x8c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6f      	ldr	r2, [pc, #444]	@ (8005584 <HAL_SPI_Init+0x244>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d104      	bne.n	80053d6 <HAL_SPI_Init+0x96>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d901      	bls.n	80053d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0cd      	b.n	8005572 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fb fdc8 	bl	8000f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005412:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800541c:	d119      	bne.n	8005452 <HAL_SPI_Init+0x112>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005426:	d103      	bne.n	8005430 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10c      	bne.n	8005452 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800543c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005440:	d107      	bne.n	8005452 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005450:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00f      	beq.n	800547e <HAL_SPI_Init+0x13e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b06      	cmp	r3, #6
 8005464:	d90b      	bls.n	800547e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e007      	b.n	800548e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800548c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69da      	ldr	r2, [r3, #28]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	431a      	orrs	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a0:	ea42 0103 	orr.w	r1, r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ee:	ea42 0103 	orr.w	r1, r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005518:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800552c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40013000 	.word	0x40013000
 8005580:	40003800 	.word	0x40003800
 8005584:	40003c00 	.word	0x40003c00

08005588 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08e      	sub	sp, #56	@ 0x38
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3320      	adds	r3, #32
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3330      	adds	r3, #48	@ 0x30
 80055a4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3301      	adds	r3, #1
 80055b0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055b2:	f7fc fa0f 	bl	80019d4 <HAL_GetTick>
 80055b6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d001      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
 80055ce:	e310      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x5a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x5a>
 80055dc:	887b      	ldrh	r3, [r7, #2]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e305      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x6c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e2fe      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x66a>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2205      	movs	r2, #5
 8005600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	887a      	ldrh	r2, [r7, #2]
 8005616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005652:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a70      	ldr	r2, [pc, #448]	@ (800581c <HAL_SPI_TransmitReceive+0x294>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_SPI_TransmitReceive+0xea>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6f      	ldr	r2, [pc, #444]	@ (8005820 <HAL_SPI_TransmitReceive+0x298>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_SPI_TransmitReceive+0xea>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6d      	ldr	r2, [pc, #436]	@ (8005824 <HAL_SPI_TransmitReceive+0x29c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d102      	bne.n	8005678 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005672:	2310      	movs	r3, #16
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005676:	e001      	b.n	800567c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005678:	2308      	movs	r3, #8
 800567a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	4b69      	ldr	r3, [pc, #420]	@ (8005828 <HAL_SPI_TransmitReceive+0x2a0>)
 8005684:	4013      	ands	r3, r2
 8005686:	8879      	ldrh	r1, [r7, #2]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	430b      	orrs	r3, r1
 800568e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056a8:	d107      	bne.n	80056ba <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b0f      	cmp	r3, #15
 80056c0:	f240 80a2 	bls.w	8005808 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80056c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056ca:	e094      	b.n	80057f6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d120      	bne.n	800571c <HAL_SPI_TransmitReceive+0x194>
 80056da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01d      	beq.n	800571c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80056e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80056e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d217      	bcs.n	800571c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fc:	1d1a      	adds	r2, r3, #4
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800571a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005724:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d065      	beq.n	80057f6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d118      	bne.n	800576a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005740:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005742:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005748:	1d1a      	adds	r2, r3, #4
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005766:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005768:	e045      	b.n	80057f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800576a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800576c:	8bfb      	ldrh	r3, [r7, #30]
 800576e:	429a      	cmp	r2, r3
 8005770:	d21d      	bcs.n	80057ae <HAL_SPI_TransmitReceive+0x226>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d018      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005784:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005786:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800578c:	1d1a      	adds	r2, r3, #4
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057ac:	e023      	b.n	80057f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ae:	f7fc f911 	bl	80019d4 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d803      	bhi.n	80057c6 <HAL_SPI_TransmitReceive+0x23e>
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d102      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x244>
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d114      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fc2f 	bl	8006030 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e1fd      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f47f af67 	bne.w	80056cc <HAL_SPI_TransmitReceive+0x144>
 80057fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005800:	2b00      	cmp	r3, #0
 8005802:	f47f af63 	bne.w	80056cc <HAL_SPI_TransmitReceive+0x144>
 8005806:	e1ce      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	2b07      	cmp	r3, #7
 800580e:	f240 81c2 	bls.w	8005b96 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005818:	e0c9      	b.n	80059ae <HAL_SPI_TransmitReceive+0x426>
 800581a:	bf00      	nop
 800581c:	40013000 	.word	0x40013000
 8005820:	40003800 	.word	0x40003800
 8005824:	40003c00 	.word	0x40003c00
 8005828:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b02      	cmp	r3, #2
 8005838:	d11f      	bne.n	800587a <HAL_SPI_TransmitReceive+0x2f2>
 800583a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01c      	beq.n	800587a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005840:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005842:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005848:	429a      	cmp	r2, r3
 800584a:	d216      	bcs.n	800587a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005878:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005882:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8092 	beq.w	80059ae <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b01      	cmp	r3, #1
 8005896:	d118      	bne.n	80058ca <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	b292      	uxth	r2, r2
 80058a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a8:	1c9a      	adds	r2, r3, #2
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80058c8:	e071      	b.n	80059ae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80058ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80058cc:	8bfb      	ldrh	r3, [r7, #30]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d228      	bcs.n	8005924 <HAL_SPI_TransmitReceive+0x39c>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d023      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	8812      	ldrh	r2, [r2, #0]
 80058e4:	b292      	uxth	r2, r2
 80058e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ec:	1c9a      	adds	r2, r3, #2
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f6:	6a3a      	ldr	r2, [r7, #32]
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	b292      	uxth	r2, r2
 80058fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b02      	subs	r3, #2
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005920:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005922:	e044      	b.n	80059ae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005924:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005926:	2b01      	cmp	r3, #1
 8005928:	d11d      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x3de>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d018      	beq.n	8005966 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	b292      	uxth	r2, r2
 800593e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005962:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005964:	e023      	b.n	80059ae <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005966:	f7fc f835 	bl	80019d4 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005972:	429a      	cmp	r2, r3
 8005974:	d803      	bhi.n	800597e <HAL_SPI_TransmitReceive+0x3f6>
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d102      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x3fc>
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	2b00      	cmp	r3, #0
 8005982:	d114      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fb53 	bl	8006030 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005990:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e121      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80059ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f47f af3b 	bne.w	800582c <HAL_SPI_TransmitReceive+0x2a4>
 80059b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f47f af37 	bne.w	800582c <HAL_SPI_TransmitReceive+0x2a4>
 80059be:	e0f2      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d121      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x48a>
 80059ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01e      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80059d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80059d6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80059dc:	429a      	cmp	r2, r3
 80059de:	d218      	bcs.n	8005a12 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3320      	adds	r3, #32
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a10:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005a1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80ba 	beq.w	8005b96 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d11b      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a3c:	7812      	ldrb	r2, [r2, #0]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a64:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a66:	e096      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005a68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a6a:	8bfb      	ldrh	r3, [r7, #30]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d24a      	bcs.n	8005b06 <HAL_SPI_TransmitReceive+0x57e>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d045      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa2:	7812      	ldrb	r2, [r2, #0]
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005abe:	7812      	ldrb	r2, [r2, #0]
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b04      	subs	r3, #4
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b04:	e047      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005b06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d820      	bhi.n	8005b4e <HAL_SPI_TransmitReceive+0x5c6>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01b      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b4c:	e023      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b4e:	f7fb ff41 	bl	80019d4 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d803      	bhi.n	8005b66 <HAL_SPI_TransmitReceive+0x5de>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d102      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x5e4>
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d114      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fa5f 	bl	8006030 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e02d      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f af11 	bne.w	80059c0 <HAL_SPI_TransmitReceive+0x438>
 8005b9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f47f af0d 	bne.w	80059c0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	2200      	movs	r2, #0
 8005bae:	2108      	movs	r1, #8
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fadd 	bl	8006170 <SPI_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fa2f 	bl	8006030 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3730      	adds	r7, #48	@ 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop

08005bfc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	@ 0x28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005c2e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3330      	adds	r3, #48	@ 0x30
 8005c36:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_SPI_IRQHandler+0x68>
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f9c3 	bl	8005fe8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005c62:	e192      	b.n	8005f8a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d113      	bne.n	8005c96 <HAL_SPI_IRQHandler+0x9a>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10e      	bne.n	8005c96 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
    handled = 1UL;
 8005c92:	2301      	movs	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_SPI_IRQHandler+0xc4>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
    handled = 1UL;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10f      	bne.n	8005cea <HAL_SPI_IRQHandler+0xee>
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3
    handled = 1UL;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f040 8147 	bne.w	8005f80 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 808b 	beq.w	8005e14 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0208 	orr.w	r2, r2, #8
 8005d0c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0210 	orr.w	r2, r2, #16
 8005d1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d2c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0208 	bic.w	r2, r2, #8
 8005d3c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d13d      	bne.n	8005dc8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005d4c:	e036      	b.n	8005dbc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	d90b      	bls.n	8005d6e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d60:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d66:	1d1a      	adds	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	665a      	str	r2, [r3, #100]	@ 0x64
 8005d6c:	e01d      	b.n	8005daa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	2b07      	cmp	r3, #7
 8005d74:	d90b      	bls.n	8005d8e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	8812      	ldrh	r2, [r2, #0]
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	665a      	str	r2, [r3, #100]	@ 0x64
 8005d8c:	e00d      	b.n	8005daa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1c2      	bne.n	8005d4e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f931 	bl	8006030 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8f7 	bl	8005fd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005de6:	e0d0      	b.n	8005f8a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005de8:	7cfb      	ldrb	r3, [r7, #19]
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d103      	bne.n	8005df6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8e6 	bl	8005fc0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005df4:	e0c6      	b.n	8005f84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d103      	bne.n	8005e04 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f8d5 	bl	8005fac <HAL_SPI_RxCpltCallback>
    return;
 8005e02:	e0bf      	b.n	8005f84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	f040 80bc 	bne.w	8005f84 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f8c3 	bl	8005f98 <HAL_SPI_TxCpltCallback>
    return;
 8005e12:	e0b7      	b.n	8005f84 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80b5 	beq.w	8005f8a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00f      	beq.n	8005e4a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e30:	f043 0204 	orr.w	r2, r3, #4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e48:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00f      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e72:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00f      	beq.n	8005e9e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e84:	f043 0208 	orr.w	r2, r3, #8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0220 	orr.w	r2, r2, #32
 8005ec6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d05a      	beq.n	8005f88 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6919      	ldr	r1, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b28      	ldr	r3, [pc, #160]	@ (8005f90 <HAL_SPI_IRQHandler+0x394>)
 8005eee:	400b      	ands	r3, r1
 8005ef0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ef8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005efc:	d138      	bne.n	8005f70 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005f0c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d013      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005f94 <HAL_SPI_IRQHandler+0x398>)
 8005f1c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fb ff1a 	bl	8001d5c <HAL_DMA_Abort_IT>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f4a:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <HAL_SPI_IRQHandler+0x398>)
 8005f4c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fb ff02 	bl	8001d5c <HAL_DMA_Abort_IT>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d014      	beq.n	8005f88 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f6e:	e00b      	b.n	8005f88 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f82b 	bl	8005fd4 <HAL_SPI_ErrorCallback>
    return;
 8005f7e:	e003      	b.n	8005f88 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005f80:	bf00      	nop
 8005f82:	e002      	b.n	8005f8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005f84:	bf00      	nop
 8005f86:	e000      	b.n	8005f8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005f88:	bf00      	nop
  }
}
 8005f8a:	3728      	adds	r7, #40	@ 0x28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	fffffc94 	.word	0xfffffc94
 8005f94:	08005ffd 	.word	0x08005ffd

08005f98 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006008:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ffd6 	bl	8005fd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0208 	orr.w	r2, r2, #8
 800604e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0210 	orr.w	r2, r2, #16
 800605e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6919      	ldr	r1, [r3, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b3c      	ldr	r3, [pc, #240]	@ (800616c <SPI_CloseTransfer+0x13c>)
 800607c:	400b      	ands	r3, r1
 800607e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800608e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b04      	cmp	r3, #4
 800609a:	d014      	beq.n	80060c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00f      	beq.n	80060c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0220 	orr.w	r2, r2, #32
 80060c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d014      	beq.n	80060fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00f      	beq.n	80060fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060e2:	f043 0204 	orr.w	r2, r3, #4
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00f      	beq.n	8006126 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800610c:	f043 0201 	orr.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006124:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00f      	beq.n	8006150 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006136:	f043 0208 	orr.w	r2, r3, #8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800614e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	fffffc90 	.word	0xfffffc90

08006170 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006180:	e010      	b.n	80061a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006182:	f7fb fc27 	bl	80019d4 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d803      	bhi.n	800619a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d102      	bne.n	80061a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e00f      	b.n	80061c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d0df      	beq.n	8006182 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	3307      	adds	r3, #7
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e042      	b.n	800629a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f83b 	bl	80062a2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	@ 0x24
 8006230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fe29 	bl	8006ea4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f8be 	bl	80063d4 <UART_SetConfig>
 8006258:	4603      	mov	r3, r0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e01b      	b.n	800629a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006270:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006280:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fea8 	bl	8006fe8 <UART_CheckIdleState>
 8006298:	4603      	mov	r3, r0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b08a      	sub	sp, #40	@ 0x28
 80062ba:	af02      	add	r7, sp, #8
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d17b      	bne.n	80063c8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_UART_Transmit+0x26>
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e074      	b.n	80063ca <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2221      	movs	r2, #33	@ 0x21
 80062ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f0:	f7fb fb70 	bl	80019d4 <HAL_GetTick>
 80062f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	88fa      	ldrh	r2, [r7, #6]
 80062fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630e:	d108      	bne.n	8006322 <HAL_UART_Transmit+0x6c>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	e003      	b.n	800632a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800632a:	e030      	b.n	800638e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2200      	movs	r2, #0
 8006334:	2180      	movs	r1, #128	@ 0x80
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 ff00 	bl	800713c <UART_WaitOnFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e03d      	b.n	80063ca <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006362:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	3302      	adds	r3, #2
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e007      	b.n	800637c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	781a      	ldrb	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3301      	adds	r3, #1
 800637a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1c8      	bne.n	800632c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	2140      	movs	r1, #64	@ 0x40
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fec9 	bl	800713c <UART_WaitOnFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e006      	b.n	80063ca <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d8:	b092      	sub	sp, #72	@ 0x48
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	431a      	orrs	r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4bbe      	ldr	r3, [pc, #760]	@ (80066fc <UART_SetConfig+0x328>)
 8006404:	4013      	ands	r3, r2
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800640c:	430b      	orrs	r3, r1
 800640e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4ab3      	ldr	r2, [pc, #716]	@ (8006700 <UART_SetConfig+0x32c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800643c:	4313      	orrs	r3, r2
 800643e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	4baf      	ldr	r3, [pc, #700]	@ (8006704 <UART_SetConfig+0x330>)
 8006448:	4013      	ands	r3, r2
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006450:	430b      	orrs	r3, r1
 8006452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645a:	f023 010f 	bic.w	r1, r3, #15
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4aa6      	ldr	r2, [pc, #664]	@ (8006708 <UART_SetConfig+0x334>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d177      	bne.n	8006564 <UART_SetConfig+0x190>
 8006474:	4ba5      	ldr	r3, [pc, #660]	@ (800670c <UART_SetConfig+0x338>)
 8006476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800647c:	2b28      	cmp	r3, #40	@ 0x28
 800647e:	d86d      	bhi.n	800655c <UART_SetConfig+0x188>
 8006480:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <UART_SetConfig+0xb4>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	0800652d 	.word	0x0800652d
 800648c:	0800655d 	.word	0x0800655d
 8006490:	0800655d 	.word	0x0800655d
 8006494:	0800655d 	.word	0x0800655d
 8006498:	0800655d 	.word	0x0800655d
 800649c:	0800655d 	.word	0x0800655d
 80064a0:	0800655d 	.word	0x0800655d
 80064a4:	0800655d 	.word	0x0800655d
 80064a8:	08006535 	.word	0x08006535
 80064ac:	0800655d 	.word	0x0800655d
 80064b0:	0800655d 	.word	0x0800655d
 80064b4:	0800655d 	.word	0x0800655d
 80064b8:	0800655d 	.word	0x0800655d
 80064bc:	0800655d 	.word	0x0800655d
 80064c0:	0800655d 	.word	0x0800655d
 80064c4:	0800655d 	.word	0x0800655d
 80064c8:	0800653d 	.word	0x0800653d
 80064cc:	0800655d 	.word	0x0800655d
 80064d0:	0800655d 	.word	0x0800655d
 80064d4:	0800655d 	.word	0x0800655d
 80064d8:	0800655d 	.word	0x0800655d
 80064dc:	0800655d 	.word	0x0800655d
 80064e0:	0800655d 	.word	0x0800655d
 80064e4:	0800655d 	.word	0x0800655d
 80064e8:	08006545 	.word	0x08006545
 80064ec:	0800655d 	.word	0x0800655d
 80064f0:	0800655d 	.word	0x0800655d
 80064f4:	0800655d 	.word	0x0800655d
 80064f8:	0800655d 	.word	0x0800655d
 80064fc:	0800655d 	.word	0x0800655d
 8006500:	0800655d 	.word	0x0800655d
 8006504:	0800655d 	.word	0x0800655d
 8006508:	0800654d 	.word	0x0800654d
 800650c:	0800655d 	.word	0x0800655d
 8006510:	0800655d 	.word	0x0800655d
 8006514:	0800655d 	.word	0x0800655d
 8006518:	0800655d 	.word	0x0800655d
 800651c:	0800655d 	.word	0x0800655d
 8006520:	0800655d 	.word	0x0800655d
 8006524:	0800655d 	.word	0x0800655d
 8006528:	08006555 	.word	0x08006555
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006532:	e222      	b.n	800697a <UART_SetConfig+0x5a6>
 8006534:	2304      	movs	r3, #4
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e21e      	b.n	800697a <UART_SetConfig+0x5a6>
 800653c:	2308      	movs	r3, #8
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e21a      	b.n	800697a <UART_SetConfig+0x5a6>
 8006544:	2310      	movs	r3, #16
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654a:	e216      	b.n	800697a <UART_SetConfig+0x5a6>
 800654c:	2320      	movs	r3, #32
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006552:	e212      	b.n	800697a <UART_SetConfig+0x5a6>
 8006554:	2340      	movs	r3, #64	@ 0x40
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655a:	e20e      	b.n	800697a <UART_SetConfig+0x5a6>
 800655c:	2380      	movs	r3, #128	@ 0x80
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006562:	e20a      	b.n	800697a <UART_SetConfig+0x5a6>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a69      	ldr	r2, [pc, #420]	@ (8006710 <UART_SetConfig+0x33c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d130      	bne.n	80065d0 <UART_SetConfig+0x1fc>
 800656e:	4b67      	ldr	r3, [pc, #412]	@ (800670c <UART_SetConfig+0x338>)
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	2b05      	cmp	r3, #5
 8006578:	d826      	bhi.n	80065c8 <UART_SetConfig+0x1f4>
 800657a:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <UART_SetConfig+0x1ac>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	08006599 	.word	0x08006599
 8006584:	080065a1 	.word	0x080065a1
 8006588:	080065a9 	.word	0x080065a9
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065b9 	.word	0x080065b9
 8006594:	080065c1 	.word	0x080065c1
 8006598:	2300      	movs	r3, #0
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e1ec      	b.n	800697a <UART_SetConfig+0x5a6>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e1e8      	b.n	800697a <UART_SetConfig+0x5a6>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e1e4      	b.n	800697a <UART_SetConfig+0x5a6>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e1e0      	b.n	800697a <UART_SetConfig+0x5a6>
 80065b8:	2320      	movs	r3, #32
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065be:	e1dc      	b.n	800697a <UART_SetConfig+0x5a6>
 80065c0:	2340      	movs	r3, #64	@ 0x40
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c6:	e1d8      	b.n	800697a <UART_SetConfig+0x5a6>
 80065c8:	2380      	movs	r3, #128	@ 0x80
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ce:	e1d4      	b.n	800697a <UART_SetConfig+0x5a6>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a4f      	ldr	r2, [pc, #316]	@ (8006714 <UART_SetConfig+0x340>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d130      	bne.n	800663c <UART_SetConfig+0x268>
 80065da:	4b4c      	ldr	r3, [pc, #304]	@ (800670c <UART_SetConfig+0x338>)
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d826      	bhi.n	8006634 <UART_SetConfig+0x260>
 80065e6:	a201      	add	r2, pc, #4	@ (adr r2, 80065ec <UART_SetConfig+0x218>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006605 	.word	0x08006605
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	08006615 	.word	0x08006615
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	2300      	movs	r3, #0
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e1b6      	b.n	800697a <UART_SetConfig+0x5a6>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e1b2      	b.n	800697a <UART_SetConfig+0x5a6>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e1ae      	b.n	800697a <UART_SetConfig+0x5a6>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e1aa      	b.n	800697a <UART_SetConfig+0x5a6>
 8006624:	2320      	movs	r3, #32
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662a:	e1a6      	b.n	800697a <UART_SetConfig+0x5a6>
 800662c:	2340      	movs	r3, #64	@ 0x40
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006632:	e1a2      	b.n	800697a <UART_SetConfig+0x5a6>
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663a:	e19e      	b.n	800697a <UART_SetConfig+0x5a6>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a35      	ldr	r2, [pc, #212]	@ (8006718 <UART_SetConfig+0x344>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d130      	bne.n	80066a8 <UART_SetConfig+0x2d4>
 8006646:	4b31      	ldr	r3, [pc, #196]	@ (800670c <UART_SetConfig+0x338>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b05      	cmp	r3, #5
 8006650:	d826      	bhi.n	80066a0 <UART_SetConfig+0x2cc>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0x284>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006671 	.word	0x08006671
 800665c:	08006679 	.word	0x08006679
 8006660:	08006681 	.word	0x08006681
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	2300      	movs	r3, #0
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e180      	b.n	800697a <UART_SetConfig+0x5a6>
 8006678:	2304      	movs	r3, #4
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e17c      	b.n	800697a <UART_SetConfig+0x5a6>
 8006680:	2308      	movs	r3, #8
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e178      	b.n	800697a <UART_SetConfig+0x5a6>
 8006688:	2310      	movs	r3, #16
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e174      	b.n	800697a <UART_SetConfig+0x5a6>
 8006690:	2320      	movs	r3, #32
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006696:	e170      	b.n	800697a <UART_SetConfig+0x5a6>
 8006698:	2340      	movs	r3, #64	@ 0x40
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669e:	e16c      	b.n	800697a <UART_SetConfig+0x5a6>
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a6:	e168      	b.n	800697a <UART_SetConfig+0x5a6>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1b      	ldr	r2, [pc, #108]	@ (800671c <UART_SetConfig+0x348>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d142      	bne.n	8006738 <UART_SetConfig+0x364>
 80066b2:	4b16      	ldr	r3, [pc, #88]	@ (800670c <UART_SetConfig+0x338>)
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d838      	bhi.n	8006730 <UART_SetConfig+0x35c>
 80066be:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <UART_SetConfig+0x2f0>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066dd 	.word	0x080066dd
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	080066ed 	.word	0x080066ed
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	08006721 	.word	0x08006721
 80066d8:	08006729 	.word	0x08006729
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e14a      	b.n	800697a <UART_SetConfig+0x5a6>
 80066e4:	2304      	movs	r3, #4
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e146      	b.n	800697a <UART_SetConfig+0x5a6>
 80066ec:	2308      	movs	r3, #8
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e142      	b.n	800697a <UART_SetConfig+0x5a6>
 80066f4:	2310      	movs	r3, #16
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e13e      	b.n	800697a <UART_SetConfig+0x5a6>
 80066fc:	cfff69f3 	.word	0xcfff69f3
 8006700:	58000c00 	.word	0x58000c00
 8006704:	11fff4ff 	.word	0x11fff4ff
 8006708:	40011000 	.word	0x40011000
 800670c:	58024400 	.word	0x58024400
 8006710:	40004400 	.word	0x40004400
 8006714:	40004800 	.word	0x40004800
 8006718:	40004c00 	.word	0x40004c00
 800671c:	40005000 	.word	0x40005000
 8006720:	2320      	movs	r3, #32
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e128      	b.n	800697a <UART_SetConfig+0x5a6>
 8006728:	2340      	movs	r3, #64	@ 0x40
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e124      	b.n	800697a <UART_SetConfig+0x5a6>
 8006730:	2380      	movs	r3, #128	@ 0x80
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e120      	b.n	800697a <UART_SetConfig+0x5a6>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4acb      	ldr	r2, [pc, #812]	@ (8006a6c <UART_SetConfig+0x698>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d176      	bne.n	8006830 <UART_SetConfig+0x45c>
 8006742:	4bcb      	ldr	r3, [pc, #812]	@ (8006a70 <UART_SetConfig+0x69c>)
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800674a:	2b28      	cmp	r3, #40	@ 0x28
 800674c:	d86c      	bhi.n	8006828 <UART_SetConfig+0x454>
 800674e:	a201      	add	r2, pc, #4	@ (adr r2, 8006754 <UART_SetConfig+0x380>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	080067f9 	.word	0x080067f9
 8006758:	08006829 	.word	0x08006829
 800675c:	08006829 	.word	0x08006829
 8006760:	08006829 	.word	0x08006829
 8006764:	08006829 	.word	0x08006829
 8006768:	08006829 	.word	0x08006829
 800676c:	08006829 	.word	0x08006829
 8006770:	08006829 	.word	0x08006829
 8006774:	08006801 	.word	0x08006801
 8006778:	08006829 	.word	0x08006829
 800677c:	08006829 	.word	0x08006829
 8006780:	08006829 	.word	0x08006829
 8006784:	08006829 	.word	0x08006829
 8006788:	08006829 	.word	0x08006829
 800678c:	08006829 	.word	0x08006829
 8006790:	08006829 	.word	0x08006829
 8006794:	08006809 	.word	0x08006809
 8006798:	08006829 	.word	0x08006829
 800679c:	08006829 	.word	0x08006829
 80067a0:	08006829 	.word	0x08006829
 80067a4:	08006829 	.word	0x08006829
 80067a8:	08006829 	.word	0x08006829
 80067ac:	08006829 	.word	0x08006829
 80067b0:	08006829 	.word	0x08006829
 80067b4:	08006811 	.word	0x08006811
 80067b8:	08006829 	.word	0x08006829
 80067bc:	08006829 	.word	0x08006829
 80067c0:	08006829 	.word	0x08006829
 80067c4:	08006829 	.word	0x08006829
 80067c8:	08006829 	.word	0x08006829
 80067cc:	08006829 	.word	0x08006829
 80067d0:	08006829 	.word	0x08006829
 80067d4:	08006819 	.word	0x08006819
 80067d8:	08006829 	.word	0x08006829
 80067dc:	08006829 	.word	0x08006829
 80067e0:	08006829 	.word	0x08006829
 80067e4:	08006829 	.word	0x08006829
 80067e8:	08006829 	.word	0x08006829
 80067ec:	08006829 	.word	0x08006829
 80067f0:	08006829 	.word	0x08006829
 80067f4:	08006821 	.word	0x08006821
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e0bc      	b.n	800697a <UART_SetConfig+0x5a6>
 8006800:	2304      	movs	r3, #4
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e0b8      	b.n	800697a <UART_SetConfig+0x5a6>
 8006808:	2308      	movs	r3, #8
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e0b4      	b.n	800697a <UART_SetConfig+0x5a6>
 8006810:	2310      	movs	r3, #16
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e0b0      	b.n	800697a <UART_SetConfig+0x5a6>
 8006818:	2320      	movs	r3, #32
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681e:	e0ac      	b.n	800697a <UART_SetConfig+0x5a6>
 8006820:	2340      	movs	r3, #64	@ 0x40
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006826:	e0a8      	b.n	800697a <UART_SetConfig+0x5a6>
 8006828:	2380      	movs	r3, #128	@ 0x80
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e0a4      	b.n	800697a <UART_SetConfig+0x5a6>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a8f      	ldr	r2, [pc, #572]	@ (8006a74 <UART_SetConfig+0x6a0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d130      	bne.n	800689c <UART_SetConfig+0x4c8>
 800683a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a70 <UART_SetConfig+0x69c>)
 800683c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b05      	cmp	r3, #5
 8006844:	d826      	bhi.n	8006894 <UART_SetConfig+0x4c0>
 8006846:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <UART_SetConfig+0x478>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	08006865 	.word	0x08006865
 8006850:	0800686d 	.word	0x0800686d
 8006854:	08006875 	.word	0x08006875
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006885 	.word	0x08006885
 8006860:	0800688d 	.word	0x0800688d
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e086      	b.n	800697a <UART_SetConfig+0x5a6>
 800686c:	2304      	movs	r3, #4
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e082      	b.n	800697a <UART_SetConfig+0x5a6>
 8006874:	2308      	movs	r3, #8
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e07e      	b.n	800697a <UART_SetConfig+0x5a6>
 800687c:	2310      	movs	r3, #16
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e07a      	b.n	800697a <UART_SetConfig+0x5a6>
 8006884:	2320      	movs	r3, #32
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688a:	e076      	b.n	800697a <UART_SetConfig+0x5a6>
 800688c:	2340      	movs	r3, #64	@ 0x40
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006892:	e072      	b.n	800697a <UART_SetConfig+0x5a6>
 8006894:	2380      	movs	r3, #128	@ 0x80
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689a:	e06e      	b.n	800697a <UART_SetConfig+0x5a6>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a75      	ldr	r2, [pc, #468]	@ (8006a78 <UART_SetConfig+0x6a4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d130      	bne.n	8006908 <UART_SetConfig+0x534>
 80068a6:	4b72      	ldr	r3, [pc, #456]	@ (8006a70 <UART_SetConfig+0x69c>)
 80068a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d826      	bhi.n	8006900 <UART_SetConfig+0x52c>
 80068b2:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <UART_SetConfig+0x4e4>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068d1 	.word	0x080068d1
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e050      	b.n	800697a <UART_SetConfig+0x5a6>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e04c      	b.n	800697a <UART_SetConfig+0x5a6>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e048      	b.n	800697a <UART_SetConfig+0x5a6>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ee:	e044      	b.n	800697a <UART_SetConfig+0x5a6>
 80068f0:	2320      	movs	r3, #32
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f6:	e040      	b.n	800697a <UART_SetConfig+0x5a6>
 80068f8:	2340      	movs	r3, #64	@ 0x40
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fe:	e03c      	b.n	800697a <UART_SetConfig+0x5a6>
 8006900:	2380      	movs	r3, #128	@ 0x80
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006906:	e038      	b.n	800697a <UART_SetConfig+0x5a6>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a5b      	ldr	r2, [pc, #364]	@ (8006a7c <UART_SetConfig+0x6a8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d130      	bne.n	8006974 <UART_SetConfig+0x5a0>
 8006912:	4b57      	ldr	r3, [pc, #348]	@ (8006a70 <UART_SetConfig+0x69c>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b05      	cmp	r3, #5
 800691c:	d826      	bhi.n	800696c <UART_SetConfig+0x598>
 800691e:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <UART_SetConfig+0x550>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	0800693d 	.word	0x0800693d
 8006928:	08006945 	.word	0x08006945
 800692c:	0800694d 	.word	0x0800694d
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	2302      	movs	r3, #2
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e01a      	b.n	800697a <UART_SetConfig+0x5a6>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e016      	b.n	800697a <UART_SetConfig+0x5a6>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e012      	b.n	800697a <UART_SetConfig+0x5a6>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695a:	e00e      	b.n	800697a <UART_SetConfig+0x5a6>
 800695c:	2320      	movs	r3, #32
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006962:	e00a      	b.n	800697a <UART_SetConfig+0x5a6>
 8006964:	2340      	movs	r3, #64	@ 0x40
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696a:	e006      	b.n	800697a <UART_SetConfig+0x5a6>
 800696c:	2380      	movs	r3, #128	@ 0x80
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006972:	e002      	b.n	800697a <UART_SetConfig+0x5a6>
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a7c <UART_SetConfig+0x6a8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	f040 80f8 	bne.w	8006b76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006986:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800698a:	2b20      	cmp	r3, #32
 800698c:	dc46      	bgt.n	8006a1c <UART_SetConfig+0x648>
 800698e:	2b02      	cmp	r3, #2
 8006990:	f2c0 8082 	blt.w	8006a98 <UART_SetConfig+0x6c4>
 8006994:	3b02      	subs	r3, #2
 8006996:	2b1e      	cmp	r3, #30
 8006998:	d87e      	bhi.n	8006a98 <UART_SetConfig+0x6c4>
 800699a:	a201      	add	r2, pc, #4	@ (adr r2, 80069a0 <UART_SetConfig+0x5cc>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	08006a23 	.word	0x08006a23
 80069a4:	08006a99 	.word	0x08006a99
 80069a8:	08006a2b 	.word	0x08006a2b
 80069ac:	08006a99 	.word	0x08006a99
 80069b0:	08006a99 	.word	0x08006a99
 80069b4:	08006a99 	.word	0x08006a99
 80069b8:	08006a3b 	.word	0x08006a3b
 80069bc:	08006a99 	.word	0x08006a99
 80069c0:	08006a99 	.word	0x08006a99
 80069c4:	08006a99 	.word	0x08006a99
 80069c8:	08006a99 	.word	0x08006a99
 80069cc:	08006a99 	.word	0x08006a99
 80069d0:	08006a99 	.word	0x08006a99
 80069d4:	08006a99 	.word	0x08006a99
 80069d8:	08006a4b 	.word	0x08006a4b
 80069dc:	08006a99 	.word	0x08006a99
 80069e0:	08006a99 	.word	0x08006a99
 80069e4:	08006a99 	.word	0x08006a99
 80069e8:	08006a99 	.word	0x08006a99
 80069ec:	08006a99 	.word	0x08006a99
 80069f0:	08006a99 	.word	0x08006a99
 80069f4:	08006a99 	.word	0x08006a99
 80069f8:	08006a99 	.word	0x08006a99
 80069fc:	08006a99 	.word	0x08006a99
 8006a00:	08006a99 	.word	0x08006a99
 8006a04:	08006a99 	.word	0x08006a99
 8006a08:	08006a99 	.word	0x08006a99
 8006a0c:	08006a99 	.word	0x08006a99
 8006a10:	08006a99 	.word	0x08006a99
 8006a14:	08006a99 	.word	0x08006a99
 8006a18:	08006a8b 	.word	0x08006a8b
 8006a1c:	2b40      	cmp	r3, #64	@ 0x40
 8006a1e:	d037      	beq.n	8006a90 <UART_SetConfig+0x6bc>
 8006a20:	e03a      	b.n	8006a98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a22:	f7fe f86b 	bl	8004afc <HAL_RCCEx_GetD3PCLK1Freq>
 8006a26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a28:	e03c      	b.n	8006aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe f87a 	bl	8004b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a38:	e034      	b.n	8006aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a3a:	f107 0318 	add.w	r3, r7, #24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe f9c6 	bl	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a48:	e02c      	b.n	8006aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a4a:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <UART_SetConfig+0x69c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d016      	beq.n	8006a84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a56:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <UART_SetConfig+0x69c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	08db      	lsrs	r3, r3, #3
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	4a07      	ldr	r2, [pc, #28]	@ (8006a80 <UART_SetConfig+0x6ac>)
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a68:	e01c      	b.n	8006aa4 <UART_SetConfig+0x6d0>
 8006a6a:	bf00      	nop
 8006a6c:	40011400 	.word	0x40011400
 8006a70:	58024400 	.word	0x58024400
 8006a74:	40007800 	.word	0x40007800
 8006a78:	40007c00 	.word	0x40007c00
 8006a7c:	58000c00 	.word	0x58000c00
 8006a80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006a84:	4b9d      	ldr	r3, [pc, #628]	@ (8006cfc <UART_SetConfig+0x928>)
 8006a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a88:	e00c      	b.n	8006aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a8a:	4b9d      	ldr	r3, [pc, #628]	@ (8006d00 <UART_SetConfig+0x92c>)
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a8e:	e009      	b.n	8006aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a96:	e005      	b.n	8006aa4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006aa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 81de 	beq.w	8006e68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	4a94      	ldr	r2, [pc, #592]	@ (8006d04 <UART_SetConfig+0x930>)
 8006ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006abe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	4413      	add	r3, r2
 8006aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d305      	bcc.n	8006adc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d903      	bls.n	8006ae4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ae2:	e1c1      	b.n	8006e68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	60fa      	str	r2, [r7, #12]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	4a84      	ldr	r2, [pc, #528]	@ (8006d04 <UART_SetConfig+0x930>)
 8006af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2200      	movs	r2, #0
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b06:	f7f9 fc3b 	bl	8000380 <__aeabi_uldivmod>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	020b      	lsls	r3, r1, #8
 8006b1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b20:	0202      	lsls	r2, r0, #8
 8006b22:	6979      	ldr	r1, [r7, #20]
 8006b24:	6849      	ldr	r1, [r1, #4]
 8006b26:	0849      	lsrs	r1, r1, #1
 8006b28:	2000      	movs	r0, #0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	eb12 0804 	adds.w	r8, r2, r4
 8006b32:	eb43 0905 	adc.w	r9, r3, r5
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	469a      	mov	sl, r3
 8006b3e:	4693      	mov	fp, r2
 8006b40:	4652      	mov	r2, sl
 8006b42:	465b      	mov	r3, fp
 8006b44:	4640      	mov	r0, r8
 8006b46:	4649      	mov	r1, r9
 8006b48:	f7f9 fc1a 	bl	8000380 <__aeabi_uldivmod>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4613      	mov	r3, r2
 8006b52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b5a:	d308      	bcc.n	8006b6e <UART_SetConfig+0x79a>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b62:	d204      	bcs.n	8006b6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	e17c      	b.n	8006e68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b74:	e178      	b.n	8006e68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b7e:	f040 80c5 	bne.w	8006d0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006b82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	dc48      	bgt.n	8006c1c <UART_SetConfig+0x848>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	db7b      	blt.n	8006c86 <UART_SetConfig+0x8b2>
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d879      	bhi.n	8006c86 <UART_SetConfig+0x8b2>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <UART_SetConfig+0x7c4>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006c23 	.word	0x08006c23
 8006b9c:	08006c2b 	.word	0x08006c2b
 8006ba0:	08006c87 	.word	0x08006c87
 8006ba4:	08006c87 	.word	0x08006c87
 8006ba8:	08006c33 	.word	0x08006c33
 8006bac:	08006c87 	.word	0x08006c87
 8006bb0:	08006c87 	.word	0x08006c87
 8006bb4:	08006c87 	.word	0x08006c87
 8006bb8:	08006c43 	.word	0x08006c43
 8006bbc:	08006c87 	.word	0x08006c87
 8006bc0:	08006c87 	.word	0x08006c87
 8006bc4:	08006c87 	.word	0x08006c87
 8006bc8:	08006c87 	.word	0x08006c87
 8006bcc:	08006c87 	.word	0x08006c87
 8006bd0:	08006c87 	.word	0x08006c87
 8006bd4:	08006c87 	.word	0x08006c87
 8006bd8:	08006c53 	.word	0x08006c53
 8006bdc:	08006c87 	.word	0x08006c87
 8006be0:	08006c87 	.word	0x08006c87
 8006be4:	08006c87 	.word	0x08006c87
 8006be8:	08006c87 	.word	0x08006c87
 8006bec:	08006c87 	.word	0x08006c87
 8006bf0:	08006c87 	.word	0x08006c87
 8006bf4:	08006c87 	.word	0x08006c87
 8006bf8:	08006c87 	.word	0x08006c87
 8006bfc:	08006c87 	.word	0x08006c87
 8006c00:	08006c87 	.word	0x08006c87
 8006c04:	08006c87 	.word	0x08006c87
 8006c08:	08006c87 	.word	0x08006c87
 8006c0c:	08006c87 	.word	0x08006c87
 8006c10:	08006c87 	.word	0x08006c87
 8006c14:	08006c87 	.word	0x08006c87
 8006c18:	08006c79 	.word	0x08006c79
 8006c1c:	2b40      	cmp	r3, #64	@ 0x40
 8006c1e:	d02e      	beq.n	8006c7e <UART_SetConfig+0x8aa>
 8006c20:	e031      	b.n	8006c86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c22:	f7fc fd35 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8006c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c28:	e033      	b.n	8006c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2a:	f7fc fd47 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8006c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c30:	e02f      	b.n	8006c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd ff76 	bl	8004b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c40:	e027      	b.n	8006c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c42:	f107 0318 	add.w	r3, r7, #24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe f8c2 	bl	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c50:	e01f      	b.n	8006c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c52:	4b2d      	ldr	r3, [pc, #180]	@ (8006d08 <UART_SetConfig+0x934>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d08 <UART_SetConfig+0x934>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	08db      	lsrs	r3, r3, #3
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	4a24      	ldr	r2, [pc, #144]	@ (8006cfc <UART_SetConfig+0x928>)
 8006c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c70:	e00f      	b.n	8006c92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006c72:	4b22      	ldr	r3, [pc, #136]	@ (8006cfc <UART_SetConfig+0x928>)
 8006c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c76:	e00c      	b.n	8006c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c78:	4b21      	ldr	r3, [pc, #132]	@ (8006d00 <UART_SetConfig+0x92c>)
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e009      	b.n	8006c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c84:	e005      	b.n	8006c92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80e7 	beq.w	8006e68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9e:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <UART_SetConfig+0x930>)
 8006ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cac:	005a      	lsls	r2, r3, #1
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	441a      	add	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	d916      	bls.n	8006cf4 <UART_SetConfig+0x920>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ccc:	d212      	bcs.n	8006cf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f023 030f 	bic.w	r3, r3, #15
 8006cd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	e0b9      	b.n	8006e68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006cfa:	e0b5      	b.n	8006e68 <UART_SetConfig+0xa94>
 8006cfc:	03d09000 	.word	0x03d09000
 8006d00:	003d0900 	.word	0x003d0900
 8006d04:	08009f30 	.word	0x08009f30
 8006d08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	dc49      	bgt.n	8006da8 <UART_SetConfig+0x9d4>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	db7c      	blt.n	8006e12 <UART_SetConfig+0xa3e>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d87a      	bhi.n	8006e12 <UART_SetConfig+0xa3e>
 8006d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d24 <UART_SetConfig+0x950>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006daf 	.word	0x08006daf
 8006d28:	08006db7 	.word	0x08006db7
 8006d2c:	08006e13 	.word	0x08006e13
 8006d30:	08006e13 	.word	0x08006e13
 8006d34:	08006dbf 	.word	0x08006dbf
 8006d38:	08006e13 	.word	0x08006e13
 8006d3c:	08006e13 	.word	0x08006e13
 8006d40:	08006e13 	.word	0x08006e13
 8006d44:	08006dcf 	.word	0x08006dcf
 8006d48:	08006e13 	.word	0x08006e13
 8006d4c:	08006e13 	.word	0x08006e13
 8006d50:	08006e13 	.word	0x08006e13
 8006d54:	08006e13 	.word	0x08006e13
 8006d58:	08006e13 	.word	0x08006e13
 8006d5c:	08006e13 	.word	0x08006e13
 8006d60:	08006e13 	.word	0x08006e13
 8006d64:	08006ddf 	.word	0x08006ddf
 8006d68:	08006e13 	.word	0x08006e13
 8006d6c:	08006e13 	.word	0x08006e13
 8006d70:	08006e13 	.word	0x08006e13
 8006d74:	08006e13 	.word	0x08006e13
 8006d78:	08006e13 	.word	0x08006e13
 8006d7c:	08006e13 	.word	0x08006e13
 8006d80:	08006e13 	.word	0x08006e13
 8006d84:	08006e13 	.word	0x08006e13
 8006d88:	08006e13 	.word	0x08006e13
 8006d8c:	08006e13 	.word	0x08006e13
 8006d90:	08006e13 	.word	0x08006e13
 8006d94:	08006e13 	.word	0x08006e13
 8006d98:	08006e13 	.word	0x08006e13
 8006d9c:	08006e13 	.word	0x08006e13
 8006da0:	08006e13 	.word	0x08006e13
 8006da4:	08006e05 	.word	0x08006e05
 8006da8:	2b40      	cmp	r3, #64	@ 0x40
 8006daa:	d02e      	beq.n	8006e0a <UART_SetConfig+0xa36>
 8006dac:	e031      	b.n	8006e12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dae:	f7fc fc6f 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8006db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006db4:	e033      	b.n	8006e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db6:	f7fc fc81 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8006dba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dbc:	e02f      	b.n	8006e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fd feb0 	bl	8004b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dcc:	e027      	b.n	8006e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dce:	f107 0318 	add.w	r3, r7, #24
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fd fffc 	bl	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ddc:	e01f      	b.n	8006e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dde:	4b2d      	ldr	r3, [pc, #180]	@ (8006e94 <UART_SetConfig+0xac0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dea:	4b2a      	ldr	r3, [pc, #168]	@ (8006e94 <UART_SetConfig+0xac0>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	08db      	lsrs	r3, r3, #3
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	4a28      	ldr	r2, [pc, #160]	@ (8006e98 <UART_SetConfig+0xac4>)
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dfc:	e00f      	b.n	8006e1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006dfe:	4b26      	ldr	r3, [pc, #152]	@ (8006e98 <UART_SetConfig+0xac4>)
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e02:	e00c      	b.n	8006e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e04:	4b25      	ldr	r3, [pc, #148]	@ (8006e9c <UART_SetConfig+0xac8>)
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e08:	e009      	b.n	8006e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e10:	e005      	b.n	8006e1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d021      	beq.n	8006e68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea0 <UART_SetConfig+0xacc>)
 8006e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	085b      	lsrs	r3, r3, #1
 8006e3c:	441a      	add	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	2b0f      	cmp	r3, #15
 8006e4c:	d909      	bls.n	8006e62 <UART_SetConfig+0xa8e>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e54:	d205      	bcs.n	8006e62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	e002      	b.n	8006e68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2200      	movs	r2, #0
 8006e82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3748      	adds	r7, #72	@ 0x48
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	58024400 	.word	0x58024400
 8006e98:	03d09000 	.word	0x03d09000
 8006e9c:	003d0900 	.word	0x003d0900
 8006ea0:	08009f30 	.word	0x08009f30

08006ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01a      	beq.n	8006fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa2:	d10a      	bne.n	8006fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]
  }
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b098      	sub	sp, #96	@ 0x60
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff8:	f7fa fcec 	bl	80019d4 <HAL_GetTick>
 8006ffc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b08      	cmp	r3, #8
 800700a:	d12f      	bne.n	800706c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800700c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007014:	2200      	movs	r2, #0
 8007016:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f88e 	bl	800713c <UART_WaitOnFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d022      	beq.n	800706c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800703a:	653b      	str	r3, [r7, #80]	@ 0x50
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007044:	647b      	str	r3, [r7, #68]	@ 0x44
 8007046:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800704a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e063      	b.n	8007134 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b04      	cmp	r3, #4
 8007078:	d149      	bne.n	800710e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800707a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007082:	2200      	movs	r2, #0
 8007084:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f857 	bl	800713c <UART_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d03c      	beq.n	800710e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	623b      	str	r3, [r7, #32]
   return(result);
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80070b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e6      	bne.n	8007094 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	69b9      	ldr	r1, [r7, #24]
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	617b      	str	r3, [r7, #20]
   return(result);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e012      	b.n	8007134 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3758      	adds	r7, #88	@ 0x58
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	4613      	mov	r3, r2
 800714a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800714c:	e04f      	b.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d04b      	beq.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fa fc3d 	bl	80019d4 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <UART_WaitOnFlagUntilTimeout+0x30>
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e04e      	b.n	800720e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d037      	beq.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b80      	cmp	r3, #128	@ 0x80
 8007182:	d034      	beq.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b40      	cmp	r3, #64	@ 0x40
 8007188:	d031      	beq.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b08      	cmp	r3, #8
 8007196:	d110      	bne.n	80071ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2208      	movs	r2, #8
 800719e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f839 	bl	8007218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2208      	movs	r2, #8
 80071aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e029      	b.n	800720e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071c8:	d111      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f81f 	bl	8007218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e00f      	b.n	800720e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4013      	ands	r3, r2
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	bf0c      	ite	eq
 80071fe:	2301      	moveq	r3, #1
 8007200:	2300      	movne	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	429a      	cmp	r2, r3
 800720a:	d0a0      	beq.n	800714e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b095      	sub	sp, #84	@ 0x54
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007240:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e6      	bne.n	8007220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	61fb      	str	r3, [r7, #28]
   return(result);
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	4b1e      	ldr	r3, [pc, #120]	@ (80072e0 <UART_EndRxTransfer+0xc8>)
 8007266:	4013      	ands	r3, r2
 8007268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e5      	bne.n	8007252 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d118      	bne.n	80072c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	60bb      	str	r3, [r7, #8]
   return(result);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f023 0310 	bic.w	r3, r3, #16
 80072a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6979      	ldr	r1, [r7, #20]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e6      	bne.n	800728e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072d4:	bf00      	nop
 80072d6:	3754      	adds	r7, #84	@ 0x54
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	effffffe 	.word	0xeffffffe

080072e4 <std>:
 80072e4:	2300      	movs	r3, #0
 80072e6:	b510      	push	{r4, lr}
 80072e8:	4604      	mov	r4, r0
 80072ea:	e9c0 3300 	strd	r3, r3, [r0]
 80072ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072f2:	6083      	str	r3, [r0, #8]
 80072f4:	8181      	strh	r1, [r0, #12]
 80072f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80072f8:	81c2      	strh	r2, [r0, #14]
 80072fa:	6183      	str	r3, [r0, #24]
 80072fc:	4619      	mov	r1, r3
 80072fe:	2208      	movs	r2, #8
 8007300:	305c      	adds	r0, #92	@ 0x5c
 8007302:	f000 f906 	bl	8007512 <memset>
 8007306:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <std+0x58>)
 8007308:	6263      	str	r3, [r4, #36]	@ 0x24
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <std+0x5c>)
 800730c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800730e:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <std+0x60>)
 8007310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007312:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <std+0x64>)
 8007314:	6323      	str	r3, [r4, #48]	@ 0x30
 8007316:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <std+0x68>)
 8007318:	6224      	str	r4, [r4, #32]
 800731a:	429c      	cmp	r4, r3
 800731c:	d006      	beq.n	800732c <std+0x48>
 800731e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007322:	4294      	cmp	r4, r2
 8007324:	d002      	beq.n	800732c <std+0x48>
 8007326:	33d0      	adds	r3, #208	@ 0xd0
 8007328:	429c      	cmp	r4, r3
 800732a:	d105      	bne.n	8007338 <std+0x54>
 800732c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007334:	f000 b966 	b.w	8007604 <__retarget_lock_init_recursive>
 8007338:	bd10      	pop	{r4, pc}
 800733a:	bf00      	nop
 800733c:	0800748d 	.word	0x0800748d
 8007340:	080074af 	.word	0x080074af
 8007344:	080074e7 	.word	0x080074e7
 8007348:	0800750b 	.word	0x0800750b
 800734c:	240001e8 	.word	0x240001e8

08007350 <stdio_exit_handler>:
 8007350:	4a02      	ldr	r2, [pc, #8]	@ (800735c <stdio_exit_handler+0xc>)
 8007352:	4903      	ldr	r1, [pc, #12]	@ (8007360 <stdio_exit_handler+0x10>)
 8007354:	4803      	ldr	r0, [pc, #12]	@ (8007364 <stdio_exit_handler+0x14>)
 8007356:	f000 b869 	b.w	800742c <_fwalk_sglue>
 800735a:	bf00      	nop
 800735c:	2400002c 	.word	0x2400002c
 8007360:	08007ea1 	.word	0x08007ea1
 8007364:	2400003c 	.word	0x2400003c

08007368 <cleanup_stdio>:
 8007368:	6841      	ldr	r1, [r0, #4]
 800736a:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <cleanup_stdio+0x34>)
 800736c:	4299      	cmp	r1, r3
 800736e:	b510      	push	{r4, lr}
 8007370:	4604      	mov	r4, r0
 8007372:	d001      	beq.n	8007378 <cleanup_stdio+0x10>
 8007374:	f000 fd94 	bl	8007ea0 <_fflush_r>
 8007378:	68a1      	ldr	r1, [r4, #8]
 800737a:	4b09      	ldr	r3, [pc, #36]	@ (80073a0 <cleanup_stdio+0x38>)
 800737c:	4299      	cmp	r1, r3
 800737e:	d002      	beq.n	8007386 <cleanup_stdio+0x1e>
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fd8d 	bl	8007ea0 <_fflush_r>
 8007386:	68e1      	ldr	r1, [r4, #12]
 8007388:	4b06      	ldr	r3, [pc, #24]	@ (80073a4 <cleanup_stdio+0x3c>)
 800738a:	4299      	cmp	r1, r3
 800738c:	d004      	beq.n	8007398 <cleanup_stdio+0x30>
 800738e:	4620      	mov	r0, r4
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f000 bd84 	b.w	8007ea0 <_fflush_r>
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop
 800739c:	240001e8 	.word	0x240001e8
 80073a0:	24000250 	.word	0x24000250
 80073a4:	240002b8 	.word	0x240002b8

080073a8 <global_stdio_init.part.0>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <global_stdio_init.part.0+0x30>)
 80073ac:	4c0b      	ldr	r4, [pc, #44]	@ (80073dc <global_stdio_init.part.0+0x34>)
 80073ae:	4a0c      	ldr	r2, [pc, #48]	@ (80073e0 <global_stdio_init.part.0+0x38>)
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	4620      	mov	r0, r4
 80073b4:	2200      	movs	r2, #0
 80073b6:	2104      	movs	r1, #4
 80073b8:	f7ff ff94 	bl	80072e4 <std>
 80073bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073c0:	2201      	movs	r2, #1
 80073c2:	2109      	movs	r1, #9
 80073c4:	f7ff ff8e 	bl	80072e4 <std>
 80073c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073cc:	2202      	movs	r2, #2
 80073ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d2:	2112      	movs	r1, #18
 80073d4:	f7ff bf86 	b.w	80072e4 <std>
 80073d8:	24000320 	.word	0x24000320
 80073dc:	240001e8 	.word	0x240001e8
 80073e0:	08007351 	.word	0x08007351

080073e4 <__sfp_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	@ (80073ec <__sfp_lock_acquire+0x8>)
 80073e6:	f000 b90e 	b.w	8007606 <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	24000329 	.word	0x24000329

080073f0 <__sfp_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	@ (80073f8 <__sfp_lock_release+0x8>)
 80073f2:	f000 b909 	b.w	8007608 <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	24000329 	.word	0x24000329

080073fc <__sinit>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4604      	mov	r4, r0
 8007400:	f7ff fff0 	bl	80073e4 <__sfp_lock_acquire>
 8007404:	6a23      	ldr	r3, [r4, #32]
 8007406:	b11b      	cbz	r3, 8007410 <__sinit+0x14>
 8007408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740c:	f7ff bff0 	b.w	80073f0 <__sfp_lock_release>
 8007410:	4b04      	ldr	r3, [pc, #16]	@ (8007424 <__sinit+0x28>)
 8007412:	6223      	str	r3, [r4, #32]
 8007414:	4b04      	ldr	r3, [pc, #16]	@ (8007428 <__sinit+0x2c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f5      	bne.n	8007408 <__sinit+0xc>
 800741c:	f7ff ffc4 	bl	80073a8 <global_stdio_init.part.0>
 8007420:	e7f2      	b.n	8007408 <__sinit+0xc>
 8007422:	bf00      	nop
 8007424:	08007369 	.word	0x08007369
 8007428:	24000320 	.word	0x24000320

0800742c <_fwalk_sglue>:
 800742c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007430:	4607      	mov	r7, r0
 8007432:	4688      	mov	r8, r1
 8007434:	4614      	mov	r4, r2
 8007436:	2600      	movs	r6, #0
 8007438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800743c:	f1b9 0901 	subs.w	r9, r9, #1
 8007440:	d505      	bpl.n	800744e <_fwalk_sglue+0x22>
 8007442:	6824      	ldr	r4, [r4, #0]
 8007444:	2c00      	cmp	r4, #0
 8007446:	d1f7      	bne.n	8007438 <_fwalk_sglue+0xc>
 8007448:	4630      	mov	r0, r6
 800744a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d907      	bls.n	8007464 <_fwalk_sglue+0x38>
 8007454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007458:	3301      	adds	r3, #1
 800745a:	d003      	beq.n	8007464 <_fwalk_sglue+0x38>
 800745c:	4629      	mov	r1, r5
 800745e:	4638      	mov	r0, r7
 8007460:	47c0      	blx	r8
 8007462:	4306      	orrs	r6, r0
 8007464:	3568      	adds	r5, #104	@ 0x68
 8007466:	e7e9      	b.n	800743c <_fwalk_sglue+0x10>

08007468 <iprintf>:
 8007468:	b40f      	push	{r0, r1, r2, r3}
 800746a:	b507      	push	{r0, r1, r2, lr}
 800746c:	4906      	ldr	r1, [pc, #24]	@ (8007488 <iprintf+0x20>)
 800746e:	ab04      	add	r3, sp, #16
 8007470:	6808      	ldr	r0, [r1, #0]
 8007472:	f853 2b04 	ldr.w	r2, [r3], #4
 8007476:	6881      	ldr	r1, [r0, #8]
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	f000 f9e9 	bl	8007850 <_vfiprintf_r>
 800747e:	b003      	add	sp, #12
 8007480:	f85d eb04 	ldr.w	lr, [sp], #4
 8007484:	b004      	add	sp, #16
 8007486:	4770      	bx	lr
 8007488:	24000038 	.word	0x24000038

0800748c <__sread>:
 800748c:	b510      	push	{r4, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	f000 f868 	bl	8007568 <_read_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	bfab      	itete	ge
 800749c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800749e:	89a3      	ldrhlt	r3, [r4, #12]
 80074a0:	181b      	addge	r3, r3, r0
 80074a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074a6:	bfac      	ite	ge
 80074a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074aa:	81a3      	strhlt	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__swrite>:
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	461f      	mov	r7, r3
 80074b4:	898b      	ldrh	r3, [r1, #12]
 80074b6:	05db      	lsls	r3, r3, #23
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4616      	mov	r6, r2
 80074be:	d505      	bpl.n	80074cc <__swrite+0x1e>
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	2302      	movs	r3, #2
 80074c6:	2200      	movs	r2, #0
 80074c8:	f000 f83c 	bl	8007544 <_lseek_r>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	4628      	mov	r0, r5
 80074de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	f000 b853 	b.w	800758c <_write_r>

080074e6 <__sseek>:
 80074e6:	b510      	push	{r4, lr}
 80074e8:	460c      	mov	r4, r1
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 f829 	bl	8007544 <_lseek_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	bf15      	itete	ne
 80074f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007502:	81a3      	strheq	r3, [r4, #12]
 8007504:	bf18      	it	ne
 8007506:	81a3      	strhne	r3, [r4, #12]
 8007508:	bd10      	pop	{r4, pc}

0800750a <__sclose>:
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 b809 	b.w	8007524 <_close_r>

08007512 <memset>:
 8007512:	4402      	add	r2, r0
 8007514:	4603      	mov	r3, r0
 8007516:	4293      	cmp	r3, r2
 8007518:	d100      	bne.n	800751c <memset+0xa>
 800751a:	4770      	bx	lr
 800751c:	f803 1b01 	strb.w	r1, [r3], #1
 8007520:	e7f9      	b.n	8007516 <memset+0x4>
	...

08007524 <_close_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d06      	ldr	r5, [pc, #24]	@ (8007540 <_close_r+0x1c>)
 8007528:	2300      	movs	r3, #0
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	f7f9 fe26 	bl	8001180 <_close>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d102      	bne.n	800753e <_close_r+0x1a>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	b103      	cbz	r3, 800753e <_close_r+0x1a>
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	24000324 	.word	0x24000324

08007544 <_lseek_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d07      	ldr	r5, [pc, #28]	@ (8007564 <_lseek_r+0x20>)
 8007548:	4604      	mov	r4, r0
 800754a:	4608      	mov	r0, r1
 800754c:	4611      	mov	r1, r2
 800754e:	2200      	movs	r2, #0
 8007550:	602a      	str	r2, [r5, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	f7f9 fe3b 	bl	80011ce <_lseek>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_lseek_r+0x1e>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	b103      	cbz	r3, 8007562 <_lseek_r+0x1e>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	24000324 	.word	0x24000324

08007568 <_read_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d07      	ldr	r5, [pc, #28]	@ (8007588 <_read_r+0x20>)
 800756c:	4604      	mov	r4, r0
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	2200      	movs	r2, #0
 8007574:	602a      	str	r2, [r5, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7f9 fdc9 	bl	800110e <_read>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_read_r+0x1e>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_read_r+0x1e>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	24000324 	.word	0x24000324

0800758c <_write_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d07      	ldr	r5, [pc, #28]	@ (80075ac <_write_r+0x20>)
 8007590:	4604      	mov	r4, r0
 8007592:	4608      	mov	r0, r1
 8007594:	4611      	mov	r1, r2
 8007596:	2200      	movs	r2, #0
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7f9 fdd4 	bl	8001148 <_write>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_write_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_write_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	24000324 	.word	0x24000324

080075b0 <__errno>:
 80075b0:	4b01      	ldr	r3, [pc, #4]	@ (80075b8 <__errno+0x8>)
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	24000038 	.word	0x24000038

080075bc <__libc_init_array>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	4d0d      	ldr	r5, [pc, #52]	@ (80075f4 <__libc_init_array+0x38>)
 80075c0:	4c0d      	ldr	r4, [pc, #52]	@ (80075f8 <__libc_init_array+0x3c>)
 80075c2:	1b64      	subs	r4, r4, r5
 80075c4:	10a4      	asrs	r4, r4, #2
 80075c6:	2600      	movs	r6, #0
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	d109      	bne.n	80075e0 <__libc_init_array+0x24>
 80075cc:	4d0b      	ldr	r5, [pc, #44]	@ (80075fc <__libc_init_array+0x40>)
 80075ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007600 <__libc_init_array+0x44>)
 80075d0:	f000 fdb6 	bl	8008140 <_init>
 80075d4:	1b64      	subs	r4, r4, r5
 80075d6:	10a4      	asrs	r4, r4, #2
 80075d8:	2600      	movs	r6, #0
 80075da:	42a6      	cmp	r6, r4
 80075dc:	d105      	bne.n	80075ea <__libc_init_array+0x2e>
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e4:	4798      	blx	r3
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7ee      	b.n	80075c8 <__libc_init_array+0xc>
 80075ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ee:	4798      	blx	r3
 80075f0:	3601      	adds	r6, #1
 80075f2:	e7f2      	b.n	80075da <__libc_init_array+0x1e>
 80075f4:	08009f84 	.word	0x08009f84
 80075f8:	08009f84 	.word	0x08009f84
 80075fc:	08009f84 	.word	0x08009f84
 8007600:	08009f88 	.word	0x08009f88

08007604 <__retarget_lock_init_recursive>:
 8007604:	4770      	bx	lr

08007606 <__retarget_lock_acquire_recursive>:
 8007606:	4770      	bx	lr

08007608 <__retarget_lock_release_recursive>:
 8007608:	4770      	bx	lr
	...

0800760c <_free_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4605      	mov	r5, r0
 8007610:	2900      	cmp	r1, #0
 8007612:	d041      	beq.n	8007698 <_free_r+0x8c>
 8007614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007618:	1f0c      	subs	r4, r1, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	bfb8      	it	lt
 800761e:	18e4      	addlt	r4, r4, r3
 8007620:	f000 f8e0 	bl	80077e4 <__malloc_lock>
 8007624:	4a1d      	ldr	r2, [pc, #116]	@ (800769c <_free_r+0x90>)
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	b933      	cbnz	r3, 8007638 <_free_r+0x2c>
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	6014      	str	r4, [r2, #0]
 800762e:	4628      	mov	r0, r5
 8007630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007634:	f000 b8dc 	b.w	80077f0 <__malloc_unlock>
 8007638:	42a3      	cmp	r3, r4
 800763a:	d908      	bls.n	800764e <_free_r+0x42>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	1821      	adds	r1, r4, r0
 8007640:	428b      	cmp	r3, r1
 8007642:	bf01      	itttt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	1809      	addeq	r1, r1, r0
 800764a:	6021      	streq	r1, [r4, #0]
 800764c:	e7ed      	b.n	800762a <_free_r+0x1e>
 800764e:	461a      	mov	r2, r3
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	b10b      	cbz	r3, 8007658 <_free_r+0x4c>
 8007654:	42a3      	cmp	r3, r4
 8007656:	d9fa      	bls.n	800764e <_free_r+0x42>
 8007658:	6811      	ldr	r1, [r2, #0]
 800765a:	1850      	adds	r0, r2, r1
 800765c:	42a0      	cmp	r0, r4
 800765e:	d10b      	bne.n	8007678 <_free_r+0x6c>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	4401      	add	r1, r0
 8007664:	1850      	adds	r0, r2, r1
 8007666:	4283      	cmp	r3, r0
 8007668:	6011      	str	r1, [r2, #0]
 800766a:	d1e0      	bne.n	800762e <_free_r+0x22>
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	6053      	str	r3, [r2, #4]
 8007672:	4408      	add	r0, r1
 8007674:	6010      	str	r0, [r2, #0]
 8007676:	e7da      	b.n	800762e <_free_r+0x22>
 8007678:	d902      	bls.n	8007680 <_free_r+0x74>
 800767a:	230c      	movs	r3, #12
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	e7d6      	b.n	800762e <_free_r+0x22>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	1821      	adds	r1, r4, r0
 8007684:	428b      	cmp	r3, r1
 8007686:	bf04      	itt	eq
 8007688:	6819      	ldreq	r1, [r3, #0]
 800768a:	685b      	ldreq	r3, [r3, #4]
 800768c:	6063      	str	r3, [r4, #4]
 800768e:	bf04      	itt	eq
 8007690:	1809      	addeq	r1, r1, r0
 8007692:	6021      	streq	r1, [r4, #0]
 8007694:	6054      	str	r4, [r2, #4]
 8007696:	e7ca      	b.n	800762e <_free_r+0x22>
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	bf00      	nop
 800769c:	24000330 	.word	0x24000330

080076a0 <sbrk_aligned>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	4e0f      	ldr	r6, [pc, #60]	@ (80076e0 <sbrk_aligned+0x40>)
 80076a4:	460c      	mov	r4, r1
 80076a6:	6831      	ldr	r1, [r6, #0]
 80076a8:	4605      	mov	r5, r0
 80076aa:	b911      	cbnz	r1, 80076b2 <sbrk_aligned+0x12>
 80076ac:	f000 fcb4 	bl	8008018 <_sbrk_r>
 80076b0:	6030      	str	r0, [r6, #0]
 80076b2:	4621      	mov	r1, r4
 80076b4:	4628      	mov	r0, r5
 80076b6:	f000 fcaf 	bl	8008018 <_sbrk_r>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d103      	bne.n	80076c6 <sbrk_aligned+0x26>
 80076be:	f04f 34ff 	mov.w	r4, #4294967295
 80076c2:	4620      	mov	r0, r4
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	1cc4      	adds	r4, r0, #3
 80076c8:	f024 0403 	bic.w	r4, r4, #3
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d0f8      	beq.n	80076c2 <sbrk_aligned+0x22>
 80076d0:	1a21      	subs	r1, r4, r0
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 fca0 	bl	8008018 <_sbrk_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	d1f2      	bne.n	80076c2 <sbrk_aligned+0x22>
 80076dc:	e7ef      	b.n	80076be <sbrk_aligned+0x1e>
 80076de:	bf00      	nop
 80076e0:	2400032c 	.word	0x2400032c

080076e4 <_malloc_r>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	1ccd      	adds	r5, r1, #3
 80076ea:	f025 0503 	bic.w	r5, r5, #3
 80076ee:	3508      	adds	r5, #8
 80076f0:	2d0c      	cmp	r5, #12
 80076f2:	bf38      	it	cc
 80076f4:	250c      	movcc	r5, #12
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	4606      	mov	r6, r0
 80076fa:	db01      	blt.n	8007700 <_malloc_r+0x1c>
 80076fc:	42a9      	cmp	r1, r5
 80076fe:	d904      	bls.n	800770a <_malloc_r+0x26>
 8007700:	230c      	movs	r3, #12
 8007702:	6033      	str	r3, [r6, #0]
 8007704:	2000      	movs	r0, #0
 8007706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800770a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077e0 <_malloc_r+0xfc>
 800770e:	f000 f869 	bl	80077e4 <__malloc_lock>
 8007712:	f8d8 3000 	ldr.w	r3, [r8]
 8007716:	461c      	mov	r4, r3
 8007718:	bb44      	cbnz	r4, 800776c <_malloc_r+0x88>
 800771a:	4629      	mov	r1, r5
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff ffbf 	bl	80076a0 <sbrk_aligned>
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	4604      	mov	r4, r0
 8007726:	d158      	bne.n	80077da <_malloc_r+0xf6>
 8007728:	f8d8 4000 	ldr.w	r4, [r8]
 800772c:	4627      	mov	r7, r4
 800772e:	2f00      	cmp	r7, #0
 8007730:	d143      	bne.n	80077ba <_malloc_r+0xd6>
 8007732:	2c00      	cmp	r4, #0
 8007734:	d04b      	beq.n	80077ce <_malloc_r+0xea>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	4639      	mov	r1, r7
 800773a:	4630      	mov	r0, r6
 800773c:	eb04 0903 	add.w	r9, r4, r3
 8007740:	f000 fc6a 	bl	8008018 <_sbrk_r>
 8007744:	4581      	cmp	r9, r0
 8007746:	d142      	bne.n	80077ce <_malloc_r+0xea>
 8007748:	6821      	ldr	r1, [r4, #0]
 800774a:	1a6d      	subs	r5, r5, r1
 800774c:	4629      	mov	r1, r5
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ffa6 	bl	80076a0 <sbrk_aligned>
 8007754:	3001      	adds	r0, #1
 8007756:	d03a      	beq.n	80077ce <_malloc_r+0xea>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	442b      	add	r3, r5
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	f8d8 3000 	ldr.w	r3, [r8]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	bb62      	cbnz	r2, 80077c0 <_malloc_r+0xdc>
 8007766:	f8c8 7000 	str.w	r7, [r8]
 800776a:	e00f      	b.n	800778c <_malloc_r+0xa8>
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	1b52      	subs	r2, r2, r5
 8007770:	d420      	bmi.n	80077b4 <_malloc_r+0xd0>
 8007772:	2a0b      	cmp	r2, #11
 8007774:	d917      	bls.n	80077a6 <_malloc_r+0xc2>
 8007776:	1961      	adds	r1, r4, r5
 8007778:	42a3      	cmp	r3, r4
 800777a:	6025      	str	r5, [r4, #0]
 800777c:	bf18      	it	ne
 800777e:	6059      	strne	r1, [r3, #4]
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	bf08      	it	eq
 8007784:	f8c8 1000 	streq.w	r1, [r8]
 8007788:	5162      	str	r2, [r4, r5]
 800778a:	604b      	str	r3, [r1, #4]
 800778c:	4630      	mov	r0, r6
 800778e:	f000 f82f 	bl	80077f0 <__malloc_unlock>
 8007792:	f104 000b 	add.w	r0, r4, #11
 8007796:	1d23      	adds	r3, r4, #4
 8007798:	f020 0007 	bic.w	r0, r0, #7
 800779c:	1ac2      	subs	r2, r0, r3
 800779e:	bf1c      	itt	ne
 80077a0:	1a1b      	subne	r3, r3, r0
 80077a2:	50a3      	strne	r3, [r4, r2]
 80077a4:	e7af      	b.n	8007706 <_malloc_r+0x22>
 80077a6:	6862      	ldr	r2, [r4, #4]
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	bf0c      	ite	eq
 80077ac:	f8c8 2000 	streq.w	r2, [r8]
 80077b0:	605a      	strne	r2, [r3, #4]
 80077b2:	e7eb      	b.n	800778c <_malloc_r+0xa8>
 80077b4:	4623      	mov	r3, r4
 80077b6:	6864      	ldr	r4, [r4, #4]
 80077b8:	e7ae      	b.n	8007718 <_malloc_r+0x34>
 80077ba:	463c      	mov	r4, r7
 80077bc:	687f      	ldr	r7, [r7, #4]
 80077be:	e7b6      	b.n	800772e <_malloc_r+0x4a>
 80077c0:	461a      	mov	r2, r3
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d1fb      	bne.n	80077c0 <_malloc_r+0xdc>
 80077c8:	2300      	movs	r3, #0
 80077ca:	6053      	str	r3, [r2, #4]
 80077cc:	e7de      	b.n	800778c <_malloc_r+0xa8>
 80077ce:	230c      	movs	r3, #12
 80077d0:	6033      	str	r3, [r6, #0]
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f80c 	bl	80077f0 <__malloc_unlock>
 80077d8:	e794      	b.n	8007704 <_malloc_r+0x20>
 80077da:	6005      	str	r5, [r0, #0]
 80077dc:	e7d6      	b.n	800778c <_malloc_r+0xa8>
 80077de:	bf00      	nop
 80077e0:	24000330 	.word	0x24000330

080077e4 <__malloc_lock>:
 80077e4:	4801      	ldr	r0, [pc, #4]	@ (80077ec <__malloc_lock+0x8>)
 80077e6:	f7ff bf0e 	b.w	8007606 <__retarget_lock_acquire_recursive>
 80077ea:	bf00      	nop
 80077ec:	24000328 	.word	0x24000328

080077f0 <__malloc_unlock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	@ (80077f8 <__malloc_unlock+0x8>)
 80077f2:	f7ff bf09 	b.w	8007608 <__retarget_lock_release_recursive>
 80077f6:	bf00      	nop
 80077f8:	24000328 	.word	0x24000328

080077fc <__sfputc_r>:
 80077fc:	6893      	ldr	r3, [r2, #8]
 80077fe:	3b01      	subs	r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	b410      	push	{r4}
 8007804:	6093      	str	r3, [r2, #8]
 8007806:	da08      	bge.n	800781a <__sfputc_r+0x1e>
 8007808:	6994      	ldr	r4, [r2, #24]
 800780a:	42a3      	cmp	r3, r4
 800780c:	db01      	blt.n	8007812 <__sfputc_r+0x16>
 800780e:	290a      	cmp	r1, #10
 8007810:	d103      	bne.n	800781a <__sfputc_r+0x1e>
 8007812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007816:	f000 bb6b 	b.w	8007ef0 <__swbuf_r>
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	1c58      	adds	r0, r3, #1
 800781e:	6010      	str	r0, [r2, #0]
 8007820:	7019      	strb	r1, [r3, #0]
 8007822:	4608      	mov	r0, r1
 8007824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007828:	4770      	bx	lr

0800782a <__sfputs_r>:
 800782a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782c:	4606      	mov	r6, r0
 800782e:	460f      	mov	r7, r1
 8007830:	4614      	mov	r4, r2
 8007832:	18d5      	adds	r5, r2, r3
 8007834:	42ac      	cmp	r4, r5
 8007836:	d101      	bne.n	800783c <__sfputs_r+0x12>
 8007838:	2000      	movs	r0, #0
 800783a:	e007      	b.n	800784c <__sfputs_r+0x22>
 800783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007840:	463a      	mov	r2, r7
 8007842:	4630      	mov	r0, r6
 8007844:	f7ff ffda 	bl	80077fc <__sfputc_r>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d1f3      	bne.n	8007834 <__sfputs_r+0xa>
 800784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007850 <_vfiprintf_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	460d      	mov	r5, r1
 8007856:	b09d      	sub	sp, #116	@ 0x74
 8007858:	4614      	mov	r4, r2
 800785a:	4698      	mov	r8, r3
 800785c:	4606      	mov	r6, r0
 800785e:	b118      	cbz	r0, 8007868 <_vfiprintf_r+0x18>
 8007860:	6a03      	ldr	r3, [r0, #32]
 8007862:	b90b      	cbnz	r3, 8007868 <_vfiprintf_r+0x18>
 8007864:	f7ff fdca 	bl	80073fc <__sinit>
 8007868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800786a:	07d9      	lsls	r1, r3, #31
 800786c:	d405      	bmi.n	800787a <_vfiprintf_r+0x2a>
 800786e:	89ab      	ldrh	r3, [r5, #12]
 8007870:	059a      	lsls	r2, r3, #22
 8007872:	d402      	bmi.n	800787a <_vfiprintf_r+0x2a>
 8007874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007876:	f7ff fec6 	bl	8007606 <__retarget_lock_acquire_recursive>
 800787a:	89ab      	ldrh	r3, [r5, #12]
 800787c:	071b      	lsls	r3, r3, #28
 800787e:	d501      	bpl.n	8007884 <_vfiprintf_r+0x34>
 8007880:	692b      	ldr	r3, [r5, #16]
 8007882:	b99b      	cbnz	r3, 80078ac <_vfiprintf_r+0x5c>
 8007884:	4629      	mov	r1, r5
 8007886:	4630      	mov	r0, r6
 8007888:	f000 fb70 	bl	8007f6c <__swsetup_r>
 800788c:	b170      	cbz	r0, 80078ac <_vfiprintf_r+0x5c>
 800788e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007890:	07dc      	lsls	r4, r3, #31
 8007892:	d504      	bpl.n	800789e <_vfiprintf_r+0x4e>
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	b01d      	add	sp, #116	@ 0x74
 800789a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789e:	89ab      	ldrh	r3, [r5, #12]
 80078a0:	0598      	lsls	r0, r3, #22
 80078a2:	d4f7      	bmi.n	8007894 <_vfiprintf_r+0x44>
 80078a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078a6:	f7ff feaf 	bl	8007608 <__retarget_lock_release_recursive>
 80078aa:	e7f3      	b.n	8007894 <_vfiprintf_r+0x44>
 80078ac:	2300      	movs	r3, #0
 80078ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b0:	2320      	movs	r3, #32
 80078b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ba:	2330      	movs	r3, #48	@ 0x30
 80078bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a6c <_vfiprintf_r+0x21c>
 80078c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078c4:	f04f 0901 	mov.w	r9, #1
 80078c8:	4623      	mov	r3, r4
 80078ca:	469a      	mov	sl, r3
 80078cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d0:	b10a      	cbz	r2, 80078d6 <_vfiprintf_r+0x86>
 80078d2:	2a25      	cmp	r2, #37	@ 0x25
 80078d4:	d1f9      	bne.n	80078ca <_vfiprintf_r+0x7a>
 80078d6:	ebba 0b04 	subs.w	fp, sl, r4
 80078da:	d00b      	beq.n	80078f4 <_vfiprintf_r+0xa4>
 80078dc:	465b      	mov	r3, fp
 80078de:	4622      	mov	r2, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff ffa1 	bl	800782a <__sfputs_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	f000 80a7 	beq.w	8007a3c <_vfiprintf_r+0x1ec>
 80078ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078f0:	445a      	add	r2, fp
 80078f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80078f4:	f89a 3000 	ldrb.w	r3, [sl]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 809f 	beq.w	8007a3c <_vfiprintf_r+0x1ec>
 80078fe:	2300      	movs	r3, #0
 8007900:	f04f 32ff 	mov.w	r2, #4294967295
 8007904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007908:	f10a 0a01 	add.w	sl, sl, #1
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	9307      	str	r3, [sp, #28]
 8007910:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007914:	931a      	str	r3, [sp, #104]	@ 0x68
 8007916:	4654      	mov	r4, sl
 8007918:	2205      	movs	r2, #5
 800791a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800791e:	4853      	ldr	r0, [pc, #332]	@ (8007a6c <_vfiprintf_r+0x21c>)
 8007920:	f7f8 fcde 	bl	80002e0 <memchr>
 8007924:	9a04      	ldr	r2, [sp, #16]
 8007926:	b9d8      	cbnz	r0, 8007960 <_vfiprintf_r+0x110>
 8007928:	06d1      	lsls	r1, r2, #27
 800792a:	bf44      	itt	mi
 800792c:	2320      	movmi	r3, #32
 800792e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007932:	0713      	lsls	r3, r2, #28
 8007934:	bf44      	itt	mi
 8007936:	232b      	movmi	r3, #43	@ 0x2b
 8007938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800793c:	f89a 3000 	ldrb.w	r3, [sl]
 8007940:	2b2a      	cmp	r3, #42	@ 0x2a
 8007942:	d015      	beq.n	8007970 <_vfiprintf_r+0x120>
 8007944:	9a07      	ldr	r2, [sp, #28]
 8007946:	4654      	mov	r4, sl
 8007948:	2000      	movs	r0, #0
 800794a:	f04f 0c0a 	mov.w	ip, #10
 800794e:	4621      	mov	r1, r4
 8007950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007954:	3b30      	subs	r3, #48	@ 0x30
 8007956:	2b09      	cmp	r3, #9
 8007958:	d94b      	bls.n	80079f2 <_vfiprintf_r+0x1a2>
 800795a:	b1b0      	cbz	r0, 800798a <_vfiprintf_r+0x13a>
 800795c:	9207      	str	r2, [sp, #28]
 800795e:	e014      	b.n	800798a <_vfiprintf_r+0x13a>
 8007960:	eba0 0308 	sub.w	r3, r0, r8
 8007964:	fa09 f303 	lsl.w	r3, r9, r3
 8007968:	4313      	orrs	r3, r2
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	46a2      	mov	sl, r4
 800796e:	e7d2      	b.n	8007916 <_vfiprintf_r+0xc6>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	1d19      	adds	r1, r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	9103      	str	r1, [sp, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	bfbb      	ittet	lt
 800797c:	425b      	neglt	r3, r3
 800797e:	f042 0202 	orrlt.w	r2, r2, #2
 8007982:	9307      	strge	r3, [sp, #28]
 8007984:	9307      	strlt	r3, [sp, #28]
 8007986:	bfb8      	it	lt
 8007988:	9204      	strlt	r2, [sp, #16]
 800798a:	7823      	ldrb	r3, [r4, #0]
 800798c:	2b2e      	cmp	r3, #46	@ 0x2e
 800798e:	d10a      	bne.n	80079a6 <_vfiprintf_r+0x156>
 8007990:	7863      	ldrb	r3, [r4, #1]
 8007992:	2b2a      	cmp	r3, #42	@ 0x2a
 8007994:	d132      	bne.n	80079fc <_vfiprintf_r+0x1ac>
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	9203      	str	r2, [sp, #12]
 800799e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079a2:	3402      	adds	r4, #2
 80079a4:	9305      	str	r3, [sp, #20]
 80079a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a7c <_vfiprintf_r+0x22c>
 80079aa:	7821      	ldrb	r1, [r4, #0]
 80079ac:	2203      	movs	r2, #3
 80079ae:	4650      	mov	r0, sl
 80079b0:	f7f8 fc96 	bl	80002e0 <memchr>
 80079b4:	b138      	cbz	r0, 80079c6 <_vfiprintf_r+0x176>
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	eba0 000a 	sub.w	r0, r0, sl
 80079bc:	2240      	movs	r2, #64	@ 0x40
 80079be:	4082      	lsls	r2, r0
 80079c0:	4313      	orrs	r3, r2
 80079c2:	3401      	adds	r4, #1
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ca:	4829      	ldr	r0, [pc, #164]	@ (8007a70 <_vfiprintf_r+0x220>)
 80079cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079d0:	2206      	movs	r2, #6
 80079d2:	f7f8 fc85 	bl	80002e0 <memchr>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d03f      	beq.n	8007a5a <_vfiprintf_r+0x20a>
 80079da:	4b26      	ldr	r3, [pc, #152]	@ (8007a74 <_vfiprintf_r+0x224>)
 80079dc:	bb1b      	cbnz	r3, 8007a26 <_vfiprintf_r+0x1d6>
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	3307      	adds	r3, #7
 80079e2:	f023 0307 	bic.w	r3, r3, #7
 80079e6:	3308      	adds	r3, #8
 80079e8:	9303      	str	r3, [sp, #12]
 80079ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ec:	443b      	add	r3, r7
 80079ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f0:	e76a      	b.n	80078c8 <_vfiprintf_r+0x78>
 80079f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079f6:	460c      	mov	r4, r1
 80079f8:	2001      	movs	r0, #1
 80079fa:	e7a8      	b.n	800794e <_vfiprintf_r+0xfe>
 80079fc:	2300      	movs	r3, #0
 80079fe:	3401      	adds	r4, #1
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	4619      	mov	r1, r3
 8007a04:	f04f 0c0a 	mov.w	ip, #10
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a0e:	3a30      	subs	r2, #48	@ 0x30
 8007a10:	2a09      	cmp	r2, #9
 8007a12:	d903      	bls.n	8007a1c <_vfiprintf_r+0x1cc>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0c6      	beq.n	80079a6 <_vfiprintf_r+0x156>
 8007a18:	9105      	str	r1, [sp, #20]
 8007a1a:	e7c4      	b.n	80079a6 <_vfiprintf_r+0x156>
 8007a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a20:	4604      	mov	r4, r0
 8007a22:	2301      	movs	r3, #1
 8007a24:	e7f0      	b.n	8007a08 <_vfiprintf_r+0x1b8>
 8007a26:	ab03      	add	r3, sp, #12
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <_vfiprintf_r+0x228>)
 8007a2e:	a904      	add	r1, sp, #16
 8007a30:	4630      	mov	r0, r6
 8007a32:	f3af 8000 	nop.w
 8007a36:	4607      	mov	r7, r0
 8007a38:	1c78      	adds	r0, r7, #1
 8007a3a:	d1d6      	bne.n	80079ea <_vfiprintf_r+0x19a>
 8007a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	d405      	bmi.n	8007a4e <_vfiprintf_r+0x1fe>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	059a      	lsls	r2, r3, #22
 8007a46:	d402      	bmi.n	8007a4e <_vfiprintf_r+0x1fe>
 8007a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a4a:	f7ff fddd 	bl	8007608 <__retarget_lock_release_recursive>
 8007a4e:	89ab      	ldrh	r3, [r5, #12]
 8007a50:	065b      	lsls	r3, r3, #25
 8007a52:	f53f af1f 	bmi.w	8007894 <_vfiprintf_r+0x44>
 8007a56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a58:	e71e      	b.n	8007898 <_vfiprintf_r+0x48>
 8007a5a:	ab03      	add	r3, sp, #12
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	462a      	mov	r2, r5
 8007a60:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <_vfiprintf_r+0x228>)
 8007a62:	a904      	add	r1, sp, #16
 8007a64:	4630      	mov	r0, r6
 8007a66:	f000 f879 	bl	8007b5c <_printf_i>
 8007a6a:	e7e4      	b.n	8007a36 <_vfiprintf_r+0x1e6>
 8007a6c:	08009f48 	.word	0x08009f48
 8007a70:	08009f52 	.word	0x08009f52
 8007a74:	00000000 	.word	0x00000000
 8007a78:	0800782b 	.word	0x0800782b
 8007a7c:	08009f4e 	.word	0x08009f4e

08007a80 <_printf_common>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	4616      	mov	r6, r2
 8007a86:	4698      	mov	r8, r3
 8007a88:	688a      	ldr	r2, [r1, #8]
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	bfb8      	it	lt
 8007a94:	4613      	movlt	r3, r2
 8007a96:	6033      	str	r3, [r6, #0]
 8007a98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b10a      	cbz	r2, 8007aa6 <_printf_common+0x26>
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	6033      	str	r3, [r6, #0]
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	0699      	lsls	r1, r3, #26
 8007aaa:	bf42      	ittt	mi
 8007aac:	6833      	ldrmi	r3, [r6, #0]
 8007aae:	3302      	addmi	r3, #2
 8007ab0:	6033      	strmi	r3, [r6, #0]
 8007ab2:	6825      	ldr	r5, [r4, #0]
 8007ab4:	f015 0506 	ands.w	r5, r5, #6
 8007ab8:	d106      	bne.n	8007ac8 <_printf_common+0x48>
 8007aba:	f104 0a19 	add.w	sl, r4, #25
 8007abe:	68e3      	ldr	r3, [r4, #12]
 8007ac0:	6832      	ldr	r2, [r6, #0]
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	dc26      	bgt.n	8007b16 <_printf_common+0x96>
 8007ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	3b00      	subs	r3, #0
 8007ad0:	bf18      	it	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	0692      	lsls	r2, r2, #26
 8007ad6:	d42b      	bmi.n	8007b30 <_printf_common+0xb0>
 8007ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007adc:	4641      	mov	r1, r8
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c8      	blx	r9
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d01e      	beq.n	8007b24 <_printf_common+0xa4>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	6922      	ldr	r2, [r4, #16]
 8007aea:	f003 0306 	and.w	r3, r3, #6
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	bf02      	ittt	eq
 8007af2:	68e5      	ldreq	r5, [r4, #12]
 8007af4:	6833      	ldreq	r3, [r6, #0]
 8007af6:	1aed      	subeq	r5, r5, r3
 8007af8:	68a3      	ldr	r3, [r4, #8]
 8007afa:	bf0c      	ite	eq
 8007afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b00:	2500      	movne	r5, #0
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bfc4      	itt	gt
 8007b06:	1a9b      	subgt	r3, r3, r2
 8007b08:	18ed      	addgt	r5, r5, r3
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	341a      	adds	r4, #26
 8007b0e:	42b5      	cmp	r5, r6
 8007b10:	d11a      	bne.n	8007b48 <_printf_common+0xc8>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e008      	b.n	8007b28 <_printf_common+0xa8>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	47c8      	blx	r9
 8007b20:	3001      	adds	r0, #1
 8007b22:	d103      	bne.n	8007b2c <_printf_common+0xac>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	e7c6      	b.n	8007abe <_printf_common+0x3e>
 8007b30:	18e1      	adds	r1, r4, r3
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	2030      	movs	r0, #48	@ 0x30
 8007b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b3a:	4422      	add	r2, r4
 8007b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b44:	3302      	adds	r3, #2
 8007b46:	e7c7      	b.n	8007ad8 <_printf_common+0x58>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c8      	blx	r9
 8007b52:	3001      	adds	r0, #1
 8007b54:	d0e6      	beq.n	8007b24 <_printf_common+0xa4>
 8007b56:	3601      	adds	r6, #1
 8007b58:	e7d9      	b.n	8007b0e <_printf_common+0x8e>
	...

08007b5c <_printf_i>:
 8007b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	7e0f      	ldrb	r7, [r1, #24]
 8007b62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b64:	2f78      	cmp	r7, #120	@ 0x78
 8007b66:	4691      	mov	r9, r2
 8007b68:	4680      	mov	r8, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	469a      	mov	sl, r3
 8007b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b72:	d807      	bhi.n	8007b84 <_printf_i+0x28>
 8007b74:	2f62      	cmp	r7, #98	@ 0x62
 8007b76:	d80a      	bhi.n	8007b8e <_printf_i+0x32>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	f000 80d1 	beq.w	8007d20 <_printf_i+0x1c4>
 8007b7e:	2f58      	cmp	r7, #88	@ 0x58
 8007b80:	f000 80b8 	beq.w	8007cf4 <_printf_i+0x198>
 8007b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b8c:	e03a      	b.n	8007c04 <_printf_i+0xa8>
 8007b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b92:	2b15      	cmp	r3, #21
 8007b94:	d8f6      	bhi.n	8007b84 <_printf_i+0x28>
 8007b96:	a101      	add	r1, pc, #4	@ (adr r1, 8007b9c <_printf_i+0x40>)
 8007b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007b85 	.word	0x08007b85
 8007ba8:	08007b85 	.word	0x08007b85
 8007bac:	08007b85 	.word	0x08007b85
 8007bb0:	08007b85 	.word	0x08007b85
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b85 	.word	0x08007b85
 8007bbc:	08007b85 	.word	0x08007b85
 8007bc0:	08007b85 	.word	0x08007b85
 8007bc4:	08007b85 	.word	0x08007b85
 8007bc8:	08007d07 	.word	0x08007d07
 8007bcc:	08007c33 	.word	0x08007c33
 8007bd0:	08007cc1 	.word	0x08007cc1
 8007bd4:	08007b85 	.word	0x08007b85
 8007bd8:	08007b85 	.word	0x08007b85
 8007bdc:	08007d29 	.word	0x08007d29
 8007be0:	08007b85 	.word	0x08007b85
 8007be4:	08007c33 	.word	0x08007c33
 8007be8:	08007b85 	.word	0x08007b85
 8007bec:	08007b85 	.word	0x08007b85
 8007bf0:	08007cc9 	.word	0x08007cc9
 8007bf4:	6833      	ldr	r3, [r6, #0]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6032      	str	r2, [r6, #0]
 8007bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c04:	2301      	movs	r3, #1
 8007c06:	e09c      	b.n	8007d42 <_printf_i+0x1e6>
 8007c08:	6833      	ldr	r3, [r6, #0]
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	1d19      	adds	r1, r3, #4
 8007c0e:	6031      	str	r1, [r6, #0]
 8007c10:	0606      	lsls	r6, r0, #24
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0xbc>
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	e003      	b.n	8007c20 <_printf_i+0xc4>
 8007c18:	0645      	lsls	r5, r0, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0xb8>
 8007c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	da03      	bge.n	8007c2c <_printf_i+0xd0>
 8007c24:	232d      	movs	r3, #45	@ 0x2d
 8007c26:	426d      	negs	r5, r5
 8007c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c2c:	4858      	ldr	r0, [pc, #352]	@ (8007d90 <_printf_i+0x234>)
 8007c2e:	230a      	movs	r3, #10
 8007c30:	e011      	b.n	8007c56 <_printf_i+0xfa>
 8007c32:	6821      	ldr	r1, [r4, #0]
 8007c34:	6833      	ldr	r3, [r6, #0]
 8007c36:	0608      	lsls	r0, r1, #24
 8007c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c3c:	d402      	bmi.n	8007c44 <_printf_i+0xe8>
 8007c3e:	0649      	lsls	r1, r1, #25
 8007c40:	bf48      	it	mi
 8007c42:	b2ad      	uxthmi	r5, r5
 8007c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c46:	4852      	ldr	r0, [pc, #328]	@ (8007d90 <_printf_i+0x234>)
 8007c48:	6033      	str	r3, [r6, #0]
 8007c4a:	bf14      	ite	ne
 8007c4c:	230a      	movne	r3, #10
 8007c4e:	2308      	moveq	r3, #8
 8007c50:	2100      	movs	r1, #0
 8007c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c56:	6866      	ldr	r6, [r4, #4]
 8007c58:	60a6      	str	r6, [r4, #8]
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	db05      	blt.n	8007c6a <_printf_i+0x10e>
 8007c5e:	6821      	ldr	r1, [r4, #0]
 8007c60:	432e      	orrs	r6, r5
 8007c62:	f021 0104 	bic.w	r1, r1, #4
 8007c66:	6021      	str	r1, [r4, #0]
 8007c68:	d04b      	beq.n	8007d02 <_printf_i+0x1a6>
 8007c6a:	4616      	mov	r6, r2
 8007c6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c70:	fb03 5711 	mls	r7, r3, r1, r5
 8007c74:	5dc7      	ldrb	r7, [r0, r7]
 8007c76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c7a:	462f      	mov	r7, r5
 8007c7c:	42bb      	cmp	r3, r7
 8007c7e:	460d      	mov	r5, r1
 8007c80:	d9f4      	bls.n	8007c6c <_printf_i+0x110>
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	d10b      	bne.n	8007c9e <_printf_i+0x142>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	07df      	lsls	r7, r3, #31
 8007c8a:	d508      	bpl.n	8007c9e <_printf_i+0x142>
 8007c8c:	6923      	ldr	r3, [r4, #16]
 8007c8e:	6861      	ldr	r1, [r4, #4]
 8007c90:	4299      	cmp	r1, r3
 8007c92:	bfde      	ittt	le
 8007c94:	2330      	movle	r3, #48	@ 0x30
 8007c96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c9e:	1b92      	subs	r2, r2, r6
 8007ca0:	6122      	str	r2, [r4, #16]
 8007ca2:	f8cd a000 	str.w	sl, [sp]
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	aa03      	add	r2, sp, #12
 8007caa:	4621      	mov	r1, r4
 8007cac:	4640      	mov	r0, r8
 8007cae:	f7ff fee7 	bl	8007a80 <_printf_common>
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d14a      	bne.n	8007d4c <_printf_i+0x1f0>
 8007cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cba:	b004      	add	sp, #16
 8007cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	f043 0320 	orr.w	r3, r3, #32
 8007cc6:	6023      	str	r3, [r4, #0]
 8007cc8:	4832      	ldr	r0, [pc, #200]	@ (8007d94 <_printf_i+0x238>)
 8007cca:	2778      	movs	r7, #120	@ 0x78
 8007ccc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	6831      	ldr	r1, [r6, #0]
 8007cd4:	061f      	lsls	r7, r3, #24
 8007cd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cda:	d402      	bmi.n	8007ce2 <_printf_i+0x186>
 8007cdc:	065f      	lsls	r7, r3, #25
 8007cde:	bf48      	it	mi
 8007ce0:	b2ad      	uxthmi	r5, r5
 8007ce2:	6031      	str	r1, [r6, #0]
 8007ce4:	07d9      	lsls	r1, r3, #31
 8007ce6:	bf44      	itt	mi
 8007ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8007cec:	6023      	strmi	r3, [r4, #0]
 8007cee:	b11d      	cbz	r5, 8007cf8 <_printf_i+0x19c>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	e7ad      	b.n	8007c50 <_printf_i+0xf4>
 8007cf4:	4826      	ldr	r0, [pc, #152]	@ (8007d90 <_printf_i+0x234>)
 8007cf6:	e7e9      	b.n	8007ccc <_printf_i+0x170>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	f023 0320 	bic.w	r3, r3, #32
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	e7f6      	b.n	8007cf0 <_printf_i+0x194>
 8007d02:	4616      	mov	r6, r2
 8007d04:	e7bd      	b.n	8007c82 <_printf_i+0x126>
 8007d06:	6833      	ldr	r3, [r6, #0]
 8007d08:	6825      	ldr	r5, [r4, #0]
 8007d0a:	6961      	ldr	r1, [r4, #20]
 8007d0c:	1d18      	adds	r0, r3, #4
 8007d0e:	6030      	str	r0, [r6, #0]
 8007d10:	062e      	lsls	r6, r5, #24
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	d501      	bpl.n	8007d1a <_printf_i+0x1be>
 8007d16:	6019      	str	r1, [r3, #0]
 8007d18:	e002      	b.n	8007d20 <_printf_i+0x1c4>
 8007d1a:	0668      	lsls	r0, r5, #25
 8007d1c:	d5fb      	bpl.n	8007d16 <_printf_i+0x1ba>
 8007d1e:	8019      	strh	r1, [r3, #0]
 8007d20:	2300      	movs	r3, #0
 8007d22:	6123      	str	r3, [r4, #16]
 8007d24:	4616      	mov	r6, r2
 8007d26:	e7bc      	b.n	8007ca2 <_printf_i+0x146>
 8007d28:	6833      	ldr	r3, [r6, #0]
 8007d2a:	1d1a      	adds	r2, r3, #4
 8007d2c:	6032      	str	r2, [r6, #0]
 8007d2e:	681e      	ldr	r6, [r3, #0]
 8007d30:	6862      	ldr	r2, [r4, #4]
 8007d32:	2100      	movs	r1, #0
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7f8 fad3 	bl	80002e0 <memchr>
 8007d3a:	b108      	cbz	r0, 8007d40 <_printf_i+0x1e4>
 8007d3c:	1b80      	subs	r0, r0, r6
 8007d3e:	6060      	str	r0, [r4, #4]
 8007d40:	6863      	ldr	r3, [r4, #4]
 8007d42:	6123      	str	r3, [r4, #16]
 8007d44:	2300      	movs	r3, #0
 8007d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d4a:	e7aa      	b.n	8007ca2 <_printf_i+0x146>
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	4632      	mov	r2, r6
 8007d50:	4649      	mov	r1, r9
 8007d52:	4640      	mov	r0, r8
 8007d54:	47d0      	blx	sl
 8007d56:	3001      	adds	r0, #1
 8007d58:	d0ad      	beq.n	8007cb6 <_printf_i+0x15a>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	079b      	lsls	r3, r3, #30
 8007d5e:	d413      	bmi.n	8007d88 <_printf_i+0x22c>
 8007d60:	68e0      	ldr	r0, [r4, #12]
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	4298      	cmp	r0, r3
 8007d66:	bfb8      	it	lt
 8007d68:	4618      	movlt	r0, r3
 8007d6a:	e7a6      	b.n	8007cba <_printf_i+0x15e>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4632      	mov	r2, r6
 8007d70:	4649      	mov	r1, r9
 8007d72:	4640      	mov	r0, r8
 8007d74:	47d0      	blx	sl
 8007d76:	3001      	adds	r0, #1
 8007d78:	d09d      	beq.n	8007cb6 <_printf_i+0x15a>
 8007d7a:	3501      	adds	r5, #1
 8007d7c:	68e3      	ldr	r3, [r4, #12]
 8007d7e:	9903      	ldr	r1, [sp, #12]
 8007d80:	1a5b      	subs	r3, r3, r1
 8007d82:	42ab      	cmp	r3, r5
 8007d84:	dcf2      	bgt.n	8007d6c <_printf_i+0x210>
 8007d86:	e7eb      	b.n	8007d60 <_printf_i+0x204>
 8007d88:	2500      	movs	r5, #0
 8007d8a:	f104 0619 	add.w	r6, r4, #25
 8007d8e:	e7f5      	b.n	8007d7c <_printf_i+0x220>
 8007d90:	08009f59 	.word	0x08009f59
 8007d94:	08009f6a 	.word	0x08009f6a

08007d98 <__sflush_r>:
 8007d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	0716      	lsls	r6, r2, #28
 8007da2:	4605      	mov	r5, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	d454      	bmi.n	8007e52 <__sflush_r+0xba>
 8007da8:	684b      	ldr	r3, [r1, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	dc02      	bgt.n	8007db4 <__sflush_r+0x1c>
 8007dae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dd48      	ble.n	8007e46 <__sflush_r+0xae>
 8007db4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d045      	beq.n	8007e46 <__sflush_r+0xae>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dc0:	682f      	ldr	r7, [r5, #0]
 8007dc2:	6a21      	ldr	r1, [r4, #32]
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	d030      	beq.n	8007e2a <__sflush_r+0x92>
 8007dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	0759      	lsls	r1, r3, #29
 8007dce:	d505      	bpl.n	8007ddc <__sflush_r+0x44>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dd6:	b10b      	cbz	r3, 8007ddc <__sflush_r+0x44>
 8007dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007de0:	6a21      	ldr	r1, [r4, #32]
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b0      	blx	r6
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	d106      	bne.n	8007dfa <__sflush_r+0x62>
 8007dec:	6829      	ldr	r1, [r5, #0]
 8007dee:	291d      	cmp	r1, #29
 8007df0:	d82b      	bhi.n	8007e4a <__sflush_r+0xb2>
 8007df2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e9c <__sflush_r+0x104>)
 8007df4:	40ca      	lsrs	r2, r1
 8007df6:	07d6      	lsls	r6, r2, #31
 8007df8:	d527      	bpl.n	8007e4a <__sflush_r+0xb2>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	6062      	str	r2, [r4, #4]
 8007dfe:	04d9      	lsls	r1, r3, #19
 8007e00:	6922      	ldr	r2, [r4, #16]
 8007e02:	6022      	str	r2, [r4, #0]
 8007e04:	d504      	bpl.n	8007e10 <__sflush_r+0x78>
 8007e06:	1c42      	adds	r2, r0, #1
 8007e08:	d101      	bne.n	8007e0e <__sflush_r+0x76>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	b903      	cbnz	r3, 8007e10 <__sflush_r+0x78>
 8007e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e12:	602f      	str	r7, [r5, #0]
 8007e14:	b1b9      	cbz	r1, 8007e46 <__sflush_r+0xae>
 8007e16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	d002      	beq.n	8007e24 <__sflush_r+0x8c>
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f7ff fbf4 	bl	800760c <_free_r>
 8007e24:	2300      	movs	r3, #0
 8007e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e28:	e00d      	b.n	8007e46 <__sflush_r+0xae>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b0      	blx	r6
 8007e30:	4602      	mov	r2, r0
 8007e32:	1c50      	adds	r0, r2, #1
 8007e34:	d1c9      	bne.n	8007dca <__sflush_r+0x32>
 8007e36:	682b      	ldr	r3, [r5, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0c6      	beq.n	8007dca <__sflush_r+0x32>
 8007e3c:	2b1d      	cmp	r3, #29
 8007e3e:	d001      	beq.n	8007e44 <__sflush_r+0xac>
 8007e40:	2b16      	cmp	r3, #22
 8007e42:	d11e      	bne.n	8007e82 <__sflush_r+0xea>
 8007e44:	602f      	str	r7, [r5, #0]
 8007e46:	2000      	movs	r0, #0
 8007e48:	e022      	b.n	8007e90 <__sflush_r+0xf8>
 8007e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e4e:	b21b      	sxth	r3, r3
 8007e50:	e01b      	b.n	8007e8a <__sflush_r+0xf2>
 8007e52:	690f      	ldr	r7, [r1, #16]
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	d0f6      	beq.n	8007e46 <__sflush_r+0xae>
 8007e58:	0793      	lsls	r3, r2, #30
 8007e5a:	680e      	ldr	r6, [r1, #0]
 8007e5c:	bf08      	it	eq
 8007e5e:	694b      	ldreq	r3, [r1, #20]
 8007e60:	600f      	str	r7, [r1, #0]
 8007e62:	bf18      	it	ne
 8007e64:	2300      	movne	r3, #0
 8007e66:	eba6 0807 	sub.w	r8, r6, r7
 8007e6a:	608b      	str	r3, [r1, #8]
 8007e6c:	f1b8 0f00 	cmp.w	r8, #0
 8007e70:	dde9      	ble.n	8007e46 <__sflush_r+0xae>
 8007e72:	6a21      	ldr	r1, [r4, #32]
 8007e74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e76:	4643      	mov	r3, r8
 8007e78:	463a      	mov	r2, r7
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b0      	blx	r6
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	dc08      	bgt.n	8007e94 <__sflush_r+0xfc>
 8007e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e94:	4407      	add	r7, r0
 8007e96:	eba8 0800 	sub.w	r8, r8, r0
 8007e9a:	e7e7      	b.n	8007e6c <__sflush_r+0xd4>
 8007e9c:	20400001 	.word	0x20400001

08007ea0 <_fflush_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	690b      	ldr	r3, [r1, #16]
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	b913      	cbnz	r3, 8007eb0 <_fflush_r+0x10>
 8007eaa:	2500      	movs	r5, #0
 8007eac:	4628      	mov	r0, r5
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	b118      	cbz	r0, 8007eba <_fflush_r+0x1a>
 8007eb2:	6a03      	ldr	r3, [r0, #32]
 8007eb4:	b90b      	cbnz	r3, 8007eba <_fflush_r+0x1a>
 8007eb6:	f7ff faa1 	bl	80073fc <__sinit>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f3      	beq.n	8007eaa <_fflush_r+0xa>
 8007ec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ec4:	07d0      	lsls	r0, r2, #31
 8007ec6:	d404      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ec8:	0599      	lsls	r1, r3, #22
 8007eca:	d402      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ece:	f7ff fb9a 	bl	8007606 <__retarget_lock_acquire_recursive>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f7ff ff5f 	bl	8007d98 <__sflush_r>
 8007eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007edc:	07da      	lsls	r2, r3, #31
 8007ede:	4605      	mov	r5, r0
 8007ee0:	d4e4      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	059b      	lsls	r3, r3, #22
 8007ee6:	d4e1      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eea:	f7ff fb8d 	bl	8007608 <__retarget_lock_release_recursive>
 8007eee:	e7dd      	b.n	8007eac <_fflush_r+0xc>

08007ef0 <__swbuf_r>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	460e      	mov	r6, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b118      	cbz	r0, 8007f02 <__swbuf_r+0x12>
 8007efa:	6a03      	ldr	r3, [r0, #32]
 8007efc:	b90b      	cbnz	r3, 8007f02 <__swbuf_r+0x12>
 8007efe:	f7ff fa7d 	bl	80073fc <__sinit>
 8007f02:	69a3      	ldr	r3, [r4, #24]
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	071a      	lsls	r2, r3, #28
 8007f0a:	d501      	bpl.n	8007f10 <__swbuf_r+0x20>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	b943      	cbnz	r3, 8007f22 <__swbuf_r+0x32>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 f82a 	bl	8007f6c <__swsetup_r>
 8007f18:	b118      	cbz	r0, 8007f22 <__swbuf_r+0x32>
 8007f1a:	f04f 37ff 	mov.w	r7, #4294967295
 8007f1e:	4638      	mov	r0, r7
 8007f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	6922      	ldr	r2, [r4, #16]
 8007f26:	1a98      	subs	r0, r3, r2
 8007f28:	6963      	ldr	r3, [r4, #20]
 8007f2a:	b2f6      	uxtb	r6, r6
 8007f2c:	4283      	cmp	r3, r0
 8007f2e:	4637      	mov	r7, r6
 8007f30:	dc05      	bgt.n	8007f3e <__swbuf_r+0x4e>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4628      	mov	r0, r5
 8007f36:	f7ff ffb3 	bl	8007ea0 <_fflush_r>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d1ed      	bne.n	8007f1a <__swbuf_r+0x2a>
 8007f3e:	68a3      	ldr	r3, [r4, #8]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	60a3      	str	r3, [r4, #8]
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	6022      	str	r2, [r4, #0]
 8007f4a:	701e      	strb	r6, [r3, #0]
 8007f4c:	6962      	ldr	r2, [r4, #20]
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d004      	beq.n	8007f5e <__swbuf_r+0x6e>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	07db      	lsls	r3, r3, #31
 8007f58:	d5e1      	bpl.n	8007f1e <__swbuf_r+0x2e>
 8007f5a:	2e0a      	cmp	r6, #10
 8007f5c:	d1df      	bne.n	8007f1e <__swbuf_r+0x2e>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4628      	mov	r0, r5
 8007f62:	f7ff ff9d 	bl	8007ea0 <_fflush_r>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d0d9      	beq.n	8007f1e <__swbuf_r+0x2e>
 8007f6a:	e7d6      	b.n	8007f1a <__swbuf_r+0x2a>

08007f6c <__swsetup_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4b29      	ldr	r3, [pc, #164]	@ (8008014 <__swsetup_r+0xa8>)
 8007f70:	4605      	mov	r5, r0
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	460c      	mov	r4, r1
 8007f76:	b118      	cbz	r0, 8007f80 <__swsetup_r+0x14>
 8007f78:	6a03      	ldr	r3, [r0, #32]
 8007f7a:	b90b      	cbnz	r3, 8007f80 <__swsetup_r+0x14>
 8007f7c:	f7ff fa3e 	bl	80073fc <__sinit>
 8007f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f84:	0719      	lsls	r1, r3, #28
 8007f86:	d422      	bmi.n	8007fce <__swsetup_r+0x62>
 8007f88:	06da      	lsls	r2, r3, #27
 8007f8a:	d407      	bmi.n	8007f9c <__swsetup_r+0x30>
 8007f8c:	2209      	movs	r2, #9
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9a:	e033      	b.n	8008004 <__swsetup_r+0x98>
 8007f9c:	0758      	lsls	r0, r3, #29
 8007f9e:	d512      	bpl.n	8007fc6 <__swsetup_r+0x5a>
 8007fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fa2:	b141      	cbz	r1, 8007fb6 <__swsetup_r+0x4a>
 8007fa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fa8:	4299      	cmp	r1, r3
 8007faa:	d002      	beq.n	8007fb2 <__swsetup_r+0x46>
 8007fac:	4628      	mov	r0, r5
 8007fae:	f7ff fb2d 	bl	800760c <_free_r>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6063      	str	r3, [r4, #4]
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f043 0308 	orr.w	r3, r3, #8
 8007fcc:	81a3      	strh	r3, [r4, #12]
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	b94b      	cbnz	r3, 8007fe6 <__swsetup_r+0x7a>
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fdc:	d003      	beq.n	8007fe6 <__swsetup_r+0x7a>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f84f 	bl	8008084 <__smakebuf_r>
 8007fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fea:	f013 0201 	ands.w	r2, r3, #1
 8007fee:	d00a      	beq.n	8008006 <__swsetup_r+0x9a>
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	60a2      	str	r2, [r4, #8]
 8007ff4:	6962      	ldr	r2, [r4, #20]
 8007ff6:	4252      	negs	r2, r2
 8007ff8:	61a2      	str	r2, [r4, #24]
 8007ffa:	6922      	ldr	r2, [r4, #16]
 8007ffc:	b942      	cbnz	r2, 8008010 <__swsetup_r+0xa4>
 8007ffe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008002:	d1c5      	bne.n	8007f90 <__swsetup_r+0x24>
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	0799      	lsls	r1, r3, #30
 8008008:	bf58      	it	pl
 800800a:	6962      	ldrpl	r2, [r4, #20]
 800800c:	60a2      	str	r2, [r4, #8]
 800800e:	e7f4      	b.n	8007ffa <__swsetup_r+0x8e>
 8008010:	2000      	movs	r0, #0
 8008012:	e7f7      	b.n	8008004 <__swsetup_r+0x98>
 8008014:	24000038 	.word	0x24000038

08008018 <_sbrk_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d06      	ldr	r5, [pc, #24]	@ (8008034 <_sbrk_r+0x1c>)
 800801c:	2300      	movs	r3, #0
 800801e:	4604      	mov	r4, r0
 8008020:	4608      	mov	r0, r1
 8008022:	602b      	str	r3, [r5, #0]
 8008024:	f7f9 f8e0 	bl	80011e8 <_sbrk>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_sbrk_r+0x1a>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_sbrk_r+0x1a>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	24000324 	.word	0x24000324

08008038 <__swhatbuf_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	2900      	cmp	r1, #0
 8008042:	b096      	sub	sp, #88	@ 0x58
 8008044:	4615      	mov	r5, r2
 8008046:	461e      	mov	r6, r3
 8008048:	da0d      	bge.n	8008066 <__swhatbuf_r+0x2e>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008050:	f04f 0100 	mov.w	r1, #0
 8008054:	bf14      	ite	ne
 8008056:	2340      	movne	r3, #64	@ 0x40
 8008058:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800805c:	2000      	movs	r0, #0
 800805e:	6031      	str	r1, [r6, #0]
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	b016      	add	sp, #88	@ 0x58
 8008064:	bd70      	pop	{r4, r5, r6, pc}
 8008066:	466a      	mov	r2, sp
 8008068:	f000 f848 	bl	80080fc <_fstat_r>
 800806c:	2800      	cmp	r0, #0
 800806e:	dbec      	blt.n	800804a <__swhatbuf_r+0x12>
 8008070:	9901      	ldr	r1, [sp, #4]
 8008072:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008076:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800807a:	4259      	negs	r1, r3
 800807c:	4159      	adcs	r1, r3
 800807e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008082:	e7eb      	b.n	800805c <__swhatbuf_r+0x24>

08008084 <__smakebuf_r>:
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008088:	079d      	lsls	r5, r3, #30
 800808a:	4606      	mov	r6, r0
 800808c:	460c      	mov	r4, r1
 800808e:	d507      	bpl.n	80080a0 <__smakebuf_r+0x1c>
 8008090:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	2301      	movs	r3, #1
 800809a:	6163      	str	r3, [r4, #20]
 800809c:	b003      	add	sp, #12
 800809e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a0:	ab01      	add	r3, sp, #4
 80080a2:	466a      	mov	r2, sp
 80080a4:	f7ff ffc8 	bl	8008038 <__swhatbuf_r>
 80080a8:	9f00      	ldr	r7, [sp, #0]
 80080aa:	4605      	mov	r5, r0
 80080ac:	4639      	mov	r1, r7
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7ff fb18 	bl	80076e4 <_malloc_r>
 80080b4:	b948      	cbnz	r0, 80080ca <__smakebuf_r+0x46>
 80080b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ba:	059a      	lsls	r2, r3, #22
 80080bc:	d4ee      	bmi.n	800809c <__smakebuf_r+0x18>
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	f043 0302 	orr.w	r3, r3, #2
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	e7e2      	b.n	8008090 <__smakebuf_r+0xc>
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	6020      	str	r0, [r4, #0]
 80080ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	9b01      	ldr	r3, [sp, #4]
 80080d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080da:	b15b      	cbz	r3, 80080f4 <__smakebuf_r+0x70>
 80080dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 f81d 	bl	8008120 <_isatty_r>
 80080e6:	b128      	cbz	r0, 80080f4 <__smakebuf_r+0x70>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f023 0303 	bic.w	r3, r3, #3
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	431d      	orrs	r5, r3
 80080f8:	81a5      	strh	r5, [r4, #12]
 80080fa:	e7cf      	b.n	800809c <__smakebuf_r+0x18>

080080fc <_fstat_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d07      	ldr	r5, [pc, #28]	@ (800811c <_fstat_r+0x20>)
 8008100:	2300      	movs	r3, #0
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	4611      	mov	r1, r2
 8008108:	602b      	str	r3, [r5, #0]
 800810a:	f7f9 f845 	bl	8001198 <_fstat>
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	d102      	bne.n	8008118 <_fstat_r+0x1c>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	b103      	cbz	r3, 8008118 <_fstat_r+0x1c>
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	bd38      	pop	{r3, r4, r5, pc}
 800811a:	bf00      	nop
 800811c:	24000324 	.word	0x24000324

08008120 <_isatty_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d06      	ldr	r5, [pc, #24]	@ (800813c <_isatty_r+0x1c>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	602b      	str	r3, [r5, #0]
 800812c:	f7f9 f844 	bl	80011b8 <_isatty>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_isatty_r+0x1a>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_isatty_r+0x1a>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	24000324 	.word	0x24000324

08008140 <_init>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr

0800814c <_fini>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr
