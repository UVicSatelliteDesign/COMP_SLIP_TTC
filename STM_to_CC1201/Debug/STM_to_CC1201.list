
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  08008af4  08008af4  00009af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080094e4  080094e4  0000a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080094ec  080094ec  0000a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080094f0  080094f0  0000a4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  080094f4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000334  24000088  0800957c  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  0800957c  0000b3bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   000155a6  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002bdb  00000000  00000000  0002065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec0  00000000  00000000  00023238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b45  00000000  00000000  000240f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  00024c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015f55  00000000  00000000  0005d122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ed46  00000000  00000000  00073077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d1dbd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000043fc  00000000  00000000  001d1e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d61fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008adc 	.word	0x08008adc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008adc 	.word	0x08008adc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2030      	movs	r0, #48	@ 0x30
 80006b8:	f000 f8ea 	bl	8000890 <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2033      	movs	r0, #51	@ 0x33
 80006d2:	f000 f8dd 	bl	8000890 <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2034      	movs	r0, #52	@ 0x34
 80006ec:	f000 f8d0 	bl	8000890 <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterIdleMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
}

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2036      	movs	r0, #54	@ 0x36
 8000706:	f000 f8c3 	bl	8000890 <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	203a      	movs	r0, #58	@ 0x3a
 8000720:	f000 f8b6 	bl	8000890 <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	203d      	movs	r0, #61	@ 0x3d
 800073a:	f000 f8a9 	bl	8000890 <CC1201_SendStrobe>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	2bff      	cmp	r3, #255	@ 0xff
 8000758:	d909      	bls.n	800076e <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 800075a:	232f      	movs	r3, #47	@ 0x2f
 800075c:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 8000764:	2300      	movs	r3, #0
 8000766:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000768:	2303      	movs	r3, #3
 800076a:	75fb      	strb	r3, [r7, #23]
 800076c:	e009      	b.n	8000782 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000776:	b2db      	uxtb	r3, r3
 8000778:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 800077a:	2300      	movs	r3, #0
 800077c:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	4815      	ldr	r0, [pc, #84]	@ (80007dc <CC1201_ReadStatus+0x94>)
 8000788:	f002 fa3a 	bl	8002c00 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	b29b      	uxth	r3, r3
 8000790:	f107 020c 	add.w	r2, r7, #12
 8000794:	f107 0110 	add.w	r1, r7, #16
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	9000      	str	r0, [sp, #0]
 800079e:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <CC1201_ReadStatus+0x98>)
 80007a0:	f005 fbc0 	bl	8005f24 <HAL_SPI_TransmitReceive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <CC1201_ReadStatus+0x94>)
 80007ae:	f002 fa27 	bl	8002c00 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80007b2:	7dbb      	ldrb	r3, [r7, #22]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10c      	bne.n	80007d2 <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d009      	beq.n	80007d2 <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	2bff      	cmp	r3, #255	@ 0xff
 80007c2:	d903      	bls.n	80007cc <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 80007c4:	7bba      	ldrb	r2, [r7, #14]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	e002      	b.n	80007d2 <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 80007cc:	7b7a      	ldrb	r2, [r7, #13]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 80007d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58021000 	.word	0x58021000
 80007e0:	240000b8 	.word	0x240000b8

080007e4 <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	80fb      	strh	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	2bff      	cmp	r3, #255	@ 0xff
 80007f8:	d909      	bls.n	800080e <CC1201_WriteRegister+0x2a>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command  
 80007fa:	232f      	movs	r3, #47	@ 0x2f
 80007fc:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 8000804:	797b      	ldrb	r3, [r7, #5]
 8000806:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e006      	b.n	800081c <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 8000814:	797b      	ldrb	r3, [r7, #5]
 8000816:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 800081c:	2200      	movs	r2, #0
 800081e:	2110      	movs	r1, #16
 8000820:	480b      	ldr	r0, [pc, #44]	@ (8000850 <CC1201_WriteRegister+0x6c>)
 8000822:	f002 f9ed 	bl	8002c00 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	b29a      	uxth	r2, r3
 800082a:	f107 0108 	add.w	r1, r7, #8
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	4808      	ldr	r0, [pc, #32]	@ (8000854 <CC1201_WriteRegister+0x70>)
 8000834:	f005 f988 	bl	8005b48 <HAL_SPI_Transmit>
 8000838:	4603      	mov	r3, r0
 800083a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	4803      	ldr	r0, [pc, #12]	@ (8000850 <CC1201_WriteRegister+0x6c>)
 8000842:	f002 f9dd 	bl	8002c00 <HAL_GPIO_WritePin>

    return status;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58021000 	.word	0x58021000
 8000854:	240000b8 	.word	0x240000b8

08000858 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8000866:	f7ff ff6f 	bl	8000748 <CC1201_ReadStatus>
 800086a:	4603      	mov	r3, r0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 8000882:	f7ff ff61 	bl	8000748 <CC1201_ReadStatus>
 8000886:	4603      	mov	r3, r0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af02      	add	r7, sp, #8
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    // Debug: Check CS pin before transaction
    printf("  Strobe 0x%02X: CS before=", strobe_command);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4619      	mov	r1, r3
 80008a0:	4827      	ldr	r0, [pc, #156]	@ (8000940 <CC1201_SendStrobe+0xb0>)
 80008a2:	f007 faaf 	bl	8007e04 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 80008a6:	2110      	movs	r1, #16
 80008a8:	4826      	ldr	r0, [pc, #152]	@ (8000944 <CC1201_SendStrobe+0xb4>)
 80008aa:	f002 f991 	bl	8002bd0 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d101      	bne.n	80008b8 <CC1201_SendStrobe+0x28>
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <CC1201_SendStrobe+0xb8>)
 80008b6:	e000      	b.n	80008ba <CC1201_SendStrobe+0x2a>
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <CC1201_SendStrobe+0xbc>)
 80008ba:	4619      	mov	r1, r3
 80008bc:	4824      	ldr	r0, [pc, #144]	@ (8000950 <CC1201_SendStrobe+0xc0>)
 80008be:	f007 faa1 	bl	8007e04 <iprintf>

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80008c2:	2200      	movs	r2, #0
 80008c4:	2110      	movs	r1, #16
 80008c6:	481f      	ldr	r0, [pc, #124]	@ (8000944 <CC1201_SendStrobe+0xb4>)
 80008c8:	f002 f99a 	bl	8002c00 <HAL_GPIO_WritePin>
    
    // Debug: Check CS pin during transaction
    printf(", CS during=");
 80008cc:	4821      	ldr	r0, [pc, #132]	@ (8000954 <CC1201_SendStrobe+0xc4>)
 80008ce:	f007 fa99 	bl	8007e04 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 80008d2:	2110      	movs	r1, #16
 80008d4:	481b      	ldr	r0, [pc, #108]	@ (8000944 <CC1201_SendStrobe+0xb4>)
 80008d6:	f002 f97b 	bl	8002bd0 <HAL_GPIO_ReadPin>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d101      	bne.n	80008e4 <CC1201_SendStrobe+0x54>
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <CC1201_SendStrobe+0xb8>)
 80008e2:	e000      	b.n	80008e6 <CC1201_SendStrobe+0x56>
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <CC1201_SendStrobe+0xbc>)
 80008e6:	4619      	mov	r1, r3
 80008e8:	4819      	ldr	r0, [pc, #100]	@ (8000950 <CC1201_SendStrobe+0xc0>)
 80008ea:	f007 fa8b 	bl	8007e04 <iprintf>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f001 fb5c 	bl	8001fac <HAL_Delay>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, HAL_MAX_DELAY); // Transmit strobe command and receive status
 80008f4:	f107 020e 	add.w	r2, r7, #14
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	4815      	ldr	r0, [pc, #84]	@ (8000958 <CC1201_SendStrobe+0xc8>)
 8000904:	f005 fb0e 	bl	8005f24 <HAL_SPI_TransmitReceive>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800090c:	2201      	movs	r2, #1
 800090e:	2110      	movs	r1, #16
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <CC1201_SendStrobe+0xb4>)
 8000912:	f002 f975 	bl	8002c00 <HAL_GPIO_WritePin>

    // Debug output
    printf(", CS after=HIGH, RX=0x%02X, HAL=%d\n\r", rx_data, status);
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	4619      	mov	r1, r3
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	461a      	mov	r2, r3
 800091e:	480f      	ldr	r0, [pc, #60]	@ (800095c <CC1201_SendStrobe+0xcc>)
 8000920:	f007 fa70 	bl	8007e04 <iprintf>

    if (status == HAL_OK) {
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d105      	bne.n	8000936 <CC1201_SendStrobe+0xa6>
        if (status_byte != NULL) {
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <CC1201_SendStrobe+0xa6>
            *status_byte = rx_data;
 8000930:	7bba      	ldrb	r2, [r7, #14]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08008af4 	.word	0x08008af4
 8000944:	58021000 	.word	0x58021000
 8000948:	08008b10 	.word	0x08008b10
 800094c:	08008b18 	.word	0x08008b18
 8000950:	08008b1c 	.word	0x08008b1c
 8000954:	08008b20 	.word	0x08008b20
 8000958:	240000b8 	.word	0x240000b8
 800095c:	08008b30 	.word	0x08008b30

08000960 <CC1201_WriteRegisterConfig>:
 * @param settings Array of register settings to write.
 * @param num_settings Number of settings in the array.
 * @return HAL_StatusTypeDef Status of the configuration (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegisterConfig(const registerSetting_t *settings, uint16_t num_settings)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
    
    for (uint16_t i = 0; i < num_settings; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	81bb      	strh	r3, [r7, #12]
 8000974:	e024      	b.n	80009c0 <CC1201_WriteRegisterConfig+0x60>
        if (settings[i].addr > 0xFF) {
 8000976:	89bb      	ldrh	r3, [r7, #12]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2bff      	cmp	r3, #255	@ 0xff
 8000982:	d819      	bhi.n	80009b8 <CC1201_WriteRegisterConfig+0x58>
            // Extended register (requires burst access)
            // For now, skip extended registers in this simple implementation
            continue;
        }
        
        status = CC1201_WriteRegister((uint8_t)settings[i].addr, settings[i].data);
 8000984:	89bb      	ldrh	r3, [r7, #12]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	89bb      	ldrh	r3, [r7, #12]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	4619      	mov	r1, r3
 800099e:	f7ff ff21 	bl	80007e4 <CC1201_WriteRegister>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK) {
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <CC1201_WriteRegisterConfig+0x50>
            return status;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	e00c      	b.n	80009ca <CC1201_WriteRegisterConfig+0x6a>
        }
        
        HAL_Delay(1); // Small delay between register writes
 80009b0:	2001      	movs	r0, #1
 80009b2:	f001 fafb 	bl	8001fac <HAL_Delay>
 80009b6:	e000      	b.n	80009ba <CC1201_WriteRegisterConfig+0x5a>
            continue;
 80009b8:	bf00      	nop
    for (uint16_t i = 0; i < num_settings; i++) {
 80009ba:	89bb      	ldrh	r3, [r7, #12]
 80009bc:	3301      	adds	r3, #1
 80009be:	81bb      	strh	r3, [r7, #12]
 80009c0:	89ba      	ldrh	r2, [r7, #12]
 80009c2:	887b      	ldrh	r3, [r7, #2]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d3d6      	bcc.n	8000976 <CC1201_WriteRegisterConfig+0x16>
    }
    
    return status;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <CC1201_GetNumPreferredSettings>:
 * @brief Gets the number of preferred settings.
 *
 * @return uint16_t Number of settings in the preferred settings array.
 */
uint16_t CC1201_GetNumPreferredSettings(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
    return sizeof(preferredSettings) / sizeof(registerSetting_t);
 80009d6:	2331      	movs	r3, #49	@ 0x31
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <CC1201_GetPreferredSettings>:
 * @brief Gets a pointer to the preferred settings array.
 *
 * @return const registerSetting_t* Pointer to the preferred settings array.
 */
const registerSetting_t* CC1201_GetPreferredSettings(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    return preferredSettings;
 80009e8:	4b02      	ldr	r3, [pc, #8]	@ (80009f4 <CC1201_GetPreferredSettings+0x10>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	080093b8 	.word	0x080093b8

080009f8 <test_GPIO_pins>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 80009fe:	4831      	ldr	r0, [pc, #196]	@ (8000ac4 <test_GPIO_pins+0xcc>)
 8000a00:	f007 fa00 	bl	8007e04 <iprintf>
    
    // Test CS pin
    printf("CS Pin (PE4): ");
 8000a04:	4830      	ldr	r0, [pc, #192]	@ (8000ac8 <test_GPIO_pins+0xd0>)
 8000a06:	f007 f9fd 	bl	8007e04 <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	482f      	ldr	r0, [pc, #188]	@ (8000acc <test_GPIO_pins+0xd4>)
 8000a0e:	f002 f8df 	bl	8002bd0 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
    printf("%s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d101      	bne.n	8000a20 <test_GPIO_pins+0x28>
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <test_GPIO_pins+0xd8>)
 8000a1e:	e000      	b.n	8000a22 <test_GPIO_pins+0x2a>
 8000a20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <test_GPIO_pins+0xdc>)
 8000a22:	4619      	mov	r1, r3
 8000a24:	482c      	ldr	r0, [pc, #176]	@ (8000ad8 <test_GPIO_pins+0xe0>)
 8000a26:	f007 f9ed 	bl	8007e04 <iprintf>
    
    // Toggle CS pin to test control
    printf("Toggling CS pin...\n\r");
 8000a2a:	482c      	ldr	r0, [pc, #176]	@ (8000adc <test_GPIO_pins+0xe4>)
 8000a2c:	f007 f9ea 	bl	8007e04 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	4825      	ldr	r0, [pc, #148]	@ (8000acc <test_GPIO_pins+0xd4>)
 8000a36:	f002 f8e3 	bl	8002c00 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000a3a:	2064      	movs	r0, #100	@ 0x64
 8000a3c:	f001 fab6 	bl	8001fac <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000a40:	2110      	movs	r1, #16
 8000a42:	4822      	ldr	r0, [pc, #136]	@ (8000acc <test_GPIO_pins+0xd4>)
 8000a44:	f002 f8c4 	bl	8002bd0 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after LOW: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <test_GPIO_pins+0x5e>
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <test_GPIO_pins+0xd8>)
 8000a54:	e000      	b.n	8000a58 <test_GPIO_pins+0x60>
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <test_GPIO_pins+0xdc>)
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4821      	ldr	r0, [pc, #132]	@ (8000ae0 <test_GPIO_pins+0xe8>)
 8000a5c:	f007 f9d2 	bl	8007e04 <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2110      	movs	r1, #16
 8000a64:	4819      	ldr	r0, [pc, #100]	@ (8000acc <test_GPIO_pins+0xd4>)
 8000a66:	f002 f8cb 	bl	8002c00 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000a6a:	2064      	movs	r0, #100	@ 0x64
 8000a6c:	f001 fa9e 	bl	8001fac <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000a70:	2110      	movs	r1, #16
 8000a72:	4816      	ldr	r0, [pc, #88]	@ (8000acc <test_GPIO_pins+0xd4>)
 8000a74:	f002 f8ac 	bl	8002bd0 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after HIGH: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d101      	bne.n	8000a86 <test_GPIO_pins+0x8e>
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <test_GPIO_pins+0xd8>)
 8000a84:	e000      	b.n	8000a88 <test_GPIO_pins+0x90>
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <test_GPIO_pins+0xdc>)
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4816      	ldr	r0, [pc, #88]	@ (8000ae4 <test_GPIO_pins+0xec>)
 8000a8c:	f007 f9ba 	bl	8007e04 <iprintf>
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8000a90:	4815      	ldr	r0, [pc, #84]	@ (8000ae8 <test_GPIO_pins+0xf0>)
 8000a92:	f007 f9b7 	bl	8007e04 <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8000a96:	2110      	movs	r1, #16
 8000a98:	4814      	ldr	r0, [pc, #80]	@ (8000aec <test_GPIO_pins+0xf4>)
 8000a9a:	f002 f899 	bl	8002bd0 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d101      	bne.n	8000aac <test_GPIO_pins+0xb4>
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <test_GPIO_pins+0xd8>)
 8000aaa:	e000      	b.n	8000aae <test_GPIO_pins+0xb6>
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <test_GPIO_pins+0xdc>)
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <test_GPIO_pins+0xe0>)
 8000ab2:	f007 f9a7 	bl	8007e04 <iprintf>
    
    printf("===================\n\r");
 8000ab6:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <test_GPIO_pins+0xf8>)
 8000ab8:	f007 f9a4 	bl	8007e04 <iprintf>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	08008b58 	.word	0x08008b58
 8000ac8:	08008b70 	.word	0x08008b70
 8000acc:	58021000 	.word	0x58021000
 8000ad0:	08008b80 	.word	0x08008b80
 8000ad4:	08008b88 	.word	0x08008b88
 8000ad8:	08008b8c 	.word	0x08008b8c
 8000adc:	08008b94 	.word	0x08008b94
 8000ae0:	08008bac 	.word	0x08008bac
 8000ae4:	08008bc4 	.word	0x08008bc4
 8000ae8:	08008bdc 	.word	0x08008bdc
 8000aec:	58020c00 	.word	0x58020c00
 8000af0:	08008bec 	.word	0x08008bec

08000af4 <initialize_CC1201>:

// Function to initialize CC1201 with preferred settings
HAL_StatusTypeDef initialize_CC1201(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef hal_status;
    
    printf("Initializing CC1201...\n\r");
 8000afe:	4827      	ldr	r0, [pc, #156]	@ (8000b9c <initialize_CC1201+0xa8>)
 8000b00:	f007 f980 	bl	8007e04 <iprintf>
    
    // Step 1: Soft reset
    hal_status = CC1201_SoftReset(&status_byte);
 8000b04:	1d7b      	adds	r3, r7, #5
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fdd0 	bl	80006ac <CC1201_SoftReset>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d004      	beq.n	8000b20 <initialize_CC1201+0x2c>
        printf("CC1201 Reset Failed!\n\r");
 8000b16:	4822      	ldr	r0, [pc, #136]	@ (8000ba0 <initialize_CC1201+0xac>)
 8000b18:	f007 f974 	bl	8007e04 <iprintf>
        return hal_status;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	e039      	b.n	8000b94 <initialize_CC1201+0xa0>
    }
    printf("CC1201 Reset OK - Status: 0x%02X\n\r", status_byte);
 8000b20:	797b      	ldrb	r3, [r7, #5]
 8000b22:	4619      	mov	r1, r3
 8000b24:	481f      	ldr	r0, [pc, #124]	@ (8000ba4 <initialize_CC1201+0xb0>)
 8000b26:	f007 f96d 	bl	8007e04 <iprintf>
    
    HAL_Delay(100); // Wait for reset to complete
 8000b2a:	2064      	movs	r0, #100	@ 0x64
 8000b2c:	f001 fa3e 	bl	8001fac <HAL_Delay>
    
    // Step 2: Write preferred settings (basic registers only)
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 8000b30:	f7ff ff58 	bl	80009e4 <CC1201_GetPreferredSettings>
 8000b34:	60b8      	str	r0, [r7, #8]
    uint16_t num_settings = CC1201_GetNumPreferredSettings();
 8000b36:	f7ff ff4c 	bl	80009d2 <CC1201_GetNumPreferredSettings>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
    
    printf("Writing %d configuration registers...\n\r", num_settings);
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	4619      	mov	r1, r3
 8000b42:	4819      	ldr	r0, [pc, #100]	@ (8000ba8 <initialize_CC1201+0xb4>)
 8000b44:	f007 f95e 	bl	8007e04 <iprintf>
    hal_status = CC1201_WriteRegisterConfig(settings, num_settings);
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f7ff ff07 	bl	8000960 <CC1201_WriteRegisterConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <initialize_CC1201+0x72>
        printf("Configuration write failed!\n\r");
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <initialize_CC1201+0xb8>)
 8000b5e:	f007 f951 	bl	8007e04 <iprintf>
        return hal_status;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	e016      	b.n	8000b94 <initialize_CC1201+0xa0>
    }
    printf("Configuration complete!\n\r");
 8000b66:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <initialize_CC1201+0xbc>)
 8000b68:	f007 f94c 	bl	8007e04 <iprintf>
    
    // Step 3: Enter idle mode
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000b6c:	1d7b      	adds	r3, r7, #5
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fdc3 	bl	80006fa <CC1201_EnterIdleMode>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <initialize_CC1201+0x94>
        printf("Enter Idle Failed!\n\r");
 8000b7e:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <initialize_CC1201+0xc0>)
 8000b80:	f007 f940 	bl	8007e04 <iprintf>
        return hal_status;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	e005      	b.n	8000b94 <initialize_CC1201+0xa0>
    }
    printf("Enter Idle OK - Status: 0x%02X\n\r", status_byte);
 8000b88:	797b      	ldrb	r3, [r7, #5]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <initialize_CC1201+0xc4>)
 8000b8e:	f007 f939 	bl	8007e04 <iprintf>
    
    return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08008c04 	.word	0x08008c04
 8000ba0:	08008c20 	.word	0x08008c20
 8000ba4:	08008c38 	.word	0x08008c38
 8000ba8:	08008c5c 	.word	0x08008c5c
 8000bac:	08008c84 	.word	0x08008c84
 8000bb0:	08008ca4 	.word	0x08008ca4
 8000bb4:	08008cc0 	.word	0x08008cc0
 8000bb8:	08008cd8 	.word	0x08008cd8

08000bbc <test_CC1201_strobe_commands>:

// Function to test CC1201 strobe commands
void test_CC1201_strobe_commands(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hal_status;
    
    printf("Starting CC1201 Strobe Command Tests...\n\r");
 8000bc6:	4873      	ldr	r0, [pc, #460]	@ (8000d94 <test_CC1201_strobe_commands+0x1d8>)
 8000bc8:	f007 f91c 	bl	8007e04 <iprintf>
    
    // Test 1: NOP command (should always work)
    printf("Test 1: NOP Command\n\r");
 8000bcc:	4872      	ldr	r0, [pc, #456]	@ (8000d98 <test_CC1201_strobe_commands+0x1dc>)
 8000bce:	f007 f919 	bl	8007e04 <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8000bd2:	1dbb      	adds	r3, r7, #6
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fdaa 	bl	800072e <CC1201_Nop>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d105      	bne.n	8000bf0 <test_CC1201_strobe_commands+0x34>
        printf("  NOP Success - Status: 0x%02X\n\r", status_byte);
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	4619      	mov	r1, r3
 8000be8:	486c      	ldr	r0, [pc, #432]	@ (8000d9c <test_CC1201_strobe_commands+0x1e0>)
 8000bea:	f007 f90b 	bl	8007e04 <iprintf>
 8000bee:	e004      	b.n	8000bfa <test_CC1201_strobe_commands+0x3e>
    } else {
        printf("  NOP Failed - HAL Status: %d\n\r", hal_status);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	486a      	ldr	r0, [pc, #424]	@ (8000da0 <test_CC1201_strobe_commands+0x1e4>)
 8000bf6:	f007 f905 	bl	8007e04 <iprintf>
    }
    
    // Test 2: Soft Reset
    printf("Test 2: Soft Reset\n\r");
 8000bfa:	486a      	ldr	r0, [pc, #424]	@ (8000da4 <test_CC1201_strobe_commands+0x1e8>)
 8000bfc:	f007 f902 	bl	8007e04 <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 8000c00:	1dbb      	adds	r3, r7, #6
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd52 	bl	80006ac <CC1201_SoftReset>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d105      	bne.n	8000c1e <test_CC1201_strobe_commands+0x62>
        printf("  Soft Reset Success - Status: 0x%02X\n\r", status_byte);
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4864      	ldr	r0, [pc, #400]	@ (8000da8 <test_CC1201_strobe_commands+0x1ec>)
 8000c18:	f007 f8f4 	bl	8007e04 <iprintf>
 8000c1c:	e004      	b.n	8000c28 <test_CC1201_strobe_commands+0x6c>
    } else {
        printf("  Soft Reset Failed - HAL Status: %d\n\r", hal_status);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4862      	ldr	r0, [pc, #392]	@ (8000dac <test_CC1201_strobe_commands+0x1f0>)
 8000c24:	f007 f8ee 	bl	8007e04 <iprintf>
    }
    
    HAL_Delay(100); // Wait after reset
 8000c28:	2064      	movs	r0, #100	@ 0x64
 8000c2a:	f001 f9bf 	bl	8001fac <HAL_Delay>
    
    // Test 3: Enter Idle Mode
    printf("Test 3: Enter Idle Mode\n\r");
 8000c2e:	4860      	ldr	r0, [pc, #384]	@ (8000db0 <test_CC1201_strobe_commands+0x1f4>)
 8000c30:	f007 f8e8 	bl	8007e04 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000c34:	1dbb      	adds	r3, r7, #6
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd5f 	bl	80006fa <CC1201_EnterIdleMode>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <test_CC1201_strobe_commands+0x96>
        printf("  Enter Idle Success - Status: 0x%02X\n\r", status_byte);
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	485a      	ldr	r0, [pc, #360]	@ (8000db4 <test_CC1201_strobe_commands+0x1f8>)
 8000c4c:	f007 f8da 	bl	8007e04 <iprintf>
 8000c50:	e004      	b.n	8000c5c <test_CC1201_strobe_commands+0xa0>
    } else {
        printf("  Enter Idle Failed - HAL Status: %d\n\r", hal_status);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <test_CC1201_strobe_commands+0x1fc>)
 8000c58:	f007 f8d4 	bl	8007e04 <iprintf>
    }
    
    // Test 4: Read MARC State
    printf("Test 4: Read MARC State\n\r");
 8000c5c:	4857      	ldr	r0, [pc, #348]	@ (8000dbc <test_CC1201_strobe_commands+0x200>)
 8000c5e:	f007 f8d1 	bl	8007e04 <iprintf>
    uint8_t marc_state = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	717b      	strb	r3, [r7, #5]
    hal_status = CC1201_ReadMARCState(&marc_state);
 8000c66:	1d7b      	adds	r3, r7, #5
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fdf5 	bl	8000858 <CC1201_ReadMARCState>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <test_CC1201_strobe_commands+0xc8>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000c78:	797b      	ldrb	r3, [r7, #5]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4850      	ldr	r0, [pc, #320]	@ (8000dc0 <test_CC1201_strobe_commands+0x204>)
 8000c7e:	f007 f8c1 	bl	8007e04 <iprintf>
 8000c82:	e004      	b.n	8000c8e <test_CC1201_strobe_commands+0xd2>
    } else {
        printf("  Read MARC State Failed - HAL Status: %d\n\r", hal_status);
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4619      	mov	r1, r3
 8000c88:	484e      	ldr	r0, [pc, #312]	@ (8000dc4 <test_CC1201_strobe_commands+0x208>)
 8000c8a:	f007 f8bb 	bl	8007e04 <iprintf>
    }
    
    // Test 5: Calibrate Frequency Synthesizer
    printf("Test 5: Calibrate Frequency Synthesizer\n\r");
 8000c8e:	484e      	ldr	r0, [pc, #312]	@ (8000dc8 <test_CC1201_strobe_commands+0x20c>)
 8000c90:	f007 f8b8 	bl	8007e04 <iprintf>
    hal_status = CC1201_CalFreqSynth(&status_byte);
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fd15 	bl	80006c6 <CC1201_CalFreqSynth>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <test_CC1201_strobe_commands+0xf6>
        printf("  Cal Freq Synth Success - Status: 0x%02X\n\r", status_byte);
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4848      	ldr	r0, [pc, #288]	@ (8000dcc <test_CC1201_strobe_commands+0x210>)
 8000cac:	f007 f8aa 	bl	8007e04 <iprintf>
 8000cb0:	e004      	b.n	8000cbc <test_CC1201_strobe_commands+0x100>
    } else {
        printf("  Cal Freq Synth Failed - HAL Status: %d\n\r", hal_status);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4846      	ldr	r0, [pc, #280]	@ (8000dd0 <test_CC1201_strobe_commands+0x214>)
 8000cb8:	f007 f8a4 	bl	8007e04 <iprintf>
    }
    
    // Test 6: Enter RX Mode
    printf("Test 6: Enter RX Mode\n\r");
 8000cbc:	4845      	ldr	r0, [pc, #276]	@ (8000dd4 <test_CC1201_strobe_commands+0x218>)
 8000cbe:	f007 f8a1 	bl	8007e04 <iprintf>
    hal_status = CC1201_EnterRxMode(&status_byte);
 8000cc2:	1dbb      	adds	r3, r7, #6
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd0b 	bl	80006e0 <CC1201_EnterRxMode>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d105      	bne.n	8000ce0 <test_CC1201_strobe_commands+0x124>
        printf("  Enter RX Success - Status: 0x%02X\n\r", status_byte);
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	483f      	ldr	r0, [pc, #252]	@ (8000dd8 <test_CC1201_strobe_commands+0x21c>)
 8000cda:	f007 f893 	bl	8007e04 <iprintf>
 8000cde:	e004      	b.n	8000cea <test_CC1201_strobe_commands+0x12e>
    } else {
        printf("  Enter RX Failed - HAL Status: %d\n\r", hal_status);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	483d      	ldr	r0, [pc, #244]	@ (8000ddc <test_CC1201_strobe_commands+0x220>)
 8000ce6:	f007 f88d 	bl	8007e04 <iprintf>
    }
    
    HAL_Delay(10);
 8000cea:	200a      	movs	r0, #10
 8000cec:	f001 f95e 	bl	8001fac <HAL_Delay>
    
    // Test 7: Read MARC State again
    printf("Test 7: Read MARC State (after RX)\n\r");
 8000cf0:	483b      	ldr	r0, [pc, #236]	@ (8000de0 <test_CC1201_strobe_commands+0x224>)
 8000cf2:	f007 f887 	bl	8007e04 <iprintf>
    hal_status = CC1201_ReadMARCState(&marc_state);
 8000cf6:	1d7b      	adds	r3, r7, #5
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fdad 	bl	8000858 <CC1201_ReadMARCState>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d105      	bne.n	8000d14 <test_CC1201_strobe_commands+0x158>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	482c      	ldr	r0, [pc, #176]	@ (8000dc0 <test_CC1201_strobe_commands+0x204>)
 8000d0e:	f007 f879 	bl	8007e04 <iprintf>
 8000d12:	e004      	b.n	8000d1e <test_CC1201_strobe_commands+0x162>
    } else {
        printf("  Read MARC State Failed - HAL Status: %d\n\r", hal_status);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4619      	mov	r1, r3
 8000d18:	482a      	ldr	r0, [pc, #168]	@ (8000dc4 <test_CC1201_strobe_commands+0x208>)
 8000d1a:	f007 f873 	bl	8007e04 <iprintf>
    }
    
    // Test 8: Flush RX FIFO
    printf("Test 8: Flush RX FIFO\n\r");
 8000d1e:	4831      	ldr	r0, [pc, #196]	@ (8000de4 <test_CC1201_strobe_commands+0x228>)
 8000d20:	f007 f870 	bl	8007e04 <iprintf>
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcf4 	bl	8000714 <CC1201_FlushRxFifo>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d105      	bne.n	8000d42 <test_CC1201_strobe_commands+0x186>
        printf("  Flush RX FIFO Success - Status: 0x%02X\n\r", status_byte);
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482b      	ldr	r0, [pc, #172]	@ (8000de8 <test_CC1201_strobe_commands+0x22c>)
 8000d3c:	f007 f862 	bl	8007e04 <iprintf>
 8000d40:	e004      	b.n	8000d4c <test_CC1201_strobe_commands+0x190>
    } else {
        printf("  Flush RX FIFO Failed - HAL Status: %d\n\r", hal_status);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4619      	mov	r1, r3
 8000d46:	4829      	ldr	r0, [pc, #164]	@ (8000dec <test_CC1201_strobe_commands+0x230>)
 8000d48:	f007 f85c 	bl	8007e04 <iprintf>
    }
    
    // Test 9: Check RX bytes
    printf("Test 9: Check RX Bytes\n\r");
 8000d4c:	4828      	ldr	r0, [pc, #160]	@ (8000df0 <test_CC1201_strobe_commands+0x234>)
 8000d4e:	f007 f859 	bl	8007e04 <iprintf>
    uint8_t rx_bytes = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	713b      	strb	r3, [r7, #4]
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fd8b 	bl	8000874 <CC1201_GetNumRXBytes>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <test_CC1201_strobe_commands+0x1b8>
        printf("  RX Bytes: %d\n\r", rx_bytes);
 8000d68:	793b      	ldrb	r3, [r7, #4]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4821      	ldr	r0, [pc, #132]	@ (8000df4 <test_CC1201_strobe_commands+0x238>)
 8000d6e:	f007 f849 	bl	8007e04 <iprintf>
 8000d72:	e004      	b.n	8000d7e <test_CC1201_strobe_commands+0x1c2>
    } else {
        printf("  Get RX Bytes Failed - HAL Status: %d\n\r", hal_status);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4619      	mov	r1, r3
 8000d78:	481f      	ldr	r0, [pc, #124]	@ (8000df8 <test_CC1201_strobe_commands+0x23c>)
 8000d7a:	f007 f843 	bl	8007e04 <iprintf>
    }
    
    printf("CC1201 Strobe Command Tests Complete!\n\r");
 8000d7e:	481f      	ldr	r0, [pc, #124]	@ (8000dfc <test_CC1201_strobe_commands+0x240>)
 8000d80:	f007 f840 	bl	8007e04 <iprintf>
    printf("========================================\n\r");
 8000d84:	481e      	ldr	r0, [pc, #120]	@ (8000e00 <test_CC1201_strobe_commands+0x244>)
 8000d86:	f007 f83d 	bl	8007e04 <iprintf>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08008cfc 	.word	0x08008cfc
 8000d98:	08008d28 	.word	0x08008d28
 8000d9c:	08008d40 	.word	0x08008d40
 8000da0:	08008d64 	.word	0x08008d64
 8000da4:	08008d84 	.word	0x08008d84
 8000da8:	08008d9c 	.word	0x08008d9c
 8000dac:	08008dc4 	.word	0x08008dc4
 8000db0:	08008dec 	.word	0x08008dec
 8000db4:	08008e08 	.word	0x08008e08
 8000db8:	08008e30 	.word	0x08008e30
 8000dbc:	08008e58 	.word	0x08008e58
 8000dc0:	08008e74 	.word	0x08008e74
 8000dc4:	08008e8c 	.word	0x08008e8c
 8000dc8:	08008eb8 	.word	0x08008eb8
 8000dcc:	08008ee4 	.word	0x08008ee4
 8000dd0:	08008f10 	.word	0x08008f10
 8000dd4:	08008f3c 	.word	0x08008f3c
 8000dd8:	08008f54 	.word	0x08008f54
 8000ddc:	08008f7c 	.word	0x08008f7c
 8000de0:	08008fa4 	.word	0x08008fa4
 8000de4:	08008fcc 	.word	0x08008fcc
 8000de8:	08008fe4 	.word	0x08008fe4
 8000dec:	08009010 	.word	0x08009010
 8000df0:	0800903c 	.word	0x0800903c
 8000df4:	08009058 	.word	0x08009058
 8000df8:	0800906c 	.word	0x0800906c
 8000dfc:	08009098 	.word	0x08009098
 8000e00:	080090c0 	.word	0x080090c0

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e0a:	f000 faeb 	bl	80013e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f001 f83b 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f943 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 fa6b 	bl	80012f0 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000e1a:	f000 fa13 	bl	8001244 <MX_SPI4_Init>
  MX_SPI2_Init();
 8000e1e:	f000 f9bb 	bl	8001198 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  
  // Test GPIO pins first
  test_GPIO_pins();
 8000e22:	f7ff fde9 	bl	80009f8 <test_GPIO_pins>
  
  // Initialize and test CC1201 communication
  printf("Starting CC1201 initialization...\n\r");
 8000e26:	4882      	ldr	r0, [pc, #520]	@ (8001030 <main+0x22c>)
 8000e28:	f006 ffec 	bl	8007e04 <iprintf>
  HAL_Delay(100); // Give CC1201 time to power up
 8000e2c:	2064      	movs	r0, #100	@ 0x64
 8000e2e:	f001 f8bd 	bl	8001fac <HAL_Delay>
  
  if (initialize_CC1201() == HAL_OK) {
 8000e32:	f7ff fe5f 	bl	8000af4 <initialize_CC1201>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d106      	bne.n	8000e4a <main+0x46>
      printf("CC1201 initialization successful!\n\r");
 8000e3c:	487d      	ldr	r0, [pc, #500]	@ (8001034 <main+0x230>)
 8000e3e:	f006 ffe1 	bl	8007e04 <iprintf>
      BSP_LED_On(LED_GREEN);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 fe40 	bl	8001ac8 <BSP_LED_On>
 8000e48:	e005      	b.n	8000e56 <main+0x52>
  } else {
      printf("CC1201 initialization failed!\n\r");
 8000e4a:	487b      	ldr	r0, [pc, #492]	@ (8001038 <main+0x234>)
 8000e4c:	f006 ffda 	bl	8007e04 <iprintf>
      BSP_LED_On(LED_RED);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fe39 	bl	8001ac8 <BSP_LED_On>
  }
  
  // Run initial strobe command tests
  test_CC1201_strobe_commands();
 8000e56:	f7ff feb1 	bl	8000bbc <test_CC1201_strobe_commands>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 fdbe 	bl	80019dc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 fdbb 	bl	80019dc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 fdb8 	bl	80019dc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 fea8 	bl	8001bc4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e74:	4b71      	ldr	r3, [pc, #452]	@ (800103c <main+0x238>)
 8000e76:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e7a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800103c <main+0x238>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e82:	4b6e      	ldr	r3, [pc, #440]	@ (800103c <main+0x238>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e88:	4b6c      	ldr	r3, [pc, #432]	@ (800103c <main+0x238>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	@ (800103c <main+0x238>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e94:	4969      	ldr	r1, [pc, #420]	@ (800103c <main+0x238>)
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 ff18 	bl	8001ccc <BSP_COM_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <main+0xa2>
  {
    Error_Handler();
 8000ea2:	f000 fadf 	bl	8001464 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000ea6:	4866      	ldr	r0, [pc, #408]	@ (8001040 <main+0x23c>)
 8000ea8:	f006 ffac 	bl	8007e04 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 fe0b 	bl	8001ac8 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 fe08 	bl	8001ac8 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 fe05 	bl	8001ac8 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test_time = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  const uint32_t test_interval = 5000; // Test every 5 seconds
 8000ec2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ec6:	60bb      	str	r3, [r7, #8]
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8001044 <main+0x240>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d110      	bne.n	8000ef2 <main+0xee>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8001044 <main+0x240>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 fe4a 	bl	8001b70 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 fe47 	bl	8001b70 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f000 fe44 	bl	8001b70 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Button pressed - Running CC1201 test...\n\r");
 8000ee8:	4857      	ldr	r0, [pc, #348]	@ (8001048 <main+0x244>)
 8000eea:	f006 ff8b 	bl	8007e04 <iprintf>
      test_CC1201_strobe_commands();
 8000eee:	f7ff fe65 	bl	8000bbc <test_CC1201_strobe_commands>
    }
    
    // Periodic CC1201 communication test
    if (HAL_GetTick() - last_test_time > test_interval) {
 8000ef2:	f001 f84f 	bl	8001f94 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d2e2      	bcs.n	8000ec8 <main+0xc4>
        last_test_time = HAL_GetTick();
 8000f02:	f001 f847 	bl	8001f94 <HAL_GetTick>
 8000f06:	60f8      	str	r0, [r7, #12]
        
        // Simple NOP test to verify communication
        uint8_t status_byte = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	70fb      	strb	r3, [r7, #3]
        
        // First check CS pin state
        GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	484f      	ldr	r0, [pc, #316]	@ (800104c <main+0x248>)
 8000f10:	f001 fe5e 	bl	8002bd0 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
        printf("CS Pin State: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <main+0x11e>
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001050 <main+0x24c>)
 8000f20:	e000      	b.n	8000f24 <main+0x120>
 8000f22:	4b4c      	ldr	r3, [pc, #304]	@ (8001054 <main+0x250>)
 8000f24:	4619      	mov	r1, r3
 8000f26:	484c      	ldr	r0, [pc, #304]	@ (8001058 <main+0x254>)
 8000f28:	f006 ff6c 	bl	8007e04 <iprintf>
        
        // Try the NOP command
        HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8000f2c:	1cfb      	adds	r3, r7, #3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fbfd 	bl	800072e <CC1201_Nop>
 8000f34:	4603      	mov	r3, r0
 8000f36:	71bb      	strb	r3, [r7, #6]
        
        printf("Periodic test - HAL Status: %d, CC1201 Status: 0x%02X\n\r", hal_status, status_byte);
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4847      	ldr	r0, [pc, #284]	@ (800105c <main+0x258>)
 8000f40:	f006 ff60 	bl	8007e04 <iprintf>
        
        // Decode CC1201 status byte
        uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	717b      	strb	r3, [r7, #5]
        uint8_t fifo_bytes = status_byte & 0x0F;
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	f003 030f 	and.w	r3, r3, #15
 8000f50:	713b      	strb	r3, [r7, #4]
        printf("  Radio State: 0x%X", radio_state);
 8000f52:	797b      	ldrb	r3, [r7, #5]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4842      	ldr	r0, [pc, #264]	@ (8001060 <main+0x25c>)
 8000f58:	f006 ff54 	bl	8007e04 <iprintf>
        switch(radio_state) {
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	d832      	bhi.n	8000fc8 <main+0x1c4>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <main+0x164>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f89 	.word	0x08000f89
 8000f6c:	08000f91 	.word	0x08000f91
 8000f70:	08000f99 	.word	0x08000f99
 8000f74:	08000fa1 	.word	0x08000fa1
 8000f78:	08000fa9 	.word	0x08000fa9
 8000f7c:	08000fb1 	.word	0x08000fb1
 8000f80:	08000fb9 	.word	0x08000fb9
 8000f84:	08000fc1 	.word	0x08000fc1
            case 0x0: printf(" (IDLE)"); break;
 8000f88:	4836      	ldr	r0, [pc, #216]	@ (8001064 <main+0x260>)
 8000f8a:	f006 ff3b 	bl	8007e04 <iprintf>
 8000f8e:	e01f      	b.n	8000fd0 <main+0x1cc>
            case 0x1: printf(" (RX)"); break;
 8000f90:	4835      	ldr	r0, [pc, #212]	@ (8001068 <main+0x264>)
 8000f92:	f006 ff37 	bl	8007e04 <iprintf>
 8000f96:	e01b      	b.n	8000fd0 <main+0x1cc>
            case 0x2: printf(" (TX)"); break;
 8000f98:	4834      	ldr	r0, [pc, #208]	@ (800106c <main+0x268>)
 8000f9a:	f006 ff33 	bl	8007e04 <iprintf>
 8000f9e:	e017      	b.n	8000fd0 <main+0x1cc>
            case 0x3: printf(" (FSTXON)"); break;
 8000fa0:	4833      	ldr	r0, [pc, #204]	@ (8001070 <main+0x26c>)
 8000fa2:	f006 ff2f 	bl	8007e04 <iprintf>
 8000fa6:	e013      	b.n	8000fd0 <main+0x1cc>
            case 0x4: printf(" (CALIBRATE)"); break;
 8000fa8:	4832      	ldr	r0, [pc, #200]	@ (8001074 <main+0x270>)
 8000faa:	f006 ff2b 	bl	8007e04 <iprintf>
 8000fae:	e00f      	b.n	8000fd0 <main+0x1cc>
            case 0x5: printf(" (SETTLING)"); break;
 8000fb0:	4831      	ldr	r0, [pc, #196]	@ (8001078 <main+0x274>)
 8000fb2:	f006 ff27 	bl	8007e04 <iprintf>
 8000fb6:	e00b      	b.n	8000fd0 <main+0x1cc>
            case 0x6: printf(" (RX_FIFO_ERR)"); break;
 8000fb8:	4830      	ldr	r0, [pc, #192]	@ (800107c <main+0x278>)
 8000fba:	f006 ff23 	bl	8007e04 <iprintf>
 8000fbe:	e007      	b.n	8000fd0 <main+0x1cc>
            case 0x7: printf(" (TX_FIFO_ERR)"); break;
 8000fc0:	482f      	ldr	r0, [pc, #188]	@ (8001080 <main+0x27c>)
 8000fc2:	f006 ff1f 	bl	8007e04 <iprintf>
 8000fc6:	e003      	b.n	8000fd0 <main+0x1cc>
            default: printf(" (UNKNOWN)"); break;
 8000fc8:	482e      	ldr	r0, [pc, #184]	@ (8001084 <main+0x280>)
 8000fca:	f006 ff1b 	bl	8007e04 <iprintf>
 8000fce:	bf00      	nop
        }
        printf(", FIFO: %d bytes\n\r", fifo_bytes);
 8000fd0:	793b      	ldrb	r3, [r7, #4]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482c      	ldr	r0, [pc, #176]	@ (8001088 <main+0x284>)
 8000fd6:	f006 ff15 	bl	8007e04 <iprintf>
        
        if (hal_status == HAL_OK && radio_state == 0x0) {
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <main+0x1f6>
 8000fe0:	797b      	ldrb	r3, [r7, #5]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <main+0x1f6>
            BSP_LED_On(LED_GREEN);  // Communication OK and radio in expected state
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fd6e 	bl	8001ac8 <BSP_LED_On>
            BSP_LED_Off(LED_RED);
 8000fec:	2002      	movs	r0, #2
 8000fee:	f000 fd95 	bl	8001b1c <BSP_LED_Off>
            printf("  ✓ Communication working! CC1201 responding correctly.\n\r");
 8000ff2:	4826      	ldr	r0, [pc, #152]	@ (800108c <main+0x288>)
 8000ff4:	f006 ff06 	bl	8007e04 <iprintf>
 8000ff8:	e018      	b.n	800102c <main+0x228>
        } else {
            BSP_LED_Off(LED_GREEN);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fd8e 	bl	8001b1c <BSP_LED_Off>
            BSP_LED_On(LED_RED);   // Communication error
 8001000:	2002      	movs	r0, #2
 8001002:	f000 fd61 	bl	8001ac8 <BSP_LED_On>
            
            // Additional diagnostics
            if (hal_status != HAL_OK) {
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <main+0x20e>
                printf("  HAL SPI Error - Check SPI configuration\n\r");
 800100c:	4820      	ldr	r0, [pc, #128]	@ (8001090 <main+0x28c>)
 800100e:	f006 fef9 	bl	8007e04 <iprintf>
            }
            if (status_byte == 0xFF) {
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	2bff      	cmp	r3, #255	@ 0xff
 8001016:	d102      	bne.n	800101e <main+0x21a>
                printf("  Status 0xFF - Check connections/power\n\r");
 8001018:	481e      	ldr	r0, [pc, #120]	@ (8001094 <main+0x290>)
 800101a:	f006 fef3 	bl	8007e04 <iprintf>
            }
            if (status_byte == 0x00) {
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f47f af51 	bne.w	8000ec8 <main+0xc4>
                printf("  Status 0x00 - Check CS pin/timing\n\r");
 8001026:	481c      	ldr	r0, [pc, #112]	@ (8001098 <main+0x294>)
 8001028:	f006 feec 	bl	8007e04 <iprintf>
    if (BspButtonState == BUTTON_PRESSED)
 800102c:	e74c      	b.n	8000ec8 <main+0xc4>
 800102e:	bf00      	nop
 8001030:	080090ec 	.word	0x080090ec
 8001034:	08009110 	.word	0x08009110
 8001038:	08009134 	.word	0x08009134
 800103c:	240000a4 	.word	0x240000a4
 8001040:	08009154 	.word	0x08009154
 8001044:	240000b4 	.word	0x240000b4
 8001048:	08009170 	.word	0x08009170
 800104c:	58021000 	.word	0x58021000
 8001050:	08008b80 	.word	0x08008b80
 8001054:	08008b88 	.word	0x08008b88
 8001058:	0800919c 	.word	0x0800919c
 800105c:	080091b0 	.word	0x080091b0
 8001060:	080091e8 	.word	0x080091e8
 8001064:	080091fc 	.word	0x080091fc
 8001068:	08009204 	.word	0x08009204
 800106c:	0800920c 	.word	0x0800920c
 8001070:	08009214 	.word	0x08009214
 8001074:	08009220 	.word	0x08009220
 8001078:	08009230 	.word	0x08009230
 800107c:	0800923c 	.word	0x0800923c
 8001080:	0800924c 	.word	0x0800924c
 8001084:	0800925c 	.word	0x0800925c
 8001088:	08009268 	.word	0x08009268
 800108c:	0800927c 	.word	0x0800927c
 8001090:	080092b8 	.word	0x080092b8
 8001094:	080092e4 	.word	0x080092e4
 8001098:	08009310 	.word	0x08009310

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09c      	sub	sp, #112	@ 0x70
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a6:	224c      	movs	r2, #76	@ 0x4c
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 feff 	bl	8007eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2220      	movs	r2, #32
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 fef9 	bl	8007eae <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010bc:	2002      	movs	r0, #2
 80010be:	f001 fdd3 	bl	8002c68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <SystemClock_Config+0xf4>)
 80010c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ca:	4a31      	ldr	r2, [pc, #196]	@ (8001190 <SystemClock_Config+0xf4>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <SystemClock_Config+0xf4>)
 80010d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <SystemClock_Config+0xf8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001194 <SystemClock_Config+0xf8>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <SystemClock_Config+0xf8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010f8:	bf00      	nop
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <SystemClock_Config+0xf8>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001106:	d1f8      	bne.n	80010fa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800110c:	2301      	movs	r3, #1
 800110e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2340      	movs	r3, #64	@ 0x40
 8001112:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800111c:	2304      	movs	r3, #4
 800111e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001120:	230a      	movs	r3, #10
 8001122:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001128:	2302      	movs	r3, #2
 800112a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001130:	230c      	movs	r3, #12
 8001132:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001134:	2302      	movs	r3, #2
 8001136:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fdcb 	bl	8002cdc <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800114c:	f000 f98a 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	233f      	movs	r3, #63	@ 0x3f
 8001152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2101      	movs	r1, #1
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fa0a 	bl	8003590 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001182:	f000 f96f 	bl	8001464 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3770      	adds	r7, #112	@ 0x70
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	58000400 	.word	0x58000400
 8001194:	58024800 	.word	0x58024800

08001198 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <MX_SPI2_Init+0xa4>)
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <MX_SPI2_Init+0xa8>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011b2:	2207      	movs	r2, #7
 80011b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011cc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80011d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_SPI2_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_SPI2_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_SPI2_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_SPI2_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_SPI2_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_SPI2_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_SPI2_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_SPI2_Init+0xa4>)
 8001228:	f004 fb6a 	bl	8005900 <HAL_SPI_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001232:	f000 f917 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	240000b8 	.word	0x240000b8
 8001240:	40003800 	.word	0x40003800

08001244 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001248:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 800124a:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <MX_SPI4_Init+0xa8>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001250:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001254:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 800125e:	2203      	movs	r2, #3
 8001260:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001270:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001274:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_SPI4_Init+0xa4>)
 80012d4:	f004 fb14 	bl	8005900 <HAL_SPI_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80012de:	f000 f8c1 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24000140 	.word	0x24000140
 80012ec:	40013400 	.word	0x40013400

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	4a33      	ldr	r2, [pc, #204]	@ (80013dc <MX_GPIO_Init+0xec>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001316:	4b31      	ldr	r3, [pc, #196]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	4a2c      	ldr	r2, [pc, #176]	@ (80013dc <MX_GPIO_Init+0xec>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001334:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	4a24      	ldr	r2, [pc, #144]	@ (80013dc <MX_GPIO_Init+0xec>)
 800134a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	4a15      	ldr	r2, [pc, #84]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138e:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <MX_GPIO_Init+0xec>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_GPIO_Init+0xec>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <MX_GPIO_Init+0xec>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_GPIO_Init+0xec>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ba:	2310      	movs	r3, #16
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_GPIO_Init+0xf0>)
 80013d0:	f001 fa4e 	bl	8002870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d4:	bf00      	nop
 80013d6:	3730      	adds	r7, #48	@ 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020c00 	.word	0x58020c00

080013e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013f6:	f000 ff19 	bl	800222c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013fa:	2301      	movs	r3, #1
 80013fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013fe:	2300      	movs	r3, #0
 8001400:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001406:	231f      	movs	r3, #31
 8001408:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800140a:	2387      	movs	r3, #135	@ 0x87
 800140c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800140e:	2300      	movs	r3, #0
 8001410:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001412:	2300      	movs	r3, #0
 8001414:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001416:	2301      	movs	r3, #1
 8001418:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001426:	463b      	mov	r3, r7
 8001428:	4618      	mov	r0, r3
 800142a:	f000 ff37 	bl	800229c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800142e:	2004      	movs	r0, #4
 8001430:	f000 ff14 	bl	800225c <HAL_MPU_Enable>

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <BSP_PB_Callback+0x24>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	240000b4 	.word	0x240000b4

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <Error_Handler+0x8>

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_MspInit+0x30>)
 8001478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800147c:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_MspInit+0x30>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_MspInit+0x30>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	58024400 	.word	0x58024400

080014a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b0bc      	sub	sp, #240	@ 0xf0
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	22c0      	movs	r2, #192	@ 0xc0
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 fcf2 	bl	8007eae <memset>
  if(hspi->Instance==SPI2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001638 <HAL_SPI_MspInit+0x194>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d146      	bne.n	8001562 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80014d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fbdd 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80014f4:	f7ff ffb6 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f8:	4b50      	ldr	r3, [pc, #320]	@ (800163c <HAL_SPI_MspInit+0x198>)
 80014fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014fe:	4a4f      	ldr	r2, [pc, #316]	@ (800163c <HAL_SPI_MspInit+0x198>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001504:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001508:	4b4c      	ldr	r3, [pc, #304]	@ (800163c <HAL_SPI_MspInit+0x198>)
 800150a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800150e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b49      	ldr	r3, [pc, #292]	@ (800163c <HAL_SPI_MspInit+0x198>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151c:	4a47      	ldr	r2, [pc, #284]	@ (800163c <HAL_SPI_MspInit+0x198>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001526:	4b45      	ldr	r3, [pc, #276]	@ (800163c <HAL_SPI_MspInit+0x198>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001534:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001538:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800154e:	2305      	movs	r3, #5
 8001550:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001558:	4619      	mov	r1, r3
 800155a:	4839      	ldr	r0, [pc, #228]	@ (8001640 <HAL_SPI_MspInit+0x19c>)
 800155c:	f001 f988 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001560:	e066      	b.n	8001630 <HAL_SPI_MspInit+0x18c>
  else if(hspi->Instance==SPI4)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a37      	ldr	r2, [pc, #220]	@ (8001644 <HAL_SPI_MspInit+0x1a0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d161      	bne.n	8001630 <HAL_SPI_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001578:	2300      	movs	r3, #0
 800157a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fb91 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 800158c:	f7ff ff6a 	bl	8001464 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001590:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_SPI_MspInit+0x198>)
 8001592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001596:	4a29      	ldr	r2, [pc, #164]	@ (800163c <HAL_SPI_MspInit+0x198>)
 8001598:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800159c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015a0:	4b26      	ldr	r3, [pc, #152]	@ (800163c <HAL_SPI_MspInit+0x198>)
 80015a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ae:	4b23      	ldr	r3, [pc, #140]	@ (800163c <HAL_SPI_MspInit+0x198>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b4:	4a21      	ldr	r2, [pc, #132]	@ (800163c <HAL_SPI_MspInit+0x198>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015be:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <HAL_SPI_MspInit+0x198>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015cc:	2364      	movs	r3, #100	@ 0x64
 80015ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015e4:	2305      	movs	r3, #5
 80015e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015ee:	4619      	mov	r1, r3
 80015f0:	4815      	ldr	r0, [pc, #84]	@ (8001648 <HAL_SPI_MspInit+0x1a4>)
 80015f2:	f001 f93d 	bl	8002870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f6:	2310      	movs	r3, #16
 80015f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001602:	2301      	movs	r3, #1
 8001604:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800160e:	2305      	movs	r3, #5
 8001610:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001614:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001618:	4619      	mov	r1, r3
 800161a:	480b      	ldr	r0, [pc, #44]	@ (8001648 <HAL_SPI_MspInit+0x1a4>)
 800161c:	f001 f928 	bl	8002870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2054      	movs	r0, #84	@ 0x54
 8001626:	f000 fdcc 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800162a:	2054      	movs	r0, #84	@ 0x54
 800162c:	f000 fde3 	bl	80021f6 <HAL_NVIC_EnableIRQ>
}
 8001630:	bf00      	nop
 8001632:	37f0      	adds	r7, #240	@ 0xf0
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40003800 	.word	0x40003800
 800163c:	58024400 	.word	0x58024400
 8001640:	58020400 	.word	0x58020400
 8001644:	40013400 	.word	0x40013400
 8001648:	58021000 	.word	0x58021000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a2:	f000 fc63 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}

080016aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 fafa 	bl	8001ca8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <SPI4_IRQHandler+0x10>)
 80016be:	f004 ff6b 	bl	8006598 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	24000140 	.word	0x24000140

080016cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e00a      	b.n	80016f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016de:	f3af 8000 	nop.w
 80016e2:	4601      	mov	r1, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf0      	blt.n	80016de <_read+0x12>
  }

  return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fb35 	bl	8001d90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x12>
  }
  return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_close>:

int _close(int file)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001766:	605a      	str	r2, [r3, #4]
  return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_isatty>:

int _isatty(int file)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f006 fbb8 	bl	8007f4c <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24080000 	.word	0x24080000
 8001808:	00000400 	.word	0x00000400
 800180c:	240001c8 	.word	0x240001c8
 8001810:	240003c0 	.word	0x240003c0

08001814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <SystemInit+0x114>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a42      	ldr	r2, [pc, #264]	@ (8001928 <SystemInit+0x114>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001828:	4b40      	ldr	r3, [pc, #256]	@ (800192c <SystemInit+0x118>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	2b06      	cmp	r3, #6
 8001832:	d807      	bhi.n	8001844 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <SystemInit+0x118>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 030f 	bic.w	r3, r3, #15
 800183c:	4a3b      	ldr	r2, [pc, #236]	@ (800192c <SystemInit+0x118>)
 800183e:	f043 0307 	orr.w	r3, r3, #7
 8001842:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001844:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <SystemInit+0x11c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a39      	ldr	r2, [pc, #228]	@ (8001930 <SystemInit+0x11c>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001850:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <SystemInit+0x11c>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001856:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <SystemInit+0x11c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4935      	ldr	r1, [pc, #212]	@ (8001930 <SystemInit+0x11c>)
 800185c:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <SystemInit+0x120>)
 800185e:	4013      	ands	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001862:	4b32      	ldr	r3, [pc, #200]	@ (800192c <SystemInit+0x118>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800186e:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <SystemInit+0x118>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 030f 	bic.w	r3, r3, #15
 8001876:	4a2d      	ldr	r2, [pc, #180]	@ (800192c <SystemInit+0x118>)
 8001878:	f043 0307 	orr.w	r3, r3, #7
 800187c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800187e:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <SystemInit+0x11c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <SystemInit+0x11c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800188a:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <SystemInit+0x11c>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <SystemInit+0x11c>)
 8001892:	4a29      	ldr	r2, [pc, #164]	@ (8001938 <SystemInit+0x124>)
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <SystemInit+0x11c>)
 8001898:	4a28      	ldr	r2, [pc, #160]	@ (800193c <SystemInit+0x128>)
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <SystemInit+0x11c>)
 800189e:	4a28      	ldr	r2, [pc, #160]	@ (8001940 <SystemInit+0x12c>)
 80018a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018a2:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <SystemInit+0x11c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <SystemInit+0x11c>)
 80018aa:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <SystemInit+0x12c>)
 80018ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <SystemInit+0x11c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <SystemInit+0x11c>)
 80018b6:	4a22      	ldr	r2, [pc, #136]	@ (8001940 <SystemInit+0x12c>)
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <SystemInit+0x11c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <SystemInit+0x11c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001930 <SystemInit+0x11c>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <SystemInit+0x11c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <SystemInit+0x130>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <SystemInit+0x134>)
 80018d8:	4013      	ands	r3, r2
 80018da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018de:	d202      	bcs.n	80018e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <SystemInit+0x138>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <SystemInit+0x11c>)
 80018e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d113      	bne.n	800191c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <SystemInit+0x11c>)
 80018f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <SystemInit+0x11c>)
 80018fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001900:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <SystemInit+0x13c>)
 8001906:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800190a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <SystemInit+0x11c>)
 800190e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001912:	4a07      	ldr	r2, [pc, #28]	@ (8001930 <SystemInit+0x11c>)
 8001914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001918:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	52002000 	.word	0x52002000
 8001930:	58024400 	.word	0x58024400
 8001934:	eaf6ed7f 	.word	0xeaf6ed7f
 8001938:	02020200 	.word	0x02020200
 800193c:	01ff0000 	.word	0x01ff0000
 8001940:	01010280 	.word	0x01010280
 8001944:	5c001000 	.word	0x5c001000
 8001948:	ffff0000 	.word	0xffff0000
 800194c:	51008108 	.word	0x51008108
 8001950:	52004000 	.word	0x52004000

08001954 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <ExitRun0Mode+0x2c>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <ExitRun0Mode+0x2c>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001964:	bf00      	nop
 8001966:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <ExitRun0Mode+0x2c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f9      	beq.n	8001966 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	58024800 	.word	0x58024800

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80019c0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001988:	f7ff ffe4 	bl	8001954 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800198c:	f7ff ff42 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	@ (80019c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	@ (80019d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f006 facf 	bl	8007f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff fa23 	bl	8000e04 <main>
  bx  lr
 80019be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019c8:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80019cc:	080094f4 	.word	0x080094f4
  ldr r2, =_sbss
 80019d0:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80019d4:	240003bc 	.word	0x240003bc

080019d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC3_IRQHandler>
	...

080019dc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	@ 0x30
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <BSP_LED_Init+0x28>
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d006      	beq.n	8001a04 <BSP_LED_Init+0x28>
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d003      	beq.n	8001a04 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019fc:	f06f 0301 	mvn.w	r3, #1
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a02:	e055      	b.n	8001ab0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a10:	4a2a      	ldr	r2, [pc, #168]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a1a:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	e021      	b.n	8001a6e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10f      	bne.n	8001a50 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a36:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	e00e      	b.n	8001a6e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a56:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <BSP_LED_Init+0xe0>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <BSP_LED_Init+0xe4>)
 8001a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a76:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac4 <BSP_LED_Init+0xe8>)
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	f107 0218 	add.w	r2, r7, #24
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 feec 	bl	8002870 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <BSP_LED_Init+0xe8>)
 8001a9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <BSP_LED_Init+0xe4>)
 8001aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f001 f8a8 	bl	8002c00 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3730      	adds	r7, #48	@ 0x30
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	0800948c 	.word	0x0800948c
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <BSP_LED_On+0x28>
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d006      	beq.n	8001af0 <BSP_LED_On+0x28>
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d003      	beq.n	8001af0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ae8:	f06f 0301 	mvn.w	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e00b      	b.n	8001b08 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4a08      	ldr	r2, [pc, #32]	@ (8001b14 <BSP_LED_On+0x4c>)
 8001af4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <BSP_LED_On+0x50>)
 8001afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4619      	mov	r1, r3
 8001b04:	f001 f87c 	bl	8002c00 <HAL_GPIO_WritePin>
  }

  return ret;
 8001b08:	68fb      	ldr	r3, [r7, #12]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c
 8001b18:	0800948c 	.word	0x0800948c

08001b1c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d009      	beq.n	8001b44 <BSP_LED_Off+0x28>
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d006      	beq.n	8001b44 <BSP_LED_Off+0x28>
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d003      	beq.n	8001b44 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b3c:	f06f 0301 	mvn.w	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e00b      	b.n	8001b5c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <BSP_LED_Off+0x4c>)
 8001b48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <BSP_LED_Off+0x50>)
 8001b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b54:	2200      	movs	r2, #0
 8001b56:	4619      	mov	r1, r3
 8001b58:	f001 f852 	bl	8002c00 <HAL_GPIO_WritePin>
  }

  return ret;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2400000c 	.word	0x2400000c
 8001b6c:	0800948c 	.word	0x0800948c

08001b70 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <BSP_LED_Toggle+0x28>
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d006      	beq.n	8001b98 <BSP_LED_Toggle+0x28>
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d003      	beq.n	8001b98 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b90:	f06f 0301 	mvn.w	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e00b      	b.n	8001bb0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4a08      	ldr	r2, [pc, #32]	@ (8001bbc <BSP_LED_Toggle+0x4c>)
 8001b9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4907      	ldr	r1, [pc, #28]	@ (8001bc0 <BSP_LED_Toggle+0x50>)
 8001ba4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f001 f841 	bl	8002c32 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2400000c 	.word	0x2400000c
 8001bc0:	0800948c 	.word	0x0800948c

08001bc4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	71fb      	strb	r3, [r7, #7]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <BSP_PB_Init+0xcc>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bda:	4a2d      	ldr	r2, [pc, #180]	@ (8001c90 <BSP_PB_Init+0xcc>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <BSP_PB_Init+0xcc>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a21      	ldr	r2, [pc, #132]	@ (8001c94 <BSP_PB_Init+0xd0>)
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	f107 020c 	add.w	r2, r7, #12
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fe29 	bl	8002870 <HAL_GPIO_Init>
 8001c1e:	e031      	b.n	8001c84 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001c20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c24:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	@ (8001c94 <BSP_PB_Init+0xd0>)
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	f107 020c 	add.w	r2, r7, #12
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fe1b 	bl	8002870 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4a16      	ldr	r2, [pc, #88]	@ (8001c98 <BSP_PB_Init+0xd4>)
 8001c40:	441a      	add	r2, r3
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4915      	ldr	r1, [pc, #84]	@ (8001c9c <BSP_PB_Init+0xd8>)
 8001c46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	f000 fdca 	bl	80027e6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <BSP_PB_Init+0xd4>)
 8001c58:	1898      	adds	r0, r3, r2
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <BSP_PB_Init+0xdc>)
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	461a      	mov	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	f000 fd9f 	bl	80027a8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001c6a:	2028      	movs	r0, #40	@ 0x28
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <BSP_PB_Init+0xe0>)
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	2200      	movs	r2, #0
 8001c76:	4619      	mov	r1, r3
 8001c78:	f000 faa3 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c7c:	2328      	movs	r3, #40	@ 0x28
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fab9 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	58024400 	.word	0x58024400
 8001c94:	24000018 	.word	0x24000018
 8001c98:	240001cc 	.word	0x240001cc
 8001c9c:	08009494 	.word	0x08009494
 8001ca0:	2400001c 	.word	0x2400001c
 8001ca4:	24000020 	.word	0x24000020

08001ca8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <BSP_PB_IRQHandler+0x20>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fda8 	bl	8002810 <HAL_EXTI_IRQHandler>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	240001cc 	.word	0x240001cc

08001ccc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ce2:	f06f 0301 	mvn.w	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e018      	b.n	8001d1c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2294      	movs	r2, #148	@ 0x94
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <BSP_COM_Init+0x5c>)
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f86e 	bl	8001dd8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2294      	movs	r2, #148	@ 0x94
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <BSP_COM_Init+0x5c>)
 8001d06:	4413      	add	r3, r2
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f80e 	bl	8001d2c <MX_USART3_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d16:	f06f 0303 	mvn.w	r3, #3
 8001d1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	240001d4 	.word	0x240001d4

08001d2c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <MX_USART3_Init+0x60>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	220c      	movs	r2, #12
 8001d4a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	895b      	ldrh	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	891b      	ldrh	r3, [r3, #8]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	899b      	ldrh	r3, [r3, #12]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d78:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f004 ff0f 	bl	8006b9e <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	24000008 	.word	0x24000008

08001d90 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <__io_putchar+0x30>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2394      	movs	r3, #148	@ 0x94
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	4a07      	ldr	r2, [pc, #28]	@ (8001dc4 <__io_putchar+0x34>)
 8001da6:	1898      	adds	r0, r3, r2
 8001da8:	1d39      	adds	r1, r7, #4
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	2201      	movs	r2, #1
 8001db0:	f004 ff4f 	bl	8006c52 <HAL_UART_Transmit>
  return ch;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	24000268 	.word	0x24000268
 8001dc4:	240001d4 	.word	0x240001d4

08001dc8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fb35 	bl	800143c <BSP_PB_Callback>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001de0:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de6:	4a26      	ldr	r2, [pc, #152]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df0:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001e1c:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <COM1_MspInit+0xa8>)
 8001e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e3e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	480b      	ldr	r0, [pc, #44]	@ (8001e84 <COM1_MspInit+0xac>)
 8001e58:	f000 fd0a 	bl	8002870 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001e66:	2307      	movs	r3, #7
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <COM1_MspInit+0xac>)
 8001e72:	f000 fcfd 	bl	8002870 <HAL_GPIO_Init>
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	@ 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	58024400 	.word	0x58024400
 8001e84:	58020c00 	.word	0x58020c00

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f000 f98c 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e94:	f001 fd32 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_Init+0x68>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	4913      	ldr	r1, [pc, #76]	@ (8001ef4 <HAL_Init+0x6c>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <HAL_Init+0x68>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_Init+0x6c>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_Init+0x70>)
 8001eca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <HAL_Init+0x74>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f814 	bl	8001f00 <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e002      	b.n	8001ee8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee2:	f7ff fac5 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	0800947c 	.word	0x0800947c
 8001ef8:	24000004 	.word	0x24000004
 8001efc:	24000000 	.word	0x24000000

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_InitTick+0x60>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e021      	b.n	8001f58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <HAL_InitTick+0x64>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_InitTick+0x60>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f971 	bl	8002212 <HAL_SYSTICK_Config>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00e      	b.n	8001f58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	d80a      	bhi.n	8001f56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f40:	2200      	movs	r2, #0
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f000 f93b 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f4c:	4a06      	ldr	r2, [pc, #24]	@ (8001f68 <HAL_InitTick+0x68>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	24000028 	.word	0x24000028
 8001f64:	24000000 	.word	0x24000000
 8001f68:	24000024 	.word	0x24000024

08001f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x20>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	24000028 	.word	0x24000028
 8001f90:	2400026c 	.word	0x2400026c

08001f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_GetTick+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	2400026c 	.word	0x2400026c

08001fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff ffee 	bl	8001f94 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	24000028 	.word	0x24000028

08001ff4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_GetREVID+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	5c001000 	.word	0x5c001000

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	4313      	orrs	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	05fa0000 	.word	0x05fa0000

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	@ (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	@ (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	@ (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff40 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff90 	bl	8002100 <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5f 	bl	80020ac <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff33 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa4 	bl	8002168 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002230:	f3bf 8f5f 	dmb	sy
}
 8002234:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <HAL_MPU_Disable+0x28>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	4a06      	ldr	r2, [pc, #24]	@ (8002254 <HAL_MPU_Disable+0x28>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002240:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_MPU_Disable+0x2c>)
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00
 8002258:	e000ed90 	.word	0xe000ed90

0800225c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002264:	4a0b      	ldr	r2, [pc, #44]	@ (8002294 <HAL_MPU_Enable+0x38>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_MPU_Enable+0x3c>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_MPU_Enable+0x3c>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002278:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800227a:	f3bf 8f4f 	dsb	sy
}
 800227e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002280:	f3bf 8f6f 	isb	sy
}
 8002284:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed90 	.word	0xe000ed90
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	785a      	ldrb	r2, [r3, #1]
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_MPU_ConfigRegion+0x7c>)
 80022aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <HAL_MPU_ConfigRegion+0x7c>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <HAL_MPU_ConfigRegion+0x7c>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022b8:	4a17      	ldr	r2, [pc, #92]	@ (8002318 <HAL_MPU_ConfigRegion+0x7c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7b1b      	ldrb	r3, [r3, #12]
 80022c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7adb      	ldrb	r3, [r3, #11]
 80022ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7a9b      	ldrb	r3, [r3, #10]
 80022d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7b5b      	ldrb	r3, [r3, #13]
 80022da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7b9b      	ldrb	r3, [r3, #14]
 80022e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7bdb      	ldrb	r3, [r3, #15]
 80022ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7a5b      	ldrb	r3, [r3, #9]
 80022f2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7a1b      	ldrb	r3, [r3, #8]
 80022fa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022fc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002306:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002308:	6113      	str	r3, [r2, #16]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed90 	.word	0xe000ed90

0800231c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e237      	b.n	800279e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2280      	movs	r2, #128	@ 0x80
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e22c      	b.n	800279e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a5c      	ldr	r2, [pc, #368]	@ (80024bc <HAL_DMA_Abort_IT+0x1a0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d04a      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5b      	ldr	r2, [pc, #364]	@ (80024c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d045      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a59      	ldr	r2, [pc, #356]	@ (80024c4 <HAL_DMA_Abort_IT+0x1a8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d040      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a58      	ldr	r2, [pc, #352]	@ (80024c8 <HAL_DMA_Abort_IT+0x1ac>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d03b      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a56      	ldr	r2, [pc, #344]	@ (80024cc <HAL_DMA_Abort_IT+0x1b0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d036      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a55      	ldr	r2, [pc, #340]	@ (80024d0 <HAL_DMA_Abort_IT+0x1b4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a53      	ldr	r2, [pc, #332]	@ (80024d4 <HAL_DMA_Abort_IT+0x1b8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02c      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a52      	ldr	r2, [pc, #328]	@ (80024d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d027      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a50      	ldr	r2, [pc, #320]	@ (80024dc <HAL_DMA_Abort_IT+0x1c0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d022      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a4f      	ldr	r2, [pc, #316]	@ (80024e0 <HAL_DMA_Abort_IT+0x1c4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d01d      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a4d      	ldr	r2, [pc, #308]	@ (80024e4 <HAL_DMA_Abort_IT+0x1c8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d018      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a4c      	ldr	r2, [pc, #304]	@ (80024e8 <HAL_DMA_Abort_IT+0x1cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a4a      	ldr	r2, [pc, #296]	@ (80024ec <HAL_DMA_Abort_IT+0x1d0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a49      	ldr	r2, [pc, #292]	@ (80024f0 <HAL_DMA_Abort_IT+0x1d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a47      	ldr	r2, [pc, #284]	@ (80024f4 <HAL_DMA_Abort_IT+0x1d8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a46      	ldr	r2, [pc, #280]	@ (80024f8 <HAL_DMA_Abort_IT+0x1dc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_Abort_IT+0xcc>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_DMA_Abort_IT+0xce>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8086 	beq.w	80024fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2204      	movs	r2, #4
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2f      	ldr	r2, [pc, #188]	@ (80024bc <HAL_DMA_Abort_IT+0x1a0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d04a      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2e      	ldr	r2, [pc, #184]	@ (80024c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d045      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <HAL_DMA_Abort_IT+0x1a8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d040      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2b      	ldr	r2, [pc, #172]	@ (80024c8 <HAL_DMA_Abort_IT+0x1ac>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d03b      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a29      	ldr	r2, [pc, #164]	@ (80024cc <HAL_DMA_Abort_IT+0x1b0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d036      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a28      	ldr	r2, [pc, #160]	@ (80024d0 <HAL_DMA_Abort_IT+0x1b4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d031      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a26      	ldr	r2, [pc, #152]	@ (80024d4 <HAL_DMA_Abort_IT+0x1b8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02c      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a25      	ldr	r2, [pc, #148]	@ (80024d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d027      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a23      	ldr	r2, [pc, #140]	@ (80024dc <HAL_DMA_Abort_IT+0x1c0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d022      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a22      	ldr	r2, [pc, #136]	@ (80024e0 <HAL_DMA_Abort_IT+0x1c4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d01d      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <HAL_DMA_Abort_IT+0x1c8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d018      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1f      	ldr	r2, [pc, #124]	@ (80024e8 <HAL_DMA_Abort_IT+0x1cc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1d      	ldr	r2, [pc, #116]	@ (80024ec <HAL_DMA_Abort_IT+0x1d0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00e      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1c      	ldr	r2, [pc, #112]	@ (80024f0 <HAL_DMA_Abort_IT+0x1d4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <HAL_DMA_Abort_IT+0x1d8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_DMA_Abort_IT+0x17c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_DMA_Abort_IT+0x1dc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <HAL_DMA_Abort_IT+0x18e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e178      	b.n	800279c <HAL_DMA_Abort_IT+0x480>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e16f      	b.n	800279c <HAL_DMA_Abort_IT+0x480>
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 020e 	bic.w	r2, r2, #14
 800250a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6c      	ldr	r2, [pc, #432]	@ (80026c4 <HAL_DMA_Abort_IT+0x3a8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d04a      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6b      	ldr	r2, [pc, #428]	@ (80026c8 <HAL_DMA_Abort_IT+0x3ac>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d045      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a69      	ldr	r2, [pc, #420]	@ (80026cc <HAL_DMA_Abort_IT+0x3b0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d040      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a68      	ldr	r2, [pc, #416]	@ (80026d0 <HAL_DMA_Abort_IT+0x3b4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d03b      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a66      	ldr	r2, [pc, #408]	@ (80026d4 <HAL_DMA_Abort_IT+0x3b8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d036      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d031      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a63      	ldr	r2, [pc, #396]	@ (80026dc <HAL_DMA_Abort_IT+0x3c0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02c      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a62      	ldr	r2, [pc, #392]	@ (80026e0 <HAL_DMA_Abort_IT+0x3c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d027      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a60      	ldr	r2, [pc, #384]	@ (80026e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d022      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a5f      	ldr	r2, [pc, #380]	@ (80026e8 <HAL_DMA_Abort_IT+0x3cc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01d      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5d      	ldr	r2, [pc, #372]	@ (80026ec <HAL_DMA_Abort_IT+0x3d0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d018      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5c      	ldr	r2, [pc, #368]	@ (80026f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5a      	ldr	r2, [pc, #360]	@ (80026f4 <HAL_DMA_Abort_IT+0x3d8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00e      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a59      	ldr	r2, [pc, #356]	@ (80026f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a57      	ldr	r2, [pc, #348]	@ (80026fc <HAL_DMA_Abort_IT+0x3e0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_Abort_IT+0x290>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a56      	ldr	r2, [pc, #344]	@ (8002700 <HAL_DMA_Abort_IT+0x3e4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d108      	bne.n	80025be <HAL_DMA_Abort_IT+0x2a2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <HAL_DMA_Abort_IT+0x2b2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a3c      	ldr	r2, [pc, #240]	@ (80026c4 <HAL_DMA_Abort_IT+0x3a8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d072      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3a      	ldr	r2, [pc, #232]	@ (80026c8 <HAL_DMA_Abort_IT+0x3ac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d06d      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a39      	ldr	r2, [pc, #228]	@ (80026cc <HAL_DMA_Abort_IT+0x3b0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d068      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a37      	ldr	r2, [pc, #220]	@ (80026d0 <HAL_DMA_Abort_IT+0x3b4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d063      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a36      	ldr	r2, [pc, #216]	@ (80026d4 <HAL_DMA_Abort_IT+0x3b8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d05e      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a34      	ldr	r2, [pc, #208]	@ (80026d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d059      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a33      	ldr	r2, [pc, #204]	@ (80026dc <HAL_DMA_Abort_IT+0x3c0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d054      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <HAL_DMA_Abort_IT+0x3c4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d04f      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a30      	ldr	r2, [pc, #192]	@ (80026e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d04a      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a2e      	ldr	r2, [pc, #184]	@ (80026e8 <HAL_DMA_Abort_IT+0x3cc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d045      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2d      	ldr	r2, [pc, #180]	@ (80026ec <HAL_DMA_Abort_IT+0x3d0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d040      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d03b      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2a      	ldr	r2, [pc, #168]	@ (80026f4 <HAL_DMA_Abort_IT+0x3d8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d036      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a28      	ldr	r2, [pc, #160]	@ (80026f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d031      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a27      	ldr	r2, [pc, #156]	@ (80026fc <HAL_DMA_Abort_IT+0x3e0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d02c      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a25      	ldr	r2, [pc, #148]	@ (8002700 <HAL_DMA_Abort_IT+0x3e4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d027      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a24      	ldr	r2, [pc, #144]	@ (8002704 <HAL_DMA_Abort_IT+0x3e8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a22      	ldr	r2, [pc, #136]	@ (8002708 <HAL_DMA_Abort_IT+0x3ec>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01d      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a21      	ldr	r2, [pc, #132]	@ (800270c <HAL_DMA_Abort_IT+0x3f0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d018      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_DMA_Abort_IT+0x3f4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <HAL_DMA_Abort_IT+0x3f8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00e      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002718 <HAL_DMA_Abort_IT+0x3fc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <HAL_DMA_Abort_IT+0x400>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_DMA_Abort_IT+0x3a2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_DMA_Abort_IT+0x404>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d132      	bne.n	8002724 <HAL_DMA_Abort_IT+0x408>
 80026be:	2301      	movs	r3, #1
 80026c0:	e031      	b.n	8002726 <HAL_DMA_Abort_IT+0x40a>
 80026c2:	bf00      	nop
 80026c4:	40020010 	.word	0x40020010
 80026c8:	40020028 	.word	0x40020028
 80026cc:	40020040 	.word	0x40020040
 80026d0:	40020058 	.word	0x40020058
 80026d4:	40020070 	.word	0x40020070
 80026d8:	40020088 	.word	0x40020088
 80026dc:	400200a0 	.word	0x400200a0
 80026e0:	400200b8 	.word	0x400200b8
 80026e4:	40020410 	.word	0x40020410
 80026e8:	40020428 	.word	0x40020428
 80026ec:	40020440 	.word	0x40020440
 80026f0:	40020458 	.word	0x40020458
 80026f4:	40020470 	.word	0x40020470
 80026f8:	40020488 	.word	0x40020488
 80026fc:	400204a0 	.word	0x400204a0
 8002700:	400204b8 	.word	0x400204b8
 8002704:	58025408 	.word	0x58025408
 8002708:	5802541c 	.word	0x5802541c
 800270c:	58025430 	.word	0x58025430
 8002710:	58025444 	.word	0x58025444
 8002714:	58025458 	.word	0x58025458
 8002718:	5802546c 	.word	0x5802546c
 800271c:	58025480 	.word	0x58025480
 8002720:	58025494 	.word	0x58025494
 8002724:	2300      	movs	r3, #0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d028      	beq.n	800277c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002738:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2201      	movs	r2, #1
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002758:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800276c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002770:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800277a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop

080027a8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	460b      	mov	r3, r1
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e00a      	b.n	80027da <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
      break;
 80027d0:	e002      	b.n	80027d8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
      break;
 80027d6:	bf00      	nop
  }

  return status;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e003      	b.n	8002802 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2201      	movs	r2, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	011a      	lsls	r2, r3, #4
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <HAL_EXTI_IRQHandler+0x5c>)
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4798      	blx	r3
    }
  }
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	58000088 	.word	0x58000088

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800287e:	4b89      	ldr	r3, [pc, #548]	@ (8002aa4 <HAL_GPIO_Init+0x234>)
 8002880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002882:	e194      	b.n	8002bae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8186 	beq.w	8002ba8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d005      	beq.n	80028b4 <HAL_GPIO_Init+0x44>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d130      	bne.n	8002916 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ea:	2201      	movs	r2, #1
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 0201 	and.w	r2, r3, #1
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b03      	cmp	r3, #3
 8002920:	d017      	beq.n	8002952 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d123      	bne.n	80029a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	69b9      	ldr	r1, [r7, #24]
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0203 	and.w	r2, r3, #3
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80e0 	beq.w	8002ba8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e8:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa8 <HAL_GPIO_Init+0x238>)
 80029ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029ee:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa8 <HAL_GPIO_Init+0x238>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80029f8:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <HAL_GPIO_Init+0x238>)
 80029fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a29      	ldr	r2, [pc, #164]	@ (8002aac <HAL_GPIO_Init+0x23c>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a20      	ldr	r2, [pc, #128]	@ (8002ab0 <HAL_GPIO_Init+0x240>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d052      	beq.n	8002ad8 <HAL_GPIO_Init+0x268>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab4 <HAL_GPIO_Init+0x244>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <HAL_GPIO_Init+0x22e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab8 <HAL_GPIO_Init+0x248>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02b      	beq.n	8002a9a <HAL_GPIO_Init+0x22a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_GPIO_Init+0x24c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d025      	beq.n	8002a96 <HAL_GPIO_Init+0x226>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac0 <HAL_GPIO_Init+0x250>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01f      	beq.n	8002a92 <HAL_GPIO_Init+0x222>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac4 <HAL_GPIO_Init+0x254>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d019      	beq.n	8002a8e <HAL_GPIO_Init+0x21e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac8 <HAL_GPIO_Init+0x258>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_Init+0x21a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a19      	ldr	r2, [pc, #100]	@ (8002acc <HAL_GPIO_Init+0x25c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_GPIO_Init+0x216>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <HAL_GPIO_Init+0x260>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_GPIO_Init+0x212>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a17      	ldr	r2, [pc, #92]	@ (8002ad4 <HAL_GPIO_Init+0x264>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_GPIO_Init+0x20e>
 8002a7a:	2309      	movs	r3, #9
 8002a7c:	e02d      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a7e:	230a      	movs	r3, #10
 8002a80:	e02b      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a82:	2308      	movs	r3, #8
 8002a84:	e029      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e027      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	e025      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a8e:	2305      	movs	r3, #5
 8002a90:	e023      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e021      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e01f      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e01d      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01b      	b.n	8002ada <HAL_GPIO_Init+0x26a>
 8002aa2:	bf00      	nop
 8002aa4:	58000080 	.word	0x58000080
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	58000400 	.word	0x58000400
 8002ab0:	58020000 	.word	0x58020000
 8002ab4:	58020400 	.word	0x58020400
 8002ab8:	58020800 	.word	0x58020800
 8002abc:	58020c00 	.word	0x58020c00
 8002ac0:	58021000 	.word	0x58021000
 8002ac4:	58021400 	.word	0x58021400
 8002ac8:	58021800 	.word	0x58021800
 8002acc:	58021c00 	.word	0x58021c00
 8002ad0:	58022000 	.word	0x58022000
 8002ad4:	58022400 	.word	0x58022400
 8002ad8:	2300      	movs	r3, #0
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	f002 0203 	and.w	r2, r2, #3
 8002ae0:	0092      	lsls	r2, r2, #2
 8002ae2:	4093      	lsls	r3, r2
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aea:	4938      	ldr	r1, [pc, #224]	@ (8002bcc <HAL_GPIO_Init+0x35c>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f ae63 	bne.w	8002884 <HAL_GPIO_Init+0x14>
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	3724      	adds	r7, #36	@ 0x24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	58000400 	.word	0x58000400

08002bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	887b      	ldrh	r3, [r7, #2]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	e001      	b.n	8002bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c1c:	e003      	b.n	8002c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c44:	887a      	ldrh	r2, [r7, #2]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	041a      	lsls	r2, r3, #16
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	43d9      	mvns	r1, r3
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	400b      	ands	r3, r1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00a      	beq.n	8002c92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c7c:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01f      	b.n	8002cce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e01d      	b.n	8002cce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c92:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	490f      	ldr	r1, [pc, #60]	@ (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ca2:	f7ff f977 	bl	8001f94 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ca8:	e009      	b.n	8002cbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002caa:	f7ff f973 	bl	8001f94 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cb8:	d901      	bls.n	8002cbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cca:	d1ee      	bne.n	8002caa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	58024800 	.word	0x58024800

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	@ 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f000 bc48 	b.w	8003580 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8088 	beq.w	8002e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfe:	4b99      	ldr	r3, [pc, #612]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d08:	4b96      	ldr	r3, [pc, #600]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d007      	beq.n	8002d24 <HAL_RCC_OscConfig+0x48>
 8002d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d16:	2b18      	cmp	r3, #24
 8002d18:	d111      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62>
 8002d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d10c      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	4b8f      	ldr	r3, [pc, #572]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d06d      	beq.n	8002e0c <HAL_RCC_OscConfig+0x130>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d169      	bne.n	8002e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f000 bc21 	b.w	8003580 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x7a>
 8002d48:	4b86      	ldr	r3, [pc, #536]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a85      	ldr	r2, [pc, #532]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e02e      	b.n	8002db4 <HAL_RCC_OscConfig+0xd8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x9c>
 8002d5e:	4b81      	ldr	r3, [pc, #516]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a80      	ldr	r2, [pc, #512]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b7e      	ldr	r3, [pc, #504]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xd8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0xc0>
 8002d82:	4b78      	ldr	r3, [pc, #480]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a77      	ldr	r2, [pc, #476]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b75      	ldr	r3, [pc, #468]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a74      	ldr	r2, [pc, #464]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xd8>
 8002d9c:	4b71      	ldr	r3, [pc, #452]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a70      	ldr	r2, [pc, #448]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b6e      	ldr	r3, [pc, #440]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6d      	ldr	r2, [pc, #436]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f8ea 	bl	8001f94 <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff f8e6 	bl	8001f94 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	@ 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e3d4      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7ff f8d6 	bl	8001f94 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff f8d2 	bl	8001f94 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e3c0      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dfe:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x110>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80ca 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1c:	4b51      	ldr	r3, [pc, #324]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e26:	4b4f      	ldr	r3, [pc, #316]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_RCC_OscConfig+0x166>
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2b18      	cmp	r3, #24
 8002e36:	d156      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x20a>
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d151      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e42:	4b48      	ldr	r3, [pc, #288]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e392      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e5a:	4b42      	ldr	r3, [pc, #264]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0219 	bic.w	r2, r3, #25
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	493f      	ldr	r1, [pc, #252]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7ff f892 	bl	8001f94 <HAL_GetTick>
 8002e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e74:	f7ff f88e 	bl	8001f94 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e37c      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e86:	4b37      	ldr	r3, [pc, #220]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	f7ff f8af 	bl	8001ff4 <HAL_GetREVID>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d817      	bhi.n	8002ed0 <HAL_RCC_OscConfig+0x1f4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b40      	cmp	r3, #64	@ 0x40
 8002ea6:	d108      	bne.n	8002eba <HAL_RCC_OscConfig+0x1de>
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	e07a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	031b      	lsls	r3, r3, #12
 8002ec8:	4926      	ldr	r1, [pc, #152]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ece:	e06f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4921      	ldr	r1, [pc, #132]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	e064      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d047      	beq.n	8002f7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0219 	bic.w	r2, r3, #25
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	491a      	ldr	r1, [pc, #104]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7ff f848 	bl	8001f94 <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f08:	f7ff f844 	bl	8001f94 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e332      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	f7ff f865 	bl	8001ff4 <HAL_GetREVID>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d819      	bhi.n	8002f68 <HAL_RCC_OscConfig+0x28c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b40      	cmp	r3, #64	@ 0x40
 8002f3a:	d108      	bne.n	8002f4e <HAL_RCC_OscConfig+0x272>
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f44:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4a:	6053      	str	r3, [r2, #4]
 8002f4c:	e030      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	031b      	lsls	r3, r3, #12
 8002f5c:	4901      	ldr	r1, [pc, #4]	@ (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
 8002f62:	e025      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
 8002f64:	58024400 	.word	0x58024400
 8002f68:	4b9a      	ldr	r3, [pc, #616]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	4997      	ldr	r1, [pc, #604]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
 8002f7c:	e018      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b95      	ldr	r3, [pc, #596]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a94      	ldr	r2, [pc, #592]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7ff f803 	bl	8001f94 <HAL_GetTick>
 8002f8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fe ffff 	bl	8001f94 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e2ed      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fa4:	4b8b      	ldr	r3, [pc, #556]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a9 	beq.w	8003110 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbe:	4b85      	ldr	r3, [pc, #532]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fc8:	4b82      	ldr	r3, [pc, #520]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d007      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x308>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b18      	cmp	r3, #24
 8002fd8:	d13a      	bne.n	8003050 <HAL_RCC_OscConfig+0x374>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d135      	bne.n	8003050 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_OscConfig+0x320>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b80      	cmp	r3, #128	@ 0x80
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e2c1      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ffc:	f7fe fffa 	bl	8001ff4 <HAL_GetREVID>
 8003000:	4603      	mov	r3, r0
 8003002:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003006:	4293      	cmp	r3, r2
 8003008:	d817      	bhi.n	800303a <HAL_RCC_OscConfig+0x35e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	2b20      	cmp	r3, #32
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x348>
 8003012:	4b70      	ldr	r3, [pc, #448]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800301a:	4a6e      	ldr	r2, [pc, #440]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003020:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003022:	e075      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003024:	4b6b      	ldr	r3, [pc, #428]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	069b      	lsls	r3, r3, #26
 8003032:	4968      	ldr	r1, [pc, #416]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003038:	e06a      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800303a:	4b66      	ldr	r3, [pc, #408]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	4962      	ldr	r1, [pc, #392]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800304e:	e05f      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d042      	beq.n	80030de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003058:	4b5e      	ldr	r3, [pc, #376]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5d      	ldr	r2, [pc, #372]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800305e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe ff96 	bl	8001f94 <HAL_GetTick>
 8003068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800306c:	f7fe ff92 	bl	8001f94 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e280      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800307e:	4b55      	ldr	r3, [pc, #340]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800308a:	f7fe ffb3 	bl	8001ff4 <HAL_GetREVID>
 800308e:	4603      	mov	r3, r0
 8003090:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003094:	4293      	cmp	r3, r2
 8003096:	d817      	bhi.n	80030c8 <HAL_RCC_OscConfig+0x3ec>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	2b20      	cmp	r3, #32
 800309e:	d108      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3d6>
 80030a0:	4b4c      	ldr	r3, [pc, #304]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030a8:	4a4a      	ldr	r2, [pc, #296]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030ae:	6053      	str	r3, [r2, #4]
 80030b0:	e02e      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
 80030b2:	4b48      	ldr	r3, [pc, #288]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	069b      	lsls	r3, r3, #26
 80030c0:	4944      	ldr	r1, [pc, #272]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
 80030c6:	e023      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
 80030c8:	4b42      	ldr	r3, [pc, #264]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	493f      	ldr	r1, [pc, #252]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	60cb      	str	r3, [r1, #12]
 80030dc:	e018      	b.n	8003110 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030de:	4b3d      	ldr	r3, [pc, #244]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3c      	ldr	r2, [pc, #240]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80030e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe ff53 	bl	8001f94 <HAL_GetTick>
 80030ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030f2:	f7fe ff4f 	bl	8001f94 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e23d      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003104:	4b33      	ldr	r3, [pc, #204]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d036      	beq.n	800318a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d019      	beq.n	8003158 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003124:	4b2b      	ldr	r3, [pc, #172]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003128:	4a2a      	ldr	r2, [pc, #168]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe ff30 	bl	8001f94 <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003138:	f7fe ff2c 	bl	8001f94 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e21a      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800314a:	4b22      	ldr	r3, [pc, #136]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x45c>
 8003156:	e018      	b.n	800318a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315c:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fe ff16 	bl	8001f94 <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7fe ff12 	bl	8001f94 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e200      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 8003180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d039      	beq.n	800320a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fef3 	bl	8001f94 <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b2:	f7fe feef 	bl	8001f94 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1dd      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031c4:	4b03      	ldr	r3, [pc, #12]	@ (80031d4 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x4d6>
 80031d0:	e01b      	b.n	800320a <HAL_RCC_OscConfig+0x52e>
 80031d2:	bf00      	nop
 80031d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d8:	4b9b      	ldr	r3, [pc, #620]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a9a      	ldr	r2, [pc, #616]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80031de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031e4:	f7fe fed6 	bl	8001f94 <HAL_GetTick>
 80031e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ec:	f7fe fed2 	bl	8001f94 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1c0      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031fe:	4b92      	ldr	r3, [pc, #584]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8081 	beq.w	800331a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003218:	4b8c      	ldr	r3, [pc, #560]	@ (800344c <HAL_RCC_OscConfig+0x770>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a8b      	ldr	r2, [pc, #556]	@ (800344c <HAL_RCC_OscConfig+0x770>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003224:	f7fe feb6 	bl	8001f94 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fe feb2 	bl	8001f94 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	@ 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1a0      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800323e:	4b83      	ldr	r3, [pc, #524]	@ (800344c <HAL_RCC_OscConfig+0x770>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x584>
 8003252:	4b7d      	ldr	r3, [pc, #500]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	4a7c      	ldr	r2, [pc, #496]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6713      	str	r3, [r2, #112]	@ 0x70
 800325e:	e02d      	b.n	80032bc <HAL_RCC_OscConfig+0x5e0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0x5a6>
 8003268:	4b77      	ldr	r3, [pc, #476]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	4a76      	ldr	r2, [pc, #472]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70
 8003274:	4b74      	ldr	r3, [pc, #464]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	4a73      	ldr	r2, [pc, #460]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003280:	e01c      	b.n	80032bc <HAL_RCC_OscConfig+0x5e0>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b05      	cmp	r3, #5
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c8>
 800328a:	4b6f      	ldr	r3, [pc, #444]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	4a6e      	ldr	r2, [pc, #440]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	@ 0x70
 8003296:	4b6c      	ldr	r3, [pc, #432]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329a:	4a6b      	ldr	r2, [pc, #428]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0x5e0>
 80032a4:	4b68      	ldr	r3, [pc, #416]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a8:	4a67      	ldr	r2, [pc, #412]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b0:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	4a64      	ldr	r2, [pc, #400]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fe66 	bl	8001f94 <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fe fe62 	bl	8001f94 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e14e      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e2:	4b59      	ldr	r3, [pc, #356]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ee      	beq.n	80032cc <HAL_RCC_OscConfig+0x5f0>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe fe50 	bl	8001f94 <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fe4c 	bl	8001f94 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e138      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800330e:	4b4e      	ldr	r3, [pc, #312]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ee      	bne.n	80032f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 812d 	beq.w	800357e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003324:	4b48      	ldr	r3, [pc, #288]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800332c:	2b18      	cmp	r3, #24
 800332e:	f000 80bd 	beq.w	80034ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	2b02      	cmp	r3, #2
 8003338:	f040 809e 	bne.w	8003478 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b42      	ldr	r3, [pc, #264]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fe24 	bl	8001f94 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fe20 	bl	8001f94 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e10e      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003362:	4b39      	ldr	r3, [pc, #228]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336e:	4b36      	ldr	r3, [pc, #216]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003372:	4b37      	ldr	r3, [pc, #220]	@ (8003450 <HAL_RCC_OscConfig+0x774>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	430a      	orrs	r2, r1
 8003382:	4931      	ldr	r1, [pc, #196]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	628b      	str	r3, [r1, #40]	@ 0x28
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	3b01      	subs	r3, #1
 800338e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	3b01      	subs	r3, #1
 8003398:	025b      	lsls	r3, r3, #9
 800339a:	b29b      	uxth	r3, r3
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	3b01      	subs	r3, #1
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80033b8:	4923      	ldr	r1, [pc, #140]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80033be:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	4a21      	ldr	r2, [pc, #132]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ce:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <HAL_RCC_OscConfig+0x778>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033d6:	00d2      	lsls	r2, r2, #3
 80033d8:	491b      	ldr	r1, [pc, #108]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	f023 020c 	bic.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4917      	ldr	r1, [pc, #92]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	f023 0202 	bic.w	r2, r3, #2
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	4912      	ldr	r1, [pc, #72]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	4a10      	ldr	r2, [pc, #64]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800340c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	4a0d      	ldr	r2, [pc, #52]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003418:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003426:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	4a07      	ldr	r2, [pc, #28]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_RCC_OscConfig+0x76c>)
 8003438:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe fda9 	bl	8001f94 <HAL_GetTick>
 8003442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003444:	e011      	b.n	800346a <HAL_RCC_OscConfig+0x78e>
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400
 800344c:	58024800 	.word	0x58024800
 8003450:	fffffc0c 	.word	0xfffffc0c
 8003454:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe fd9c 	bl	8001f94 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e08a      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x77c>
 8003476:	e082      	b.n	800357e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b43      	ldr	r3, [pc, #268]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a42      	ldr	r2, [pc, #264]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fd86 	bl	8001f94 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fd82 	bl	8001f94 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e070      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800349e:	4b3a      	ldr	r3, [pc, #232]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x7b0>
 80034aa:	e068      	b.n	800357e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034b2:	4b35      	ldr	r3, [pc, #212]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d031      	beq.n	8003524 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0203 	and.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d12a      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d122      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d11a      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d111      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d108      	bne.n	8003524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0e1b      	lsrs	r3, r3, #24
 8003516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e02b      	b.n	8003580 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003528:	4b17      	ldr	r3, [pc, #92]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 800352a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003532:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	429a      	cmp	r2, r3
 800353c:	d01f      	beq.n	800357e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	4a11      	ldr	r2, [pc, #68]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800354a:	f7fe fd23 	bl	8001f94 <HAL_GetTick>
 800354e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003550:	bf00      	nop
 8003552:	f7fe fd1f 	bl	8001f94 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	4293      	cmp	r3, r2
 800355c:	d0f9      	beq.n	8003552 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800355e:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_RCC_OscConfig+0x8b0>)
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800356a:	00d2      	lsls	r2, r2, #3
 800356c:	4906      	ldr	r1, [pc, #24]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 800356e:	4313      	orrs	r3, r2
 8003570:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003572:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <HAL_RCC_OscConfig+0x8ac>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3730      	adds	r7, #48	@ 0x30
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	58024400 	.word	0x58024400
 800358c:	ffff0007 	.word	0xffff0007

08003590 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e19c      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	4b8a      	ldr	r3, [pc, #552]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d910      	bls.n	80035d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b87      	ldr	r3, [pc, #540]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 020f 	bic.w	r2, r3, #15
 80035ba:	4985      	ldr	r1, [pc, #532]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b83      	ldr	r3, [pc, #524]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e184      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b7b      	ldr	r3, [pc, #492]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d908      	bls.n	8003602 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f0:	4b78      	ldr	r3, [pc, #480]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4975      	ldr	r1, [pc, #468]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d010      	beq.n	8003630 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	4b70      	ldr	r3, [pc, #448]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800361a:	429a      	cmp	r2, r3
 800361c:	d908      	bls.n	8003630 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800361e:	4b6d      	ldr	r3, [pc, #436]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	496a      	ldr	r1, [pc, #424]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 800362c:	4313      	orrs	r3, r2
 800362e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	4b64      	ldr	r3, [pc, #400]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003648:	429a      	cmp	r2, r3
 800364a:	d908      	bls.n	800365e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800364c:	4b61      	ldr	r3, [pc, #388]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	495e      	ldr	r1, [pc, #376]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 800365a:	4313      	orrs	r3, r2
 800365c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	4b59      	ldr	r3, [pc, #356]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003676:	429a      	cmp	r2, r3
 8003678:	d908      	bls.n	800368c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800367a:	4b56      	ldr	r3, [pc, #344]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4953      	ldr	r1, [pc, #332]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003688:	4313      	orrs	r3, r2
 800368a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	4b4d      	ldr	r3, [pc, #308]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d908      	bls.n	80036ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b4a      	ldr	r3, [pc, #296]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f023 020f 	bic.w	r2, r3, #15
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4947      	ldr	r1, [pc, #284]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d055      	beq.n	8003772 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036c6:	4b43      	ldr	r3, [pc, #268]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4940      	ldr	r1, [pc, #256]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e0:	4b3c      	ldr	r3, [pc, #240]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d121      	bne.n	8003730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0f6      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d115      	bne.n	8003730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0ea      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003710:	4b30      	ldr	r3, [pc, #192]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0de      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003720:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0d6      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003730:	4b28      	ldr	r3, [pc, #160]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f023 0207 	bic.w	r2, r3, #7
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4925      	ldr	r1, [pc, #148]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 800373e:	4313      	orrs	r3, r2
 8003740:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003742:	f7fe fc27 	bl	8001f94 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003748:	e00a      	b.n	8003760 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374a:	f7fe fc23 	bl	8001f94 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0be      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003760:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	429a      	cmp	r2, r3
 8003770:	d1eb      	bne.n	800374a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	429a      	cmp	r2, r3
 800378c:	d208      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f023 020f 	bic.w	r2, r3, #15
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	490e      	ldr	r1, [pc, #56]	@ (80037d4 <HAL_RCC_ClockConfig+0x244>)
 800379c:	4313      	orrs	r3, r2
 800379e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d214      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 020f 	bic.w	r2, r3, #15
 80037b6:	4906      	ldr	r1, [pc, #24]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <HAL_RCC_ClockConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e086      	b.n	80038de <HAL_RCC_ClockConfig+0x34e>
 80037d0:	52002000 	.word	0x52002000
 80037d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	4b3f      	ldr	r3, [pc, #252]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d208      	bcs.n	8003806 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037f4:	4b3c      	ldr	r3, [pc, #240]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	4939      	ldr	r1, [pc, #228]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003802:	4313      	orrs	r3, r2
 8003804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d010      	beq.n	8003834 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800381e:	429a      	cmp	r2, r3
 8003820:	d208      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003822:	4b31      	ldr	r3, [pc, #196]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	492e      	ldr	r1, [pc, #184]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003830:	4313      	orrs	r3, r2
 8003832:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	4b28      	ldr	r3, [pc, #160]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800384c:	429a      	cmp	r2, r3
 800384e:	d208      	bcs.n	8003862 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003850:	4b25      	ldr	r3, [pc, #148]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4922      	ldr	r1, [pc, #136]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 800385e:	4313      	orrs	r3, r2
 8003860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d010      	beq.n	8003890 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800387a:	429a      	cmp	r2, r3
 800387c:	d208      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800387e:	4b1a      	ldr	r3, [pc, #104]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4917      	ldr	r1, [pc, #92]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 800388c:	4313      	orrs	r3, r2
 800388e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003890:	f000 f834 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	4912      	ldr	r1, [pc, #72]	@ (80038ec <HAL_RCC_ClockConfig+0x35c>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038ae:	4b0e      	ldr	r3, [pc, #56]	@ (80038e8 <HAL_RCC_ClockConfig+0x358>)
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <HAL_RCC_ClockConfig+0x35c>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <HAL_RCC_ClockConfig+0x360>)
 80038c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038c8:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <HAL_RCC_ClockConfig+0x364>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80038ce:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <HAL_RCC_ClockConfig+0x368>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fb14 	bl	8001f00 <HAL_InitTick>
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	58024400 	.word	0x58024400
 80038ec:	0800947c 	.word	0x0800947c
 80038f0:	24000004 	.word	0x24000004
 80038f4:	24000000 	.word	0x24000000
 80038f8:	24000024 	.word	0x24000024

080038fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	@ 0x24
 8003900:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003902:	4bb3      	ldr	r3, [pc, #716]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800390a:	2b18      	cmp	r3, #24
 800390c:	f200 8155 	bhi.w	8003bba <HAL_RCC_GetSysClockFreq+0x2be>
 8003910:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800397d 	.word	0x0800397d
 800391c:	08003bbb 	.word	0x08003bbb
 8003920:	08003bbb 	.word	0x08003bbb
 8003924:	08003bbb 	.word	0x08003bbb
 8003928:	08003bbb 	.word	0x08003bbb
 800392c:	08003bbb 	.word	0x08003bbb
 8003930:	08003bbb 	.word	0x08003bbb
 8003934:	08003bbb 	.word	0x08003bbb
 8003938:	080039a3 	.word	0x080039a3
 800393c:	08003bbb 	.word	0x08003bbb
 8003940:	08003bbb 	.word	0x08003bbb
 8003944:	08003bbb 	.word	0x08003bbb
 8003948:	08003bbb 	.word	0x08003bbb
 800394c:	08003bbb 	.word	0x08003bbb
 8003950:	08003bbb 	.word	0x08003bbb
 8003954:	08003bbb 	.word	0x08003bbb
 8003958:	080039a9 	.word	0x080039a9
 800395c:	08003bbb 	.word	0x08003bbb
 8003960:	08003bbb 	.word	0x08003bbb
 8003964:	08003bbb 	.word	0x08003bbb
 8003968:	08003bbb 	.word	0x08003bbb
 800396c:	08003bbb 	.word	0x08003bbb
 8003970:	08003bbb 	.word	0x08003bbb
 8003974:	08003bbb 	.word	0x08003bbb
 8003978:	080039af 	.word	0x080039af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800397c:	4b94      	ldr	r3, [pc, #592]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003988:	4b91      	ldr	r3, [pc, #580]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	4a90      	ldr	r2, [pc, #576]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
 8003998:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800399a:	e111      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800399c:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800399e:	61bb      	str	r3, [r7, #24]
      break;
 80039a0:	e10e      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039a2:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039a4:	61bb      	str	r3, [r7, #24]
      break;
 80039a6:	e10b      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039a8:	4b8c      	ldr	r3, [pc, #560]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039aa:	61bb      	str	r3, [r7, #24]
      break;
 80039ac:	e108      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ae:	4b88      	ldr	r3, [pc, #544]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039b8:	4b85      	ldr	r3, [pc, #532]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039c4:	4b82      	ldr	r3, [pc, #520]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039ce:	4b80      	ldr	r3, [pc, #512]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d2:	08db      	lsrs	r3, r3, #3
 80039d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80e1 	beq.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	f000 8083 	beq.w	8003b00 <HAL_RCC_GetSysClockFreq+0x204>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	f200 80a1 	bhi.w	8003b44 <HAL_RCC_GetSysClockFreq+0x248>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x114>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d056      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a0e:	e099      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a10:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02d      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a46:	4b62      	ldr	r3, [pc, #392]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003a76:	e087      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003be4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b51      	ldr	r3, [pc, #324]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aba:	e065      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b40      	ldr	r3, [pc, #256]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ae2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003afe:	e043      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003bec <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b12:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b42:	e021      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b88:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b92:	3301      	adds	r3, #1
 8003b94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bac:	ee17 3a90 	vmov	r3, s15
 8003bb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bb2:	e005      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
      break;
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003bba:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bbc:	61bb      	str	r3, [r7, #24]
      break;
 8003bbe:	bf00      	nop
  }

  return sysclockfreq;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3724      	adds	r7, #36	@ 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	03d09000 	.word	0x03d09000
 8003bd8:	003d0900 	.word	0x003d0900
 8003bdc:	017d7840 	.word	0x017d7840
 8003be0:	46000000 	.word	0x46000000
 8003be4:	4c742400 	.word	0x4c742400
 8003be8:	4a742400 	.word	0x4a742400
 8003bec:	4bbebc20 	.word	0x4bbebc20

08003bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bf6:	f7ff fe81 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490f      	ldr	r1, [pc, #60]	@ (8003c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	4a09      	ldr	r2, [pc, #36]	@ (8003c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	4a07      	ldr	r2, [pc, #28]	@ (8003c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c2e:	4a07      	ldr	r2, [pc, #28]	@ (8003c4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	58024400 	.word	0x58024400
 8003c44:	0800947c 	.word	0x0800947c
 8003c48:	24000004 	.word	0x24000004
 8003c4c:	24000000 	.word	0x24000000

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c54:	f7ff ffcc 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4904      	ldr	r1, [pc, #16]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	58024400 	.word	0x58024400
 8003c78:	0800947c 	.word	0x0800947c

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c80:	f7ff ffb6 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4904      	ldr	r1, [pc, #16]	@ (8003ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	58024400 	.word	0x58024400
 8003ca4:	0800947c 	.word	0x0800947c

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b0ca      	sub	sp, #296	@ 0x128
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003ccc:	2500      	movs	r5, #0
 8003cce:	ea54 0305 	orrs.w	r3, r4, r5
 8003cd2:	d049      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cde:	d02f      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ce0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ce4:	d828      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cea:	d01a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cf0:	d822      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfa:	d007      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cfc:	e01c      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cfe:	4bb8      	ldr	r3, [pc, #736]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	4ab7      	ldr	r2, [pc, #732]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d0a:	e01a      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	3308      	adds	r3, #8
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 fc8f 	bl	8005638 <RCCEx_PLL2_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d20:	e00f      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	3328      	adds	r3, #40	@ 0x28
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 fd36 	bl	800579c <RCCEx_PLL3_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d36:	e004      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d4a:	4ba5      	ldr	r3, [pc, #660]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d58:	4aa1      	ldr	r2, [pc, #644]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d5e:	e003      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003d74:	f04f 0900 	mov.w	r9, #0
 8003d78:	ea58 0309 	orrs.w	r3, r8, r9
 8003d7c:	d047      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d82a      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003da5 	.word	0x08003da5
 8003d94:	08003db3 	.word	0x08003db3
 8003d98:	08003dc9 	.word	0x08003dc9
 8003d9c:	08003de7 	.word	0x08003de7
 8003da0:	08003de7 	.word	0x08003de7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da4:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	4a8d      	ldr	r2, [pc, #564]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db0:	e01a      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	3308      	adds	r3, #8
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 fc3c 	bl	8005638 <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dc6:	e00f      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	3328      	adds	r3, #40	@ 0x28
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fce3 	bl	800579c <RCCEx_PLL3_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e004      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df0:	4b7b      	ldr	r3, [pc, #492]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df4:	f023 0107 	bic.w	r1, r3, #7
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	4a78      	ldr	r2, [pc, #480]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003e1a:	f04f 0b00 	mov.w	fp, #0
 8003e1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e22:	d04c      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2e:	d030      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e34:	d829      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e38:	d02d      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e3c:	d825      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e3e:	2b80      	cmp	r3, #128	@ 0x80
 8003e40:	d018      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d821      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e4a:	2b40      	cmp	r3, #64	@ 0x40
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e4e:	e01c      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e50:	4b63      	ldr	r3, [pc, #396]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	4a62      	ldr	r2, [pc, #392]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	3308      	adds	r3, #8
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fbe6 	bl	8005638 <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e72:	e011      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e78:	3328      	adds	r3, #40	@ 0x28
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 fc8d 	bl	800579c <RCCEx_PLL3_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e90:	e002      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003eca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ed4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d053      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ee6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eea:	d035      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003eec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ef0:	d82e      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ef2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ef6:	d031      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ef8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003efc:	d828      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f02:	d01a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f08:	d822      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f12:	d007      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003f14:	e01c      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f16:	4b32      	ldr	r3, [pc, #200]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	4a31      	ldr	r2, [pc, #196]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f22:	e01c      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	3308      	adds	r3, #8
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fb83 	bl	8005638 <RCCEx_PLL2_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f38:	e011      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	3328      	adds	r3, #40	@ 0x28
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 fc2a 	bl	800579c <RCCEx_PLL3_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f4e:	e006      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f66:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003f92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d056      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003fae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb2:	d038      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003fb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb8:	d831      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fbe:	d034      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003fc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fc4:	d82b      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fca:	d01d      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fd0:	d825      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003fdc:	e01f      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fde:	bf00      	nop
 8003fe0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe4:	4ba2      	ldr	r3, [pc, #648]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4aa1      	ldr	r2, [pc, #644]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ff0:	e01c      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 fb1c 	bl	8005638 <RCCEx_PLL2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004006:	e011      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	3328      	adds	r3, #40	@ 0x28
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fbc3 	bl	800579c <RCCEx_PLL3_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800401c:	e006      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004024:	e002      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004026:	bf00      	nop
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800402a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004034:	4b8e      	ldr	r3, [pc, #568]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004040:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004044:	4a8a      	ldr	r2, [pc, #552]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004046:	430b      	orrs	r3, r1
 8004048:	6593      	str	r3, [r2, #88]	@ 0x58
 800404a:	e003      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004060:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800406a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800406e:	460b      	mov	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	d03a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407a:	2b30      	cmp	r3, #48	@ 0x30
 800407c:	d01f      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800407e:	2b30      	cmp	r3, #48	@ 0x30
 8004080:	d819      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004082:	2b20      	cmp	r3, #32
 8004084:	d00c      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004086:	2b20      	cmp	r3, #32
 8004088:	d815      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d019      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800408e:	2b10      	cmp	r3, #16
 8004090:	d111      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004092:	4b77      	ldr	r3, [pc, #476]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	4a76      	ldr	r2, [pc, #472]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800409e:	e011      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	3308      	adds	r3, #8
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fac5 	bl	8005638 <RCCEx_PLL2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040cc:	4b68      	ldr	r3, [pc, #416]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040da:	4a65      	ldr	r2, [pc, #404]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80040f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004100:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d051      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004114:	d035      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800411a:	d82e      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800411c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004120:	d031      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004126:	d828      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800412c:	d01a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004132:	d822      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413c:	d007      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800413e:	e01c      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4b4b      	ldr	r3, [pc, #300]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a4a      	ldr	r2, [pc, #296]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800414c:	e01c      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	3308      	adds	r3, #8
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f001 fa6e 	bl	8005638 <RCCEx_PLL2_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004162:	e011      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	3328      	adds	r3, #40	@ 0x28
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f001 fb15 	bl	800579c <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004178:	e006      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004190:	4b37      	ldr	r3, [pc, #220]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004194:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419e:	4a34      	ldr	r2, [pc, #208]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80041ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80041c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80041c8:	460b      	mov	r3, r1
 80041ca:	4313      	orrs	r3, r2
 80041cc:	d056      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d8:	d033      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80041da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041de:	d82c      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041e4:	d02f      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80041e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041ea:	d826      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041f0:	d02b      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80041f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041f6:	d820      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041fc:	d012      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80041fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004202:	d81a      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d022      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800420c:	d115      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	3308      	adds	r3, #8
 8004214:	2101      	movs	r1, #1
 8004216:	4618      	mov	r0, r3
 8004218:	f001 fa0e 	bl	8005638 <RCCEx_PLL2_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004222:	e015      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	3328      	adds	r3, #40	@ 0x28
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fab5 	bl	800579c <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004238:	e00a      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800424e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10d      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800425a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004266:	4a02      	ldr	r2, [pc, #8]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6513      	str	r3, [r2, #80]	@ 0x50
 800426c:	e006      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800426e:	bf00      	nop
 8004270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800428c:	2300      	movs	r3, #0
 800428e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004292:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004296:	460b      	mov	r3, r1
 8004298:	4313      	orrs	r3, r2
 800429a:	d055      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a8:	d033      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80042aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ae:	d82c      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b4:	d02f      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ba:	d826      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042c0:	d02b      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80042c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042c6:	d820      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042cc:	d012      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80042ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042d2:	d81a      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d022      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80042d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042dc:	d115      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e2:	3308      	adds	r3, #8
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 f9a6 	bl	8005638 <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042f2:	e015      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	3328      	adds	r3, #40	@ 0x28
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 fa4d 	bl	800579c <RCCEx_PLL3_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004308:	e00a      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004312:	bf00      	nop
 8004314:	e004      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004316:	bf00      	nop
 8004318:	e002      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800431a:	bf00      	nop
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800431e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004328:	4ba3      	ldr	r3, [pc, #652]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004338:	4a9f      	ldr	r2, [pc, #636]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6593      	str	r3, [r2, #88]	@ 0x58
 800433e:	e003      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004354:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800435e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	d037      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004372:	d00e      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004378:	d816      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800437e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004382:	d111      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004384:	4b8c      	ldr	r3, [pc, #560]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	4a8b      	ldr	r2, [pc, #556]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004390:	e00f      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	3308      	adds	r3, #8
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f001 f94c 	bl	8005638 <RCCEx_PLL2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043ba:	4b7f      	ldr	r3, [pc, #508]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	4a7b      	ldr	r2, [pc, #492]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80043ce:	e003      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80043e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d039      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80043f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d81c      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004445 	.word	0x08004445
 800440c:	08004419 	.word	0x08004419
 8004410:	08004427 	.word	0x08004427
 8004414:	08004445 	.word	0x08004445
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004418:	4b67      	ldr	r3, [pc, #412]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	4a66      	ldr	r2, [pc, #408]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800441e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004424:	e00f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	3308      	adds	r3, #8
 800442c:	2102      	movs	r1, #2
 800442e:	4618      	mov	r0, r3
 8004430:	f001 f902 	bl	8005638 <RCCEx_PLL2_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800443a:	e004      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800444e:	4b5a      	ldr	r3, [pc, #360]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	f023 0103 	bic.w	r1, r3, #3
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445c:	4a56      	ldr	r2, [pc, #344]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445e:	430b      	orrs	r3, r1
 8004460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004462:	e003      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004482:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	f000 809f 	beq.w	80045cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448e:	4b4b      	ldr	r3, [pc, #300]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a4a      	ldr	r2, [pc, #296]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800449a:	f7fd fd7b 	bl	8001f94 <HAL_GetTick>
 800449e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a2:	e00b      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fd fd76 	bl	8001f94 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	@ 0x64
 80044b2:	d903      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044bc:	4b3f      	ldr	r3, [pc, #252]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ed      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80044c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d179      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044d0:	4b39      	ldr	r3, [pc, #228]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044dc:	4053      	eors	r3, r2
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d015      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e6:	4b34      	ldr	r3, [pc, #208]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f2:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	4a30      	ldr	r2, [pc, #192]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044fe:	4b2e      	ldr	r3, [pc, #184]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004502:	4a2d      	ldr	r2, [pc, #180]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004508:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800450a:	4a2b      	ldr	r2, [pc, #172]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800450c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800451a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451e:	d118      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fd38 	bl	8001f94 <HAL_GetTick>
 8004524:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004528:	e00d      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd fd33 	bl	8001f94 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004534:	1ad2      	subs	r2, r2, r3
 8004536:	f241 3388 	movw	r3, #5000	@ 0x1388
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004544:	e005      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004546:	4b1c      	ldr	r3, [pc, #112]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0eb      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004556:	2b00      	cmp	r3, #0
 8004558:	d129      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800456a:	d10e      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800457c:	091a      	lsrs	r2, r3, #4
 800457e:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004580:	4013      	ands	r3, r2
 8004582:	4a0d      	ldr	r2, [pc, #52]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004584:	430b      	orrs	r3, r1
 8004586:	6113      	str	r3, [r2, #16]
 8004588:	e005      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	4a0a      	ldr	r2, [pc, #40]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004590:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004594:	6113      	str	r3, [r2, #16]
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004598:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a6:	4a04      	ldr	r2, [pc, #16]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ac:	e00e      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80045b6:	e009      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80045b8:	58024400 	.word	0x58024400
 80045bc:	58024800 	.word	0x58024800
 80045c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f002 0301 	and.w	r3, r2, #1
 80045d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f000 8089 	beq.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045f4:	2b28      	cmp	r3, #40	@ 0x28
 80045f6:	d86b      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	080046d9 	.word	0x080046d9
 8004604:	080046d1 	.word	0x080046d1
 8004608:	080046d1 	.word	0x080046d1
 800460c:	080046d1 	.word	0x080046d1
 8004610:	080046d1 	.word	0x080046d1
 8004614:	080046d1 	.word	0x080046d1
 8004618:	080046d1 	.word	0x080046d1
 800461c:	080046d1 	.word	0x080046d1
 8004620:	080046a5 	.word	0x080046a5
 8004624:	080046d1 	.word	0x080046d1
 8004628:	080046d1 	.word	0x080046d1
 800462c:	080046d1 	.word	0x080046d1
 8004630:	080046d1 	.word	0x080046d1
 8004634:	080046d1 	.word	0x080046d1
 8004638:	080046d1 	.word	0x080046d1
 800463c:	080046d1 	.word	0x080046d1
 8004640:	080046bb 	.word	0x080046bb
 8004644:	080046d1 	.word	0x080046d1
 8004648:	080046d1 	.word	0x080046d1
 800464c:	080046d1 	.word	0x080046d1
 8004650:	080046d1 	.word	0x080046d1
 8004654:	080046d1 	.word	0x080046d1
 8004658:	080046d1 	.word	0x080046d1
 800465c:	080046d1 	.word	0x080046d1
 8004660:	080046d9 	.word	0x080046d9
 8004664:	080046d1 	.word	0x080046d1
 8004668:	080046d1 	.word	0x080046d1
 800466c:	080046d1 	.word	0x080046d1
 8004670:	080046d1 	.word	0x080046d1
 8004674:	080046d1 	.word	0x080046d1
 8004678:	080046d1 	.word	0x080046d1
 800467c:	080046d1 	.word	0x080046d1
 8004680:	080046d9 	.word	0x080046d9
 8004684:	080046d1 	.word	0x080046d1
 8004688:	080046d1 	.word	0x080046d1
 800468c:	080046d1 	.word	0x080046d1
 8004690:	080046d1 	.word	0x080046d1
 8004694:	080046d1 	.word	0x080046d1
 8004698:	080046d1 	.word	0x080046d1
 800469c:	080046d1 	.word	0x080046d1
 80046a0:	080046d9 	.word	0x080046d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	3308      	adds	r3, #8
 80046aa:	2101      	movs	r1, #1
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 ffc3 	bl	8005638 <RCCEx_PLL2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046b8:	e00f      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	3328      	adds	r3, #40	@ 0x28
 80046c0:	2101      	movs	r1, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 f86a 	bl	800579c <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046e2:	4bbf      	ldr	r3, [pc, #764]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f0:	4abb      	ldr	r2, [pc, #748]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f002 0302 	and.w	r3, r2, #2
 800470c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004716:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d041      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004726:	2b05      	cmp	r3, #5
 8004728:	d824      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800472a:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	0800477d 	.word	0x0800477d
 8004734:	08004749 	.word	0x08004749
 8004738:	0800475f 	.word	0x0800475f
 800473c:	0800477d 	.word	0x0800477d
 8004740:	0800477d 	.word	0x0800477d
 8004744:	0800477d 	.word	0x0800477d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474c:	3308      	adds	r3, #8
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 ff71 	bl	8005638 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800475c:	e00f      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004762:	3328      	adds	r3, #40	@ 0x28
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f001 f818 	bl	800579c <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004786:	4b96      	ldr	r3, [pc, #600]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	f023 0107 	bic.w	r1, r3, #7
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004792:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004794:	4a92      	ldr	r2, [pc, #584]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6553      	str	r3, [r2, #84]	@ 0x54
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 0304 	and.w	r3, r2, #4
 80047b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d044      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d825      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80047d0:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	08004825 	.word	0x08004825
 80047dc:	080047f1 	.word	0x080047f1
 80047e0:	08004807 	.word	0x08004807
 80047e4:	08004825 	.word	0x08004825
 80047e8:	08004825 	.word	0x08004825
 80047ec:	08004825 	.word	0x08004825
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	3308      	adds	r3, #8
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 ff1d 	bl	8005638 <RCCEx_PLL2_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004804:	e00f      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	3328      	adds	r3, #40	@ 0x28
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 ffc4 	bl	800579c <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800482e:	4b6c      	ldr	r3, [pc, #432]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	f023 0107 	bic.w	r1, r3, #7
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800483e:	4a68      	ldr	r2, [pc, #416]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6593      	str	r3, [r2, #88]	@ 0x58
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f002 0320 	and.w	r3, r2, #32
 800485a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d055      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800487a:	d033      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800487c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004880:	d82c      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004886:	d02f      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d826      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800488e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004892:	d02b      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004894:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004898:	d820      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800489a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800489e:	d012      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80048a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a4:	d81a      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d022      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80048aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ae:	d115      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	3308      	adds	r3, #8
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 febd 	bl	8005638 <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048c4:	e015      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	3328      	adds	r3, #40	@ 0x28
 80048cc:	2102      	movs	r1, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 ff64 	bl	800579c <RCCEx_PLL3_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048da:	e00a      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048e2:	e006      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048e4:	bf00      	nop
 80048e6:	e004      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048e8:	bf00      	nop
 80048ea:	e002      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048ec:	bf00      	nop
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fa:	4b39      	ldr	r3, [pc, #228]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	4a35      	ldr	r2, [pc, #212]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800490c:	430b      	orrs	r3, r1
 800490e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004910:	e003      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004930:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004934:	460b      	mov	r3, r1
 8004936:	4313      	orrs	r3, r2
 8004938:	d058      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004942:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004946:	d033      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004948:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800494c:	d82c      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004952:	d02f      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004958:	d826      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800495a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800495e:	d02b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004964:	d820      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800496a:	d012      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004970:	d81a      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d022      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d115      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004980:	3308      	adds	r3, #8
 8004982:	2100      	movs	r1, #0
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fe57 	bl	8005638 <RCCEx_PLL2_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004990:	e015      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	3328      	adds	r3, #40	@ 0x28
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fefe 	bl	800579c <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049a6:	e00a      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ae:	e006      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049b0:	bf00      	nop
 80049b2:	e004      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049b4:	bf00      	nop
 80049b6:	e002      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10e      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d6:	4a02      	ldr	r2, [pc, #8]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	6593      	str	r3, [r2, #88]	@ 0x58
 80049dc:	e006      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80049de:	bf00      	nop
 80049e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80049f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a06:	460b      	mov	r3, r1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	d055      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a18:	d033      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004a1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a1e:	d82c      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a24:	d02f      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2a:	d826      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a30:	d02b      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004a32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a36:	d820      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a3c:	d012      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a42:	d81a      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d022      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4c:	d115      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a52:	3308      	adds	r3, #8
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fdee 	bl	8005638 <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a62:	e015      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	3328      	adds	r3, #40	@ 0x28
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fe95 	bl	800579c <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a78:	e00a      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a82:	bf00      	nop
 8004a84:	e004      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a98:	4ba1      	ldr	r3, [pc, #644]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004aa8:	4a9d      	ldr	r2, [pc, #628]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aae:	e003      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 0308 	and.w	r3, r2, #8
 8004ac4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ace:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d01e      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3328      	adds	r3, #40	@ 0x28
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fe54 	bl	800579c <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b00:	4b87      	ldr	r3, [pc, #540]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b10:	4a83      	ldr	r2, [pc, #524]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b12:	430b      	orrs	r3, r1
 8004b14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f002 0310 	and.w	r3, r2, #16
 8004b22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b26:	2300      	movs	r3, #0
 8004b28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b30:	460b      	mov	r3, r1
 8004b32:	4313      	orrs	r3, r2
 8004b34:	d01e      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	3328      	adds	r3, #40	@ 0x28
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fe25 	bl	800579c <RCCEx_PLL3_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b5e:	4b70      	ldr	r3, [pc, #448]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4313      	orrs	r3, r2
 8004b92:	d03e      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba0:	d022      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba6:	d81b      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb0:	d00b      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004bb2:	e015      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	3308      	adds	r3, #8
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fd3b 	bl	8005638 <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bc8:	e00f      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	3328      	adds	r3, #40	@ 0x28
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fde2 	bl	800579c <RCCEx_PLL3_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c02:	4a47      	ldr	r2, [pc, #284]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c08:	e003      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c20:	2300      	movs	r3, #0
 8004c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	d03b      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c3a:	d01f      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004c3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c40:	d818      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c46:	d003      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c4c:	d007      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c4e:	e011      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c50:	4b33      	ldr	r3, [pc, #204]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	4a32      	ldr	r2, [pc, #200]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c5c:	e00f      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c62:	3328      	adds	r3, #40	@ 0x28
 8004c64:	2101      	movs	r1, #1
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fd98 	bl	800579c <RCCEx_PLL3_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c72:	e004      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c86:	4b26      	ldr	r3, [pc, #152]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	4a22      	ldr	r2, [pc, #136]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c9c:	e003      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004cb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	d034      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd0:	d007      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004cd2:	e011      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd4:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ce0:	e00e      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	2102      	movs	r1, #2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fca4 	bl	8005638 <RCCEx_PLL2_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cf6:	e003      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10d      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d16:	4a02      	ldr	r2, [pc, #8]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d1c:	e006      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d42:	460b      	mov	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	d00c      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	3328      	adds	r3, #40	@ 0x28
 8004d4e:	2102      	movs	r1, #2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fd23 	bl	800579c <RCCEx_PLL3_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d70:	2300      	movs	r3, #0
 8004d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	d038      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d8a:	d018      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004d8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d90:	d811      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d96:	d014      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9c:	d80b      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da6:	d106      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da8:	4bc3      	ldr	r3, [pc, #780]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	4ac2      	ldr	r2, [pc, #776]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004db4:	e008      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dd0:	4bb9      	ldr	r3, [pc, #740]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004de0:	4ab5      	ldr	r2, [pc, #724]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004de2:	430b      	orrs	r3, r1
 8004de4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004de6:	e003      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dfe:	2300      	movs	r3, #0
 8004e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e0c:	4baa      	ldr	r3, [pc, #680]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	4aa7      	ldr	r2, [pc, #668]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004e2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e2e:	2300      	movs	r3, #0
 8004e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e3c:	4b9e      	ldr	r3, [pc, #632]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e4c:	4a9a      	ldr	r2, [pc, #616]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e60:	2300      	movs	r3, #0
 8004e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e6e:	4b92      	ldr	r3, [pc, #584]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e7c:	4a8e      	ldr	r2, [pc, #568]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e90:	2300      	movs	r3, #0
 8004e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e9e:	4b86      	ldr	r3, [pc, #536]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	4a85      	ldr	r2, [pc, #532]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ea8:	6113      	str	r3, [r2, #16]
 8004eaa:	4b83      	ldr	r3, [pc, #524]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eac:	6919      	ldr	r1, [r3, #16]
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004eb6:	4a80      	ldr	r2, [pc, #512]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004eca:	2300      	movs	r3, #0
 8004ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ece:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ed8:	4b77      	ldr	r3, [pc, #476]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004edc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee6:	4a74      	ldr	r2, [pc, #464]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f08:	4b6b      	ldr	r3, [pc, #428]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f18:	4a67      	ldr	r2, [pc, #412]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	2100      	movs	r1, #0
 8004f28:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f34:	460b      	mov	r3, r1
 8004f36:	4313      	orrs	r3, r2
 8004f38:	d011      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3e:	3308      	adds	r3, #8
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fb78 	bl	8005638 <RCCEx_PLL2_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	2100      	movs	r1, #0
 8004f68:	6239      	str	r1, [r7, #32]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f74:	460b      	mov	r3, r1
 8004f76:	4313      	orrs	r3, r2
 8004f78:	d011      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7e:	3308      	adds	r3, #8
 8004f80:	2101      	movs	r1, #1
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fb58 	bl	8005638 <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	61b9      	str	r1, [r7, #24]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	d011      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fb38 	bl	8005638 <RCCEx_PLL2_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	6139      	str	r1, [r7, #16]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	d011      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffe:	3328      	adds	r3, #40	@ 0x28
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fbca 	bl	800579c <RCCEx_PLL3_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800500e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	2100      	movs	r1, #0
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005034:	460b      	mov	r3, r1
 8005036:	4313      	orrs	r3, r2
 8005038:	d011      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	3328      	adds	r3, #40	@ 0x28
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fbaa 	bl	800579c <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800504e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	2100      	movs	r1, #0
 8005068:	6039      	str	r1, [r7, #0]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005074:	460b      	mov	r3, r1
 8005076:	4313      	orrs	r3, r2
 8005078:	d011      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	3328      	adds	r3, #40	@ 0x28
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fb8a 	bl	800579c <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800508e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800509e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80050b2:	46bd      	mov	sp, r7
 80050b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b8:	58024400 	.word	0x58024400

080050bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050c0:	f7fe fd96 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4904      	ldr	r1, [pc, #16]	@ (80050e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	58024400 	.word	0x58024400
 80050e4:	0800947c 	.word	0x0800947c

080050e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	@ 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80050fa:	4b9f      	ldr	r3, [pc, #636]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	0b1b      	lsrs	r3, r3, #12
 8005100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005104:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005106:	4b9c      	ldr	r3, [pc, #624]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005112:	4b99      	ldr	r3, [pc, #612]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005116:	08db      	lsrs	r3, r3, #3
 8005118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8111 	beq.w	8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b02      	cmp	r3, #2
 800513a:	f000 8083 	beq.w	8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b02      	cmp	r3, #2
 8005142:	f200 80a1 	bhi.w	8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d056      	beq.n	8005200 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005152:	e099      	b.n	8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005154:	4b88      	ldr	r3, [pc, #544]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d02d      	beq.n	80051bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005160:	4b85      	ldr	r3, [pc, #532]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	4a84      	ldr	r2, [pc, #528]	@ (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
 8005170:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	ee07 3a90 	vmov	s15, r3
 8005178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518a:	4b7b      	ldr	r3, [pc, #492]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519a:	ed97 6a03 	vldr	s12, [r7, #12]
 800519e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051ba:	e087      	b.n	80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051de:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051fe:	e065      	b.n	80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005212:	4b59      	ldr	r3, [pc, #356]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005222:	ed97 6a03 	vldr	s12, [r7, #12]
 8005226:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005242:	e043      	b.n	80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005256:	4b48      	ldr	r3, [pc, #288]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005266:	ed97 6a03 	vldr	s12, [r7, #12]
 800526a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800526e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800527a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005286:	e021      	b.n	80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529a:	4b37      	ldr	r3, [pc, #220]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800529c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80052cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	0a5b      	lsrs	r3, r3, #9
 80052d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f2:	ee17 2a90 	vmov	r2, s15
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80052fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005314:	edd7 6a07 	vldr	s13, [r7, #28]
 8005318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800531c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005320:	ee17 2a90 	vmov	r2, s15
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005328:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	0e1b      	lsrs	r3, r3, #24
 800532e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800533e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005342:	edd7 6a07 	vldr	s13, [r7, #28]
 8005346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534e:	ee17 2a90 	vmov	r2, s15
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005356:	e008      	b.n	800536a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	609a      	str	r2, [r3, #8]
}
 800536a:	bf00      	nop
 800536c:	3724      	adds	r7, #36	@ 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
 800537c:	03d09000 	.word	0x03d09000
 8005380:	46000000 	.word	0x46000000
 8005384:	4c742400 	.word	0x4c742400
 8005388:	4a742400 	.word	0x4a742400
 800538c:	4bbebc20 	.word	0x4bbebc20

08005390 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	@ 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005398:	4ba1      	ldr	r3, [pc, #644]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053a2:	4b9f      	ldr	r3, [pc, #636]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	0d1b      	lsrs	r3, r3, #20
 80053a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053ae:	4b9c      	ldr	r3, [pc, #624]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053ba:	4b99      	ldr	r3, [pc, #612]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	08db      	lsrs	r3, r3, #3
 80053c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8111 	beq.w	8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	f000 8083 	beq.w	80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	f200 80a1 	bhi.w	8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d056      	beq.n	80054a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053fa:	e099      	b.n	8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053fc:	4b88      	ldr	r3, [pc, #544]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d02d      	beq.n	8005464 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005408:	4b85      	ldr	r3, [pc, #532]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	08db      	lsrs	r3, r3, #3
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	4a84      	ldr	r2, [pc, #528]	@ (8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	ee07 3a90 	vmov	s15, r3
 8005420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005432:	4b7b      	ldr	r3, [pc, #492]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005442:	ed97 6a03 	vldr	s12, [r7, #12]
 8005446:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800544a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005462:	e087      	b.n	8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800562c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005476:	4b6a      	ldr	r3, [pc, #424]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005486:	ed97 6a03 	vldr	s12, [r7, #12]
 800548a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800548e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054a6:	e065      	b.n	8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ba:	4b59      	ldr	r3, [pc, #356]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ea:	e043      	b.n	8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054fe:	4b48      	ldr	r3, [pc, #288]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005512:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800552e:	e021      	b.n	8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005542:	4b37      	ldr	r3, [pc, #220]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a03 	vldr	s12, [r7, #12]
 8005556:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005572:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005574:	4b2a      	ldr	r3, [pc, #168]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	0a5b      	lsrs	r3, r3, #9
 800557a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800558a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800558e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559a:	ee17 2a90 	vmov	r2, s15
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80055a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c8:	ee17 2a90 	vmov	r2, s15
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	0e1b      	lsrs	r3, r3, #24
 80055d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f6:	ee17 2a90 	vmov	r2, s15
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055fe:	e008      	b.n	8005612 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]
}
 8005612:	bf00      	nop
 8005614:	3724      	adds	r7, #36	@ 0x24
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	58024400 	.word	0x58024400
 8005624:	03d09000 	.word	0x03d09000
 8005628:	46000000 	.word	0x46000000
 800562c:	4c742400 	.word	0x4c742400
 8005630:	4a742400 	.word	0x4a742400
 8005634:	4bbebc20 	.word	0x4bbebc20

08005638 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005646:	4b53      	ldr	r3, [pc, #332]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b03      	cmp	r3, #3
 8005650:	d101      	bne.n	8005656 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e099      	b.n	800578a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005656:	4b4f      	ldr	r3, [pc, #316]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a4e      	ldr	r2, [pc, #312]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800565c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005662:	f7fc fc97 	bl	8001f94 <HAL_GetTick>
 8005666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005668:	e008      	b.n	800567c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800566a:	f7fc fc93 	bl	8001f94 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e086      	b.n	800578a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800567c:	4b45      	ldr	r3, [pc, #276]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f0      	bne.n	800566a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005688:	4b42      	ldr	r3, [pc, #264]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	493f      	ldr	r1, [pc, #252]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005698:	4313      	orrs	r3, r2
 800569a:	628b      	str	r3, [r1, #40]	@ 0x28
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	025b      	lsls	r3, r3, #9
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	061b      	lsls	r3, r3, #24
 80056c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056cc:	4931      	ldr	r1, [pc, #196]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056d2:	4b30      	ldr	r3, [pc, #192]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 80056d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	492d      	ldr	r1, [pc, #180]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80056e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	f023 0220 	bic.w	r2, r3, #32
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	4928      	ldr	r1, [pc, #160]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80056f6:	4b27      	ldr	r3, [pc, #156]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	4a26      	ldr	r2, [pc, #152]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 80056fc:	f023 0310 	bic.w	r3, r3, #16
 8005700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005702:	4b24      	ldr	r3, [pc, #144]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005706:	4b24      	ldr	r3, [pc, #144]	@ (8005798 <RCCEx_PLL2_Config+0x160>)
 8005708:	4013      	ands	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	69d2      	ldr	r2, [r2, #28]
 800570e:	00d2      	lsls	r2, r2, #3
 8005710:	4920      	ldr	r1, [pc, #128]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005716:	4b1f      	ldr	r3, [pc, #124]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	4a1e      	ldr	r2, [pc, #120]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800571c:	f043 0310 	orr.w	r3, r3, #16
 8005720:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800572a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572c:	4a19      	ldr	r2, [pc, #100]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800572e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005732:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005734:	e00f      	b.n	8005756 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d106      	bne.n	800574a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800573c:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	4a14      	ldr	r2, [pc, #80]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005746:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005748:	e005      	b.n	8005756 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800574a:	4b12      	ldr	r3, [pc, #72]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	4a11      	ldr	r2, [pc, #68]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005754:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005756:	4b0f      	ldr	r3, [pc, #60]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a0e      	ldr	r2, [pc, #56]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800575c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005762:	f7fc fc17 	bl	8001f94 <HAL_GetTick>
 8005766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005768:	e008      	b.n	800577c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800576a:	f7fc fc13 	bl	8001f94 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e006      	b.n	800578a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <RCCEx_PLL2_Config+0x15c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	58024400 	.word	0x58024400
 8005798:	ffff0007 	.word	0xffff0007

0800579c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057aa:	4b53      	ldr	r3, [pc, #332]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d101      	bne.n	80057ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e099      	b.n	80058ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057ba:	4b4f      	ldr	r3, [pc, #316]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a4e      	ldr	r2, [pc, #312]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c6:	f7fc fbe5 	bl	8001f94 <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057cc:	e008      	b.n	80057e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057ce:	f7fc fbe1 	bl	8001f94 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e086      	b.n	80058ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057e0:	4b45      	ldr	r3, [pc, #276]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f0      	bne.n	80057ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80057ec:	4b42      	ldr	r3, [pc, #264]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	051b      	lsls	r3, r3, #20
 80057fa:	493f      	ldr	r1, [pc, #252]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	3b01      	subs	r3, #1
 8005810:	025b      	lsls	r3, r3, #9
 8005812:	b29b      	uxth	r3, r3
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	3b01      	subs	r3, #1
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005830:	4931      	ldr	r1, [pc, #196]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005836:	4b30      	ldr	r3, [pc, #192]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	492d      	ldr	r1, [pc, #180]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005848:	4b2b      	ldr	r3, [pc, #172]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 800584a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	4928      	ldr	r1, [pc, #160]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800585a:	4b27      	ldr	r3, [pc, #156]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	4a26      	ldr	r2, [pc, #152]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800586a:	4b24      	ldr	r3, [pc, #144]	@ (80058fc <RCCEx_PLL3_Config+0x160>)
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	69d2      	ldr	r2, [r2, #28]
 8005872:	00d2      	lsls	r2, r2, #3
 8005874:	4920      	ldr	r1, [pc, #128]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005876:	4313      	orrs	r3, r2
 8005878:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800587a:	4b1f      	ldr	r3, [pc, #124]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	4a1e      	ldr	r2, [pc, #120]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005884:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800588c:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 8005892:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005898:	e00f      	b.n	80058ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d106      	bne.n	80058ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058a0:	4b15      	ldr	r3, [pc, #84]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	4a14      	ldr	r2, [pc, #80]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80058a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058ac:	e005      	b.n	80058ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058ae:	4b12      	ldr	r3, [pc, #72]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	4a11      	ldr	r2, [pc, #68]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80058b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058ba:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a0e      	ldr	r2, [pc, #56]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c6:	f7fc fb65 	bl	8001f94 <HAL_GetTick>
 80058ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058cc:	e008      	b.n	80058e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058ce:	f7fc fb61 	bl	8001f94 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e006      	b.n	80058ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <RCCEx_PLL3_Config+0x15c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f0      	beq.n	80058ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	58024400 	.word	0x58024400
 80058fc:	ffff0007 	.word	0xffff0007

08005900 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e10f      	b.n	8005b32 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a87      	ldr	r2, [pc, #540]	@ (8005b3c <HAL_SPI_Init+0x23c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <HAL_SPI_Init+0x42>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a86      	ldr	r2, [pc, #536]	@ (8005b40 <HAL_SPI_Init+0x240>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00a      	beq.n	8005942 <HAL_SPI_Init+0x42>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a84      	ldr	r2, [pc, #528]	@ (8005b44 <HAL_SPI_Init+0x244>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d005      	beq.n	8005942 <HAL_SPI_Init+0x42>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b0f      	cmp	r3, #15
 800593c:	d901      	bls.n	8005942 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0f7      	b.n	8005b32 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f910 	bl	8006b68 <SPI_GetPacketSize>
 8005948:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7b      	ldr	r2, [pc, #492]	@ (8005b3c <HAL_SPI_Init+0x23c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00c      	beq.n	800596e <HAL_SPI_Init+0x6e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a79      	ldr	r2, [pc, #484]	@ (8005b40 <HAL_SPI_Init+0x240>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <HAL_SPI_Init+0x6e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a78      	ldr	r2, [pc, #480]	@ (8005b44 <HAL_SPI_Init+0x244>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d002      	beq.n	800596e <HAL_SPI_Init+0x6e>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b08      	cmp	r3, #8
 800596c:	d811      	bhi.n	8005992 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005972:	4a72      	ldr	r2, [pc, #456]	@ (8005b3c <HAL_SPI_Init+0x23c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a70      	ldr	r2, [pc, #448]	@ (8005b40 <HAL_SPI_Init+0x240>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_SPI_Init+0x8c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6f      	ldr	r2, [pc, #444]	@ (8005b44 <HAL_SPI_Init+0x244>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d104      	bne.n	8005996 <HAL_SPI_Init+0x96>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b10      	cmp	r3, #16
 8005990:	d901      	bls.n	8005996 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e0cd      	b.n	8005b32 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb fd7a 	bl	80014a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80059d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059dc:	d119      	bne.n	8005a12 <HAL_SPI_Init+0x112>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059e6:	d103      	bne.n	80059f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10c      	bne.n	8005a12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80059fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a00:	d107      	bne.n	8005a12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00f      	beq.n	8005a3e <HAL_SPI_Init+0x13e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	2b06      	cmp	r3, #6
 8005a24:	d90b      	bls.n	8005a3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e007      	b.n	8005a4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a56:	431a      	orrs	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	ea42 0103 	orr.w	r1, r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aae:	ea42 0103 	orr.w	r1, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d113      	bne.n	8005aee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ad8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005aec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0201 	bic.w	r2, r2, #1
 8005afc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40013000 	.word	0x40013000
 8005b40:	40003800 	.word	0x40003800
 8005b44:	40003c00 	.word	0x40003c00

08005b48 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3320      	adds	r3, #32
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b60:	f7fc fa18 	bl	8001f94 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d001      	beq.n	8005b76 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e1d1      	b.n	8005f1a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_SPI_Transmit+0x3a>
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e1c9      	b.n	8005f1a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_SPI_Transmit+0x4c>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e1c2      	b.n	8005f1a <HAL_SPI_Transmit+0x3d2>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005bec:	d108      	bne.n	8005c00 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e009      	b.n	8005c14 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005c12:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4b96      	ldr	r3, [pc, #600]	@ (8005e74 <HAL_SPI_Transmit+0x32c>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	88f9      	ldrh	r1, [r7, #6]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c40:	d107      	bne.n	8005c52 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b0f      	cmp	r3, #15
 8005c58:	d947      	bls.n	8005cea <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005c5a:	e03f      	b.n	8005cdc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d114      	bne.n	8005c94 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7a:	1d1a      	adds	r2, r3, #4
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c92:	e023      	b.n	8005cdc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c94:	f7fc f97e 	bl	8001f94 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d803      	bhi.n	8005cac <HAL_SPI_Transmit+0x164>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d102      	bne.n	8005cb2 <HAL_SPI_Transmit+0x16a>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d114      	bne.n	8005cdc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fe8a 	bl	80069cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e11e      	b.n	8005f1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1b9      	bne.n	8005c5c <HAL_SPI_Transmit+0x114>
 8005ce8:	e0f1      	b.n	8005ece <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	f240 80e6 	bls.w	8005ec0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005cf4:	e05d      	b.n	8005db2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d132      	bne.n	8005d6a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d918      	bls.n	8005d42 <HAL_SPI_Transmit+0x1fa>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d014      	beq.n	8005d42 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d28:	1d1a      	adds	r2, r3, #4
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b02      	subs	r3, #2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d40:	e037      	b.n	8005db2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d50:	1c9a      	adds	r2, r3, #2
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d68:	e023      	b.n	8005db2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d6a:	f7fc f913 	bl	8001f94 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d803      	bhi.n	8005d82 <HAL_SPI_Transmit+0x23a>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d102      	bne.n	8005d88 <HAL_SPI_Transmit+0x240>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d114      	bne.n	8005db2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fe1f 	bl	80069cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0b3      	b.n	8005f1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d19b      	bne.n	8005cf6 <HAL_SPI_Transmit+0x1ae>
 8005dbe:	e086      	b.n	8005ece <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d154      	bne.n	8005e78 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d918      	bls.n	8005e0c <HAL_SPI_Transmit+0x2c4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	d914      	bls.n	8005e0c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b04      	subs	r3, #4
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e0a:	e059      	b.n	8005ec0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d917      	bls.n	8005e48 <HAL_SPI_Transmit+0x300>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b02      	subs	r3, #2
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e46:	e03b      	b.n	8005ec0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3320      	adds	r3, #32
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e72:	e025      	b.n	8005ec0 <HAL_SPI_Transmit+0x378>
 8005e74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e78:	f7fc f88c 	bl	8001f94 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d803      	bhi.n	8005e90 <HAL_SPI_Transmit+0x348>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d102      	bne.n	8005e96 <HAL_SPI_Transmit+0x34e>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d114      	bne.n	8005ec0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fd98 	bl	80069cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ea2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e02c      	b.n	8005f1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f47f af79 	bne.w	8005dc0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2108      	movs	r1, #8
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fe17 	bl	8006b0c <SPI_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fd69 	bl	80069cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop

08005f24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08e      	sub	sp, #56	@ 0x38
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3320      	adds	r3, #32
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3330      	adds	r3, #48	@ 0x30
 8005f40:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4e:	f7fc f821 	bl	8001f94 <HAL_GetTick>
 8005f52:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005f54:	887b      	ldrh	r3, [r7, #2]
 8005f56:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005f58:	887b      	ldrh	r3, [r7, #2]
 8005f5a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d001      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e310      	b.n	800658e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x5a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x5a>
 8005f78:	887b      	ldrh	r3, [r7, #2]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e305      	b.n	800658e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x6c>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e2fe      	b.n	800658e <HAL_SPI_TransmitReceive+0x66a>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2205      	movs	r2, #5
 8005f9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	887a      	ldrh	r2, [r7, #2]
 8005fb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	887a      	ldrh	r2, [r7, #2]
 8005fba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	887a      	ldrh	r2, [r7, #2]
 8005fc8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	887a      	ldrh	r2, [r7, #2]
 8005fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005fee:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a70      	ldr	r2, [pc, #448]	@ (80061b8 <HAL_SPI_TransmitReceive+0x294>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d009      	beq.n	800600e <HAL_SPI_TransmitReceive+0xea>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a6f      	ldr	r2, [pc, #444]	@ (80061bc <HAL_SPI_TransmitReceive+0x298>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d004      	beq.n	800600e <HAL_SPI_TransmitReceive+0xea>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a6d      	ldr	r2, [pc, #436]	@ (80061c0 <HAL_SPI_TransmitReceive+0x29c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d102      	bne.n	8006014 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800600e:	2310      	movs	r3, #16
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006012:	e001      	b.n	8006018 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006014:	2308      	movs	r3, #8
 8006016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	4b69      	ldr	r3, [pc, #420]	@ (80061c4 <HAL_SPI_TransmitReceive+0x2a0>)
 8006020:	4013      	ands	r3, r2
 8006022:	8879      	ldrh	r1, [r7, #2]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	430b      	orrs	r3, r1
 800602a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006044:	d107      	bne.n	8006056 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2b0f      	cmp	r3, #15
 800605c:	f240 80a2 	bls.w	80061a4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006066:	e094      	b.n	8006192 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b02      	cmp	r3, #2
 8006074:	d120      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x194>
 8006076:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01d      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800607c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800607e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006084:	429a      	cmp	r2, r3
 8006086:	d217      	bcs.n	80060b8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80060c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d065      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d118      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060de:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060e4:	1d1a      	adds	r2, r3, #4
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006102:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006104:	e045      	b.n	8006192 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006106:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006108:	8bfb      	ldrh	r3, [r7, #30]
 800610a:	429a      	cmp	r2, r3
 800610c:	d21d      	bcs.n	800614a <HAL_SPI_TransmitReceive+0x226>
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d018      	beq.n	800614a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006120:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006122:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006146:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006148:	e023      	b.n	8006192 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800614a:	f7fb ff23 	bl	8001f94 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006156:	429a      	cmp	r2, r3
 8006158:	d803      	bhi.n	8006162 <HAL_SPI_TransmitReceive+0x23e>
 800615a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d102      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x244>
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d114      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fc2f 	bl	80069cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006174:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e1fd      	b.n	800658e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006192:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006194:	2b00      	cmp	r3, #0
 8006196:	f47f af67 	bne.w	8006068 <HAL_SPI_TransmitReceive+0x144>
 800619a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800619c:	2b00      	cmp	r3, #0
 800619e:	f47f af63 	bne.w	8006068 <HAL_SPI_TransmitReceive+0x144>
 80061a2:	e1ce      	b.n	8006542 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	f240 81c2 	bls.w	8006532 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80061ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b0:	085b      	lsrs	r3, r3, #1
 80061b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80061b4:	e0c9      	b.n	800634a <HAL_SPI_TransmitReceive+0x426>
 80061b6:	bf00      	nop
 80061b8:	40013000 	.word	0x40013000
 80061bc:	40003800 	.word	0x40003800
 80061c0:	40003c00 	.word	0x40003c00
 80061c4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d11f      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x2f2>
 80061d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01c      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80061dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80061de:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d216      	bcs.n	8006216 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006214:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800621e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8092 	beq.w	800634a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d118      	bne.n	8006266 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006238:	6a3a      	ldr	r2, [r7, #32]
 800623a:	8812      	ldrh	r2, [r2, #0]
 800623c:	b292      	uxth	r2, r2
 800623e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006262:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006264:	e071      	b.n	800634a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006266:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006268:	8bfb      	ldrh	r3, [r7, #30]
 800626a:	429a      	cmp	r2, r3
 800626c:	d228      	bcs.n	80062c0 <HAL_SPI_TransmitReceive+0x39c>
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d023      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800627c:	6a3a      	ldr	r2, [r7, #32]
 800627e:	8812      	ldrh	r2, [r2, #0]
 8006280:	b292      	uxth	r2, r2
 8006282:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006288:	1c9a      	adds	r2, r3, #2
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006292:	6a3a      	ldr	r2, [r7, #32]
 8006294:	8812      	ldrh	r2, [r2, #0]
 8006296:	b292      	uxth	r2, r2
 8006298:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800629e:	1c9a      	adds	r2, r3, #2
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b02      	subs	r3, #2
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062bc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062be:	e044      	b.n	800634a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80062c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d11d      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x3de>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d018      	beq.n	8006302 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	8812      	ldrh	r2, [r2, #0]
 80062d8:	b292      	uxth	r2, r2
 80062da:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006300:	e023      	b.n	800634a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006302:	f7fb fe47 	bl	8001f94 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800630e:	429a      	cmp	r2, r3
 8006310:	d803      	bhi.n	800631a <HAL_SPI_TransmitReceive+0x3f6>
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d102      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x3fc>
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	d114      	bne.n	800634a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fb53 	bl	80069cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800632c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e121      	b.n	800658e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800634a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f af3b 	bne.w	80061c8 <HAL_SPI_TransmitReceive+0x2a4>
 8006352:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	f47f af37 	bne.w	80061c8 <HAL_SPI_TransmitReceive+0x2a4>
 800635a:	e0f2      	b.n	8006542 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d121      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x48a>
 800636a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006370:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006372:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006378:	429a      	cmp	r2, r3
 800637a:	d218      	bcs.n	80063ae <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3320      	adds	r3, #32
 8006386:	7812      	ldrb	r2, [r2, #0]
 8006388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80063b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80ba 	beq.w	8006532 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d11b      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006400:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006402:	e096      	b.n	8006532 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006404:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006406:	8bfb      	ldrh	r3, [r7, #30]
 8006408:	429a      	cmp	r2, r3
 800640a:	d24a      	bcs.n	80064a2 <HAL_SPI_TransmitReceive+0x57e>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d045      	beq.n	80064a2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006422:	7812      	ldrb	r2, [r2, #0]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800645a:	7812      	ldrb	r2, [r2, #0]
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b04      	subs	r3, #4
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800649e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064a0:	e047      	b.n	8006532 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80064a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d820      	bhi.n	80064ea <HAL_SPI_TransmitReceive+0x5c6>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01b      	beq.n	80064ea <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064be:	7812      	ldrb	r2, [r2, #0]
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064e8:	e023      	b.n	8006532 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ea:	f7fb fd53 	bl	8001f94 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d803      	bhi.n	8006502 <HAL_SPI_TransmitReceive+0x5de>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d102      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x5e4>
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d114      	bne.n	8006532 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fa5f 	bl	80069cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006514:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e02d      	b.n	800658e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006532:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006534:	2b00      	cmp	r3, #0
 8006536:	f47f af11 	bne.w	800635c <HAL_SPI_TransmitReceive+0x438>
 800653a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f af0d 	bne.w	800635c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	2200      	movs	r2, #0
 800654a:	2108      	movs	r1, #8
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fadd 	bl	8006b0c <SPI_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800655e:	f043 0220 	orr.w	r2, r3, #32
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa2f 	bl	80069cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800658c:	2300      	movs	r3, #0
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3730      	adds	r7, #48	@ 0x30
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop

08006598 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	@ 0x28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80065ca:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3330      	adds	r3, #48	@ 0x30
 80065d2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d010      	beq.n	8006600 <HAL_SPI_IRQHandler+0x68>
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065f6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9c3 	bl	8006984 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80065fe:	e192      	b.n	8006926 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d113      	bne.n	8006632 <HAL_SPI_IRQHandler+0x9a>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10e      	bne.n	8006632 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
    handled = 1UL;
 800662e:	2301      	movs	r3, #1
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10f      	bne.n	800665c <HAL_SPI_IRQHandler+0xc4>
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
    handled = 1UL;
 8006658:	2301      	movs	r3, #1
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10f      	bne.n	8006686 <HAL_SPI_IRQHandler+0xee>
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006676:	2b00      	cmp	r3, #0
 8006678:	d105      	bne.n	8006686 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
    handled = 1UL;
 8006682:	2301      	movs	r3, #1
 8006684:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	f040 8147 	bne.w	800691c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 808b 	beq.w	80067b0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0208 	orr.w	r2, r2, #8
 80066a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0210 	orr.w	r2, r2, #16
 80066b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066c8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0208 	bic.w	r2, r2, #8
 80066d8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d13d      	bne.n	8006764 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80066e8:	e036      	b.n	8006758 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	d90b      	bls.n	800670a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066fc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	665a      	str	r2, [r3, #100]	@ 0x64
 8006708:	e01d      	b.n	8006746 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2b07      	cmp	r3, #7
 8006710:	d90b      	bls.n	800672a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	8812      	ldrh	r2, [r2, #0]
 800671a:	b292      	uxth	r2, r2
 800671c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006722:	1c9a      	adds	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	665a      	str	r2, [r3, #100]	@ 0x64
 8006728:	e00d      	b.n	8006746 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006736:	7812      	ldrb	r2, [r2, #0]
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1c2      	bne.n	80066ea <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f931 	bl	80069cc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8f7 	bl	8006970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006782:	e0d0      	b.n	8006926 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	2b05      	cmp	r3, #5
 8006788:	d103      	bne.n	8006792 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f8e6 	bl	800695c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006790:	e0c6      	b.n	8006920 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006792:	7cfb      	ldrb	r3, [r7, #19]
 8006794:	2b04      	cmp	r3, #4
 8006796:	d103      	bne.n	80067a0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f8d5 	bl	8006948 <HAL_SPI_RxCpltCallback>
    return;
 800679e:	e0bf      	b.n	8006920 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80067a0:	7cfb      	ldrb	r3, [r7, #19]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	f040 80bc 	bne.w	8006920 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f8c3 	bl	8006934 <HAL_SPI_TxCpltCallback>
    return;
 80067ae:	e0b7      	b.n	8006920 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80b5 	beq.w	8006926 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00f      	beq.n	80067e6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067cc:	f043 0204 	orr.w	r2, r3, #4
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699a      	ldr	r2, [r3, #24]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067e4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00f      	beq.n	8006810 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f6:	f043 0201 	orr.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800680e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00f      	beq.n	800683a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006820:	f043 0208 	orr.w	r2, r3, #8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006838:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800684a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0220 	orr.w	r2, r2, #32
 8006862:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800686a:	2b00      	cmp	r3, #0
 800686c:	d05a      	beq.n	8006924 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6919      	ldr	r1, [r3, #16]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b28      	ldr	r3, [pc, #160]	@ (800692c <HAL_SPI_IRQHandler+0x394>)
 800688a:	400b      	ands	r3, r1
 800688c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006894:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006898:	d138      	bne.n	800690c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80068a8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d013      	beq.n	80068da <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006930 <HAL_SPI_IRQHandler+0x398>)
 80068b8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fb fd2c 	bl	800231c <HAL_DMA_Abort_IT>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d020      	beq.n	8006924 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068e6:	4a12      	ldr	r2, [pc, #72]	@ (8006930 <HAL_SPI_IRQHandler+0x398>)
 80068e8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fb fd14 	bl	800231c <HAL_DMA_Abort_IT>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d014      	beq.n	8006924 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006900:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800690a:	e00b      	b.n	8006924 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f82b 	bl	8006970 <HAL_SPI_ErrorCallback>
    return;
 800691a:	e003      	b.n	8006924 <HAL_SPI_IRQHandler+0x38c>
    return;
 800691c:	bf00      	nop
 800691e:	e002      	b.n	8006926 <HAL_SPI_IRQHandler+0x38e>
    return;
 8006920:	bf00      	nop
 8006922:	e000      	b.n	8006926 <HAL_SPI_IRQHandler+0x38e>
    return;
 8006924:	bf00      	nop
  }
}
 8006926:	3728      	adds	r7, #40	@ 0x28
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	fffffc94 	.word	0xfffffc94
 8006930:	08006999 	.word	0x08006999

08006934 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff ffd6 	bl	8006970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0208 	orr.w	r2, r2, #8
 80069ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0210 	orr.w	r2, r2, #16
 80069fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6919      	ldr	r1, [r3, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b3c      	ldr	r3, [pc, #240]	@ (8006b08 <SPI_CloseTransfer+0x13c>)
 8006a18:	400b      	ands	r3, r1
 8006a1a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006a2a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d014      	beq.n	8006a62 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00f      	beq.n	8006a62 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0220 	orr.w	r2, r2, #32
 8006a60:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d014      	beq.n	8006a98 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00f      	beq.n	8006a98 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a7e:	f043 0204 	orr.w	r2, r3, #4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a96:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00f      	beq.n	8006ac2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699a      	ldr	r2, [r3, #24]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ac0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00f      	beq.n	8006aec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad2:	f043 0208 	orr.w	r2, r3, #8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006aea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	fffffc90 	.word	0xfffffc90

08006b0c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b1c:	e010      	b.n	8006b40 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1e:	f7fb fa39 	bl	8001f94 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d803      	bhi.n	8006b36 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d102      	bne.n	8006b3c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e00f      	b.n	8006b60 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	bf0c      	ite	eq
 8006b50:	2301      	moveq	r3, #1
 8006b52:	2300      	movne	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d0df      	beq.n	8006b1e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	3301      	adds	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	3307      	adds	r3, #7
 8006b86:	08db      	lsrs	r3, r3, #3
 8006b88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e042      	b.n	8006c36 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f83b 	bl	8006c3e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2224      	movs	r2, #36	@ 0x24
 8006bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fe29 	bl	8007840 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f8be 	bl	8006d70 <UART_SetConfig>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e01b      	b.n	8006c36 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0201 	orr.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fea8 	bl	8007984 <UART_CheckIdleState>
 8006c34:	4603      	mov	r3, r0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b08a      	sub	sp, #40	@ 0x28
 8006c56:	af02      	add	r7, sp, #8
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	603b      	str	r3, [r7, #0]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d17b      	bne.n	8006d64 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_UART_Transmit+0x26>
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e074      	b.n	8006d66 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2221      	movs	r2, #33	@ 0x21
 8006c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c8c:	f7fb f982 	bl	8001f94 <HAL_GetTick>
 8006c90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	88fa      	ldrh	r2, [r7, #6]
 8006c96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006caa:	d108      	bne.n	8006cbe <HAL_UART_Transmit+0x6c>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e003      	b.n	8006cc6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cc6:	e030      	b.n	8006d2a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2180      	movs	r1, #128	@ 0x80
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 ff00 	bl	8007ad8 <UART_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e03d      	b.n	8006d66 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10b      	bne.n	8006d08 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cfe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	3302      	adds	r3, #2
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e007      	b.n	8006d18 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	781a      	ldrb	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	3301      	adds	r3, #1
 8006d16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1c8      	bne.n	8006cc8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2140      	movs	r1, #64	@ 0x40
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fec9 	bl	8007ad8 <UART_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e006      	b.n	8006d66 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	e000      	b.n	8006d66 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d64:	2302      	movs	r3, #2
  }
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3720      	adds	r7, #32
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d74:	b092      	sub	sp, #72	@ 0x48
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4bbe      	ldr	r3, [pc, #760]	@ (8007098 <UART_SetConfig+0x328>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4ab3      	ldr	r2, [pc, #716]	@ (800709c <UART_SetConfig+0x32c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	4baf      	ldr	r3, [pc, #700]	@ (80070a0 <UART_SetConfig+0x330>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	f023 010f 	bic.w	r1, r3, #15
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4aa6      	ldr	r2, [pc, #664]	@ (80070a4 <UART_SetConfig+0x334>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d177      	bne.n	8006f00 <UART_SetConfig+0x190>
 8006e10:	4ba5      	ldr	r3, [pc, #660]	@ (80070a8 <UART_SetConfig+0x338>)
 8006e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e18:	2b28      	cmp	r3, #40	@ 0x28
 8006e1a:	d86d      	bhi.n	8006ef8 <UART_SetConfig+0x188>
 8006e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <UART_SetConfig+0xb4>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006ec9 	.word	0x08006ec9
 8006e28:	08006ef9 	.word	0x08006ef9
 8006e2c:	08006ef9 	.word	0x08006ef9
 8006e30:	08006ef9 	.word	0x08006ef9
 8006e34:	08006ef9 	.word	0x08006ef9
 8006e38:	08006ef9 	.word	0x08006ef9
 8006e3c:	08006ef9 	.word	0x08006ef9
 8006e40:	08006ef9 	.word	0x08006ef9
 8006e44:	08006ed1 	.word	0x08006ed1
 8006e48:	08006ef9 	.word	0x08006ef9
 8006e4c:	08006ef9 	.word	0x08006ef9
 8006e50:	08006ef9 	.word	0x08006ef9
 8006e54:	08006ef9 	.word	0x08006ef9
 8006e58:	08006ef9 	.word	0x08006ef9
 8006e5c:	08006ef9 	.word	0x08006ef9
 8006e60:	08006ef9 	.word	0x08006ef9
 8006e64:	08006ed9 	.word	0x08006ed9
 8006e68:	08006ef9 	.word	0x08006ef9
 8006e6c:	08006ef9 	.word	0x08006ef9
 8006e70:	08006ef9 	.word	0x08006ef9
 8006e74:	08006ef9 	.word	0x08006ef9
 8006e78:	08006ef9 	.word	0x08006ef9
 8006e7c:	08006ef9 	.word	0x08006ef9
 8006e80:	08006ef9 	.word	0x08006ef9
 8006e84:	08006ee1 	.word	0x08006ee1
 8006e88:	08006ef9 	.word	0x08006ef9
 8006e8c:	08006ef9 	.word	0x08006ef9
 8006e90:	08006ef9 	.word	0x08006ef9
 8006e94:	08006ef9 	.word	0x08006ef9
 8006e98:	08006ef9 	.word	0x08006ef9
 8006e9c:	08006ef9 	.word	0x08006ef9
 8006ea0:	08006ef9 	.word	0x08006ef9
 8006ea4:	08006ee9 	.word	0x08006ee9
 8006ea8:	08006ef9 	.word	0x08006ef9
 8006eac:	08006ef9 	.word	0x08006ef9
 8006eb0:	08006ef9 	.word	0x08006ef9
 8006eb4:	08006ef9 	.word	0x08006ef9
 8006eb8:	08006ef9 	.word	0x08006ef9
 8006ebc:	08006ef9 	.word	0x08006ef9
 8006ec0:	08006ef9 	.word	0x08006ef9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e222      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e21e      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e21a      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e216      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006ee8:	2320      	movs	r3, #32
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e212      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006ef0:	2340      	movs	r3, #64	@ 0x40
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef6:	e20e      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006ef8:	2380      	movs	r3, #128	@ 0x80
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efe:	e20a      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a69      	ldr	r2, [pc, #420]	@ (80070ac <UART_SetConfig+0x33c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d130      	bne.n	8006f6c <UART_SetConfig+0x1fc>
 8006f0a:	4b67      	ldr	r3, [pc, #412]	@ (80070a8 <UART_SetConfig+0x338>)
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	d826      	bhi.n	8006f64 <UART_SetConfig+0x1f4>
 8006f16:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <UART_SetConfig+0x1ac>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f35 	.word	0x08006f35
 8006f20:	08006f3d 	.word	0x08006f3d
 8006f24:	08006f45 	.word	0x08006f45
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	2300      	movs	r3, #0
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e1ec      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f42:	e1e8      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4a:	e1e4      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e1e0      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f54:	2320      	movs	r3, #32
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e1dc      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f5c:	2340      	movs	r3, #64	@ 0x40
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f62:	e1d8      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f64:	2380      	movs	r3, #128	@ 0x80
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6a:	e1d4      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a4f      	ldr	r2, [pc, #316]	@ (80070b0 <UART_SetConfig+0x340>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d130      	bne.n	8006fd8 <UART_SetConfig+0x268>
 8006f76:	4b4c      	ldr	r3, [pc, #304]	@ (80070a8 <UART_SetConfig+0x338>)
 8006f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	2b05      	cmp	r3, #5
 8006f80:	d826      	bhi.n	8006fd0 <UART_SetConfig+0x260>
 8006f82:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <UART_SetConfig+0x218>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006fa1 	.word	0x08006fa1
 8006f8c:	08006fa9 	.word	0x08006fa9
 8006f90:	08006fb1 	.word	0x08006fb1
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fc1 	.word	0x08006fc1
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa6:	e1b6      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fae:	e1b2      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb6:	e1ae      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e1aa      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e1a6      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006fc8:	2340      	movs	r3, #64	@ 0x40
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fce:	e1a2      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006fd0:	2380      	movs	r3, #128	@ 0x80
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd6:	e19e      	b.n	8007316 <UART_SetConfig+0x5a6>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a35      	ldr	r2, [pc, #212]	@ (80070b4 <UART_SetConfig+0x344>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d130      	bne.n	8007044 <UART_SetConfig+0x2d4>
 8006fe2:	4b31      	ldr	r3, [pc, #196]	@ (80070a8 <UART_SetConfig+0x338>)
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	d826      	bhi.n	800703c <UART_SetConfig+0x2cc>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <UART_SetConfig+0x284>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	0800700d 	.word	0x0800700d
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	0800701d 	.word	0x0800701d
 8007000:	08007025 	.word	0x08007025
 8007004:	0800702d 	.word	0x0800702d
 8007008:	08007035 	.word	0x08007035
 800700c:	2300      	movs	r3, #0
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007012:	e180      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701a:	e17c      	b.n	8007316 <UART_SetConfig+0x5a6>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007022:	e178      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702a:	e174      	b.n	8007316 <UART_SetConfig+0x5a6>
 800702c:	2320      	movs	r3, #32
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e170      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007034:	2340      	movs	r3, #64	@ 0x40
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703a:	e16c      	b.n	8007316 <UART_SetConfig+0x5a6>
 800703c:	2380      	movs	r3, #128	@ 0x80
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007042:	e168      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1b      	ldr	r2, [pc, #108]	@ (80070b8 <UART_SetConfig+0x348>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d142      	bne.n	80070d4 <UART_SetConfig+0x364>
 800704e:	4b16      	ldr	r3, [pc, #88]	@ (80070a8 <UART_SetConfig+0x338>)
 8007050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b05      	cmp	r3, #5
 8007058:	d838      	bhi.n	80070cc <UART_SetConfig+0x35c>
 800705a:	a201      	add	r2, pc, #4	@ (adr r2, 8007060 <UART_SetConfig+0x2f0>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007079 	.word	0x08007079
 8007064:	08007081 	.word	0x08007081
 8007068:	08007089 	.word	0x08007089
 800706c:	08007091 	.word	0x08007091
 8007070:	080070bd 	.word	0x080070bd
 8007074:	080070c5 	.word	0x080070c5
 8007078:	2300      	movs	r3, #0
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707e:	e14a      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007086:	e146      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708e:	e142      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007096:	e13e      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007098:	cfff69f3 	.word	0xcfff69f3
 800709c:	58000c00 	.word	0x58000c00
 80070a0:	11fff4ff 	.word	0x11fff4ff
 80070a4:	40011000 	.word	0x40011000
 80070a8:	58024400 	.word	0x58024400
 80070ac:	40004400 	.word	0x40004400
 80070b0:	40004800 	.word	0x40004800
 80070b4:	40004c00 	.word	0x40004c00
 80070b8:	40005000 	.word	0x40005000
 80070bc:	2320      	movs	r3, #32
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e128      	b.n	8007316 <UART_SetConfig+0x5a6>
 80070c4:	2340      	movs	r3, #64	@ 0x40
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e124      	b.n	8007316 <UART_SetConfig+0x5a6>
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e120      	b.n	8007316 <UART_SetConfig+0x5a6>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4acb      	ldr	r2, [pc, #812]	@ (8007408 <UART_SetConfig+0x698>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d176      	bne.n	80071cc <UART_SetConfig+0x45c>
 80070de:	4bcb      	ldr	r3, [pc, #812]	@ (800740c <UART_SetConfig+0x69c>)
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070e6:	2b28      	cmp	r3, #40	@ 0x28
 80070e8:	d86c      	bhi.n	80071c4 <UART_SetConfig+0x454>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <UART_SetConfig+0x380>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007195 	.word	0x08007195
 80070f4:	080071c5 	.word	0x080071c5
 80070f8:	080071c5 	.word	0x080071c5
 80070fc:	080071c5 	.word	0x080071c5
 8007100:	080071c5 	.word	0x080071c5
 8007104:	080071c5 	.word	0x080071c5
 8007108:	080071c5 	.word	0x080071c5
 800710c:	080071c5 	.word	0x080071c5
 8007110:	0800719d 	.word	0x0800719d
 8007114:	080071c5 	.word	0x080071c5
 8007118:	080071c5 	.word	0x080071c5
 800711c:	080071c5 	.word	0x080071c5
 8007120:	080071c5 	.word	0x080071c5
 8007124:	080071c5 	.word	0x080071c5
 8007128:	080071c5 	.word	0x080071c5
 800712c:	080071c5 	.word	0x080071c5
 8007130:	080071a5 	.word	0x080071a5
 8007134:	080071c5 	.word	0x080071c5
 8007138:	080071c5 	.word	0x080071c5
 800713c:	080071c5 	.word	0x080071c5
 8007140:	080071c5 	.word	0x080071c5
 8007144:	080071c5 	.word	0x080071c5
 8007148:	080071c5 	.word	0x080071c5
 800714c:	080071c5 	.word	0x080071c5
 8007150:	080071ad 	.word	0x080071ad
 8007154:	080071c5 	.word	0x080071c5
 8007158:	080071c5 	.word	0x080071c5
 800715c:	080071c5 	.word	0x080071c5
 8007160:	080071c5 	.word	0x080071c5
 8007164:	080071c5 	.word	0x080071c5
 8007168:	080071c5 	.word	0x080071c5
 800716c:	080071c5 	.word	0x080071c5
 8007170:	080071b5 	.word	0x080071b5
 8007174:	080071c5 	.word	0x080071c5
 8007178:	080071c5 	.word	0x080071c5
 800717c:	080071c5 	.word	0x080071c5
 8007180:	080071c5 	.word	0x080071c5
 8007184:	080071c5 	.word	0x080071c5
 8007188:	080071c5 	.word	0x080071c5
 800718c:	080071c5 	.word	0x080071c5
 8007190:	080071bd 	.word	0x080071bd
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e0bc      	b.n	8007316 <UART_SetConfig+0x5a6>
 800719c:	2304      	movs	r3, #4
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e0b8      	b.n	8007316 <UART_SetConfig+0x5a6>
 80071a4:	2308      	movs	r3, #8
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e0b4      	b.n	8007316 <UART_SetConfig+0x5a6>
 80071ac:	2310      	movs	r3, #16
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b2:	e0b0      	b.n	8007316 <UART_SetConfig+0x5a6>
 80071b4:	2320      	movs	r3, #32
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e0ac      	b.n	8007316 <UART_SetConfig+0x5a6>
 80071bc:	2340      	movs	r3, #64	@ 0x40
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c2:	e0a8      	b.n	8007316 <UART_SetConfig+0x5a6>
 80071c4:	2380      	movs	r3, #128	@ 0x80
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ca:	e0a4      	b.n	8007316 <UART_SetConfig+0x5a6>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a8f      	ldr	r2, [pc, #572]	@ (8007410 <UART_SetConfig+0x6a0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d130      	bne.n	8007238 <UART_SetConfig+0x4c8>
 80071d6:	4b8d      	ldr	r3, [pc, #564]	@ (800740c <UART_SetConfig+0x69c>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	2b05      	cmp	r3, #5
 80071e0:	d826      	bhi.n	8007230 <UART_SetConfig+0x4c0>
 80071e2:	a201      	add	r2, pc, #4	@ (adr r2, 80071e8 <UART_SetConfig+0x478>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	08007201 	.word	0x08007201
 80071ec:	08007209 	.word	0x08007209
 80071f0:	08007211 	.word	0x08007211
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007229 	.word	0x08007229
 8007200:	2300      	movs	r3, #0
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007206:	e086      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007208:	2304      	movs	r3, #4
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e082      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007210:	2308      	movs	r3, #8
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007216:	e07e      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007218:	2310      	movs	r3, #16
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e07a      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007220:	2320      	movs	r3, #32
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e076      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007228:	2340      	movs	r3, #64	@ 0x40
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722e:	e072      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007230:	2380      	movs	r3, #128	@ 0x80
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007236:	e06e      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a75      	ldr	r2, [pc, #468]	@ (8007414 <UART_SetConfig+0x6a4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d130      	bne.n	80072a4 <UART_SetConfig+0x534>
 8007242:	4b72      	ldr	r3, [pc, #456]	@ (800740c <UART_SetConfig+0x69c>)
 8007244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b05      	cmp	r3, #5
 800724c:	d826      	bhi.n	800729c <UART_SetConfig+0x52c>
 800724e:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <UART_SetConfig+0x4e4>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	0800726d 	.word	0x0800726d
 8007258:	08007275 	.word	0x08007275
 800725c:	0800727d 	.word	0x0800727d
 8007260:	08007285 	.word	0x08007285
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007295 	.word	0x08007295
 800726c:	2300      	movs	r3, #0
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007272:	e050      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e04c      	b.n	8007316 <UART_SetConfig+0x5a6>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007282:	e048      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e044      	b.n	8007316 <UART_SetConfig+0x5a6>
 800728c:	2320      	movs	r3, #32
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e040      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007294:	2340      	movs	r3, #64	@ 0x40
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e03c      	b.n	8007316 <UART_SetConfig+0x5a6>
 800729c:	2380      	movs	r3, #128	@ 0x80
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a2:	e038      	b.n	8007316 <UART_SetConfig+0x5a6>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a5b      	ldr	r2, [pc, #364]	@ (8007418 <UART_SetConfig+0x6a8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d130      	bne.n	8007310 <UART_SetConfig+0x5a0>
 80072ae:	4b57      	ldr	r3, [pc, #348]	@ (800740c <UART_SetConfig+0x69c>)
 80072b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d826      	bhi.n	8007308 <UART_SetConfig+0x598>
 80072ba:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <UART_SetConfig+0x550>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072d9 	.word	0x080072d9
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	080072e9 	.word	0x080072e9
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	08007301 	.word	0x08007301
 80072d8:	2302      	movs	r3, #2
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072de:	e01a      	b.n	8007316 <UART_SetConfig+0x5a6>
 80072e0:	2304      	movs	r3, #4
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e6:	e016      	b.n	8007316 <UART_SetConfig+0x5a6>
 80072e8:	2308      	movs	r3, #8
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ee:	e012      	b.n	8007316 <UART_SetConfig+0x5a6>
 80072f0:	2310      	movs	r3, #16
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f6:	e00e      	b.n	8007316 <UART_SetConfig+0x5a6>
 80072f8:	2320      	movs	r3, #32
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e00a      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007300:	2340      	movs	r3, #64	@ 0x40
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007306:	e006      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007308:	2380      	movs	r3, #128	@ 0x80
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730e:	e002      	b.n	8007316 <UART_SetConfig+0x5a6>
 8007310:	2380      	movs	r3, #128	@ 0x80
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3f      	ldr	r2, [pc, #252]	@ (8007418 <UART_SetConfig+0x6a8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	f040 80f8 	bne.w	8007512 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007322:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007326:	2b20      	cmp	r3, #32
 8007328:	dc46      	bgt.n	80073b8 <UART_SetConfig+0x648>
 800732a:	2b02      	cmp	r3, #2
 800732c:	f2c0 8082 	blt.w	8007434 <UART_SetConfig+0x6c4>
 8007330:	3b02      	subs	r3, #2
 8007332:	2b1e      	cmp	r3, #30
 8007334:	d87e      	bhi.n	8007434 <UART_SetConfig+0x6c4>
 8007336:	a201      	add	r2, pc, #4	@ (adr r2, 800733c <UART_SetConfig+0x5cc>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	080073bf 	.word	0x080073bf
 8007340:	08007435 	.word	0x08007435
 8007344:	080073c7 	.word	0x080073c7
 8007348:	08007435 	.word	0x08007435
 800734c:	08007435 	.word	0x08007435
 8007350:	08007435 	.word	0x08007435
 8007354:	080073d7 	.word	0x080073d7
 8007358:	08007435 	.word	0x08007435
 800735c:	08007435 	.word	0x08007435
 8007360:	08007435 	.word	0x08007435
 8007364:	08007435 	.word	0x08007435
 8007368:	08007435 	.word	0x08007435
 800736c:	08007435 	.word	0x08007435
 8007370:	08007435 	.word	0x08007435
 8007374:	080073e7 	.word	0x080073e7
 8007378:	08007435 	.word	0x08007435
 800737c:	08007435 	.word	0x08007435
 8007380:	08007435 	.word	0x08007435
 8007384:	08007435 	.word	0x08007435
 8007388:	08007435 	.word	0x08007435
 800738c:	08007435 	.word	0x08007435
 8007390:	08007435 	.word	0x08007435
 8007394:	08007435 	.word	0x08007435
 8007398:	08007435 	.word	0x08007435
 800739c:	08007435 	.word	0x08007435
 80073a0:	08007435 	.word	0x08007435
 80073a4:	08007435 	.word	0x08007435
 80073a8:	08007435 	.word	0x08007435
 80073ac:	08007435 	.word	0x08007435
 80073b0:	08007435 	.word	0x08007435
 80073b4:	08007427 	.word	0x08007427
 80073b8:	2b40      	cmp	r3, #64	@ 0x40
 80073ba:	d037      	beq.n	800742c <UART_SetConfig+0x6bc>
 80073bc:	e03a      	b.n	8007434 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073be:	f7fd fe7d 	bl	80050bc <HAL_RCCEx_GetD3PCLK1Freq>
 80073c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073c4:	e03c      	b.n	8007440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fd fe8c 	bl	80050e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d4:	e034      	b.n	8007440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d6:	f107 0318 	add.w	r3, r7, #24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fd ffd8 	bl	8005390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e4:	e02c      	b.n	8007440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e6:	4b09      	ldr	r3, [pc, #36]	@ (800740c <UART_SetConfig+0x69c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073f2:	4b06      	ldr	r3, [pc, #24]	@ (800740c <UART_SetConfig+0x69c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	08db      	lsrs	r3, r3, #3
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	4a07      	ldr	r2, [pc, #28]	@ (800741c <UART_SetConfig+0x6ac>)
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007404:	e01c      	b.n	8007440 <UART_SetConfig+0x6d0>
 8007406:	bf00      	nop
 8007408:	40011400 	.word	0x40011400
 800740c:	58024400 	.word	0x58024400
 8007410:	40007800 	.word	0x40007800
 8007414:	40007c00 	.word	0x40007c00
 8007418:	58000c00 	.word	0x58000c00
 800741c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007420:	4b9d      	ldr	r3, [pc, #628]	@ (8007698 <UART_SetConfig+0x928>)
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007424:	e00c      	b.n	8007440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007426:	4b9d      	ldr	r3, [pc, #628]	@ (800769c <UART_SetConfig+0x92c>)
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742a:	e009      	b.n	8007440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007432:	e005      	b.n	8007440 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800743e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 81de 	beq.w	8007804 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	4a94      	ldr	r2, [pc, #592]	@ (80076a0 <UART_SetConfig+0x930>)
 800744e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007452:	461a      	mov	r2, r3
 8007454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007456:	fbb3 f3f2 	udiv	r3, r3, r2
 800745a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	4413      	add	r3, r2
 8007466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007468:	429a      	cmp	r2, r3
 800746a:	d305      	bcc.n	8007478 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007474:	429a      	cmp	r2, r3
 8007476:	d903      	bls.n	8007480 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800747e:	e1c1      	b.n	8007804 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007482:	2200      	movs	r2, #0
 8007484:	60bb      	str	r3, [r7, #8]
 8007486:	60fa      	str	r2, [r7, #12]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	4a84      	ldr	r2, [pc, #528]	@ (80076a0 <UART_SetConfig+0x930>)
 800748e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007492:	b29b      	uxth	r3, r3
 8007494:	2200      	movs	r2, #0
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800749e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074a2:	f7f8 ff6d 	bl	8000380 <__aeabi_uldivmod>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	020b      	lsls	r3, r1, #8
 80074b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074bc:	0202      	lsls	r2, r0, #8
 80074be:	6979      	ldr	r1, [r7, #20]
 80074c0:	6849      	ldr	r1, [r1, #4]
 80074c2:	0849      	lsrs	r1, r1, #1
 80074c4:	2000      	movs	r0, #0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4605      	mov	r5, r0
 80074ca:	eb12 0804 	adds.w	r8, r2, r4
 80074ce:	eb43 0905 	adc.w	r9, r3, r5
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	469a      	mov	sl, r3
 80074da:	4693      	mov	fp, r2
 80074dc:	4652      	mov	r2, sl
 80074de:	465b      	mov	r3, fp
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f8 ff4c 	bl	8000380 <__aeabi_uldivmod>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4613      	mov	r3, r2
 80074ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074f6:	d308      	bcc.n	800750a <UART_SetConfig+0x79a>
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074fe:	d204      	bcs.n	800750a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007506:	60da      	str	r2, [r3, #12]
 8007508:	e17c      	b.n	8007804 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007510:	e178      	b.n	8007804 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800751a:	f040 80c5 	bne.w	80076a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800751e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007522:	2b20      	cmp	r3, #32
 8007524:	dc48      	bgt.n	80075b8 <UART_SetConfig+0x848>
 8007526:	2b00      	cmp	r3, #0
 8007528:	db7b      	blt.n	8007622 <UART_SetConfig+0x8b2>
 800752a:	2b20      	cmp	r3, #32
 800752c:	d879      	bhi.n	8007622 <UART_SetConfig+0x8b2>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <UART_SetConfig+0x7c4>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	080075bf 	.word	0x080075bf
 8007538:	080075c7 	.word	0x080075c7
 800753c:	08007623 	.word	0x08007623
 8007540:	08007623 	.word	0x08007623
 8007544:	080075cf 	.word	0x080075cf
 8007548:	08007623 	.word	0x08007623
 800754c:	08007623 	.word	0x08007623
 8007550:	08007623 	.word	0x08007623
 8007554:	080075df 	.word	0x080075df
 8007558:	08007623 	.word	0x08007623
 800755c:	08007623 	.word	0x08007623
 8007560:	08007623 	.word	0x08007623
 8007564:	08007623 	.word	0x08007623
 8007568:	08007623 	.word	0x08007623
 800756c:	08007623 	.word	0x08007623
 8007570:	08007623 	.word	0x08007623
 8007574:	080075ef 	.word	0x080075ef
 8007578:	08007623 	.word	0x08007623
 800757c:	08007623 	.word	0x08007623
 8007580:	08007623 	.word	0x08007623
 8007584:	08007623 	.word	0x08007623
 8007588:	08007623 	.word	0x08007623
 800758c:	08007623 	.word	0x08007623
 8007590:	08007623 	.word	0x08007623
 8007594:	08007623 	.word	0x08007623
 8007598:	08007623 	.word	0x08007623
 800759c:	08007623 	.word	0x08007623
 80075a0:	08007623 	.word	0x08007623
 80075a4:	08007623 	.word	0x08007623
 80075a8:	08007623 	.word	0x08007623
 80075ac:	08007623 	.word	0x08007623
 80075b0:	08007623 	.word	0x08007623
 80075b4:	08007615 	.word	0x08007615
 80075b8:	2b40      	cmp	r3, #64	@ 0x40
 80075ba:	d02e      	beq.n	800761a <UART_SetConfig+0x8aa>
 80075bc:	e031      	b.n	8007622 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075be:	f7fc fb47 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 80075c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075c4:	e033      	b.n	800762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c6:	f7fc fb59 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 80075ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075cc:	e02f      	b.n	800762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fd fd88 	bl	80050e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075dc:	e027      	b.n	800762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075de:	f107 0318 	add.w	r3, r7, #24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd fed4 	bl	8005390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ec:	e01f      	b.n	800762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ee:	4b2d      	ldr	r3, [pc, #180]	@ (80076a4 <UART_SetConfig+0x934>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075fa:	4b2a      	ldr	r3, [pc, #168]	@ (80076a4 <UART_SetConfig+0x934>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	08db      	lsrs	r3, r3, #3
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	4a24      	ldr	r2, [pc, #144]	@ (8007698 <UART_SetConfig+0x928>)
 8007606:	fa22 f303 	lsr.w	r3, r2, r3
 800760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800760c:	e00f      	b.n	800762e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800760e:	4b22      	ldr	r3, [pc, #136]	@ (8007698 <UART_SetConfig+0x928>)
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007612:	e00c      	b.n	800762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007614:	4b21      	ldr	r3, [pc, #132]	@ (800769c <UART_SetConfig+0x92c>)
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007618:	e009      	b.n	800762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007620:	e005      	b.n	800762e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800762c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800762e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 80e7 	beq.w	8007804 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	4a19      	ldr	r2, [pc, #100]	@ (80076a0 <UART_SetConfig+0x930>)
 800763c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007640:	461a      	mov	r2, r3
 8007642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007644:	fbb3 f3f2 	udiv	r3, r3, r2
 8007648:	005a      	lsls	r2, r3, #1
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	085b      	lsrs	r3, r3, #1
 8007650:	441a      	add	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	fbb2 f3f3 	udiv	r3, r2, r3
 800765a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	2b0f      	cmp	r3, #15
 8007660:	d916      	bls.n	8007690 <UART_SetConfig+0x920>
 8007662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007668:	d212      	bcs.n	8007690 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800766a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766c:	b29b      	uxth	r3, r3
 800766e:	f023 030f 	bic.w	r3, r3, #15
 8007672:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	b29b      	uxth	r3, r3
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	b29a      	uxth	r2, r3
 8007680:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007682:	4313      	orrs	r3, r2
 8007684:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	e0b9      	b.n	8007804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007696:	e0b5      	b.n	8007804 <UART_SetConfig+0xa94>
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	08009498 	.word	0x08009498
 80076a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80076a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	dc49      	bgt.n	8007744 <UART_SetConfig+0x9d4>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	db7c      	blt.n	80077ae <UART_SetConfig+0xa3e>
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d87a      	bhi.n	80077ae <UART_SetConfig+0xa3e>
 80076b8:	a201      	add	r2, pc, #4	@ (adr r2, 80076c0 <UART_SetConfig+0x950>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	0800774b 	.word	0x0800774b
 80076c4:	08007753 	.word	0x08007753
 80076c8:	080077af 	.word	0x080077af
 80076cc:	080077af 	.word	0x080077af
 80076d0:	0800775b 	.word	0x0800775b
 80076d4:	080077af 	.word	0x080077af
 80076d8:	080077af 	.word	0x080077af
 80076dc:	080077af 	.word	0x080077af
 80076e0:	0800776b 	.word	0x0800776b
 80076e4:	080077af 	.word	0x080077af
 80076e8:	080077af 	.word	0x080077af
 80076ec:	080077af 	.word	0x080077af
 80076f0:	080077af 	.word	0x080077af
 80076f4:	080077af 	.word	0x080077af
 80076f8:	080077af 	.word	0x080077af
 80076fc:	080077af 	.word	0x080077af
 8007700:	0800777b 	.word	0x0800777b
 8007704:	080077af 	.word	0x080077af
 8007708:	080077af 	.word	0x080077af
 800770c:	080077af 	.word	0x080077af
 8007710:	080077af 	.word	0x080077af
 8007714:	080077af 	.word	0x080077af
 8007718:	080077af 	.word	0x080077af
 800771c:	080077af 	.word	0x080077af
 8007720:	080077af 	.word	0x080077af
 8007724:	080077af 	.word	0x080077af
 8007728:	080077af 	.word	0x080077af
 800772c:	080077af 	.word	0x080077af
 8007730:	080077af 	.word	0x080077af
 8007734:	080077af 	.word	0x080077af
 8007738:	080077af 	.word	0x080077af
 800773c:	080077af 	.word	0x080077af
 8007740:	080077a1 	.word	0x080077a1
 8007744:	2b40      	cmp	r3, #64	@ 0x40
 8007746:	d02e      	beq.n	80077a6 <UART_SetConfig+0xa36>
 8007748:	e031      	b.n	80077ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800774a:	f7fc fa81 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 800774e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007750:	e033      	b.n	80077ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007752:	f7fc fa93 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 8007756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007758:	e02f      	b.n	80077ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800775a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800775e:	4618      	mov	r0, r3
 8007760:	f7fd fcc2 	bl	80050e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007768:	e027      	b.n	80077ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800776a:	f107 0318 	add.w	r3, r7, #24
 800776e:	4618      	mov	r0, r3
 8007770:	f7fd fe0e 	bl	8005390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007778:	e01f      	b.n	80077ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800777a:	4b2d      	ldr	r3, [pc, #180]	@ (8007830 <UART_SetConfig+0xac0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0320 	and.w	r3, r3, #32
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007786:	4b2a      	ldr	r3, [pc, #168]	@ (8007830 <UART_SetConfig+0xac0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	08db      	lsrs	r3, r3, #3
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	4a28      	ldr	r2, [pc, #160]	@ (8007834 <UART_SetConfig+0xac4>)
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007798:	e00f      	b.n	80077ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800779a:	4b26      	ldr	r3, [pc, #152]	@ (8007834 <UART_SetConfig+0xac4>)
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800779e:	e00c      	b.n	80077ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077a0:	4b25      	ldr	r3, [pc, #148]	@ (8007838 <UART_SetConfig+0xac8>)
 80077a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a4:	e009      	b.n	80077ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ac:	e005      	b.n	80077ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80077b8:	bf00      	nop
    }

    if (pclk != 0U)
 80077ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d021      	beq.n	8007804 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	4a1d      	ldr	r2, [pc, #116]	@ (800783c <UART_SetConfig+0xacc>)
 80077c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ca:	461a      	mov	r2, r3
 80077cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	441a      	add	r2, r3
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d909      	bls.n	80077fe <UART_SetConfig+0xa8e>
 80077ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f0:	d205      	bcs.n	80077fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60da      	str	r2, [r3, #12]
 80077fc:	e002      	b.n	8007804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2201      	movs	r2, #1
 8007808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2201      	movs	r2, #1
 8007810:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2200      	movs	r2, #0
 8007818:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2200      	movs	r2, #0
 800781e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007820:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007824:	4618      	mov	r0, r3
 8007826:	3748      	adds	r7, #72	@ 0x48
 8007828:	46bd      	mov	sp, r7
 800782a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782e:	bf00      	nop
 8007830:	58024400 	.word	0x58024400
 8007834:	03d09000 	.word	0x03d09000
 8007838:	003d0900 	.word	0x003d0900
 800783c:	08009498 	.word	0x08009498

08007840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01a      	beq.n	8007956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800793e:	d10a      	bne.n	8007956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	605a      	str	r2, [r3, #4]
  }
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b098      	sub	sp, #96	@ 0x60
 8007988:	af02      	add	r7, sp, #8
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007994:	f7fa fafe 	bl	8001f94 <HAL_GetTick>
 8007998:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0308 	and.w	r3, r3, #8
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d12f      	bne.n	8007a08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b0:	2200      	movs	r2, #0
 80079b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f88e 	bl	8007ad8 <UART_WaitOnFlagUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d022      	beq.n	8007a08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e6      	bne.n	80079c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e063      	b.n	8007ad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d149      	bne.n	8007aaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f857 	bl	8007ad8 <UART_WaitOnFlagUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d03c      	beq.n	8007aaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e6      	bne.n	8007a30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a82:	61fa      	str	r2, [r7, #28]
 8007a84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	69b9      	ldr	r1, [r7, #24]
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e012      	b.n	8007ad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3758      	adds	r7, #88	@ 0x58
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae8:	e04f      	b.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d04b      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af2:	f7fa fa4f 	bl	8001f94 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d302      	bcc.n	8007b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e04e      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d037      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b80      	cmp	r3, #128	@ 0x80
 8007b1e:	d034      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b40      	cmp	r3, #64	@ 0x40
 8007b24:	d031      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d110      	bne.n	8007b56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2208      	movs	r2, #8
 8007b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f839 	bl	8007bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2208      	movs	r2, #8
 8007b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e029      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b64:	d111      	bne.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f81f 	bl	8007bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e00f      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69da      	ldr	r2, [r3, #28]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4013      	ands	r3, r2
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d0a0      	beq.n	8007aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b095      	sub	sp, #84	@ 0x54
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007be0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e6      	bne.n	8007bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	4b1e      	ldr	r3, [pc, #120]	@ (8007c7c <UART_EndRxTransfer+0xc8>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e5      	bne.n	8007bee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d118      	bne.n	8007c5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f023 0310 	bic.w	r3, r3, #16
 8007c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6979      	ldr	r1, [r7, #20]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	613b      	str	r3, [r7, #16]
   return(result);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c70:	bf00      	nop
 8007c72:	3754      	adds	r7, #84	@ 0x54
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	effffffe 	.word	0xeffffffe

08007c80 <std>:
 8007c80:	2300      	movs	r3, #0
 8007c82:	b510      	push	{r4, lr}
 8007c84:	4604      	mov	r4, r0
 8007c86:	e9c0 3300 	strd	r3, r3, [r0]
 8007c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c8e:	6083      	str	r3, [r0, #8]
 8007c90:	8181      	strh	r1, [r0, #12]
 8007c92:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c94:	81c2      	strh	r2, [r0, #14]
 8007c96:	6183      	str	r3, [r0, #24]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	2208      	movs	r2, #8
 8007c9c:	305c      	adds	r0, #92	@ 0x5c
 8007c9e:	f000 f906 	bl	8007eae <memset>
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd8 <std+0x58>)
 8007ca4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cdc <std+0x5c>)
 8007ca8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007caa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <std+0x60>)
 8007cac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce4 <std+0x64>)
 8007cb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce8 <std+0x68>)
 8007cb4:	6224      	str	r4, [r4, #32]
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d006      	beq.n	8007cc8 <std+0x48>
 8007cba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cbe:	4294      	cmp	r4, r2
 8007cc0:	d002      	beq.n	8007cc8 <std+0x48>
 8007cc2:	33d0      	adds	r3, #208	@ 0xd0
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d105      	bne.n	8007cd4 <std+0x54>
 8007cc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd0:	f000 b966 	b.w	8007fa0 <__retarget_lock_init_recursive>
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	bf00      	nop
 8007cd8:	08007e29 	.word	0x08007e29
 8007cdc:	08007e4b 	.word	0x08007e4b
 8007ce0:	08007e83 	.word	0x08007e83
 8007ce4:	08007ea7 	.word	0x08007ea7
 8007ce8:	24000270 	.word	0x24000270

08007cec <stdio_exit_handler>:
 8007cec:	4a02      	ldr	r2, [pc, #8]	@ (8007cf8 <stdio_exit_handler+0xc>)
 8007cee:	4903      	ldr	r1, [pc, #12]	@ (8007cfc <stdio_exit_handler+0x10>)
 8007cf0:	4803      	ldr	r0, [pc, #12]	@ (8007d00 <stdio_exit_handler+0x14>)
 8007cf2:	f000 b869 	b.w	8007dc8 <_fwalk_sglue>
 8007cf6:	bf00      	nop
 8007cf8:	2400002c 	.word	0x2400002c
 8007cfc:	0800883d 	.word	0x0800883d
 8007d00:	2400003c 	.word	0x2400003c

08007d04 <cleanup_stdio>:
 8007d04:	6841      	ldr	r1, [r0, #4]
 8007d06:	4b0c      	ldr	r3, [pc, #48]	@ (8007d38 <cleanup_stdio+0x34>)
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	d001      	beq.n	8007d14 <cleanup_stdio+0x10>
 8007d10:	f000 fd94 	bl	800883c <_fflush_r>
 8007d14:	68a1      	ldr	r1, [r4, #8]
 8007d16:	4b09      	ldr	r3, [pc, #36]	@ (8007d3c <cleanup_stdio+0x38>)
 8007d18:	4299      	cmp	r1, r3
 8007d1a:	d002      	beq.n	8007d22 <cleanup_stdio+0x1e>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fd8d 	bl	800883c <_fflush_r>
 8007d22:	68e1      	ldr	r1, [r4, #12]
 8007d24:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <cleanup_stdio+0x3c>)
 8007d26:	4299      	cmp	r1, r3
 8007d28:	d004      	beq.n	8007d34 <cleanup_stdio+0x30>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d30:	f000 bd84 	b.w	800883c <_fflush_r>
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	bf00      	nop
 8007d38:	24000270 	.word	0x24000270
 8007d3c:	240002d8 	.word	0x240002d8
 8007d40:	24000340 	.word	0x24000340

08007d44 <global_stdio_init.part.0>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4b0b      	ldr	r3, [pc, #44]	@ (8007d74 <global_stdio_init.part.0+0x30>)
 8007d48:	4c0b      	ldr	r4, [pc, #44]	@ (8007d78 <global_stdio_init.part.0+0x34>)
 8007d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d7c <global_stdio_init.part.0+0x38>)
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	4620      	mov	r0, r4
 8007d50:	2200      	movs	r2, #0
 8007d52:	2104      	movs	r1, #4
 8007d54:	f7ff ff94 	bl	8007c80 <std>
 8007d58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	2109      	movs	r1, #9
 8007d60:	f7ff ff8e 	bl	8007c80 <std>
 8007d64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d68:	2202      	movs	r2, #2
 8007d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6e:	2112      	movs	r1, #18
 8007d70:	f7ff bf86 	b.w	8007c80 <std>
 8007d74:	240003a8 	.word	0x240003a8
 8007d78:	24000270 	.word	0x24000270
 8007d7c:	08007ced 	.word	0x08007ced

08007d80 <__sfp_lock_acquire>:
 8007d80:	4801      	ldr	r0, [pc, #4]	@ (8007d88 <__sfp_lock_acquire+0x8>)
 8007d82:	f000 b90e 	b.w	8007fa2 <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	240003b1 	.word	0x240003b1

08007d8c <__sfp_lock_release>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	@ (8007d94 <__sfp_lock_release+0x8>)
 8007d8e:	f000 b909 	b.w	8007fa4 <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	240003b1 	.word	0x240003b1

08007d98 <__sinit>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	f7ff fff0 	bl	8007d80 <__sfp_lock_acquire>
 8007da0:	6a23      	ldr	r3, [r4, #32]
 8007da2:	b11b      	cbz	r3, 8007dac <__sinit+0x14>
 8007da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da8:	f7ff bff0 	b.w	8007d8c <__sfp_lock_release>
 8007dac:	4b04      	ldr	r3, [pc, #16]	@ (8007dc0 <__sinit+0x28>)
 8007dae:	6223      	str	r3, [r4, #32]
 8007db0:	4b04      	ldr	r3, [pc, #16]	@ (8007dc4 <__sinit+0x2c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f5      	bne.n	8007da4 <__sinit+0xc>
 8007db8:	f7ff ffc4 	bl	8007d44 <global_stdio_init.part.0>
 8007dbc:	e7f2      	b.n	8007da4 <__sinit+0xc>
 8007dbe:	bf00      	nop
 8007dc0:	08007d05 	.word	0x08007d05
 8007dc4:	240003a8 	.word	0x240003a8

08007dc8 <_fwalk_sglue>:
 8007dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	4607      	mov	r7, r0
 8007dce:	4688      	mov	r8, r1
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8007ddc:	d505      	bpl.n	8007dea <_fwalk_sglue+0x22>
 8007dde:	6824      	ldr	r4, [r4, #0]
 8007de0:	2c00      	cmp	r4, #0
 8007de2:	d1f7      	bne.n	8007dd4 <_fwalk_sglue+0xc>
 8007de4:	4630      	mov	r0, r6
 8007de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d907      	bls.n	8007e00 <_fwalk_sglue+0x38>
 8007df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df4:	3301      	adds	r3, #1
 8007df6:	d003      	beq.n	8007e00 <_fwalk_sglue+0x38>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	47c0      	blx	r8
 8007dfe:	4306      	orrs	r6, r0
 8007e00:	3568      	adds	r5, #104	@ 0x68
 8007e02:	e7e9      	b.n	8007dd8 <_fwalk_sglue+0x10>

08007e04 <iprintf>:
 8007e04:	b40f      	push	{r0, r1, r2, r3}
 8007e06:	b507      	push	{r0, r1, r2, lr}
 8007e08:	4906      	ldr	r1, [pc, #24]	@ (8007e24 <iprintf+0x20>)
 8007e0a:	ab04      	add	r3, sp, #16
 8007e0c:	6808      	ldr	r0, [r1, #0]
 8007e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e12:	6881      	ldr	r1, [r0, #8]
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	f000 f9e9 	bl	80081ec <_vfiprintf_r>
 8007e1a:	b003      	add	sp, #12
 8007e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e20:	b004      	add	sp, #16
 8007e22:	4770      	bx	lr
 8007e24:	24000038 	.word	0x24000038

08007e28 <__sread>:
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e30:	f000 f868 	bl	8007f04 <_read_r>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	bfab      	itete	ge
 8007e38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e3c:	181b      	addge	r3, r3, r0
 8007e3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e42:	bfac      	ite	ge
 8007e44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e46:	81a3      	strhlt	r3, [r4, #12]
 8007e48:	bd10      	pop	{r4, pc}

08007e4a <__swrite>:
 8007e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4e:	461f      	mov	r7, r3
 8007e50:	898b      	ldrh	r3, [r1, #12]
 8007e52:	05db      	lsls	r3, r3, #23
 8007e54:	4605      	mov	r5, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	4616      	mov	r6, r2
 8007e5a:	d505      	bpl.n	8007e68 <__swrite+0x1e>
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	2302      	movs	r3, #2
 8007e62:	2200      	movs	r2, #0
 8007e64:	f000 f83c 	bl	8007ee0 <_lseek_r>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	4632      	mov	r2, r6
 8007e76:	463b      	mov	r3, r7
 8007e78:	4628      	mov	r0, r5
 8007e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	f000 b853 	b.w	8007f28 <_write_r>

08007e82 <__sseek>:
 8007e82:	b510      	push	{r4, lr}
 8007e84:	460c      	mov	r4, r1
 8007e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8a:	f000 f829 	bl	8007ee0 <_lseek_r>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	bf15      	itete	ne
 8007e94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e9e:	81a3      	strheq	r3, [r4, #12]
 8007ea0:	bf18      	it	ne
 8007ea2:	81a3      	strhne	r3, [r4, #12]
 8007ea4:	bd10      	pop	{r4, pc}

08007ea6 <__sclose>:
 8007ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eaa:	f000 b809 	b.w	8007ec0 <_close_r>

08007eae <memset>:
 8007eae:	4402      	add	r2, r0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d100      	bne.n	8007eb8 <memset+0xa>
 8007eb6:	4770      	bx	lr
 8007eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ebc:	e7f9      	b.n	8007eb2 <memset+0x4>
	...

08007ec0 <_close_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d06      	ldr	r5, [pc, #24]	@ (8007edc <_close_r+0x1c>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	602b      	str	r3, [r5, #0]
 8007ecc:	f7f9 fc37 	bl	800173e <_close>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_close_r+0x1a>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_close_r+0x1a>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	240003ac 	.word	0x240003ac

08007ee0 <_lseek_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	@ (8007f00 <_lseek_r+0x20>)
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4608      	mov	r0, r1
 8007ee8:	4611      	mov	r1, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	602a      	str	r2, [r5, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f7f9 fc4c 	bl	800178c <_lseek>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_lseek_r+0x1e>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_lseek_r+0x1e>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	240003ac 	.word	0x240003ac

08007f04 <_read_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d07      	ldr	r5, [pc, #28]	@ (8007f24 <_read_r+0x20>)
 8007f08:	4604      	mov	r4, r0
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	602a      	str	r2, [r5, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7f9 fbda 	bl	80016cc <_read>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_read_r+0x1e>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_read_r+0x1e>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	240003ac 	.word	0x240003ac

08007f28 <_write_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d07      	ldr	r5, [pc, #28]	@ (8007f48 <_write_r+0x20>)
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	4608      	mov	r0, r1
 8007f30:	4611      	mov	r1, r2
 8007f32:	2200      	movs	r2, #0
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f7f9 fbe5 	bl	8001706 <_write>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_write_r+0x1e>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_write_r+0x1e>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	240003ac 	.word	0x240003ac

08007f4c <__errno>:
 8007f4c:	4b01      	ldr	r3, [pc, #4]	@ (8007f54 <__errno+0x8>)
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	24000038 	.word	0x24000038

08007f58 <__libc_init_array>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8007f90 <__libc_init_array+0x38>)
 8007f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8007f94 <__libc_init_array+0x3c>)
 8007f5e:	1b64      	subs	r4, r4, r5
 8007f60:	10a4      	asrs	r4, r4, #2
 8007f62:	2600      	movs	r6, #0
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	d109      	bne.n	8007f7c <__libc_init_array+0x24>
 8007f68:	4d0b      	ldr	r5, [pc, #44]	@ (8007f98 <__libc_init_array+0x40>)
 8007f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8007f9c <__libc_init_array+0x44>)
 8007f6c:	f000 fdb6 	bl	8008adc <_init>
 8007f70:	1b64      	subs	r4, r4, r5
 8007f72:	10a4      	asrs	r4, r4, #2
 8007f74:	2600      	movs	r6, #0
 8007f76:	42a6      	cmp	r6, r4
 8007f78:	d105      	bne.n	8007f86 <__libc_init_array+0x2e>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f80:	4798      	blx	r3
 8007f82:	3601      	adds	r6, #1
 8007f84:	e7ee      	b.n	8007f64 <__libc_init_array+0xc>
 8007f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8a:	4798      	blx	r3
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	e7f2      	b.n	8007f76 <__libc_init_array+0x1e>
 8007f90:	080094ec 	.word	0x080094ec
 8007f94:	080094ec 	.word	0x080094ec
 8007f98:	080094ec 	.word	0x080094ec
 8007f9c:	080094f0 	.word	0x080094f0

08007fa0 <__retarget_lock_init_recursive>:
 8007fa0:	4770      	bx	lr

08007fa2 <__retarget_lock_acquire_recursive>:
 8007fa2:	4770      	bx	lr

08007fa4 <__retarget_lock_release_recursive>:
 8007fa4:	4770      	bx	lr
	...

08007fa8 <_free_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4605      	mov	r5, r0
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d041      	beq.n	8008034 <_free_r+0x8c>
 8007fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb4:	1f0c      	subs	r4, r1, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfb8      	it	lt
 8007fba:	18e4      	addlt	r4, r4, r3
 8007fbc:	f000 f8e0 	bl	8008180 <__malloc_lock>
 8007fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008038 <_free_r+0x90>)
 8007fc2:	6813      	ldr	r3, [r2, #0]
 8007fc4:	b933      	cbnz	r3, 8007fd4 <_free_r+0x2c>
 8007fc6:	6063      	str	r3, [r4, #4]
 8007fc8:	6014      	str	r4, [r2, #0]
 8007fca:	4628      	mov	r0, r5
 8007fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fd0:	f000 b8dc 	b.w	800818c <__malloc_unlock>
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	d908      	bls.n	8007fea <_free_r+0x42>
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	1821      	adds	r1, r4, r0
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	bf01      	itttt	eq
 8007fe0:	6819      	ldreq	r1, [r3, #0]
 8007fe2:	685b      	ldreq	r3, [r3, #4]
 8007fe4:	1809      	addeq	r1, r1, r0
 8007fe6:	6021      	streq	r1, [r4, #0]
 8007fe8:	e7ed      	b.n	8007fc6 <_free_r+0x1e>
 8007fea:	461a      	mov	r2, r3
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	b10b      	cbz	r3, 8007ff4 <_free_r+0x4c>
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d9fa      	bls.n	8007fea <_free_r+0x42>
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	1850      	adds	r0, r2, r1
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d10b      	bne.n	8008014 <_free_r+0x6c>
 8007ffc:	6820      	ldr	r0, [r4, #0]
 8007ffe:	4401      	add	r1, r0
 8008000:	1850      	adds	r0, r2, r1
 8008002:	4283      	cmp	r3, r0
 8008004:	6011      	str	r1, [r2, #0]
 8008006:	d1e0      	bne.n	8007fca <_free_r+0x22>
 8008008:	6818      	ldr	r0, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	6053      	str	r3, [r2, #4]
 800800e:	4408      	add	r0, r1
 8008010:	6010      	str	r0, [r2, #0]
 8008012:	e7da      	b.n	8007fca <_free_r+0x22>
 8008014:	d902      	bls.n	800801c <_free_r+0x74>
 8008016:	230c      	movs	r3, #12
 8008018:	602b      	str	r3, [r5, #0]
 800801a:	e7d6      	b.n	8007fca <_free_r+0x22>
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	1821      	adds	r1, r4, r0
 8008020:	428b      	cmp	r3, r1
 8008022:	bf04      	itt	eq
 8008024:	6819      	ldreq	r1, [r3, #0]
 8008026:	685b      	ldreq	r3, [r3, #4]
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	bf04      	itt	eq
 800802c:	1809      	addeq	r1, r1, r0
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	6054      	str	r4, [r2, #4]
 8008032:	e7ca      	b.n	8007fca <_free_r+0x22>
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	bf00      	nop
 8008038:	240003b8 	.word	0x240003b8

0800803c <sbrk_aligned>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	4e0f      	ldr	r6, [pc, #60]	@ (800807c <sbrk_aligned+0x40>)
 8008040:	460c      	mov	r4, r1
 8008042:	6831      	ldr	r1, [r6, #0]
 8008044:	4605      	mov	r5, r0
 8008046:	b911      	cbnz	r1, 800804e <sbrk_aligned+0x12>
 8008048:	f000 fcb4 	bl	80089b4 <_sbrk_r>
 800804c:	6030      	str	r0, [r6, #0]
 800804e:	4621      	mov	r1, r4
 8008050:	4628      	mov	r0, r5
 8008052:	f000 fcaf 	bl	80089b4 <_sbrk_r>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	d103      	bne.n	8008062 <sbrk_aligned+0x26>
 800805a:	f04f 34ff 	mov.w	r4, #4294967295
 800805e:	4620      	mov	r0, r4
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	1cc4      	adds	r4, r0, #3
 8008064:	f024 0403 	bic.w	r4, r4, #3
 8008068:	42a0      	cmp	r0, r4
 800806a:	d0f8      	beq.n	800805e <sbrk_aligned+0x22>
 800806c:	1a21      	subs	r1, r4, r0
 800806e:	4628      	mov	r0, r5
 8008070:	f000 fca0 	bl	80089b4 <_sbrk_r>
 8008074:	3001      	adds	r0, #1
 8008076:	d1f2      	bne.n	800805e <sbrk_aligned+0x22>
 8008078:	e7ef      	b.n	800805a <sbrk_aligned+0x1e>
 800807a:	bf00      	nop
 800807c:	240003b4 	.word	0x240003b4

08008080 <_malloc_r>:
 8008080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008084:	1ccd      	adds	r5, r1, #3
 8008086:	f025 0503 	bic.w	r5, r5, #3
 800808a:	3508      	adds	r5, #8
 800808c:	2d0c      	cmp	r5, #12
 800808e:	bf38      	it	cc
 8008090:	250c      	movcc	r5, #12
 8008092:	2d00      	cmp	r5, #0
 8008094:	4606      	mov	r6, r0
 8008096:	db01      	blt.n	800809c <_malloc_r+0x1c>
 8008098:	42a9      	cmp	r1, r5
 800809a:	d904      	bls.n	80080a6 <_malloc_r+0x26>
 800809c:	230c      	movs	r3, #12
 800809e:	6033      	str	r3, [r6, #0]
 80080a0:	2000      	movs	r0, #0
 80080a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800817c <_malloc_r+0xfc>
 80080aa:	f000 f869 	bl	8008180 <__malloc_lock>
 80080ae:	f8d8 3000 	ldr.w	r3, [r8]
 80080b2:	461c      	mov	r4, r3
 80080b4:	bb44      	cbnz	r4, 8008108 <_malloc_r+0x88>
 80080b6:	4629      	mov	r1, r5
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff ffbf 	bl	800803c <sbrk_aligned>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	4604      	mov	r4, r0
 80080c2:	d158      	bne.n	8008176 <_malloc_r+0xf6>
 80080c4:	f8d8 4000 	ldr.w	r4, [r8]
 80080c8:	4627      	mov	r7, r4
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	d143      	bne.n	8008156 <_malloc_r+0xd6>
 80080ce:	2c00      	cmp	r4, #0
 80080d0:	d04b      	beq.n	800816a <_malloc_r+0xea>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	4639      	mov	r1, r7
 80080d6:	4630      	mov	r0, r6
 80080d8:	eb04 0903 	add.w	r9, r4, r3
 80080dc:	f000 fc6a 	bl	80089b4 <_sbrk_r>
 80080e0:	4581      	cmp	r9, r0
 80080e2:	d142      	bne.n	800816a <_malloc_r+0xea>
 80080e4:	6821      	ldr	r1, [r4, #0]
 80080e6:	1a6d      	subs	r5, r5, r1
 80080e8:	4629      	mov	r1, r5
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff ffa6 	bl	800803c <sbrk_aligned>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d03a      	beq.n	800816a <_malloc_r+0xea>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	442b      	add	r3, r5
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	f8d8 3000 	ldr.w	r3, [r8]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	bb62      	cbnz	r2, 800815c <_malloc_r+0xdc>
 8008102:	f8c8 7000 	str.w	r7, [r8]
 8008106:	e00f      	b.n	8008128 <_malloc_r+0xa8>
 8008108:	6822      	ldr	r2, [r4, #0]
 800810a:	1b52      	subs	r2, r2, r5
 800810c:	d420      	bmi.n	8008150 <_malloc_r+0xd0>
 800810e:	2a0b      	cmp	r2, #11
 8008110:	d917      	bls.n	8008142 <_malloc_r+0xc2>
 8008112:	1961      	adds	r1, r4, r5
 8008114:	42a3      	cmp	r3, r4
 8008116:	6025      	str	r5, [r4, #0]
 8008118:	bf18      	it	ne
 800811a:	6059      	strne	r1, [r3, #4]
 800811c:	6863      	ldr	r3, [r4, #4]
 800811e:	bf08      	it	eq
 8008120:	f8c8 1000 	streq.w	r1, [r8]
 8008124:	5162      	str	r2, [r4, r5]
 8008126:	604b      	str	r3, [r1, #4]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f82f 	bl	800818c <__malloc_unlock>
 800812e:	f104 000b 	add.w	r0, r4, #11
 8008132:	1d23      	adds	r3, r4, #4
 8008134:	f020 0007 	bic.w	r0, r0, #7
 8008138:	1ac2      	subs	r2, r0, r3
 800813a:	bf1c      	itt	ne
 800813c:	1a1b      	subne	r3, r3, r0
 800813e:	50a3      	strne	r3, [r4, r2]
 8008140:	e7af      	b.n	80080a2 <_malloc_r+0x22>
 8008142:	6862      	ldr	r2, [r4, #4]
 8008144:	42a3      	cmp	r3, r4
 8008146:	bf0c      	ite	eq
 8008148:	f8c8 2000 	streq.w	r2, [r8]
 800814c:	605a      	strne	r2, [r3, #4]
 800814e:	e7eb      	b.n	8008128 <_malloc_r+0xa8>
 8008150:	4623      	mov	r3, r4
 8008152:	6864      	ldr	r4, [r4, #4]
 8008154:	e7ae      	b.n	80080b4 <_malloc_r+0x34>
 8008156:	463c      	mov	r4, r7
 8008158:	687f      	ldr	r7, [r7, #4]
 800815a:	e7b6      	b.n	80080ca <_malloc_r+0x4a>
 800815c:	461a      	mov	r2, r3
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	42a3      	cmp	r3, r4
 8008162:	d1fb      	bne.n	800815c <_malloc_r+0xdc>
 8008164:	2300      	movs	r3, #0
 8008166:	6053      	str	r3, [r2, #4]
 8008168:	e7de      	b.n	8008128 <_malloc_r+0xa8>
 800816a:	230c      	movs	r3, #12
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	4630      	mov	r0, r6
 8008170:	f000 f80c 	bl	800818c <__malloc_unlock>
 8008174:	e794      	b.n	80080a0 <_malloc_r+0x20>
 8008176:	6005      	str	r5, [r0, #0]
 8008178:	e7d6      	b.n	8008128 <_malloc_r+0xa8>
 800817a:	bf00      	nop
 800817c:	240003b8 	.word	0x240003b8

08008180 <__malloc_lock>:
 8008180:	4801      	ldr	r0, [pc, #4]	@ (8008188 <__malloc_lock+0x8>)
 8008182:	f7ff bf0e 	b.w	8007fa2 <__retarget_lock_acquire_recursive>
 8008186:	bf00      	nop
 8008188:	240003b0 	.word	0x240003b0

0800818c <__malloc_unlock>:
 800818c:	4801      	ldr	r0, [pc, #4]	@ (8008194 <__malloc_unlock+0x8>)
 800818e:	f7ff bf09 	b.w	8007fa4 <__retarget_lock_release_recursive>
 8008192:	bf00      	nop
 8008194:	240003b0 	.word	0x240003b0

08008198 <__sfputc_r>:
 8008198:	6893      	ldr	r3, [r2, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	b410      	push	{r4}
 80081a0:	6093      	str	r3, [r2, #8]
 80081a2:	da08      	bge.n	80081b6 <__sfputc_r+0x1e>
 80081a4:	6994      	ldr	r4, [r2, #24]
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	db01      	blt.n	80081ae <__sfputc_r+0x16>
 80081aa:	290a      	cmp	r1, #10
 80081ac:	d103      	bne.n	80081b6 <__sfputc_r+0x1e>
 80081ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b2:	f000 bb6b 	b.w	800888c <__swbuf_r>
 80081b6:	6813      	ldr	r3, [r2, #0]
 80081b8:	1c58      	adds	r0, r3, #1
 80081ba:	6010      	str	r0, [r2, #0]
 80081bc:	7019      	strb	r1, [r3, #0]
 80081be:	4608      	mov	r0, r1
 80081c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <__sfputs_r>:
 80081c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c8:	4606      	mov	r6, r0
 80081ca:	460f      	mov	r7, r1
 80081cc:	4614      	mov	r4, r2
 80081ce:	18d5      	adds	r5, r2, r3
 80081d0:	42ac      	cmp	r4, r5
 80081d2:	d101      	bne.n	80081d8 <__sfputs_r+0x12>
 80081d4:	2000      	movs	r0, #0
 80081d6:	e007      	b.n	80081e8 <__sfputs_r+0x22>
 80081d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081dc:	463a      	mov	r2, r7
 80081de:	4630      	mov	r0, r6
 80081e0:	f7ff ffda 	bl	8008198 <__sfputc_r>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d1f3      	bne.n	80081d0 <__sfputs_r+0xa>
 80081e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081ec <_vfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	460d      	mov	r5, r1
 80081f2:	b09d      	sub	sp, #116	@ 0x74
 80081f4:	4614      	mov	r4, r2
 80081f6:	4698      	mov	r8, r3
 80081f8:	4606      	mov	r6, r0
 80081fa:	b118      	cbz	r0, 8008204 <_vfiprintf_r+0x18>
 80081fc:	6a03      	ldr	r3, [r0, #32]
 80081fe:	b90b      	cbnz	r3, 8008204 <_vfiprintf_r+0x18>
 8008200:	f7ff fdca 	bl	8007d98 <__sinit>
 8008204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d405      	bmi.n	8008216 <_vfiprintf_r+0x2a>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	059a      	lsls	r2, r3, #22
 800820e:	d402      	bmi.n	8008216 <_vfiprintf_r+0x2a>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7ff fec6 	bl	8007fa2 <__retarget_lock_acquire_recursive>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	071b      	lsls	r3, r3, #28
 800821a:	d501      	bpl.n	8008220 <_vfiprintf_r+0x34>
 800821c:	692b      	ldr	r3, [r5, #16]
 800821e:	b99b      	cbnz	r3, 8008248 <_vfiprintf_r+0x5c>
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f000 fb70 	bl	8008908 <__swsetup_r>
 8008228:	b170      	cbz	r0, 8008248 <_vfiprintf_r+0x5c>
 800822a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800822c:	07dc      	lsls	r4, r3, #31
 800822e:	d504      	bpl.n	800823a <_vfiprintf_r+0x4e>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	b01d      	add	sp, #116	@ 0x74
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	0598      	lsls	r0, r3, #22
 800823e:	d4f7      	bmi.n	8008230 <_vfiprintf_r+0x44>
 8008240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008242:	f7ff feaf 	bl	8007fa4 <__retarget_lock_release_recursive>
 8008246:	e7f3      	b.n	8008230 <_vfiprintf_r+0x44>
 8008248:	2300      	movs	r3, #0
 800824a:	9309      	str	r3, [sp, #36]	@ 0x24
 800824c:	2320      	movs	r3, #32
 800824e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008252:	f8cd 800c 	str.w	r8, [sp, #12]
 8008256:	2330      	movs	r3, #48	@ 0x30
 8008258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008408 <_vfiprintf_r+0x21c>
 800825c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008260:	f04f 0901 	mov.w	r9, #1
 8008264:	4623      	mov	r3, r4
 8008266:	469a      	mov	sl, r3
 8008268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826c:	b10a      	cbz	r2, 8008272 <_vfiprintf_r+0x86>
 800826e:	2a25      	cmp	r2, #37	@ 0x25
 8008270:	d1f9      	bne.n	8008266 <_vfiprintf_r+0x7a>
 8008272:	ebba 0b04 	subs.w	fp, sl, r4
 8008276:	d00b      	beq.n	8008290 <_vfiprintf_r+0xa4>
 8008278:	465b      	mov	r3, fp
 800827a:	4622      	mov	r2, r4
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ffa1 	bl	80081c6 <__sfputs_r>
 8008284:	3001      	adds	r0, #1
 8008286:	f000 80a7 	beq.w	80083d8 <_vfiprintf_r+0x1ec>
 800828a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800828c:	445a      	add	r2, fp
 800828e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008290:	f89a 3000 	ldrb.w	r3, [sl]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 809f 	beq.w	80083d8 <_vfiprintf_r+0x1ec>
 800829a:	2300      	movs	r3, #0
 800829c:	f04f 32ff 	mov.w	r2, #4294967295
 80082a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a4:	f10a 0a01 	add.w	sl, sl, #1
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80082b2:	4654      	mov	r4, sl
 80082b4:	2205      	movs	r2, #5
 80082b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ba:	4853      	ldr	r0, [pc, #332]	@ (8008408 <_vfiprintf_r+0x21c>)
 80082bc:	f7f8 f810 	bl	80002e0 <memchr>
 80082c0:	9a04      	ldr	r2, [sp, #16]
 80082c2:	b9d8      	cbnz	r0, 80082fc <_vfiprintf_r+0x110>
 80082c4:	06d1      	lsls	r1, r2, #27
 80082c6:	bf44      	itt	mi
 80082c8:	2320      	movmi	r3, #32
 80082ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082ce:	0713      	lsls	r3, r2, #28
 80082d0:	bf44      	itt	mi
 80082d2:	232b      	movmi	r3, #43	@ 0x2b
 80082d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d8:	f89a 3000 	ldrb.w	r3, [sl]
 80082dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80082de:	d015      	beq.n	800830c <_vfiprintf_r+0x120>
 80082e0:	9a07      	ldr	r2, [sp, #28]
 80082e2:	4654      	mov	r4, sl
 80082e4:	2000      	movs	r0, #0
 80082e6:	f04f 0c0a 	mov.w	ip, #10
 80082ea:	4621      	mov	r1, r4
 80082ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f0:	3b30      	subs	r3, #48	@ 0x30
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	d94b      	bls.n	800838e <_vfiprintf_r+0x1a2>
 80082f6:	b1b0      	cbz	r0, 8008326 <_vfiprintf_r+0x13a>
 80082f8:	9207      	str	r2, [sp, #28]
 80082fa:	e014      	b.n	8008326 <_vfiprintf_r+0x13a>
 80082fc:	eba0 0308 	sub.w	r3, r0, r8
 8008300:	fa09 f303 	lsl.w	r3, r9, r3
 8008304:	4313      	orrs	r3, r2
 8008306:	9304      	str	r3, [sp, #16]
 8008308:	46a2      	mov	sl, r4
 800830a:	e7d2      	b.n	80082b2 <_vfiprintf_r+0xc6>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	1d19      	adds	r1, r3, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	9103      	str	r1, [sp, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfbb      	ittet	lt
 8008318:	425b      	neglt	r3, r3
 800831a:	f042 0202 	orrlt.w	r2, r2, #2
 800831e:	9307      	strge	r3, [sp, #28]
 8008320:	9307      	strlt	r3, [sp, #28]
 8008322:	bfb8      	it	lt
 8008324:	9204      	strlt	r2, [sp, #16]
 8008326:	7823      	ldrb	r3, [r4, #0]
 8008328:	2b2e      	cmp	r3, #46	@ 0x2e
 800832a:	d10a      	bne.n	8008342 <_vfiprintf_r+0x156>
 800832c:	7863      	ldrb	r3, [r4, #1]
 800832e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008330:	d132      	bne.n	8008398 <_vfiprintf_r+0x1ac>
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	1d1a      	adds	r2, r3, #4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	9203      	str	r2, [sp, #12]
 800833a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800833e:	3402      	adds	r4, #2
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008418 <_vfiprintf_r+0x22c>
 8008346:	7821      	ldrb	r1, [r4, #0]
 8008348:	2203      	movs	r2, #3
 800834a:	4650      	mov	r0, sl
 800834c:	f7f7 ffc8 	bl	80002e0 <memchr>
 8008350:	b138      	cbz	r0, 8008362 <_vfiprintf_r+0x176>
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	eba0 000a 	sub.w	r0, r0, sl
 8008358:	2240      	movs	r2, #64	@ 0x40
 800835a:	4082      	lsls	r2, r0
 800835c:	4313      	orrs	r3, r2
 800835e:	3401      	adds	r4, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008366:	4829      	ldr	r0, [pc, #164]	@ (800840c <_vfiprintf_r+0x220>)
 8008368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800836c:	2206      	movs	r2, #6
 800836e:	f7f7 ffb7 	bl	80002e0 <memchr>
 8008372:	2800      	cmp	r0, #0
 8008374:	d03f      	beq.n	80083f6 <_vfiprintf_r+0x20a>
 8008376:	4b26      	ldr	r3, [pc, #152]	@ (8008410 <_vfiprintf_r+0x224>)
 8008378:	bb1b      	cbnz	r3, 80083c2 <_vfiprintf_r+0x1d6>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	3307      	adds	r3, #7
 800837e:	f023 0307 	bic.w	r3, r3, #7
 8008382:	3308      	adds	r3, #8
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008388:	443b      	add	r3, r7
 800838a:	9309      	str	r3, [sp, #36]	@ 0x24
 800838c:	e76a      	b.n	8008264 <_vfiprintf_r+0x78>
 800838e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008392:	460c      	mov	r4, r1
 8008394:	2001      	movs	r0, #1
 8008396:	e7a8      	b.n	80082ea <_vfiprintf_r+0xfe>
 8008398:	2300      	movs	r3, #0
 800839a:	3401      	adds	r4, #1
 800839c:	9305      	str	r3, [sp, #20]
 800839e:	4619      	mov	r1, r3
 80083a0:	f04f 0c0a 	mov.w	ip, #10
 80083a4:	4620      	mov	r0, r4
 80083a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083aa:	3a30      	subs	r2, #48	@ 0x30
 80083ac:	2a09      	cmp	r2, #9
 80083ae:	d903      	bls.n	80083b8 <_vfiprintf_r+0x1cc>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0c6      	beq.n	8008342 <_vfiprintf_r+0x156>
 80083b4:	9105      	str	r1, [sp, #20]
 80083b6:	e7c4      	b.n	8008342 <_vfiprintf_r+0x156>
 80083b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80083bc:	4604      	mov	r4, r0
 80083be:	2301      	movs	r3, #1
 80083c0:	e7f0      	b.n	80083a4 <_vfiprintf_r+0x1b8>
 80083c2:	ab03      	add	r3, sp, #12
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	462a      	mov	r2, r5
 80083c8:	4b12      	ldr	r3, [pc, #72]	@ (8008414 <_vfiprintf_r+0x228>)
 80083ca:	a904      	add	r1, sp, #16
 80083cc:	4630      	mov	r0, r6
 80083ce:	f3af 8000 	nop.w
 80083d2:	4607      	mov	r7, r0
 80083d4:	1c78      	adds	r0, r7, #1
 80083d6:	d1d6      	bne.n	8008386 <_vfiprintf_r+0x19a>
 80083d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083da:	07d9      	lsls	r1, r3, #31
 80083dc:	d405      	bmi.n	80083ea <_vfiprintf_r+0x1fe>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	059a      	lsls	r2, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_vfiprintf_r+0x1fe>
 80083e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083e6:	f7ff fddd 	bl	8007fa4 <__retarget_lock_release_recursive>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	065b      	lsls	r3, r3, #25
 80083ee:	f53f af1f 	bmi.w	8008230 <_vfiprintf_r+0x44>
 80083f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f4:	e71e      	b.n	8008234 <_vfiprintf_r+0x48>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <_vfiprintf_r+0x228>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4630      	mov	r0, r6
 8008402:	f000 f879 	bl	80084f8 <_printf_i>
 8008406:	e7e4      	b.n	80083d2 <_vfiprintf_r+0x1e6>
 8008408:	080094b0 	.word	0x080094b0
 800840c:	080094ba 	.word	0x080094ba
 8008410:	00000000 	.word	0x00000000
 8008414:	080081c7 	.word	0x080081c7
 8008418:	080094b6 	.word	0x080094b6

0800841c <_printf_common>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	4616      	mov	r6, r2
 8008422:	4698      	mov	r8, r3
 8008424:	688a      	ldr	r2, [r1, #8]
 8008426:	690b      	ldr	r3, [r1, #16]
 8008428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800842c:	4293      	cmp	r3, r2
 800842e:	bfb8      	it	lt
 8008430:	4613      	movlt	r3, r2
 8008432:	6033      	str	r3, [r6, #0]
 8008434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008438:	4607      	mov	r7, r0
 800843a:	460c      	mov	r4, r1
 800843c:	b10a      	cbz	r2, 8008442 <_printf_common+0x26>
 800843e:	3301      	adds	r3, #1
 8008440:	6033      	str	r3, [r6, #0]
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	0699      	lsls	r1, r3, #26
 8008446:	bf42      	ittt	mi
 8008448:	6833      	ldrmi	r3, [r6, #0]
 800844a:	3302      	addmi	r3, #2
 800844c:	6033      	strmi	r3, [r6, #0]
 800844e:	6825      	ldr	r5, [r4, #0]
 8008450:	f015 0506 	ands.w	r5, r5, #6
 8008454:	d106      	bne.n	8008464 <_printf_common+0x48>
 8008456:	f104 0a19 	add.w	sl, r4, #25
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	6832      	ldr	r2, [r6, #0]
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	42ab      	cmp	r3, r5
 8008462:	dc26      	bgt.n	80084b2 <_printf_common+0x96>
 8008464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008468:	6822      	ldr	r2, [r4, #0]
 800846a:	3b00      	subs	r3, #0
 800846c:	bf18      	it	ne
 800846e:	2301      	movne	r3, #1
 8008470:	0692      	lsls	r2, r2, #26
 8008472:	d42b      	bmi.n	80084cc <_printf_common+0xb0>
 8008474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008478:	4641      	mov	r1, r8
 800847a:	4638      	mov	r0, r7
 800847c:	47c8      	blx	r9
 800847e:	3001      	adds	r0, #1
 8008480:	d01e      	beq.n	80084c0 <_printf_common+0xa4>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	6922      	ldr	r2, [r4, #16]
 8008486:	f003 0306 	and.w	r3, r3, #6
 800848a:	2b04      	cmp	r3, #4
 800848c:	bf02      	ittt	eq
 800848e:	68e5      	ldreq	r5, [r4, #12]
 8008490:	6833      	ldreq	r3, [r6, #0]
 8008492:	1aed      	subeq	r5, r5, r3
 8008494:	68a3      	ldr	r3, [r4, #8]
 8008496:	bf0c      	ite	eq
 8008498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800849c:	2500      	movne	r5, #0
 800849e:	4293      	cmp	r3, r2
 80084a0:	bfc4      	itt	gt
 80084a2:	1a9b      	subgt	r3, r3, r2
 80084a4:	18ed      	addgt	r5, r5, r3
 80084a6:	2600      	movs	r6, #0
 80084a8:	341a      	adds	r4, #26
 80084aa:	42b5      	cmp	r5, r6
 80084ac:	d11a      	bne.n	80084e4 <_printf_common+0xc8>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e008      	b.n	80084c4 <_printf_common+0xa8>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4652      	mov	r2, sl
 80084b6:	4641      	mov	r1, r8
 80084b8:	4638      	mov	r0, r7
 80084ba:	47c8      	blx	r9
 80084bc:	3001      	adds	r0, #1
 80084be:	d103      	bne.n	80084c8 <_printf_common+0xac>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c8:	3501      	adds	r5, #1
 80084ca:	e7c6      	b.n	800845a <_printf_common+0x3e>
 80084cc:	18e1      	adds	r1, r4, r3
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	2030      	movs	r0, #48	@ 0x30
 80084d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084d6:	4422      	add	r2, r4
 80084d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084e0:	3302      	adds	r3, #2
 80084e2:	e7c7      	b.n	8008474 <_printf_common+0x58>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4622      	mov	r2, r4
 80084e8:	4641      	mov	r1, r8
 80084ea:	4638      	mov	r0, r7
 80084ec:	47c8      	blx	r9
 80084ee:	3001      	adds	r0, #1
 80084f0:	d0e6      	beq.n	80084c0 <_printf_common+0xa4>
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7d9      	b.n	80084aa <_printf_common+0x8e>
	...

080084f8 <_printf_i>:
 80084f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	7e0f      	ldrb	r7, [r1, #24]
 80084fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008500:	2f78      	cmp	r7, #120	@ 0x78
 8008502:	4691      	mov	r9, r2
 8008504:	4680      	mov	r8, r0
 8008506:	460c      	mov	r4, r1
 8008508:	469a      	mov	sl, r3
 800850a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800850e:	d807      	bhi.n	8008520 <_printf_i+0x28>
 8008510:	2f62      	cmp	r7, #98	@ 0x62
 8008512:	d80a      	bhi.n	800852a <_printf_i+0x32>
 8008514:	2f00      	cmp	r7, #0
 8008516:	f000 80d1 	beq.w	80086bc <_printf_i+0x1c4>
 800851a:	2f58      	cmp	r7, #88	@ 0x58
 800851c:	f000 80b8 	beq.w	8008690 <_printf_i+0x198>
 8008520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008528:	e03a      	b.n	80085a0 <_printf_i+0xa8>
 800852a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800852e:	2b15      	cmp	r3, #21
 8008530:	d8f6      	bhi.n	8008520 <_printf_i+0x28>
 8008532:	a101      	add	r1, pc, #4	@ (adr r1, 8008538 <_printf_i+0x40>)
 8008534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008538:	08008591 	.word	0x08008591
 800853c:	080085a5 	.word	0x080085a5
 8008540:	08008521 	.word	0x08008521
 8008544:	08008521 	.word	0x08008521
 8008548:	08008521 	.word	0x08008521
 800854c:	08008521 	.word	0x08008521
 8008550:	080085a5 	.word	0x080085a5
 8008554:	08008521 	.word	0x08008521
 8008558:	08008521 	.word	0x08008521
 800855c:	08008521 	.word	0x08008521
 8008560:	08008521 	.word	0x08008521
 8008564:	080086a3 	.word	0x080086a3
 8008568:	080085cf 	.word	0x080085cf
 800856c:	0800865d 	.word	0x0800865d
 8008570:	08008521 	.word	0x08008521
 8008574:	08008521 	.word	0x08008521
 8008578:	080086c5 	.word	0x080086c5
 800857c:	08008521 	.word	0x08008521
 8008580:	080085cf 	.word	0x080085cf
 8008584:	08008521 	.word	0x08008521
 8008588:	08008521 	.word	0x08008521
 800858c:	08008665 	.word	0x08008665
 8008590:	6833      	ldr	r3, [r6, #0]
 8008592:	1d1a      	adds	r2, r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6032      	str	r2, [r6, #0]
 8008598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800859c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085a0:	2301      	movs	r3, #1
 80085a2:	e09c      	b.n	80086de <_printf_i+0x1e6>
 80085a4:	6833      	ldr	r3, [r6, #0]
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	6031      	str	r1, [r6, #0]
 80085ac:	0606      	lsls	r6, r0, #24
 80085ae:	d501      	bpl.n	80085b4 <_printf_i+0xbc>
 80085b0:	681d      	ldr	r5, [r3, #0]
 80085b2:	e003      	b.n	80085bc <_printf_i+0xc4>
 80085b4:	0645      	lsls	r5, r0, #25
 80085b6:	d5fb      	bpl.n	80085b0 <_printf_i+0xb8>
 80085b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085bc:	2d00      	cmp	r5, #0
 80085be:	da03      	bge.n	80085c8 <_printf_i+0xd0>
 80085c0:	232d      	movs	r3, #45	@ 0x2d
 80085c2:	426d      	negs	r5, r5
 80085c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c8:	4858      	ldr	r0, [pc, #352]	@ (800872c <_printf_i+0x234>)
 80085ca:	230a      	movs	r3, #10
 80085cc:	e011      	b.n	80085f2 <_printf_i+0xfa>
 80085ce:	6821      	ldr	r1, [r4, #0]
 80085d0:	6833      	ldr	r3, [r6, #0]
 80085d2:	0608      	lsls	r0, r1, #24
 80085d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085d8:	d402      	bmi.n	80085e0 <_printf_i+0xe8>
 80085da:	0649      	lsls	r1, r1, #25
 80085dc:	bf48      	it	mi
 80085de:	b2ad      	uxthmi	r5, r5
 80085e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085e2:	4852      	ldr	r0, [pc, #328]	@ (800872c <_printf_i+0x234>)
 80085e4:	6033      	str	r3, [r6, #0]
 80085e6:	bf14      	ite	ne
 80085e8:	230a      	movne	r3, #10
 80085ea:	2308      	moveq	r3, #8
 80085ec:	2100      	movs	r1, #0
 80085ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085f2:	6866      	ldr	r6, [r4, #4]
 80085f4:	60a6      	str	r6, [r4, #8]
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	db05      	blt.n	8008606 <_printf_i+0x10e>
 80085fa:	6821      	ldr	r1, [r4, #0]
 80085fc:	432e      	orrs	r6, r5
 80085fe:	f021 0104 	bic.w	r1, r1, #4
 8008602:	6021      	str	r1, [r4, #0]
 8008604:	d04b      	beq.n	800869e <_printf_i+0x1a6>
 8008606:	4616      	mov	r6, r2
 8008608:	fbb5 f1f3 	udiv	r1, r5, r3
 800860c:	fb03 5711 	mls	r7, r3, r1, r5
 8008610:	5dc7      	ldrb	r7, [r0, r7]
 8008612:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008616:	462f      	mov	r7, r5
 8008618:	42bb      	cmp	r3, r7
 800861a:	460d      	mov	r5, r1
 800861c:	d9f4      	bls.n	8008608 <_printf_i+0x110>
 800861e:	2b08      	cmp	r3, #8
 8008620:	d10b      	bne.n	800863a <_printf_i+0x142>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	07df      	lsls	r7, r3, #31
 8008626:	d508      	bpl.n	800863a <_printf_i+0x142>
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	6861      	ldr	r1, [r4, #4]
 800862c:	4299      	cmp	r1, r3
 800862e:	bfde      	ittt	le
 8008630:	2330      	movle	r3, #48	@ 0x30
 8008632:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008636:	f106 36ff 	addle.w	r6, r6, #4294967295
 800863a:	1b92      	subs	r2, r2, r6
 800863c:	6122      	str	r2, [r4, #16]
 800863e:	f8cd a000 	str.w	sl, [sp]
 8008642:	464b      	mov	r3, r9
 8008644:	aa03      	add	r2, sp, #12
 8008646:	4621      	mov	r1, r4
 8008648:	4640      	mov	r0, r8
 800864a:	f7ff fee7 	bl	800841c <_printf_common>
 800864e:	3001      	adds	r0, #1
 8008650:	d14a      	bne.n	80086e8 <_printf_i+0x1f0>
 8008652:	f04f 30ff 	mov.w	r0, #4294967295
 8008656:	b004      	add	sp, #16
 8008658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	f043 0320 	orr.w	r3, r3, #32
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	4832      	ldr	r0, [pc, #200]	@ (8008730 <_printf_i+0x238>)
 8008666:	2778      	movs	r7, #120	@ 0x78
 8008668:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	6831      	ldr	r1, [r6, #0]
 8008670:	061f      	lsls	r7, r3, #24
 8008672:	f851 5b04 	ldr.w	r5, [r1], #4
 8008676:	d402      	bmi.n	800867e <_printf_i+0x186>
 8008678:	065f      	lsls	r7, r3, #25
 800867a:	bf48      	it	mi
 800867c:	b2ad      	uxthmi	r5, r5
 800867e:	6031      	str	r1, [r6, #0]
 8008680:	07d9      	lsls	r1, r3, #31
 8008682:	bf44      	itt	mi
 8008684:	f043 0320 	orrmi.w	r3, r3, #32
 8008688:	6023      	strmi	r3, [r4, #0]
 800868a:	b11d      	cbz	r5, 8008694 <_printf_i+0x19c>
 800868c:	2310      	movs	r3, #16
 800868e:	e7ad      	b.n	80085ec <_printf_i+0xf4>
 8008690:	4826      	ldr	r0, [pc, #152]	@ (800872c <_printf_i+0x234>)
 8008692:	e7e9      	b.n	8008668 <_printf_i+0x170>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	f023 0320 	bic.w	r3, r3, #32
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	e7f6      	b.n	800868c <_printf_i+0x194>
 800869e:	4616      	mov	r6, r2
 80086a0:	e7bd      	b.n	800861e <_printf_i+0x126>
 80086a2:	6833      	ldr	r3, [r6, #0]
 80086a4:	6825      	ldr	r5, [r4, #0]
 80086a6:	6961      	ldr	r1, [r4, #20]
 80086a8:	1d18      	adds	r0, r3, #4
 80086aa:	6030      	str	r0, [r6, #0]
 80086ac:	062e      	lsls	r6, r5, #24
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	d501      	bpl.n	80086b6 <_printf_i+0x1be>
 80086b2:	6019      	str	r1, [r3, #0]
 80086b4:	e002      	b.n	80086bc <_printf_i+0x1c4>
 80086b6:	0668      	lsls	r0, r5, #25
 80086b8:	d5fb      	bpl.n	80086b2 <_printf_i+0x1ba>
 80086ba:	8019      	strh	r1, [r3, #0]
 80086bc:	2300      	movs	r3, #0
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	4616      	mov	r6, r2
 80086c2:	e7bc      	b.n	800863e <_printf_i+0x146>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	6032      	str	r2, [r6, #0]
 80086ca:	681e      	ldr	r6, [r3, #0]
 80086cc:	6862      	ldr	r2, [r4, #4]
 80086ce:	2100      	movs	r1, #0
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7f7 fe05 	bl	80002e0 <memchr>
 80086d6:	b108      	cbz	r0, 80086dc <_printf_i+0x1e4>
 80086d8:	1b80      	subs	r0, r0, r6
 80086da:	6060      	str	r0, [r4, #4]
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	2300      	movs	r3, #0
 80086e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086e6:	e7aa      	b.n	800863e <_printf_i+0x146>
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	4632      	mov	r2, r6
 80086ec:	4649      	mov	r1, r9
 80086ee:	4640      	mov	r0, r8
 80086f0:	47d0      	blx	sl
 80086f2:	3001      	adds	r0, #1
 80086f4:	d0ad      	beq.n	8008652 <_printf_i+0x15a>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	079b      	lsls	r3, r3, #30
 80086fa:	d413      	bmi.n	8008724 <_printf_i+0x22c>
 80086fc:	68e0      	ldr	r0, [r4, #12]
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	4298      	cmp	r0, r3
 8008702:	bfb8      	it	lt
 8008704:	4618      	movlt	r0, r3
 8008706:	e7a6      	b.n	8008656 <_printf_i+0x15e>
 8008708:	2301      	movs	r3, #1
 800870a:	4632      	mov	r2, r6
 800870c:	4649      	mov	r1, r9
 800870e:	4640      	mov	r0, r8
 8008710:	47d0      	blx	sl
 8008712:	3001      	adds	r0, #1
 8008714:	d09d      	beq.n	8008652 <_printf_i+0x15a>
 8008716:	3501      	adds	r5, #1
 8008718:	68e3      	ldr	r3, [r4, #12]
 800871a:	9903      	ldr	r1, [sp, #12]
 800871c:	1a5b      	subs	r3, r3, r1
 800871e:	42ab      	cmp	r3, r5
 8008720:	dcf2      	bgt.n	8008708 <_printf_i+0x210>
 8008722:	e7eb      	b.n	80086fc <_printf_i+0x204>
 8008724:	2500      	movs	r5, #0
 8008726:	f104 0619 	add.w	r6, r4, #25
 800872a:	e7f5      	b.n	8008718 <_printf_i+0x220>
 800872c:	080094c1 	.word	0x080094c1
 8008730:	080094d2 	.word	0x080094d2

08008734 <__sflush_r>:
 8008734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	0716      	lsls	r6, r2, #28
 800873e:	4605      	mov	r5, r0
 8008740:	460c      	mov	r4, r1
 8008742:	d454      	bmi.n	80087ee <__sflush_r+0xba>
 8008744:	684b      	ldr	r3, [r1, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	dc02      	bgt.n	8008750 <__sflush_r+0x1c>
 800874a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd48      	ble.n	80087e2 <__sflush_r+0xae>
 8008750:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008752:	2e00      	cmp	r6, #0
 8008754:	d045      	beq.n	80087e2 <__sflush_r+0xae>
 8008756:	2300      	movs	r3, #0
 8008758:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800875c:	682f      	ldr	r7, [r5, #0]
 800875e:	6a21      	ldr	r1, [r4, #32]
 8008760:	602b      	str	r3, [r5, #0]
 8008762:	d030      	beq.n	80087c6 <__sflush_r+0x92>
 8008764:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	0759      	lsls	r1, r3, #29
 800876a:	d505      	bpl.n	8008778 <__sflush_r+0x44>
 800876c:	6863      	ldr	r3, [r4, #4]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008772:	b10b      	cbz	r3, 8008778 <__sflush_r+0x44>
 8008774:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	2300      	movs	r3, #0
 800877a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800877c:	6a21      	ldr	r1, [r4, #32]
 800877e:	4628      	mov	r0, r5
 8008780:	47b0      	blx	r6
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	d106      	bne.n	8008796 <__sflush_r+0x62>
 8008788:	6829      	ldr	r1, [r5, #0]
 800878a:	291d      	cmp	r1, #29
 800878c:	d82b      	bhi.n	80087e6 <__sflush_r+0xb2>
 800878e:	4a2a      	ldr	r2, [pc, #168]	@ (8008838 <__sflush_r+0x104>)
 8008790:	40ca      	lsrs	r2, r1
 8008792:	07d6      	lsls	r6, r2, #31
 8008794:	d527      	bpl.n	80087e6 <__sflush_r+0xb2>
 8008796:	2200      	movs	r2, #0
 8008798:	6062      	str	r2, [r4, #4]
 800879a:	04d9      	lsls	r1, r3, #19
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	6022      	str	r2, [r4, #0]
 80087a0:	d504      	bpl.n	80087ac <__sflush_r+0x78>
 80087a2:	1c42      	adds	r2, r0, #1
 80087a4:	d101      	bne.n	80087aa <__sflush_r+0x76>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	b903      	cbnz	r3, 80087ac <__sflush_r+0x78>
 80087aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80087ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087ae:	602f      	str	r7, [r5, #0]
 80087b0:	b1b9      	cbz	r1, 80087e2 <__sflush_r+0xae>
 80087b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087b6:	4299      	cmp	r1, r3
 80087b8:	d002      	beq.n	80087c0 <__sflush_r+0x8c>
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7ff fbf4 	bl	8007fa8 <_free_r>
 80087c0:	2300      	movs	r3, #0
 80087c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80087c4:	e00d      	b.n	80087e2 <__sflush_r+0xae>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4628      	mov	r0, r5
 80087ca:	47b0      	blx	r6
 80087cc:	4602      	mov	r2, r0
 80087ce:	1c50      	adds	r0, r2, #1
 80087d0:	d1c9      	bne.n	8008766 <__sflush_r+0x32>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0c6      	beq.n	8008766 <__sflush_r+0x32>
 80087d8:	2b1d      	cmp	r3, #29
 80087da:	d001      	beq.n	80087e0 <__sflush_r+0xac>
 80087dc:	2b16      	cmp	r3, #22
 80087de:	d11e      	bne.n	800881e <__sflush_r+0xea>
 80087e0:	602f      	str	r7, [r5, #0]
 80087e2:	2000      	movs	r0, #0
 80087e4:	e022      	b.n	800882c <__sflush_r+0xf8>
 80087e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ea:	b21b      	sxth	r3, r3
 80087ec:	e01b      	b.n	8008826 <__sflush_r+0xf2>
 80087ee:	690f      	ldr	r7, [r1, #16]
 80087f0:	2f00      	cmp	r7, #0
 80087f2:	d0f6      	beq.n	80087e2 <__sflush_r+0xae>
 80087f4:	0793      	lsls	r3, r2, #30
 80087f6:	680e      	ldr	r6, [r1, #0]
 80087f8:	bf08      	it	eq
 80087fa:	694b      	ldreq	r3, [r1, #20]
 80087fc:	600f      	str	r7, [r1, #0]
 80087fe:	bf18      	it	ne
 8008800:	2300      	movne	r3, #0
 8008802:	eba6 0807 	sub.w	r8, r6, r7
 8008806:	608b      	str	r3, [r1, #8]
 8008808:	f1b8 0f00 	cmp.w	r8, #0
 800880c:	dde9      	ble.n	80087e2 <__sflush_r+0xae>
 800880e:	6a21      	ldr	r1, [r4, #32]
 8008810:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008812:	4643      	mov	r3, r8
 8008814:	463a      	mov	r2, r7
 8008816:	4628      	mov	r0, r5
 8008818:	47b0      	blx	r6
 800881a:	2800      	cmp	r0, #0
 800881c:	dc08      	bgt.n	8008830 <__sflush_r+0xfc>
 800881e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	4407      	add	r7, r0
 8008832:	eba8 0800 	sub.w	r8, r8, r0
 8008836:	e7e7      	b.n	8008808 <__sflush_r+0xd4>
 8008838:	20400001 	.word	0x20400001

0800883c <_fflush_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	690b      	ldr	r3, [r1, #16]
 8008840:	4605      	mov	r5, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b913      	cbnz	r3, 800884c <_fflush_r+0x10>
 8008846:	2500      	movs	r5, #0
 8008848:	4628      	mov	r0, r5
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	b118      	cbz	r0, 8008856 <_fflush_r+0x1a>
 800884e:	6a03      	ldr	r3, [r0, #32]
 8008850:	b90b      	cbnz	r3, 8008856 <_fflush_r+0x1a>
 8008852:	f7ff faa1 	bl	8007d98 <__sinit>
 8008856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0f3      	beq.n	8008846 <_fflush_r+0xa>
 800885e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008860:	07d0      	lsls	r0, r2, #31
 8008862:	d404      	bmi.n	800886e <_fflush_r+0x32>
 8008864:	0599      	lsls	r1, r3, #22
 8008866:	d402      	bmi.n	800886e <_fflush_r+0x32>
 8008868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800886a:	f7ff fb9a 	bl	8007fa2 <__retarget_lock_acquire_recursive>
 800886e:	4628      	mov	r0, r5
 8008870:	4621      	mov	r1, r4
 8008872:	f7ff ff5f 	bl	8008734 <__sflush_r>
 8008876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008878:	07da      	lsls	r2, r3, #31
 800887a:	4605      	mov	r5, r0
 800887c:	d4e4      	bmi.n	8008848 <_fflush_r+0xc>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	059b      	lsls	r3, r3, #22
 8008882:	d4e1      	bmi.n	8008848 <_fflush_r+0xc>
 8008884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008886:	f7ff fb8d 	bl	8007fa4 <__retarget_lock_release_recursive>
 800888a:	e7dd      	b.n	8008848 <_fflush_r+0xc>

0800888c <__swbuf_r>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	460e      	mov	r6, r1
 8008890:	4614      	mov	r4, r2
 8008892:	4605      	mov	r5, r0
 8008894:	b118      	cbz	r0, 800889e <__swbuf_r+0x12>
 8008896:	6a03      	ldr	r3, [r0, #32]
 8008898:	b90b      	cbnz	r3, 800889e <__swbuf_r+0x12>
 800889a:	f7ff fa7d 	bl	8007d98 <__sinit>
 800889e:	69a3      	ldr	r3, [r4, #24]
 80088a0:	60a3      	str	r3, [r4, #8]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	071a      	lsls	r2, r3, #28
 80088a6:	d501      	bpl.n	80088ac <__swbuf_r+0x20>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b943      	cbnz	r3, 80088be <__swbuf_r+0x32>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f82a 	bl	8008908 <__swsetup_r>
 80088b4:	b118      	cbz	r0, 80088be <__swbuf_r+0x32>
 80088b6:	f04f 37ff 	mov.w	r7, #4294967295
 80088ba:	4638      	mov	r0, r7
 80088bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	6922      	ldr	r2, [r4, #16]
 80088c2:	1a98      	subs	r0, r3, r2
 80088c4:	6963      	ldr	r3, [r4, #20]
 80088c6:	b2f6      	uxtb	r6, r6
 80088c8:	4283      	cmp	r3, r0
 80088ca:	4637      	mov	r7, r6
 80088cc:	dc05      	bgt.n	80088da <__swbuf_r+0x4e>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff ffb3 	bl	800883c <_fflush_r>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d1ed      	bne.n	80088b6 <__swbuf_r+0x2a>
 80088da:	68a3      	ldr	r3, [r4, #8]
 80088dc:	3b01      	subs	r3, #1
 80088de:	60a3      	str	r3, [r4, #8]
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	6022      	str	r2, [r4, #0]
 80088e6:	701e      	strb	r6, [r3, #0]
 80088e8:	6962      	ldr	r2, [r4, #20]
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d004      	beq.n	80088fa <__swbuf_r+0x6e>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d5e1      	bpl.n	80088ba <__swbuf_r+0x2e>
 80088f6:	2e0a      	cmp	r6, #10
 80088f8:	d1df      	bne.n	80088ba <__swbuf_r+0x2e>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	f7ff ff9d 	bl	800883c <_fflush_r>
 8008902:	2800      	cmp	r0, #0
 8008904:	d0d9      	beq.n	80088ba <__swbuf_r+0x2e>
 8008906:	e7d6      	b.n	80088b6 <__swbuf_r+0x2a>

08008908 <__swsetup_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4b29      	ldr	r3, [pc, #164]	@ (80089b0 <__swsetup_r+0xa8>)
 800890c:	4605      	mov	r5, r0
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	460c      	mov	r4, r1
 8008912:	b118      	cbz	r0, 800891c <__swsetup_r+0x14>
 8008914:	6a03      	ldr	r3, [r0, #32]
 8008916:	b90b      	cbnz	r3, 800891c <__swsetup_r+0x14>
 8008918:	f7ff fa3e 	bl	8007d98 <__sinit>
 800891c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008920:	0719      	lsls	r1, r3, #28
 8008922:	d422      	bmi.n	800896a <__swsetup_r+0x62>
 8008924:	06da      	lsls	r2, r3, #27
 8008926:	d407      	bmi.n	8008938 <__swsetup_r+0x30>
 8008928:	2209      	movs	r2, #9
 800892a:	602a      	str	r2, [r5, #0]
 800892c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	f04f 30ff 	mov.w	r0, #4294967295
 8008936:	e033      	b.n	80089a0 <__swsetup_r+0x98>
 8008938:	0758      	lsls	r0, r3, #29
 800893a:	d512      	bpl.n	8008962 <__swsetup_r+0x5a>
 800893c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800893e:	b141      	cbz	r1, 8008952 <__swsetup_r+0x4a>
 8008940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008944:	4299      	cmp	r1, r3
 8008946:	d002      	beq.n	800894e <__swsetup_r+0x46>
 8008948:	4628      	mov	r0, r5
 800894a:	f7ff fb2d 	bl	8007fa8 <_free_r>
 800894e:	2300      	movs	r3, #0
 8008950:	6363      	str	r3, [r4, #52]	@ 0x34
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	2300      	movs	r3, #0
 800895c:	6063      	str	r3, [r4, #4]
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f043 0308 	orr.w	r3, r3, #8
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	b94b      	cbnz	r3, 8008982 <__swsetup_r+0x7a>
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008978:	d003      	beq.n	8008982 <__swsetup_r+0x7a>
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f000 f84f 	bl	8008a20 <__smakebuf_r>
 8008982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008986:	f013 0201 	ands.w	r2, r3, #1
 800898a:	d00a      	beq.n	80089a2 <__swsetup_r+0x9a>
 800898c:	2200      	movs	r2, #0
 800898e:	60a2      	str	r2, [r4, #8]
 8008990:	6962      	ldr	r2, [r4, #20]
 8008992:	4252      	negs	r2, r2
 8008994:	61a2      	str	r2, [r4, #24]
 8008996:	6922      	ldr	r2, [r4, #16]
 8008998:	b942      	cbnz	r2, 80089ac <__swsetup_r+0xa4>
 800899a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800899e:	d1c5      	bne.n	800892c <__swsetup_r+0x24>
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	0799      	lsls	r1, r3, #30
 80089a4:	bf58      	it	pl
 80089a6:	6962      	ldrpl	r2, [r4, #20]
 80089a8:	60a2      	str	r2, [r4, #8]
 80089aa:	e7f4      	b.n	8008996 <__swsetup_r+0x8e>
 80089ac:	2000      	movs	r0, #0
 80089ae:	e7f7      	b.n	80089a0 <__swsetup_r+0x98>
 80089b0:	24000038 	.word	0x24000038

080089b4 <_sbrk_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d06      	ldr	r5, [pc, #24]	@ (80089d0 <_sbrk_r+0x1c>)
 80089b8:	2300      	movs	r3, #0
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	602b      	str	r3, [r5, #0]
 80089c0:	f7f8 fef2 	bl	80017a8 <_sbrk>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_sbrk_r+0x1a>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_sbrk_r+0x1a>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	240003ac 	.word	0x240003ac

080089d4 <__swhatbuf_r>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	460c      	mov	r4, r1
 80089d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089dc:	2900      	cmp	r1, #0
 80089de:	b096      	sub	sp, #88	@ 0x58
 80089e0:	4615      	mov	r5, r2
 80089e2:	461e      	mov	r6, r3
 80089e4:	da0d      	bge.n	8008a02 <__swhatbuf_r+0x2e>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089ec:	f04f 0100 	mov.w	r1, #0
 80089f0:	bf14      	ite	ne
 80089f2:	2340      	movne	r3, #64	@ 0x40
 80089f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089f8:	2000      	movs	r0, #0
 80089fa:	6031      	str	r1, [r6, #0]
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	b016      	add	sp, #88	@ 0x58
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	466a      	mov	r2, sp
 8008a04:	f000 f848 	bl	8008a98 <_fstat_r>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dbec      	blt.n	80089e6 <__swhatbuf_r+0x12>
 8008a0c:	9901      	ldr	r1, [sp, #4]
 8008a0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a16:	4259      	negs	r1, r3
 8008a18:	4159      	adcs	r1, r3
 8008a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a1e:	e7eb      	b.n	80089f8 <__swhatbuf_r+0x24>

08008a20 <__smakebuf_r>:
 8008a20:	898b      	ldrh	r3, [r1, #12]
 8008a22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a24:	079d      	lsls	r5, r3, #30
 8008a26:	4606      	mov	r6, r0
 8008a28:	460c      	mov	r4, r1
 8008a2a:	d507      	bpl.n	8008a3c <__smakebuf_r+0x1c>
 8008a2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	6123      	str	r3, [r4, #16]
 8008a34:	2301      	movs	r3, #1
 8008a36:	6163      	str	r3, [r4, #20]
 8008a38:	b003      	add	sp, #12
 8008a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a3c:	ab01      	add	r3, sp, #4
 8008a3e:	466a      	mov	r2, sp
 8008a40:	f7ff ffc8 	bl	80089d4 <__swhatbuf_r>
 8008a44:	9f00      	ldr	r7, [sp, #0]
 8008a46:	4605      	mov	r5, r0
 8008a48:	4639      	mov	r1, r7
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f7ff fb18 	bl	8008080 <_malloc_r>
 8008a50:	b948      	cbnz	r0, 8008a66 <__smakebuf_r+0x46>
 8008a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a56:	059a      	lsls	r2, r3, #22
 8008a58:	d4ee      	bmi.n	8008a38 <__smakebuf_r+0x18>
 8008a5a:	f023 0303 	bic.w	r3, r3, #3
 8008a5e:	f043 0302 	orr.w	r3, r3, #2
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	e7e2      	b.n	8008a2c <__smakebuf_r+0xc>
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	6020      	str	r0, [r4, #0]
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	9b01      	ldr	r3, [sp, #4]
 8008a72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a76:	b15b      	cbz	r3, 8008a90 <__smakebuf_r+0x70>
 8008a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f000 f81d 	bl	8008abc <_isatty_r>
 8008a82:	b128      	cbz	r0, 8008a90 <__smakebuf_r+0x70>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f023 0303 	bic.w	r3, r3, #3
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	431d      	orrs	r5, r3
 8008a94:	81a5      	strh	r5, [r4, #12]
 8008a96:	e7cf      	b.n	8008a38 <__smakebuf_r+0x18>

08008a98 <_fstat_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	@ (8008ab8 <_fstat_r+0x20>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	602b      	str	r3, [r5, #0]
 8008aa6:	f7f8 fe56 	bl	8001756 <_fstat>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d102      	bne.n	8008ab4 <_fstat_r+0x1c>
 8008aae:	682b      	ldr	r3, [r5, #0]
 8008ab0:	b103      	cbz	r3, 8008ab4 <_fstat_r+0x1c>
 8008ab2:	6023      	str	r3, [r4, #0]
 8008ab4:	bd38      	pop	{r3, r4, r5, pc}
 8008ab6:	bf00      	nop
 8008ab8:	240003ac 	.word	0x240003ac

08008abc <_isatty_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d06      	ldr	r5, [pc, #24]	@ (8008ad8 <_isatty_r+0x1c>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	f7f8 fe55 	bl	8001776 <_isatty>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_isatty_r+0x1a>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_isatty_r+0x1a>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	240003ac 	.word	0x240003ac

08008adc <_init>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr

08008ae8 <_fini>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr
