
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000822c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019a8  080084cc  080084cc  000094cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e7c  08009e7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009e80  08009e80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009e84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  08009f0c  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  08009f0c  0000b334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b2f  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c89  00000000  00000000  00020be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f08  00000000  00000000  00023870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b81  00000000  00000000  00024778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384f5  00000000  00000000  000252f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001636a  00000000  00000000  0005d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ef6d  00000000  00000000  00073b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2ac5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004560  00000000  00000000  001d2b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001d7068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080084b4 	.word	0x080084b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080084b4 	.word	0x080084b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_FastTxOn>:
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
    return result;
}

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2031      	movs	r0, #49	@ 0x31
 80006b8:	f000 f988 	bl	80009cc <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2033      	movs	r0, #51	@ 0x33
 80006d2:	f000 f97b 	bl	80009cc <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2034      	movs	r0, #52	@ 0x34
 80006ec:	f000 f96e 	bl	80009cc <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2035      	movs	r0, #53	@ 0x35
 8000706:	f000 f961 	bl	80009cc <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	2036      	movs	r0, #54	@ 0x36
 8000720:	f000 f954 	bl	80009cc <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <CC1201_Nop+0x30>)
 800073a:	f007 f84f 	bl	80077dc <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	203d      	movs	r0, #61	@ 0x3d
 8000742:	f000 f943 	bl	80009cc <CC1201_SendStrobe>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <CC1201_Nop+0x34>)
 8000750:	f007 f844 	bl	80077dc <iprintf>
    return result;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	08008528 	.word	0x08008528
 8000764:	08008550 	.word	0x08008550

08000768 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af02      	add	r7, sp, #8
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	2bff      	cmp	r3, #255	@ 0xff
 8000778:	d909      	bls.n	800078e <CC1201_ReadStatus+0x26>
        // Extended register single read: first byte is 0x2F with R/W bit set
        tx_buffer[0] = 0x2F | CC1201_READ_BIT; // Extended register READ command
 800077a:	23af      	movs	r3, #175	@ 0xaf
 800077c:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 8000784:	2300      	movs	r3, #0
 8000786:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000788:	2303      	movs	r3, #3
 800078a:	75fb      	strb	r3, [r7, #23]
 800078c:	e009      	b.n	80007a2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000796:	b2db      	uxtb	r3, r3
 8000798:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 800079a:	2300      	movs	r3, #0
 800079c:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a8:	481a      	ldr	r0, [pc, #104]	@ (8000814 <CC1201_ReadStatus+0xac>)
 80007aa:	f002 f8db 	bl	8002964 <HAL_GPIO_WritePin>
    for (volatile uint32_t i = 0; i < 200; ++i) { __NOP(); }
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	e003      	b.n	80007bc <CC1201_ReadStatus+0x54>
 80007b4:	bf00      	nop
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2bc7      	cmp	r3, #199	@ 0xc7
 80007c0:	d9f8      	bls.n	80007b4 <CC1201_ReadStatus+0x4c>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, 1000);
 80007c2:	7dfb      	ldrb	r3, [r7, #23]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	f107 020c 	add.w	r2, r7, #12
 80007ca:	f107 0110 	add.w	r1, r7, #16
 80007ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d2:	9000      	str	r0, [sp, #0]
 80007d4:	4810      	ldr	r0, [pc, #64]	@ (8000818 <CC1201_ReadStatus+0xb0>)
 80007d6:	f005 f883 	bl	80058e0 <HAL_SPI_TransmitReceive>
 80007da:	4603      	mov	r3, r0
 80007dc:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <CC1201_ReadStatus+0xac>)
 80007e6:	f002 f8bd 	bl	8002964 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80007ea:	7dbb      	ldrb	r3, [r7, #22]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10c      	bne.n	800080a <CC1201_ReadStatus+0xa2>
        if (read_data != NULL) {
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d009      	beq.n	800080a <CC1201_ReadStatus+0xa2>
            if (reg_addr > 0xFF) {
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2bff      	cmp	r3, #255	@ 0xff
 80007fa:	d903      	bls.n	8000804 <CC1201_ReadStatus+0x9c>
                *read_data = rx_buffer[2]; // Extended register data
 80007fc:	7bba      	ldrb	r2, [r7, #14]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	e002      	b.n	800080a <CC1201_ReadStatus+0xa2>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000804:	7b7a      	ldrb	r2, [r7, #13]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 800080a:	7dbb      	ldrb	r3, [r7, #22]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	58021000 	.word	0x58021000
 8000818:	240000b8 	.word	0x240000b8

0800081c <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800082a:	f7ff ff9d 	bl	8000768 <CC1201_ReadStatus>
 800082e:	4603      	mov	r3, r0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 8000846:	f7ff ff8f 	bl	8000768 <CC1201_ReadStatus>
 800084a:	4603      	mov	r3, r0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000858:	b08f      	sub	sp, #60	@ 0x3c
 800085a:	af02      	add	r7, sp, #8
 800085c:	6178      	str	r0, [r7, #20]
 800085e:	460b      	mov	r3, r1
 8000860:	60fa      	str	r2, [r7, #12]
 8000862:	74fb      	strb	r3, [r7, #19]
 8000864:	466b      	mov	r3, sp
 8000866:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d005      	beq.n	800087a <CC1201_WriteTxFifo+0x26>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <CC1201_WriteTxFifo+0x26>
 8000874:	7cfb      	ldrb	r3, [r7, #19]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e08a      	b.n	8000994 <CC1201_WriteTxFifo+0x140>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800087e:	7cfb      	ldrb	r3, [r7, #19]
 8000880:	1c99      	adds	r1, r3, #2
 8000882:	1e4b      	subs	r3, r1, #1
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000886:	460a      	mov	r2, r1
 8000888:	2300      	movs	r3, #0
 800088a:	603a      	str	r2, [r7, #0]
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	00c3      	lsls	r3, r0, #3
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008a0:	6838      	ldr	r0, [r7, #0]
 80008a2:	00c2      	lsls	r2, r0, #3
 80008a4:	460a      	mov	r2, r1
 80008a6:	2300      	movs	r3, #0
 80008a8:	4692      	mov	sl, r2
 80008aa:	469b      	mov	fp, r3
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008c0:	460b      	mov	r3, r1
 80008c2:	3307      	adds	r3, #7
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	ebad 0d03 	sub.w	sp, sp, r3
 80008cc:	ab02      	add	r3, sp, #8
 80008ce:	3300      	adds	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 80008d2:	7cfb      	ldrb	r3, [r7, #19]
 80008d4:	1c99      	adds	r1, r3, #2
 80008d6:	1e4b      	subs	r3, r1, #1
 80008d8:	623b      	str	r3, [r7, #32]
 80008da:	460a      	mov	r2, r1
 80008dc:	2300      	movs	r3, #0
 80008de:	4690      	mov	r8, r2
 80008e0:	4699      	mov	r9, r3
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008f6:	460a      	mov	r2, r1
 80008f8:	2300      	movs	r3, #0
 80008fa:	4614      	mov	r4, r2
 80008fc:	461d      	mov	r5, r3
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	00eb      	lsls	r3, r5, #3
 8000908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800090c:	00e2      	lsls	r2, r4, #3
 800090e:	460b      	mov	r3, r1
 8000910:	3307      	adds	r3, #7
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	ebad 0d03 	sub.w	sp, sp, r3
 800091a:	ab02      	add	r3, sp, #8
 800091c:	3300      	adds	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000922:	227f      	movs	r2, #127	@ 0x7f
 8000924:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800092c:	e00e      	b.n	800094c <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 800092e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	441a      	add	r2, r3
 8000936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800093a:	3301      	adds	r3, #1
 800093c:	7811      	ldrb	r1, [r2, #0]
 800093e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000940:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000946:	3301      	adds	r3, #1
 8000948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800094c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000950:	7cfb      	ldrb	r3, [r7, #19]
 8000952:	429a      	cmp	r2, r3
 8000954:	d3eb      	bcc.n	800092e <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800095c:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <CC1201_WriteTxFifo+0x14c>)
 800095e:	f002 f801 	bl	8002964 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	b29b      	uxth	r3, r3
 8000966:	3301      	adds	r3, #1
 8000968:	b29b      	uxth	r3, r3
 800096a:	f04f 32ff 	mov.w	r2, #4294967295
 800096e:	9200      	str	r2, [sp, #0]
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000974:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <CC1201_WriteTxFifo+0x150>)
 8000976:	f004 ffb3 	bl	80058e0 <HAL_SPI_TransmitReceive>
 800097a:	4603      	mov	r3, r0
 800097c:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000984:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <CC1201_WriteTxFifo+0x14c>)
 8000986:	f001 ffed 	bl	8002964 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000992:	7efb      	ldrb	r3, [r7, #27]
 8000994:	46b5      	mov	sp, r6
}
 8000996:	4618      	mov	r0, r3
 8000998:	3734      	adds	r7, #52	@ 0x34
 800099a:	46bd      	mov	sp, r7
 800099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a0:	58021000 	.word	0x58021000
 80009a4:	240000b8 	.word	0x240000b8

080009a8 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff4a 	bl	8000854 <CC1201_WriteTxFifo>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    // Early readiness check to avoid blocking if SPI not initialized yet
    HAL_SPI_StateTypeDef spi_state = HAL_SPI_GetState(&CC1201_SPI_HANDLE);
 80009d8:	4832      	ldr	r0, [pc, #200]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 80009da:	f005 fcbb 	bl	8006354 <HAL_SPI_GetState>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] Enter CC1201_SendStrobe cmd=0x%02X, SPI state=%d\n\r", strobe_command, (int)spi_state);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4619      	mov	r1, r3
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	461a      	mov	r2, r3
 80009ea:	482f      	ldr	r0, [pc, #188]	@ (8000aa8 <CC1201_SendStrobe+0xdc>)
 80009ec:	f006 fef6 	bl	80077dc <iprintf>
    if (spi_state != HAL_SPI_STATE_READY) {
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d00a      	beq.n	8000a0c <CC1201_SendStrobe+0x40>
        printf("[DEBUG] SPI not ready, skipping strobe\n\r");
 80009f6:	482d      	ldr	r0, [pc, #180]	@ (8000aac <CC1201_SendStrobe+0xe0>)
 80009f8:	f006 fef0 	bl	80077dc <iprintf>
        if (status_byte) { *status_byte = 0x00; }
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <CC1201_SendStrobe+0x3c>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
        return HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e046      	b.n	8000a9a <CC1201_SendStrobe+0xce>
    }

    // Ensure SPI is ready and CS is toggled with brief gaps
    printf("[DEBUG] SPI state before CS low: %d\n\r", (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000a0c:	4825      	ldr	r0, [pc, #148]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 8000a0e:	f005 fca1 	bl	8006354 <HAL_SPI_GetState>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4826      	ldr	r0, [pc, #152]	@ (8000ab0 <CC1201_SendStrobe+0xe4>)
 8000a18:	f006 fee0 	bl	80077dc <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4824      	ldr	r0, [pc, #144]	@ (8000ab4 <CC1201_SendStrobe+0xe8>)
 8000a24:	f001 ff9e 	bl	8002964 <HAL_GPIO_WritePin>
    
    // Small CS setup delay without relying on SysTick (avoid HAL_Delay hang if tick not running)
    for (volatile uint32_t i = 0; i < 300; ++i) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	e003      	b.n	8000a36 <CC1201_SendStrobe+0x6a>
        __NOP();
 8000a2e:	bf00      	nop
    for (volatile uint32_t i = 0; i < 300; ++i) {
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000a3c:	d3f7      	bcc.n	8000a2e <CC1201_SendStrobe+0x62>
    }

    // Perform SPI transaction
    printf("[DEBUG] About to SPI strobe 0x%02X (SPI state=%d)\n\r", strobe_command, (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	461c      	mov	r4, r3
 8000a42:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 8000a44:	f005 fc86 	bl	8006354 <HAL_SPI_GetState>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <CC1201_SendStrobe+0xec>)
 8000a50:	f006 fec4 	bl	80077dc <iprintf>
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000a54:	f107 020d 	add.w	r2, r7, #13
 8000a58:	1df9      	adds	r1, r7, #7
 8000a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 8000a64:	f004 ff3c 	bl	80058e0 <HAL_SPI_TransmitReceive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73bb      	strb	r3, [r7, #14]
    printf("[DEBUG] CC1201_SendStrobe 0x%02X -> HAL=%d, statusByte=0x%02X\n\r", strobe_command, status, rx_data);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	7bba      	ldrb	r2, [r7, #14]
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <CC1201_SendStrobe+0xf0>)
 8000a76:	f006 feb1 	bl	80077dc <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <CC1201_SendStrobe+0xe8>)
 8000a82:	f001 ff6f 	bl	8002964 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d105      	bne.n	8000a98 <CC1201_SendStrobe+0xcc>
        if (status_byte != NULL) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <CC1201_SendStrobe+0xcc>
            *status_byte = rx_data;
 8000a92:	7b7a      	ldrb	r2, [r7, #13]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	240000b8 	.word	0x240000b8
 8000aa8:	080085ac 	.word	0x080085ac
 8000aac:	080085e8 	.word	0x080085e8
 8000ab0:	08008614 	.word	0x08008614
 8000ab4:	58021000 	.word	0x58021000
 8000ab8:	0800863c 	.word	0x0800863c
 8000abc:	08008670 	.word	0x08008670

08000ac0 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4823      	ldr	r0, [pc, #140]	@ (8000b70 <print_cc1201_status+0xb0>)
 8000ae2:	f006 fe7b 	bl	80077dc <iprintf>
    switch(radio_state) {
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b07      	cmp	r3, #7
 8000aea:	d833      	bhi.n	8000b54 <print_cc1201_status+0x94>
 8000aec:	a201      	add	r2, pc, #4	@ (adr r2, 8000af4 <print_cc1201_status+0x34>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b15 	.word	0x08000b15
 8000af8:	08000b1d 	.word	0x08000b1d
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	08000b2d 	.word	0x08000b2d
 8000b04:	08000b35 	.word	0x08000b35
 8000b08:	08000b3d 	.word	0x08000b3d
 8000b0c:	08000b45 	.word	0x08000b45
 8000b10:	08000b4d 	.word	0x08000b4d
        case 0x0: printf("(IDLE)"); break;
 8000b14:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <print_cc1201_status+0xb4>)
 8000b16:	f006 fe61 	bl	80077dc <iprintf>
 8000b1a:	e01f      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000b1c:	4816      	ldr	r0, [pc, #88]	@ (8000b78 <print_cc1201_status+0xb8>)
 8000b1e:	f006 fe5d 	bl	80077dc <iprintf>
 8000b22:	e01b      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000b24:	4815      	ldr	r0, [pc, #84]	@ (8000b7c <print_cc1201_status+0xbc>)
 8000b26:	f006 fe59 	bl	80077dc <iprintf>
 8000b2a:	e017      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000b2c:	4814      	ldr	r0, [pc, #80]	@ (8000b80 <print_cc1201_status+0xc0>)
 8000b2e:	f006 fe55 	bl	80077dc <iprintf>
 8000b32:	e013      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <print_cc1201_status+0xc4>)
 8000b36:	f006 fe51 	bl	80077dc <iprintf>
 8000b3a:	e00f      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000b3c:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <print_cc1201_status+0xc8>)
 8000b3e:	f006 fe4d 	bl	80077dc <iprintf>
 8000b42:	e00b      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000b44:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <print_cc1201_status+0xcc>)
 8000b46:	f006 fe49 	bl	80077dc <iprintf>
 8000b4a:	e007      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000b4c:	4810      	ldr	r0, [pc, #64]	@ (8000b90 <print_cc1201_status+0xd0>)
 8000b4e:	f006 fe45 	bl	80077dc <iprintf>
 8000b52:	e003      	b.n	8000b5c <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000b54:	480f      	ldr	r0, [pc, #60]	@ (8000b94 <print_cc1201_status+0xd4>)
 8000b56:	f006 fe41 	bl	80077dc <iprintf>
 8000b5a:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <print_cc1201_status+0xd8>)
 8000b62:	f006 fe3b 	bl	80077dc <iprintf>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08008708 	.word	0x08008708
 8000b74:	08008728 	.word	0x08008728
 8000b78:	08008730 	.word	0x08008730
 8000b7c:	08008738 	.word	0x08008738
 8000b80:	08008740 	.word	0x08008740
 8000b84:	0800874c 	.word	0x0800874c
 8000b88:	08008758 	.word	0x08008758
 8000b8c:	08008764 	.word	0x08008764
 8000b90:	08008774 	.word	0x08008774
 8000b94:	08008784 	.word	0x08008784
 8000b98:	08008790 	.word	0x08008790

08000b9c <test_state_changes>:
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
}

// Test 2: State Change Operations
void test_state_changes(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 8000ba2:	487d      	ldr	r0, [pc, #500]	@ (8000d98 <test_state_changes+0x1fc>)
 8000ba4:	f006 fe1a 	bl	80077dc <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71bb      	strb	r3, [r7, #6]
    uint8_t marc_state = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	717b      	strb	r3, [r7, #5]
    
    // Temporarily skip full configuration to verify state transitions first
    printf("Skipping full configuration for quick state test...\n\r");
 8000bb0:	487a      	ldr	r0, [pc, #488]	@ (8000d9c <test_state_changes+0x200>)
 8000bb2:	f006 fe13 	bl	80077dc <iprintf>
    // Optionally perform a single SCAL only
    status = CC1201_CalFreqSynth(&status_byte);
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fd84 	bl	80006c6 <CC1201_CalFreqSynth>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    printf("  SCAL only: HAL=%d ", status);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4876      	ldr	r0, [pc, #472]	@ (8000da0 <test_state_changes+0x204>)
 8000bc8:	f006 fe08 	bl	80077dc <iprintf>
    if (status == HAL_OK) { print_cc1201_status(status_byte, "SCAL"); }
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d104      	bne.n	8000bdc <test_state_changes+0x40>
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	4973      	ldr	r1, [pc, #460]	@ (8000da4 <test_state_changes+0x208>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff72 	bl	8000ac0 <print_cc1201_status>
    HAL_Delay(10);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f001 f8af 	bl	8001d40 <HAL_Delay>
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 8000be2:	4871      	ldr	r0, [pc, #452]	@ (8000da8 <test_state_changes+0x20c>)
 8000be4:	f006 fdfa 	bl	80077dc <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd92 	bl	8000714 <CC1201_EnterIdleMode>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
    printf("  Enter IDLE: HAL=%d ", status);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	486c      	ldr	r0, [pc, #432]	@ (8000dac <test_state_changes+0x210>)
 8000bfa:	f006 fdef 	bl	80077dc <iprintf>
    if (status == HAL_OK) {
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10d      	bne.n	8000c20 <test_state_changes+0x84>
        print_cc1201_status(status_byte, "IDLE");
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	496a      	ldr	r1, [pc, #424]	@ (8000db0 <test_state_changes+0x214>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff59 	bl	8000ac0 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000c0e:	1d7b      	adds	r3, r7, #5
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe03 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000c16:	797b      	ldrb	r3, [r7, #5]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4866      	ldr	r0, [pc, #408]	@ (8000db4 <test_state_changes+0x218>)
 8000c1c:	f006 fdde 	bl	80077dc <iprintf>
    }
    HAL_Delay(50);
 8000c20:	2032      	movs	r0, #50	@ 0x32
 8000c22:	f001 f88d 	bl	8001d40 <HAL_Delay>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 8000c26:	4864      	ldr	r0, [pc, #400]	@ (8000db8 <test_state_changes+0x21c>)
 8000c28:	f006 fdd8 	bl	80077dc <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fd56 	bl	80006e0 <CC1201_EnterRxMode>
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
    printf("  Enter RX: HAL=%d ", status);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	485f      	ldr	r0, [pc, #380]	@ (8000dbc <test_state_changes+0x220>)
 8000c3e:	f006 fdcd 	bl	80077dc <iprintf>
    if (status == HAL_OK) {
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d110      	bne.n	8000c6a <test_state_changes+0xce>
        print_cc1201_status(status_byte, "RX");
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	495d      	ldr	r1, [pc, #372]	@ (8000dc0 <test_state_changes+0x224>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff37 	bl	8000ac0 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 8000c52:	2064      	movs	r0, #100	@ 0x64
 8000c54:	f001 f874 	bl	8001d40 <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8000c58:	1d7b      	adds	r3, r7, #5
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fdde 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	4619      	mov	r1, r3
 8000c64:	4857      	ldr	r0, [pc, #348]	@ (8000dc4 <test_state_changes+0x228>)
 8000c66:	f006 fdb9 	bl	80077dc <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 8000c6a:	4857      	ldr	r0, [pc, #348]	@ (8000dc8 <test_state_changes+0x22c>)
 8000c6c:	f006 fdb6 	bl	80077dc <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd4e 	bl	8000714 <CC1201_EnterIdleMode>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
    printf("  RX->IDLE: HAL=%d ", status);
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4852      	ldr	r0, [pc, #328]	@ (8000dcc <test_state_changes+0x230>)
 8000c82:	f006 fdab 	bl	80077dc <iprintf>
    if (status == HAL_OK) {
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <test_state_changes+0xfa>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	4950      	ldr	r1, [pc, #320]	@ (8000dd0 <test_state_changes+0x234>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff15 	bl	8000ac0 <print_cc1201_status>
    }
    HAL_Delay(50);
 8000c96:	2032      	movs	r0, #50	@ 0x32
 8000c98:	f001 f852 	bl	8001d40 <HAL_Delay>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 8000c9c:	484d      	ldr	r0, [pc, #308]	@ (8000dd4 <test_state_changes+0x238>)
 8000c9e:	f006 fd9d 	bl	80077dc <iprintf>
    // Ensure at least one byte is present in TX FIFO to avoid immediate underflow
    CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 8000ca2:	1dbb      	adds	r3, r7, #6
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	20aa      	movs	r0, #170	@ 0xaa
 8000ca8:	f7ff fe7e 	bl	80009a8 <CC1201_WriteSingleTxFifo>
    print_cc1201_status(status_byte, "TX_FIFO_PRIME");
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	494a      	ldr	r1, [pc, #296]	@ (8000dd8 <test_state_changes+0x23c>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff05 	bl	8000ac0 <print_cc1201_status>
    status = CC1201_EnterTxMode(&status_byte);
 8000cb6:	1dbb      	adds	r3, r7, #6
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fd1e 	bl	80006fa <CC1201_EnterTxMode>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
    printf("  Enter TX: HAL=%d ", status);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4845      	ldr	r0, [pc, #276]	@ (8000ddc <test_state_changes+0x240>)
 8000cc8:	f006 fd88 	bl	80077dc <iprintf>
    if (status == HAL_OK) {
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d110      	bne.n	8000cf4 <test_state_changes+0x158>
        print_cc1201_status(status_byte, "TX");
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	4942      	ldr	r1, [pc, #264]	@ (8000de0 <test_state_changes+0x244>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fef2 	bl	8000ac0 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 8000cdc:	2032      	movs	r0, #50	@ 0x32
 8000cde:	f001 f82f 	bl	8001d40 <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8000ce2:	1d7b      	adds	r3, r7, #5
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd99 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	4619      	mov	r1, r3
 8000cee:	483d      	ldr	r0, [pc, #244]	@ (8000de4 <test_state_changes+0x248>)
 8000cf0:	f006 fd74 	bl	80077dc <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 8000cf4:	483c      	ldr	r0, [pc, #240]	@ (8000de8 <test_state_changes+0x24c>)
 8000cf6:	f006 fd71 	bl	80077dc <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000cfa:	1dbb      	adds	r3, r7, #6
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fd09 	bl	8000714 <CC1201_EnterIdleMode>
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    printf("  TX->IDLE: HAL=%d ", status);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4838      	ldr	r0, [pc, #224]	@ (8000dec <test_state_changes+0x250>)
 8000d0c:	f006 fd66 	bl	80077dc <iprintf>
    if (status == HAL_OK) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d104      	bne.n	8000d20 <test_state_changes+0x184>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	4935      	ldr	r1, [pc, #212]	@ (8000df0 <test_state_changes+0x254>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fed0 	bl	8000ac0 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 8000d20:	4834      	ldr	r0, [pc, #208]	@ (8000df4 <test_state_changes+0x258>)
 8000d22:	f006 fd5b 	bl	80077dc <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 8000d26:	1dbb      	adds	r3, r7, #6
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fcbf 	bl	80006ac <CC1201_FastTxOn>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
    printf("  Fast TX On: HAL=%d ", status);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4830      	ldr	r0, [pc, #192]	@ (8000df8 <test_state_changes+0x25c>)
 8000d38:	f006 fd50 	bl	80077dc <iprintf>
    if (status == HAL_OK) {
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10d      	bne.n	8000d5e <test_state_changes+0x1c2>
        print_cc1201_status(status_byte, "FSTXON");
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	492d      	ldr	r1, [pc, #180]	@ (8000dfc <test_state_changes+0x260>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff feba 	bl	8000ac0 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000d4c:	1d7b      	adds	r3, r7, #5
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fd64 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 8000d54:	797b      	ldrb	r3, [r7, #5]
 8000d56:	4619      	mov	r1, r3
 8000d58:	4829      	ldr	r0, [pc, #164]	@ (8000e00 <test_state_changes+0x264>)
 8000d5a:	f006 fd3f 	bl	80077dc <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 8000d5e:	4829      	ldr	r0, [pc, #164]	@ (8000e04 <test_state_changes+0x268>)
 8000d60:	f006 fd3c 	bl	80077dc <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fcd4 	bl	8000714 <CC1201_EnterIdleMode>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
    printf("  Final IDLE: HAL=%d ", status);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4619      	mov	r1, r3
 8000d74:	4824      	ldr	r0, [pc, #144]	@ (8000e08 <test_state_changes+0x26c>)
 8000d76:	f006 fd31 	bl	80077dc <iprintf>
    if (status == HAL_OK) {
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d104      	bne.n	8000d8a <test_state_changes+0x1ee>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	4922      	ldr	r1, [pc, #136]	@ (8000e0c <test_state_changes+0x270>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fe9b 	bl	8000ac0 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 8000d8a:	4821      	ldr	r0, [pc, #132]	@ (8000e10 <test_state_changes+0x274>)
 8000d8c:	f006 fd26 	bl	80077dc <iprintf>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08009470 	.word	0x08009470
 8000d9c:	0800949c 	.word	0x0800949c
 8000da0:	080094d4 	.word	0x080094d4
 8000da4:	080094ec 	.word	0x080094ec
 8000da8:	080094f4 	.word	0x080094f4
 8000dac:	08009510 	.word	0x08009510
 8000db0:	08009528 	.word	0x08009528
 8000db4:	08009530 	.word	0x08009530
 8000db8:	08009548 	.word	0x08009548
 8000dbc:	08009560 	.word	0x08009560
 8000dc0:	08009574 	.word	0x08009574
 8000dc4:	08009578 	.word	0x08009578
 8000dc8:	0800959c 	.word	0x0800959c
 8000dcc:	080095b8 	.word	0x080095b8
 8000dd0:	080095cc 	.word	0x080095cc
 8000dd4:	080095d8 	.word	0x080095d8
 8000dd8:	080095f0 	.word	0x080095f0
 8000ddc:	08009600 	.word	0x08009600
 8000de0:	08009614 	.word	0x08009614
 8000de4:	08009618 	.word	0x08009618
 8000de8:	08009638 	.word	0x08009638
 8000dec:	08009654 	.word	0x08009654
 8000df0:	08009668 	.word	0x08009668
 8000df4:	08009674 	.word	0x08009674
 8000df8:	08009698 	.word	0x08009698
 8000dfc:	080096b0 	.word	0x080096b0
 8000e00:	080096b8 	.word	0x080096b8
 8000e04:	080096dc 	.word	0x080096dc
 8000e08:	080096f8 	.word	0x080096f8
 8000e0c:	08009710 	.word	0x08009710
 8000e10:	0800971c 	.word	0x0800971c

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e1a:	f000 f9ef 	bl	80011fc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f000 fefd 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f86d 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 f92d 	bl	8001084 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000e2a:	f000 f8d5 	bl	8000fd8 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 fc9e 	bl	8001770 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f000 fc9b 	bl	8001770 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f000 fc98 	bl	8001770 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e40:	2101      	movs	r1, #1
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 fd88 	bl	8001958 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <main+0xd0>)
 8000e4a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e4e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <main+0xd0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e56:	4b23      	ldr	r3, [pc, #140]	@ (8000ee4 <main+0xd0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <main+0xd0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <main+0xd0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e68:	491e      	ldr	r1, [pc, #120]	@ (8000ee4 <main+0xd0>)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fdf8 	bl	8001a60 <BSP_COM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <main+0x66>
  {
    Error_Handler();
 8000e76:	f000 fa01 	bl	800127c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000e7a:	481b      	ldr	r0, [pc, #108]	@ (8000ee8 <main+0xd4>)
 8000e7c:	f006 fcae 	bl	80077dc <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 fceb 	bl	800185c <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <main+0xd8>)
 8000e88:	f006 fca8 	bl	80077dc <iprintf>

  uint8_t test_status = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000e90:	1dbb      	adds	r3, r7, #6
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fc4c 	bl	8000730 <CC1201_Nop>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	79ba      	ldrb	r2, [r7, #6]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4813      	ldr	r0, [pc, #76]	@ (8000ef0 <main+0xdc>)
 8000ea4:	f006 fc9a 	bl	80077dc <iprintf>
  
  if (nop_result == HAL_OK) {
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d109      	bne.n	8000ec2 <main+0xae>
      printf("Basic CC1201 communication working!\n\r");
 8000eae:	4811      	ldr	r0, [pc, #68]	@ (8000ef4 <main+0xe0>)
 8000eb0:	f006 fc94 	bl	80077dc <iprintf>
      BSP_LED_Off(LED_RED);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f000 fcfb 	bl	80018b0 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 fcce 	bl	800185c <BSP_LED_On>
 8000ec0:	e008      	b.n	8000ed4 <main+0xc0>
  } else {
      printf("CC1201 communication failed!\n\r");
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <main+0xe4>)
 8000ec4:	f006 fc8a 	bl	80077dc <iprintf>
      BSP_LED_Off(LED_GREEN);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fcf1 	bl	80018b0 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 fcc4 	bl	800185c <BSP_LED_On>
  }

  // Quick path: run state changes test immediately
  printf("\n=== RUNNING QUICK STATE TESTS ===\n\r");
 8000ed4:	4809      	ldr	r0, [pc, #36]	@ (8000efc <main+0xe8>)
 8000ed6:	f006 fc81 	bl	80077dc <iprintf>
  test_state_changes();
 8000eda:	f7ff fe5f 	bl	8000b9c <test_state_changes>
  // #endif

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ede:	bf00      	nop
 8000ee0:	e7fd      	b.n	8000ede <main+0xca>
 8000ee2:	bf00      	nop
 8000ee4:	240000a4 	.word	0x240000a4
 8000ee8:	08009ca4 	.word	0x08009ca4
 8000eec:	08009cc0 	.word	0x08009cc0
 8000ef0:	08009cf0 	.word	0x08009cf0
 8000ef4:	08009d1c 	.word	0x08009d1c
 8000ef8:	08009d44 	.word	0x08009d44
 8000efc:	08009d64 	.word	0x08009d64

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b09c      	sub	sp, #112	@ 0x70
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0a:	224c      	movs	r2, #76	@ 0x4c
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f006 fcb9 	bl	8007886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2220      	movs	r2, #32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 fcb3 	bl	8007886 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f20:	2002      	movs	r0, #2
 8000f22:	f001 fd6d 	bl	8002a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <SystemClock_Config+0xd0>)
 8000f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2e:	4a28      	ldr	r2, [pc, #160]	@ (8000fd0 <SystemClock_Config+0xd0>)
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f36:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <SystemClock_Config+0xd0>)
 8000f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <SystemClock_Config+0xd4>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f48:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <SystemClock_Config+0xd4>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <SystemClock_Config+0xd4>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f5c:	bf00      	nop
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <SystemClock_Config+0xd4>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f6a:	d1f8      	bne.n	8000f5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2340      	movs	r3, #64	@ 0x40
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fd77 	bl	8002a74 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f8c:	f000 f976 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	233f      	movs	r3, #63	@ 0x3f
 8000f92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 f9b6 	bl	8003328 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fc2:	f000 f95b 	bl	800127c <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3770      	adds	r7, #112	@ 0x70
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	58000400 	.word	0x58000400
 8000fd4:	58024800 	.word	0x58024800

08000fd8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000fdc:	4b27      	ldr	r3, [pc, #156]	@ (800107c <MX_SPI4_Init+0xa4>)
 8000fde:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <MX_SPI4_Init+0xa8>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	@ (800107c <MX_SPI4_Init+0xa4>)
 8000fe4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fe8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <MX_SPI4_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <MX_SPI4_Init+0xa4>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <MX_SPI4_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <MX_SPI4_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001002:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001004:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001008:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <MX_SPI4_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101c:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_SPI4_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_SPI4_Init+0xa4>)
 800102a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_SPI4_Init+0xa4>)
 800103e:	2200      	movs	r2, #0
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_SPI4_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001056:	2200      	movs	r2, #0
 8001058:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_SPI4_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_SPI4_Init+0xa4>)
 8001068:	f004 fb16 	bl	8005698 <HAL_SPI_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001072:	f000 f903 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	240000b8 	.word	0x240000b8
 8001080:	40013400 	.word	0x40013400

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4b37      	ldr	r3, [pc, #220]	@ (8001178 <MX_GPIO_Init+0xf4>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	4a35      	ldr	r2, [pc, #212]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010aa:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	4a2e      	ldr	r2, [pc, #184]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a26      	ldr	r2, [pc, #152]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001178 <MX_GPIO_Init+0xf4>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001104:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <MX_GPIO_Init+0xf4>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <MX_GPIO_Init+0xf4>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <MX_GPIO_Init+0xf4>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <MX_GPIO_Init+0xf4>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 (CC1201 Interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001130:	2320      	movs	r3, #32
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001134:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <MX_GPIO_Init+0xf8>)
 8001146:	f001 fa5d 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 (CC1201 Reset) */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114a:	2310      	movs	r3, #16
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4806      	ldr	r0, [pc, #24]	@ (800117c <MX_GPIO_Init+0xf8>)
 8001162:	f001 fa4f 	bl	8002604 <HAL_GPIO_Init>
  
  // Set reset pin HIGH (inactive) by default
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2110      	movs	r1, #16
 800116a:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_GPIO_Init+0xf8>)
 800116c:	f001 fbfa 	bl	8002964 <HAL_GPIO_WritePin>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	@ 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	58024400 	.word	0x58024400
 800117c:	58020c00 	.word	0x58020c00

08001180 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2b20      	cmp	r3, #32
 800118e:	d129      	bne.n	80011e4 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 8001190:	4816      	ldr	r0, [pc, #88]	@ (80011ec <HAL_GPIO_EXTI_Callback+0x6c>)
 8001192:	f006 fb23 	bl	80077dc <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fb3c 	bl	800081c <CC1201_ReadMARCState>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x70>)
 80011b0:	f006 fb14 	bl	80077dc <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 80011b8:	f107 030e 	add.w	r3, r7, #14
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fb3b 	bl	8000838 <CC1201_GetNumRXBytes>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10a      	bne.n	80011de <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x74>)
 80011ce:	f006 fb05 	bl	80077dc <iprintf>
            if (rx_bytes > 0) {
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x78>)
 80011da:	f006 faff 	bl	80077dc <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 fb90 	bl	8001904 <BSP_LED_Toggle>
    }
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08009d8c 	.word	0x08009d8c
 80011f0:	08009dac 	.word	0x08009dac
 80011f4:	08009dd4 	.word	0x08009dd4
 80011f8:	08009df0 	.word	0x08009df0

080011fc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800120e:	f000 fed7 	bl	8001fc0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001212:	2301      	movs	r3, #1
 8001214:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001216:	2300      	movs	r3, #0
 8001218:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800121e:	231f      	movs	r3, #31
 8001220:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001222:	2387      	movs	r3, #135	@ 0x87
 8001224:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001226:	2300      	movs	r3, #0
 8001228:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800122a:	2300      	movs	r3, #0
 800122c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800122e:	2301      	movs	r3, #1
 8001230:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001232:	2301      	movs	r3, #1
 8001234:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800123e:	463b      	mov	r3, r7
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fef5 	bl	8002030 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001246:	2004      	movs	r0, #4
 8001248:	f000 fed2 	bl	8001ff0 <HAL_MPU_Enable>

}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <BSP_PB_Callback+0x24>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	240000b4 	.word	0x240000b4

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_MspInit+0x30>)
 8001290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001294:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x30>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x30>)
 80012a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58024400 	.word	0x58024400

080012bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ba      	sub	sp, #232	@ 0xe8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	22c0      	movs	r2, #192	@ 0xc0
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 fad2 	bl	8007886 <memset>
  if(hspi->Instance==SPI4)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a37      	ldr	r2, [pc, #220]	@ (80013c4 <HAL_SPI_MspInit+0x108>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d166      	bne.n	80013ba <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80012ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fb9d 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800130c:	f7ff ffb6 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <HAL_SPI_MspInit+0x10c>)
 8001312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001316:	4a2c      	ldr	r2, [pc, #176]	@ (80013c8 <HAL_SPI_MspInit+0x10c>)
 8001318:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <HAL_SPI_MspInit+0x10c>)
 8001322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <HAL_SPI_MspInit+0x10c>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001334:	4a24      	ldr	r2, [pc, #144]	@ (80013c8 <HAL_SPI_MspInit+0x10c>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133e:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <HAL_SPI_MspInit+0x10c>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    
    // Configure SPI pins (SCK, MISO, MOSI) 
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800134c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001350:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Increased speed
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001366:	2305      	movs	r3, #5
 8001368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001370:	4619      	mov	r1, r3
 8001372:	4816      	ldr	r0, [pc, #88]	@ (80013cc <HAL_SPI_MspInit+0x110>)
 8001374:	f001 f946 	bl	8002604 <HAL_GPIO_Init>
    
    // Configure PE11 as manual CS (GPIO output)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001378:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800137c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	@ (80013cc <HAL_SPI_MspInit+0x110>)
 800139a:	f001 f933 	bl	8002604 <HAL_GPIO_Init>
    
    // Set CS high (inactive) by default
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013a4:	4809      	ldr	r0, [pc, #36]	@ (80013cc <HAL_SPI_MspInit+0x110>)
 80013a6:	f001 fadd 	bl	8002964 <HAL_GPIO_WritePin>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2054      	movs	r0, #84	@ 0x54
 80013b0:	f000 fdd1 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80013b4:	2054      	movs	r0, #84	@ 0x54
 80013b6:	f000 fde8 	bl	8001f8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 80013ba:	bf00      	nop
 80013bc:	37e8      	adds	r7, #232	@ 0xe8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40013400 	.word	0x40013400
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58021000 	.word	0x58021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <NMI_Handler+0x4>

080013d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <MemManage_Handler+0x4>

080013e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001426:	f000 fc6b 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}

0800142e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 fb02 	bl	8001a3c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001440:	2020      	movs	r0, #32
 8001442:	f001 fac2 	bl	80029ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <SPI4_IRQHandler+0x10>)
 8001452:	f004 fd7f 	bl	8005f54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	240000b8 	.word	0x240000b8

08001460 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e00a      	b.n	8001488 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001472:	f3af 8000 	nop.w
 8001476:	4601      	mov	r1, r0
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	b2ca      	uxtb	r2, r1
 8001480:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbf0      	blt.n	8001472 <_read+0x12>
  }

  return len;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e009      	b.n	80014c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fb35 	bl	8001b24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf1      	blt.n	80014ac <_write+0x12>
  }
  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_close>:

int _close(int file)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014fa:	605a      	str	r2, [r3, #4]
  return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_isatty>:

int _isatty(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f006 f9da 	bl	8007924 <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	24080000 	.word	0x24080000
 800159c:	00000400 	.word	0x00000400
 80015a0:	24000140 	.word	0x24000140
 80015a4:	24000338 	.word	0x24000338

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <SystemInit+0x114>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b2:	4a42      	ldr	r2, [pc, #264]	@ (80016bc <SystemInit+0x114>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015bc:	4b40      	ldr	r3, [pc, #256]	@ (80016c0 <SystemInit+0x118>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	2b06      	cmp	r3, #6
 80015c6:	d807      	bhi.n	80015d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015c8:	4b3d      	ldr	r3, [pc, #244]	@ (80016c0 <SystemInit+0x118>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 030f 	bic.w	r3, r3, #15
 80015d0:	4a3b      	ldr	r2, [pc, #236]	@ (80016c0 <SystemInit+0x118>)
 80015d2:	f043 0307 	orr.w	r3, r3, #7
 80015d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015d8:	4b3a      	ldr	r3, [pc, #232]	@ (80016c4 <SystemInit+0x11c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a39      	ldr	r2, [pc, #228]	@ (80016c4 <SystemInit+0x11c>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015e4:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <SystemInit+0x11c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015ea:	4b36      	ldr	r3, [pc, #216]	@ (80016c4 <SystemInit+0x11c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4935      	ldr	r1, [pc, #212]	@ (80016c4 <SystemInit+0x11c>)
 80015f0:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <SystemInit+0x120>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015f6:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <SystemInit+0x118>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001602:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <SystemInit+0x118>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 030f 	bic.w	r3, r3, #15
 800160a:	4a2d      	ldr	r2, [pc, #180]	@ (80016c0 <SystemInit+0x118>)
 800160c:	f043 0307 	orr.w	r3, r3, #7
 8001610:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001612:	4b2c      	ldr	r3, [pc, #176]	@ (80016c4 <SystemInit+0x11c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001618:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <SystemInit+0x11c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <SystemInit+0x11c>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <SystemInit+0x11c>)
 8001626:	4a29      	ldr	r2, [pc, #164]	@ (80016cc <SystemInit+0x124>)
 8001628:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800162a:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <SystemInit+0x11c>)
 800162c:	4a28      	ldr	r2, [pc, #160]	@ (80016d0 <SystemInit+0x128>)
 800162e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001630:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <SystemInit+0x11c>)
 8001632:	4a28      	ldr	r2, [pc, #160]	@ (80016d4 <SystemInit+0x12c>)
 8001634:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <SystemInit+0x11c>)
 8001638:	2200      	movs	r2, #0
 800163a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <SystemInit+0x11c>)
 800163e:	4a25      	ldr	r2, [pc, #148]	@ (80016d4 <SystemInit+0x12c>)
 8001640:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <SystemInit+0x11c>)
 8001644:	2200      	movs	r2, #0
 8001646:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001648:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <SystemInit+0x11c>)
 800164a:	4a22      	ldr	r2, [pc, #136]	@ (80016d4 <SystemInit+0x12c>)
 800164c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <SystemInit+0x11c>)
 8001650:	2200      	movs	r2, #0
 8001652:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <SystemInit+0x11c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1a      	ldr	r2, [pc, #104]	@ (80016c4 <SystemInit+0x11c>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001660:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <SystemInit+0x11c>)
 8001662:	2200      	movs	r2, #0
 8001664:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <SystemInit+0x130>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <SystemInit+0x134>)
 800166c:	4013      	ands	r3, r2
 800166e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001672:	d202      	bcs.n	800167a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <SystemInit+0x138>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <SystemInit+0x11c>)
 800167c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d113      	bne.n	80016b0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <SystemInit+0x11c>)
 800168a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800168e:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <SystemInit+0x11c>)
 8001690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001694:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <SystemInit+0x13c>)
 800169a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800169e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <SystemInit+0x11c>)
 80016a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <SystemInit+0x11c>)
 80016a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	52002000 	.word	0x52002000
 80016c4:	58024400 	.word	0x58024400
 80016c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80016cc:	02020200 	.word	0x02020200
 80016d0:	01ff0000 	.word	0x01ff0000
 80016d4:	01010280 	.word	0x01010280
 80016d8:	5c001000 	.word	0x5c001000
 80016dc:	ffff0000 	.word	0xffff0000
 80016e0:	51008108 	.word	0x51008108
 80016e4:	52004000 	.word	0x52004000

080016e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <ExitRun0Mode+0x2c>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <ExitRun0Mode+0x2c>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80016f8:	bf00      	nop
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <ExitRun0Mode+0x2c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f9      	beq.n	80016fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	58024800 	.word	0x58024800

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001754 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800171c:	f7ff ffe4 	bl	80016e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001720:	f7ff ff42 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001726:	490d      	ldr	r1, [pc, #52]	@ (800175c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800173c:	4c0a      	ldr	r4, [pc, #40]	@ (8001768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174a:	f006 f8f1 	bl	8007930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fb61 	bl	8000e14 <main>
  bx  lr
 8001752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001758:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800175c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001760:	08009e84 	.word	0x08009e84
  ldr r2, =_sbss
 8001764:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001768:	24000334 	.word	0x24000334

0800176c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC3_IRQHandler>
	...

08001770 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	@ 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <BSP_LED_Init+0x28>
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d006      	beq.n	8001798 <BSP_LED_Init+0x28>
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d003      	beq.n	8001798 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001790:	f06f 0301 	mvn.w	r3, #1
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001796:	e055      	b.n	8001844 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800179e:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	e021      	b.n	8001802 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10f      	bne.n	80017e4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80017c4:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ca:	4a21      	ldr	r2, [pc, #132]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	e00e      	b.n	8001802 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <BSP_LED_Init+0xe0>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4a13      	ldr	r2, [pc, #76]	@ (8001854 <BSP_LED_Init+0xe4>)
 8001806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800180a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <BSP_LED_Init+0xe8>)
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	f107 0218 	add.w	r2, r7, #24
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f000 feec 	bl	8002604 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <BSP_LED_Init+0xe8>)
 8001830:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <BSP_LED_Init+0xe4>)
 8001838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	f001 f890 	bl	8002964 <HAL_GPIO_WritePin>
  }

  return ret;
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001846:	4618      	mov	r0, r3
 8001848:	3730      	adds	r7, #48	@ 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	58024400 	.word	0x58024400
 8001854:	08009e1c 	.word	0x08009e1c
 8001858:	2400000c 	.word	0x2400000c

0800185c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <BSP_LED_On+0x28>
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d006      	beq.n	8001884 <BSP_LED_On+0x28>
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d003      	beq.n	8001884 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800187c:	f06f 0301 	mvn.w	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e00b      	b.n	800189c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <BSP_LED_On+0x4c>)
 8001888:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <BSP_LED_On+0x50>)
 8001890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001894:	2201      	movs	r2, #1
 8001896:	4619      	mov	r1, r3
 8001898:	f001 f864 	bl	8002964 <HAL_GPIO_WritePin>
  }

  return ret;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2400000c 	.word	0x2400000c
 80018ac:	08009e1c 	.word	0x08009e1c

080018b0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <BSP_LED_Off+0x28>
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d006      	beq.n	80018d8 <BSP_LED_Off+0x28>
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d003      	beq.n	80018d8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018d0:	f06f 0301 	mvn.w	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e00b      	b.n	80018f0 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a08      	ldr	r2, [pc, #32]	@ (80018fc <BSP_LED_Off+0x4c>)
 80018dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <BSP_LED_Off+0x50>)
 80018e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	f001 f83a 	bl	8002964 <HAL_GPIO_WritePin>
  }

  return ret;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2400000c 	.word	0x2400000c
 8001900:	08009e1c 	.word	0x08009e1c

08001904 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d009      	beq.n	800192c <BSP_LED_Toggle+0x28>
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d006      	beq.n	800192c <BSP_LED_Toggle+0x28>
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d003      	beq.n	800192c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001924:	f06f 0301 	mvn.w	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e00b      	b.n	8001944 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <BSP_LED_Toggle+0x4c>)
 8001930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	4907      	ldr	r1, [pc, #28]	@ (8001954 <BSP_LED_Toggle+0x50>)
 8001938:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f001 f829 	bl	8002996 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001944:	68fb      	ldr	r3, [r7, #12]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2400000c 	.word	0x2400000c
 8001954:	08009e1c 	.word	0x08009e1c

08001958 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	460a      	mov	r2, r1
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001968:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <BSP_PB_Init+0xcc>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a24 <BSP_PB_Init+0xcc>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001978:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <BSP_PB_Init+0xcc>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800198a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800198c:	2302      	movs	r3, #2
 800198e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <BSP_PB_Init+0xd0>)
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	f107 020c 	add.w	r2, r7, #12
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fe29 	bl	8002604 <HAL_GPIO_Init>
 80019b2:	e031      	b.n	8001a18 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80019b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019b8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a28 <BSP_PB_Init+0xd0>)
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	f107 020c 	add.w	r2, r7, #12
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fe1b 	bl	8002604 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4a16      	ldr	r2, [pc, #88]	@ (8001a2c <BSP_PB_Init+0xd4>)
 80019d4:	441a      	add	r2, r3
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4915      	ldr	r1, [pc, #84]	@ (8001a30 <BSP_PB_Init+0xd8>)
 80019da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f000 fdca 	bl	800257a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <BSP_PB_Init+0xd4>)
 80019ec:	1898      	adds	r0, r3, r2
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <BSP_PB_Init+0xdc>)
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	461a      	mov	r2, r3
 80019f8:	2100      	movs	r1, #0
 80019fa:	f000 fd9f 	bl	800253c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80019fe:	2028      	movs	r0, #40	@ 0x28
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <BSP_PB_Init+0xe0>)
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f000 faa3 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a10:	2328      	movs	r3, #40	@ 0x28
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fab9 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400
 8001a28:	24000018 	.word	0x24000018
 8001a2c:	24000144 	.word	0x24000144
 8001a30:	08009e24 	.word	0x08009e24
 8001a34:	2400001c 	.word	0x2400001c
 8001a38:	24000020 	.word	0x24000020

08001a3c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <BSP_PB_IRQHandler+0x20>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fda8 	bl	80025a4 <HAL_EXTI_IRQHandler>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	24000144 	.word	0x24000144

08001a60 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a76:	f06f 0301 	mvn.w	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e018      	b.n	8001ab0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2294      	movs	r2, #148	@ 0x94
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a0d      	ldr	r2, [pc, #52]	@ (8001abc <BSP_COM_Init+0x5c>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f86e 	bl	8001b6c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2294      	movs	r2, #148	@ 0x94
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <BSP_COM_Init+0x5c>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f80e 	bl	8001ac0 <MX_USART3_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001aaa:	f06f 0303 	mvn.w	r3, #3
 8001aae:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2400014c 	.word	0x2400014c

08001ac0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <MX_USART3_Init+0x60>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	220c      	movs	r2, #12
 8001ade:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	895b      	ldrh	r3, [r3, #10]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	891b      	ldrh	r3, [r3, #8]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	899b      	ldrh	r3, [r3, #12]
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b0c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f004 fd31 	bl	8006576 <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	24000008 	.word	0x24000008

08001b24 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <__io_putchar+0x30>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	2394      	movs	r3, #148	@ 0x94
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <__io_putchar+0x34>)
 8001b3a:	1898      	adds	r0, r3, r2
 8001b3c:	1d39      	adds	r1, r7, #4
 8001b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b42:	2201      	movs	r2, #1
 8001b44:	f004 fd71 	bl	800662a <HAL_UART_Transmit>
  return ch;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	240001e0 	.word	0x240001e0
 8001b58:	2400014c 	.word	0x2400014c

08001b5c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff fb77 	bl	8001254 <BSP_PB_Callback>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7a:	4a26      	ldr	r2, [pc, #152]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b98:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001bb0:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb6:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <COM1_MspInit+0xa8>)
 8001bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001be0:	2307      	movs	r3, #7
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <COM1_MspInit+0xac>)
 8001bec:	f000 fd0a 	bl	8002604 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <COM1_MspInit+0xac>)
 8001c06:	f000 fcfd 	bl	8002604 <HAL_GPIO_Init>
}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	58024400 	.word	0x58024400
 8001c18:	58020c00 	.word	0x58020c00

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c22:	2003      	movs	r0, #3
 8001c24:	f000 f98c 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c28:	f001 fd34 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_Init+0x68>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	4913      	ldr	r1, [pc, #76]	@ (8001c88 <HAL_Init+0x6c>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_Init+0x68>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <HAL_Init+0x6c>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <HAL_Init+0x70>)
 8001c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <HAL_Init+0x74>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f814 	bl	8001c94 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e002      	b.n	8001c7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c76:	f7ff fb07 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	08009e0c 	.word	0x08009e0c
 8001c8c:	24000004 	.word	0x24000004
 8001c90:	24000000 	.word	0x24000000

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_InitTick+0x60>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e021      	b.n	8001cec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_InitTick+0x64>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_InitTick+0x60>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f971 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 f93b 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	@ (8001cfc <HAL_InitTick+0x68>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	24000028 	.word	0x24000028
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	24000024 	.word	0x24000024

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	24000028 	.word	0x24000028
 8001d24:	240001e4 	.word	0x240001e4

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	240001e4 	.word	0x240001e4

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	24000028 	.word	0x24000028

08001d88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_GetREVID+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0c1b      	lsrs	r3, r3, #16
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	5c001000 	.word	0x5c001000

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00
 8001de4:	05fa0000 	.word	0x05fa0000

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff29 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff40 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff90 	bl	8001e94 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5f 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff33 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa4 	bl	8001efc <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001fc4:	f3bf 8f5f 	dmb	sy
}
 8001fc8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <HAL_MPU_Disable+0x28>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	4a06      	ldr	r2, [pc, #24]	@ (8001fe8 <HAL_MPU_Disable+0x28>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001fd6:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_MPU_Disable+0x2c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00
 8001fec:	e000ed90 	.word	0xe000ed90

08001ff0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <HAL_MPU_Enable+0x38>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_MPU_Enable+0x3c>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	4a09      	ldr	r2, [pc, #36]	@ (800202c <HAL_MPU_Enable+0x3c>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800200e:	f3bf 8f4f 	dsb	sy
}
 8002012:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002014:	f3bf 8f6f 	isb	sy
}
 8002018:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed90 	.word	0xe000ed90
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	785a      	ldrb	r2, [r3, #1]
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_MPU_ConfigRegion+0x7c>)
 800203e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002040:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <HAL_MPU_ConfigRegion+0x7c>)
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_MPU_ConfigRegion+0x7c>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800204c:	4a17      	ldr	r2, [pc, #92]	@ (80020ac <HAL_MPU_ConfigRegion+0x7c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7b1b      	ldrb	r3, [r3, #12]
 8002058:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7adb      	ldrb	r3, [r3, #11]
 800205e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002060:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7a9b      	ldrb	r3, [r3, #10]
 8002066:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002068:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7b5b      	ldrb	r3, [r3, #13]
 800206e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002070:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7b9b      	ldrb	r3, [r3, #14]
 8002076:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002078:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7bdb      	ldrb	r3, [r3, #15]
 800207e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002080:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7a5b      	ldrb	r3, [r3, #9]
 8002086:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002088:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7a1b      	ldrb	r3, [r3, #8]
 800208e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002090:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002098:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800209a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800209c:	6113      	str	r3, [r2, #16]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed90 	.word	0xe000ed90

080020b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e237      	b.n	8002532 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d004      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	@ 0x80
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e22c      	b.n	8002532 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002250 <HAL_DMA_Abort_IT+0x1a0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04a      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002254 <HAL_DMA_Abort_IT+0x1a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d045      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a59      	ldr	r2, [pc, #356]	@ (8002258 <HAL_DMA_Abort_IT+0x1a8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d040      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a58      	ldr	r2, [pc, #352]	@ (800225c <HAL_DMA_Abort_IT+0x1ac>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d03b      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a56      	ldr	r2, [pc, #344]	@ (8002260 <HAL_DMA_Abort_IT+0x1b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d036      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a55      	ldr	r2, [pc, #340]	@ (8002264 <HAL_DMA_Abort_IT+0x1b4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d031      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a53      	ldr	r2, [pc, #332]	@ (8002268 <HAL_DMA_Abort_IT+0x1b8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02c      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a52      	ldr	r2, [pc, #328]	@ (800226c <HAL_DMA_Abort_IT+0x1bc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d027      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a50      	ldr	r2, [pc, #320]	@ (8002270 <HAL_DMA_Abort_IT+0x1c0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d022      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a4f      	ldr	r2, [pc, #316]	@ (8002274 <HAL_DMA_Abort_IT+0x1c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01d      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a4d      	ldr	r2, [pc, #308]	@ (8002278 <HAL_DMA_Abort_IT+0x1c8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d018      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a4c      	ldr	r2, [pc, #304]	@ (800227c <HAL_DMA_Abort_IT+0x1cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4a      	ldr	r2, [pc, #296]	@ (8002280 <HAL_DMA_Abort_IT+0x1d0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00e      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a49      	ldr	r2, [pc, #292]	@ (8002284 <HAL_DMA_Abort_IT+0x1d4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a47      	ldr	r2, [pc, #284]	@ (8002288 <HAL_DMA_Abort_IT+0x1d8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a46      	ldr	r2, [pc, #280]	@ (800228c <HAL_DMA_Abort_IT+0x1dc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_DMA_Abort_IT+0xcc>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_DMA_Abort_IT+0xce>
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8086 	beq.w	8002290 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2f      	ldr	r2, [pc, #188]	@ (8002250 <HAL_DMA_Abort_IT+0x1a0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d04a      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2e      	ldr	r2, [pc, #184]	@ (8002254 <HAL_DMA_Abort_IT+0x1a4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d045      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002258 <HAL_DMA_Abort_IT+0x1a8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d040      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2b      	ldr	r2, [pc, #172]	@ (800225c <HAL_DMA_Abort_IT+0x1ac>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d03b      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <HAL_DMA_Abort_IT+0x1b0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d036      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a28      	ldr	r2, [pc, #160]	@ (8002264 <HAL_DMA_Abort_IT+0x1b4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d031      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a26      	ldr	r2, [pc, #152]	@ (8002268 <HAL_DMA_Abort_IT+0x1b8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02c      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a25      	ldr	r2, [pc, #148]	@ (800226c <HAL_DMA_Abort_IT+0x1bc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d027      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a23      	ldr	r2, [pc, #140]	@ (8002270 <HAL_DMA_Abort_IT+0x1c0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d022      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a22      	ldr	r2, [pc, #136]	@ (8002274 <HAL_DMA_Abort_IT+0x1c4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01d      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a20      	ldr	r2, [pc, #128]	@ (8002278 <HAL_DMA_Abort_IT+0x1c8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d018      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <HAL_DMA_Abort_IT+0x1cc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d013      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_DMA_Abort_IT+0x1d0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00e      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1c      	ldr	r2, [pc, #112]	@ (8002284 <HAL_DMA_Abort_IT+0x1d4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1a      	ldr	r2, [pc, #104]	@ (8002288 <HAL_DMA_Abort_IT+0x1d8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_DMA_Abort_IT+0x17c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a19      	ldr	r2, [pc, #100]	@ (800228c <HAL_DMA_Abort_IT+0x1dc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d108      	bne.n	800223e <HAL_DMA_Abort_IT+0x18e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e178      	b.n	8002530 <HAL_DMA_Abort_IT+0x480>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e16f      	b.n	8002530 <HAL_DMA_Abort_IT+0x480>
 8002250:	40020010 	.word	0x40020010
 8002254:	40020028 	.word	0x40020028
 8002258:	40020040 	.word	0x40020040
 800225c:	40020058 	.word	0x40020058
 8002260:	40020070 	.word	0x40020070
 8002264:	40020088 	.word	0x40020088
 8002268:	400200a0 	.word	0x400200a0
 800226c:	400200b8 	.word	0x400200b8
 8002270:	40020410 	.word	0x40020410
 8002274:	40020428 	.word	0x40020428
 8002278:	40020440 	.word	0x40020440
 800227c:	40020458 	.word	0x40020458
 8002280:	40020470 	.word	0x40020470
 8002284:	40020488 	.word	0x40020488
 8002288:	400204a0 	.word	0x400204a0
 800228c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 020e 	bic.w	r2, r2, #14
 800229e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6c      	ldr	r2, [pc, #432]	@ (8002458 <HAL_DMA_Abort_IT+0x3a8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d04a      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6b      	ldr	r2, [pc, #428]	@ (800245c <HAL_DMA_Abort_IT+0x3ac>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d045      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a69      	ldr	r2, [pc, #420]	@ (8002460 <HAL_DMA_Abort_IT+0x3b0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d040      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a68      	ldr	r2, [pc, #416]	@ (8002464 <HAL_DMA_Abort_IT+0x3b4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d03b      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a66      	ldr	r2, [pc, #408]	@ (8002468 <HAL_DMA_Abort_IT+0x3b8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d036      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a65      	ldr	r2, [pc, #404]	@ (800246c <HAL_DMA_Abort_IT+0x3bc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d031      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a63      	ldr	r2, [pc, #396]	@ (8002470 <HAL_DMA_Abort_IT+0x3c0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02c      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a62      	ldr	r2, [pc, #392]	@ (8002474 <HAL_DMA_Abort_IT+0x3c4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d027      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a60      	ldr	r2, [pc, #384]	@ (8002478 <HAL_DMA_Abort_IT+0x3c8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d022      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5f      	ldr	r2, [pc, #380]	@ (800247c <HAL_DMA_Abort_IT+0x3cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d01d      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5d      	ldr	r2, [pc, #372]	@ (8002480 <HAL_DMA_Abort_IT+0x3d0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d018      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a5c      	ldr	r2, [pc, #368]	@ (8002484 <HAL_DMA_Abort_IT+0x3d4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5a      	ldr	r2, [pc, #360]	@ (8002488 <HAL_DMA_Abort_IT+0x3d8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00e      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a59      	ldr	r2, [pc, #356]	@ (800248c <HAL_DMA_Abort_IT+0x3dc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d009      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <HAL_DMA_Abort_IT+0x3e0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_DMA_Abort_IT+0x290>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a56      	ldr	r2, [pc, #344]	@ (8002494 <HAL_DMA_Abort_IT+0x3e4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d108      	bne.n	8002352 <HAL_DMA_Abort_IT+0x2a2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e007      	b.n	8002362 <HAL_DMA_Abort_IT+0x2b2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3c      	ldr	r2, [pc, #240]	@ (8002458 <HAL_DMA_Abort_IT+0x3a8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d072      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3a      	ldr	r2, [pc, #232]	@ (800245c <HAL_DMA_Abort_IT+0x3ac>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d06d      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a39      	ldr	r2, [pc, #228]	@ (8002460 <HAL_DMA_Abort_IT+0x3b0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d068      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a37      	ldr	r2, [pc, #220]	@ (8002464 <HAL_DMA_Abort_IT+0x3b4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d063      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a36      	ldr	r2, [pc, #216]	@ (8002468 <HAL_DMA_Abort_IT+0x3b8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d05e      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a34      	ldr	r2, [pc, #208]	@ (800246c <HAL_DMA_Abort_IT+0x3bc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d059      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a33      	ldr	r2, [pc, #204]	@ (8002470 <HAL_DMA_Abort_IT+0x3c0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d054      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a31      	ldr	r2, [pc, #196]	@ (8002474 <HAL_DMA_Abort_IT+0x3c4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d04f      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a30      	ldr	r2, [pc, #192]	@ (8002478 <HAL_DMA_Abort_IT+0x3c8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d04a      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2e      	ldr	r2, [pc, #184]	@ (800247c <HAL_DMA_Abort_IT+0x3cc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d045      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002480 <HAL_DMA_Abort_IT+0x3d0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d040      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002484 <HAL_DMA_Abort_IT+0x3d4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d03b      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2a      	ldr	r2, [pc, #168]	@ (8002488 <HAL_DMA_Abort_IT+0x3d8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d036      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a28      	ldr	r2, [pc, #160]	@ (800248c <HAL_DMA_Abort_IT+0x3dc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d031      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_DMA_Abort_IT+0x3e0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d02c      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a25      	ldr	r2, [pc, #148]	@ (8002494 <HAL_DMA_Abort_IT+0x3e4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d027      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <HAL_DMA_Abort_IT+0x3e8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a22      	ldr	r2, [pc, #136]	@ (800249c <HAL_DMA_Abort_IT+0x3ec>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01d      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <HAL_DMA_Abort_IT+0x3f0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d018      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <HAL_DMA_Abort_IT+0x3f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <HAL_DMA_Abort_IT+0x3f8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <HAL_DMA_Abort_IT+0x3fc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_DMA_Abort_IT+0x400>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_DMA_Abort_IT+0x3a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <HAL_DMA_Abort_IT+0x404>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d132      	bne.n	80024b8 <HAL_DMA_Abort_IT+0x408>
 8002452:	2301      	movs	r3, #1
 8002454:	e031      	b.n	80024ba <HAL_DMA_Abort_IT+0x40a>
 8002456:	bf00      	nop
 8002458:	40020010 	.word	0x40020010
 800245c:	40020028 	.word	0x40020028
 8002460:	40020040 	.word	0x40020040
 8002464:	40020058 	.word	0x40020058
 8002468:	40020070 	.word	0x40020070
 800246c:	40020088 	.word	0x40020088
 8002470:	400200a0 	.word	0x400200a0
 8002474:	400200b8 	.word	0x400200b8
 8002478:	40020410 	.word	0x40020410
 800247c:	40020428 	.word	0x40020428
 8002480:	40020440 	.word	0x40020440
 8002484:	40020458 	.word	0x40020458
 8002488:	40020470 	.word	0x40020470
 800248c:	40020488 	.word	0x40020488
 8002490:	400204a0 	.word	0x400204a0
 8002494:	400204b8 	.word	0x400204b8
 8002498:	58025408 	.word	0x58025408
 800249c:	5802541c 	.word	0x5802541c
 80024a0:	58025430 	.word	0x58025430
 80024a4:	58025444 	.word	0x58025444
 80024a8:	58025458 	.word	0x58025458
 80024ac:	5802546c 	.word	0x5802546c
 80024b0:	58025480 	.word	0x58025480
 80024b4:	58025494 	.word	0x58025494
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d028      	beq.n	8002510 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2201      	movs	r2, #1
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002504:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800250e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop

0800253c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	460b      	mov	r3, r1
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e00a      	b.n	800256e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	605a      	str	r2, [r3, #4]
      break;
 8002564:	e002      	b.n	800256c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
      break;
 800256a:	bf00      	nop
  }

  return status;
 800256c:	7dfb      	ldrb	r3, [r7, #23]
}
 800256e:	4618      	mov	r0, r3
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e003      	b.n	8002596 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2201      	movs	r2, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	011a      	lsls	r2, r3, #4
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <HAL_EXTI_IRQHandler+0x5c>)
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4798      	blx	r3
    }
  }
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	58000088 	.word	0x58000088

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002612:	4b89      	ldr	r3, [pc, #548]	@ (8002838 <HAL_GPIO_Init+0x234>)
 8002614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002616:	e194      	b.n	8002942 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8186 	beq.w	800293c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d005      	beq.n	8002648 <HAL_GPIO_Init+0x44>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d130      	bne.n	80026aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267e:	2201      	movs	r2, #1
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 0201 	and.w	r2, r3, #1
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d017      	beq.n	80026e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d123      	bne.n	800273a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	69b9      	ldr	r1, [r7, #24]
 8002736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80e0 	beq.w	800293c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277c:	4b2f      	ldr	r3, [pc, #188]	@ (800283c <HAL_GPIO_Init+0x238>)
 800277e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002782:	4a2e      	ldr	r2, [pc, #184]	@ (800283c <HAL_GPIO_Init+0x238>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800278c:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_GPIO_Init+0x238>)
 800278e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279a:	4a29      	ldr	r2, [pc, #164]	@ (8002840 <HAL_GPIO_Init+0x23c>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a20      	ldr	r2, [pc, #128]	@ (8002844 <HAL_GPIO_Init+0x240>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d052      	beq.n	800286c <HAL_GPIO_Init+0x268>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_GPIO_Init+0x244>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d031      	beq.n	8002832 <HAL_GPIO_Init+0x22e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1e      	ldr	r2, [pc, #120]	@ (800284c <HAL_GPIO_Init+0x248>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02b      	beq.n	800282e <HAL_GPIO_Init+0x22a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002850 <HAL_GPIO_Init+0x24c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d025      	beq.n	800282a <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <HAL_GPIO_Init+0x250>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01f      	beq.n	8002826 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002858 <HAL_GPIO_Init+0x254>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	@ (800285c <HAL_GPIO_Init+0x258>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x21a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_GPIO_Init+0x25c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x216>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a18      	ldr	r2, [pc, #96]	@ (8002864 <HAL_GPIO_Init+0x260>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x212>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <HAL_GPIO_Init+0x264>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x20e>
 800280e:	2309      	movs	r3, #9
 8002810:	e02d      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002812:	230a      	movs	r3, #10
 8002814:	e02b      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002816:	2308      	movs	r3, #8
 8002818:	e029      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800281a:	2307      	movs	r3, #7
 800281c:	e027      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800281e:	2306      	movs	r3, #6
 8002820:	e025      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002822:	2305      	movs	r3, #5
 8002824:	e023      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002826:	2304      	movs	r3, #4
 8002828:	e021      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800282a:	2303      	movs	r3, #3
 800282c:	e01f      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800282e:	2302      	movs	r3, #2
 8002830:	e01d      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002832:	2301      	movs	r3, #1
 8002834:	e01b      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002836:	bf00      	nop
 8002838:	58000080 	.word	0x58000080
 800283c:	58024400 	.word	0x58024400
 8002840:	58000400 	.word	0x58000400
 8002844:	58020000 	.word	0x58020000
 8002848:	58020400 	.word	0x58020400
 800284c:	58020800 	.word	0x58020800
 8002850:	58020c00 	.word	0x58020c00
 8002854:	58021000 	.word	0x58021000
 8002858:	58021400 	.word	0x58021400
 800285c:	58021800 	.word	0x58021800
 8002860:	58021c00 	.word	0x58021c00
 8002864:	58022000 	.word	0x58022000
 8002868:	58022400 	.word	0x58022400
 800286c:	2300      	movs	r3, #0
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	f002 0203 	and.w	r2, r2, #3
 8002874:	0092      	lsls	r2, r2, #2
 8002876:	4093      	lsls	r3, r2
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287e:	4938      	ldr	r1, [pc, #224]	@ (8002960 <HAL_GPIO_Init+0x35c>)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f ae63 	bne.w	8002618 <HAL_GPIO_Init+0x14>
  }
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	3724      	adds	r7, #36	@ 0x24
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	58000400 	.word	0x58000400

08002964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002980:	e003      	b.n	800298a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	619a      	str	r2, [r3, #24]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	041a      	lsls	r2, r3, #16
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	400b      	ands	r3, r1
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fbc5 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a08:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d00a      	beq.n	8002a2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d001      	beq.n	8002a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e01f      	b.n	8002a66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e01d      	b.n	8002a66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a2a:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	490f      	ldr	r1, [pc, #60]	@ (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a3a:	f7ff f975 	bl	8001d28 <HAL_GetTick>
 8002a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a40:	e009      	b.n	8002a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a42:	f7ff f971 	bl	8001d28 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a50:	d901      	bls.n	8002a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e007      	b.n	8002a66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d1ee      	bne.n	8002a42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	58024800 	.word	0x58024800

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	@ 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f000 bc48 	b.w	8003318 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8088 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a96:	4b99      	ldr	r3, [pc, #612]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aa0:	4b96      	ldr	r3, [pc, #600]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d007      	beq.n	8002abc <HAL_RCC_OscConfig+0x48>
 8002aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aae:	2b18      	cmp	r3, #24
 8002ab0:	d111      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62>
 8002ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4b8f      	ldr	r3, [pc, #572]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d06d      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x130>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d169      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f000 bc21 	b.w	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x7a>
 8002ae0:	4b86      	ldr	r3, [pc, #536]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a85      	ldr	r2, [pc, #532]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0xd8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x9c>
 8002af6:	4b81      	ldr	r3, [pc, #516]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a80      	ldr	r2, [pc, #512]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b7e      	ldr	r3, [pc, #504]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7d      	ldr	r2, [pc, #500]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xd8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0xc0>
 8002b1a:	4b78      	ldr	r3, [pc, #480]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a77      	ldr	r2, [pc, #476]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b75      	ldr	r3, [pc, #468]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a74      	ldr	r2, [pc, #464]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xd8>
 8002b34:	4b71      	ldr	r3, [pc, #452]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a70      	ldr	r2, [pc, #448]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b6e      	ldr	r3, [pc, #440]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6d      	ldr	r2, [pc, #436]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7ff f8e8 	bl	8001d28 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7ff f8e4 	bl	8001d28 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	@ 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e3d4      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe8>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f8d4 	bl	8001d28 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7ff f8d0 	bl	8001d28 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e3c0      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b96:	4b59      	ldr	r3, [pc, #356]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x110>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80ca 	beq.w	8002d48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb4:	4b51      	ldr	r3, [pc, #324]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_RCC_OscConfig+0x166>
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	2b18      	cmp	r3, #24
 8002bce:	d156      	bne.n	8002c7e <HAL_RCC_OscConfig+0x20a>
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d151      	bne.n	8002c7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bda:	4b48      	ldr	r3, [pc, #288]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x17e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e392      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bf2:	4b42      	ldr	r3, [pc, #264]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 0219 	bic.w	r2, r3, #25
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	493f      	ldr	r1, [pc, #252]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7ff f890 	bl	8001d28 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7ff f88c 	bl	8001d28 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e37c      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c1e:	4b37      	ldr	r3, [pc, #220]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	f7ff f8ad 	bl	8001d88 <HAL_GetREVID>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d817      	bhi.n	8002c68 <HAL_RCC_OscConfig+0x1f4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b40      	cmp	r3, #64	@ 0x40
 8002c3e:	d108      	bne.n	8002c52 <HAL_RCC_OscConfig+0x1de>
 8002c40:	4b2e      	ldr	r3, [pc, #184]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c48:	4a2c      	ldr	r2, [pc, #176]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c50:	e07a      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	4926      	ldr	r1, [pc, #152]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c66:	e06f      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b24      	ldr	r3, [pc, #144]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4921      	ldr	r1, [pc, #132]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	e064      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d047      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c86:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0219 	bic.w	r2, r3, #25
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	491a      	ldr	r1, [pc, #104]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff f846 	bl	8001d28 <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7ff f842 	bl	8001d28 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e332      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	f7ff f863 	bl	8001d88 <HAL_GetREVID>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d819      	bhi.n	8002d00 <HAL_RCC_OscConfig+0x28c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b40      	cmp	r3, #64	@ 0x40
 8002cd2:	d108      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x272>
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cdc:	4a07      	ldr	r2, [pc, #28]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce2:	6053      	str	r3, [r2, #4]
 8002ce4:	e030      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	031b      	lsls	r3, r3, #12
 8002cf4:	4901      	ldr	r1, [pc, #4]	@ (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
 8002cfa:	e025      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	4b9a      	ldr	r3, [pc, #616]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	4997      	ldr	r1, [pc, #604]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
 8002d14:	e018      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b95      	ldr	r3, [pc, #596]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a94      	ldr	r2, [pc, #592]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7ff f801 	bl	8001d28 <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fffd 	bl	8001d28 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e2ed      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d3c:	4b8b      	ldr	r3, [pc, #556]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a9 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b85      	ldr	r3, [pc, #532]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d60:	4b82      	ldr	r3, [pc, #520]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d007      	beq.n	8002d7c <HAL_RCC_OscConfig+0x308>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b18      	cmp	r3, #24
 8002d70:	d13a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x374>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d135      	bne.n	8002de8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_OscConfig+0x320>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b80      	cmp	r3, #128	@ 0x80
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e2c1      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d94:	f7fe fff8 	bl	8001d88 <HAL_GetREVID>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d817      	bhi.n	8002dd2 <HAL_RCC_OscConfig+0x35e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d108      	bne.n	8002dbc <HAL_RCC_OscConfig+0x348>
 8002daa:	4b70      	ldr	r3, [pc, #448]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002db2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002db8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dba:	e075      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	069b      	lsls	r3, r3, #26
 8002dca:	4968      	ldr	r1, [pc, #416]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd0:	e06a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd2:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	4962      	ldr	r1, [pc, #392]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002de6:	e05f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d042      	beq.n	8002e76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002df0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe ff94 	bl	8001d28 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e04:	f7fe ff90 	bl	8001d28 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e280      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e16:	4b55      	ldr	r3, [pc, #340]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e22:	f7fe ffb1 	bl	8001d88 <HAL_GetREVID>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d817      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x3ec>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d108      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3d6>
 8002e38:	4b4c      	ldr	r3, [pc, #304]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e40:	4a4a      	ldr	r2, [pc, #296]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e46:	6053      	str	r3, [r2, #4]
 8002e48:	e02e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
 8002e4a:	4b48      	ldr	r3, [pc, #288]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	4944      	ldr	r1, [pc, #272]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 8002e5e:	e023      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
 8002e60:	4b42      	ldr	r3, [pc, #264]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	493f      	ldr	r1, [pc, #252]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60cb      	str	r3, [r1, #12]
 8002e74:	e018      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e76:	4b3d      	ldr	r3, [pc, #244]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7fe ff51 	bl	8001d28 <HAL_GetTick>
 8002e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e8a:	f7fe ff4d 	bl	8001d28 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e23d      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e9c:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d036      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d019      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe ff2e 	bl	8001d28 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe ff2a 	bl	8001d28 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e21a      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ee2:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x45c>
 8002eee:	e018      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe ff14 	bl	8001d28 <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe ff10 	bl	8001d28 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e200      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d039      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f42:	f7fe fef1 	bl	8001d28 <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f4a:	f7fe feed 	bl	8001d28 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1dd      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x4d6>
 8002f68:	e01b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
 8002f6a:	bf00      	nop
 8002f6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f70:	4b9b      	ldr	r3, [pc, #620]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a9a      	ldr	r2, [pc, #616]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002f76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fed4 	bl	8001d28 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f84:	f7fe fed0 	bl	8001d28 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1c0      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f96:	4b92      	ldr	r3, [pc, #584]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8081 	beq.w	80030b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fb0:	4b8c      	ldr	r3, [pc, #560]	@ (80031e4 <HAL_RCC_OscConfig+0x770>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a8b      	ldr	r2, [pc, #556]	@ (80031e4 <HAL_RCC_OscConfig+0x770>)
 8002fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe feb4 	bl	8001d28 <HAL_GetTick>
 8002fc0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc4:	f7fe feb0 	bl	8001d28 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	@ 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1a0      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd6:	4b83      	ldr	r3, [pc, #524]	@ (80031e4 <HAL_RCC_OscConfig+0x770>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x584>
 8002fea:	4b7d      	ldr	r3, [pc, #500]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fee:	4a7c      	ldr	r2, [pc, #496]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff6:	e02d      	b.n	8003054 <HAL_RCC_OscConfig+0x5e0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x5a6>
 8003000:	4b77      	ldr	r3, [pc, #476]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a76      	ldr	r2, [pc, #472]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
 800300c:	4b74      	ldr	r3, [pc, #464]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	4a73      	ldr	r2, [pc, #460]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6713      	str	r3, [r2, #112]	@ 0x70
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x5e0>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x5c8>
 8003022:	4b6f      	ldr	r3, [pc, #444]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	4a6e      	ldr	r2, [pc, #440]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	@ 0x70
 800302e:	4b6c      	ldr	r3, [pc, #432]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	4a6b      	ldr	r2, [pc, #428]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6713      	str	r3, [r2, #112]	@ 0x70
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x5e0>
 800303c:	4b68      	ldr	r3, [pc, #416]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a67      	ldr	r2, [pc, #412]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	4b65      	ldr	r3, [pc, #404]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304c:	4a64      	ldr	r2, [pc, #400]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe fe64 	bl	8001d28 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe fe60 	bl	8001d28 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e14e      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800307a:	4b59      	ldr	r3, [pc, #356]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCC_OscConfig+0x5f0>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fe4e 	bl	8001d28 <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fe4a 	bl	8001d28 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e138      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030a6:	4b4e      	ldr	r3, [pc, #312]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ee      	bne.n	8003090 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 812d 	beq.w	8003316 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030bc:	4b48      	ldr	r3, [pc, #288]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030c4:	2b18      	cmp	r3, #24
 80030c6:	f000 80bd 	beq.w	8003244 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	f040 809e 	bne.w	8003210 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b42      	ldr	r3, [pc, #264]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a41      	ldr	r2, [pc, #260]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fe22 	bl	8001d28 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fe1e 	bl	8001d28 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e10e      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030fa:	4b39      	ldr	r3, [pc, #228]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003106:	4b36      	ldr	r3, [pc, #216]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800310a:	4b37      	ldr	r3, [pc, #220]	@ (80031e8 <HAL_RCC_OscConfig+0x774>)
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	430a      	orrs	r2, r1
 800311a:	4931      	ldr	r1, [pc, #196]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800311c:	4313      	orrs	r3, r2
 800311e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	3b01      	subs	r3, #1
 8003126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312e:	3b01      	subs	r3, #1
 8003130:	025b      	lsls	r3, r3, #9
 8003132:	b29b      	uxth	r3, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313a:	3b01      	subs	r3, #1
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003148:	3b01      	subs	r3, #1
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003150:	4923      	ldr	r1, [pc, #140]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003156:	4b22      	ldr	r3, [pc, #136]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	4a21      	ldr	r2, [pc, #132]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003162:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003166:	4b21      	ldr	r3, [pc, #132]	@ (80031ec <HAL_RCC_OscConfig+0x778>)
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800316e:	00d2      	lsls	r2, r2, #3
 8003170:	491b      	ldr	r1, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003176:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	f023 020c 	bic.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	4917      	ldr	r1, [pc, #92]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003188:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	f023 0202 	bic.w	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003194:	4912      	ldr	r1, [pc, #72]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003196:	4313      	orrs	r3, r2
 8003198:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800319a:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	4a10      	ldr	r2, [pc, #64]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a6:	4b0e      	ldr	r3, [pc, #56]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	4a0d      	ldr	r2, [pc, #52]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031b2:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b6:	4a0a      	ldr	r2, [pc, #40]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031be:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	4a07      	ldr	r2, [pc, #28]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ca:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a04      	ldr	r2, [pc, #16]	@ (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe fda7 	bl	8001d28 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031dc:	e011      	b.n	8003202 <HAL_RCC_OscConfig+0x78e>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58024800 	.word	0x58024800
 80031e8:	fffffc0c 	.word	0xfffffc0c
 80031ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fd9a 	bl	8001d28 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e08a      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003202:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x77c>
 800320e:	e082      	b.n	8003316 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003210:	4b43      	ldr	r3, [pc, #268]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a42      	ldr	r2, [pc, #264]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fd84 	bl	8001d28 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fd80 	bl	8001d28 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e070      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003236:	4b3a      	ldr	r3, [pc, #232]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x7b0>
 8003242:	e068      	b.n	8003316 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003244:	4b36      	ldr	r3, [pc, #216]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800324a:	4b35      	ldr	r3, [pc, #212]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	2b01      	cmp	r3, #1
 8003256:	d031      	beq.n	80032bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0203 	and.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d12a      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d122      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d11a      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0a5b      	lsrs	r3, r3, #9
 800328a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003292:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d111      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d108      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	0e1b      	lsrs	r3, r3, #24
 80032ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e02b      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032c0:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d01f      	beq.n	8003316 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032d6:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	4a11      	ldr	r2, [pc, #68]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e2:	f7fe fd21 	bl	8001d28 <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032e8:	bf00      	nop
 80032ea:	f7fe fd1d 	bl	8001d28 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d0f9      	beq.n	80032ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_RCC_OscConfig+0x8b0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003302:	00d2      	lsls	r2, r2, #3
 8003304:	4906      	ldr	r1, [pc, #24]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003306:	4313      	orrs	r3, r2
 8003308:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3730      	adds	r7, #48	@ 0x30
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	58024400 	.word	0x58024400
 8003324:	ffff0007 	.word	0xffff0007

08003328 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e19c      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b8a      	ldr	r3, [pc, #552]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b87      	ldr	r3, [pc, #540]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	4985      	ldr	r1, [pc, #532]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b83      	ldr	r3, [pc, #524]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e184      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	4b7b      	ldr	r3, [pc, #492]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003384:	429a      	cmp	r2, r3
 8003386:	d908      	bls.n	800339a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003388:	4b78      	ldr	r3, [pc, #480]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	4975      	ldr	r1, [pc, #468]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003396:	4313      	orrs	r3, r2
 8003398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	4b70      	ldr	r3, [pc, #448]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d908      	bls.n	80033c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033b6:	4b6d      	ldr	r3, [pc, #436]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	496a      	ldr	r1, [pc, #424]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699a      	ldr	r2, [r3, #24]
 80033d8:	4b64      	ldr	r3, [pc, #400]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d908      	bls.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033e4:	4b61      	ldr	r3, [pc, #388]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	495e      	ldr	r1, [pc, #376]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d010      	beq.n	8003424 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	4b59      	ldr	r3, [pc, #356]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800340e:	429a      	cmp	r2, r3
 8003410:	d908      	bls.n	8003424 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003412:	4b56      	ldr	r3, [pc, #344]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4953      	ldr	r1, [pc, #332]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003420:	4313      	orrs	r3, r2
 8003422:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	4b4d      	ldr	r3, [pc, #308]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	429a      	cmp	r2, r3
 800343e:	d908      	bls.n	8003452 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b4a      	ldr	r3, [pc, #296]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f023 020f 	bic.w	r2, r3, #15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4947      	ldr	r1, [pc, #284]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800344e:	4313      	orrs	r3, r2
 8003450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d055      	beq.n	800350a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800345e:	4b43      	ldr	r3, [pc, #268]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4940      	ldr	r1, [pc, #256]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800346c:	4313      	orrs	r3, r2
 800346e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d107      	bne.n	8003488 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003478:	4b3c      	ldr	r3, [pc, #240]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d121      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0f6      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003490:	4b36      	ldr	r3, [pc, #216]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d115      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0ea      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a8:	4b30      	ldr	r3, [pc, #192]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0de      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b8:	4b2c      	ldr	r3, [pc, #176]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0d6      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c8:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f023 0207 	bic.w	r2, r3, #7
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4925      	ldr	r1, [pc, #148]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034da:	f7fe fc25 	bl	8001d28 <HAL_GetTick>
 80034de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e2:	f7fe fc21 	bl	8001d28 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0be      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f8:	4b1c      	ldr	r3, [pc, #112]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	429a      	cmp	r2, r3
 8003508:	d1eb      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4b14      	ldr	r3, [pc, #80]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	429a      	cmp	r2, r3
 8003524:	d208      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003526:	4b11      	ldr	r3, [pc, #68]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f023 020f 	bic.w	r2, r3, #15
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	490e      	ldr	r1, [pc, #56]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003534:	4313      	orrs	r3, r2
 8003536:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d214      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 020f 	bic.w	r2, r3, #15
 800354e:	4906      	ldr	r1, [pc, #24]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e086      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
 8003568:	52002000 	.word	0x52002000
 800356c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	4b3f      	ldr	r3, [pc, #252]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003588:	429a      	cmp	r2, r3
 800358a:	d208      	bcs.n	800359e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800358c:	4b3c      	ldr	r3, [pc, #240]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	4939      	ldr	r1, [pc, #228]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 800359a:	4313      	orrs	r3, r2
 800359c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	4b34      	ldr	r3, [pc, #208]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d208      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035ba:	4b31      	ldr	r3, [pc, #196]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	492e      	ldr	r1, [pc, #184]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d010      	beq.n	80035fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	4b28      	ldr	r3, [pc, #160]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d208      	bcs.n	80035fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035e8:	4b25      	ldr	r3, [pc, #148]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4922      	ldr	r1, [pc, #136]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d010      	beq.n	8003628 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003612:	429a      	cmp	r2, r3
 8003614:	d208      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003616:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	4917      	ldr	r1, [pc, #92]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003624:	4313      	orrs	r3, r2
 8003626:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003628:	f000 f834 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	4912      	ldr	r1, [pc, #72]	@ (8003684 <HAL_RCC_ClockConfig+0x35c>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003646:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <HAL_RCC_ClockConfig+0x35c>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <HAL_RCC_ClockConfig+0x360>)
 800365e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003660:	4a0a      	ldr	r2, [pc, #40]	@ (800368c <HAL_RCC_ClockConfig+0x364>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003666:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <HAL_RCC_ClockConfig+0x368>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fb12 	bl	8001c94 <HAL_InitTick>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
 8003684:	08009e0c 	.word	0x08009e0c
 8003688:	24000004 	.word	0x24000004
 800368c:	24000000 	.word	0x24000000
 8003690:	24000024 	.word	0x24000024

08003694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369a:	4bb3      	ldr	r3, [pc, #716]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036a2:	2b18      	cmp	r3, #24
 80036a4:	f200 8155 	bhi.w	8003952 <HAL_RCC_GetSysClockFreq+0x2be>
 80036a8:	a201      	add	r2, pc, #4	@ (adr r2, 80036b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	08003715 	.word	0x08003715
 80036b4:	08003953 	.word	0x08003953
 80036b8:	08003953 	.word	0x08003953
 80036bc:	08003953 	.word	0x08003953
 80036c0:	08003953 	.word	0x08003953
 80036c4:	08003953 	.word	0x08003953
 80036c8:	08003953 	.word	0x08003953
 80036cc:	08003953 	.word	0x08003953
 80036d0:	0800373b 	.word	0x0800373b
 80036d4:	08003953 	.word	0x08003953
 80036d8:	08003953 	.word	0x08003953
 80036dc:	08003953 	.word	0x08003953
 80036e0:	08003953 	.word	0x08003953
 80036e4:	08003953 	.word	0x08003953
 80036e8:	08003953 	.word	0x08003953
 80036ec:	08003953 	.word	0x08003953
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003953 	.word	0x08003953
 80036f8:	08003953 	.word	0x08003953
 80036fc:	08003953 	.word	0x08003953
 8003700:	08003953 	.word	0x08003953
 8003704:	08003953 	.word	0x08003953
 8003708:	08003953 	.word	0x08003953
 800370c:	08003953 	.word	0x08003953
 8003710:	08003747 	.word	0x08003747
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003714:	4b94      	ldr	r3, [pc, #592]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003720:	4b91      	ldr	r3, [pc, #580]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	4a90      	ldr	r2, [pc, #576]	@ (800396c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
 8003730:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003732:	e111      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003734:	4b8d      	ldr	r3, [pc, #564]	@ (800396c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003736:	61bb      	str	r3, [r7, #24]
      break;
 8003738:	e10e      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800373a:	4b8d      	ldr	r3, [pc, #564]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800373c:	61bb      	str	r3, [r7, #24]
      break;
 800373e:	e10b      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003740:	4b8c      	ldr	r3, [pc, #560]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003742:	61bb      	str	r3, [r7, #24]
      break;
 8003744:	e108      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003746:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003750:	4b85      	ldr	r3, [pc, #532]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800375a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800375c:	4b82      	ldr	r3, [pc, #520]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003766:	4b80      	ldr	r3, [pc, #512]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80e1 	beq.w	800394c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b02      	cmp	r3, #2
 800378e:	f000 8083 	beq.w	8003898 <HAL_RCC_GetSysClockFreq+0x204>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b02      	cmp	r3, #2
 8003796:	f200 80a1 	bhi.w	80038dc <HAL_RCC_GetSysClockFreq+0x248>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x114>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d056      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037a6:	e099      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	08db      	lsrs	r3, r3, #3
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	4a6b      	ldr	r2, [pc, #428]	@ (800396c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
 80037c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b62      	ldr	r3, [pc, #392]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800380e:	e087      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800397c <HAL_RCC_GetSysClockFreq+0x2e8>
 800381e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003822:	4b51      	ldr	r3, [pc, #324]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003832:	ed97 6a02 	vldr	s12, [r7, #8]
 8003836:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800383a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003852:	e065      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003980 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003866:	4b40      	ldr	r3, [pc, #256]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003876:	ed97 6a02 	vldr	s12, [r7, #8]
 800387a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800387e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800388a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003896:	e043      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003984 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80038be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038da:	e021      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003980 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003902:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800391e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	0a5b      	lsrs	r3, r3, #9
 8003926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800392a:	3301      	adds	r3, #1
 800392c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	ee07 3a90 	vmov	s15, r3
 8003934:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003938:	edd7 6a07 	vldr	s13, [r7, #28]
 800393c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003944:	ee17 3a90 	vmov	r3, s15
 8003948:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800394a:	e005      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
      break;
 8003950:	e002      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003952:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003954:	61bb      	str	r3, [r7, #24]
      break;
 8003956:	bf00      	nop
  }

  return sysclockfreq;
 8003958:	69bb      	ldr	r3, [r7, #24]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3724      	adds	r7, #36	@ 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	58024400 	.word	0x58024400
 800396c:	03d09000 	.word	0x03d09000
 8003970:	003d0900 	.word	0x003d0900
 8003974:	017d7840 	.word	0x017d7840
 8003978:	46000000 	.word	0x46000000
 800397c:	4c742400 	.word	0x4c742400
 8003980:	4a742400 	.word	0x4a742400
 8003984:	4bbebc20 	.word	0x4bbebc20

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800398e:	f7ff fe81 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490f      	ldr	r1, [pc, #60]	@ (80039dc <HAL_RCC_GetHCLKFreq+0x54>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <HAL_RCC_GetHCLKFreq+0x54>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a07      	ldr	r2, [pc, #28]	@ (80039e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80039c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039c6:	4a07      	ldr	r2, [pc, #28]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	58024400 	.word	0x58024400
 80039dc:	08009e0c 	.word	0x08009e0c
 80039e0:	24000004 	.word	0x24000004
 80039e4:	24000000 	.word	0x24000000

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039ec:	f7ff ffcc 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4904      	ldr	r1, [pc, #16]	@ (8003a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	08009e0c 	.word	0x08009e0c

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a18:	f7ff ffb6 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4904      	ldr	r1, [pc, #16]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	08009e0c 	.word	0x08009e0c

08003a40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	b0ca      	sub	sp, #296	@ 0x128
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a64:	2500      	movs	r5, #0
 8003a66:	ea54 0305 	orrs.w	r3, r4, r5
 8003a6a:	d049      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a76:	d02f      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a7c:	d828      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a82:	d01a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a88:	d822      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a92:	d007      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a96:	4bb8      	ldr	r3, [pc, #736]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9a:	4ab7      	ldr	r2, [pc, #732]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003aa2:	e01a      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 fc8f 	bl	80053d0 <RCCEx_PLL2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ab8:	e00f      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	3328      	adds	r3, #40	@ 0x28
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fd36 	bl	8005534 <RCCEx_PLL3_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ace:	e004      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ae2:	4ba5      	ldr	r3, [pc, #660]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af0:	4aa1      	ldr	r2, [pc, #644]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b0c:	f04f 0900 	mov.w	r9, #0
 8003b10:	ea58 0309 	orrs.w	r3, r8, r9
 8003b14:	d047      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d82a      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b20:	a201      	add	r2, pc, #4	@ (adr r2, 8003b28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003b4b 	.word	0x08003b4b
 8003b30:	08003b61 	.word	0x08003b61
 8003b34:	08003b7f 	.word	0x08003b7f
 8003b38:	08003b7f 	.word	0x08003b7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	4a8d      	ldr	r2, [pc, #564]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b48:	e01a      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	3308      	adds	r3, #8
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fc3c 	bl	80053d0 <RCCEx_PLL2_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b5e:	e00f      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	3328      	adds	r3, #40	@ 0x28
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fce3 	bl	8005534 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b74:	e004      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b88:	4b7b      	ldr	r3, [pc, #492]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8c:	f023 0107 	bic.w	r1, r3, #7
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	4a78      	ldr	r2, [pc, #480]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003bb2:	f04f 0b00 	mov.w	fp, #0
 8003bb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8003bba:	d04c      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc6:	d030      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bcc:	d829      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bd0:	d02d      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bd4:	d825      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bd6:	2b80      	cmp	r3, #128	@ 0x80
 8003bd8:	d018      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bda:	2b80      	cmp	r3, #128	@ 0x80
 8003bdc:	d821      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d007      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003be6:	e01c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be8:	4b63      	ldr	r3, [pc, #396]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	4a62      	ldr	r2, [pc, #392]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 fbe6 	bl	80053d0 <RCCEx_PLL2_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c0a:	e011      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	3328      	adds	r3, #40	@ 0x28
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 fc8d 	bl	8005534 <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c28:	e002      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c38:	4b4f      	ldr	r3, [pc, #316]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c46:	4a4c      	ldr	r2, [pc, #304]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c62:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c6c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d053      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c82:	d035      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c88:	d82e      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c8e:	d031      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c94:	d828      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c9a:	d01a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ca0:	d822      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003ca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003caa:	d007      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cae:	4b32      	ldr	r3, [pc, #200]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	4a31      	ldr	r2, [pc, #196]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cba:	e01c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fb83 	bl	80053d0 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	3328      	adds	r3, #40	@ 0x28
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 fc2a 	bl	8005534 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e006      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d02:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d14:	e003      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	d056      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d4a:	d038      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d50:	d831      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d56:	d034      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d5c:	d82b      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d62:	d01d      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d68:	d825      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d74:	e01f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7c:	4ba2      	ldr	r3, [pc, #648]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	4aa1      	ldr	r2, [pc, #644]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d88:	e01c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	3308      	adds	r3, #8
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 fb1c 	bl	80053d0 <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d9e:	e011      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	3328      	adds	r3, #40	@ 0x28
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 fbc3 	bl	8005534 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db4:	e006      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10b      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ddc:	4a8a      	ldr	r2, [pc, #552]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de2:	e003      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d03a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e12:	2b30      	cmp	r3, #48	@ 0x30
 8003e14:	d01f      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e16:	2b30      	cmp	r3, #48	@ 0x30
 8003e18:	d819      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d00c      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d815      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d019      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d111      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2a:	4b77      	ldr	r3, [pc, #476]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	4a76      	ldr	r2, [pc, #472]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e36:	e011      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 fac5 	bl	80053d0 <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e54:	e002      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e64:	4b68      	ldr	r3, [pc, #416]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e72:	4a65      	ldr	r2, [pc, #404]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d051      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eac:	d035      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb2:	d82e      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003eb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eb8:	d031      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003eba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ebe:	d828      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec4:	d01a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	d822      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed4:	d007      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ed6:	e01c      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	4a4a      	ldr	r2, [pc, #296]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ee4:	e01c      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eea:	3308      	adds	r3, #8
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 fa6e 	bl	80053d0 <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003efa:	e011      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f00:	3328      	adds	r3, #40	@ 0x28
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fb15 	bl	8005534 <RCCEx_PLL3_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f18:	e002      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f28:	4b37      	ldr	r3, [pc, #220]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f36:	4a34      	ldr	r2, [pc, #208]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d056      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f70:	d033      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f76:	d82c      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f7c:	d02f      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f82:	d826      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f88:	d02b      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f8e:	d820      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f94:	d012      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f9a:	d81a      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d022      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa4:	d115      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	3308      	adds	r3, #8
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fa0e 	bl	80053d0 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fba:	e015      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	3328      	adds	r3, #40	@ 0x28
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fab5 	bl	8005534 <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e004      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ffe:	4a02      	ldr	r2, [pc, #8]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004000:	430b      	orrs	r3, r1
 8004002:	6513      	str	r3, [r2, #80]	@ 0x50
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004006:	bf00      	nop
 8004008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800402a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800402e:	460b      	mov	r3, r1
 8004030:	4313      	orrs	r3, r2
 8004032:	d055      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800403c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004040:	d033      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004046:	d82c      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404c:	d02f      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d826      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004054:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004058:	d02b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800405a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800405e:	d820      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004064:	d012      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800406a:	d81a      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d022      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004074:	d115      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	3308      	adds	r3, #8
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f001 f9a6 	bl	80053d0 <RCCEx_PLL2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800408a:	e015      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	3328      	adds	r3, #40	@ 0x28
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f001 fa4d 	bl	8005534 <RCCEx_PLL3_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040a0:	e00a      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040a8:	e006      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040aa:	bf00      	nop
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040c0:	4ba3      	ldr	r3, [pc, #652]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040d2:	430b      	orrs	r3, r1
 80040d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d6:	e003      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80040ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80040f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040fa:	460b      	mov	r3, r1
 80040fc:	4313      	orrs	r3, r2
 80040fe:	d037      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800410a:	d00e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800410c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004110:	d816      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800411a:	d111      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411c:	4b8c      	ldr	r3, [pc, #560]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	4a8b      	ldr	r2, [pc, #556]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004128:	e00f      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	3308      	adds	r3, #8
 8004130:	2101      	movs	r1, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f001 f94c 	bl	80053d0 <RCCEx_PLL2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004152:	4b7f      	ldr	r3, [pc, #508]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004156:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	4a7b      	ldr	r2, [pc, #492]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004162:	430b      	orrs	r3, r1
 8004164:	6513      	str	r3, [r2, #80]	@ 0x50
 8004166:	e003      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800417c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004186:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800418a:	460b      	mov	r3, r1
 800418c:	4313      	orrs	r3, r2
 800418e:	d039      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004196:	2b03      	cmp	r3, #3
 8004198:	d81c      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800419a:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041dd 	.word	0x080041dd
 80041a4:	080041b1 	.word	0x080041b1
 80041a8:	080041bf 	.word	0x080041bf
 80041ac:	080041dd 	.word	0x080041dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4b67      	ldr	r3, [pc, #412]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	4a66      	ldr	r2, [pc, #408]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041bc:	e00f      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	3308      	adds	r3, #8
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 f902 	bl	80053d0 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ea:	f023 0103 	bic.w	r1, r3, #3
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f4:	4a56      	ldr	r2, [pc, #344]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800421a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	f000 809f 	beq.w	8004364 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004226:	4b4b      	ldr	r3, [pc, #300]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a4a      	ldr	r2, [pc, #296]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004232:	f7fd fd79 	bl	8001d28 <HAL_GetTick>
 8004236:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423a:	e00b      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fd fd74 	bl	8001d28 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	@ 0x64
 800424a:	d903      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004252:	e005      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004254:	4b3f      	ldr	r3, [pc, #252]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ed      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004264:	2b00      	cmp	r3, #0
 8004266:	d179      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004268:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004274:	4053      	eors	r3, r2
 8004276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427a:	2b00      	cmp	r3, #0
 800427c:	d015      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427e:	4b34      	ldr	r3, [pc, #208]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004286:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800428a:	4b31      	ldr	r3, [pc, #196]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428e:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b2e      	ldr	r3, [pc, #184]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429a:	4a2d      	ldr	r2, [pc, #180]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b6:	d118      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd fd36 	bl	8001d28 <HAL_GetTick>
 80042bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c0:	e00d      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fd fd31 	bl	8001d28 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d903      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80042dc:	e005      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042de:	4b1c      	ldr	r3, [pc, #112]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0eb      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d129      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004302:	d10e      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004304:	4b12      	ldr	r3, [pc, #72]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004314:	091a      	lsrs	r2, r3, #4
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004318:	4013      	ands	r3, r2
 800431a:	4a0d      	ldr	r2, [pc, #52]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431c:	430b      	orrs	r3, r1
 800431e:	6113      	str	r3, [r2, #16]
 8004320:	e005      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004322:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800432c:	6113      	str	r3, [r2, #16]
 800432e:	4b08      	ldr	r3, [pc, #32]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004330:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433e:	4a04      	ldr	r2, [pc, #16]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6713      	str	r3, [r2, #112]	@ 0x70
 8004344:	e00e      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800434e:	e009      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004350:	58024400 	.word	0x58024400
 8004354:	58024800 	.word	0x58024800
 8004358:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f002 0301 	and.w	r3, r2, #1
 8004370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004374:	2300      	movs	r3, #0
 8004376:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800437a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800437e:	460b      	mov	r3, r1
 8004380:	4313      	orrs	r3, r2
 8004382:	f000 8089 	beq.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438c:	2b28      	cmp	r3, #40	@ 0x28
 800438e:	d86b      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004390:	a201      	add	r2, pc, #4	@ (adr r2, 8004398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	08004471 	.word	0x08004471
 800439c:	08004469 	.word	0x08004469
 80043a0:	08004469 	.word	0x08004469
 80043a4:	08004469 	.word	0x08004469
 80043a8:	08004469 	.word	0x08004469
 80043ac:	08004469 	.word	0x08004469
 80043b0:	08004469 	.word	0x08004469
 80043b4:	08004469 	.word	0x08004469
 80043b8:	0800443d 	.word	0x0800443d
 80043bc:	08004469 	.word	0x08004469
 80043c0:	08004469 	.word	0x08004469
 80043c4:	08004469 	.word	0x08004469
 80043c8:	08004469 	.word	0x08004469
 80043cc:	08004469 	.word	0x08004469
 80043d0:	08004469 	.word	0x08004469
 80043d4:	08004469 	.word	0x08004469
 80043d8:	08004453 	.word	0x08004453
 80043dc:	08004469 	.word	0x08004469
 80043e0:	08004469 	.word	0x08004469
 80043e4:	08004469 	.word	0x08004469
 80043e8:	08004469 	.word	0x08004469
 80043ec:	08004469 	.word	0x08004469
 80043f0:	08004469 	.word	0x08004469
 80043f4:	08004469 	.word	0x08004469
 80043f8:	08004471 	.word	0x08004471
 80043fc:	08004469 	.word	0x08004469
 8004400:	08004469 	.word	0x08004469
 8004404:	08004469 	.word	0x08004469
 8004408:	08004469 	.word	0x08004469
 800440c:	08004469 	.word	0x08004469
 8004410:	08004469 	.word	0x08004469
 8004414:	08004469 	.word	0x08004469
 8004418:	08004471 	.word	0x08004471
 800441c:	08004469 	.word	0x08004469
 8004420:	08004469 	.word	0x08004469
 8004424:	08004469 	.word	0x08004469
 8004428:	08004469 	.word	0x08004469
 800442c:	08004469 	.word	0x08004469
 8004430:	08004469 	.word	0x08004469
 8004434:	08004469 	.word	0x08004469
 8004438:	08004471 	.word	0x08004471
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	3308      	adds	r3, #8
 8004442:	2101      	movs	r1, #1
 8004444:	4618      	mov	r0, r3
 8004446:	f000 ffc3 	bl	80053d0 <RCCEx_PLL2_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004450:	e00f      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3328      	adds	r3, #40	@ 0x28
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f86a 	bl	8005534 <RCCEx_PLL3_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800447a:	4bbf      	ldr	r3, [pc, #764]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004488:	4abb      	ldr	r2, [pc, #748]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800448a:	430b      	orrs	r3, r1
 800448c:	6553      	str	r3, [r2, #84]	@ 0x54
 800448e:	e003      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f002 0302 	and.w	r3, r2, #2
 80044a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d041      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d824      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80044c2:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	08004515 	.word	0x08004515
 80044cc:	080044e1 	.word	0x080044e1
 80044d0:	080044f7 	.word	0x080044f7
 80044d4:	08004515 	.word	0x08004515
 80044d8:	08004515 	.word	0x08004515
 80044dc:	08004515 	.word	0x08004515
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	3308      	adds	r3, #8
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 ff71 	bl	80053d0 <RCCEx_PLL2_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044f4:	e00f      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	3328      	adds	r3, #40	@ 0x28
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 f818 	bl	8005534 <RCCEx_PLL3_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800450a:	e004      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800451e:	4b96      	ldr	r3, [pc, #600]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	f023 0107 	bic.w	r1, r3, #7
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800452c:	4a92      	ldr	r2, [pc, #584]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6553      	str	r3, [r2, #84]	@ 0x54
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004538:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f002 0304 	and.w	r3, r2, #4
 8004548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004552:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d044      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004564:	2b05      	cmp	r3, #5
 8004566:	d825      	bhi.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004568:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045bd 	.word	0x080045bd
 8004574:	08004589 	.word	0x08004589
 8004578:	0800459f 	.word	0x0800459f
 800457c:	080045bd 	.word	0x080045bd
 8004580:	080045bd 	.word	0x080045bd
 8004584:	080045bd 	.word	0x080045bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	3308      	adds	r3, #8
 800458e:	2101      	movs	r1, #1
 8004590:	4618      	mov	r0, r3
 8004592:	f000 ff1d 	bl	80053d0 <RCCEx_PLL2_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800459c:	e00f      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	3328      	adds	r3, #40	@ 0x28
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 ffc4 	bl	8005534 <RCCEx_PLL3_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045b2:	e004      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80045bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ca:	f023 0107 	bic.w	r1, r3, #7
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d6:	4a68      	ldr	r2, [pc, #416]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d8:	430b      	orrs	r3, r1
 80045da:	6593      	str	r3, [r2, #88]	@ 0x58
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f002 0320 	and.w	r3, r2, #32
 80045f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d055      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004612:	d033      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004618:	d82c      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461e:	d02f      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004624:	d826      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800462a:	d02b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800462c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004630:	d820      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004636:	d012      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800463c:	d81a      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d022      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004646:	d115      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	3308      	adds	r3, #8
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f000 febd 	bl	80053d0 <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800465c:	e015      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	3328      	adds	r3, #40	@ 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 ff64 	bl	8005534 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004672:	e00a      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800467a:	e006      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800467c:	bf00      	nop
 800467e:	e004      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004680:	bf00      	nop
 8004682:	e002      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004692:	4b39      	ldr	r3, [pc, #228]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004696:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a2:	4a35      	ldr	r2, [pc, #212]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d058      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046de:	d033      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80046e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046e4:	d82c      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ea:	d02f      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f0:	d826      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046f6:	d02b      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80046f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046fc:	d820      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004702:	d012      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004708:	d81a      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d022      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004712:	d115      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	3308      	adds	r3, #8
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fe57 	bl	80053d0 <RCCEx_PLL2_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004728:	e015      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472e:	3328      	adds	r3, #40	@ 0x28
 8004730:	2102      	movs	r1, #2
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fefe 	bl	8005534 <RCCEx_PLL3_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800473e:	e00a      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004746:	e006      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004748:	bf00      	nop
 800474a:	e004      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800474c:	bf00      	nop
 800474e:	e002      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10e      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475e:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004762:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800476e:	4a02      	ldr	r2, [pc, #8]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004770:	430b      	orrs	r3, r1
 8004772:	6593      	str	r3, [r2, #88]	@ 0x58
 8004774:	e006      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004776:	bf00      	nop
 8004778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800479a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d055      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047b0:	d033      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80047b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047b6:	d82c      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047bc:	d02f      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c2:	d826      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047c8:	d02b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80047ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047ce:	d820      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047d4:	d012      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80047d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047da:	d81a      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d022      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e4:	d115      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	3308      	adds	r3, #8
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fdee 	bl	80053d0 <RCCEx_PLL2_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047fa:	e015      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	3328      	adds	r3, #40	@ 0x28
 8004802:	2102      	movs	r1, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fe95 	bl	8005534 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004810:	e00a      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800481a:	bf00      	nop
 800481c:	e004      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800481e:	bf00      	nop
 8004820:	e002      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004830:	4ba1      	ldr	r3, [pc, #644]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004840:	4a9d      	ldr	r2, [pc, #628]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004842:	430b      	orrs	r3, r1
 8004844:	6593      	str	r3, [r2, #88]	@ 0x58
 8004846:	e003      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 0308 	and.w	r3, r2, #8
 800485c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004866:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800486a:	460b      	mov	r3, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	d01e      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487c:	d10c      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004882:	3328      	adds	r3, #40	@ 0x28
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fe54 	bl	8005534 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004898:	4b87      	ldr	r3, [pc, #540]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800489a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a8:	4a83      	ldr	r2, [pc, #524]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048aa:	430b      	orrs	r3, r1
 80048ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f002 0310 	and.w	r3, r2, #16
 80048ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048be:	2300      	movs	r3, #0
 80048c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048c8:	460b      	mov	r3, r1
 80048ca:	4313      	orrs	r3, r2
 80048cc:	d01e      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048da:	d10c      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e0:	3328      	adds	r3, #40	@ 0x28
 80048e2:	2102      	movs	r1, #2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fe25 	bl	8005534 <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048f6:	4b70      	ldr	r3, [pc, #448]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004906:	4a6c      	ldr	r2, [pc, #432]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004908:	430b      	orrs	r3, r1
 800490a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800491c:	2300      	movs	r3, #0
 800491e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004922:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d03e      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004938:	d022      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800493a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800493e:	d81b      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004948:	d00b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800494a:	e015      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004950:	3308      	adds	r3, #8
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fd3b 	bl	80053d0 <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004960:	e00f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	3328      	adds	r3, #40	@ 0x28
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fde2 	bl	8005534 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800498a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800499a:	4a47      	ldr	r2, [pc, #284]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800499c:	430b      	orrs	r3, r1
 800499e:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a0:	e003      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80049b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049b8:	2300      	movs	r3, #0
 80049ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049c0:	460b      	mov	r3, r1
 80049c2:	4313      	orrs	r3, r2
 80049c4:	d03b      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049d2:	d01f      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80049d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049d8:	d818      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80049e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049e4:	d007      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80049e6:	e011      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e8:	4b33      	ldr	r3, [pc, #204]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ec:	4a32      	ldr	r2, [pc, #200]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049f4:	e00f      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	3328      	adds	r3, #40	@ 0x28
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fd98 	bl	8005534 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a0a:	e004      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a12:	e000      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a1e:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	4a22      	ldr	r2, [pc, #136]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a34:	e003      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d034      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a68:	d007      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a6a:	e011      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6c:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	4a11      	ldr	r2, [pc, #68]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a78:	e00e      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	3308      	adds	r3, #8
 8004a80:	2102      	movs	r1, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fca4 	bl	80053d0 <RCCEx_PLL2_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10d      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004aa0:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aae:	4a02      	ldr	r2, [pc, #8]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ad6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ada:	460b      	mov	r3, r1
 8004adc:	4313      	orrs	r3, r2
 8004ade:	d00c      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	3328      	adds	r3, #40	@ 0x28
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fd23 	bl	8005534 <RCCEx_PLL3_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b06:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b08:	2300      	movs	r3, #0
 8004b0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b10:	460b      	mov	r3, r1
 8004b12:	4313      	orrs	r3, r2
 8004b14:	d038      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b22:	d018      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b28:	d811      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b2e:	d014      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b34:	d80b      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b40:	4bc3      	ldr	r3, [pc, #780]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	4ac2      	ldr	r2, [pc, #776]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b4c:	e008      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b54:	e004      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b68:	4bb9      	ldr	r3, [pc, #740]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b78:	4ab5      	ldr	r2, [pc, #724]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b96:	2300      	movs	r3, #0
 8004b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ba4:	4baa      	ldr	r3, [pc, #680]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb2:	4aa7      	ldr	r2, [pc, #668]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004bc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bd4:	4b9e      	ldr	r3, [pc, #632]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004be4:	4a9a      	ldr	r2, [pc, #616]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c06:	4b92      	ldr	r3, [pc, #584]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c14:	4a8e      	ldr	r2, [pc, #568]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c16:	430b      	orrs	r3, r1
 8004c18:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c28:	2300      	movs	r3, #0
 8004c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c36:	4b86      	ldr	r3, [pc, #536]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	4a85      	ldr	r2, [pc, #532]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c40:	6113      	str	r3, [r2, #16]
 8004c42:	4b83      	ldr	r3, [pc, #524]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c44:	6919      	ldr	r1, [r3, #16]
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c4e:	4a80      	ldr	r2, [pc, #512]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c66:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c70:	4b77      	ldr	r3, [pc, #476]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c74:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	4a74      	ldr	r2, [pc, #464]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c80:	430b      	orrs	r3, r1
 8004c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cb0:	4a67      	ldr	r2, [pc, #412]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cc8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d011      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fb78 	bl	80053d0 <RCCEx_PLL2_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6239      	str	r1, [r7, #32]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	d011      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	3308      	adds	r3, #8
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fb58 	bl	80053d0 <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	2100      	movs	r1, #0
 8004d40:	61b9      	str	r1, [r7, #24]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	d011      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d56:	3308      	adds	r3, #8
 8004d58:	2102      	movs	r1, #2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fb38 	bl	80053d0 <RCCEx_PLL2_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	2100      	movs	r1, #0
 8004d80:	6139      	str	r1, [r7, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	d011      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	3328      	adds	r3, #40	@ 0x28
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fbca 	bl	8005534 <RCCEx_PLL3_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d011      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	3328      	adds	r3, #40	@ 0x28
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fbaa 	bl	8005534 <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	d011      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	3328      	adds	r3, #40	@ 0x28
 8004e18:	2102      	movs	r1, #2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fb8a 	bl	8005534 <RCCEx_PLL3_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e36:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e50:	58024400 	.word	0x58024400

08004e54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e58:	f7fe fd96 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4904      	ldr	r1, [pc, #16]	@ (8004e7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	08009e0c 	.word	0x08009e0c

08004e80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	@ 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e88:	4ba1      	ldr	r3, [pc, #644]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e92:	4b9f      	ldr	r3, [pc, #636]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	0b1b      	lsrs	r3, r3, #12
 8004e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004eaa:	4b99      	ldr	r3, [pc, #612]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eae:	08db      	lsrs	r3, r3, #3
 8004eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8111 	beq.w	80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	f000 8083 	beq.w	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f200 80a1 	bhi.w	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d056      	beq.n	8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004eea:	e099      	b.n	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eec:	4b88      	ldr	r3, [pc, #544]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02d      	beq.n	8004f54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef8:	4b85      	ldr	r3, [pc, #532]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	08db      	lsrs	r3, r3, #3
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	4a84      	ldr	r2, [pc, #528]	@ (8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b7b      	ldr	r3, [pc, #492]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f52:	e087      	b.n	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800511c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b6a      	ldr	r3, [pc, #424]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f96:	e065      	b.n	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b59      	ldr	r3, [pc, #356]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fda:	e043      	b.n	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b48      	ldr	r3, [pc, #288]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501e:	e021      	b.n	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b37      	ldr	r3, [pc, #220]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a03 	vldr	s12, [r7, #12]
 8005046:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005062:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005064:	4b2a      	ldr	r3, [pc, #168]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005068:	0a5b      	lsrs	r3, r3, #9
 800506a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005092:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b8:	ee17 2a90 	vmov	r2, s15
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050c0:	4b13      	ldr	r3, [pc, #76]	@ (8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	0e1b      	lsrs	r3, r3, #24
 80050c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050da:	edd7 6a07 	vldr	s13, [r7, #28]
 80050de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e6:	ee17 2a90 	vmov	r2, s15
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050ee:	e008      	b.n	8005102 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
}
 8005102:	bf00      	nop
 8005104:	3724      	adds	r7, #36	@ 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	03d09000 	.word	0x03d09000
 8005118:	46000000 	.word	0x46000000
 800511c:	4c742400 	.word	0x4c742400
 8005120:	4a742400 	.word	0x4a742400
 8005124:	4bbebc20 	.word	0x4bbebc20

08005128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	@ 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005130:	4ba1      	ldr	r3, [pc, #644]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800513a:	4b9f      	ldr	r3, [pc, #636]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513e:	0d1b      	lsrs	r3, r3, #20
 8005140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005144:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005146:	4b9c      	ldr	r3, [pc, #624]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005152:	4b99      	ldr	r3, [pc, #612]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005156:	08db      	lsrs	r3, r3, #3
 8005158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8111 	beq.w	8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b02      	cmp	r3, #2
 800517a:	f000 8083 	beq.w	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b02      	cmp	r3, #2
 8005182:	f200 80a1 	bhi.w	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d056      	beq.n	8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005192:	e099      	b.n	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005194:	4b88      	ldr	r3, [pc, #544]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02d      	beq.n	80051fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051a0:	4b85      	ldr	r3, [pc, #532]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	08db      	lsrs	r3, r3, #3
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	4a84      	ldr	r2, [pc, #528]	@ (80053bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
 80051b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	ee07 3a90 	vmov	s15, r3
 80051b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ca:	4b7b      	ldr	r3, [pc, #492]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051da:	ed97 6a03 	vldr	s12, [r7, #12]
 80051de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051fa:	e087      	b.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800520a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520e:	4b6a      	ldr	r3, [pc, #424]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005222:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800523e:	e065      	b.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800524e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005252:	4b59      	ldr	r3, [pc, #356]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005262:	ed97 6a03 	vldr	s12, [r7, #12]
 8005266:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800526a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005282:	e043      	b.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	4b48      	ldr	r3, [pc, #288]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052c6:	e021      	b.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	4b37      	ldr	r3, [pc, #220]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800530a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800530c:	4b2a      	ldr	r3, [pc, #168]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	0a5b      	lsrs	r3, r3, #9
 8005312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005326:	edd7 6a07 	vldr	s13, [r7, #28]
 800532a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800532e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005332:	ee17 2a90 	vmov	r2, s15
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800533a:	4b1f      	ldr	r3, [pc, #124]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005344:	ee07 3a90 	vmov	s15, r3
 8005348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005354:	edd7 6a07 	vldr	s13, [r7, #28]
 8005358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005360:	ee17 2a90 	vmov	r2, s15
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005368:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	0e1b      	lsrs	r3, r3, #24
 800536e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005382:	edd7 6a07 	vldr	s13, [r7, #28]
 8005386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538e:	ee17 2a90 	vmov	r2, s15
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005396:	e008      	b.n	80053aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	609a      	str	r2, [r3, #8]
}
 80053aa:	bf00      	nop
 80053ac:	3724      	adds	r7, #36	@ 0x24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	58024400 	.word	0x58024400
 80053bc:	03d09000 	.word	0x03d09000
 80053c0:	46000000 	.word	0x46000000
 80053c4:	4c742400 	.word	0x4c742400
 80053c8:	4a742400 	.word	0x4a742400
 80053cc:	4bbebc20 	.word	0x4bbebc20

080053d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053de:	4b53      	ldr	r3, [pc, #332]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d101      	bne.n	80053ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e099      	b.n	8005522 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80053ee:	4b4f      	ldr	r3, [pc, #316]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4e      	ldr	r2, [pc, #312]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80053f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fa:	f7fc fc95 	bl	8001d28 <HAL_GetTick>
 80053fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005400:	e008      	b.n	8005414 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005402:	f7fc fc91 	bl	8001d28 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e086      	b.n	8005522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005414:	4b45      	ldr	r3, [pc, #276]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f0      	bne.n	8005402 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005420:	4b42      	ldr	r3, [pc, #264]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	031b      	lsls	r3, r3, #12
 800542e:	493f      	ldr	r1, [pc, #252]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	628b      	str	r3, [r1, #40]	@ 0x28
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	3b01      	subs	r3, #1
 800543a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	3b01      	subs	r3, #1
 8005444:	025b      	lsls	r3, r3, #9
 8005446:	b29b      	uxth	r3, r3
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	3b01      	subs	r3, #1
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	3b01      	subs	r3, #1
 800545e:	061b      	lsls	r3, r3, #24
 8005460:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005464:	4931      	ldr	r1, [pc, #196]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005466:	4313      	orrs	r3, r2
 8005468:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800546a:	4b30      	ldr	r3, [pc, #192]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	492d      	ldr	r1, [pc, #180]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800547c:	4b2b      	ldr	r3, [pc, #172]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	f023 0220 	bic.w	r2, r3, #32
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	4928      	ldr	r1, [pc, #160]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 800548a:	4313      	orrs	r3, r2
 800548c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800548e:	4b27      	ldr	r3, [pc, #156]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	4a26      	ldr	r2, [pc, #152]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005494:	f023 0310 	bic.w	r3, r3, #16
 8005498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800549a:	4b24      	ldr	r3, [pc, #144]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 800549c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800549e:	4b24      	ldr	r3, [pc, #144]	@ (8005530 <RCCEx_PLL2_Config+0x160>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	69d2      	ldr	r2, [r2, #28]
 80054a6:	00d2      	lsls	r2, r2, #3
 80054a8:	4920      	ldr	r1, [pc, #128]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054ae:	4b1f      	ldr	r3, [pc, #124]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	4a1e      	ldr	r2, [pc, #120]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054b4:	f043 0310 	orr.w	r3, r3, #16
 80054b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054c0:	4b1a      	ldr	r3, [pc, #104]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	4a19      	ldr	r2, [pc, #100]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054cc:	e00f      	b.n	80054ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d106      	bne.n	80054e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80054d4:	4b15      	ldr	r3, [pc, #84]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	4a14      	ldr	r2, [pc, #80]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054e0:	e005      	b.n	80054ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80054e2:	4b12      	ldr	r3, [pc, #72]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	4a11      	ldr	r2, [pc, #68]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80054ee:	4b0f      	ldr	r3, [pc, #60]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a0e      	ldr	r2, [pc, #56]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 80054f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054fa:	f7fc fc15 	bl	8001d28 <HAL_GetTick>
 80054fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005500:	e008      	b.n	8005514 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005502:	f7fc fc11 	bl	8001d28 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e006      	b.n	8005522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005514:	4b05      	ldr	r3, [pc, #20]	@ (800552c <RCCEx_PLL2_Config+0x15c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	ffff0007 	.word	0xffff0007

08005534 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005542:	4b53      	ldr	r3, [pc, #332]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b03      	cmp	r3, #3
 800554c:	d101      	bne.n	8005552 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e099      	b.n	8005686 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005552:	4b4f      	ldr	r3, [pc, #316]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a4e      	ldr	r2, [pc, #312]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800555c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800555e:	f7fc fbe3 	bl	8001d28 <HAL_GetTick>
 8005562:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005564:	e008      	b.n	8005578 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005566:	f7fc fbdf 	bl	8001d28 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e086      	b.n	8005686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005578:	4b45      	ldr	r3, [pc, #276]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f0      	bne.n	8005566 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005584:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	051b      	lsls	r3, r3, #20
 8005592:	493f      	ldr	r1, [pc, #252]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005594:	4313      	orrs	r3, r2
 8005596:	628b      	str	r3, [r1, #40]	@ 0x28
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	3b01      	subs	r3, #1
 800559e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	025b      	lsls	r3, r3, #9
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	061b      	lsls	r3, r3, #24
 80055c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055c8:	4931      	ldr	r1, [pc, #196]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055ce:	4b30      	ldr	r3, [pc, #192]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	492d      	ldr	r1, [pc, #180]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80055e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	4928      	ldr	r1, [pc, #160]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80055f2:	4b27      	ldr	r3, [pc, #156]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	4a26      	ldr	r2, [pc, #152]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 80055f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055fe:	4b24      	ldr	r3, [pc, #144]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005602:	4b24      	ldr	r3, [pc, #144]	@ (8005694 <RCCEx_PLL3_Config+0x160>)
 8005604:	4013      	ands	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	69d2      	ldr	r2, [r2, #28]
 800560a:	00d2      	lsls	r2, r2, #3
 800560c:	4920      	ldr	r1, [pc, #128]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 800560e:	4313      	orrs	r3, r2
 8005610:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005612:	4b1f      	ldr	r3, [pc, #124]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	4a1e      	ldr	r2, [pc, #120]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800561c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005624:	4b1a      	ldr	r3, [pc, #104]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	4a19      	ldr	r2, [pc, #100]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 800562a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800562e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005630:	e00f      	b.n	8005652 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d106      	bne.n	8005646 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005638:	4b15      	ldr	r3, [pc, #84]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 800563e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005644:	e005      	b.n	8005652 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 800564c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005650:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005652:	4b0f      	ldr	r3, [pc, #60]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a0e      	ldr	r2, [pc, #56]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 8005658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800565c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565e:	f7fc fb63 	bl	8001d28 <HAL_GetTick>
 8005662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005664:	e008      	b.n	8005678 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005666:	f7fc fb5f 	bl	8001d28 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e006      	b.n	8005686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005678:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <RCCEx_PLL3_Config+0x15c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
 8005694:	ffff0007 	.word	0xffff0007

08005698 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e10f      	b.n	80058ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a87      	ldr	r2, [pc, #540]	@ (80058d4 <HAL_SPI_Init+0x23c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00f      	beq.n	80056da <HAL_SPI_Init+0x42>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a86      	ldr	r2, [pc, #536]	@ (80058d8 <HAL_SPI_Init+0x240>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00a      	beq.n	80056da <HAL_SPI_Init+0x42>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a84      	ldr	r2, [pc, #528]	@ (80058dc <HAL_SPI_Init+0x244>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d005      	beq.n	80056da <HAL_SPI_Init+0x42>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	2b0f      	cmp	r3, #15
 80056d4:	d901      	bls.n	80056da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e0f7      	b.n	80058ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 ff30 	bl	8006540 <SPI_GetPacketSize>
 80056e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a7b      	ldr	r2, [pc, #492]	@ (80058d4 <HAL_SPI_Init+0x23c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00c      	beq.n	8005706 <HAL_SPI_Init+0x6e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a79      	ldr	r2, [pc, #484]	@ (80058d8 <HAL_SPI_Init+0x240>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <HAL_SPI_Init+0x6e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a78      	ldr	r2, [pc, #480]	@ (80058dc <HAL_SPI_Init+0x244>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d002      	beq.n	8005706 <HAL_SPI_Init+0x6e>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b08      	cmp	r3, #8
 8005704:	d811      	bhi.n	800572a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800570a:	4a72      	ldr	r2, [pc, #456]	@ (80058d4 <HAL_SPI_Init+0x23c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d009      	beq.n	8005724 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a70      	ldr	r2, [pc, #448]	@ (80058d8 <HAL_SPI_Init+0x240>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_SPI_Init+0x8c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a6f      	ldr	r2, [pc, #444]	@ (80058dc <HAL_SPI_Init+0x244>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d104      	bne.n	800572e <HAL_SPI_Init+0x96>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b10      	cmp	r3, #16
 8005728:	d901      	bls.n	800572e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0cd      	b.n	80058ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fb fdba 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800576a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005774:	d119      	bne.n	80057aa <HAL_SPI_Init+0x112>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800577e:	d103      	bne.n	8005788 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10c      	bne.n	80057aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005798:	d107      	bne.n	80057aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00f      	beq.n	80057d6 <HAL_SPI_Init+0x13e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d90b      	bls.n	80057d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e007      	b.n	80057e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f8:	ea42 0103 	orr.w	r1, r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005846:	ea42 0103 	orr.w	r1, r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d113      	bne.n	8005886 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005870:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005884:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40013000 	.word	0x40013000
 80058d8:	40003800 	.word	0x40003800
 80058dc:	40003c00 	.word	0x40003c00

080058e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	@ 0x38
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3320      	adds	r3, #32
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3330      	adds	r3, #48	@ 0x30
 80058fc:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	b29b      	uxth	r3, r3
 8005906:	3301      	adds	r3, #1
 8005908:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800590a:	f7fc fa0d 	bl	8001d28 <HAL_GetTick>
 800590e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005910:	887b      	ldrh	r3, [r7, #2]
 8005912:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005914:	887b      	ldrh	r3, [r7, #2]
 8005916:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d001      	beq.n	8005928 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
 8005926:	e310      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_SPI_TransmitReceive+0x5a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_SPI_TransmitReceive+0x5a>
 8005934:	887b      	ldrh	r3, [r7, #2]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e305      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_SPI_TransmitReceive+0x6c>
 8005948:	2302      	movs	r3, #2
 800594a:	e2fe      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x66a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2205      	movs	r2, #5
 8005958:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	887a      	ldrh	r2, [r7, #2]
 800596e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	887a      	ldrh	r2, [r7, #2]
 8005976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	887a      	ldrh	r2, [r7, #2]
 8005984:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	887a      	ldrh	r2, [r7, #2]
 800598c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80059aa:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a70      	ldr	r2, [pc, #448]	@ (8005b74 <HAL_SPI_TransmitReceive+0x294>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_SPI_TransmitReceive+0xea>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6f      	ldr	r2, [pc, #444]	@ (8005b78 <HAL_SPI_TransmitReceive+0x298>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_SPI_TransmitReceive+0xea>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a6d      	ldr	r2, [pc, #436]	@ (8005b7c <HAL_SPI_TransmitReceive+0x29c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d102      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80059ca:	2310      	movs	r3, #16
 80059cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ce:	e001      	b.n	80059d4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80059d0:	2308      	movs	r3, #8
 80059d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	4b69      	ldr	r3, [pc, #420]	@ (8005b80 <HAL_SPI_TransmitReceive+0x2a0>)
 80059dc:	4013      	ands	r3, r2
 80059de:	8879      	ldrh	r1, [r7, #2]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a00:	d107      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b0f      	cmp	r3, #15
 8005a18:	f240 80a2 	bls.w	8005b60 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a22:	e094      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d120      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x194>
 8005a32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01d      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005a38:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a3a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d217      	bcs.n	8005a74 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a54:	1d1a      	adds	r2, r3, #4
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a72:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005a7c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d065      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d118      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a9a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005abe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ac0:	e045      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ac2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ac4:	8bfb      	ldrh	r3, [r7, #30]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d21d      	bcs.n	8005b06 <HAL_SPI_TransmitReceive+0x226>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d018      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005adc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ade:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae4:	1d1a      	adds	r2, r3, #4
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b04:	e023      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b06:	f7fc f90f 	bl	8001d28 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d803      	bhi.n	8005b1e <HAL_SPI_TransmitReceive+0x23e>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d102      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x244>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d114      	bne.n	8005b4e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fc3d 	bl	80063a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e1fd      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f af67 	bne.w	8005a24 <HAL_SPI_TransmitReceive+0x144>
 8005b56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f47f af63 	bne.w	8005a24 <HAL_SPI_TransmitReceive+0x144>
 8005b5e:	e1ce      	b.n	8005efe <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b07      	cmp	r3, #7
 8005b66:	f240 81c2 	bls.w	8005eee <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b70:	e0c9      	b.n	8005d06 <HAL_SPI_TransmitReceive+0x426>
 8005b72:	bf00      	nop
 8005b74:	40013000 	.word	0x40013000
 8005b78:	40003800 	.word	0x40003800
 8005b7c:	40003c00 	.word	0x40003c00
 8005b80:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d11f      	bne.n	8005bd2 <HAL_SPI_TransmitReceive+0x2f2>
 8005b92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01c      	beq.n	8005bd2 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005b98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b9a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d216      	bcs.n	8005bd2 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba8:	881a      	ldrh	r2, [r3, #0]
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bd0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005bda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8092 	beq.w	8005d06 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d118      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	8812      	ldrh	r2, [r2, #0]
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c00:	1c9a      	adds	r2, r3, #2
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c20:	e071      	b.n	8005d06 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005c22:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c24:	8bfb      	ldrh	r3, [r7, #30]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d228      	bcs.n	8005c7c <HAL_SPI_TransmitReceive+0x39c>
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d023      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	b292      	uxth	r2, r2
 8005c3e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c44:	1c9a      	adds	r2, r3, #2
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	8812      	ldrh	r2, [r2, #0]
 8005c52:	b292      	uxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b02      	subs	r3, #2
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c78:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c7a:	e044      	b.n	8005d06 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005c7c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d11d      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x3de>
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d018      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	8812      	ldrh	r2, [r2, #0]
 8005c94:	b292      	uxth	r2, r2
 8005c96:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c9c:	1c9a      	adds	r2, r3, #2
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005cbc:	e023      	b.n	8005d06 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cbe:	f7fc f833 	bl	8001d28 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d803      	bhi.n	8005cd6 <HAL_SPI_TransmitReceive+0x3f6>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d102      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x3fc>
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d114      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fb61 	bl	80063a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e121      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f47f af3b 	bne.w	8005b84 <HAL_SPI_TransmitReceive+0x2a4>
 8005d0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f47f af37 	bne.w	8005b84 <HAL_SPI_TransmitReceive+0x2a4>
 8005d16:	e0f2      	b.n	8005efe <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d121      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x48a>
 8005d26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01e      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005d2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d2e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d32:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d218      	bcs.n	8005d6a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3320      	adds	r3, #32
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d68:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005d72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80ba 	beq.w	8005eee <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d11b      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d94:	7812      	ldrb	r2, [r2, #0]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dbc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005dbe:	e096      	b.n	8005eee <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005dc0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005dc2:	8bfb      	ldrh	r3, [r7, #30]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d24a      	bcs.n	8005e5e <HAL_SPI_TransmitReceive+0x57e>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d045      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b04      	subs	r3, #4
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e5c:	e047      	b.n	8005eee <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005e5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d820      	bhi.n	8005ea6 <HAL_SPI_TransmitReceive+0x5c6>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01b      	beq.n	8005ea6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e7a:	7812      	ldrb	r2, [r2, #0]
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ea2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ea4:	e023      	b.n	8005eee <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea6:	f7fb ff3f 	bl	8001d28 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d803      	bhi.n	8005ebe <HAL_SPI_TransmitReceive+0x5de>
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d102      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x5e4>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d114      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fa6d 	bl	80063a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e02d      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005eee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f47f af11 	bne.w	8005d18 <HAL_SPI_TransmitReceive+0x438>
 8005ef6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f47f af0d 	bne.w	8005d18 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f04:	2200      	movs	r2, #0
 8005f06:	2108      	movs	r1, #8
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 faeb 	bl	80064e4 <SPI_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1a:	f043 0220 	orr.w	r2, r3, #32
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fa3d 	bl	80063a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005f48:	2300      	movs	r3, #0
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3730      	adds	r7, #48	@ 0x30
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop

08005f54 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	@ 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f86:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3330      	adds	r3, #48	@ 0x30
 8005f8e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <HAL_SPI_IRQHandler+0x68>
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f9c3 	bl	8006340 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005fba:	e192      	b.n	80062e2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d113      	bne.n	8005fee <HAL_SPI_IRQHandler+0x9a>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10e      	bne.n	8005fee <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
    handled = 1UL;
 8005fea:	2301      	movs	r3, #1
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10f      	bne.n	8006018 <HAL_SPI_IRQHandler+0xc4>
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
    handled = 1UL;
 8006014:	2301      	movs	r3, #1
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10f      	bne.n	8006042 <HAL_SPI_IRQHandler+0xee>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006032:	2b00      	cmp	r3, #0
 8006034:	d105      	bne.n	8006042 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
    handled = 1UL;
 800603e:	2301      	movs	r3, #1
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 8147 	bne.w	80062d8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 808b 	beq.w	800616c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0208 	orr.w	r2, r2, #8
 8006064:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0210 	orr.w	r2, r2, #16
 8006074:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006084:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0208 	bic.w	r2, r2, #8
 8006094:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d13d      	bne.n	8006120 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80060a4:	e036      	b.n	8006114 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	d90b      	bls.n	80060c6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060b8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060be:	1d1a      	adds	r2, r3, #4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	665a      	str	r2, [r3, #100]	@ 0x64
 80060c4:	e01d      	b.n	8006102 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b07      	cmp	r3, #7
 80060cc:	d90b      	bls.n	80060e6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	8812      	ldrh	r2, [r2, #0]
 80060d6:	b292      	uxth	r2, r2
 80060d8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060de:	1c9a      	adds	r2, r3, #2
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	665a      	str	r2, [r3, #100]	@ 0x64
 80060e4:	e00d      	b.n	8006102 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1c2      	bne.n	80060a6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f93f 	bl	80063a4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f8f7 	bl	800632c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800613e:	e0d0      	b.n	80062e2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	2b05      	cmp	r3, #5
 8006144:	d103      	bne.n	800614e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8e6 	bl	8006318 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800614c:	e0c6      	b.n	80062dc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800614e:	7cfb      	ldrb	r3, [r7, #19]
 8006150:	2b04      	cmp	r3, #4
 8006152:	d103      	bne.n	800615c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f8d5 	bl	8006304 <HAL_SPI_RxCpltCallback>
    return;
 800615a:	e0bf      	b.n	80062dc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	2b03      	cmp	r3, #3
 8006160:	f040 80bc 	bne.w	80062dc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8c3 	bl	80062f0 <HAL_SPI_TxCpltCallback>
    return;
 800616a:	e0b7      	b.n	80062dc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80b5 	beq.w	80062e2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00f      	beq.n	80061a2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006188:	f043 0204 	orr.w	r2, r3, #4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061a0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00f      	beq.n	80061cc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061b2:	f043 0201 	orr.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ca:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00f      	beq.n	80061f6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061dc:	f043 0208 	orr.w	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006206:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0220 	orr.w	r2, r2, #32
 800621e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006226:	2b00      	cmp	r3, #0
 8006228:	d05a      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6919      	ldr	r1, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b28      	ldr	r3, [pc, #160]	@ (80062e8 <HAL_SPI_IRQHandler+0x394>)
 8006246:	400b      	ands	r3, r1
 8006248:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006250:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006254:	d138      	bne.n	80062c8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006264:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006272:	4a1e      	ldr	r2, [pc, #120]	@ (80062ec <HAL_SPI_IRQHandler+0x398>)
 8006274:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800627a:	4618      	mov	r0, r3
 800627c:	f7fb ff18 	bl	80020b0 <HAL_DMA_Abort_IT>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800628c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062a2:	4a12      	ldr	r2, [pc, #72]	@ (80062ec <HAL_SPI_IRQHandler+0x398>)
 80062a4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fb ff00 	bl	80020b0 <HAL_DMA_Abort_IT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d014      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062c6:	e00b      	b.n	80062e0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f82b 	bl	800632c <HAL_SPI_ErrorCallback>
    return;
 80062d6:	e003      	b.n	80062e0 <HAL_SPI_IRQHandler+0x38c>
    return;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80062e0:	bf00      	nop
  }
}
 80062e2:	3728      	adds	r7, #40	@ 0x28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	fffffc94 	.word	0xfffffc94
 80062ec:	08006371 	.word	0x08006371

080062f0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006362:	b2db      	uxtb	r3, r3
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff ffc8 	bl	800632c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0208 	orr.w	r2, r2, #8
 80063c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0210 	orr.w	r2, r2, #16
 80063d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6919      	ldr	r1, [r3, #16]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b3c      	ldr	r3, [pc, #240]	@ (80064e0 <SPI_CloseTransfer+0x13c>)
 80063f0:	400b      	ands	r3, r1
 80063f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006402:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b04      	cmp	r3, #4
 800640e:	d014      	beq.n	800643a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00f      	beq.n	800643a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006420:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0220 	orr.w	r2, r2, #32
 8006438:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b03      	cmp	r3, #3
 8006444:	d014      	beq.n	8006470 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00f      	beq.n	8006470 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006456:	f043 0204 	orr.w	r2, r3, #4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800646e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00f      	beq.n	800649a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006480:	f043 0201 	orr.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006498:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00f      	beq.n	80064c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064aa:	f043 0208 	orr.w	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	fffffc90 	.word	0xfffffc90

080064e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064f4:	e010      	b.n	8006518 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f6:	f7fb fc17 	bl	8001d28 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d803      	bhi.n	800650e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d102      	bne.n	8006514 <SPI_WaitOnFlagUntilTimeout+0x30>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e00f      	b.n	8006538 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4013      	ands	r3, r2
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	429a      	cmp	r2, r3
 8006526:	bf0c      	ite	eq
 8006528:	2301      	moveq	r3, #1
 800652a:	2300      	movne	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	429a      	cmp	r2, r3
 8006534:	d0df      	beq.n	80064f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3307      	adds	r3, #7
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	fb02 f303 	mul.w	r3, r2, r3
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e042      	b.n	800660e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f83b 	bl	8006616 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2224      	movs	r2, #36	@ 0x24
 80065a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fe29 	bl	8007218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8be 	bl	8006748 <UART_SetConfig>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e01b      	b.n	800660e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fea8 	bl	800735c <UART_CheckIdleState>
 800660c:	4603      	mov	r3, r0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b08a      	sub	sp, #40	@ 0x28
 800662e:	af02      	add	r7, sp, #8
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006640:	2b20      	cmp	r3, #32
 8006642:	d17b      	bne.n	800673c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_UART_Transmit+0x26>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e074      	b.n	800673e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2221      	movs	r2, #33	@ 0x21
 8006660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006664:	f7fb fb60 	bl	8001d28 <HAL_GetTick>
 8006668:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	d108      	bne.n	8006696 <HAL_UART_Transmit+0x6c>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d104      	bne.n	8006696 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	e003      	b.n	800669e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800669e:	e030      	b.n	8006702 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2200      	movs	r2, #0
 80066a8:	2180      	movs	r1, #128	@ 0x80
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 ff00 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e03d      	b.n	800673e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10b      	bne.n	80066e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	3302      	adds	r3, #2
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	e007      	b.n	80066f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1c8      	bne.n	80066a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	2140      	movs	r1, #64	@ 0x40
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fec9 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e006      	b.n	800673e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800674c:	b092      	sub	sp, #72	@ 0x48
 800674e:	af00      	add	r7, sp, #0
 8006750:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	431a      	orrs	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	431a      	orrs	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	4313      	orrs	r3, r2
 800676e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4bbe      	ldr	r3, [pc, #760]	@ (8006a70 <UART_SetConfig+0x328>)
 8006778:	4013      	ands	r3, r2
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006780:	430b      	orrs	r3, r1
 8006782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4ab3      	ldr	r2, [pc, #716]	@ (8006a74 <UART_SetConfig+0x32c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b0:	4313      	orrs	r3, r2
 80067b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	4baf      	ldr	r3, [pc, #700]	@ (8006a78 <UART_SetConfig+0x330>)
 80067bc:	4013      	ands	r3, r2
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	f023 010f 	bic.w	r1, r3, #15
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4aa6      	ldr	r2, [pc, #664]	@ (8006a7c <UART_SetConfig+0x334>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d177      	bne.n	80068d8 <UART_SetConfig+0x190>
 80067e8:	4ba5      	ldr	r3, [pc, #660]	@ (8006a80 <UART_SetConfig+0x338>)
 80067ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067f0:	2b28      	cmp	r3, #40	@ 0x28
 80067f2:	d86d      	bhi.n	80068d0 <UART_SetConfig+0x188>
 80067f4:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <UART_SetConfig+0xb4>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	080068a1 	.word	0x080068a1
 8006800:	080068d1 	.word	0x080068d1
 8006804:	080068d1 	.word	0x080068d1
 8006808:	080068d1 	.word	0x080068d1
 800680c:	080068d1 	.word	0x080068d1
 8006810:	080068d1 	.word	0x080068d1
 8006814:	080068d1 	.word	0x080068d1
 8006818:	080068d1 	.word	0x080068d1
 800681c:	080068a9 	.word	0x080068a9
 8006820:	080068d1 	.word	0x080068d1
 8006824:	080068d1 	.word	0x080068d1
 8006828:	080068d1 	.word	0x080068d1
 800682c:	080068d1 	.word	0x080068d1
 8006830:	080068d1 	.word	0x080068d1
 8006834:	080068d1 	.word	0x080068d1
 8006838:	080068d1 	.word	0x080068d1
 800683c:	080068b1 	.word	0x080068b1
 8006840:	080068d1 	.word	0x080068d1
 8006844:	080068d1 	.word	0x080068d1
 8006848:	080068d1 	.word	0x080068d1
 800684c:	080068d1 	.word	0x080068d1
 8006850:	080068d1 	.word	0x080068d1
 8006854:	080068d1 	.word	0x080068d1
 8006858:	080068d1 	.word	0x080068d1
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068d1 	.word	0x080068d1
 8006864:	080068d1 	.word	0x080068d1
 8006868:	080068d1 	.word	0x080068d1
 800686c:	080068d1 	.word	0x080068d1
 8006870:	080068d1 	.word	0x080068d1
 8006874:	080068d1 	.word	0x080068d1
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068c1 	.word	0x080068c1
 8006880:	080068d1 	.word	0x080068d1
 8006884:	080068d1 	.word	0x080068d1
 8006888:	080068d1 	.word	0x080068d1
 800688c:	080068d1 	.word	0x080068d1
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068d1 	.word	0x080068d1
 800689c:	080068c9 	.word	0x080068c9
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e222      	b.n	8006cee <UART_SetConfig+0x5a6>
 80068a8:	2304      	movs	r3, #4
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ae:	e21e      	b.n	8006cee <UART_SetConfig+0x5a6>
 80068b0:	2308      	movs	r3, #8
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b6:	e21a      	b.n	8006cee <UART_SetConfig+0x5a6>
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e216      	b.n	8006cee <UART_SetConfig+0x5a6>
 80068c0:	2320      	movs	r3, #32
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e212      	b.n	8006cee <UART_SetConfig+0x5a6>
 80068c8:	2340      	movs	r3, #64	@ 0x40
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e20e      	b.n	8006cee <UART_SetConfig+0x5a6>
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e20a      	b.n	8006cee <UART_SetConfig+0x5a6>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a69      	ldr	r2, [pc, #420]	@ (8006a84 <UART_SetConfig+0x33c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d130      	bne.n	8006944 <UART_SetConfig+0x1fc>
 80068e2:	4b67      	ldr	r3, [pc, #412]	@ (8006a80 <UART_SetConfig+0x338>)
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d826      	bhi.n	800693c <UART_SetConfig+0x1f4>
 80068ee:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <UART_SetConfig+0x1ac>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006915 	.word	0x08006915
 80068fc:	0800691d 	.word	0x0800691d
 8006900:	08006925 	.word	0x08006925
 8006904:	0800692d 	.word	0x0800692d
 8006908:	08006935 	.word	0x08006935
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e1ec      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e1e8      	b.n	8006cee <UART_SetConfig+0x5a6>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e1e4      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e1e0      	b.n	8006cee <UART_SetConfig+0x5a6>
 800692c:	2320      	movs	r3, #32
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e1dc      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e1d8      	b.n	8006cee <UART_SetConfig+0x5a6>
 800693c:	2380      	movs	r3, #128	@ 0x80
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e1d4      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a4f      	ldr	r2, [pc, #316]	@ (8006a88 <UART_SetConfig+0x340>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d130      	bne.n	80069b0 <UART_SetConfig+0x268>
 800694e:	4b4c      	ldr	r3, [pc, #304]	@ (8006a80 <UART_SetConfig+0x338>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b05      	cmp	r3, #5
 8006958:	d826      	bhi.n	80069a8 <UART_SetConfig+0x260>
 800695a:	a201      	add	r2, pc, #4	@ (adr r2, 8006960 <UART_SetConfig+0x218>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006979 	.word	0x08006979
 8006964:	08006981 	.word	0x08006981
 8006968:	08006989 	.word	0x08006989
 800696c:	08006991 	.word	0x08006991
 8006970:	08006999 	.word	0x08006999
 8006974:	080069a1 	.word	0x080069a1
 8006978:	2300      	movs	r3, #0
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e1b6      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e1b2      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e1ae      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e1aa      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006998:	2320      	movs	r3, #32
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e1a6      	b.n	8006cee <UART_SetConfig+0x5a6>
 80069a0:	2340      	movs	r3, #64	@ 0x40
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e1a2      	b.n	8006cee <UART_SetConfig+0x5a6>
 80069a8:	2380      	movs	r3, #128	@ 0x80
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e19e      	b.n	8006cee <UART_SetConfig+0x5a6>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a35      	ldr	r2, [pc, #212]	@ (8006a8c <UART_SetConfig+0x344>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d130      	bne.n	8006a1c <UART_SetConfig+0x2d4>
 80069ba:	4b31      	ldr	r3, [pc, #196]	@ (8006a80 <UART_SetConfig+0x338>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d826      	bhi.n	8006a14 <UART_SetConfig+0x2cc>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <UART_SetConfig+0x284>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069e5 	.word	0x080069e5
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e180      	b.n	8006cee <UART_SetConfig+0x5a6>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e17c      	b.n	8006cee <UART_SetConfig+0x5a6>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e178      	b.n	8006cee <UART_SetConfig+0x5a6>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e174      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a04:	2320      	movs	r3, #32
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e170      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a0c:	2340      	movs	r3, #64	@ 0x40
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e16c      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a14:	2380      	movs	r3, #128	@ 0x80
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e168      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	@ (8006a90 <UART_SetConfig+0x348>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d142      	bne.n	8006aac <UART_SetConfig+0x364>
 8006a26:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <UART_SetConfig+0x338>)
 8006a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	d838      	bhi.n	8006aa4 <UART_SetConfig+0x35c>
 8006a32:	a201      	add	r2, pc, #4	@ (adr r2, 8006a38 <UART_SetConfig+0x2f0>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a51 	.word	0x08006a51
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	08006a61 	.word	0x08006a61
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a9d 	.word	0x08006a9d
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e14a      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e146      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e142      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e13e      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a70:	cfff69f3 	.word	0xcfff69f3
 8006a74:	58000c00 	.word	0x58000c00
 8006a78:	11fff4ff 	.word	0x11fff4ff
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	58024400 	.word	0x58024400
 8006a84:	40004400 	.word	0x40004400
 8006a88:	40004800 	.word	0x40004800
 8006a8c:	40004c00 	.word	0x40004c00
 8006a90:	40005000 	.word	0x40005000
 8006a94:	2320      	movs	r3, #32
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9a:	e128      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006a9c:	2340      	movs	r3, #64	@ 0x40
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa2:	e124      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006aa4:	2380      	movs	r3, #128	@ 0x80
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	e120      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4acb      	ldr	r2, [pc, #812]	@ (8006de0 <UART_SetConfig+0x698>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d176      	bne.n	8006ba4 <UART_SetConfig+0x45c>
 8006ab6:	4bcb      	ldr	r3, [pc, #812]	@ (8006de4 <UART_SetConfig+0x69c>)
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006abe:	2b28      	cmp	r3, #40	@ 0x28
 8006ac0:	d86c      	bhi.n	8006b9c <UART_SetConfig+0x454>
 8006ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <UART_SetConfig+0x380>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006b6d 	.word	0x08006b6d
 8006acc:	08006b9d 	.word	0x08006b9d
 8006ad0:	08006b9d 	.word	0x08006b9d
 8006ad4:	08006b9d 	.word	0x08006b9d
 8006ad8:	08006b9d 	.word	0x08006b9d
 8006adc:	08006b9d 	.word	0x08006b9d
 8006ae0:	08006b9d 	.word	0x08006b9d
 8006ae4:	08006b9d 	.word	0x08006b9d
 8006ae8:	08006b75 	.word	0x08006b75
 8006aec:	08006b9d 	.word	0x08006b9d
 8006af0:	08006b9d 	.word	0x08006b9d
 8006af4:	08006b9d 	.word	0x08006b9d
 8006af8:	08006b9d 	.word	0x08006b9d
 8006afc:	08006b9d 	.word	0x08006b9d
 8006b00:	08006b9d 	.word	0x08006b9d
 8006b04:	08006b9d 	.word	0x08006b9d
 8006b08:	08006b7d 	.word	0x08006b7d
 8006b0c:	08006b9d 	.word	0x08006b9d
 8006b10:	08006b9d 	.word	0x08006b9d
 8006b14:	08006b9d 	.word	0x08006b9d
 8006b18:	08006b9d 	.word	0x08006b9d
 8006b1c:	08006b9d 	.word	0x08006b9d
 8006b20:	08006b9d 	.word	0x08006b9d
 8006b24:	08006b9d 	.word	0x08006b9d
 8006b28:	08006b85 	.word	0x08006b85
 8006b2c:	08006b9d 	.word	0x08006b9d
 8006b30:	08006b9d 	.word	0x08006b9d
 8006b34:	08006b9d 	.word	0x08006b9d
 8006b38:	08006b9d 	.word	0x08006b9d
 8006b3c:	08006b9d 	.word	0x08006b9d
 8006b40:	08006b9d 	.word	0x08006b9d
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006b8d 	.word	0x08006b8d
 8006b4c:	08006b9d 	.word	0x08006b9d
 8006b50:	08006b9d 	.word	0x08006b9d
 8006b54:	08006b9d 	.word	0x08006b9d
 8006b58:	08006b9d 	.word	0x08006b9d
 8006b5c:	08006b9d 	.word	0x08006b9d
 8006b60:	08006b9d 	.word	0x08006b9d
 8006b64:	08006b9d 	.word	0x08006b9d
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b72:	e0bc      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7a:	e0b8      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b82:	e0b4      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8a:	e0b0      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b92:	e0ac      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006b94:	2340      	movs	r3, #64	@ 0x40
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9a:	e0a8      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006b9c:	2380      	movs	r3, #128	@ 0x80
 8006b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba2:	e0a4      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a8f      	ldr	r2, [pc, #572]	@ (8006de8 <UART_SetConfig+0x6a0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d130      	bne.n	8006c10 <UART_SetConfig+0x4c8>
 8006bae:	4b8d      	ldr	r3, [pc, #564]	@ (8006de4 <UART_SetConfig+0x69c>)
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d826      	bhi.n	8006c08 <UART_SetConfig+0x4c0>
 8006bba:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc0 <UART_SetConfig+0x478>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bd9 	.word	0x08006bd9
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	08006be9 	.word	0x08006be9
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bde:	e086      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006be0:	2304      	movs	r3, #4
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be6:	e082      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006be8:	2308      	movs	r3, #8
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bee:	e07e      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf6:	e07a      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfe:	e076      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c00:	2340      	movs	r3, #64	@ 0x40
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c06:	e072      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c08:	2380      	movs	r3, #128	@ 0x80
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0e:	e06e      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a75      	ldr	r2, [pc, #468]	@ (8006dec <UART_SetConfig+0x6a4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d130      	bne.n	8006c7c <UART_SetConfig+0x534>
 8006c1a:	4b72      	ldr	r3, [pc, #456]	@ (8006de4 <UART_SetConfig+0x69c>)
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d826      	bhi.n	8006c74 <UART_SetConfig+0x52c>
 8006c26:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <UART_SetConfig+0x4e4>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c45 	.word	0x08006c45
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4a:	e050      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c52:	e04c      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5a:	e048      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c62:	e044      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c64:	2320      	movs	r3, #32
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6a:	e040      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c6c:	2340      	movs	r3, #64	@ 0x40
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c72:	e03c      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c74:	2380      	movs	r3, #128	@ 0x80
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7a:	e038      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a5b      	ldr	r2, [pc, #364]	@ (8006df0 <UART_SetConfig+0x6a8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d130      	bne.n	8006ce8 <UART_SetConfig+0x5a0>
 8006c86:	4b57      	ldr	r3, [pc, #348]	@ (8006de4 <UART_SetConfig+0x69c>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	2b05      	cmp	r3, #5
 8006c90:	d826      	bhi.n	8006ce0 <UART_SetConfig+0x598>
 8006c92:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <UART_SetConfig+0x550>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cb1 	.word	0x08006cb1
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cc1 	.word	0x08006cc1
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb6:	e01a      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cbe:	e016      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc6:	e012      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cce:	e00e      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd6:	e00a      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006cd8:	2340      	movs	r3, #64	@ 0x40
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e006      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006ce0:	2380      	movs	r3, #128	@ 0x80
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e002      	b.n	8006cee <UART_SetConfig+0x5a6>
 8006ce8:	2380      	movs	r3, #128	@ 0x80
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8006df0 <UART_SetConfig+0x6a8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	f040 80f8 	bne.w	8006eea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cfa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	dc46      	bgt.n	8006d90 <UART_SetConfig+0x648>
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	f2c0 8082 	blt.w	8006e0c <UART_SetConfig+0x6c4>
 8006d08:	3b02      	subs	r3, #2
 8006d0a:	2b1e      	cmp	r3, #30
 8006d0c:	d87e      	bhi.n	8006e0c <UART_SetConfig+0x6c4>
 8006d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <UART_SetConfig+0x5cc>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d97 	.word	0x08006d97
 8006d18:	08006e0d 	.word	0x08006e0d
 8006d1c:	08006d9f 	.word	0x08006d9f
 8006d20:	08006e0d 	.word	0x08006e0d
 8006d24:	08006e0d 	.word	0x08006e0d
 8006d28:	08006e0d 	.word	0x08006e0d
 8006d2c:	08006daf 	.word	0x08006daf
 8006d30:	08006e0d 	.word	0x08006e0d
 8006d34:	08006e0d 	.word	0x08006e0d
 8006d38:	08006e0d 	.word	0x08006e0d
 8006d3c:	08006e0d 	.word	0x08006e0d
 8006d40:	08006e0d 	.word	0x08006e0d
 8006d44:	08006e0d 	.word	0x08006e0d
 8006d48:	08006e0d 	.word	0x08006e0d
 8006d4c:	08006dbf 	.word	0x08006dbf
 8006d50:	08006e0d 	.word	0x08006e0d
 8006d54:	08006e0d 	.word	0x08006e0d
 8006d58:	08006e0d 	.word	0x08006e0d
 8006d5c:	08006e0d 	.word	0x08006e0d
 8006d60:	08006e0d 	.word	0x08006e0d
 8006d64:	08006e0d 	.word	0x08006e0d
 8006d68:	08006e0d 	.word	0x08006e0d
 8006d6c:	08006e0d 	.word	0x08006e0d
 8006d70:	08006e0d 	.word	0x08006e0d
 8006d74:	08006e0d 	.word	0x08006e0d
 8006d78:	08006e0d 	.word	0x08006e0d
 8006d7c:	08006e0d 	.word	0x08006e0d
 8006d80:	08006e0d 	.word	0x08006e0d
 8006d84:	08006e0d 	.word	0x08006e0d
 8006d88:	08006e0d 	.word	0x08006e0d
 8006d8c:	08006dff 	.word	0x08006dff
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d037      	beq.n	8006e04 <UART_SetConfig+0x6bc>
 8006d94:	e03a      	b.n	8006e0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d96:	f7fe f85d 	bl	8004e54 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d9c:	e03c      	b.n	8006e18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe f86c 	bl	8004e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dac:	e034      	b.n	8006e18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dae:	f107 0318 	add.w	r3, r7, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe f9b8 	bl	8005128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbc:	e02c      	b.n	8006e18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dbe:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <UART_SetConfig+0x69c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d016      	beq.n	8006df8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dca:	4b06      	ldr	r3, [pc, #24]	@ (8006de4 <UART_SetConfig+0x69c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	08db      	lsrs	r3, r3, #3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	4a07      	ldr	r2, [pc, #28]	@ (8006df4 <UART_SetConfig+0x6ac>)
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ddc:	e01c      	b.n	8006e18 <UART_SetConfig+0x6d0>
 8006dde:	bf00      	nop
 8006de0:	40011400 	.word	0x40011400
 8006de4:	58024400 	.word	0x58024400
 8006de8:	40007800 	.word	0x40007800
 8006dec:	40007c00 	.word	0x40007c00
 8006df0:	58000c00 	.word	0x58000c00
 8006df4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006df8:	4b9d      	ldr	r3, [pc, #628]	@ (8007070 <UART_SetConfig+0x928>)
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dfc:	e00c      	b.n	8006e18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006dfe:	4b9d      	ldr	r3, [pc, #628]	@ (8007074 <UART_SetConfig+0x92c>)
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e02:	e009      	b.n	8006e18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0a:	e005      	b.n	8006e18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 81de 	beq.w	80071dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e24:	4a94      	ldr	r2, [pc, #592]	@ (8007078 <UART_SetConfig+0x930>)
 8006e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e32:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	4413      	add	r3, r2
 8006e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d305      	bcc.n	8006e50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d903      	bls.n	8006e58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e56:	e1c1      	b.n	80071dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	60fa      	str	r2, [r7, #12]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	4a84      	ldr	r2, [pc, #528]	@ (8007078 <UART_SetConfig+0x930>)
 8006e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e7a:	f7f9 fa81 	bl	8000380 <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4610      	mov	r0, r2
 8006e84:	4619      	mov	r1, r3
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	020b      	lsls	r3, r1, #8
 8006e90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e94:	0202      	lsls	r2, r0, #8
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	6849      	ldr	r1, [r1, #4]
 8006e9a:	0849      	lsrs	r1, r1, #1
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	eb12 0804 	adds.w	r8, r2, r4
 8006ea6:	eb43 0905 	adc.w	r9, r3, r5
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	469a      	mov	sl, r3
 8006eb2:	4693      	mov	fp, r2
 8006eb4:	4652      	mov	r2, sl
 8006eb6:	465b      	mov	r3, fp
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 fa60 	bl	8000380 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ece:	d308      	bcc.n	8006ee2 <UART_SetConfig+0x79a>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ed6:	d204      	bcs.n	8006ee2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ede:	60da      	str	r2, [r3, #12]
 8006ee0:	e17c      	b.n	80071dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ee8:	e178      	b.n	80071dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef2:	f040 80c5 	bne.w	8007080 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006ef6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	dc48      	bgt.n	8006f90 <UART_SetConfig+0x848>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	db7b      	blt.n	8006ffa <UART_SetConfig+0x8b2>
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d879      	bhi.n	8006ffa <UART_SetConfig+0x8b2>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <UART_SetConfig+0x7c4>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f97 	.word	0x08006f97
 8006f10:	08006f9f 	.word	0x08006f9f
 8006f14:	08006ffb 	.word	0x08006ffb
 8006f18:	08006ffb 	.word	0x08006ffb
 8006f1c:	08006fa7 	.word	0x08006fa7
 8006f20:	08006ffb 	.word	0x08006ffb
 8006f24:	08006ffb 	.word	0x08006ffb
 8006f28:	08006ffb 	.word	0x08006ffb
 8006f2c:	08006fb7 	.word	0x08006fb7
 8006f30:	08006ffb 	.word	0x08006ffb
 8006f34:	08006ffb 	.word	0x08006ffb
 8006f38:	08006ffb 	.word	0x08006ffb
 8006f3c:	08006ffb 	.word	0x08006ffb
 8006f40:	08006ffb 	.word	0x08006ffb
 8006f44:	08006ffb 	.word	0x08006ffb
 8006f48:	08006ffb 	.word	0x08006ffb
 8006f4c:	08006fc7 	.word	0x08006fc7
 8006f50:	08006ffb 	.word	0x08006ffb
 8006f54:	08006ffb 	.word	0x08006ffb
 8006f58:	08006ffb 	.word	0x08006ffb
 8006f5c:	08006ffb 	.word	0x08006ffb
 8006f60:	08006ffb 	.word	0x08006ffb
 8006f64:	08006ffb 	.word	0x08006ffb
 8006f68:	08006ffb 	.word	0x08006ffb
 8006f6c:	08006ffb 	.word	0x08006ffb
 8006f70:	08006ffb 	.word	0x08006ffb
 8006f74:	08006ffb 	.word	0x08006ffb
 8006f78:	08006ffb 	.word	0x08006ffb
 8006f7c:	08006ffb 	.word	0x08006ffb
 8006f80:	08006ffb 	.word	0x08006ffb
 8006f84:	08006ffb 	.word	0x08006ffb
 8006f88:	08006ffb 	.word	0x08006ffb
 8006f8c:	08006fed 	.word	0x08006fed
 8006f90:	2b40      	cmp	r3, #64	@ 0x40
 8006f92:	d02e      	beq.n	8006ff2 <UART_SetConfig+0x8aa>
 8006f94:	e031      	b.n	8006ffa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f96:	f7fc fd27 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8006f9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f9c:	e033      	b.n	8007006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9e:	f7fc fd39 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8006fa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fa4:	e02f      	b.n	8007006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fd ff68 	bl	8004e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fb4:	e027      	b.n	8007006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb6:	f107 0318 	add.w	r3, r7, #24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe f8b4 	bl	8005128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc4:	e01f      	b.n	8007006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800707c <UART_SetConfig+0x934>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800707c <UART_SetConfig+0x934>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	08db      	lsrs	r3, r3, #3
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	4a24      	ldr	r2, [pc, #144]	@ (8007070 <UART_SetConfig+0x928>)
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fe4:	e00f      	b.n	8007006 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006fe6:	4b22      	ldr	r3, [pc, #136]	@ (8007070 <UART_SetConfig+0x928>)
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fea:	e00c      	b.n	8007006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fec:	4b21      	ldr	r3, [pc, #132]	@ (8007074 <UART_SetConfig+0x92c>)
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e009      	b.n	8007006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff8:	e005      	b.n	8007006 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 80e7 	beq.w	80071dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007012:	4a19      	ldr	r2, [pc, #100]	@ (8007078 <UART_SetConfig+0x930>)
 8007014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007018:	461a      	mov	r2, r3
 800701a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007020:	005a      	lsls	r2, r3, #1
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	441a      	add	r2, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007032:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d916      	bls.n	8007068 <UART_SetConfig+0x920>
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007040:	d212      	bcs.n	8007068 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	b29b      	uxth	r3, r3
 8007046:	f023 030f 	bic.w	r3, r3, #15
 800704a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	085b      	lsrs	r3, r3, #1
 8007050:	b29b      	uxth	r3, r3
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	b29a      	uxth	r2, r3
 8007058:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800705a:	4313      	orrs	r3, r2
 800705c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007064:	60da      	str	r2, [r3, #12]
 8007066:	e0b9      	b.n	80071dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800706e:	e0b5      	b.n	80071dc <UART_SetConfig+0xa94>
 8007070:	03d09000 	.word	0x03d09000
 8007074:	003d0900 	.word	0x003d0900
 8007078:	08009e28 	.word	0x08009e28
 800707c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007080:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007084:	2b20      	cmp	r3, #32
 8007086:	dc49      	bgt.n	800711c <UART_SetConfig+0x9d4>
 8007088:	2b00      	cmp	r3, #0
 800708a:	db7c      	blt.n	8007186 <UART_SetConfig+0xa3e>
 800708c:	2b20      	cmp	r3, #32
 800708e:	d87a      	bhi.n	8007186 <UART_SetConfig+0xa3e>
 8007090:	a201      	add	r2, pc, #4	@ (adr r2, 8007098 <UART_SetConfig+0x950>)
 8007092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007096:	bf00      	nop
 8007098:	08007123 	.word	0x08007123
 800709c:	0800712b 	.word	0x0800712b
 80070a0:	08007187 	.word	0x08007187
 80070a4:	08007187 	.word	0x08007187
 80070a8:	08007133 	.word	0x08007133
 80070ac:	08007187 	.word	0x08007187
 80070b0:	08007187 	.word	0x08007187
 80070b4:	08007187 	.word	0x08007187
 80070b8:	08007143 	.word	0x08007143
 80070bc:	08007187 	.word	0x08007187
 80070c0:	08007187 	.word	0x08007187
 80070c4:	08007187 	.word	0x08007187
 80070c8:	08007187 	.word	0x08007187
 80070cc:	08007187 	.word	0x08007187
 80070d0:	08007187 	.word	0x08007187
 80070d4:	08007187 	.word	0x08007187
 80070d8:	08007153 	.word	0x08007153
 80070dc:	08007187 	.word	0x08007187
 80070e0:	08007187 	.word	0x08007187
 80070e4:	08007187 	.word	0x08007187
 80070e8:	08007187 	.word	0x08007187
 80070ec:	08007187 	.word	0x08007187
 80070f0:	08007187 	.word	0x08007187
 80070f4:	08007187 	.word	0x08007187
 80070f8:	08007187 	.word	0x08007187
 80070fc:	08007187 	.word	0x08007187
 8007100:	08007187 	.word	0x08007187
 8007104:	08007187 	.word	0x08007187
 8007108:	08007187 	.word	0x08007187
 800710c:	08007187 	.word	0x08007187
 8007110:	08007187 	.word	0x08007187
 8007114:	08007187 	.word	0x08007187
 8007118:	08007179 	.word	0x08007179
 800711c:	2b40      	cmp	r3, #64	@ 0x40
 800711e:	d02e      	beq.n	800717e <UART_SetConfig+0xa36>
 8007120:	e031      	b.n	8007186 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007122:	f7fc fc61 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8007126:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007128:	e033      	b.n	8007192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800712a:	f7fc fc73 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 800712e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007130:	e02f      	b.n	8007192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007136:	4618      	mov	r0, r3
 8007138:	f7fd fea2 	bl	8004e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007140:	e027      	b.n	8007192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007142:	f107 0318 	add.w	r3, r7, #24
 8007146:	4618      	mov	r0, r3
 8007148:	f7fd ffee 	bl	8005128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007150:	e01f      	b.n	8007192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007152:	4b2d      	ldr	r3, [pc, #180]	@ (8007208 <UART_SetConfig+0xac0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800715e:	4b2a      	ldr	r3, [pc, #168]	@ (8007208 <UART_SetConfig+0xac0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	08db      	lsrs	r3, r3, #3
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	4a28      	ldr	r2, [pc, #160]	@ (800720c <UART_SetConfig+0xac4>)
 800716a:	fa22 f303 	lsr.w	r3, r2, r3
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007170:	e00f      	b.n	8007192 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007172:	4b26      	ldr	r3, [pc, #152]	@ (800720c <UART_SetConfig+0xac4>)
 8007174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007176:	e00c      	b.n	8007192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007178:	4b25      	ldr	r3, [pc, #148]	@ (8007210 <UART_SetConfig+0xac8>)
 800717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800717c:	e009      	b.n	8007192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007184:	e005      	b.n	8007192 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007190:	bf00      	nop
    }

    if (pclk != 0U)
 8007192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d021      	beq.n	80071dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719c:	4a1d      	ldr	r2, [pc, #116]	@ (8007214 <UART_SetConfig+0xacc>)
 800719e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	441a      	add	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071be:	2b0f      	cmp	r3, #15
 80071c0:	d909      	bls.n	80071d6 <UART_SetConfig+0xa8e>
 80071c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c8:	d205      	bcs.n	80071d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60da      	str	r2, [r3, #12]
 80071d4:	e002      	b.n	80071dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2201      	movs	r2, #1
 80071e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2200      	movs	r2, #0
 80071f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80071f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3748      	adds	r7, #72	@ 0x48
 8007200:	46bd      	mov	sp, r7
 8007202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop
 8007208:	58024400 	.word	0x58024400
 800720c:	03d09000 	.word	0x03d09000
 8007210:	003d0900 	.word	0x003d0900
 8007214:	08009e28 	.word	0x08009e28

08007218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01a      	beq.n	800732e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007316:	d10a      	bne.n	800732e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b098      	sub	sp, #96	@ 0x60
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800736c:	f7fa fcdc 	bl	8001d28 <HAL_GetTick>
 8007370:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b08      	cmp	r3, #8
 800737e:	d12f      	bne.n	80073e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007388:	2200      	movs	r2, #0
 800738a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f88e 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d022      	beq.n	80073e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e063      	b.n	80074a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d149      	bne.n	8007482 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f6:	2200      	movs	r2, #0
 80073f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f857 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d03c      	beq.n	8007482 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	623b      	str	r3, [r7, #32]
   return(result);
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800741c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007426:	633b      	str	r3, [r7, #48]	@ 0x30
 8007428:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800742c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	60fb      	str	r3, [r7, #12]
   return(result);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800745a:	61fa      	str	r2, [r7, #28]
 800745c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	69b9      	ldr	r1, [r7, #24]
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	617b      	str	r3, [r7, #20]
   return(result);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e012      	b.n	80074a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3758      	adds	r7, #88	@ 0x58
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c0:	e04f      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d04b      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fa fc2d 	bl	8001d28 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e04e      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d037      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b80      	cmp	r3, #128	@ 0x80
 80074f6:	d034      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b40      	cmp	r3, #64	@ 0x40
 80074fc:	d031      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d110      	bne.n	800752e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2208      	movs	r2, #8
 8007512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f839 	bl	800758c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2208      	movs	r2, #8
 800751e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e029      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800753c:	d111      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f81f 	bl	800758c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e00f      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	429a      	cmp	r2, r3
 800757e:	d0a0      	beq.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b095      	sub	sp, #84	@ 0x54
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80075b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007654 <UART_EndRxTransfer+0xc8>)
 80075da:	4013      	ands	r3, r2
 80075dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d118      	bne.n	8007634 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f023 0310 	bic.w	r3, r3, #16
 8007616:	647b      	str	r3, [r7, #68]	@ 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6979      	ldr	r1, [r7, #20]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	613b      	str	r3, [r7, #16]
   return(result);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007648:	bf00      	nop
 800764a:	3754      	adds	r7, #84	@ 0x54
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	effffffe 	.word	0xeffffffe

08007658 <std>:
 8007658:	2300      	movs	r3, #0
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
 800765e:	e9c0 3300 	strd	r3, r3, [r0]
 8007662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007666:	6083      	str	r3, [r0, #8]
 8007668:	8181      	strh	r1, [r0, #12]
 800766a:	6643      	str	r3, [r0, #100]	@ 0x64
 800766c:	81c2      	strh	r2, [r0, #14]
 800766e:	6183      	str	r3, [r0, #24]
 8007670:	4619      	mov	r1, r3
 8007672:	2208      	movs	r2, #8
 8007674:	305c      	adds	r0, #92	@ 0x5c
 8007676:	f000 f906 	bl	8007886 <memset>
 800767a:	4b0d      	ldr	r3, [pc, #52]	@ (80076b0 <std+0x58>)
 800767c:	6263      	str	r3, [r4, #36]	@ 0x24
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <std+0x5c>)
 8007680:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007682:	4b0d      	ldr	r3, [pc, #52]	@ (80076b8 <std+0x60>)
 8007684:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007686:	4b0d      	ldr	r3, [pc, #52]	@ (80076bc <std+0x64>)
 8007688:	6323      	str	r3, [r4, #48]	@ 0x30
 800768a:	4b0d      	ldr	r3, [pc, #52]	@ (80076c0 <std+0x68>)
 800768c:	6224      	str	r4, [r4, #32]
 800768e:	429c      	cmp	r4, r3
 8007690:	d006      	beq.n	80076a0 <std+0x48>
 8007692:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007696:	4294      	cmp	r4, r2
 8007698:	d002      	beq.n	80076a0 <std+0x48>
 800769a:	33d0      	adds	r3, #208	@ 0xd0
 800769c:	429c      	cmp	r4, r3
 800769e:	d105      	bne.n	80076ac <std+0x54>
 80076a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a8:	f000 b966 	b.w	8007978 <__retarget_lock_init_recursive>
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	bf00      	nop
 80076b0:	08007801 	.word	0x08007801
 80076b4:	08007823 	.word	0x08007823
 80076b8:	0800785b 	.word	0x0800785b
 80076bc:	0800787f 	.word	0x0800787f
 80076c0:	240001e8 	.word	0x240001e8

080076c4 <stdio_exit_handler>:
 80076c4:	4a02      	ldr	r2, [pc, #8]	@ (80076d0 <stdio_exit_handler+0xc>)
 80076c6:	4903      	ldr	r1, [pc, #12]	@ (80076d4 <stdio_exit_handler+0x10>)
 80076c8:	4803      	ldr	r0, [pc, #12]	@ (80076d8 <stdio_exit_handler+0x14>)
 80076ca:	f000 b869 	b.w	80077a0 <_fwalk_sglue>
 80076ce:	bf00      	nop
 80076d0:	2400002c 	.word	0x2400002c
 80076d4:	08008215 	.word	0x08008215
 80076d8:	2400003c 	.word	0x2400003c

080076dc <cleanup_stdio>:
 80076dc:	6841      	ldr	r1, [r0, #4]
 80076de:	4b0c      	ldr	r3, [pc, #48]	@ (8007710 <cleanup_stdio+0x34>)
 80076e0:	4299      	cmp	r1, r3
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	d001      	beq.n	80076ec <cleanup_stdio+0x10>
 80076e8:	f000 fd94 	bl	8008214 <_fflush_r>
 80076ec:	68a1      	ldr	r1, [r4, #8]
 80076ee:	4b09      	ldr	r3, [pc, #36]	@ (8007714 <cleanup_stdio+0x38>)
 80076f0:	4299      	cmp	r1, r3
 80076f2:	d002      	beq.n	80076fa <cleanup_stdio+0x1e>
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 fd8d 	bl	8008214 <_fflush_r>
 80076fa:	68e1      	ldr	r1, [r4, #12]
 80076fc:	4b06      	ldr	r3, [pc, #24]	@ (8007718 <cleanup_stdio+0x3c>)
 80076fe:	4299      	cmp	r1, r3
 8007700:	d004      	beq.n	800770c <cleanup_stdio+0x30>
 8007702:	4620      	mov	r0, r4
 8007704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007708:	f000 bd84 	b.w	8008214 <_fflush_r>
 800770c:	bd10      	pop	{r4, pc}
 800770e:	bf00      	nop
 8007710:	240001e8 	.word	0x240001e8
 8007714:	24000250 	.word	0x24000250
 8007718:	240002b8 	.word	0x240002b8

0800771c <global_stdio_init.part.0>:
 800771c:	b510      	push	{r4, lr}
 800771e:	4b0b      	ldr	r3, [pc, #44]	@ (800774c <global_stdio_init.part.0+0x30>)
 8007720:	4c0b      	ldr	r4, [pc, #44]	@ (8007750 <global_stdio_init.part.0+0x34>)
 8007722:	4a0c      	ldr	r2, [pc, #48]	@ (8007754 <global_stdio_init.part.0+0x38>)
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	4620      	mov	r0, r4
 8007728:	2200      	movs	r2, #0
 800772a:	2104      	movs	r1, #4
 800772c:	f7ff ff94 	bl	8007658 <std>
 8007730:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007734:	2201      	movs	r2, #1
 8007736:	2109      	movs	r1, #9
 8007738:	f7ff ff8e 	bl	8007658 <std>
 800773c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007740:	2202      	movs	r2, #2
 8007742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007746:	2112      	movs	r1, #18
 8007748:	f7ff bf86 	b.w	8007658 <std>
 800774c:	24000320 	.word	0x24000320
 8007750:	240001e8 	.word	0x240001e8
 8007754:	080076c5 	.word	0x080076c5

08007758 <__sfp_lock_acquire>:
 8007758:	4801      	ldr	r0, [pc, #4]	@ (8007760 <__sfp_lock_acquire+0x8>)
 800775a:	f000 b90e 	b.w	800797a <__retarget_lock_acquire_recursive>
 800775e:	bf00      	nop
 8007760:	24000329 	.word	0x24000329

08007764 <__sfp_lock_release>:
 8007764:	4801      	ldr	r0, [pc, #4]	@ (800776c <__sfp_lock_release+0x8>)
 8007766:	f000 b909 	b.w	800797c <__retarget_lock_release_recursive>
 800776a:	bf00      	nop
 800776c:	24000329 	.word	0x24000329

08007770 <__sinit>:
 8007770:	b510      	push	{r4, lr}
 8007772:	4604      	mov	r4, r0
 8007774:	f7ff fff0 	bl	8007758 <__sfp_lock_acquire>
 8007778:	6a23      	ldr	r3, [r4, #32]
 800777a:	b11b      	cbz	r3, 8007784 <__sinit+0x14>
 800777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007780:	f7ff bff0 	b.w	8007764 <__sfp_lock_release>
 8007784:	4b04      	ldr	r3, [pc, #16]	@ (8007798 <__sinit+0x28>)
 8007786:	6223      	str	r3, [r4, #32]
 8007788:	4b04      	ldr	r3, [pc, #16]	@ (800779c <__sinit+0x2c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1f5      	bne.n	800777c <__sinit+0xc>
 8007790:	f7ff ffc4 	bl	800771c <global_stdio_init.part.0>
 8007794:	e7f2      	b.n	800777c <__sinit+0xc>
 8007796:	bf00      	nop
 8007798:	080076dd 	.word	0x080076dd
 800779c:	24000320 	.word	0x24000320

080077a0 <_fwalk_sglue>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	4607      	mov	r7, r0
 80077a6:	4688      	mov	r8, r1
 80077a8:	4614      	mov	r4, r2
 80077aa:	2600      	movs	r6, #0
 80077ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077b0:	f1b9 0901 	subs.w	r9, r9, #1
 80077b4:	d505      	bpl.n	80077c2 <_fwalk_sglue+0x22>
 80077b6:	6824      	ldr	r4, [r4, #0]
 80077b8:	2c00      	cmp	r4, #0
 80077ba:	d1f7      	bne.n	80077ac <_fwalk_sglue+0xc>
 80077bc:	4630      	mov	r0, r6
 80077be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c2:	89ab      	ldrh	r3, [r5, #12]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d907      	bls.n	80077d8 <_fwalk_sglue+0x38>
 80077c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077cc:	3301      	adds	r3, #1
 80077ce:	d003      	beq.n	80077d8 <_fwalk_sglue+0x38>
 80077d0:	4629      	mov	r1, r5
 80077d2:	4638      	mov	r0, r7
 80077d4:	47c0      	blx	r8
 80077d6:	4306      	orrs	r6, r0
 80077d8:	3568      	adds	r5, #104	@ 0x68
 80077da:	e7e9      	b.n	80077b0 <_fwalk_sglue+0x10>

080077dc <iprintf>:
 80077dc:	b40f      	push	{r0, r1, r2, r3}
 80077de:	b507      	push	{r0, r1, r2, lr}
 80077e0:	4906      	ldr	r1, [pc, #24]	@ (80077fc <iprintf+0x20>)
 80077e2:	ab04      	add	r3, sp, #16
 80077e4:	6808      	ldr	r0, [r1, #0]
 80077e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ea:	6881      	ldr	r1, [r0, #8]
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	f000 f9e9 	bl	8007bc4 <_vfiprintf_r>
 80077f2:	b003      	add	sp, #12
 80077f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077f8:	b004      	add	sp, #16
 80077fa:	4770      	bx	lr
 80077fc:	24000038 	.word	0x24000038

08007800 <__sread>:
 8007800:	b510      	push	{r4, lr}
 8007802:	460c      	mov	r4, r1
 8007804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007808:	f000 f868 	bl	80078dc <_read_r>
 800780c:	2800      	cmp	r0, #0
 800780e:	bfab      	itete	ge
 8007810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007812:	89a3      	ldrhlt	r3, [r4, #12]
 8007814:	181b      	addge	r3, r3, r0
 8007816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800781a:	bfac      	ite	ge
 800781c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800781e:	81a3      	strhlt	r3, [r4, #12]
 8007820:	bd10      	pop	{r4, pc}

08007822 <__swrite>:
 8007822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	461f      	mov	r7, r3
 8007828:	898b      	ldrh	r3, [r1, #12]
 800782a:	05db      	lsls	r3, r3, #23
 800782c:	4605      	mov	r5, r0
 800782e:	460c      	mov	r4, r1
 8007830:	4616      	mov	r6, r2
 8007832:	d505      	bpl.n	8007840 <__swrite+0x1e>
 8007834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007838:	2302      	movs	r3, #2
 800783a:	2200      	movs	r2, #0
 800783c:	f000 f83c 	bl	80078b8 <_lseek_r>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800784a:	81a3      	strh	r3, [r4, #12]
 800784c:	4632      	mov	r2, r6
 800784e:	463b      	mov	r3, r7
 8007850:	4628      	mov	r0, r5
 8007852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007856:	f000 b853 	b.w	8007900 <_write_r>

0800785a <__sseek>:
 800785a:	b510      	push	{r4, lr}
 800785c:	460c      	mov	r4, r1
 800785e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007862:	f000 f829 	bl	80078b8 <_lseek_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	bf15      	itete	ne
 800786c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800786e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007876:	81a3      	strheq	r3, [r4, #12]
 8007878:	bf18      	it	ne
 800787a:	81a3      	strhne	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__sclose>:
 800787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007882:	f000 b809 	b.w	8007898 <_close_r>

08007886 <memset>:
 8007886:	4402      	add	r2, r0
 8007888:	4603      	mov	r3, r0
 800788a:	4293      	cmp	r3, r2
 800788c:	d100      	bne.n	8007890 <memset+0xa>
 800788e:	4770      	bx	lr
 8007890:	f803 1b01 	strb.w	r1, [r3], #1
 8007894:	e7f9      	b.n	800788a <memset+0x4>
	...

08007898 <_close_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d06      	ldr	r5, [pc, #24]	@ (80078b4 <_close_r+0x1c>)
 800789c:	2300      	movs	r3, #0
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	f7f9 fe15 	bl	80014d2 <_close>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_close_r+0x1a>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_close_r+0x1a>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	24000324 	.word	0x24000324

080078b8 <_lseek_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d07      	ldr	r5, [pc, #28]	@ (80078d8 <_lseek_r+0x20>)
 80078bc:	4604      	mov	r4, r0
 80078be:	4608      	mov	r0, r1
 80078c0:	4611      	mov	r1, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	602a      	str	r2, [r5, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f7f9 fe2a 	bl	8001520 <_lseek>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_lseek_r+0x1e>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_lseek_r+0x1e>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	24000324 	.word	0x24000324

080078dc <_read_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	@ (80078fc <_read_r+0x20>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f7f9 fdb8 	bl	8001460 <_read>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_read_r+0x1e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_read_r+0x1e>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	24000324 	.word	0x24000324

08007900 <_write_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d07      	ldr	r5, [pc, #28]	@ (8007920 <_write_r+0x20>)
 8007904:	4604      	mov	r4, r0
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	2200      	movs	r2, #0
 800790c:	602a      	str	r2, [r5, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f7f9 fdc3 	bl	800149a <_write>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_write_r+0x1e>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_write_r+0x1e>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	24000324 	.word	0x24000324

08007924 <__errno>:
 8007924:	4b01      	ldr	r3, [pc, #4]	@ (800792c <__errno+0x8>)
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	24000038 	.word	0x24000038

08007930 <__libc_init_array>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	4d0d      	ldr	r5, [pc, #52]	@ (8007968 <__libc_init_array+0x38>)
 8007934:	4c0d      	ldr	r4, [pc, #52]	@ (800796c <__libc_init_array+0x3c>)
 8007936:	1b64      	subs	r4, r4, r5
 8007938:	10a4      	asrs	r4, r4, #2
 800793a:	2600      	movs	r6, #0
 800793c:	42a6      	cmp	r6, r4
 800793e:	d109      	bne.n	8007954 <__libc_init_array+0x24>
 8007940:	4d0b      	ldr	r5, [pc, #44]	@ (8007970 <__libc_init_array+0x40>)
 8007942:	4c0c      	ldr	r4, [pc, #48]	@ (8007974 <__libc_init_array+0x44>)
 8007944:	f000 fdb6 	bl	80084b4 <_init>
 8007948:	1b64      	subs	r4, r4, r5
 800794a:	10a4      	asrs	r4, r4, #2
 800794c:	2600      	movs	r6, #0
 800794e:	42a6      	cmp	r6, r4
 8007950:	d105      	bne.n	800795e <__libc_init_array+0x2e>
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	f855 3b04 	ldr.w	r3, [r5], #4
 8007958:	4798      	blx	r3
 800795a:	3601      	adds	r6, #1
 800795c:	e7ee      	b.n	800793c <__libc_init_array+0xc>
 800795e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007962:	4798      	blx	r3
 8007964:	3601      	adds	r6, #1
 8007966:	e7f2      	b.n	800794e <__libc_init_array+0x1e>
 8007968:	08009e7c 	.word	0x08009e7c
 800796c:	08009e7c 	.word	0x08009e7c
 8007970:	08009e7c 	.word	0x08009e7c
 8007974:	08009e80 	.word	0x08009e80

08007978 <__retarget_lock_init_recursive>:
 8007978:	4770      	bx	lr

0800797a <__retarget_lock_acquire_recursive>:
 800797a:	4770      	bx	lr

0800797c <__retarget_lock_release_recursive>:
 800797c:	4770      	bx	lr
	...

08007980 <_free_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4605      	mov	r5, r0
 8007984:	2900      	cmp	r1, #0
 8007986:	d041      	beq.n	8007a0c <_free_r+0x8c>
 8007988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800798c:	1f0c      	subs	r4, r1, #4
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfb8      	it	lt
 8007992:	18e4      	addlt	r4, r4, r3
 8007994:	f000 f8e0 	bl	8007b58 <__malloc_lock>
 8007998:	4a1d      	ldr	r2, [pc, #116]	@ (8007a10 <_free_r+0x90>)
 800799a:	6813      	ldr	r3, [r2, #0]
 800799c:	b933      	cbnz	r3, 80079ac <_free_r+0x2c>
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	6014      	str	r4, [r2, #0]
 80079a2:	4628      	mov	r0, r5
 80079a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a8:	f000 b8dc 	b.w	8007b64 <__malloc_unlock>
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	d908      	bls.n	80079c2 <_free_r+0x42>
 80079b0:	6820      	ldr	r0, [r4, #0]
 80079b2:	1821      	adds	r1, r4, r0
 80079b4:	428b      	cmp	r3, r1
 80079b6:	bf01      	itttt	eq
 80079b8:	6819      	ldreq	r1, [r3, #0]
 80079ba:	685b      	ldreq	r3, [r3, #4]
 80079bc:	1809      	addeq	r1, r1, r0
 80079be:	6021      	streq	r1, [r4, #0]
 80079c0:	e7ed      	b.n	800799e <_free_r+0x1e>
 80079c2:	461a      	mov	r2, r3
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	b10b      	cbz	r3, 80079cc <_free_r+0x4c>
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	d9fa      	bls.n	80079c2 <_free_r+0x42>
 80079cc:	6811      	ldr	r1, [r2, #0]
 80079ce:	1850      	adds	r0, r2, r1
 80079d0:	42a0      	cmp	r0, r4
 80079d2:	d10b      	bne.n	80079ec <_free_r+0x6c>
 80079d4:	6820      	ldr	r0, [r4, #0]
 80079d6:	4401      	add	r1, r0
 80079d8:	1850      	adds	r0, r2, r1
 80079da:	4283      	cmp	r3, r0
 80079dc:	6011      	str	r1, [r2, #0]
 80079de:	d1e0      	bne.n	80079a2 <_free_r+0x22>
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	6053      	str	r3, [r2, #4]
 80079e6:	4408      	add	r0, r1
 80079e8:	6010      	str	r0, [r2, #0]
 80079ea:	e7da      	b.n	80079a2 <_free_r+0x22>
 80079ec:	d902      	bls.n	80079f4 <_free_r+0x74>
 80079ee:	230c      	movs	r3, #12
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	e7d6      	b.n	80079a2 <_free_r+0x22>
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	1821      	adds	r1, r4, r0
 80079f8:	428b      	cmp	r3, r1
 80079fa:	bf04      	itt	eq
 80079fc:	6819      	ldreq	r1, [r3, #0]
 80079fe:	685b      	ldreq	r3, [r3, #4]
 8007a00:	6063      	str	r3, [r4, #4]
 8007a02:	bf04      	itt	eq
 8007a04:	1809      	addeq	r1, r1, r0
 8007a06:	6021      	streq	r1, [r4, #0]
 8007a08:	6054      	str	r4, [r2, #4]
 8007a0a:	e7ca      	b.n	80079a2 <_free_r+0x22>
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	24000330 	.word	0x24000330

08007a14 <sbrk_aligned>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4e0f      	ldr	r6, [pc, #60]	@ (8007a54 <sbrk_aligned+0x40>)
 8007a18:	460c      	mov	r4, r1
 8007a1a:	6831      	ldr	r1, [r6, #0]
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	b911      	cbnz	r1, 8007a26 <sbrk_aligned+0x12>
 8007a20:	f000 fcb4 	bl	800838c <_sbrk_r>
 8007a24:	6030      	str	r0, [r6, #0]
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 fcaf 	bl	800838c <_sbrk_r>
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	d103      	bne.n	8007a3a <sbrk_aligned+0x26>
 8007a32:	f04f 34ff 	mov.w	r4, #4294967295
 8007a36:	4620      	mov	r0, r4
 8007a38:	bd70      	pop	{r4, r5, r6, pc}
 8007a3a:	1cc4      	adds	r4, r0, #3
 8007a3c:	f024 0403 	bic.w	r4, r4, #3
 8007a40:	42a0      	cmp	r0, r4
 8007a42:	d0f8      	beq.n	8007a36 <sbrk_aligned+0x22>
 8007a44:	1a21      	subs	r1, r4, r0
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 fca0 	bl	800838c <_sbrk_r>
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d1f2      	bne.n	8007a36 <sbrk_aligned+0x22>
 8007a50:	e7ef      	b.n	8007a32 <sbrk_aligned+0x1e>
 8007a52:	bf00      	nop
 8007a54:	2400032c 	.word	0x2400032c

08007a58 <_malloc_r>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	1ccd      	adds	r5, r1, #3
 8007a5e:	f025 0503 	bic.w	r5, r5, #3
 8007a62:	3508      	adds	r5, #8
 8007a64:	2d0c      	cmp	r5, #12
 8007a66:	bf38      	it	cc
 8007a68:	250c      	movcc	r5, #12
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	db01      	blt.n	8007a74 <_malloc_r+0x1c>
 8007a70:	42a9      	cmp	r1, r5
 8007a72:	d904      	bls.n	8007a7e <_malloc_r+0x26>
 8007a74:	230c      	movs	r3, #12
 8007a76:	6033      	str	r3, [r6, #0]
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b54 <_malloc_r+0xfc>
 8007a82:	f000 f869 	bl	8007b58 <__malloc_lock>
 8007a86:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8a:	461c      	mov	r4, r3
 8007a8c:	bb44      	cbnz	r4, 8007ae0 <_malloc_r+0x88>
 8007a8e:	4629      	mov	r1, r5
 8007a90:	4630      	mov	r0, r6
 8007a92:	f7ff ffbf 	bl	8007a14 <sbrk_aligned>
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	4604      	mov	r4, r0
 8007a9a:	d158      	bne.n	8007b4e <_malloc_r+0xf6>
 8007a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007aa0:	4627      	mov	r7, r4
 8007aa2:	2f00      	cmp	r7, #0
 8007aa4:	d143      	bne.n	8007b2e <_malloc_r+0xd6>
 8007aa6:	2c00      	cmp	r4, #0
 8007aa8:	d04b      	beq.n	8007b42 <_malloc_r+0xea>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	4639      	mov	r1, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	eb04 0903 	add.w	r9, r4, r3
 8007ab4:	f000 fc6a 	bl	800838c <_sbrk_r>
 8007ab8:	4581      	cmp	r9, r0
 8007aba:	d142      	bne.n	8007b42 <_malloc_r+0xea>
 8007abc:	6821      	ldr	r1, [r4, #0]
 8007abe:	1a6d      	subs	r5, r5, r1
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ffa6 	bl	8007a14 <sbrk_aligned>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d03a      	beq.n	8007b42 <_malloc_r+0xea>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	442b      	add	r3, r5
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	bb62      	cbnz	r2, 8007b34 <_malloc_r+0xdc>
 8007ada:	f8c8 7000 	str.w	r7, [r8]
 8007ade:	e00f      	b.n	8007b00 <_malloc_r+0xa8>
 8007ae0:	6822      	ldr	r2, [r4, #0]
 8007ae2:	1b52      	subs	r2, r2, r5
 8007ae4:	d420      	bmi.n	8007b28 <_malloc_r+0xd0>
 8007ae6:	2a0b      	cmp	r2, #11
 8007ae8:	d917      	bls.n	8007b1a <_malloc_r+0xc2>
 8007aea:	1961      	adds	r1, r4, r5
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	6025      	str	r5, [r4, #0]
 8007af0:	bf18      	it	ne
 8007af2:	6059      	strne	r1, [r3, #4]
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	bf08      	it	eq
 8007af8:	f8c8 1000 	streq.w	r1, [r8]
 8007afc:	5162      	str	r2, [r4, r5]
 8007afe:	604b      	str	r3, [r1, #4]
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f82f 	bl	8007b64 <__malloc_unlock>
 8007b06:	f104 000b 	add.w	r0, r4, #11
 8007b0a:	1d23      	adds	r3, r4, #4
 8007b0c:	f020 0007 	bic.w	r0, r0, #7
 8007b10:	1ac2      	subs	r2, r0, r3
 8007b12:	bf1c      	itt	ne
 8007b14:	1a1b      	subne	r3, r3, r0
 8007b16:	50a3      	strne	r3, [r4, r2]
 8007b18:	e7af      	b.n	8007a7a <_malloc_r+0x22>
 8007b1a:	6862      	ldr	r2, [r4, #4]
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	bf0c      	ite	eq
 8007b20:	f8c8 2000 	streq.w	r2, [r8]
 8007b24:	605a      	strne	r2, [r3, #4]
 8007b26:	e7eb      	b.n	8007b00 <_malloc_r+0xa8>
 8007b28:	4623      	mov	r3, r4
 8007b2a:	6864      	ldr	r4, [r4, #4]
 8007b2c:	e7ae      	b.n	8007a8c <_malloc_r+0x34>
 8007b2e:	463c      	mov	r4, r7
 8007b30:	687f      	ldr	r7, [r7, #4]
 8007b32:	e7b6      	b.n	8007aa2 <_malloc_r+0x4a>
 8007b34:	461a      	mov	r2, r3
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d1fb      	bne.n	8007b34 <_malloc_r+0xdc>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	6053      	str	r3, [r2, #4]
 8007b40:	e7de      	b.n	8007b00 <_malloc_r+0xa8>
 8007b42:	230c      	movs	r3, #12
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 f80c 	bl	8007b64 <__malloc_unlock>
 8007b4c:	e794      	b.n	8007a78 <_malloc_r+0x20>
 8007b4e:	6005      	str	r5, [r0, #0]
 8007b50:	e7d6      	b.n	8007b00 <_malloc_r+0xa8>
 8007b52:	bf00      	nop
 8007b54:	24000330 	.word	0x24000330

08007b58 <__malloc_lock>:
 8007b58:	4801      	ldr	r0, [pc, #4]	@ (8007b60 <__malloc_lock+0x8>)
 8007b5a:	f7ff bf0e 	b.w	800797a <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	24000328 	.word	0x24000328

08007b64 <__malloc_unlock>:
 8007b64:	4801      	ldr	r0, [pc, #4]	@ (8007b6c <__malloc_unlock+0x8>)
 8007b66:	f7ff bf09 	b.w	800797c <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	24000328 	.word	0x24000328

08007b70 <__sfputc_r>:
 8007b70:	6893      	ldr	r3, [r2, #8]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	b410      	push	{r4}
 8007b78:	6093      	str	r3, [r2, #8]
 8007b7a:	da08      	bge.n	8007b8e <__sfputc_r+0x1e>
 8007b7c:	6994      	ldr	r4, [r2, #24]
 8007b7e:	42a3      	cmp	r3, r4
 8007b80:	db01      	blt.n	8007b86 <__sfputc_r+0x16>
 8007b82:	290a      	cmp	r1, #10
 8007b84:	d103      	bne.n	8007b8e <__sfputc_r+0x1e>
 8007b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8a:	f000 bb6b 	b.w	8008264 <__swbuf_r>
 8007b8e:	6813      	ldr	r3, [r2, #0]
 8007b90:	1c58      	adds	r0, r3, #1
 8007b92:	6010      	str	r0, [r2, #0]
 8007b94:	7019      	strb	r1, [r3, #0]
 8007b96:	4608      	mov	r0, r1
 8007b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <__sfputs_r>:
 8007b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	18d5      	adds	r5, r2, r3
 8007ba8:	42ac      	cmp	r4, r5
 8007baa:	d101      	bne.n	8007bb0 <__sfputs_r+0x12>
 8007bac:	2000      	movs	r0, #0
 8007bae:	e007      	b.n	8007bc0 <__sfputs_r+0x22>
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	463a      	mov	r2, r7
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7ff ffda 	bl	8007b70 <__sfputc_r>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d1f3      	bne.n	8007ba8 <__sfputs_r+0xa>
 8007bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bc4 <_vfiprintf_r>:
 8007bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	460d      	mov	r5, r1
 8007bca:	b09d      	sub	sp, #116	@ 0x74
 8007bcc:	4614      	mov	r4, r2
 8007bce:	4698      	mov	r8, r3
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	b118      	cbz	r0, 8007bdc <_vfiprintf_r+0x18>
 8007bd4:	6a03      	ldr	r3, [r0, #32]
 8007bd6:	b90b      	cbnz	r3, 8007bdc <_vfiprintf_r+0x18>
 8007bd8:	f7ff fdca 	bl	8007770 <__sinit>
 8007bdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bde:	07d9      	lsls	r1, r3, #31
 8007be0:	d405      	bmi.n	8007bee <_vfiprintf_r+0x2a>
 8007be2:	89ab      	ldrh	r3, [r5, #12]
 8007be4:	059a      	lsls	r2, r3, #22
 8007be6:	d402      	bmi.n	8007bee <_vfiprintf_r+0x2a>
 8007be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bea:	f7ff fec6 	bl	800797a <__retarget_lock_acquire_recursive>
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	071b      	lsls	r3, r3, #28
 8007bf2:	d501      	bpl.n	8007bf8 <_vfiprintf_r+0x34>
 8007bf4:	692b      	ldr	r3, [r5, #16]
 8007bf6:	b99b      	cbnz	r3, 8007c20 <_vfiprintf_r+0x5c>
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 fb70 	bl	80082e0 <__swsetup_r>
 8007c00:	b170      	cbz	r0, 8007c20 <_vfiprintf_r+0x5c>
 8007c02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c04:	07dc      	lsls	r4, r3, #31
 8007c06:	d504      	bpl.n	8007c12 <_vfiprintf_r+0x4e>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	b01d      	add	sp, #116	@ 0x74
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	0598      	lsls	r0, r3, #22
 8007c16:	d4f7      	bmi.n	8007c08 <_vfiprintf_r+0x44>
 8007c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c1a:	f7ff feaf 	bl	800797c <__retarget_lock_release_recursive>
 8007c1e:	e7f3      	b.n	8007c08 <_vfiprintf_r+0x44>
 8007c20:	2300      	movs	r3, #0
 8007c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c24:	2320      	movs	r3, #32
 8007c26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c2e:	2330      	movs	r3, #48	@ 0x30
 8007c30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007de0 <_vfiprintf_r+0x21c>
 8007c34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c38:	f04f 0901 	mov.w	r9, #1
 8007c3c:	4623      	mov	r3, r4
 8007c3e:	469a      	mov	sl, r3
 8007c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c44:	b10a      	cbz	r2, 8007c4a <_vfiprintf_r+0x86>
 8007c46:	2a25      	cmp	r2, #37	@ 0x25
 8007c48:	d1f9      	bne.n	8007c3e <_vfiprintf_r+0x7a>
 8007c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c4e:	d00b      	beq.n	8007c68 <_vfiprintf_r+0xa4>
 8007c50:	465b      	mov	r3, fp
 8007c52:	4622      	mov	r2, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff ffa1 	bl	8007b9e <__sfputs_r>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f000 80a7 	beq.w	8007db0 <_vfiprintf_r+0x1ec>
 8007c62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c64:	445a      	add	r2, fp
 8007c66:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c68:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 809f 	beq.w	8007db0 <_vfiprintf_r+0x1ec>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c7c:	f10a 0a01 	add.w	sl, sl, #1
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	9307      	str	r3, [sp, #28]
 8007c84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c88:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c8a:	4654      	mov	r4, sl
 8007c8c:	2205      	movs	r2, #5
 8007c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c92:	4853      	ldr	r0, [pc, #332]	@ (8007de0 <_vfiprintf_r+0x21c>)
 8007c94:	f7f8 fb24 	bl	80002e0 <memchr>
 8007c98:	9a04      	ldr	r2, [sp, #16]
 8007c9a:	b9d8      	cbnz	r0, 8007cd4 <_vfiprintf_r+0x110>
 8007c9c:	06d1      	lsls	r1, r2, #27
 8007c9e:	bf44      	itt	mi
 8007ca0:	2320      	movmi	r3, #32
 8007ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca6:	0713      	lsls	r3, r2, #28
 8007ca8:	bf44      	itt	mi
 8007caa:	232b      	movmi	r3, #43	@ 0x2b
 8007cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cb6:	d015      	beq.n	8007ce4 <_vfiprintf_r+0x120>
 8007cb8:	9a07      	ldr	r2, [sp, #28]
 8007cba:	4654      	mov	r4, sl
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f04f 0c0a 	mov.w	ip, #10
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc8:	3b30      	subs	r3, #48	@ 0x30
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	d94b      	bls.n	8007d66 <_vfiprintf_r+0x1a2>
 8007cce:	b1b0      	cbz	r0, 8007cfe <_vfiprintf_r+0x13a>
 8007cd0:	9207      	str	r2, [sp, #28]
 8007cd2:	e014      	b.n	8007cfe <_vfiprintf_r+0x13a>
 8007cd4:	eba0 0308 	sub.w	r3, r0, r8
 8007cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	9304      	str	r3, [sp, #16]
 8007ce0:	46a2      	mov	sl, r4
 8007ce2:	e7d2      	b.n	8007c8a <_vfiprintf_r+0xc6>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	1d19      	adds	r1, r3, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	9103      	str	r1, [sp, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfbb      	ittet	lt
 8007cf0:	425b      	neglt	r3, r3
 8007cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf6:	9307      	strge	r3, [sp, #28]
 8007cf8:	9307      	strlt	r3, [sp, #28]
 8007cfa:	bfb8      	it	lt
 8007cfc:	9204      	strlt	r2, [sp, #16]
 8007cfe:	7823      	ldrb	r3, [r4, #0]
 8007d00:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d02:	d10a      	bne.n	8007d1a <_vfiprintf_r+0x156>
 8007d04:	7863      	ldrb	r3, [r4, #1]
 8007d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d08:	d132      	bne.n	8007d70 <_vfiprintf_r+0x1ac>
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	9203      	str	r2, [sp, #12]
 8007d12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d16:	3402      	adds	r4, #2
 8007d18:	9305      	str	r3, [sp, #20]
 8007d1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007df0 <_vfiprintf_r+0x22c>
 8007d1e:	7821      	ldrb	r1, [r4, #0]
 8007d20:	2203      	movs	r2, #3
 8007d22:	4650      	mov	r0, sl
 8007d24:	f7f8 fadc 	bl	80002e0 <memchr>
 8007d28:	b138      	cbz	r0, 8007d3a <_vfiprintf_r+0x176>
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	eba0 000a 	sub.w	r0, r0, sl
 8007d30:	2240      	movs	r2, #64	@ 0x40
 8007d32:	4082      	lsls	r2, r0
 8007d34:	4313      	orrs	r3, r2
 8007d36:	3401      	adds	r4, #1
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3e:	4829      	ldr	r0, [pc, #164]	@ (8007de4 <_vfiprintf_r+0x220>)
 8007d40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d44:	2206      	movs	r2, #6
 8007d46:	f7f8 facb 	bl	80002e0 <memchr>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d03f      	beq.n	8007dce <_vfiprintf_r+0x20a>
 8007d4e:	4b26      	ldr	r3, [pc, #152]	@ (8007de8 <_vfiprintf_r+0x224>)
 8007d50:	bb1b      	cbnz	r3, 8007d9a <_vfiprintf_r+0x1d6>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	3307      	adds	r3, #7
 8007d56:	f023 0307 	bic.w	r3, r3, #7
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	9303      	str	r3, [sp, #12]
 8007d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d60:	443b      	add	r3, r7
 8007d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d64:	e76a      	b.n	8007c3c <_vfiprintf_r+0x78>
 8007d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	2001      	movs	r0, #1
 8007d6e:	e7a8      	b.n	8007cc2 <_vfiprintf_r+0xfe>
 8007d70:	2300      	movs	r3, #0
 8007d72:	3401      	adds	r4, #1
 8007d74:	9305      	str	r3, [sp, #20]
 8007d76:	4619      	mov	r1, r3
 8007d78:	f04f 0c0a 	mov.w	ip, #10
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d82:	3a30      	subs	r2, #48	@ 0x30
 8007d84:	2a09      	cmp	r2, #9
 8007d86:	d903      	bls.n	8007d90 <_vfiprintf_r+0x1cc>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0c6      	beq.n	8007d1a <_vfiprintf_r+0x156>
 8007d8c:	9105      	str	r1, [sp, #20]
 8007d8e:	e7c4      	b.n	8007d1a <_vfiprintf_r+0x156>
 8007d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d94:	4604      	mov	r4, r0
 8007d96:	2301      	movs	r3, #1
 8007d98:	e7f0      	b.n	8007d7c <_vfiprintf_r+0x1b8>
 8007d9a:	ab03      	add	r3, sp, #12
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	462a      	mov	r2, r5
 8007da0:	4b12      	ldr	r3, [pc, #72]	@ (8007dec <_vfiprintf_r+0x228>)
 8007da2:	a904      	add	r1, sp, #16
 8007da4:	4630      	mov	r0, r6
 8007da6:	f3af 8000 	nop.w
 8007daa:	4607      	mov	r7, r0
 8007dac:	1c78      	adds	r0, r7, #1
 8007dae:	d1d6      	bne.n	8007d5e <_vfiprintf_r+0x19a>
 8007db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	d405      	bmi.n	8007dc2 <_vfiprintf_r+0x1fe>
 8007db6:	89ab      	ldrh	r3, [r5, #12]
 8007db8:	059a      	lsls	r2, r3, #22
 8007dba:	d402      	bmi.n	8007dc2 <_vfiprintf_r+0x1fe>
 8007dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dbe:	f7ff fddd 	bl	800797c <__retarget_lock_release_recursive>
 8007dc2:	89ab      	ldrh	r3, [r5, #12]
 8007dc4:	065b      	lsls	r3, r3, #25
 8007dc6:	f53f af1f 	bmi.w	8007c08 <_vfiprintf_r+0x44>
 8007dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dcc:	e71e      	b.n	8007c0c <_vfiprintf_r+0x48>
 8007dce:	ab03      	add	r3, sp, #12
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	4b05      	ldr	r3, [pc, #20]	@ (8007dec <_vfiprintf_r+0x228>)
 8007dd6:	a904      	add	r1, sp, #16
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 f879 	bl	8007ed0 <_printf_i>
 8007dde:	e7e4      	b.n	8007daa <_vfiprintf_r+0x1e6>
 8007de0:	08009e40 	.word	0x08009e40
 8007de4:	08009e4a 	.word	0x08009e4a
 8007de8:	00000000 	.word	0x00000000
 8007dec:	08007b9f 	.word	0x08007b9f
 8007df0:	08009e46 	.word	0x08009e46

08007df4 <_printf_common>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	4616      	mov	r6, r2
 8007dfa:	4698      	mov	r8, r3
 8007dfc:	688a      	ldr	r2, [r1, #8]
 8007dfe:	690b      	ldr	r3, [r1, #16]
 8007e00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e04:	4293      	cmp	r3, r2
 8007e06:	bfb8      	it	lt
 8007e08:	4613      	movlt	r3, r2
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e10:	4607      	mov	r7, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	b10a      	cbz	r2, 8007e1a <_printf_common+0x26>
 8007e16:	3301      	adds	r3, #1
 8007e18:	6033      	str	r3, [r6, #0]
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	0699      	lsls	r1, r3, #26
 8007e1e:	bf42      	ittt	mi
 8007e20:	6833      	ldrmi	r3, [r6, #0]
 8007e22:	3302      	addmi	r3, #2
 8007e24:	6033      	strmi	r3, [r6, #0]
 8007e26:	6825      	ldr	r5, [r4, #0]
 8007e28:	f015 0506 	ands.w	r5, r5, #6
 8007e2c:	d106      	bne.n	8007e3c <_printf_common+0x48>
 8007e2e:	f104 0a19 	add.w	sl, r4, #25
 8007e32:	68e3      	ldr	r3, [r4, #12]
 8007e34:	6832      	ldr	r2, [r6, #0]
 8007e36:	1a9b      	subs	r3, r3, r2
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	dc26      	bgt.n	8007e8a <_printf_common+0x96>
 8007e3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	3b00      	subs	r3, #0
 8007e44:	bf18      	it	ne
 8007e46:	2301      	movne	r3, #1
 8007e48:	0692      	lsls	r2, r2, #26
 8007e4a:	d42b      	bmi.n	8007ea4 <_printf_common+0xb0>
 8007e4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e50:	4641      	mov	r1, r8
 8007e52:	4638      	mov	r0, r7
 8007e54:	47c8      	blx	r9
 8007e56:	3001      	adds	r0, #1
 8007e58:	d01e      	beq.n	8007e98 <_printf_common+0xa4>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	6922      	ldr	r2, [r4, #16]
 8007e5e:	f003 0306 	and.w	r3, r3, #6
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	bf02      	ittt	eq
 8007e66:	68e5      	ldreq	r5, [r4, #12]
 8007e68:	6833      	ldreq	r3, [r6, #0]
 8007e6a:	1aed      	subeq	r5, r5, r3
 8007e6c:	68a3      	ldr	r3, [r4, #8]
 8007e6e:	bf0c      	ite	eq
 8007e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e74:	2500      	movne	r5, #0
 8007e76:	4293      	cmp	r3, r2
 8007e78:	bfc4      	itt	gt
 8007e7a:	1a9b      	subgt	r3, r3, r2
 8007e7c:	18ed      	addgt	r5, r5, r3
 8007e7e:	2600      	movs	r6, #0
 8007e80:	341a      	adds	r4, #26
 8007e82:	42b5      	cmp	r5, r6
 8007e84:	d11a      	bne.n	8007ebc <_printf_common+0xc8>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e008      	b.n	8007e9c <_printf_common+0xa8>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	4641      	mov	r1, r8
 8007e90:	4638      	mov	r0, r7
 8007e92:	47c8      	blx	r9
 8007e94:	3001      	adds	r0, #1
 8007e96:	d103      	bne.n	8007ea0 <_printf_common+0xac>
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea0:	3501      	adds	r5, #1
 8007ea2:	e7c6      	b.n	8007e32 <_printf_common+0x3e>
 8007ea4:	18e1      	adds	r1, r4, r3
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	2030      	movs	r0, #48	@ 0x30
 8007eaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007eae:	4422      	add	r2, r4
 8007eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007eb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007eb8:	3302      	adds	r3, #2
 8007eba:	e7c7      	b.n	8007e4c <_printf_common+0x58>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	47c8      	blx	r9
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d0e6      	beq.n	8007e98 <_printf_common+0xa4>
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7d9      	b.n	8007e82 <_printf_common+0x8e>
	...

08007ed0 <_printf_i>:
 8007ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	7e0f      	ldrb	r7, [r1, #24]
 8007ed6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ed8:	2f78      	cmp	r7, #120	@ 0x78
 8007eda:	4691      	mov	r9, r2
 8007edc:	4680      	mov	r8, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	469a      	mov	sl, r3
 8007ee2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ee6:	d807      	bhi.n	8007ef8 <_printf_i+0x28>
 8007ee8:	2f62      	cmp	r7, #98	@ 0x62
 8007eea:	d80a      	bhi.n	8007f02 <_printf_i+0x32>
 8007eec:	2f00      	cmp	r7, #0
 8007eee:	f000 80d1 	beq.w	8008094 <_printf_i+0x1c4>
 8007ef2:	2f58      	cmp	r7, #88	@ 0x58
 8007ef4:	f000 80b8 	beq.w	8008068 <_printf_i+0x198>
 8007ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007efc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f00:	e03a      	b.n	8007f78 <_printf_i+0xa8>
 8007f02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f06:	2b15      	cmp	r3, #21
 8007f08:	d8f6      	bhi.n	8007ef8 <_printf_i+0x28>
 8007f0a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f10 <_printf_i+0x40>)
 8007f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f10:	08007f69 	.word	0x08007f69
 8007f14:	08007f7d 	.word	0x08007f7d
 8007f18:	08007ef9 	.word	0x08007ef9
 8007f1c:	08007ef9 	.word	0x08007ef9
 8007f20:	08007ef9 	.word	0x08007ef9
 8007f24:	08007ef9 	.word	0x08007ef9
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007ef9 	.word	0x08007ef9
 8007f30:	08007ef9 	.word	0x08007ef9
 8007f34:	08007ef9 	.word	0x08007ef9
 8007f38:	08007ef9 	.word	0x08007ef9
 8007f3c:	0800807b 	.word	0x0800807b
 8007f40:	08007fa7 	.word	0x08007fa7
 8007f44:	08008035 	.word	0x08008035
 8007f48:	08007ef9 	.word	0x08007ef9
 8007f4c:	08007ef9 	.word	0x08007ef9
 8007f50:	0800809d 	.word	0x0800809d
 8007f54:	08007ef9 	.word	0x08007ef9
 8007f58:	08007fa7 	.word	0x08007fa7
 8007f5c:	08007ef9 	.word	0x08007ef9
 8007f60:	08007ef9 	.word	0x08007ef9
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	1d1a      	adds	r2, r3, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6032      	str	r2, [r6, #0]
 8007f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e09c      	b.n	80080b6 <_printf_i+0x1e6>
 8007f7c:	6833      	ldr	r3, [r6, #0]
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	1d19      	adds	r1, r3, #4
 8007f82:	6031      	str	r1, [r6, #0]
 8007f84:	0606      	lsls	r6, r0, #24
 8007f86:	d501      	bpl.n	8007f8c <_printf_i+0xbc>
 8007f88:	681d      	ldr	r5, [r3, #0]
 8007f8a:	e003      	b.n	8007f94 <_printf_i+0xc4>
 8007f8c:	0645      	lsls	r5, r0, #25
 8007f8e:	d5fb      	bpl.n	8007f88 <_printf_i+0xb8>
 8007f90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f94:	2d00      	cmp	r5, #0
 8007f96:	da03      	bge.n	8007fa0 <_printf_i+0xd0>
 8007f98:	232d      	movs	r3, #45	@ 0x2d
 8007f9a:	426d      	negs	r5, r5
 8007f9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fa0:	4858      	ldr	r0, [pc, #352]	@ (8008104 <_printf_i+0x234>)
 8007fa2:	230a      	movs	r3, #10
 8007fa4:	e011      	b.n	8007fca <_printf_i+0xfa>
 8007fa6:	6821      	ldr	r1, [r4, #0]
 8007fa8:	6833      	ldr	r3, [r6, #0]
 8007faa:	0608      	lsls	r0, r1, #24
 8007fac:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fb0:	d402      	bmi.n	8007fb8 <_printf_i+0xe8>
 8007fb2:	0649      	lsls	r1, r1, #25
 8007fb4:	bf48      	it	mi
 8007fb6:	b2ad      	uxthmi	r5, r5
 8007fb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fba:	4852      	ldr	r0, [pc, #328]	@ (8008104 <_printf_i+0x234>)
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	bf14      	ite	ne
 8007fc0:	230a      	movne	r3, #10
 8007fc2:	2308      	moveq	r3, #8
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fca:	6866      	ldr	r6, [r4, #4]
 8007fcc:	60a6      	str	r6, [r4, #8]
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	db05      	blt.n	8007fde <_printf_i+0x10e>
 8007fd2:	6821      	ldr	r1, [r4, #0]
 8007fd4:	432e      	orrs	r6, r5
 8007fd6:	f021 0104 	bic.w	r1, r1, #4
 8007fda:	6021      	str	r1, [r4, #0]
 8007fdc:	d04b      	beq.n	8008076 <_printf_i+0x1a6>
 8007fde:	4616      	mov	r6, r2
 8007fe0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fe4:	fb03 5711 	mls	r7, r3, r1, r5
 8007fe8:	5dc7      	ldrb	r7, [r0, r7]
 8007fea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fee:	462f      	mov	r7, r5
 8007ff0:	42bb      	cmp	r3, r7
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	d9f4      	bls.n	8007fe0 <_printf_i+0x110>
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d10b      	bne.n	8008012 <_printf_i+0x142>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	07df      	lsls	r7, r3, #31
 8007ffe:	d508      	bpl.n	8008012 <_printf_i+0x142>
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	6861      	ldr	r1, [r4, #4]
 8008004:	4299      	cmp	r1, r3
 8008006:	bfde      	ittt	le
 8008008:	2330      	movle	r3, #48	@ 0x30
 800800a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800800e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008012:	1b92      	subs	r2, r2, r6
 8008014:	6122      	str	r2, [r4, #16]
 8008016:	f8cd a000 	str.w	sl, [sp]
 800801a:	464b      	mov	r3, r9
 800801c:	aa03      	add	r2, sp, #12
 800801e:	4621      	mov	r1, r4
 8008020:	4640      	mov	r0, r8
 8008022:	f7ff fee7 	bl	8007df4 <_printf_common>
 8008026:	3001      	adds	r0, #1
 8008028:	d14a      	bne.n	80080c0 <_printf_i+0x1f0>
 800802a:	f04f 30ff 	mov.w	r0, #4294967295
 800802e:	b004      	add	sp, #16
 8008030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	f043 0320 	orr.w	r3, r3, #32
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	4832      	ldr	r0, [pc, #200]	@ (8008108 <_printf_i+0x238>)
 800803e:	2778      	movs	r7, #120	@ 0x78
 8008040:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	6831      	ldr	r1, [r6, #0]
 8008048:	061f      	lsls	r7, r3, #24
 800804a:	f851 5b04 	ldr.w	r5, [r1], #4
 800804e:	d402      	bmi.n	8008056 <_printf_i+0x186>
 8008050:	065f      	lsls	r7, r3, #25
 8008052:	bf48      	it	mi
 8008054:	b2ad      	uxthmi	r5, r5
 8008056:	6031      	str	r1, [r6, #0]
 8008058:	07d9      	lsls	r1, r3, #31
 800805a:	bf44      	itt	mi
 800805c:	f043 0320 	orrmi.w	r3, r3, #32
 8008060:	6023      	strmi	r3, [r4, #0]
 8008062:	b11d      	cbz	r5, 800806c <_printf_i+0x19c>
 8008064:	2310      	movs	r3, #16
 8008066:	e7ad      	b.n	8007fc4 <_printf_i+0xf4>
 8008068:	4826      	ldr	r0, [pc, #152]	@ (8008104 <_printf_i+0x234>)
 800806a:	e7e9      	b.n	8008040 <_printf_i+0x170>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	f023 0320 	bic.w	r3, r3, #32
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	e7f6      	b.n	8008064 <_printf_i+0x194>
 8008076:	4616      	mov	r6, r2
 8008078:	e7bd      	b.n	8007ff6 <_printf_i+0x126>
 800807a:	6833      	ldr	r3, [r6, #0]
 800807c:	6825      	ldr	r5, [r4, #0]
 800807e:	6961      	ldr	r1, [r4, #20]
 8008080:	1d18      	adds	r0, r3, #4
 8008082:	6030      	str	r0, [r6, #0]
 8008084:	062e      	lsls	r6, r5, #24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	d501      	bpl.n	800808e <_printf_i+0x1be>
 800808a:	6019      	str	r1, [r3, #0]
 800808c:	e002      	b.n	8008094 <_printf_i+0x1c4>
 800808e:	0668      	lsls	r0, r5, #25
 8008090:	d5fb      	bpl.n	800808a <_printf_i+0x1ba>
 8008092:	8019      	strh	r1, [r3, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	4616      	mov	r6, r2
 800809a:	e7bc      	b.n	8008016 <_printf_i+0x146>
 800809c:	6833      	ldr	r3, [r6, #0]
 800809e:	1d1a      	adds	r2, r3, #4
 80080a0:	6032      	str	r2, [r6, #0]
 80080a2:	681e      	ldr	r6, [r3, #0]
 80080a4:	6862      	ldr	r2, [r4, #4]
 80080a6:	2100      	movs	r1, #0
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7f8 f919 	bl	80002e0 <memchr>
 80080ae:	b108      	cbz	r0, 80080b4 <_printf_i+0x1e4>
 80080b0:	1b80      	subs	r0, r0, r6
 80080b2:	6060      	str	r0, [r4, #4]
 80080b4:	6863      	ldr	r3, [r4, #4]
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	2300      	movs	r3, #0
 80080ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080be:	e7aa      	b.n	8008016 <_printf_i+0x146>
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	4632      	mov	r2, r6
 80080c4:	4649      	mov	r1, r9
 80080c6:	4640      	mov	r0, r8
 80080c8:	47d0      	blx	sl
 80080ca:	3001      	adds	r0, #1
 80080cc:	d0ad      	beq.n	800802a <_printf_i+0x15a>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	079b      	lsls	r3, r3, #30
 80080d2:	d413      	bmi.n	80080fc <_printf_i+0x22c>
 80080d4:	68e0      	ldr	r0, [r4, #12]
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	4298      	cmp	r0, r3
 80080da:	bfb8      	it	lt
 80080dc:	4618      	movlt	r0, r3
 80080de:	e7a6      	b.n	800802e <_printf_i+0x15e>
 80080e0:	2301      	movs	r3, #1
 80080e2:	4632      	mov	r2, r6
 80080e4:	4649      	mov	r1, r9
 80080e6:	4640      	mov	r0, r8
 80080e8:	47d0      	blx	sl
 80080ea:	3001      	adds	r0, #1
 80080ec:	d09d      	beq.n	800802a <_printf_i+0x15a>
 80080ee:	3501      	adds	r5, #1
 80080f0:	68e3      	ldr	r3, [r4, #12]
 80080f2:	9903      	ldr	r1, [sp, #12]
 80080f4:	1a5b      	subs	r3, r3, r1
 80080f6:	42ab      	cmp	r3, r5
 80080f8:	dcf2      	bgt.n	80080e0 <_printf_i+0x210>
 80080fa:	e7eb      	b.n	80080d4 <_printf_i+0x204>
 80080fc:	2500      	movs	r5, #0
 80080fe:	f104 0619 	add.w	r6, r4, #25
 8008102:	e7f5      	b.n	80080f0 <_printf_i+0x220>
 8008104:	08009e51 	.word	0x08009e51
 8008108:	08009e62 	.word	0x08009e62

0800810c <__sflush_r>:
 800810c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	0716      	lsls	r6, r2, #28
 8008116:	4605      	mov	r5, r0
 8008118:	460c      	mov	r4, r1
 800811a:	d454      	bmi.n	80081c6 <__sflush_r+0xba>
 800811c:	684b      	ldr	r3, [r1, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	dc02      	bgt.n	8008128 <__sflush_r+0x1c>
 8008122:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	dd48      	ble.n	80081ba <__sflush_r+0xae>
 8008128:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800812a:	2e00      	cmp	r6, #0
 800812c:	d045      	beq.n	80081ba <__sflush_r+0xae>
 800812e:	2300      	movs	r3, #0
 8008130:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008134:	682f      	ldr	r7, [r5, #0]
 8008136:	6a21      	ldr	r1, [r4, #32]
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	d030      	beq.n	800819e <__sflush_r+0x92>
 800813c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	0759      	lsls	r1, r3, #29
 8008142:	d505      	bpl.n	8008150 <__sflush_r+0x44>
 8008144:	6863      	ldr	r3, [r4, #4]
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800814a:	b10b      	cbz	r3, 8008150 <__sflush_r+0x44>
 800814c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800814e:	1ad2      	subs	r2, r2, r3
 8008150:	2300      	movs	r3, #0
 8008152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	4628      	mov	r0, r5
 8008158:	47b0      	blx	r6
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	d106      	bne.n	800816e <__sflush_r+0x62>
 8008160:	6829      	ldr	r1, [r5, #0]
 8008162:	291d      	cmp	r1, #29
 8008164:	d82b      	bhi.n	80081be <__sflush_r+0xb2>
 8008166:	4a2a      	ldr	r2, [pc, #168]	@ (8008210 <__sflush_r+0x104>)
 8008168:	40ca      	lsrs	r2, r1
 800816a:	07d6      	lsls	r6, r2, #31
 800816c:	d527      	bpl.n	80081be <__sflush_r+0xb2>
 800816e:	2200      	movs	r2, #0
 8008170:	6062      	str	r2, [r4, #4]
 8008172:	04d9      	lsls	r1, r3, #19
 8008174:	6922      	ldr	r2, [r4, #16]
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	d504      	bpl.n	8008184 <__sflush_r+0x78>
 800817a:	1c42      	adds	r2, r0, #1
 800817c:	d101      	bne.n	8008182 <__sflush_r+0x76>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	b903      	cbnz	r3, 8008184 <__sflush_r+0x78>
 8008182:	6560      	str	r0, [r4, #84]	@ 0x54
 8008184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008186:	602f      	str	r7, [r5, #0]
 8008188:	b1b9      	cbz	r1, 80081ba <__sflush_r+0xae>
 800818a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800818e:	4299      	cmp	r1, r3
 8008190:	d002      	beq.n	8008198 <__sflush_r+0x8c>
 8008192:	4628      	mov	r0, r5
 8008194:	f7ff fbf4 	bl	8007980 <_free_r>
 8008198:	2300      	movs	r3, #0
 800819a:	6363      	str	r3, [r4, #52]	@ 0x34
 800819c:	e00d      	b.n	80081ba <__sflush_r+0xae>
 800819e:	2301      	movs	r3, #1
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b0      	blx	r6
 80081a4:	4602      	mov	r2, r0
 80081a6:	1c50      	adds	r0, r2, #1
 80081a8:	d1c9      	bne.n	800813e <__sflush_r+0x32>
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0c6      	beq.n	800813e <__sflush_r+0x32>
 80081b0:	2b1d      	cmp	r3, #29
 80081b2:	d001      	beq.n	80081b8 <__sflush_r+0xac>
 80081b4:	2b16      	cmp	r3, #22
 80081b6:	d11e      	bne.n	80081f6 <__sflush_r+0xea>
 80081b8:	602f      	str	r7, [r5, #0]
 80081ba:	2000      	movs	r0, #0
 80081bc:	e022      	b.n	8008204 <__sflush_r+0xf8>
 80081be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081c2:	b21b      	sxth	r3, r3
 80081c4:	e01b      	b.n	80081fe <__sflush_r+0xf2>
 80081c6:	690f      	ldr	r7, [r1, #16]
 80081c8:	2f00      	cmp	r7, #0
 80081ca:	d0f6      	beq.n	80081ba <__sflush_r+0xae>
 80081cc:	0793      	lsls	r3, r2, #30
 80081ce:	680e      	ldr	r6, [r1, #0]
 80081d0:	bf08      	it	eq
 80081d2:	694b      	ldreq	r3, [r1, #20]
 80081d4:	600f      	str	r7, [r1, #0]
 80081d6:	bf18      	it	ne
 80081d8:	2300      	movne	r3, #0
 80081da:	eba6 0807 	sub.w	r8, r6, r7
 80081de:	608b      	str	r3, [r1, #8]
 80081e0:	f1b8 0f00 	cmp.w	r8, #0
 80081e4:	dde9      	ble.n	80081ba <__sflush_r+0xae>
 80081e6:	6a21      	ldr	r1, [r4, #32]
 80081e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081ea:	4643      	mov	r3, r8
 80081ec:	463a      	mov	r2, r7
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b0      	blx	r6
 80081f2:	2800      	cmp	r0, #0
 80081f4:	dc08      	bgt.n	8008208 <__sflush_r+0xfc>
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	4407      	add	r7, r0
 800820a:	eba8 0800 	sub.w	r8, r8, r0
 800820e:	e7e7      	b.n	80081e0 <__sflush_r+0xd4>
 8008210:	20400001 	.word	0x20400001

08008214 <_fflush_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	690b      	ldr	r3, [r1, #16]
 8008218:	4605      	mov	r5, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b913      	cbnz	r3, 8008224 <_fflush_r+0x10>
 800821e:	2500      	movs	r5, #0
 8008220:	4628      	mov	r0, r5
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	b118      	cbz	r0, 800822e <_fflush_r+0x1a>
 8008226:	6a03      	ldr	r3, [r0, #32]
 8008228:	b90b      	cbnz	r3, 800822e <_fflush_r+0x1a>
 800822a:	f7ff faa1 	bl	8007770 <__sinit>
 800822e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0f3      	beq.n	800821e <_fflush_r+0xa>
 8008236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008238:	07d0      	lsls	r0, r2, #31
 800823a:	d404      	bmi.n	8008246 <_fflush_r+0x32>
 800823c:	0599      	lsls	r1, r3, #22
 800823e:	d402      	bmi.n	8008246 <_fflush_r+0x32>
 8008240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008242:	f7ff fb9a 	bl	800797a <__retarget_lock_acquire_recursive>
 8008246:	4628      	mov	r0, r5
 8008248:	4621      	mov	r1, r4
 800824a:	f7ff ff5f 	bl	800810c <__sflush_r>
 800824e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008250:	07da      	lsls	r2, r3, #31
 8008252:	4605      	mov	r5, r0
 8008254:	d4e4      	bmi.n	8008220 <_fflush_r+0xc>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	059b      	lsls	r3, r3, #22
 800825a:	d4e1      	bmi.n	8008220 <_fflush_r+0xc>
 800825c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800825e:	f7ff fb8d 	bl	800797c <__retarget_lock_release_recursive>
 8008262:	e7dd      	b.n	8008220 <_fflush_r+0xc>

08008264 <__swbuf_r>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	460e      	mov	r6, r1
 8008268:	4614      	mov	r4, r2
 800826a:	4605      	mov	r5, r0
 800826c:	b118      	cbz	r0, 8008276 <__swbuf_r+0x12>
 800826e:	6a03      	ldr	r3, [r0, #32]
 8008270:	b90b      	cbnz	r3, 8008276 <__swbuf_r+0x12>
 8008272:	f7ff fa7d 	bl	8007770 <__sinit>
 8008276:	69a3      	ldr	r3, [r4, #24]
 8008278:	60a3      	str	r3, [r4, #8]
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	071a      	lsls	r2, r3, #28
 800827e:	d501      	bpl.n	8008284 <__swbuf_r+0x20>
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	b943      	cbnz	r3, 8008296 <__swbuf_r+0x32>
 8008284:	4621      	mov	r1, r4
 8008286:	4628      	mov	r0, r5
 8008288:	f000 f82a 	bl	80082e0 <__swsetup_r>
 800828c:	b118      	cbz	r0, 8008296 <__swbuf_r+0x32>
 800828e:	f04f 37ff 	mov.w	r7, #4294967295
 8008292:	4638      	mov	r0, r7
 8008294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	6922      	ldr	r2, [r4, #16]
 800829a:	1a98      	subs	r0, r3, r2
 800829c:	6963      	ldr	r3, [r4, #20]
 800829e:	b2f6      	uxtb	r6, r6
 80082a0:	4283      	cmp	r3, r0
 80082a2:	4637      	mov	r7, r6
 80082a4:	dc05      	bgt.n	80082b2 <__swbuf_r+0x4e>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4628      	mov	r0, r5
 80082aa:	f7ff ffb3 	bl	8008214 <_fflush_r>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d1ed      	bne.n	800828e <__swbuf_r+0x2a>
 80082b2:	68a3      	ldr	r3, [r4, #8]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	60a3      	str	r3, [r4, #8]
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	701e      	strb	r6, [r3, #0]
 80082c0:	6962      	ldr	r2, [r4, #20]
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d004      	beq.n	80082d2 <__swbuf_r+0x6e>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	07db      	lsls	r3, r3, #31
 80082cc:	d5e1      	bpl.n	8008292 <__swbuf_r+0x2e>
 80082ce:	2e0a      	cmp	r6, #10
 80082d0:	d1df      	bne.n	8008292 <__swbuf_r+0x2e>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f7ff ff9d 	bl	8008214 <_fflush_r>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d0d9      	beq.n	8008292 <__swbuf_r+0x2e>
 80082de:	e7d6      	b.n	800828e <__swbuf_r+0x2a>

080082e0 <__swsetup_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4b29      	ldr	r3, [pc, #164]	@ (8008388 <__swsetup_r+0xa8>)
 80082e4:	4605      	mov	r5, r0
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	460c      	mov	r4, r1
 80082ea:	b118      	cbz	r0, 80082f4 <__swsetup_r+0x14>
 80082ec:	6a03      	ldr	r3, [r0, #32]
 80082ee:	b90b      	cbnz	r3, 80082f4 <__swsetup_r+0x14>
 80082f0:	f7ff fa3e 	bl	8007770 <__sinit>
 80082f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082f8:	0719      	lsls	r1, r3, #28
 80082fa:	d422      	bmi.n	8008342 <__swsetup_r+0x62>
 80082fc:	06da      	lsls	r2, r3, #27
 80082fe:	d407      	bmi.n	8008310 <__swsetup_r+0x30>
 8008300:	2209      	movs	r2, #9
 8008302:	602a      	str	r2, [r5, #0]
 8008304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008308:	81a3      	strh	r3, [r4, #12]
 800830a:	f04f 30ff 	mov.w	r0, #4294967295
 800830e:	e033      	b.n	8008378 <__swsetup_r+0x98>
 8008310:	0758      	lsls	r0, r3, #29
 8008312:	d512      	bpl.n	800833a <__swsetup_r+0x5a>
 8008314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008316:	b141      	cbz	r1, 800832a <__swsetup_r+0x4a>
 8008318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800831c:	4299      	cmp	r1, r3
 800831e:	d002      	beq.n	8008326 <__swsetup_r+0x46>
 8008320:	4628      	mov	r0, r5
 8008322:	f7ff fb2d 	bl	8007980 <_free_r>
 8008326:	2300      	movs	r3, #0
 8008328:	6363      	str	r3, [r4, #52]	@ 0x34
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	2300      	movs	r3, #0
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f043 0308 	orr.w	r3, r3, #8
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	b94b      	cbnz	r3, 800835a <__swsetup_r+0x7a>
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800834c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008350:	d003      	beq.n	800835a <__swsetup_r+0x7a>
 8008352:	4621      	mov	r1, r4
 8008354:	4628      	mov	r0, r5
 8008356:	f000 f84f 	bl	80083f8 <__smakebuf_r>
 800835a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835e:	f013 0201 	ands.w	r2, r3, #1
 8008362:	d00a      	beq.n	800837a <__swsetup_r+0x9a>
 8008364:	2200      	movs	r2, #0
 8008366:	60a2      	str	r2, [r4, #8]
 8008368:	6962      	ldr	r2, [r4, #20]
 800836a:	4252      	negs	r2, r2
 800836c:	61a2      	str	r2, [r4, #24]
 800836e:	6922      	ldr	r2, [r4, #16]
 8008370:	b942      	cbnz	r2, 8008384 <__swsetup_r+0xa4>
 8008372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008376:	d1c5      	bne.n	8008304 <__swsetup_r+0x24>
 8008378:	bd38      	pop	{r3, r4, r5, pc}
 800837a:	0799      	lsls	r1, r3, #30
 800837c:	bf58      	it	pl
 800837e:	6962      	ldrpl	r2, [r4, #20]
 8008380:	60a2      	str	r2, [r4, #8]
 8008382:	e7f4      	b.n	800836e <__swsetup_r+0x8e>
 8008384:	2000      	movs	r0, #0
 8008386:	e7f7      	b.n	8008378 <__swsetup_r+0x98>
 8008388:	24000038 	.word	0x24000038

0800838c <_sbrk_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d06      	ldr	r5, [pc, #24]	@ (80083a8 <_sbrk_r+0x1c>)
 8008390:	2300      	movs	r3, #0
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	602b      	str	r3, [r5, #0]
 8008398:	f7f9 f8d0 	bl	800153c <_sbrk>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_sbrk_r+0x1a>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_sbrk_r+0x1a>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	24000324 	.word	0x24000324

080083ac <__swhatbuf_r>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	460c      	mov	r4, r1
 80083b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b4:	2900      	cmp	r1, #0
 80083b6:	b096      	sub	sp, #88	@ 0x58
 80083b8:	4615      	mov	r5, r2
 80083ba:	461e      	mov	r6, r3
 80083bc:	da0d      	bge.n	80083da <__swhatbuf_r+0x2e>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083c4:	f04f 0100 	mov.w	r1, #0
 80083c8:	bf14      	ite	ne
 80083ca:	2340      	movne	r3, #64	@ 0x40
 80083cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083d0:	2000      	movs	r0, #0
 80083d2:	6031      	str	r1, [r6, #0]
 80083d4:	602b      	str	r3, [r5, #0]
 80083d6:	b016      	add	sp, #88	@ 0x58
 80083d8:	bd70      	pop	{r4, r5, r6, pc}
 80083da:	466a      	mov	r2, sp
 80083dc:	f000 f848 	bl	8008470 <_fstat_r>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	dbec      	blt.n	80083be <__swhatbuf_r+0x12>
 80083e4:	9901      	ldr	r1, [sp, #4]
 80083e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083ee:	4259      	negs	r1, r3
 80083f0:	4159      	adcs	r1, r3
 80083f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083f6:	e7eb      	b.n	80083d0 <__swhatbuf_r+0x24>

080083f8 <__smakebuf_r>:
 80083f8:	898b      	ldrh	r3, [r1, #12]
 80083fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083fc:	079d      	lsls	r5, r3, #30
 80083fe:	4606      	mov	r6, r0
 8008400:	460c      	mov	r4, r1
 8008402:	d507      	bpl.n	8008414 <__smakebuf_r+0x1c>
 8008404:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	6123      	str	r3, [r4, #16]
 800840c:	2301      	movs	r3, #1
 800840e:	6163      	str	r3, [r4, #20]
 8008410:	b003      	add	sp, #12
 8008412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008414:	ab01      	add	r3, sp, #4
 8008416:	466a      	mov	r2, sp
 8008418:	f7ff ffc8 	bl	80083ac <__swhatbuf_r>
 800841c:	9f00      	ldr	r7, [sp, #0]
 800841e:	4605      	mov	r5, r0
 8008420:	4639      	mov	r1, r7
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff fb18 	bl	8007a58 <_malloc_r>
 8008428:	b948      	cbnz	r0, 800843e <__smakebuf_r+0x46>
 800842a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842e:	059a      	lsls	r2, r3, #22
 8008430:	d4ee      	bmi.n	8008410 <__smakebuf_r+0x18>
 8008432:	f023 0303 	bic.w	r3, r3, #3
 8008436:	f043 0302 	orr.w	r3, r3, #2
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	e7e2      	b.n	8008404 <__smakebuf_r+0xc>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	6020      	str	r0, [r4, #0]
 8008442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	9b01      	ldr	r3, [sp, #4]
 800844a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800844e:	b15b      	cbz	r3, 8008468 <__smakebuf_r+0x70>
 8008450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008454:	4630      	mov	r0, r6
 8008456:	f000 f81d 	bl	8008494 <_isatty_r>
 800845a:	b128      	cbz	r0, 8008468 <__smakebuf_r+0x70>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f023 0303 	bic.w	r3, r3, #3
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	431d      	orrs	r5, r3
 800846c:	81a5      	strh	r5, [r4, #12]
 800846e:	e7cf      	b.n	8008410 <__smakebuf_r+0x18>

08008470 <_fstat_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	@ (8008490 <_fstat_r+0x20>)
 8008474:	2300      	movs	r3, #0
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	f7f9 f834 	bl	80014ea <_fstat>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d102      	bne.n	800848c <_fstat_r+0x1c>
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	b103      	cbz	r3, 800848c <_fstat_r+0x1c>
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	bd38      	pop	{r3, r4, r5, pc}
 800848e:	bf00      	nop
 8008490:	24000324 	.word	0x24000324

08008494 <_isatty_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d06      	ldr	r5, [pc, #24]	@ (80084b0 <_isatty_r+0x1c>)
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	f7f9 f833 	bl	800150a <_isatty>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_isatty_r+0x1a>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_isatty_r+0x1a>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	24000324 	.word	0x24000324

080084b4 <_init>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr

080084c0 <_fini>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr
