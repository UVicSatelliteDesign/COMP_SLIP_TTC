
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008734  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a1c  080089d4  080089d4  000099d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3f0  0800a3f0  0000b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a3f8  0800a3f8  0000b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a3fc  0800a3fc  0000b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800a400  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800a488  0000c088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800a488  0000c334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b88  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cb0  00000000  00000000  00021c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f08  00000000  00000000  000248f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b7f  00000000  00000000  000257f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384f5  00000000  00000000  00026377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016310  00000000  00000000  0005e86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ef6d  00000000  00000000  00074b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3ae9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004564  00000000  00000000  001d3b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001d8090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080089bc 	.word	0x080089bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080089bc 	.word	0x080089bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_FastTxOn>:
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
    return result;
}

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2031      	movs	r0, #49	@ 0x31
 80006b8:	f000 f9ba 	bl	8000a30 <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2033      	movs	r0, #51	@ 0x33
 80006d2:	f000 f9ad 	bl	8000a30 <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2034      	movs	r0, #52	@ 0x34
 80006ec:	f000 f9a0 	bl	8000a30 <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2035      	movs	r0, #53	@ 0x35
 8000706:	f000 f993 	bl	8000a30 <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	2036      	movs	r0, #54	@ 0x36
 8000720:	f000 f986 	bl	8000a30 <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <CC1201_Nop+0x30>)
 800073a:	f007 fad3 	bl	8007ce4 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	203d      	movs	r0, #61	@ 0x3d
 8000742:	f000 f975 	bl	8000a30 <CC1201_SendStrobe>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <CC1201_Nop+0x34>)
 8000750:	f007 fac8 	bl	8007ce4 <iprintf>
    return result;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	08008a30 	.word	0x08008a30
 8000764:	08008a58 	.word	0x08008a58

08000768 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af02      	add	r7, sp, #8
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	2bff      	cmp	r3, #255	@ 0xff
 8000778:	d909      	bls.n	800078e <CC1201_ReadStatus+0x26>
        // Extended register single read: first byte is 0x2F with R/W bit set
        tx_buffer[0] = 0x2F | CC1201_READ_BIT; // Extended register READ command
 800077a:	23af      	movs	r3, #175	@ 0xaf
 800077c:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 8000784:	2300      	movs	r3, #0
 8000786:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000788:	2303      	movs	r3, #3
 800078a:	75fb      	strb	r3, [r7, #23]
 800078c:	e009      	b.n	80007a2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000796:	b2db      	uxtb	r3, r3
 8000798:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 800079a:	2300      	movs	r3, #0
 800079c:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a8:	4815      	ldr	r0, [pc, #84]	@ (8000800 <CC1201_ReadStatus+0x98>)
 80007aa:	f002 f971 	bl	8002a90 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007ae:	7dfb      	ldrb	r3, [r7, #23]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f107 020c 	add.w	r2, r7, #12
 80007b6:	f107 0110 	add.w	r1, r7, #16
 80007ba:	f04f 30ff 	mov.w	r0, #4294967295
 80007be:	9000      	str	r0, [sp, #0]
 80007c0:	4810      	ldr	r0, [pc, #64]	@ (8000804 <CC1201_ReadStatus+0x9c>)
 80007c2:	f005 fb11 	bl	8005de8 <HAL_SPI_TransmitReceive>
 80007c6:	4603      	mov	r3, r0
 80007c8:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <CC1201_ReadStatus+0x98>)
 80007d2:	f002 f95d 	bl	8002a90 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80007d6:	7dbb      	ldrb	r3, [r7, #22]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10c      	bne.n	80007f6 <CC1201_ReadStatus+0x8e>
        if (read_data != NULL) {
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d009      	beq.n	80007f6 <CC1201_ReadStatus+0x8e>
            if (reg_addr > 0xFF) {
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	2bff      	cmp	r3, #255	@ 0xff
 80007e6:	d903      	bls.n	80007f0 <CC1201_ReadStatus+0x88>
                *read_data = rx_buffer[2]; // Extended register data
 80007e8:	7bba      	ldrb	r2, [r7, #14]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e002      	b.n	80007f6 <CC1201_ReadStatus+0x8e>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 80007f0:	7b7a      	ldrb	r2, [r7, #13]
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 80007f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	58021000 	.word	0x58021000
 8000804:	240000b8 	.word	0x240000b8

08000808 <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	80fb      	strh	r3, [r7, #6]
 8000814:	4613      	mov	r3, r2
 8000816:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	2bff      	cmp	r3, #255	@ 0xff
 800081c:	d909      	bls.n	8000832 <CC1201_WriteRegister+0x2a>
        // Extended register single write: first byte is 0x2F with WRITE (no read bit)
        tx_buffer[0] = 0x2F; // Extended register WRITE command
 800081e:	232f      	movs	r3, #47	@ 0x2f
 8000820:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 8000828:	797b      	ldrb	r3, [r7, #5]
 800082a:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 800082c:	2303      	movs	r3, #3
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 8000838:	797b      	ldrb	r3, [r7, #5]
 800083a:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000846:	480c      	ldr	r0, [pc, #48]	@ (8000878 <CC1201_WriteRegister+0x70>)
 8000848:	f002 f922 	bl	8002a90 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	b29a      	uxth	r2, r3
 8000850:	f107 0108 	add.w	r1, r7, #8
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	4808      	ldr	r0, [pc, #32]	@ (800087c <CC1201_WriteRegister+0x74>)
 800085a:	f005 f8d7 	bl	8005a0c <HAL_SPI_Transmit>
 800085e:	4603      	mov	r3, r0
 8000860:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <CC1201_WriteRegister+0x70>)
 800086a:	f002 f911 	bl	8002a90 <HAL_GPIO_WritePin>

    return status;
 800086e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58021000 	.word	0x58021000
 800087c:	240000b8 	.word	0x240000b8

08000880 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800088e:	f7ff ff6b 	bl	8000768 <CC1201_ReadStatus>
 8000892:	4603      	mov	r3, r0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 80008aa:	f7ff ff5d 	bl	8000768 <CC1201_ReadStatus>
 80008ae:	4603      	mov	r3, r0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80008b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008bc:	b08f      	sub	sp, #60	@ 0x3c
 80008be:	af02      	add	r7, sp, #8
 80008c0:	6178      	str	r0, [r7, #20]
 80008c2:	460b      	mov	r3, r1
 80008c4:	60fa      	str	r2, [r7, #12]
 80008c6:	74fb      	strb	r3, [r7, #19]
 80008c8:	466b      	mov	r3, sp
 80008ca:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d005      	beq.n	80008de <CC1201_WriteTxFifo+0x26>
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <CC1201_WriteTxFifo+0x26>
 80008d8:	7cfb      	ldrb	r3, [r7, #19]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e08a      	b.n	80009f8 <CC1201_WriteTxFifo+0x140>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 80008e2:	7cfb      	ldrb	r3, [r7, #19]
 80008e4:	1c99      	adds	r1, r3, #2
 80008e6:	1e4b      	subs	r3, r1, #1
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008ea:	460a      	mov	r2, r1
 80008ec:	2300      	movs	r3, #0
 80008ee:	603a      	str	r2, [r7, #0]
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	f04f 0200 	mov.w	r2, #0
 80008f6:	f04f 0300 	mov.w	r3, #0
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	00c3      	lsls	r3, r0, #3
 80008fe:	6838      	ldr	r0, [r7, #0]
 8000900:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	00c2      	lsls	r2, r0, #3
 8000908:	460a      	mov	r2, r1
 800090a:	2300      	movs	r3, #0
 800090c:	4692      	mov	sl, r2
 800090e:	469b      	mov	fp, r3
 8000910:	f04f 0200 	mov.w	r2, #0
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800091c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000924:	460b      	mov	r3, r1
 8000926:	3307      	adds	r3, #7
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	ebad 0d03 	sub.w	sp, sp, r3
 8000930:	ab02      	add	r3, sp, #8
 8000932:	3300      	adds	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	1c99      	adds	r1, r3, #2
 800093a:	1e4b      	subs	r3, r1, #1
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	460a      	mov	r2, r1
 8000940:	2300      	movs	r3, #0
 8000942:	4690      	mov	r8, r2
 8000944:	4699      	mov	r9, r3
 8000946:	f04f 0200 	mov.w	r2, #0
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800095a:	460a      	mov	r2, r1
 800095c:	2300      	movs	r3, #0
 800095e:	4614      	mov	r4, r2
 8000960:	461d      	mov	r5, r3
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	f04f 0300 	mov.w	r3, #0
 800096a:	00eb      	lsls	r3, r5, #3
 800096c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000970:	00e2      	lsls	r2, r4, #3
 8000972:	460b      	mov	r3, r1
 8000974:	3307      	adds	r3, #7
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	ebad 0d03 	sub.w	sp, sp, r3
 800097e:	ab02      	add	r3, sp, #8
 8000980:	3300      	adds	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000986:	227f      	movs	r2, #127	@ 0x7f
 8000988:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000990:	e00e      	b.n	80009b0 <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	441a      	add	r2, r3
 800099a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099e:	3301      	adds	r3, #1
 80009a0:	7811      	ldrb	r1, [r2, #0]
 80009a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009a4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 80009a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009aa:	3301      	adds	r3, #1
 80009ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009b0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3eb      	bcc.n	8000992 <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009c0:	4810      	ldr	r0, [pc, #64]	@ (8000a04 <CC1201_WriteTxFifo+0x14c>)
 80009c2:	f002 f865 	bl	8002a90 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 80009c6:	7cfb      	ldrb	r3, [r7, #19]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	3301      	adds	r3, #1
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f04f 32ff 	mov.w	r2, #4294967295
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	69fa      	ldr	r2, [r7, #28]
 80009d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009d8:	480b      	ldr	r0, [pc, #44]	@ (8000a08 <CC1201_WriteTxFifo+0x150>)
 80009da:	f005 fa05 	bl	8005de8 <HAL_SPI_TransmitReceive>
 80009de:	4603      	mov	r3, r0
 80009e0:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009e8:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <CC1201_WriteTxFifo+0x14c>)
 80009ea:	f002 f851 	bl	8002a90 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	701a      	strb	r2, [r3, #0]
    
    return status;
 80009f6:	7efb      	ldrb	r3, [r7, #27]
 80009f8:	46b5      	mov	sp, r6
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3734      	adds	r7, #52	@ 0x34
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a04:	58021000 	.word	0x58021000
 8000a08:	240000b8 	.word	0x240000b8

08000a0c <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff4a 	bl	80008b8 <CC1201_WriteTxFifo>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    // Early readiness check to avoid blocking if SPI not initialized yet
    HAL_SPI_StateTypeDef spi_state = HAL_SPI_GetState(&CC1201_SPI_HANDLE);
 8000a3c:	4832      	ldr	r0, [pc, #200]	@ (8000b08 <CC1201_SendStrobe+0xd8>)
 8000a3e:	f005 ff0d 	bl	800685c <HAL_SPI_GetState>
 8000a42:	4603      	mov	r3, r0
 8000a44:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] Enter CC1201_SendStrobe cmd=0x%02X, SPI state=%d\n\r", strobe_command, (int)spi_state);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	482f      	ldr	r0, [pc, #188]	@ (8000b0c <CC1201_SendStrobe+0xdc>)
 8000a50:	f007 f948 	bl	8007ce4 <iprintf>
    if (spi_state != HAL_SPI_STATE_READY) {
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d00a      	beq.n	8000a70 <CC1201_SendStrobe+0x40>
        printf("[DEBUG] SPI not ready, skipping strobe\n\r");
 8000a5a:	482d      	ldr	r0, [pc, #180]	@ (8000b10 <CC1201_SendStrobe+0xe0>)
 8000a5c:	f007 f942 	bl	8007ce4 <iprintf>
        if (status_byte) { *status_byte = 0x00; }
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <CC1201_SendStrobe+0x3c>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
        return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e046      	b.n	8000afe <CC1201_SendStrobe+0xce>
    }

    // Ensure SPI is ready and CS is toggled with brief gaps
    printf("[DEBUG] SPI state before CS low: %d\n\r", (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000a70:	4825      	ldr	r0, [pc, #148]	@ (8000b08 <CC1201_SendStrobe+0xd8>)
 8000a72:	f005 fef3 	bl	800685c <HAL_SPI_GetState>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4826      	ldr	r0, [pc, #152]	@ (8000b14 <CC1201_SendStrobe+0xe4>)
 8000a7c:	f007 f932 	bl	8007ce4 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	4824      	ldr	r0, [pc, #144]	@ (8000b18 <CC1201_SendStrobe+0xe8>)
 8000a88:	f002 f802 	bl	8002a90 <HAL_GPIO_WritePin>
    
    // Small CS setup delay without relying on SysTick (avoid HAL_Delay hang if tick not running)
    for (volatile uint32_t i = 0; i < 300; ++i) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	e003      	b.n	8000a9a <CC1201_SendStrobe+0x6a>
        __NOP();
 8000a92:	bf00      	nop
    for (volatile uint32_t i = 0; i < 300; ++i) {
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000aa0:	d3f7      	bcc.n	8000a92 <CC1201_SendStrobe+0x62>
    }

    // Perform SPI transaction
    printf("[DEBUG] About to SPI strobe 0x%02X (SPI state=%d)\n\r", strobe_command, (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	461c      	mov	r4, r3
 8000aa6:	4818      	ldr	r0, [pc, #96]	@ (8000b08 <CC1201_SendStrobe+0xd8>)
 8000aa8:	f005 fed8 	bl	800685c <HAL_SPI_GetState>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	481a      	ldr	r0, [pc, #104]	@ (8000b1c <CC1201_SendStrobe+0xec>)
 8000ab4:	f007 f916 	bl	8007ce4 <iprintf>
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000ab8:	f107 020d 	add.w	r2, r7, #13
 8000abc:	1df9      	adds	r1, r7, #7
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	4810      	ldr	r0, [pc, #64]	@ (8000b08 <CC1201_SendStrobe+0xd8>)
 8000ac8:	f005 f98e 	bl	8005de8 <HAL_SPI_TransmitReceive>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73bb      	strb	r3, [r7, #14]
    printf("[DEBUG] CC1201_SendStrobe 0x%02X -> HAL=%d, statusByte=0x%02X\n\r", strobe_command, status, rx_data);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	7bba      	ldrb	r2, [r7, #14]
 8000ad6:	7b7b      	ldrb	r3, [r7, #13]
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <CC1201_SendStrobe+0xf0>)
 8000ada:	f007 f903 	bl	8007ce4 <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae4:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <CC1201_SendStrobe+0xe8>)
 8000ae6:	f001 ffd3 	bl	8002a90 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d105      	bne.n	8000afc <CC1201_SendStrobe+0xcc>
        if (status_byte != NULL) {
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <CC1201_SendStrobe+0xcc>
            *status_byte = rx_data;
 8000af6:	7b7a      	ldrb	r2, [r7, #13]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd90      	pop	{r4, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	240000b8 	.word	0x240000b8
 8000b0c:	08008a84 	.word	0x08008a84
 8000b10:	08008ac0 	.word	0x08008ac0
 8000b14:	08008aec 	.word	0x08008aec
 8000b18:	58021000 	.word	0x58021000
 8000b1c:	08008b14 	.word	0x08008b14
 8000b20:	08008b48 	.word	0x08008b48

08000b24 <CC1201_WriteRegisterConfig>:
 * @param settings Array of register settings to write.
 * @param num_settings Number of settings in the array.
 * @return HAL_StatusTypeDef Status of the configuration (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegisterConfig(const registerSetting_t *settings, uint16_t num_settings)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
    
    for (uint16_t i = 0; i < num_settings; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	81bb      	strh	r3, [r7, #12]
 8000b38:	e019      	b.n	8000b6e <CC1201_WriteRegisterConfig+0x4a>
        // Handle both standard and extended addresses via common API
        status = CC1201_WriteRegister(settings[i].addr, settings[i].data);
 8000b3a:	89bb      	ldrh	r3, [r7, #12]
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	8818      	ldrh	r0, [r3, #0]
 8000b44:	89bb      	ldrh	r3, [r7, #12]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f7ff fe5a 	bl	8000808 <CC1201_WriteRegister>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK) {
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <CC1201_WriteRegisterConfig+0x3e>
            return status;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	e00a      	b.n	8000b78 <CC1201_WriteRegisterConfig+0x54>
        }
        
        HAL_Delay(1); // Small delay between register writes
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 f982 	bl	8001e6c <HAL_Delay>
    for (uint16_t i = 0; i < num_settings; i++) {
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	81bb      	strh	r3, [r7, #12]
 8000b6e:	89ba      	ldrh	r2, [r7, #12]
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d3e1      	bcc.n	8000b3a <CC1201_WriteRegisterConfig+0x16>
    }
    
    return status;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <CC1201_GetNumPreferredSettings>:
 * @brief Gets the number of preferred settings.
 *
 * @return uint16_t Number of settings in the preferred settings array.
 */
uint16_t CC1201_GetNumPreferredSettings(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
    return sizeof(preferredSettings) / sizeof(registerSetting_t);
 8000b84:	2331      	movs	r3, #49	@ 0x31
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <CC1201_GetPreferredSettings>:
 * @brief Gets a pointer to the preferred settings array.
 *
 * @return const registerSetting_t* Pointer to the preferred settings array.
 */
const registerSetting_t* CC1201_GetPreferredSettings(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
    return preferredSettings;
 8000b94:	4b02      	ldr	r3, [pc, #8]	@ (8000ba0 <CC1201_GetPreferredSettings+0x10>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	0800a2c4 	.word	0x0800a2c4

08000ba4 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	4823      	ldr	r0, [pc, #140]	@ (8000c54 <print_cc1201_status+0xb0>)
 8000bc6:	f007 f88d 	bl	8007ce4 <iprintf>
    switch(radio_state) {
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b07      	cmp	r3, #7
 8000bce:	d833      	bhi.n	8000c38 <print_cc1201_status+0x94>
 8000bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd8 <print_cc1201_status+0x34>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000bf9 	.word	0x08000bf9
 8000bdc:	08000c01 	.word	0x08000c01
 8000be0:	08000c09 	.word	0x08000c09
 8000be4:	08000c11 	.word	0x08000c11
 8000be8:	08000c19 	.word	0x08000c19
 8000bec:	08000c21 	.word	0x08000c21
 8000bf0:	08000c29 	.word	0x08000c29
 8000bf4:	08000c31 	.word	0x08000c31
        case 0x0: printf("(IDLE)"); break;
 8000bf8:	4817      	ldr	r0, [pc, #92]	@ (8000c58 <print_cc1201_status+0xb4>)
 8000bfa:	f007 f873 	bl	8007ce4 <iprintf>
 8000bfe:	e01f      	b.n	8000c40 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000c00:	4816      	ldr	r0, [pc, #88]	@ (8000c5c <print_cc1201_status+0xb8>)
 8000c02:	f007 f86f 	bl	8007ce4 <iprintf>
 8000c06:	e01b      	b.n	8000c40 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000c08:	4815      	ldr	r0, [pc, #84]	@ (8000c60 <print_cc1201_status+0xbc>)
 8000c0a:	f007 f86b 	bl	8007ce4 <iprintf>
 8000c0e:	e017      	b.n	8000c40 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000c10:	4814      	ldr	r0, [pc, #80]	@ (8000c64 <print_cc1201_status+0xc0>)
 8000c12:	f007 f867 	bl	8007ce4 <iprintf>
 8000c16:	e013      	b.n	8000c40 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000c18:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <print_cc1201_status+0xc4>)
 8000c1a:	f007 f863 	bl	8007ce4 <iprintf>
 8000c1e:	e00f      	b.n	8000c40 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <print_cc1201_status+0xc8>)
 8000c22:	f007 f85f 	bl	8007ce4 <iprintf>
 8000c26:	e00b      	b.n	8000c40 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000c28:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <print_cc1201_status+0xcc>)
 8000c2a:	f007 f85b 	bl	8007ce4 <iprintf>
 8000c2e:	e007      	b.n	8000c40 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000c30:	4810      	ldr	r0, [pc, #64]	@ (8000c74 <print_cc1201_status+0xd0>)
 8000c32:	f007 f857 	bl	8007ce4 <iprintf>
 8000c36:	e003      	b.n	8000c40 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000c38:	480f      	ldr	r0, [pc, #60]	@ (8000c78 <print_cc1201_status+0xd4>)
 8000c3a:	f007 f853 	bl	8007ce4 <iprintf>
 8000c3e:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000c40:	7bbb      	ldrb	r3, [r7, #14]
 8000c42:	4619      	mov	r1, r3
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <print_cc1201_status+0xd8>)
 8000c46:	f007 f84d 	bl	8007ce4 <iprintf>
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08008b88 	.word	0x08008b88
 8000c58:	08008ba8 	.word	0x08008ba8
 8000c5c:	08008bb0 	.word	0x08008bb0
 8000c60:	08008bb8 	.word	0x08008bb8
 8000c64:	08008bc0 	.word	0x08008bc0
 8000c68:	08008bcc 	.word	0x08008bcc
 8000c6c:	08008bd8 	.word	0x08008bd8
 8000c70:	08008be4 	.word	0x08008be4
 8000c74:	08008bf4 	.word	0x08008bf4
 8000c78:	08008c04 	.word	0x08008c04
 8000c7c:	08008c10 	.word	0x08008c10

08000c80 <test_state_changes>:
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
}

// Test 2: State Change Operations
void test_state_changes(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 8000c86:	488d      	ldr	r0, [pc, #564]	@ (8000ebc <test_state_changes+0x23c>)
 8000c88:	f007 f82c 	bl	8007ce4 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	723b      	strb	r3, [r7, #8]
    uint8_t marc_state = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	71fb      	strb	r3, [r7, #7]
    
    // Apply preferred radio configuration and calibrate PLL before state changes
    printf("Applying radio configuration...\n\r");
 8000c94:	488a      	ldr	r0, [pc, #552]	@ (8000ec0 <test_state_changes+0x240>)
 8000c96:	f007 f825 	bl	8007ce4 <iprintf>
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 8000c9a:	f7ff ff79 	bl	8000b90 <CC1201_GetPreferredSettings>
 8000c9e:	60f8      	str	r0, [r7, #12]
    uint16_t num = CC1201_GetNumPreferredSettings();
 8000ca0:	f7ff ff6e 	bl	8000b80 <CC1201_GetNumPreferredSettings>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	817b      	strh	r3, [r7, #10]
    status = CC1201_WriteRegisterConfig(settings, num);
 8000ca8:	897b      	ldrh	r3, [r7, #10]
 8000caa:	4619      	mov	r1, r3
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff ff39 	bl	8000b24 <CC1201_WriteRegisterConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	727b      	strb	r3, [r7, #9]
    printf("  Config write: HAL=%d\n\r", status);
 8000cb6:	7a7b      	ldrb	r3, [r7, #9]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4882      	ldr	r0, [pc, #520]	@ (8000ec4 <test_state_changes+0x244>)
 8000cbc:	f007 f812 	bl	8007ce4 <iprintf>
    
    printf("Calibrating frequency synthesizer (SCAL)...\n\r");
 8000cc0:	4881      	ldr	r0, [pc, #516]	@ (8000ec8 <test_state_changes+0x248>)
 8000cc2:	f007 f80f 	bl	8007ce4 <iprintf>
    status = CC1201_CalFreqSynth(&status_byte);
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fcfb 	bl	80006c6 <CC1201_CalFreqSynth>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	727b      	strb	r3, [r7, #9]
    printf("  SCAL strobe: HAL=%d ", status);
 8000cd4:	7a7b      	ldrb	r3, [r7, #9]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	487c      	ldr	r0, [pc, #496]	@ (8000ecc <test_state_changes+0x24c>)
 8000cda:	f007 f803 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) { print_cc1201_status(status_byte, "SCAL"); }
 8000cde:	7a7b      	ldrb	r3, [r7, #9]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d104      	bne.n	8000cee <test_state_changes+0x6e>
 8000ce4:	7a3b      	ldrb	r3, [r7, #8]
 8000ce6:	497a      	ldr	r1, [pc, #488]	@ (8000ed0 <test_state_changes+0x250>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5b 	bl	8000ba4 <print_cc1201_status>
    HAL_Delay(10);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f001 f8bc 	bl	8001e6c <HAL_Delay>
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 8000cf4:	4877      	ldr	r0, [pc, #476]	@ (8000ed4 <test_state_changes+0x254>)
 8000cf6:	f006 fff5 	bl	8007ce4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd08 	bl	8000714 <CC1201_EnterIdleMode>
 8000d04:	4603      	mov	r3, r0
 8000d06:	727b      	strb	r3, [r7, #9]
    printf("  Enter IDLE: HAL=%d ", status);
 8000d08:	7a7b      	ldrb	r3, [r7, #9]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4872      	ldr	r0, [pc, #456]	@ (8000ed8 <test_state_changes+0x258>)
 8000d0e:	f006 ffe9 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) {
 8000d12:	7a7b      	ldrb	r3, [r7, #9]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10d      	bne.n	8000d34 <test_state_changes+0xb4>
        print_cc1201_status(status_byte, "IDLE");
 8000d18:	7a3b      	ldrb	r3, [r7, #8]
 8000d1a:	4970      	ldr	r1, [pc, #448]	@ (8000edc <test_state_changes+0x25c>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff41 	bl	8000ba4 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fdab 	bl	8000880 <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	486c      	ldr	r0, [pc, #432]	@ (8000ee0 <test_state_changes+0x260>)
 8000d30:	f006 ffd8 	bl	8007ce4 <iprintf>
    }
    HAL_Delay(50);
 8000d34:	2032      	movs	r0, #50	@ 0x32
 8000d36:	f001 f899 	bl	8001e6c <HAL_Delay>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 8000d3a:	486a      	ldr	r0, [pc, #424]	@ (8000ee4 <test_state_changes+0x264>)
 8000d3c:	f006 ffd2 	bl	8007ce4 <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccb 	bl	80006e0 <CC1201_EnterRxMode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	727b      	strb	r3, [r7, #9]
    printf("  Enter RX: HAL=%d ", status);
 8000d4e:	7a7b      	ldrb	r3, [r7, #9]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4865      	ldr	r0, [pc, #404]	@ (8000ee8 <test_state_changes+0x268>)
 8000d54:	f006 ffc6 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) {
 8000d58:	7a7b      	ldrb	r3, [r7, #9]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d110      	bne.n	8000d80 <test_state_changes+0x100>
        print_cc1201_status(status_byte, "RX");
 8000d5e:	7a3b      	ldrb	r3, [r7, #8]
 8000d60:	4962      	ldr	r1, [pc, #392]	@ (8000eec <test_state_changes+0x26c>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff1e 	bl	8000ba4 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 8000d68:	2064      	movs	r0, #100	@ 0x64
 8000d6a:	f001 f87f 	bl	8001e6c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd85 	bl	8000880 <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	485d      	ldr	r0, [pc, #372]	@ (8000ef0 <test_state_changes+0x270>)
 8000d7c:	f006 ffb2 	bl	8007ce4 <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 8000d80:	485c      	ldr	r0, [pc, #368]	@ (8000ef4 <test_state_changes+0x274>)
 8000d82:	f006 ffaf 	bl	8007ce4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fcc2 	bl	8000714 <CC1201_EnterIdleMode>
 8000d90:	4603      	mov	r3, r0
 8000d92:	727b      	strb	r3, [r7, #9]
    printf("  RX->IDLE: HAL=%d ", status);
 8000d94:	7a7b      	ldrb	r3, [r7, #9]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4857      	ldr	r0, [pc, #348]	@ (8000ef8 <test_state_changes+0x278>)
 8000d9a:	f006 ffa3 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) {
 8000d9e:	7a7b      	ldrb	r3, [r7, #9]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d104      	bne.n	8000dae <test_state_changes+0x12e>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8000da4:	7a3b      	ldrb	r3, [r7, #8]
 8000da6:	4955      	ldr	r1, [pc, #340]	@ (8000efc <test_state_changes+0x27c>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fefb 	bl	8000ba4 <print_cc1201_status>
    }
    HAL_Delay(50);
 8000dae:	2032      	movs	r0, #50	@ 0x32
 8000db0:	f001 f85c 	bl	8001e6c <HAL_Delay>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 8000db4:	4852      	ldr	r0, [pc, #328]	@ (8000f00 <test_state_changes+0x280>)
 8000db6:	f006 ff95 	bl	8007ce4 <iprintf>
    // Ensure at least one byte is present in TX FIFO to avoid immediate underflow
    CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	20aa      	movs	r0, #170	@ 0xaa
 8000dc2:	f7ff fe23 	bl	8000a0c <CC1201_WriteSingleTxFifo>
    print_cc1201_status(status_byte, "TX_FIFO_PRIME");
 8000dc6:	7a3b      	ldrb	r3, [r7, #8]
 8000dc8:	494e      	ldr	r1, [pc, #312]	@ (8000f04 <test_state_changes+0x284>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff feea 	bl	8000ba4 <print_cc1201_status>
    status = CC1201_EnterTxMode(&status_byte);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc90 	bl	80006fa <CC1201_EnterTxMode>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	727b      	strb	r3, [r7, #9]
    printf("  Enter TX: HAL=%d ", status);
 8000dde:	7a7b      	ldrb	r3, [r7, #9]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4849      	ldr	r0, [pc, #292]	@ (8000f08 <test_state_changes+0x288>)
 8000de4:	f006 ff7e 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) {
 8000de8:	7a7b      	ldrb	r3, [r7, #9]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d110      	bne.n	8000e10 <test_state_changes+0x190>
        print_cc1201_status(status_byte, "TX");
 8000dee:	7a3b      	ldrb	r3, [r7, #8]
 8000df0:	4946      	ldr	r1, [pc, #280]	@ (8000f0c <test_state_changes+0x28c>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fed6 	bl	8000ba4 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 8000df8:	2032      	movs	r0, #50	@ 0x32
 8000dfa:	f001 f837 	bl	8001e6c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fd3d 	bl	8000880 <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4841      	ldr	r0, [pc, #260]	@ (8000f10 <test_state_changes+0x290>)
 8000e0c:	f006 ff6a 	bl	8007ce4 <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 8000e10:	4840      	ldr	r0, [pc, #256]	@ (8000f14 <test_state_changes+0x294>)
 8000e12:	f006 ff67 	bl	8007ce4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fc7a 	bl	8000714 <CC1201_EnterIdleMode>
 8000e20:	4603      	mov	r3, r0
 8000e22:	727b      	strb	r3, [r7, #9]
    printf("  TX->IDLE: HAL=%d ", status);
 8000e24:	7a7b      	ldrb	r3, [r7, #9]
 8000e26:	4619      	mov	r1, r3
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <test_state_changes+0x298>)
 8000e2a:	f006 ff5b 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) {
 8000e2e:	7a7b      	ldrb	r3, [r7, #9]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d104      	bne.n	8000e3e <test_state_changes+0x1be>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 8000e34:	7a3b      	ldrb	r3, [r7, #8]
 8000e36:	4939      	ldr	r1, [pc, #228]	@ (8000f1c <test_state_changes+0x29c>)
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff feb3 	bl	8000ba4 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 8000e3e:	4838      	ldr	r0, [pc, #224]	@ (8000f20 <test_state_changes+0x2a0>)
 8000e40:	f006 ff50 	bl	8007ce4 <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc2f 	bl	80006ac <CC1201_FastTxOn>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	727b      	strb	r3, [r7, #9]
    printf("  Fast TX On: HAL=%d ", status);
 8000e52:	7a7b      	ldrb	r3, [r7, #9]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4833      	ldr	r0, [pc, #204]	@ (8000f24 <test_state_changes+0x2a4>)
 8000e58:	f006 ff44 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) {
 8000e5c:	7a7b      	ldrb	r3, [r7, #9]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <test_state_changes+0x1fe>
        print_cc1201_status(status_byte, "FSTXON");
 8000e62:	7a3b      	ldrb	r3, [r7, #8]
 8000e64:	4930      	ldr	r1, [pc, #192]	@ (8000f28 <test_state_changes+0x2a8>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe9c 	bl	8000ba4 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fd06 	bl	8000880 <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4619      	mov	r1, r3
 8000e78:	482c      	ldr	r0, [pc, #176]	@ (8000f2c <test_state_changes+0x2ac>)
 8000e7a:	f006 ff33 	bl	8007ce4 <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 8000e7e:	482c      	ldr	r0, [pc, #176]	@ (8000f30 <test_state_changes+0x2b0>)
 8000e80:	f006 ff30 	bl	8007ce4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fc43 	bl	8000714 <CC1201_EnterIdleMode>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	727b      	strb	r3, [r7, #9]
    printf("  Final IDLE: HAL=%d ", status);
 8000e92:	7a7b      	ldrb	r3, [r7, #9]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4827      	ldr	r0, [pc, #156]	@ (8000f34 <test_state_changes+0x2b4>)
 8000e98:	f006 ff24 	bl	8007ce4 <iprintf>
    if (status == HAL_OK) {
 8000e9c:	7a7b      	ldrb	r3, [r7, #9]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <test_state_changes+0x22c>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 8000ea2:	7a3b      	ldrb	r3, [r7, #8]
 8000ea4:	4924      	ldr	r1, [pc, #144]	@ (8000f38 <test_state_changes+0x2b8>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe7c 	bl	8000ba4 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 8000eac:	4823      	ldr	r0, [pc, #140]	@ (8000f3c <test_state_changes+0x2bc>)
 8000eae:	f006 ff19 	bl	8007ce4 <iprintf>
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	080098f0 	.word	0x080098f0
 8000ec0:	0800991c 	.word	0x0800991c
 8000ec4:	08009940 	.word	0x08009940
 8000ec8:	0800995c 	.word	0x0800995c
 8000ecc:	0800998c 	.word	0x0800998c
 8000ed0:	080099a4 	.word	0x080099a4
 8000ed4:	080099ac 	.word	0x080099ac
 8000ed8:	080099c8 	.word	0x080099c8
 8000edc:	080099e0 	.word	0x080099e0
 8000ee0:	080099e8 	.word	0x080099e8
 8000ee4:	08009a00 	.word	0x08009a00
 8000ee8:	08009a18 	.word	0x08009a18
 8000eec:	08009a2c 	.word	0x08009a2c
 8000ef0:	08009a30 	.word	0x08009a30
 8000ef4:	08009a54 	.word	0x08009a54
 8000ef8:	08009a70 	.word	0x08009a70
 8000efc:	08009a84 	.word	0x08009a84
 8000f00:	08009a90 	.word	0x08009a90
 8000f04:	08009aa8 	.word	0x08009aa8
 8000f08:	08009ab8 	.word	0x08009ab8
 8000f0c:	08009acc 	.word	0x08009acc
 8000f10:	08009ad0 	.word	0x08009ad0
 8000f14:	08009af0 	.word	0x08009af0
 8000f18:	08009b0c 	.word	0x08009b0c
 8000f1c:	08009b20 	.word	0x08009b20
 8000f20:	08009b2c 	.word	0x08009b2c
 8000f24:	08009b50 	.word	0x08009b50
 8000f28:	08009b68 	.word	0x08009b68
 8000f2c:	08009b70 	.word	0x08009b70
 8000f30:	08009b94 	.word	0x08009b94
 8000f34:	08009bb0 	.word	0x08009bb0
 8000f38:	08009bc8 	.word	0x08009bc8
 8000f3c:	08009bd4 	.word	0x08009bd4

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f46:	f000 f9ef 	bl	8001328 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fefd 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f86d 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 f92d 	bl	80011b0 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000f56:	f000 f8d5 	bl	8001104 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 fc9e 	bl	800189c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 fc9b 	bl	800189c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f66:	2002      	movs	r0, #2
 8000f68:	f000 fc98 	bl	800189c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 fd88 	bl	8001a84 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f74:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <main+0xd0>)
 8000f76:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <main+0xd0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <main+0xd0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f88:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <main+0xd0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <main+0xd0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f94:	491e      	ldr	r1, [pc, #120]	@ (8001010 <main+0xd0>)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fdf8 	bl	8001b8c <BSP_COM_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <main+0x66>
  {
    Error_Handler();
 8000fa2:	f000 fa01 	bl	80013a8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000fa6:	481b      	ldr	r0, [pc, #108]	@ (8001014 <main+0xd4>)
 8000fa8:	f006 fe9c 	bl	8007ce4 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 fceb 	bl	8001988 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8000fb2:	4819      	ldr	r0, [pc, #100]	@ (8001018 <main+0xd8>)
 8000fb4:	f006 fe96 	bl	8007ce4 <iprintf>

  uint8_t test_status = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fbb6 	bl	8000730 <CC1201_Nop>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	79ba      	ldrb	r2, [r7, #6]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4813      	ldr	r0, [pc, #76]	@ (800101c <main+0xdc>)
 8000fd0:	f006 fe88 	bl	8007ce4 <iprintf>
  
  if (nop_result == HAL_OK) {
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <main+0xae>
      printf("Basic CC1201 communication working!\n\r");
 8000fda:	4811      	ldr	r0, [pc, #68]	@ (8001020 <main+0xe0>)
 8000fdc:	f006 fe82 	bl	8007ce4 <iprintf>
      BSP_LED_Off(LED_RED);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f000 fcfb 	bl	80019dc <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fcce 	bl	8001988 <BSP_LED_On>
 8000fec:	e008      	b.n	8001000 <main+0xc0>
  } else {
      printf("CC1201 communication failed!\n\r");
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <main+0xe4>)
 8000ff0:	f006 fe78 	bl	8007ce4 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fcf1 	bl	80019dc <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f000 fcc4 	bl	8001988 <BSP_LED_On>
  }

  // Quick path: run state changes test immediately
  printf("\n=== RUNNING QUICK STATE TESTS ===\n\r");
 8001000:	4809      	ldr	r0, [pc, #36]	@ (8001028 <main+0xe8>)
 8001002:	f006 fe6f 	bl	8007ce4 <iprintf>
  test_state_changes();
 8001006:	f7ff fe3b 	bl	8000c80 <test_state_changes>
  // #endif

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <main+0xca>
 800100e:	bf00      	nop
 8001010:	240000a4 	.word	0x240000a4
 8001014:	0800a15c 	.word	0x0800a15c
 8001018:	0800a178 	.word	0x0800a178
 800101c:	0800a1a8 	.word	0x0800a1a8
 8001020:	0800a1d4 	.word	0x0800a1d4
 8001024:	0800a1fc 	.word	0x0800a1fc
 8001028:	0800a21c 	.word	0x0800a21c

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09c      	sub	sp, #112	@ 0x70
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	224c      	movs	r2, #76	@ 0x4c
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f006 fea7 	bl	8007d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2220      	movs	r2, #32
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f006 fea1 	bl	8007d8e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800104c:	2002      	movs	r0, #2
 800104e:	f001 fd6d 	bl	8002b2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <SystemClock_Config+0xd0>)
 8001058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105a:	4a28      	ldr	r2, [pc, #160]	@ (80010fc <SystemClock_Config+0xd0>)
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001062:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <SystemClock_Config+0xd0>)
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <SystemClock_Config+0xd4>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001074:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <SystemClock_Config+0xd4>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <SystemClock_Config+0xd4>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001088:	bf00      	nop
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <SystemClock_Config+0xd4>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001096:	d1f8      	bne.n	800108a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800109c:	2301      	movs	r3, #1
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a0:	2340      	movs	r3, #64	@ 0x40
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fd77 	bl	8002ba0 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80010b8:	f000 f976 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	233f      	movs	r3, #63	@ 0x3f
 80010be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2101      	movs	r1, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 f9b6 	bl	8003454 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ee:	f000 f95b 	bl	80013a8 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3770      	adds	r7, #112	@ 0x70
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58000400 	.word	0x58000400
 8001100:	58024800 	.word	0x58024800

08001104 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800110a:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <MX_SPI4_Init+0xa8>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001110:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001114:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800111e:	2207      	movs	r2, #7
 8001120:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001130:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001134:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001156:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800115a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_SPI4_Init+0xa4>)
 8001194:	f004 fb16 	bl	80057c4 <HAL_SPI_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800119e:	f000 f903 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	240000b8 	.word	0x240000b8
 80011ac:	40013400 	.word	0x40013400

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011cc:	4a35      	ldr	r2, [pc, #212]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d6:	4b33      	ldr	r3, [pc, #204]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ea:	4a2e      	ldr	r2, [pc, #184]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f4:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	4a26      	ldr	r2, [pc, #152]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001212:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 (CC1201 Interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125c:	2320      	movs	r3, #32
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001260:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_GPIO_Init+0xf8>)
 8001272:	f001 fa5d 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 (CC1201 Reset) */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001276:	2310      	movs	r3, #16
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_GPIO_Init+0xf8>)
 800128e:	f001 fa4f 	bl	8002730 <HAL_GPIO_Init>
  
  // Set reset pin HIGH (inactive) by default
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2110      	movs	r1, #16
 8001296:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_GPIO_Init+0xf8>)
 8001298:	f001 fbfa 	bl	8002a90 <HAL_GPIO_WritePin>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	@ 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020c00 	.word	0x58020c00

080012ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d129      	bne.n	8001310 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 80012bc:	4816      	ldr	r0, [pc, #88]	@ (8001318 <HAL_GPIO_EXTI_Callback+0x6c>)
 80012be:	f006 fd11 	bl	8007ce4 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 80012c6:	f107 030f 	add.w	r3, r7, #15
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fad8 	bl	8000880 <CC1201_ReadMARCState>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	4619      	mov	r1, r3
 80012da:	4810      	ldr	r0, [pc, #64]	@ (800131c <HAL_GPIO_EXTI_Callback+0x70>)
 80012dc:	f006 fd02 	bl	8007ce4 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 80012e4:	f107 030e 	add.w	r3, r7, #14
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fad7 	bl	800089c <CC1201_GetNumRXBytes>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10a      	bne.n	800130a <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <HAL_GPIO_EXTI_Callback+0x74>)
 80012fa:	f006 fcf3 	bl	8007ce4 <iprintf>
            if (rx_bytes > 0) {
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x78>)
 8001306:	f006 fced 	bl	8007ce4 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 fb90 	bl	8001a30 <BSP_LED_Toggle>
    }
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0800a244 	.word	0x0800a244
 800131c:	0800a264 	.word	0x0800a264
 8001320:	0800a28c 	.word	0x0800a28c
 8001324:	0800a2a8 	.word	0x0800a2a8

08001328 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800133a:	f000 fed7 	bl	80020ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800133e:	2301      	movs	r3, #1
 8001340:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001342:	2300      	movs	r3, #0
 8001344:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800134a:	231f      	movs	r3, #31
 800134c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800134e:	2387      	movs	r3, #135	@ 0x87
 8001350:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001352:	2300      	movs	r3, #0
 8001354:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001356:	2300      	movs	r3, #0
 8001358:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800135a:	2301      	movs	r3, #1
 800135c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800135e:	2301      	movs	r3, #1
 8001360:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800136a:	463b      	mov	r3, r7
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fef5 	bl	800215c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001372:	2004      	movs	r0, #4
 8001374:	f000 fed2 	bl	800211c <HAL_MPU_Enable>

}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <BSP_PB_Callback+0x24>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	240000b4 	.word	0x240000b4

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <Error_Handler+0x8>

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c0:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_MspInit+0x30>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_MspInit+0x30>)
 80013cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	58024400 	.word	0x58024400

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ba      	sub	sp, #232	@ 0xe8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	22c0      	movs	r2, #192	@ 0xc0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f006 fcc0 	bl	8007d8e <memset>
  if(hspi->Instance==SPI4)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a37      	ldr	r2, [pc, #220]	@ (80014f0 <HAL_SPI_MspInit+0x108>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d166      	bne.n	80014e6 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001418:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001424:	2300      	movs	r3, #0
 8001426:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fb9d 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001438:	f7ff ffb6 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800143c:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <HAL_SPI_MspInit+0x10c>)
 800143e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001442:	4a2c      	ldr	r2, [pc, #176]	@ (80014f4 <HAL_SPI_MspInit+0x10c>)
 8001444:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001448:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800144c:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <HAL_SPI_MspInit+0x10c>)
 800144e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <HAL_SPI_MspInit+0x10c>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001460:	4a24      	ldr	r2, [pc, #144]	@ (80014f4 <HAL_SPI_MspInit+0x10c>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146a:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <HAL_SPI_MspInit+0x10c>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    
    // Configure SPI pins (SCK, MISO, MOSI) 
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001478:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800147c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Increased speed
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001492:	2305      	movs	r3, #5
 8001494:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001498:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800149c:	4619      	mov	r1, r3
 800149e:	4816      	ldr	r0, [pc, #88]	@ (80014f8 <HAL_SPI_MspInit+0x110>)
 80014a0:	f001 f946 	bl	8002730 <HAL_GPIO_Init>
    
    // Configure PE11 as manual CS (GPIO output)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <HAL_SPI_MspInit+0x110>)
 80014c6:	f001 f933 	bl	8002730 <HAL_GPIO_Init>
    
    // Set CS high (inactive) by default
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014d0:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <HAL_SPI_MspInit+0x110>)
 80014d2:	f001 fadd 	bl	8002a90 <HAL_GPIO_WritePin>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2054      	movs	r0, #84	@ 0x54
 80014dc:	f000 fdd1 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80014e0:	2054      	movs	r0, #84	@ 0x54
 80014e2:	f000 fde8 	bl	80020b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 80014e6:	bf00      	nop
 80014e8:	37e8      	adds	r7, #232	@ 0xe8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40013400 	.word	0x40013400
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58021000 	.word	0x58021000

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <NMI_Handler+0x4>

08001504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <MemManage_Handler+0x4>

08001514 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <UsageFault_Handler+0x4>

08001524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f000 fc6b 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}

0800155a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 fb02 	bl	8001b68 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800156c:	2020      	movs	r0, #32
 800156e:	f001 fac2 	bl	8002af6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <SPI4_IRQHandler+0x10>)
 800157e:	f004 ff6d 	bl	800645c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240000b8 	.word	0x240000b8

0800158c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e00a      	b.n	80015b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800159e:	f3af 8000 	nop.w
 80015a2:	4601      	mov	r1, r0
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	b2ca      	uxtb	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf0      	blt.n	800159e <_read+0x12>
  }

  return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e009      	b.n	80015ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fb35 	bl	8001c50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbf1      	blt.n	80015d8 <_write+0x12>
  }
  return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_close>:

int _close(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001626:	605a      	str	r2, [r3, #4]
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f006 fbc8 	bl	8007e2c <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24080000 	.word	0x24080000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	24000140 	.word	0x24000140
 80016d0:	24000338 	.word	0x24000338

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d8:	4b43      	ldr	r3, [pc, #268]	@ (80017e8 <SystemInit+0x114>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a42      	ldr	r2, [pc, #264]	@ (80017e8 <SystemInit+0x114>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e8:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <SystemInit+0x118>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d807      	bhi.n	8001704 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <SystemInit+0x118>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 030f 	bic.w	r3, r3, #15
 80016fc:	4a3b      	ldr	r2, [pc, #236]	@ (80017ec <SystemInit+0x118>)
 80016fe:	f043 0307 	orr.w	r3, r3, #7
 8001702:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001704:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <SystemInit+0x11c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a39      	ldr	r2, [pc, #228]	@ (80017f0 <SystemInit+0x11c>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001710:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <SystemInit+0x11c>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001716:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <SystemInit+0x11c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4935      	ldr	r1, [pc, #212]	@ (80017f0 <SystemInit+0x11c>)
 800171c:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <SystemInit+0x120>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001722:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <SystemInit+0x118>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800172e:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <SystemInit+0x118>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 030f 	bic.w	r3, r3, #15
 8001736:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <SystemInit+0x118>)
 8001738:	f043 0307 	orr.w	r3, r3, #7
 800173c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800173e:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <SystemInit+0x11c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001744:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <SystemInit+0x11c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <SystemInit+0x11c>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <SystemInit+0x11c>)
 8001752:	4a29      	ldr	r2, [pc, #164]	@ (80017f8 <SystemInit+0x124>)
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001756:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <SystemInit+0x11c>)
 8001758:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <SystemInit+0x128>)
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <SystemInit+0x11c>)
 800175e:	4a28      	ldr	r2, [pc, #160]	@ (8001800 <SystemInit+0x12c>)
 8001760:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <SystemInit+0x11c>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <SystemInit+0x11c>)
 800176a:	4a25      	ldr	r2, [pc, #148]	@ (8001800 <SystemInit+0x12c>)
 800176c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <SystemInit+0x11c>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001774:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <SystemInit+0x11c>)
 8001776:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <SystemInit+0x12c>)
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <SystemInit+0x11c>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <SystemInit+0x11c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1a      	ldr	r2, [pc, #104]	@ (80017f0 <SystemInit+0x11c>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <SystemInit+0x11c>)
 800178e:	2200      	movs	r2, #0
 8001790:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001792:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <SystemInit+0x130>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <SystemInit+0x134>)
 8001798:	4013      	ands	r3, r2
 800179a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800179e:	d202      	bcs.n	80017a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <SystemInit+0x138>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <SystemInit+0x11c>)
 80017a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d113      	bne.n	80017dc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <SystemInit+0x11c>)
 80017b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017ba:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <SystemInit+0x11c>)
 80017bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <SystemInit+0x13c>)
 80017c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <SystemInit+0x11c>)
 80017ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017d2:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <SystemInit+0x11c>)
 80017d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	52002000 	.word	0x52002000
 80017f0:	58024400 	.word	0x58024400
 80017f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017f8:	02020200 	.word	0x02020200
 80017fc:	01ff0000 	.word	0x01ff0000
 8001800:	01010280 	.word	0x01010280
 8001804:	5c001000 	.word	0x5c001000
 8001808:	ffff0000 	.word	0xffff0000
 800180c:	51008108 	.word	0x51008108
 8001810:	52004000 	.word	0x52004000

08001814 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <ExitRun0Mode+0x2c>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <ExitRun0Mode+0x2c>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001824:	bf00      	nop
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <ExitRun0Mode+0x2c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f9      	beq.n	8001826 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	58024800 	.word	0x58024800

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001880 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001848:	f7ff ffe4 	bl	8001814 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800184c:	f7ff ff42 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	@ (8001888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	@ (8001894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f006 fadf 	bl	8007e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7ff fb61 	bl	8000f40 <main>
  bx  lr
 800187e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001884:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001888:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800188c:	0800a400 	.word	0x0800a400
  ldr r2, =_sbss
 8001890:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001894:	24000334 	.word	0x24000334

08001898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC3_IRQHandler>
	...

0800189c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <BSP_LED_Init+0x28>
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d006      	beq.n	80018c4 <BSP_LED_Init+0x28>
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d003      	beq.n	80018c4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018bc:	f06f 0301 	mvn.w	r3, #1
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018c2:	e055      	b.n	8001970 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80018ca:	4b2c      	ldr	r3, [pc, #176]	@ (800197c <BSP_LED_Init+0xe0>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	4a2a      	ldr	r2, [pc, #168]	@ (800197c <BSP_LED_Init+0xe0>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018da:	4b28      	ldr	r3, [pc, #160]	@ (800197c <BSP_LED_Init+0xe0>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	e021      	b.n	800192e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10f      	bne.n	8001910 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80018f0:	4b22      	ldr	r3, [pc, #136]	@ (800197c <BSP_LED_Init+0xe0>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f6:	4a21      	ldr	r2, [pc, #132]	@ (800197c <BSP_LED_Init+0xe0>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <BSP_LED_Init+0xe0>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	e00e      	b.n	800192e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001910:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <BSP_LED_Init+0xe0>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001916:	4a19      	ldr	r2, [pc, #100]	@ (800197c <BSP_LED_Init+0xe0>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <BSP_LED_Init+0xe0>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4a13      	ldr	r2, [pc, #76]	@ (8001980 <BSP_LED_Init+0xe4>)
 8001932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001936:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <BSP_LED_Init+0xe8>)
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	f107 0218 	add.w	r2, r7, #24
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f000 feec 	bl	8002730 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <BSP_LED_Init+0xe8>)
 800195c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <BSP_LED_Init+0xe4>)
 8001964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	f001 f890 	bl	8002a90 <HAL_GPIO_WritePin>
  }

  return ret;
 8001970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001972:	4618      	mov	r0, r3
 8001974:	3730      	adds	r7, #48	@ 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	58024400 	.word	0x58024400
 8001980:	0800a398 	.word	0x0800a398
 8001984:	2400000c 	.word	0x2400000c

08001988 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <BSP_LED_On+0x28>
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d006      	beq.n	80019b0 <BSP_LED_On+0x28>
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d003      	beq.n	80019b0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019a8:	f06f 0301 	mvn.w	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e00b      	b.n	80019c8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <BSP_LED_On+0x4c>)
 80019b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <BSP_LED_On+0x50>)
 80019bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4619      	mov	r1, r3
 80019c4:	f001 f864 	bl	8002a90 <HAL_GPIO_WritePin>
  }

  return ret;
 80019c8:	68fb      	ldr	r3, [r7, #12]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2400000c 	.word	0x2400000c
 80019d8:	0800a398 	.word	0x0800a398

080019dc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <BSP_LED_Off+0x28>
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d006      	beq.n	8001a04 <BSP_LED_Off+0x28>
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d003      	beq.n	8001a04 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019fc:	f06f 0301 	mvn.w	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e00b      	b.n	8001a1c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <BSP_LED_Off+0x4c>)
 8001a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <BSP_LED_Off+0x50>)
 8001a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	f001 f83a 	bl	8002a90 <HAL_GPIO_WritePin>
  }

  return ret;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2400000c 	.word	0x2400000c
 8001a2c:	0800a398 	.word	0x0800a398

08001a30 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <BSP_LED_Toggle+0x28>
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d006      	beq.n	8001a58 <BSP_LED_Toggle+0x28>
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d003      	beq.n	8001a58 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a50:	f06f 0301 	mvn.w	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e00b      	b.n	8001a70 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <BSP_LED_Toggle+0x4c>)
 8001a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	4907      	ldr	r1, [pc, #28]	@ (8001a80 <BSP_LED_Toggle+0x50>)
 8001a64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f001 f829 	bl	8002ac2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2400000c 	.word	0x2400000c
 8001a80:	0800a398 	.word	0x0800a398

08001a84 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	4613      	mov	r3, r2
 8001a92:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001a94:	4b2e      	ldr	r3, [pc, #184]	@ (8001b50 <BSP_PB_Init+0xcc>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b50 <BSP_PB_Init+0xcc>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <BSP_PB_Init+0xcc>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001ab2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4a21      	ldr	r2, [pc, #132]	@ (8001b54 <BSP_PB_Init+0xd0>)
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	f107 020c 	add.w	r2, r7, #12
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fe29 	bl	8002730 <HAL_GPIO_Init>
 8001ade:	e031      	b.n	8001b44 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001ae0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ae4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <BSP_PB_Init+0xd0>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fe1b 	bl	8002730 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <BSP_PB_Init+0xd4>)
 8001b00:	441a      	add	r2, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4915      	ldr	r1, [pc, #84]	@ (8001b5c <BSP_PB_Init+0xd8>)
 8001b06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f000 fdca 	bl	80026a6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <BSP_PB_Init+0xd4>)
 8001b18:	1898      	adds	r0, r3, r2
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4a10      	ldr	r2, [pc, #64]	@ (8001b60 <BSP_PB_Init+0xdc>)
 8001b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b22:	461a      	mov	r2, r3
 8001b24:	2100      	movs	r1, #0
 8001b26:	f000 fd9f 	bl	8002668 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001b2a:	2028      	movs	r0, #40	@ 0x28
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <BSP_PB_Init+0xe0>)
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	2200      	movs	r2, #0
 8001b36:	4619      	mov	r1, r3
 8001b38:	f000 faa3 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001b3c:	2328      	movs	r3, #40	@ 0x28
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fab9 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	58024400 	.word	0x58024400
 8001b54:	24000018 	.word	0x24000018
 8001b58:	24000144 	.word	0x24000144
 8001b5c:	0800a3a0 	.word	0x0800a3a0
 8001b60:	2400001c 	.word	0x2400001c
 8001b64:	24000020 	.word	0x24000020

08001b68 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <BSP_PB_IRQHandler+0x20>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fda8 	bl	80026d0 <HAL_EXTI_IRQHandler>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	24000144 	.word	0x24000144

08001b8c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ba2:	f06f 0301 	mvn.w	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e018      	b.n	8001bdc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2294      	movs	r2, #148	@ 0x94
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <BSP_COM_Init+0x5c>)
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f86e 	bl	8001c98 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2294      	movs	r2, #148	@ 0x94
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <BSP_COM_Init+0x5c>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f80e 	bl	8001bec <MX_USART3_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bd6:	f06f 0303 	mvn.w	r3, #3
 8001bda:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2400014c 	.word	0x2400014c

08001bec <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <MX_USART3_Init+0x60>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	220c      	movs	r2, #12
 8001c0a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	895b      	ldrh	r3, [r3, #10]
 8001c10:	461a      	mov	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	891b      	ldrh	r3, [r3, #8]
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	899b      	ldrh	r3, [r3, #12]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c38:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f004 ff1f 	bl	8006a7e <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	24000008 	.word	0x24000008

08001c50 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <__io_putchar+0x30>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2394      	movs	r3, #148	@ 0x94
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <__io_putchar+0x34>)
 8001c66:	1898      	adds	r0, r3, r2
 8001c68:	1d39      	adds	r1, r7, #4
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f004 ff5f 	bl	8006b32 <HAL_UART_Transmit>
  return ch;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	240001e0 	.word	0x240001e0
 8001c84:	2400014c 	.word	0x2400014c

08001c88 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff fb77 	bl	8001380 <BSP_PB_Callback>
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001ca0:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca6:	4a26      	ldr	r2, [pc, #152]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb0:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce2:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <COM1_MspInit+0xa8>)
 8001cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d04:	2302      	movs	r3, #2
 8001d06:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <COM1_MspInit+0xac>)
 8001d18:	f000 fd0a 	bl	8002730 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d20:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001d26:	2307      	movs	r3, #7
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <COM1_MspInit+0xac>)
 8001d32:	f000 fcfd 	bl	8002730 <HAL_GPIO_Init>
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58020c00 	.word	0x58020c00

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4e:	2003      	movs	r0, #3
 8001d50:	f000 f98c 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d54:	f001 fd34 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_Init+0x68>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	4913      	ldr	r1, [pc, #76]	@ (8001db4 <HAL_Init+0x6c>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d72:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <HAL_Init+0x68>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001db4 <HAL_Init+0x6c>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	4a0b      	ldr	r2, [pc, #44]	@ (8001db8 <HAL_Init+0x70>)
 8001d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_Init+0x74>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 f814 	bl	8001dc0 <HAL_InitTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e002      	b.n	8001da8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001da2:	f7ff fb07 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	58024400 	.word	0x58024400
 8001db4:	0800a388 	.word	0x0800a388
 8001db8:	24000004 	.word	0x24000004
 8001dbc:	24000000 	.word	0x24000000

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dc8:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_InitTick+0x60>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e021      	b.n	8001e18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <HAL_InitTick+0x64>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_InitTick+0x60>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f971 	bl	80020d2 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f000 f93b 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	@ (8001e28 <HAL_InitTick+0x68>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	24000028 	.word	0x24000028
 8001e24:	24000000 	.word	0x24000000
 8001e28:	24000024 	.word	0x24000024

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	24000028 	.word	0x24000028
 8001e50:	240001e4 	.word	0x240001e4

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	240001e4 	.word	0x240001e4

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffee 	bl	8001e54 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffde 	bl	8001e54 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	24000028 	.word	0x24000028

08001eb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetREVID+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	5c001000 	.word	0x5c001000

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x40>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x40>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	05fa0000 	.word	0x05fa0000

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff40 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff90 	bl	8001fc0 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5f 	bl	8001f6c <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff33 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa4 	bl	8002028 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020f0:	f3bf 8f5f 	dmb	sy
}
 80020f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_MPU_Disable+0x28>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	4a06      	ldr	r2, [pc, #24]	@ (8002114 <HAL_MPU_Disable+0x28>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002100:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002102:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_MPU_Disable+0x2c>)
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00
 8002118:	e000ed90 	.word	0xe000ed90

0800211c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002124:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <HAL_MPU_Enable+0x38>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_MPU_Enable+0x3c>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <HAL_MPU_Enable+0x3c>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002138:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800213a:	f3bf 8f4f 	dsb	sy
}
 800213e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002140:	f3bf 8f6f 	isb	sy
}
 8002144:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed90 	.word	0xe000ed90
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	785a      	ldrb	r2, [r3, #1]
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_MPU_ConfigRegion+0x7c>)
 800216a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_MPU_ConfigRegion+0x7c>)
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	4a19      	ldr	r2, [pc, #100]	@ (80021d8 <HAL_MPU_ConfigRegion+0x7c>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002178:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_MPU_ConfigRegion+0x7c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7b1b      	ldrb	r3, [r3, #12]
 8002184:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7adb      	ldrb	r3, [r3, #11]
 800218a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800218c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7a9b      	ldrb	r3, [r3, #10]
 8002192:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7b5b      	ldrb	r3, [r3, #13]
 800219a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800219c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7b9b      	ldrb	r3, [r3, #14]
 80021a2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7bdb      	ldrb	r3, [r3, #15]
 80021aa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7a5b      	ldrb	r3, [r3, #9]
 80021b2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7a1b      	ldrb	r3, [r3, #8]
 80021ba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021bc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021c6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021c8:	6113      	str	r3, [r2, #16]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed90 	.word	0xe000ed90

080021dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e237      	b.n	800265e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2280      	movs	r2, #128	@ 0x80
 80021fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e22c      	b.n	800265e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5c      	ldr	r2, [pc, #368]	@ (800237c <HAL_DMA_Abort_IT+0x1a0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d04a      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a5b      	ldr	r2, [pc, #364]	@ (8002380 <HAL_DMA_Abort_IT+0x1a4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d045      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a59      	ldr	r2, [pc, #356]	@ (8002384 <HAL_DMA_Abort_IT+0x1a8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d040      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a58      	ldr	r2, [pc, #352]	@ (8002388 <HAL_DMA_Abort_IT+0x1ac>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d03b      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a56      	ldr	r2, [pc, #344]	@ (800238c <HAL_DMA_Abort_IT+0x1b0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d036      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a55      	ldr	r2, [pc, #340]	@ (8002390 <HAL_DMA_Abort_IT+0x1b4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d031      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a53      	ldr	r2, [pc, #332]	@ (8002394 <HAL_DMA_Abort_IT+0x1b8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02c      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a52      	ldr	r2, [pc, #328]	@ (8002398 <HAL_DMA_Abort_IT+0x1bc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d027      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a50      	ldr	r2, [pc, #320]	@ (800239c <HAL_DMA_Abort_IT+0x1c0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4f      	ldr	r2, [pc, #316]	@ (80023a0 <HAL_DMA_Abort_IT+0x1c4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d01d      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a4d      	ldr	r2, [pc, #308]	@ (80023a4 <HAL_DMA_Abort_IT+0x1c8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d018      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4c      	ldr	r2, [pc, #304]	@ (80023a8 <HAL_DMA_Abort_IT+0x1cc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a4a      	ldr	r2, [pc, #296]	@ (80023ac <HAL_DMA_Abort_IT+0x1d0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00e      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a49      	ldr	r2, [pc, #292]	@ (80023b0 <HAL_DMA_Abort_IT+0x1d4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a47      	ldr	r2, [pc, #284]	@ (80023b4 <HAL_DMA_Abort_IT+0x1d8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a46      	ldr	r2, [pc, #280]	@ (80023b8 <HAL_DMA_Abort_IT+0x1dc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Abort_IT+0xcc>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_DMA_Abort_IT+0xce>
 80022a8:	2300      	movs	r3, #0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8086 	beq.w	80023bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_DMA_Abort_IT+0x1a0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04a      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002380 <HAL_DMA_Abort_IT+0x1a4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d045      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002384 <HAL_DMA_Abort_IT+0x1a8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <HAL_DMA_Abort_IT+0x1ac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03b      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_DMA_Abort_IT+0x1b0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d036      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a28      	ldr	r2, [pc, #160]	@ (8002390 <HAL_DMA_Abort_IT+0x1b4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a26      	ldr	r2, [pc, #152]	@ (8002394 <HAL_DMA_Abort_IT+0x1b8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02c      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a25      	ldr	r2, [pc, #148]	@ (8002398 <HAL_DMA_Abort_IT+0x1bc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d027      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a23      	ldr	r2, [pc, #140]	@ (800239c <HAL_DMA_Abort_IT+0x1c0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <HAL_DMA_Abort_IT+0x1c4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a20      	ldr	r2, [pc, #128]	@ (80023a4 <HAL_DMA_Abort_IT+0x1c8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <HAL_DMA_Abort_IT+0x1cc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_DMA_Abort_IT+0x1d0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1c      	ldr	r2, [pc, #112]	@ (80023b0 <HAL_DMA_Abort_IT+0x1d4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1a      	ldr	r2, [pc, #104]	@ (80023b4 <HAL_DMA_Abort_IT+0x1d8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_DMA_Abort_IT+0x17c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <HAL_DMA_Abort_IT+0x1dc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <HAL_DMA_Abort_IT+0x18e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e178      	b.n	800265c <HAL_DMA_Abort_IT+0x480>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e16f      	b.n	800265c <HAL_DMA_Abort_IT+0x480>
 800237c:	40020010 	.word	0x40020010
 8002380:	40020028 	.word	0x40020028
 8002384:	40020040 	.word	0x40020040
 8002388:	40020058 	.word	0x40020058
 800238c:	40020070 	.word	0x40020070
 8002390:	40020088 	.word	0x40020088
 8002394:	400200a0 	.word	0x400200a0
 8002398:	400200b8 	.word	0x400200b8
 800239c:	40020410 	.word	0x40020410
 80023a0:	40020428 	.word	0x40020428
 80023a4:	40020440 	.word	0x40020440
 80023a8:	40020458 	.word	0x40020458
 80023ac:	40020470 	.word	0x40020470
 80023b0:	40020488 	.word	0x40020488
 80023b4:	400204a0 	.word	0x400204a0
 80023b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020e 	bic.w	r2, r2, #14
 80023ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6c      	ldr	r2, [pc, #432]	@ (8002584 <HAL_DMA_Abort_IT+0x3a8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d04a      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6b      	ldr	r2, [pc, #428]	@ (8002588 <HAL_DMA_Abort_IT+0x3ac>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d045      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a69      	ldr	r2, [pc, #420]	@ (800258c <HAL_DMA_Abort_IT+0x3b0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d040      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a68      	ldr	r2, [pc, #416]	@ (8002590 <HAL_DMA_Abort_IT+0x3b4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d03b      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a66      	ldr	r2, [pc, #408]	@ (8002594 <HAL_DMA_Abort_IT+0x3b8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d036      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a65      	ldr	r2, [pc, #404]	@ (8002598 <HAL_DMA_Abort_IT+0x3bc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d031      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a63      	ldr	r2, [pc, #396]	@ (800259c <HAL_DMA_Abort_IT+0x3c0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d02c      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a62      	ldr	r2, [pc, #392]	@ (80025a0 <HAL_DMA_Abort_IT+0x3c4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d027      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a60      	ldr	r2, [pc, #384]	@ (80025a4 <HAL_DMA_Abort_IT+0x3c8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d022      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a5f      	ldr	r2, [pc, #380]	@ (80025a8 <HAL_DMA_Abort_IT+0x3cc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d01d      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a5d      	ldr	r2, [pc, #372]	@ (80025ac <HAL_DMA_Abort_IT+0x3d0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d018      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a5c      	ldr	r2, [pc, #368]	@ (80025b0 <HAL_DMA_Abort_IT+0x3d4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5a      	ldr	r2, [pc, #360]	@ (80025b4 <HAL_DMA_Abort_IT+0x3d8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a59      	ldr	r2, [pc, #356]	@ (80025b8 <HAL_DMA_Abort_IT+0x3dc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a57      	ldr	r2, [pc, #348]	@ (80025bc <HAL_DMA_Abort_IT+0x3e0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_DMA_Abort_IT+0x290>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a56      	ldr	r2, [pc, #344]	@ (80025c0 <HAL_DMA_Abort_IT+0x3e4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d108      	bne.n	800247e <HAL_DMA_Abort_IT+0x2a2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_DMA_Abort_IT+0x2b2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3c      	ldr	r2, [pc, #240]	@ (8002584 <HAL_DMA_Abort_IT+0x3a8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d072      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3a      	ldr	r2, [pc, #232]	@ (8002588 <HAL_DMA_Abort_IT+0x3ac>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d06d      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a39      	ldr	r2, [pc, #228]	@ (800258c <HAL_DMA_Abort_IT+0x3b0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d068      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a37      	ldr	r2, [pc, #220]	@ (8002590 <HAL_DMA_Abort_IT+0x3b4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d063      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a36      	ldr	r2, [pc, #216]	@ (8002594 <HAL_DMA_Abort_IT+0x3b8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d05e      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a34      	ldr	r2, [pc, #208]	@ (8002598 <HAL_DMA_Abort_IT+0x3bc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d059      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a33      	ldr	r2, [pc, #204]	@ (800259c <HAL_DMA_Abort_IT+0x3c0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d054      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a31      	ldr	r2, [pc, #196]	@ (80025a0 <HAL_DMA_Abort_IT+0x3c4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d04f      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a30      	ldr	r2, [pc, #192]	@ (80025a4 <HAL_DMA_Abort_IT+0x3c8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d04a      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2e      	ldr	r2, [pc, #184]	@ (80025a8 <HAL_DMA_Abort_IT+0x3cc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d045      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	@ (80025ac <HAL_DMA_Abort_IT+0x3d0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d040      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2b      	ldr	r2, [pc, #172]	@ (80025b0 <HAL_DMA_Abort_IT+0x3d4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d03b      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2a      	ldr	r2, [pc, #168]	@ (80025b4 <HAL_DMA_Abort_IT+0x3d8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d036      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a28      	ldr	r2, [pc, #160]	@ (80025b8 <HAL_DMA_Abort_IT+0x3dc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d031      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <HAL_DMA_Abort_IT+0x3e0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d02c      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a25      	ldr	r2, [pc, #148]	@ (80025c0 <HAL_DMA_Abort_IT+0x3e4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d027      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <HAL_DMA_Abort_IT+0x3e8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d022      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	@ (80025c8 <HAL_DMA_Abort_IT+0x3ec>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01d      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <HAL_DMA_Abort_IT+0x3f0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d018      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_DMA_Abort_IT+0x3f4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <HAL_DMA_Abort_IT+0x3f8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00e      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_DMA_Abort_IT+0x3fc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	@ (80025dc <HAL_DMA_Abort_IT+0x400>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_DMA_Abort_IT+0x3a2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	@ (80025e0 <HAL_DMA_Abort_IT+0x404>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d132      	bne.n	80025e4 <HAL_DMA_Abort_IT+0x408>
 800257e:	2301      	movs	r3, #1
 8002580:	e031      	b.n	80025e6 <HAL_DMA_Abort_IT+0x40a>
 8002582:	bf00      	nop
 8002584:	40020010 	.word	0x40020010
 8002588:	40020028 	.word	0x40020028
 800258c:	40020040 	.word	0x40020040
 8002590:	40020058 	.word	0x40020058
 8002594:	40020070 	.word	0x40020070
 8002598:	40020088 	.word	0x40020088
 800259c:	400200a0 	.word	0x400200a0
 80025a0:	400200b8 	.word	0x400200b8
 80025a4:	40020410 	.word	0x40020410
 80025a8:	40020428 	.word	0x40020428
 80025ac:	40020440 	.word	0x40020440
 80025b0:	40020458 	.word	0x40020458
 80025b4:	40020470 	.word	0x40020470
 80025b8:	40020488 	.word	0x40020488
 80025bc:	400204a0 	.word	0x400204a0
 80025c0:	400204b8 	.word	0x400204b8
 80025c4:	58025408 	.word	0x58025408
 80025c8:	5802541c 	.word	0x5802541c
 80025cc:	58025430 	.word	0x58025430
 80025d0:	58025444 	.word	0x58025444
 80025d4:	58025458 	.word	0x58025458
 80025d8:	5802546c 	.word	0x5802546c
 80025dc:	58025480 	.word	0x58025480
 80025e0:	58025494 	.word	0x58025494
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2201      	movs	r2, #1
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002618:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800262c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002630:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800263a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop

08002668 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	460b      	mov	r3, r1
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e00a      	b.n	800269a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	605a      	str	r2, [r3, #4]
      break;
 8002690:	e002      	b.n	8002698 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
      break;
 8002696:	bf00      	nop
  }

  return status;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e003      	b.n	80026c2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2201      	movs	r2, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	011a      	lsls	r2, r3, #4
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_EXTI_IRQHandler+0x5c>)
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4798      	blx	r3
    }
  }
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	58000088 	.word	0x58000088

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800273e:	4b89      	ldr	r3, [pc, #548]	@ (8002964 <HAL_GPIO_Init+0x234>)
 8002740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002742:	e194      	b.n	8002a6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8186 	beq.w	8002a68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d005      	beq.n	8002774 <HAL_GPIO_Init+0x44>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d130      	bne.n	80027d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027aa:	2201      	movs	r2, #1
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0201 	and.w	r2, r3, #1
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d017      	beq.n	8002812 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d123      	bne.n	8002866 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	08da      	lsrs	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3208      	adds	r2, #8
 8002826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	220f      	movs	r2, #15
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	08da      	lsrs	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3208      	adds	r2, #8
 8002860:	69b9      	ldr	r1, [r7, #24]
 8002862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80e0 	beq.w	8002a68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <HAL_GPIO_Init+0x238>)
 80028aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002968 <HAL_GPIO_Init+0x238>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_GPIO_Init+0x238>)
 80028ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c6:	4a29      	ldr	r2, [pc, #164]	@ (800296c <HAL_GPIO_Init+0x23c>)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a20      	ldr	r2, [pc, #128]	@ (8002970 <HAL_GPIO_Init+0x240>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d052      	beq.n	8002998 <HAL_GPIO_Init+0x268>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <HAL_GPIO_Init+0x244>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_GPIO_Init+0x22e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002978 <HAL_GPIO_Init+0x248>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02b      	beq.n	800295a <HAL_GPIO_Init+0x22a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <HAL_GPIO_Init+0x24c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d025      	beq.n	8002956 <HAL_GPIO_Init+0x226>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <HAL_GPIO_Init+0x250>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x222>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1b      	ldr	r2, [pc, #108]	@ (8002984 <HAL_GPIO_Init+0x254>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x21e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1a      	ldr	r2, [pc, #104]	@ (8002988 <HAL_GPIO_Init+0x258>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x21a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_GPIO_Init+0x25c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x216>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_GPIO_Init+0x260>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x212>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <HAL_GPIO_Init+0x264>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x20e>
 800293a:	2309      	movs	r3, #9
 800293c:	e02d      	b.n	800299a <HAL_GPIO_Init+0x26a>
 800293e:	230a      	movs	r3, #10
 8002940:	e02b      	b.n	800299a <HAL_GPIO_Init+0x26a>
 8002942:	2308      	movs	r3, #8
 8002944:	e029      	b.n	800299a <HAL_GPIO_Init+0x26a>
 8002946:	2307      	movs	r3, #7
 8002948:	e027      	b.n	800299a <HAL_GPIO_Init+0x26a>
 800294a:	2306      	movs	r3, #6
 800294c:	e025      	b.n	800299a <HAL_GPIO_Init+0x26a>
 800294e:	2305      	movs	r3, #5
 8002950:	e023      	b.n	800299a <HAL_GPIO_Init+0x26a>
 8002952:	2304      	movs	r3, #4
 8002954:	e021      	b.n	800299a <HAL_GPIO_Init+0x26a>
 8002956:	2303      	movs	r3, #3
 8002958:	e01f      	b.n	800299a <HAL_GPIO_Init+0x26a>
 800295a:	2302      	movs	r3, #2
 800295c:	e01d      	b.n	800299a <HAL_GPIO_Init+0x26a>
 800295e:	2301      	movs	r3, #1
 8002960:	e01b      	b.n	800299a <HAL_GPIO_Init+0x26a>
 8002962:	bf00      	nop
 8002964:	58000080 	.word	0x58000080
 8002968:	58024400 	.word	0x58024400
 800296c:	58000400 	.word	0x58000400
 8002970:	58020000 	.word	0x58020000
 8002974:	58020400 	.word	0x58020400
 8002978:	58020800 	.word	0x58020800
 800297c:	58020c00 	.word	0x58020c00
 8002980:	58021000 	.word	0x58021000
 8002984:	58021400 	.word	0x58021400
 8002988:	58021800 	.word	0x58021800
 800298c:	58021c00 	.word	0x58021c00
 8002990:	58022000 	.word	0x58022000
 8002994:	58022400 	.word	0x58022400
 8002998:	2300      	movs	r3, #0
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f002 0203 	and.w	r2, r2, #3
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	4093      	lsls	r3, r2
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029aa:	4938      	ldr	r1, [pc, #224]	@ (8002a8c <HAL_GPIO_Init+0x35c>)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f ae63 	bne.w	8002744 <HAL_GPIO_Init+0x14>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	3724      	adds	r7, #36	@ 0x24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	58000400 	.word	0x58000400

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002aac:	e003      	b.n	8002ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	619a      	str	r2, [r3, #24]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fbc5 	bl	80012ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d00a      	beq.n	8002b56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b40:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e01f      	b.n	8002b92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e01d      	b.n	8002b92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b56:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	490f      	ldr	r1, [pc, #60]	@ (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b66:	f7ff f975 	bl	8001e54 <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b6c:	e009      	b.n	8002b82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b6e:	f7ff f971 	bl	8001e54 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b7c:	d901      	bls.n	8002b82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	58024800 	.word	0x58024800

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	@ 0x30
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f000 bc48 	b.w	8003444 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8088 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc2:	4b99      	ldr	r3, [pc, #612]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bcc:	4b96      	ldr	r3, [pc, #600]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d007      	beq.n	8002be8 <HAL_RCC_OscConfig+0x48>
 8002bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bda:	2b18      	cmp	r3, #24
 8002bdc:	d111      	bne.n	8002c02 <HAL_RCC_OscConfig+0x62>
 8002bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4b8f      	ldr	r3, [pc, #572]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d06d      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x130>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d169      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f000 bc21 	b.w	8003444 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x7a>
 8002c0c:	4b86      	ldr	r3, [pc, #536]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a85      	ldr	r2, [pc, #532]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e02e      	b.n	8002c78 <HAL_RCC_OscConfig+0xd8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x9c>
 8002c22:	4b81      	ldr	r3, [pc, #516]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a80      	ldr	r2, [pc, #512]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b7e      	ldr	r3, [pc, #504]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7d      	ldr	r2, [pc, #500]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xd8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0xc0>
 8002c46:	4b78      	ldr	r3, [pc, #480]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a77      	ldr	r2, [pc, #476]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b75      	ldr	r3, [pc, #468]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a74      	ldr	r2, [pc, #464]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xd8>
 8002c60:	4b71      	ldr	r3, [pc, #452]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a70      	ldr	r2, [pc, #448]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6d      	ldr	r2, [pc, #436]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7ff f8e8 	bl	8001e54 <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff f8e4 	bl	8001e54 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e3d4      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xe8>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f8d4 	bl	8001e54 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff f8d0 	bl	8001e54 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	@ 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e3c0      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cc2:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x110>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80ca 	beq.w	8002e74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce0:	4b51      	ldr	r3, [pc, #324]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ce8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cea:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_RCC_OscConfig+0x166>
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2b18      	cmp	r3, #24
 8002cfa:	d156      	bne.n	8002daa <HAL_RCC_OscConfig+0x20a>
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d151      	bne.n	8002daa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d06:	4b48      	ldr	r3, [pc, #288]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x17e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e392      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d1e:	4b42      	ldr	r3, [pc, #264]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0219 	bic.w	r2, r3, #25
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	493f      	ldr	r1, [pc, #252]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff f890 	bl	8001e54 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d38:	f7ff f88c 	bl	8001e54 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e37c      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4a:	4b37      	ldr	r3, [pc, #220]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	f7ff f8ad 	bl	8001eb4 <HAL_GetREVID>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d817      	bhi.n	8002d94 <HAL_RCC_OscConfig+0x1f4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b40      	cmp	r3, #64	@ 0x40
 8002d6a:	d108      	bne.n	8002d7e <HAL_RCC_OscConfig+0x1de>
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d74:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	e07a      	b.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	031b      	lsls	r3, r3, #12
 8002d8c:	4926      	ldr	r1, [pc, #152]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d92:	e06f      	b.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	4921      	ldr	r1, [pc, #132]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	e064      	b.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d047      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0219 	bic.w	r2, r3, #25
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	491a      	ldr	r1, [pc, #104]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7ff f846 	bl	8001e54 <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7ff f842 	bl	8001e54 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e332      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	f7ff f863 	bl	8001eb4 <HAL_GetREVID>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d819      	bhi.n	8002e2c <HAL_RCC_OscConfig+0x28c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b40      	cmp	r3, #64	@ 0x40
 8002dfe:	d108      	bne.n	8002e12 <HAL_RCC_OscConfig+0x272>
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e08:	4a07      	ldr	r2, [pc, #28]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0e:	6053      	str	r3, [r2, #4]
 8002e10:	e030      	b.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
 8002e12:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	4901      	ldr	r1, [pc, #4]	@ (8002e28 <HAL_RCC_OscConfig+0x288>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
 8002e26:	e025      	b.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	4b9a      	ldr	r3, [pc, #616]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	4997      	ldr	r1, [pc, #604]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
 8002e40:	e018      	b.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e42:	4b95      	ldr	r3, [pc, #596]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a94      	ldr	r2, [pc, #592]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7ff f801 	bl	8001e54 <HAL_GetTick>
 8002e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e56:	f7fe fffd 	bl	8001e54 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e2ed      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e68:	4b8b      	ldr	r3, [pc, #556]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80a9 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e82:	4b85      	ldr	r3, [pc, #532]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e8c:	4b82      	ldr	r3, [pc, #520]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d007      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x308>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b18      	cmp	r3, #24
 8002e9c:	d13a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x374>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d135      	bne.n	8002f14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea8:	4b7b      	ldr	r3, [pc, #492]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x320>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2b80      	cmp	r3, #128	@ 0x80
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e2c1      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ec0:	f7fe fff8 	bl	8001eb4 <HAL_GetREVID>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d817      	bhi.n	8002efe <HAL_RCC_OscConfig+0x35e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x348>
 8002ed6:	4b70      	ldr	r3, [pc, #448]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ede:	4a6e      	ldr	r2, [pc, #440]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ee4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee6:	e075      	b.n	8002fd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee8:	4b6b      	ldr	r3, [pc, #428]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	069b      	lsls	r3, r3, #26
 8002ef6:	4968      	ldr	r1, [pc, #416]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002efc:	e06a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002efe:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	4962      	ldr	r1, [pc, #392]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f12:	e05f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d042      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5d      	ldr	r2, [pc, #372]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe ff94 	bl	8001e54 <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f30:	f7fe ff90 	bl	8001e54 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e280      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f42:	4b55      	ldr	r3, [pc, #340]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f4e:	f7fe ffb1 	bl	8001eb4 <HAL_GetREVID>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d817      	bhi.n	8002f8c <HAL_RCC_OscConfig+0x3ec>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d108      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3d6>
 8002f64:	4b4c      	ldr	r3, [pc, #304]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f72:	6053      	str	r3, [r2, #4]
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x434>
 8002f76:	4b48      	ldr	r3, [pc, #288]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	069b      	lsls	r3, r3, #26
 8002f84:	4944      	ldr	r1, [pc, #272]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
 8002f8a:	e023      	b.n	8002fd4 <HAL_RCC_OscConfig+0x434>
 8002f8c:	4b42      	ldr	r3, [pc, #264]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	493f      	ldr	r1, [pc, #252]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
 8002fa0:	e018      	b.n	8002fd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe ff51 	bl	8001e54 <HAL_GetTick>
 8002fb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fb6:	f7fe ff4d 	bl	8001e54 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e23d      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fc8:	4b33      	ldr	r3, [pc, #204]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d036      	beq.n	800304e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d019      	beq.n	800301c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fec:	4a2a      	ldr	r2, [pc, #168]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe ff2e 	bl	8001e54 <HAL_GetTick>
 8002ff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7fe ff2a 	bl	8001e54 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e21a      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800300e:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8003010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x45c>
 800301a:	e018      	b.n	800304e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301c:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003020:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe ff14 	bl	8001e54 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe ff10 	bl	8001e54 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e200      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8003044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d039      	beq.n	80030ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01c      	beq.n	800309c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003062:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a0c      	ldr	r2, [pc, #48]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8003068:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800306c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800306e:	f7fe fef1 	bl	8001e54 <HAL_GetTick>
 8003072:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003076:	f7fe feed 	bl	8001e54 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1dd      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_RCC_OscConfig+0x4f8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x4d6>
 8003094:	e01b      	b.n	80030ce <HAL_RCC_OscConfig+0x52e>
 8003096:	bf00      	nop
 8003098:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800309c:	4b9b      	ldr	r3, [pc, #620]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a9a      	ldr	r2, [pc, #616]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80030a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fed4 	bl	8001e54 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b0:	f7fe fed0 	bl	8001e54 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1c0      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030c2:	4b92      	ldr	r3, [pc, #584]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8081 	beq.w	80031de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003310 <HAL_RCC_OscConfig+0x770>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a8b      	ldr	r2, [pc, #556]	@ (8003310 <HAL_RCC_OscConfig+0x770>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e8:	f7fe feb4 	bl	8001e54 <HAL_GetTick>
 80030ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fe feb0 	bl	8001e54 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1a0      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003102:	4b83      	ldr	r3, [pc, #524]	@ (8003310 <HAL_RCC_OscConfig+0x770>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x584>
 8003116:	4b7d      	ldr	r3, [pc, #500]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311a:	4a7c      	ldr	r2, [pc, #496]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6713      	str	r3, [r2, #112]	@ 0x70
 8003122:	e02d      	b.n	8003180 <HAL_RCC_OscConfig+0x5e0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_OscConfig+0x5a6>
 800312c:	4b77      	ldr	r3, [pc, #476]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003130:	4a76      	ldr	r2, [pc, #472]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	@ 0x70
 8003138:	4b74      	ldr	r3, [pc, #464]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313c:	4a73      	ldr	r2, [pc, #460]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	6713      	str	r3, [r2, #112]	@ 0x70
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x5e0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x5c8>
 800314e:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	4a6e      	ldr	r2, [pc, #440]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6713      	str	r3, [r2, #112]	@ 0x70
 800315a:	4b6c      	ldr	r3, [pc, #432]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a6b      	ldr	r2, [pc, #428]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x5e0>
 8003168:	4b68      	ldr	r3, [pc, #416]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316c:	4a67      	ldr	r2, [pc, #412]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	@ 0x70
 8003174:	4b65      	ldr	r3, [pc, #404]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a64      	ldr	r2, [pc, #400]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fe64 	bl	8001e54 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe fe60 	bl	8001e54 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e14e      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a6:	4b59      	ldr	r3, [pc, #356]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RCC_OscConfig+0x5f0>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fe4e 	bl	8001e54 <HAL_GetTick>
 80031b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fe4a 	bl	8001e54 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e138      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d2:	4b4e      	ldr	r3, [pc, #312]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ee      	bne.n	80031bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 812d 	beq.w	8003442 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031e8:	4b48      	ldr	r3, [pc, #288]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031f0:	2b18      	cmp	r3, #24
 80031f2:	f000 80bd 	beq.w	8003370 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	f040 809e 	bne.w	800333c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003200:	4b42      	ldr	r3, [pc, #264]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a41      	ldr	r2, [pc, #260]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe fe22 	bl	8001e54 <HAL_GetTick>
 8003210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fe1e 	bl	8001e54 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e10e      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003226:	4b39      	ldr	r3, [pc, #228]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003232:	4b36      	ldr	r3, [pc, #216]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003236:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <HAL_RCC_OscConfig+0x774>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	430a      	orrs	r2, r1
 8003246:	4931      	ldr	r1, [pc, #196]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003248:	4313      	orrs	r3, r2
 800324a:	628b      	str	r3, [r1, #40]	@ 0x28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	3b01      	subs	r3, #1
 8003252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325a:	3b01      	subs	r3, #1
 800325c:	025b      	lsls	r3, r3, #9
 800325e:	b29b      	uxth	r3, r3
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	3b01      	subs	r3, #1
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	3b01      	subs	r3, #1
 8003276:	061b      	lsls	r3, r3, #24
 8003278:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800327c:	4923      	ldr	r1, [pc, #140]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003282:	4b22      	ldr	r3, [pc, #136]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	4a21      	ldr	r2, [pc, #132]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800328e:	4b1f      	ldr	r3, [pc, #124]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 8003290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003292:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <HAL_RCC_OscConfig+0x778>)
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800329a:	00d2      	lsls	r2, r2, #3
 800329c:	491b      	ldr	r1, [pc, #108]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032a2:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	f023 020c 	bic.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	4917      	ldr	r1, [pc, #92]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032b4:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	f023 0202 	bic.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c0:	4912      	ldr	r1, [pc, #72]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032c6:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	4a10      	ldr	r2, [pc, #64]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d2:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032de:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032ea:	4b08      	ldr	r3, [pc, #32]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	4a07      	ldr	r2, [pc, #28]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f6:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a04      	ldr	r2, [pc, #16]	@ (800330c <HAL_RCC_OscConfig+0x76c>)
 80032fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fe fda7 	bl	8001e54 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003308:	e011      	b.n	800332e <HAL_RCC_OscConfig+0x78e>
 800330a:	bf00      	nop
 800330c:	58024400 	.word	0x58024400
 8003310:	58024800 	.word	0x58024800
 8003314:	fffffc0c 	.word	0xfffffc0c
 8003318:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fd9a 	bl	8001e54 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e08a      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800332e:	4b47      	ldr	r3, [pc, #284]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x77c>
 800333a:	e082      	b.n	8003442 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b43      	ldr	r3, [pc, #268]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a42      	ldr	r2, [pc, #264]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fd84 	bl	8001e54 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fd80 	bl	8001e54 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e070      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003362:	4b3a      	ldr	r3, [pc, #232]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x7b0>
 800336e:	e068      	b.n	8003442 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003370:	4b36      	ldr	r3, [pc, #216]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003376:	4b35      	ldr	r3, [pc, #212]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	2b01      	cmp	r3, #1
 8003382:	d031      	beq.n	80033e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0203 	and.w	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d12a      	bne.n	80033e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d122      	bne.n	80033e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d11a      	bne.n	80033e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0a5b      	lsrs	r3, r3, #9
 80033b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d111      	bne.n	80033e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d108      	bne.n	80033e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	0e1b      	lsrs	r3, r3, #24
 80033da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e02b      	b.n	8003444 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033ec:	4b17      	ldr	r3, [pc, #92]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 80033ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f0:	08db      	lsrs	r3, r3, #3
 80033f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d01f      	beq.n	8003442 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003402:	4b12      	ldr	r3, [pc, #72]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	4a11      	ldr	r2, [pc, #68]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800340e:	f7fe fd21 	bl	8001e54 <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003414:	bf00      	nop
 8003416:	f7fe fd1d 	bl	8001e54 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	4293      	cmp	r3, r2
 8003420:	d0f9      	beq.n	8003416 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003422:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003426:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <HAL_RCC_OscConfig+0x8b0>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800342e:	00d2      	lsls	r2, r2, #3
 8003430:	4906      	ldr	r1, [pc, #24]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003432:	4313      	orrs	r3, r2
 8003434:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003436:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	4a04      	ldr	r2, [pc, #16]	@ (800344c <HAL_RCC_OscConfig+0x8ac>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3730      	adds	r7, #48	@ 0x30
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	58024400 	.word	0x58024400
 8003450:	ffff0007 	.word	0xffff0007

08003454 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e19c      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b8a      	ldr	r3, [pc, #552]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b87      	ldr	r3, [pc, #540]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 020f 	bic.w	r2, r3, #15
 800347e:	4985      	ldr	r1, [pc, #532]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b83      	ldr	r3, [pc, #524]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e184      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d908      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034b4:	4b78      	ldr	r3, [pc, #480]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	4975      	ldr	r1, [pc, #468]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	4b70      	ldr	r3, [pc, #448]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034de:	429a      	cmp	r2, r3
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	496a      	ldr	r1, [pc, #424]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	4b64      	ldr	r3, [pc, #400]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800350c:	429a      	cmp	r2, r3
 800350e:	d908      	bls.n	8003522 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003510:	4b61      	ldr	r3, [pc, #388]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	495e      	ldr	r1, [pc, #376]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 800351e:	4313      	orrs	r3, r2
 8003520:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	4b59      	ldr	r3, [pc, #356]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800353a:	429a      	cmp	r2, r3
 800353c:	d908      	bls.n	8003550 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800353e:	4b56      	ldr	r3, [pc, #344]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4953      	ldr	r1, [pc, #332]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 800354c:	4313      	orrs	r3, r2
 800354e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	4b4d      	ldr	r3, [pc, #308]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	429a      	cmp	r2, r3
 800356a:	d908      	bls.n	800357e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b4a      	ldr	r3, [pc, #296]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f023 020f 	bic.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4947      	ldr	r1, [pc, #284]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 800357a:	4313      	orrs	r3, r2
 800357c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d055      	beq.n	8003636 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800358a:	4b43      	ldr	r3, [pc, #268]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4940      	ldr	r1, [pc, #256]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003598:	4313      	orrs	r3, r2
 800359a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d121      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0f6      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035bc:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d115      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0ea      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035d4:	4b30      	ldr	r3, [pc, #192]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0de      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0d6      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f4:	4b28      	ldr	r3, [pc, #160]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f023 0207 	bic.w	r2, r3, #7
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4925      	ldr	r1, [pc, #148]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003606:	f7fe fc25 	bl	8001e54 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360c:	e00a      	b.n	8003624 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360e:	f7fe fc21 	bl	8001e54 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0be      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003624:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	429a      	cmp	r2, r3
 8003634:	d1eb      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d010      	beq.n	8003664 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	429a      	cmp	r2, r3
 8003650:	d208      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003652:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	490e      	ldr	r1, [pc, #56]	@ (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003660:	4313      	orrs	r3, r2
 8003662:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d214      	bcs.n	800369c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	4906      	ldr	r1, [pc, #24]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e086      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
 8003694:	52002000 	.word	0x52002000
 8003698:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	4b3f      	ldr	r3, [pc, #252]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d208      	bcs.n	80036ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036b8:	4b3c      	ldr	r3, [pc, #240]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4939      	ldr	r1, [pc, #228]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	4b34      	ldr	r3, [pc, #208]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d208      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036e6:	4b31      	ldr	r3, [pc, #196]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	492e      	ldr	r1, [pc, #184]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	4b28      	ldr	r3, [pc, #160]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003710:	429a      	cmp	r2, r3
 8003712:	d208      	bcs.n	8003726 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003714:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4922      	ldr	r1, [pc, #136]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003722:	4313      	orrs	r3, r2
 8003724:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800373e:	429a      	cmp	r2, r3
 8003740:	d208      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003742:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4917      	ldr	r1, [pc, #92]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003750:	4313      	orrs	r3, r2
 8003752:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003754:	f000 f834 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b14      	ldr	r3, [pc, #80]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	4912      	ldr	r1, [pc, #72]	@ (80037b0 <HAL_RCC_ClockConfig+0x35c>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
 8003770:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003772:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	4a0d      	ldr	r2, [pc, #52]	@ (80037b0 <HAL_RCC_ClockConfig+0x35c>)
 800377c:	5cd3      	ldrb	r3, [r2, r3]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_RCC_ClockConfig+0x360>)
 800378a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800378c:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <HAL_RCC_ClockConfig+0x364>)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_RCC_ClockConfig+0x368>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fb12 	bl	8001dc0 <HAL_InitTick>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	58024400 	.word	0x58024400
 80037b0:	0800a388 	.word	0x0800a388
 80037b4:	24000004 	.word	0x24000004
 80037b8:	24000000 	.word	0x24000000
 80037bc:	24000024 	.word	0x24000024

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c6:	4bb3      	ldr	r3, [pc, #716]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ce:	2b18      	cmp	r3, #24
 80037d0:	f200 8155 	bhi.w	8003a7e <HAL_RCC_GetSysClockFreq+0x2be>
 80037d4:	a201      	add	r2, pc, #4	@ (adr r2, 80037dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	08003841 	.word	0x08003841
 80037e0:	08003a7f 	.word	0x08003a7f
 80037e4:	08003a7f 	.word	0x08003a7f
 80037e8:	08003a7f 	.word	0x08003a7f
 80037ec:	08003a7f 	.word	0x08003a7f
 80037f0:	08003a7f 	.word	0x08003a7f
 80037f4:	08003a7f 	.word	0x08003a7f
 80037f8:	08003a7f 	.word	0x08003a7f
 80037fc:	08003867 	.word	0x08003867
 8003800:	08003a7f 	.word	0x08003a7f
 8003804:	08003a7f 	.word	0x08003a7f
 8003808:	08003a7f 	.word	0x08003a7f
 800380c:	08003a7f 	.word	0x08003a7f
 8003810:	08003a7f 	.word	0x08003a7f
 8003814:	08003a7f 	.word	0x08003a7f
 8003818:	08003a7f 	.word	0x08003a7f
 800381c:	0800386d 	.word	0x0800386d
 8003820:	08003a7f 	.word	0x08003a7f
 8003824:	08003a7f 	.word	0x08003a7f
 8003828:	08003a7f 	.word	0x08003a7f
 800382c:	08003a7f 	.word	0x08003a7f
 8003830:	08003a7f 	.word	0x08003a7f
 8003834:	08003a7f 	.word	0x08003a7f
 8003838:	08003a7f 	.word	0x08003a7f
 800383c:	08003873 	.word	0x08003873
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003840:	4b94      	ldr	r3, [pc, #592]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800384c:	4b91      	ldr	r3, [pc, #580]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	4a90      	ldr	r2, [pc, #576]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800385e:	e111      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003860:	4b8d      	ldr	r3, [pc, #564]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003862:	61bb      	str	r3, [r7, #24]
      break;
 8003864:	e10e      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003866:	4b8d      	ldr	r3, [pc, #564]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003868:	61bb      	str	r3, [r7, #24]
      break;
 800386a:	e10b      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800386c:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800386e:	61bb      	str	r3, [r7, #24]
      break;
 8003870:	e108      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003872:	4b88      	ldr	r3, [pc, #544]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800387c:	4b85      	ldr	r3, [pc, #532]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003886:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003888:	4b82      	ldr	r3, [pc, #520]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003892:	4b80      	ldr	r3, [pc, #512]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80e1 	beq.w	8003a78 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f000 8083 	beq.w	80039c4 <HAL_RCC_GetSysClockFreq+0x204>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	f200 80a1 	bhi.w	8003a08 <HAL_RCC_GetSysClockFreq+0x248>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x114>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d056      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038d2:	e099      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02d      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b62      	ldr	r3, [pc, #392]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a02 	vldr	s12, [r7, #8]
 800391e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800393a:	e087      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003aa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b51      	ldr	r3, [pc, #324]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003962:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800397e:	e065      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x2ec>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b40      	ldr	r3, [pc, #256]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039c2:	e043      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ab0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a06:	e021      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	0a5b      	lsrs	r3, r3, #9
 8003a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a56:	3301      	adds	r3, #1
 8003a58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a70:	ee17 3a90 	vmov	r3, s15
 8003a74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
      break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a7e:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a80:	61bb      	str	r3, [r7, #24]
      break;
 8003a82:	bf00      	nop
  }

  return sysclockfreq;
 8003a84:	69bb      	ldr	r3, [r7, #24]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	@ 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	58024400 	.word	0x58024400
 8003a98:	03d09000 	.word	0x03d09000
 8003a9c:	003d0900 	.word	0x003d0900
 8003aa0:	017d7840 	.word	0x017d7840
 8003aa4:	46000000 	.word	0x46000000
 8003aa8:	4c742400 	.word	0x4c742400
 8003aac:	4a742400 	.word	0x4a742400
 8003ab0:	4bbebc20 	.word	0x4bbebc20

08003ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003aba:	f7ff fe81 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490f      	ldr	r1, [pc, #60]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	4a09      	ldr	r2, [pc, #36]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a07      	ldr	r2, [pc, #28]	@ (8003b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8003af0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003af2:	4a07      	ldr	r2, [pc, #28]	@ (8003b10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003af8:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	58024400 	.word	0x58024400
 8003b08:	0800a388 	.word	0x0800a388
 8003b0c:	24000004 	.word	0x24000004
 8003b10:	24000000 	.word	0x24000000

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b18:	f7ff ffcc 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	@ (8003b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	0800a388 	.word	0x0800a388

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b44:	f7ff ffb6 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4904      	ldr	r1, [pc, #16]	@ (8003b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	58024400 	.word	0x58024400
 8003b68:	0800a388 	.word	0x0800a388

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b70:	b0ca      	sub	sp, #296	@ 0x128
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b90:	2500      	movs	r5, #0
 8003b92:	ea54 0305 	orrs.w	r3, r4, r5
 8003b96:	d049      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ba2:	d02f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ba4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ba8:	d828      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bae:	d01a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb4:	d822      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bbe:	d007      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bc0:	e01c      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc2:	4bb8      	ldr	r3, [pc, #736]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	4ab7      	ldr	r2, [pc, #732]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bce:	e01a      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 fc8f 	bl	80054fc <RCCEx_PLL2_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003be4:	e00f      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bea:	3328      	adds	r3, #40	@ 0x28
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 fd36 	bl	8005660 <RCCEx_PLL3_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bfa:	e004      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c02:	e000      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c0e:	4ba5      	ldr	r3, [pc, #660]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1c:	4aa1      	ldr	r2, [pc, #644]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c22:	e003      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c38:	f04f 0900 	mov.w	r9, #0
 8003c3c:	ea58 0309 	orrs.w	r3, r8, r9
 8003c40:	d047      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d82a      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c69 	.word	0x08003c69
 8003c58:	08003c77 	.word	0x08003c77
 8003c5c:	08003c8d 	.word	0x08003c8d
 8003c60:	08003cab 	.word	0x08003cab
 8003c64:	08003cab 	.word	0x08003cab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c68:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6c:	4a8d      	ldr	r2, [pc, #564]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c74:	e01a      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 fc3c 	bl	80054fc <RCCEx_PLL2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c8a:	e00f      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	3328      	adds	r3, #40	@ 0x28
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fce3 	bl	8005660 <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb8:	f023 0107 	bic.w	r1, r3, #7
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	4a78      	ldr	r2, [pc, #480]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cc8:	e003      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003cde:	f04f 0b00 	mov.w	fp, #0
 8003ce2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ce6:	d04c      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf2:	d030      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf8:	d829      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003cfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cfc:	d02d      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d00:	d825      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d02:	2b80      	cmp	r3, #128	@ 0x80
 8003d04:	d018      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d821      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d0e:	2b40      	cmp	r3, #64	@ 0x40
 8003d10:	d007      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d12:	e01c      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d14:	4b63      	ldr	r3, [pc, #396]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	4a62      	ldr	r2, [pc, #392]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d20:	e01c      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	3308      	adds	r3, #8
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 fbe6 	bl	80054fc <RCCEx_PLL2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d36:	e011      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3c:	3328      	adds	r3, #40	@ 0x28
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 fc8d 	bl	8005660 <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d4c:	e006      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d54:	e002      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d64:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003d8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003d98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d053      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dae:	d035      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003db0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003db4:	d82e      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003db6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dba:	d031      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dc0:	d828      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc6:	d01a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dcc:	d822      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd6:	d007      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003dd8:	e01c      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dda:	4b32      	ldr	r3, [pc, #200]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	4a31      	ldr	r2, [pc, #196]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003de6:	e01c      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	3308      	adds	r3, #8
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 fb83 	bl	80054fc <RCCEx_PLL2_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003dfc:	e011      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	3328      	adds	r3, #40	@ 0x28
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fc2a 	bl	8005660 <RCCEx_PLL3_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e12:	e006      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e1a:	e002      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003e64:	460b      	mov	r3, r1
 8003e66:	4313      	orrs	r3, r2
 8003e68:	d056      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e76:	d038      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e7c:	d831      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e82:	d034      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003e84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e88:	d82b      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e8e:	d01d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e94:	d825      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ea0:	e01f      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ea2:	bf00      	nop
 8003ea4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4ba2      	ldr	r3, [pc, #648]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	4aa1      	ldr	r2, [pc, #644]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eb4:	e01c      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eba:	3308      	adds	r3, #8
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 fb1c 	bl	80054fc <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003eca:	e011      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	3328      	adds	r3, #40	@ 0x28
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fbc3 	bl	8005660 <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ee0:	e006      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ee8:	e002      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ef8:	4b8e      	ldr	r3, [pc, #568]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f08:	4a8a      	ldr	r2, [pc, #552]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d03a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3e:	2b30      	cmp	r3, #48	@ 0x30
 8003f40:	d01f      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f42:	2b30      	cmp	r3, #48	@ 0x30
 8003f44:	d819      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d00c      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d815      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d019      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d111      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f56:	4b77      	ldr	r3, [pc, #476]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	4a76      	ldr	r2, [pc, #472]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f62:	e011      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	3308      	adds	r3, #8
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fac5 	bl	80054fc <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f78:	e006      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f80:	e002      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f90:	4b68      	ldr	r3, [pc, #416]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	4a65      	ldr	r2, [pc, #404]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003fba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	d051      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd8:	d035      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003fda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fde:	d82e      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fe4:	d031      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003fe6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fea:	d828      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff0:	d01a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff6:	d822      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004000:	d007      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004002:	e01c      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004004:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800400a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800400e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004010:	e01c      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	3308      	adds	r3, #8
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f001 fa6e 	bl	80054fc <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004026:	e011      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	3328      	adds	r3, #40	@ 0x28
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f001 fb15 	bl	8005660 <RCCEx_PLL3_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800403c:	e006      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004044:	e002      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800404a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004054:	4b37      	ldr	r3, [pc, #220]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004064:	430b      	orrs	r3, r1
 8004066:	6513      	str	r3, [r2, #80]	@ 0x50
 8004068:	e003      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800407e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004088:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d056      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800409c:	d033      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800409e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a2:	d82c      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040a8:	d02f      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ae:	d826      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040b4:	d02b      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040ba:	d820      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040c0:	d012      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80040c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040c6:	d81a      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d022      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d0:	d115      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	3308      	adds	r3, #8
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fa0e 	bl	80054fc <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040e6:	e015      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fab5 	bl	8005660 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040fc:	e00a      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800411e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004120:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800412a:	4a02      	ldr	r2, [pc, #8]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800412c:	430b      	orrs	r3, r1
 800412e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004130:	e006      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004156:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	d055      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800416c:	d033      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800416e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004172:	d82c      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004178:	d02f      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417e:	d826      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004180:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004184:	d02b      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800418a:	d820      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004190:	d012      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004196:	d81a      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d022      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800419c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041a0:	d115      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	3308      	adds	r3, #8
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 f9a6 	bl	80054fc <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041b6:	e015      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	3328      	adds	r3, #40	@ 0x28
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 fa4d 	bl	8005660 <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041cc:	e00a      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041d4:	e006      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041ec:	4ba3      	ldr	r3, [pc, #652]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041fc:	4a9f      	ldr	r2, [pc, #636]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	6593      	str	r3, [r2, #88]	@ 0x58
 8004202:	e003      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800421c:	2300      	movs	r3, #0
 800421e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d037      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004236:	d00e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800423c:	d816      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004246:	d111      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004248:	4b8c      	ldr	r3, [pc, #560]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	4a8b      	ldr	r2, [pc, #556]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	3308      	adds	r3, #8
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f94c 	bl	80054fc <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800427e:	4b7f      	ldr	r3, [pc, #508]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004282:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428c:	4a7b      	ldr	r2, [pc, #492]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6513      	str	r3, [r2, #80]	@ 0x50
 8004292:	e003      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d039      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d81c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80042c6:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004309 	.word	0x08004309
 80042d0:	080042dd 	.word	0x080042dd
 80042d4:	080042eb 	.word	0x080042eb
 80042d8:	08004309 	.word	0x08004309
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042dc:	4b67      	ldr	r3, [pc, #412]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	4a66      	ldr	r2, [pc, #408]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042e8:	e00f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ee:	3308      	adds	r3, #8
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 f902 	bl	80054fc <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004312:	4b5a      	ldr	r3, [pc, #360]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004316:	f023 0103 	bic.w	r1, r3, #3
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	4a56      	ldr	r2, [pc, #344]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004322:	430b      	orrs	r3, r1
 8004324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004326:	e003      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800433c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004346:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800434a:	460b      	mov	r3, r1
 800434c:	4313      	orrs	r3, r2
 800434e:	f000 809f 	beq.w	8004490 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004352:	4b4b      	ldr	r3, [pc, #300]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a4a      	ldr	r2, [pc, #296]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435e:	f7fd fd79 	bl	8001e54 <HAL_GetTick>
 8004362:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004366:	e00b      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004368:	f7fd fd74 	bl	8001e54 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b64      	cmp	r3, #100	@ 0x64
 8004376:	d903      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437e:	e005      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004380:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ed      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800438c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004390:	2b00      	cmp	r3, #0
 8004392:	d179      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004394:	4b39      	ldr	r3, [pc, #228]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004396:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043a0:	4053      	eors	r3, r2
 80043a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d015      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043aa:	4b34      	ldr	r3, [pc, #208]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b6:	4b31      	ldr	r3, [pc, #196]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	4a30      	ldr	r2, [pc, #192]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043c2:	4b2e      	ldr	r3, [pc, #184]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	4a2d      	ldr	r2, [pc, #180]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043ce:	4a2b      	ldr	r2, [pc, #172]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	d118      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fd36 	bl	8001e54 <HAL_GetTick>
 80043e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ec:	e00d      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fd fd31 	bl	8001e54 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80043fe:	429a      	cmp	r2, r3
 8004400:	d903      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004408:	e005      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440a:	4b1c      	ldr	r3, [pc, #112]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0eb      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	2b00      	cmp	r3, #0
 800441c:	d129      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442e:	d10e      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004430:	4b12      	ldr	r3, [pc, #72]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004440:	091a      	lsrs	r2, r3, #4
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004444:	4013      	ands	r3, r2
 8004446:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6113      	str	r3, [r2, #16]
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800444e:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	4a0a      	ldr	r2, [pc, #40]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004454:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004458:	6113      	str	r3, [r2, #16]
 800445a:	4b08      	ldr	r3, [pc, #32]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	4a04      	ldr	r2, [pc, #16]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004470:	e00e      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800447a:	e009      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800447c:	58024400 	.word	0x58024400
 8004480:	58024800 	.word	0x58024800
 8004484:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800448c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f002 0301 	and.w	r3, r2, #1
 800449c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044a0:	2300      	movs	r3, #0
 80044a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f000 8089 	beq.w	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b8:	2b28      	cmp	r3, #40	@ 0x28
 80044ba:	d86b      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	0800459d 	.word	0x0800459d
 80044c8:	08004595 	.word	0x08004595
 80044cc:	08004595 	.word	0x08004595
 80044d0:	08004595 	.word	0x08004595
 80044d4:	08004595 	.word	0x08004595
 80044d8:	08004595 	.word	0x08004595
 80044dc:	08004595 	.word	0x08004595
 80044e0:	08004595 	.word	0x08004595
 80044e4:	08004569 	.word	0x08004569
 80044e8:	08004595 	.word	0x08004595
 80044ec:	08004595 	.word	0x08004595
 80044f0:	08004595 	.word	0x08004595
 80044f4:	08004595 	.word	0x08004595
 80044f8:	08004595 	.word	0x08004595
 80044fc:	08004595 	.word	0x08004595
 8004500:	08004595 	.word	0x08004595
 8004504:	0800457f 	.word	0x0800457f
 8004508:	08004595 	.word	0x08004595
 800450c:	08004595 	.word	0x08004595
 8004510:	08004595 	.word	0x08004595
 8004514:	08004595 	.word	0x08004595
 8004518:	08004595 	.word	0x08004595
 800451c:	08004595 	.word	0x08004595
 8004520:	08004595 	.word	0x08004595
 8004524:	0800459d 	.word	0x0800459d
 8004528:	08004595 	.word	0x08004595
 800452c:	08004595 	.word	0x08004595
 8004530:	08004595 	.word	0x08004595
 8004534:	08004595 	.word	0x08004595
 8004538:	08004595 	.word	0x08004595
 800453c:	08004595 	.word	0x08004595
 8004540:	08004595 	.word	0x08004595
 8004544:	0800459d 	.word	0x0800459d
 8004548:	08004595 	.word	0x08004595
 800454c:	08004595 	.word	0x08004595
 8004550:	08004595 	.word	0x08004595
 8004554:	08004595 	.word	0x08004595
 8004558:	08004595 	.word	0x08004595
 800455c:	08004595 	.word	0x08004595
 8004560:	08004595 	.word	0x08004595
 8004564:	0800459d 	.word	0x0800459d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	3308      	adds	r3, #8
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 ffc3 	bl	80054fc <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800457c:	e00f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	3328      	adds	r3, #40	@ 0x28
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f86a 	bl	8005660 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004592:	e004      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800459c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045a6:	4bbf      	ldr	r3, [pc, #764]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045b4:	4abb      	ldr	r2, [pc, #748]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b6:	430b      	orrs	r3, r1
 80045b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f002 0302 	and.w	r3, r2, #2
 80045d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d041      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d824      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80045ee:	a201      	add	r2, pc, #4	@ (adr r2, 80045f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004641 	.word	0x08004641
 80045f8:	0800460d 	.word	0x0800460d
 80045fc:	08004623 	.word	0x08004623
 8004600:	08004641 	.word	0x08004641
 8004604:	08004641 	.word	0x08004641
 8004608:	08004641 	.word	0x08004641
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004610:	3308      	adds	r3, #8
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 ff71 	bl	80054fc <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004620:	e00f      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	3328      	adds	r3, #40	@ 0x28
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f818 	bl	8005660 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800464a:	4b96      	ldr	r3, [pc, #600]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	f023 0107 	bic.w	r1, r3, #7
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004658:	4a92      	ldr	r2, [pc, #584]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800465a:	430b      	orrs	r3, r1
 800465c:	6553      	str	r3, [r2, #84]	@ 0x54
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f002 0304 	and.w	r3, r2, #4
 8004674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800467e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	d044      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004690:	2b05      	cmp	r3, #5
 8004692:	d825      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046e9 	.word	0x080046e9
 80046a0:	080046b5 	.word	0x080046b5
 80046a4:	080046cb 	.word	0x080046cb
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	080046e9 	.word	0x080046e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b8:	3308      	adds	r3, #8
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 ff1d 	bl	80054fc <RCCEx_PLL2_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046c8:	e00f      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	3328      	adds	r3, #40	@ 0x28
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ffc4 	bl	8005660 <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046de:	e004      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046f2:	4b6c      	ldr	r3, [pc, #432]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	f023 0107 	bic.w	r1, r3, #7
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004702:	4a68      	ldr	r2, [pc, #416]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6593      	str	r3, [r2, #88]	@ 0x58
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f002 0320 	and.w	r3, r2, #32
 800471e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004722:	2300      	movs	r3, #0
 8004724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800472c:	460b      	mov	r3, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	d055      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800473e:	d033      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004744:	d82c      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d02f      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004750:	d826      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004752:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004756:	d02b      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004758:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800475c:	d820      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800475e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004762:	d012      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004768:	d81a      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d022      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004772:	d115      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	3308      	adds	r3, #8
 800477a:	2100      	movs	r1, #0
 800477c:	4618      	mov	r0, r3
 800477e:	f000 febd 	bl	80054fc <RCCEx_PLL2_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004788:	e015      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	3328      	adds	r3, #40	@ 0x28
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff64 	bl	8005660 <RCCEx_PLL3_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800479e:	e00a      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047a6:	e006      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047a8:	bf00      	nop
 80047aa:	e004      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047be:	4b39      	ldr	r3, [pc, #228]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ce:	4a35      	ldr	r2, [pc, #212]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80047d4:	e003      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80047ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80047f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	d058      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004806:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800480a:	d033      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800480c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004810:	d82c      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004816:	d02f      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800481c:	d826      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800481e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004822:	d02b      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004824:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004828:	d820      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800482e:	d012      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004834:	d81a      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d022      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d115      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	3308      	adds	r3, #8
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fe57 	bl	80054fc <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004854:	e015      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	3328      	adds	r3, #40	@ 0x28
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fefe 	bl	8005660 <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800486a:	e00a      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004872:	e006      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004874:	bf00      	nop
 8004876:	e004      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004878:	bf00      	nop
 800487a:	e002      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800487c:	bf00      	nop
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10e      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800488a:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800489a:	4a02      	ldr	r2, [pc, #8]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a0:	e006      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048a2:	bf00      	nop
 80048a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d055      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048dc:	d033      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80048de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048e2:	d82c      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e8:	d02f      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80048ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ee:	d826      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80048f4:	d02b      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80048f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80048fa:	d820      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004900:	d012      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004906:	d81a      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004910:	d115      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	3308      	adds	r3, #8
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fdee 	bl	80054fc <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004926:	e015      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	3328      	adds	r3, #40	@ 0x28
 800492e:	2102      	movs	r1, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fe95 	bl	8005660 <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800493c:	e00a      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800495c:	4ba1      	ldr	r3, [pc, #644]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004960:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800496c:	4a9d      	ldr	r2, [pc, #628]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496e:	430b      	orrs	r3, r1
 8004970:	6593      	str	r3, [r2, #88]	@ 0x58
 8004972:	e003      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f002 0308 	and.w	r3, r2, #8
 8004988:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004992:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004996:	460b      	mov	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	d01e      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ae:	3328      	adds	r3, #40	@ 0x28
 80049b0:	2102      	movs	r1, #2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fe54 	bl	8005660 <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049c4:	4b87      	ldr	r3, [pc, #540]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d4:	4a83      	ldr	r2, [pc, #524]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f002 0310 	and.w	r3, r2, #16
 80049e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d01e      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0c:	3328      	adds	r3, #40	@ 0x28
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fe25 	bl	8005660 <RCCEx_PLL3_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a22:	4b70      	ldr	r3, [pc, #448]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a32:	4a6c      	ldr	r2, [pc, #432]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a52:	460b      	mov	r3, r1
 8004a54:	4313      	orrs	r3, r2
 8004a56:	d03e      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a64:	d022      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a6a:	d81b      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a74:	d00b      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004a76:	e015      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fd3b 	bl	80054fc <RCCEx_PLL2_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a8c:	e00f      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	3328      	adds	r3, #40	@ 0x28
 8004a94:	2102      	movs	r1, #2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fde2 	bl	8005660 <RCCEx_PLL3_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aa2:	e004      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ac6:	4a47      	ldr	r2, [pc, #284]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ae8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d03b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004afe:	d01f      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b04:	d818      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0a:	d003      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b10:	d007      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b12:	e011      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b14:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	4a32      	ldr	r2, [pc, #200]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b20:	e00f      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b26:	3328      	adds	r3, #40	@ 0x28
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fd98 	bl	8005660 <RCCEx_PLL3_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b36:	e004      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b4a:	4b26      	ldr	r3, [pc, #152]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5a:	4a22      	ldr	r2, [pc, #136]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b76:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b78:	2300      	movs	r3, #0
 8004b7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b80:	460b      	mov	r3, r1
 8004b82:	4313      	orrs	r3, r2
 8004b84:	d034      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b94:	d007      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004b96:	e011      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ba4:	e00e      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004baa:	3308      	adds	r3, #8
 8004bac:	2102      	movs	r1, #2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fca4 	bl	80054fc <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bba:	e003      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10d      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bda:	4a02      	ldr	r2, [pc, #8]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfe:	2300      	movs	r3, #0
 8004c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d00c      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c10:	3328      	adds	r3, #40	@ 0x28
 8004c12:	2102      	movs	r1, #2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd23 	bl	8005660 <RCCEx_PLL3_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c34:	2300      	movs	r3, #0
 8004c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d038      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4e:	d018      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c54:	d811      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5a:	d014      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d80b      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d011      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6c:	4bc3      	ldr	r3, [pc, #780]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	4ac2      	ldr	r2, [pc, #776]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c78:	e008      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c94:	4bb9      	ldr	r3, [pc, #740]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca4:	4ab5      	ldr	r2, [pc, #724]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd0:	4baa      	ldr	r3, [pc, #680]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cde:	4aa7      	ldr	r2, [pc, #668]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004cf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d00:	4b9e      	ldr	r3, [pc, #632]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d10:	4a9a      	ldr	r2, [pc, #616]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d12:	430b      	orrs	r3, r1
 8004d14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d24:	2300      	movs	r3, #0
 8004d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d32:	4b92      	ldr	r3, [pc, #584]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d40:	4a8e      	ldr	r2, [pc, #568]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d52:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d54:	2300      	movs	r3, #0
 8004d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d62:	4b86      	ldr	r3, [pc, #536]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	4a85      	ldr	r2, [pc, #532]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d6c:	6113      	str	r3, [r2, #16]
 8004d6e:	4b83      	ldr	r3, [pc, #524]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d7a:	4a80      	ldr	r2, [pc, #512]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d8e:	2300      	movs	r3, #0
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d9c:	4b77      	ldr	r3, [pc, #476]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004daa:	4a74      	ldr	r2, [pc, #464]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dac:	430b      	orrs	r3, r1
 8004dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d00a      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ddc:	4a67      	ldr	r2, [pc, #412]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dde:	430b      	orrs	r3, r1
 8004de0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	2100      	movs	r1, #0
 8004dec:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d011      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	3308      	adds	r3, #8
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fb78 	bl	80054fc <RCCEx_PLL2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	6239      	str	r1, [r7, #32]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d011      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	3308      	adds	r3, #8
 8004e44:	2101      	movs	r1, #1
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fb58 	bl	80054fc <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	61b9      	str	r1, [r7, #24]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	d011      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	3308      	adds	r3, #8
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fb38 	bl	80054fc <RCCEx_PLL2_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6139      	str	r1, [r7, #16]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	d011      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	3328      	adds	r3, #40	@ 0x28
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fbca 	bl	8005660 <RCCEx_PLL3_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	2100      	movs	r1, #0
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4313      	orrs	r3, r2
 8004efc:	d011      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f02:	3328      	adds	r3, #40	@ 0x28
 8004f04:	2101      	movs	r1, #1
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fbaa 	bl	8005660 <RCCEx_PLL3_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d011      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	3328      	adds	r3, #40	@ 0x28
 8004f44:	2102      	movs	r1, #2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fb8a 	bl	8005660 <RCCEx_PLL3_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004f62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004f76:	46bd      	mov	sp, r7
 8004f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7c:	58024400 	.word	0x58024400

08004f80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f84:	f7fe fd96 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b06      	ldr	r3, [pc, #24]	@ (8004fa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4904      	ldr	r1, [pc, #16]	@ (8004fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	0800a388 	.word	0x0800a388

08004fac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	@ 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fbe:	4b9f      	ldr	r3, [pc, #636]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	0b1b      	lsrs	r3, r3, #12
 8004fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fca:	4b9c      	ldr	r3, [pc, #624]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fd6:	4b99      	ldr	r3, [pc, #612]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8111 	beq.w	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f000 8083 	beq.w	8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b02      	cmp	r3, #2
 8005006:	f200 80a1 	bhi.w	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d056      	beq.n	80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005016:	e099      	b.n	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005018:	4b88      	ldr	r3, [pc, #544]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02d      	beq.n	8005080 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005024:	4b85      	ldr	r3, [pc, #532]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	4a84      	ldr	r2, [pc, #528]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
 8005034:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b7b      	ldr	r3, [pc, #492]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005062:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800507e:	e087      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b6a      	ldr	r3, [pc, #424]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050c2:	e065      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b59      	ldr	r3, [pc, #356]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005106:	e043      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b48      	ldr	r3, [pc, #288]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514a:	e021      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b37      	ldr	r3, [pc, #220]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005190:	4b2a      	ldr	r3, [pc, #168]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	0a5b      	lsrs	r3, r3, #9
 8005196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b6:	ee17 2a90 	vmov	r2, s15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051be:	4b1f      	ldr	r3, [pc, #124]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e4:	ee17 2a90 	vmov	r2, s15
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051ec:	4b13      	ldr	r3, [pc, #76]	@ (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005206:	edd7 6a07 	vldr	s13, [r7, #28]
 800520a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005212:	ee17 2a90 	vmov	r2, s15
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800521a:	e008      	b.n	800522e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
}
 800522e:	bf00      	nop
 8005230:	3724      	adds	r7, #36	@ 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
 8005240:	03d09000 	.word	0x03d09000
 8005244:	46000000 	.word	0x46000000
 8005248:	4c742400 	.word	0x4c742400
 800524c:	4a742400 	.word	0x4a742400
 8005250:	4bbebc20 	.word	0x4bbebc20

08005254 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	@ 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800525c:	4ba1      	ldr	r3, [pc, #644]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005266:	4b9f      	ldr	r3, [pc, #636]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	0d1b      	lsrs	r3, r3, #20
 800526c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005270:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005272:	4b9c      	ldr	r3, [pc, #624]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800527e:	4b99      	ldr	r3, [pc, #612]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8111 	beq.w	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	f000 8083 	beq.w	80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f200 80a1 	bhi.w	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d056      	beq.n	800536c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052be:	e099      	b.n	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c0:	4b88      	ldr	r3, [pc, #544]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02d      	beq.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052cc:	4b85      	ldr	r3, [pc, #532]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	4a84      	ldr	r2, [pc, #528]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f6:	4b7b      	ldr	r3, [pc, #492]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005306:	ed97 6a03 	vldr	s12, [r7, #12]
 800530a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800530e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005322:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005326:	e087      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	4b6a      	ldr	r3, [pc, #424]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534a:	ed97 6a03 	vldr	s12, [r7, #12]
 800534e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800536a:	e065      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005392:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ae:	e043      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b48      	ldr	r3, [pc, #288]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f2:	e021      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b37      	ldr	r3, [pc, #220]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a03 	vldr	s12, [r7, #12]
 800541a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005436:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005438:	4b2a      	ldr	r3, [pc, #168]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	0a5b      	lsrs	r3, r3, #9
 800543e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800544e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005452:	edd7 6a07 	vldr	s13, [r7, #28]
 8005456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800545a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545e:	ee17 2a90 	vmov	r2, s15
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005466:	4b1f      	ldr	r3, [pc, #124]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800547c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005480:	edd7 6a07 	vldr	s13, [r7, #28]
 8005484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548c:	ee17 2a90 	vmov	r2, s15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005494:	4b13      	ldr	r3, [pc, #76]	@ (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	0e1b      	lsrs	r3, r3, #24
 800549a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ba:	ee17 2a90 	vmov	r2, s15
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054c2:	e008      	b.n	80054d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
}
 80054d6:	bf00      	nop
 80054d8:	3724      	adds	r7, #36	@ 0x24
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
 80054e8:	03d09000 	.word	0x03d09000
 80054ec:	46000000 	.word	0x46000000
 80054f0:	4c742400 	.word	0x4c742400
 80054f4:	4a742400 	.word	0x4a742400
 80054f8:	4bbebc20 	.word	0x4bbebc20

080054fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800550a:	4b53      	ldr	r3, [pc, #332]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 800550c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b03      	cmp	r3, #3
 8005514:	d101      	bne.n	800551a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e099      	b.n	800564e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800551a:	4b4f      	ldr	r3, [pc, #316]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a4e      	ldr	r2, [pc, #312]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fc fc95 	bl	8001e54 <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800552c:	e008      	b.n	8005540 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800552e:	f7fc fc91 	bl	8001e54 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e086      	b.n	800564e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005540:	4b45      	ldr	r3, [pc, #276]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800554c:	4b42      	ldr	r3, [pc, #264]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 800554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005550:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	031b      	lsls	r3, r3, #12
 800555a:	493f      	ldr	r1, [pc, #252]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 800555c:	4313      	orrs	r3, r2
 800555e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	3b01      	subs	r3, #1
 8005566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	025b      	lsls	r3, r3, #9
 8005572:	b29b      	uxth	r3, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	3b01      	subs	r3, #1
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	3b01      	subs	r3, #1
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005590:	4931      	ldr	r1, [pc, #196]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005596:	4b30      	ldr	r3, [pc, #192]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	492d      	ldr	r1, [pc, #180]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	f023 0220 	bic.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4928      	ldr	r1, [pc, #160]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ba:	4b27      	ldr	r3, [pc, #156]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055be:	4a26      	ldr	r2, [pc, #152]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055c6:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <RCCEx_PLL2_Config+0x160>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	69d2      	ldr	r2, [r2, #28]
 80055d2:	00d2      	lsls	r2, r2, #3
 80055d4:	4920      	ldr	r1, [pc, #128]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055da:	4b1f      	ldr	r3, [pc, #124]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	4a1e      	ldr	r2, [pc, #120]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	f043 0310 	orr.w	r3, r3, #16
 80055e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	4a19      	ldr	r2, [pc, #100]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055f8:	e00f      	b.n	800561a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d106      	bne.n	800560e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005600:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	4a14      	ldr	r2, [pc, #80]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800560a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800560c:	e005      	b.n	800561a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800560e:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	4a11      	ldr	r2, [pc, #68]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800561a:	4b0f      	ldr	r3, [pc, #60]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a0e      	ldr	r2, [pc, #56]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005620:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005626:	f7fc fc15 	bl	8001e54 <HAL_GetTick>
 800562a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800562c:	e008      	b.n	8005640 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800562e:	f7fc fc11 	bl	8001e54 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e006      	b.n	800564e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005640:	4b05      	ldr	r3, [pc, #20]	@ (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400
 800565c:	ffff0007 	.word	0xffff0007

08005660 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800566e:	4b53      	ldr	r3, [pc, #332]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d101      	bne.n	800567e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e099      	b.n	80057b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800567e:	4b4f      	ldr	r3, [pc, #316]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4e      	ldr	r2, [pc, #312]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fc fbe3 	bl	8001e54 <HAL_GetTick>
 800568e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005690:	e008      	b.n	80056a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005692:	f7fc fbdf 	bl	8001e54 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e086      	b.n	80057b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056a4:	4b45      	ldr	r3, [pc, #276]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056b0:	4b42      	ldr	r3, [pc, #264]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	051b      	lsls	r3, r3, #20
 80056be:	493f      	ldr	r1, [pc, #252]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	025b      	lsls	r3, r3, #9
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	3b01      	subs	r3, #1
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	061b      	lsls	r3, r3, #24
 80056f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056f4:	4931      	ldr	r1, [pc, #196]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056fa:	4b30      	ldr	r3, [pc, #192]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	492d      	ldr	r1, [pc, #180]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800570c:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 800570e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005710:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	4928      	ldr	r1, [pc, #160]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 800571a:	4313      	orrs	r3, r2
 800571c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800571e:	4b27      	ldr	r3, [pc, #156]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005722:	4a26      	ldr	r2, [pc, #152]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800572a:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 800572c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <RCCEx_PLL3_Config+0x160>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	69d2      	ldr	r2, [r2, #28]
 8005736:	00d2      	lsls	r2, r2, #3
 8005738:	4920      	ldr	r1, [pc, #128]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800573e:	4b1f      	ldr	r3, [pc, #124]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	4a1e      	ldr	r2, [pc, #120]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005750:	4b1a      	ldr	r3, [pc, #104]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	4a19      	ldr	r2, [pc, #100]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005756:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800575a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800575c:	e00f      	b.n	800577e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d106      	bne.n	8005772 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005764:	4b15      	ldr	r3, [pc, #84]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	4a14      	ldr	r2, [pc, #80]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 800576a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800576e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005770:	e005      	b.n	800577e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005772:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	4a11      	ldr	r2, [pc, #68]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800577c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800577e:	4b0f      	ldr	r3, [pc, #60]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a0e      	ldr	r2, [pc, #56]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578a:	f7fc fb63 	bl	8001e54 <HAL_GetTick>
 800578e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005790:	e008      	b.n	80057a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005792:	f7fc fb5f 	bl	8001e54 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e006      	b.n	80057b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057a4:	4b05      	ldr	r3, [pc, #20]	@ (80057bc <RCCEx_PLL3_Config+0x15c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	ffff0007 	.word	0xffff0007

080057c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e10f      	b.n	80059f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a87      	ldr	r2, [pc, #540]	@ (8005a00 <HAL_SPI_Init+0x23c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <HAL_SPI_Init+0x42>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a86      	ldr	r2, [pc, #536]	@ (8005a04 <HAL_SPI_Init+0x240>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00a      	beq.n	8005806 <HAL_SPI_Init+0x42>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a84      	ldr	r2, [pc, #528]	@ (8005a08 <HAL_SPI_Init+0x244>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d005      	beq.n	8005806 <HAL_SPI_Init+0x42>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d901      	bls.n	8005806 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e0f7      	b.n	80059f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 f91e 	bl	8006a48 <SPI_GetPacketSize>
 800580c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a7b      	ldr	r2, [pc, #492]	@ (8005a00 <HAL_SPI_Init+0x23c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00c      	beq.n	8005832 <HAL_SPI_Init+0x6e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a79      	ldr	r2, [pc, #484]	@ (8005a04 <HAL_SPI_Init+0x240>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <HAL_SPI_Init+0x6e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a78      	ldr	r2, [pc, #480]	@ (8005a08 <HAL_SPI_Init+0x244>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Init+0x6e>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b08      	cmp	r3, #8
 8005830:	d811      	bhi.n	8005856 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005836:	4a72      	ldr	r2, [pc, #456]	@ (8005a00 <HAL_SPI_Init+0x23c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a70      	ldr	r2, [pc, #448]	@ (8005a04 <HAL_SPI_Init+0x240>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_SPI_Init+0x8c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6f      	ldr	r2, [pc, #444]	@ (8005a08 <HAL_SPI_Init+0x244>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d104      	bne.n	800585a <HAL_SPI_Init+0x96>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b10      	cmp	r3, #16
 8005854:	d901      	bls.n	800585a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e0cd      	b.n	80059f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fb fdba 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005896:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a0:	d119      	bne.n	80058d6 <HAL_SPI_Init+0x112>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058aa:	d103      	bne.n	80058b4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10c      	bne.n	80058d6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058c4:	d107      	bne.n	80058d6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00f      	beq.n	8005902 <HAL_SPI_Init+0x13e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d90b      	bls.n	8005902 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e007      	b.n	8005912 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005910:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	431a      	orrs	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	ea42 0103 	orr.w	r1, r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005972:	ea42 0103 	orr.w	r1, r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800599c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40013000 	.word	0x40013000
 8005a04:	40003800 	.word	0x40003800
 8005a08:	40003c00 	.word	0x40003c00

08005a0c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3320      	adds	r3, #32
 8005a22:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a24:	f7fc fa16 	bl	8001e54 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d001      	beq.n	8005a3a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005a36:	2302      	movs	r3, #2
 8005a38:	e1d1      	b.n	8005dde <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_SPI_Transmit+0x3a>
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e1c9      	b.n	8005dde <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_SPI_Transmit+0x4c>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e1c2      	b.n	8005dde <HAL_SPI_Transmit+0x3d2>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2203      	movs	r2, #3
 8005a64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005ab0:	d108      	bne.n	8005ac4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e009      	b.n	8005ad8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ad6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	4b96      	ldr	r3, [pc, #600]	@ (8005d38 <HAL_SPI_Transmit+0x32c>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	88f9      	ldrh	r1, [r7, #6]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b04:	d107      	bne.n	8005b16 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	d947      	bls.n	8005bae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005b1e:	e03f      	b.n	8005ba0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d114      	bne.n	8005b58 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3e:	1d1a      	adds	r2, r3, #4
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b56:	e023      	b.n	8005ba0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b58:	f7fc f97c 	bl	8001e54 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d803      	bhi.n	8005b70 <HAL_SPI_Transmit+0x164>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d102      	bne.n	8005b76 <HAL_SPI_Transmit+0x16a>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d114      	bne.n	8005ba0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fe98 	bl	80068ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e11e      	b.n	8005dde <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1b9      	bne.n	8005b20 <HAL_SPI_Transmit+0x114>
 8005bac:	e0f1      	b.n	8005d92 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b07      	cmp	r3, #7
 8005bb4:	f240 80e6 	bls.w	8005d84 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005bb8:	e05d      	b.n	8005c76 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d132      	bne.n	8005c2e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d918      	bls.n	8005c06 <HAL_SPI_Transmit+0x1fa>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d014      	beq.n	8005c06 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bec:	1d1a      	adds	r2, r3, #4
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b02      	subs	r3, #2
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c04:	e037      	b.n	8005c76 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0a:	881a      	ldrh	r2, [r3, #0]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c14:	1c9a      	adds	r2, r3, #2
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c2c:	e023      	b.n	8005c76 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2e:	f7fc f911 	bl	8001e54 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d803      	bhi.n	8005c46 <HAL_SPI_Transmit+0x23a>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d102      	bne.n	8005c4c <HAL_SPI_Transmit+0x240>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d114      	bne.n	8005c76 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fe2d 	bl	80068ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e0b3      	b.n	8005dde <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d19b      	bne.n	8005bba <HAL_SPI_Transmit+0x1ae>
 8005c82:	e086      	b.n	8005d92 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d154      	bne.n	8005d3c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d918      	bls.n	8005cd0 <HAL_SPI_Transmit+0x2c4>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca2:	2b40      	cmp	r3, #64	@ 0x40
 8005ca4:	d914      	bls.n	8005cd0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb6:	1d1a      	adds	r2, r3, #4
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005cce:	e059      	b.n	8005d84 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d917      	bls.n	8005d0c <HAL_SPI_Transmit+0x300>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d013      	beq.n	8005d0c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	881a      	ldrh	r2, [r3, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf2:	1c9a      	adds	r2, r3, #2
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b02      	subs	r3, #2
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d0a:	e03b      	b.n	8005d84 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3320      	adds	r3, #32
 8005d16:	7812      	ldrb	r2, [r2, #0]
 8005d18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d36:	e025      	b.n	8005d84 <HAL_SPI_Transmit+0x378>
 8005d38:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d3c:	f7fc f88a 	bl	8001e54 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d803      	bhi.n	8005d54 <HAL_SPI_Transmit+0x348>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d102      	bne.n	8005d5a <HAL_SPI_Transmit+0x34e>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d114      	bne.n	8005d84 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fda6 	bl	80068ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e02c      	b.n	8005dde <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f47f af79 	bne.w	8005c84 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2108      	movs	r1, #8
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fe25 	bl	80069ec <SPI_WaitOnFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fd77 	bl	80068ac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
  }
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	@ 0x38
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3320      	adds	r3, #32
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3330      	adds	r3, #48	@ 0x30
 8005e04:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e12:	f7fc f81f 	bl	8001e54 <HAL_GetTick>
 8005e16:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005e1c:	887b      	ldrh	r3, [r7, #2]
 8005e1e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d001      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e310      	b.n	8006452 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x5a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x5a>
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e305      	b.n	8006452 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_SPI_TransmitReceive+0x6c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e2fe      	b.n	8006452 <HAL_SPI_TransmitReceive+0x66a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2205      	movs	r2, #5
 8005e60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	887a      	ldrh	r2, [r7, #2]
 8005e76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	887a      	ldrh	r2, [r7, #2]
 8005e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	887a      	ldrh	r2, [r7, #2]
 8005e8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a70      	ldr	r2, [pc, #448]	@ (800607c <HAL_SPI_TransmitReceive+0x294>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0xea>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6f      	ldr	r2, [pc, #444]	@ (8006080 <HAL_SPI_TransmitReceive+0x298>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0xea>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8006084 <HAL_SPI_TransmitReceive+0x29c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d102      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005ed2:	2310      	movs	r3, #16
 8005ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed6:	e001      	b.n	8005edc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005ed8:	2308      	movs	r3, #8
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	4b69      	ldr	r3, [pc, #420]	@ (8006088 <HAL_SPI_TransmitReceive+0x2a0>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	8879      	ldrh	r1, [r7, #2]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f08:	d107      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b0f      	cmp	r3, #15
 8005f20:	f240 80a2 	bls.w	8006068 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f2a:	e094      	b.n	8006056 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d120      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x194>
 8005f3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01d      	beq.n	8005f7c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005f40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005f42:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d217      	bcs.n	8005f7c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5c:	1d1a      	adds	r2, r3, #4
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f7a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005f84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d065      	beq.n	8006056 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d118      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fa2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa8:	1d1a      	adds	r2, r3, #4
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fc8:	e045      	b.n	8006056 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005fca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005fcc:	8bfb      	ldrh	r3, [r7, #30]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d21d      	bcs.n	800600e <HAL_SPI_TransmitReceive+0x226>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d018      	beq.n	800600e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fe6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fec:	1d1a      	adds	r2, r3, #4
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800600a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800600c:	e023      	b.n	8006056 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600e:	f7fb ff21 	bl	8001e54 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800601a:	429a      	cmp	r2, r3
 800601c:	d803      	bhi.n	8006026 <HAL_SPI_TransmitReceive+0x23e>
 800601e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d102      	bne.n	800602c <HAL_SPI_TransmitReceive+0x244>
 8006026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006028:	2b00      	cmp	r3, #0
 800602a:	d114      	bne.n	8006056 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fc3d 	bl	80068ac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006038:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1fd      	b.n	8006452 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006056:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006058:	2b00      	cmp	r3, #0
 800605a:	f47f af67 	bne.w	8005f2c <HAL_SPI_TransmitReceive+0x144>
 800605e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f af63 	bne.w	8005f2c <HAL_SPI_TransmitReceive+0x144>
 8006066:	e1ce      	b.n	8006406 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b07      	cmp	r3, #7
 800606e:	f240 81c2 	bls.w	80063f6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	085b      	lsrs	r3, r3, #1
 8006076:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006078:	e0c9      	b.n	800620e <HAL_SPI_TransmitReceive+0x426>
 800607a:	bf00      	nop
 800607c:	40013000 	.word	0x40013000
 8006080:	40003800 	.word	0x40003800
 8006084:	40003c00 	.word	0x40003c00
 8006088:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d11f      	bne.n	80060da <HAL_SPI_TransmitReceive+0x2f2>
 800609a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01c      	beq.n	80060da <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80060a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80060a2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80060a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d216      	bcs.n	80060da <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80060e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8092 	beq.w	800620e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d118      	bne.n	800612a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	8812      	ldrh	r2, [r2, #0]
 8006100:	b292      	uxth	r2, r2
 8006102:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006126:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006128:	e071      	b.n	800620e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800612a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800612c:	8bfb      	ldrh	r3, [r7, #30]
 800612e:	429a      	cmp	r2, r3
 8006130:	d228      	bcs.n	8006184 <HAL_SPI_TransmitReceive+0x39c>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d023      	beq.n	8006184 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	8812      	ldrh	r2, [r2, #0]
 8006144:	b292      	uxth	r2, r2
 8006146:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	b292      	uxth	r2, r2
 800615c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006162:	1c9a      	adds	r2, r3, #2
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b02      	subs	r3, #2
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006180:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006182:	e044      	b.n	800620e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006184:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006186:	2b01      	cmp	r3, #1
 8006188:	d11d      	bne.n	80061c6 <HAL_SPI_TransmitReceive+0x3de>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d018      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	8812      	ldrh	r2, [r2, #0]
 800619c:	b292      	uxth	r2, r2
 800619e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061a4:	1c9a      	adds	r2, r3, #2
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061c4:	e023      	b.n	800620e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c6:	f7fb fe45 	bl	8001e54 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d803      	bhi.n	80061de <HAL_SPI_TransmitReceive+0x3f6>
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d102      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x3fc>
 80061de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d114      	bne.n	800620e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fb61 	bl	80068ac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e121      	b.n	8006452 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800620e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006210:	2b00      	cmp	r3, #0
 8006212:	f47f af3b 	bne.w	800608c <HAL_SPI_TransmitReceive+0x2a4>
 8006216:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	f47f af37 	bne.w	800608c <HAL_SPI_TransmitReceive+0x2a4>
 800621e:	e0f2      	b.n	8006406 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d121      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x48a>
 800622e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01e      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006234:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006236:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800623c:	429a      	cmp	r2, r3
 800623e:	d218      	bcs.n	8006272 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3320      	adds	r3, #32
 800624a:	7812      	ldrb	r2, [r2, #0]
 800624c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006270:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800627a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80ba 	beq.w	80063f6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d11b      	bne.n	80062c8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062c4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062c6:	e096      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80062c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80062ca:	8bfb      	ldrh	r3, [r7, #30]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d24a      	bcs.n	8006366 <HAL_SPI_TransmitReceive+0x57e>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d045      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006302:	7812      	ldrb	r2, [r2, #0]
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b04      	subs	r3, #4
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006362:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006364:	e047      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006366:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006368:	2b03      	cmp	r3, #3
 800636a:	d820      	bhi.n	80063ae <HAL_SPI_TransmitReceive+0x5c6>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01b      	beq.n	80063ae <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80063ac:	e023      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ae:	f7fb fd51 	bl	8001e54 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d803      	bhi.n	80063c6 <HAL_SPI_TransmitReceive+0x5de>
 80063be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d102      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x5e4>
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d114      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 fa6d 	bl	80068ac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e02d      	b.n	8006452 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80063f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f47f af11 	bne.w	8006220 <HAL_SPI_TransmitReceive+0x438>
 80063fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006400:	2b00      	cmp	r3, #0
 8006402:	f47f af0d 	bne.w	8006220 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640c:	2200      	movs	r2, #0
 800640e:	2108      	movs	r1, #8
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 faeb 	bl	80069ec <SPI_WaitOnFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fa3d 	bl	80068ac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006450:	2300      	movs	r3, #0
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3730      	adds	r7, #48	@ 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop

0800645c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	@ 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006474:	6a3a      	ldr	r2, [r7, #32]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4013      	ands	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800648e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3330      	adds	r3, #48	@ 0x30
 8006496:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d010      	beq.n	80064c4 <HAL_SPI_IRQHandler+0x68>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ba:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f9c3 	bl	8006848 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80064c2:	e192      	b.n	80067ea <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d113      	bne.n	80064f6 <HAL_SPI_IRQHandler+0x9a>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10e      	bne.n	80064f6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
    handled = 1UL;
 80064f2:	2301      	movs	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10f      	bne.n	8006520 <HAL_SPI_IRQHandler+0xc4>
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    handled = 1UL;
 800651c:	2301      	movs	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10f      	bne.n	800654a <HAL_SPI_IRQHandler+0xee>
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	4798      	blx	r3
    handled = 1UL;
 8006546:	2301      	movs	r3, #1
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 8147 	bne.w	80067e0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 808b 	beq.w	8006674 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	699a      	ldr	r2, [r3, #24]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0208 	orr.w	r2, r2, #8
 800656c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699a      	ldr	r2, [r3, #24]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0210 	orr.w	r2, r2, #16
 800657c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699a      	ldr	r2, [r3, #24]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800658c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0208 	bic.w	r2, r2, #8
 800659c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d13d      	bne.n	8006628 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80065ac:	e036      	b.n	800661c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b0f      	cmp	r3, #15
 80065b4:	d90b      	bls.n	80065ce <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065c0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	665a      	str	r2, [r3, #100]	@ 0x64
 80065cc:	e01d      	b.n	800660a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b07      	cmp	r3, #7
 80065d4:	d90b      	bls.n	80065ee <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	8812      	ldrh	r2, [r2, #0]
 80065de:	b292      	uxth	r2, r2
 80065e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e6:	1c9a      	adds	r2, r3, #2
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	665a      	str	r2, [r3, #100]	@ 0x64
 80065ec:	e00d      	b.n	800660a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1c2      	bne.n	80065ae <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f93f 	bl	80068ac <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f8f7 	bl	8006834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006646:	e0d0      	b.n	80067ea <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	2b05      	cmp	r3, #5
 800664c:	d103      	bne.n	8006656 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8e6 	bl	8006820 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006654:	e0c6      	b.n	80067e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006656:	7cfb      	ldrb	r3, [r7, #19]
 8006658:	2b04      	cmp	r3, #4
 800665a:	d103      	bne.n	8006664 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f8d5 	bl	800680c <HAL_SPI_RxCpltCallback>
    return;
 8006662:	e0bf      	b.n	80067e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	2b03      	cmp	r3, #3
 8006668:	f040 80bc 	bne.w	80067e4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8c3 	bl	80067f8 <HAL_SPI_TxCpltCallback>
    return;
 8006672:	e0b7      	b.n	80067e4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80b5 	beq.w	80067ea <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00f      	beq.n	80066aa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006690:	f043 0204 	orr.w	r2, r3, #4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00f      	beq.n	80066d4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00f      	beq.n	80066fe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e4:	f043 0208 	orr.w	r2, r3, #8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00f      	beq.n	8006728 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800670e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0220 	orr.w	r2, r2, #32
 8006726:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800672e:	2b00      	cmp	r3, #0
 8006730:	d05a      	beq.n	80067e8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0201 	bic.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6919      	ldr	r1, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b28      	ldr	r3, [pc, #160]	@ (80067f0 <HAL_SPI_IRQHandler+0x394>)
 800674e:	400b      	ands	r3, r1
 8006750:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006758:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800675c:	d138      	bne.n	80067d0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800676c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d013      	beq.n	800679e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <HAL_SPI_IRQHandler+0x398>)
 800677c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006782:	4618      	mov	r0, r3
 8006784:	f7fb fd2a 	bl	80021dc <HAL_DMA_Abort_IT>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006794:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d020      	beq.n	80067e8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067aa:	4a12      	ldr	r2, [pc, #72]	@ (80067f4 <HAL_SPI_IRQHandler+0x398>)
 80067ac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fb fd12 	bl	80021dc <HAL_DMA_Abort_IT>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d014      	beq.n	80067e8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067ce:	e00b      	b.n	80067e8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f82b 	bl	8006834 <HAL_SPI_ErrorCallback>
    return;
 80067de:	e003      	b.n	80067e8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80067e0:	bf00      	nop
 80067e2:	e002      	b.n	80067ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80067e8:	bf00      	nop
  }
}
 80067ea:	3728      	adds	r7, #40	@ 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	fffffc94 	.word	0xfffffc94
 80067f4:	08006879 	.word	0x08006879

080067f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800686a:	b2db      	uxtb	r3, r3
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006884:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff ffc8 	bl	8006834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0208 	orr.w	r2, r2, #8
 80068ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0210 	orr.w	r2, r2, #16
 80068da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0201 	bic.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6919      	ldr	r1, [r3, #16]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4b3c      	ldr	r3, [pc, #240]	@ (80069e8 <SPI_CloseTransfer+0x13c>)
 80068f8:	400b      	ands	r3, r1
 80068fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800690a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b04      	cmp	r3, #4
 8006916:	d014      	beq.n	8006942 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00f      	beq.n	8006942 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006928:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0220 	orr.w	r2, r2, #32
 8006940:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b03      	cmp	r3, #3
 800694c:	d014      	beq.n	8006978 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00f      	beq.n	8006978 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695e:	f043 0204 	orr.w	r2, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006976:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00f      	beq.n	80069a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006988:	f043 0201 	orr.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699a      	ldr	r2, [r3, #24]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00f      	beq.n	80069cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b2:	f043 0208 	orr.w	r2, r3, #8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80069dc:	bf00      	nop
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	fffffc90 	.word	0xfffffc90

080069ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80069fc:	e010      	b.n	8006a20 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069fe:	f7fb fa29 	bl	8001e54 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d803      	bhi.n	8006a16 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d102      	bne.n	8006a1c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e00f      	b.n	8006a40 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d0df      	beq.n	80069fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	3307      	adds	r3, #7
 8006a66:	08db      	lsrs	r3, r3, #3
 8006a68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e042      	b.n	8006b16 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f83b 	bl	8006b1e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2224      	movs	r2, #36	@ 0x24
 8006aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fe29 	bl	8007720 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8be 	bl	8006c50 <UART_SetConfig>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e01b      	b.n	8006b16 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006afc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0201 	orr.w	r2, r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fea8 	bl	8007864 <UART_CheckIdleState>
 8006b14:	4603      	mov	r3, r0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b08a      	sub	sp, #40	@ 0x28
 8006b36:	af02      	add	r7, sp, #8
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	603b      	str	r3, [r7, #0]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d17b      	bne.n	8006c44 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_UART_Transmit+0x26>
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e074      	b.n	8006c46 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2221      	movs	r2, #33	@ 0x21
 8006b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b6c:	f7fb f972 	bl	8001e54 <HAL_GetTick>
 8006b70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	88fa      	ldrh	r2, [r7, #6]
 8006b76:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	88fa      	ldrh	r2, [r7, #6]
 8006b7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b8a:	d108      	bne.n	8006b9e <HAL_UART_Transmit+0x6c>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	61bb      	str	r3, [r7, #24]
 8006b9c:	e003      	b.n	8006ba6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ba6:	e030      	b.n	8006c0a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2180      	movs	r1, #128	@ 0x80
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 ff00 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e03d      	b.n	8006c46 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	3302      	adds	r3, #2
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e007      	b.n	8006bf8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1c8      	bne.n	8006ba8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2140      	movs	r1, #64	@ 0x40
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fec9 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e006      	b.n	8006c46 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e000      	b.n	8006c46 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c44:	2302      	movs	r3, #2
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c54:	b092      	sub	sp, #72	@ 0x48
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4bbe      	ldr	r3, [pc, #760]	@ (8006f78 <UART_SetConfig+0x328>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4ab3      	ldr	r2, [pc, #716]	@ (8006f7c <UART_SetConfig+0x32c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	4baf      	ldr	r3, [pc, #700]	@ (8006f80 <UART_SetConfig+0x330>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	f023 010f 	bic.w	r1, r3, #15
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4aa6      	ldr	r2, [pc, #664]	@ (8006f84 <UART_SetConfig+0x334>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d177      	bne.n	8006de0 <UART_SetConfig+0x190>
 8006cf0:	4ba5      	ldr	r3, [pc, #660]	@ (8006f88 <UART_SetConfig+0x338>)
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cf8:	2b28      	cmp	r3, #40	@ 0x28
 8006cfa:	d86d      	bhi.n	8006dd8 <UART_SetConfig+0x188>
 8006cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <UART_SetConfig+0xb4>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006da9 	.word	0x08006da9
 8006d08:	08006dd9 	.word	0x08006dd9
 8006d0c:	08006dd9 	.word	0x08006dd9
 8006d10:	08006dd9 	.word	0x08006dd9
 8006d14:	08006dd9 	.word	0x08006dd9
 8006d18:	08006dd9 	.word	0x08006dd9
 8006d1c:	08006dd9 	.word	0x08006dd9
 8006d20:	08006dd9 	.word	0x08006dd9
 8006d24:	08006db1 	.word	0x08006db1
 8006d28:	08006dd9 	.word	0x08006dd9
 8006d2c:	08006dd9 	.word	0x08006dd9
 8006d30:	08006dd9 	.word	0x08006dd9
 8006d34:	08006dd9 	.word	0x08006dd9
 8006d38:	08006dd9 	.word	0x08006dd9
 8006d3c:	08006dd9 	.word	0x08006dd9
 8006d40:	08006dd9 	.word	0x08006dd9
 8006d44:	08006db9 	.word	0x08006db9
 8006d48:	08006dd9 	.word	0x08006dd9
 8006d4c:	08006dd9 	.word	0x08006dd9
 8006d50:	08006dd9 	.word	0x08006dd9
 8006d54:	08006dd9 	.word	0x08006dd9
 8006d58:	08006dd9 	.word	0x08006dd9
 8006d5c:	08006dd9 	.word	0x08006dd9
 8006d60:	08006dd9 	.word	0x08006dd9
 8006d64:	08006dc1 	.word	0x08006dc1
 8006d68:	08006dd9 	.word	0x08006dd9
 8006d6c:	08006dd9 	.word	0x08006dd9
 8006d70:	08006dd9 	.word	0x08006dd9
 8006d74:	08006dd9 	.word	0x08006dd9
 8006d78:	08006dd9 	.word	0x08006dd9
 8006d7c:	08006dd9 	.word	0x08006dd9
 8006d80:	08006dd9 	.word	0x08006dd9
 8006d84:	08006dc9 	.word	0x08006dc9
 8006d88:	08006dd9 	.word	0x08006dd9
 8006d8c:	08006dd9 	.word	0x08006dd9
 8006d90:	08006dd9 	.word	0x08006dd9
 8006d94:	08006dd9 	.word	0x08006dd9
 8006d98:	08006dd9 	.word	0x08006dd9
 8006d9c:	08006dd9 	.word	0x08006dd9
 8006da0:	08006dd9 	.word	0x08006dd9
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e222      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006db0:	2304      	movs	r3, #4
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e21e      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006db8:	2308      	movs	r3, #8
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e21a      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e216      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006dc8:	2320      	movs	r3, #32
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e212      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006dd0:	2340      	movs	r3, #64	@ 0x40
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e20e      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006dd8:	2380      	movs	r3, #128	@ 0x80
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e20a      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a69      	ldr	r2, [pc, #420]	@ (8006f8c <UART_SetConfig+0x33c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d130      	bne.n	8006e4c <UART_SetConfig+0x1fc>
 8006dea:	4b67      	ldr	r3, [pc, #412]	@ (8006f88 <UART_SetConfig+0x338>)
 8006dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	2b05      	cmp	r3, #5
 8006df4:	d826      	bhi.n	8006e44 <UART_SetConfig+0x1f4>
 8006df6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dfc <UART_SetConfig+0x1ac>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e15 	.word	0x08006e15
 8006e00:	08006e1d 	.word	0x08006e1d
 8006e04:	08006e25 	.word	0x08006e25
 8006e08:	08006e2d 	.word	0x08006e2d
 8006e0c:	08006e35 	.word	0x08006e35
 8006e10:	08006e3d 	.word	0x08006e3d
 8006e14:	2300      	movs	r3, #0
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1a:	e1ec      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e22:	e1e8      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e24:	2308      	movs	r3, #8
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e1e4      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e1e0      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e34:	2320      	movs	r3, #32
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e1dc      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e3c:	2340      	movs	r3, #64	@ 0x40
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e42:	e1d8      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e44:	2380      	movs	r3, #128	@ 0x80
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4a:	e1d4      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a4f      	ldr	r2, [pc, #316]	@ (8006f90 <UART_SetConfig+0x340>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d130      	bne.n	8006eb8 <UART_SetConfig+0x268>
 8006e56:	4b4c      	ldr	r3, [pc, #304]	@ (8006f88 <UART_SetConfig+0x338>)
 8006e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	d826      	bhi.n	8006eb0 <UART_SetConfig+0x260>
 8006e62:	a201      	add	r2, pc, #4	@ (adr r2, 8006e68 <UART_SetConfig+0x218>)
 8006e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e68:	08006e81 	.word	0x08006e81
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	08006e91 	.word	0x08006e91
 8006e74:	08006e99 	.word	0x08006e99
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006ea9 	.word	0x08006ea9
 8006e80:	2300      	movs	r3, #0
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e86:	e1b6      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8e:	e1b2      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e90:	2308      	movs	r3, #8
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e96:	e1ae      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006e98:	2310      	movs	r3, #16
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e1aa      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006ea0:	2320      	movs	r3, #32
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e1a6      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006ea8:	2340      	movs	r3, #64	@ 0x40
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e1a2      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006eb0:	2380      	movs	r3, #128	@ 0x80
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb6:	e19e      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a35      	ldr	r2, [pc, #212]	@ (8006f94 <UART_SetConfig+0x344>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d130      	bne.n	8006f24 <UART_SetConfig+0x2d4>
 8006ec2:	4b31      	ldr	r3, [pc, #196]	@ (8006f88 <UART_SetConfig+0x338>)
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	d826      	bhi.n	8006f1c <UART_SetConfig+0x2cc>
 8006ece:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <UART_SetConfig+0x284>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006eed 	.word	0x08006eed
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	08006efd 	.word	0x08006efd
 8006ee0:	08006f05 	.word	0x08006f05
 8006ee4:	08006f0d 	.word	0x08006f0d
 8006ee8:	08006f15 	.word	0x08006f15
 8006eec:	2300      	movs	r3, #0
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef2:	e180      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efa:	e17c      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006efc:	2308      	movs	r3, #8
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f02:	e178      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f04:	2310      	movs	r3, #16
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e174      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f0c:	2320      	movs	r3, #32
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e170      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f14:	2340      	movs	r3, #64	@ 0x40
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1a:	e16c      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f1c:	2380      	movs	r3, #128	@ 0x80
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f22:	e168      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1b      	ldr	r2, [pc, #108]	@ (8006f98 <UART_SetConfig+0x348>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d142      	bne.n	8006fb4 <UART_SetConfig+0x364>
 8006f2e:	4b16      	ldr	r3, [pc, #88]	@ (8006f88 <UART_SetConfig+0x338>)
 8006f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	d838      	bhi.n	8006fac <UART_SetConfig+0x35c>
 8006f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <UART_SetConfig+0x2f0>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f59 	.word	0x08006f59
 8006f44:	08006f61 	.word	0x08006f61
 8006f48:	08006f69 	.word	0x08006f69
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f9d 	.word	0x08006f9d
 8006f54:	08006fa5 	.word	0x08006fa5
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5e:	e14a      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f66:	e146      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e142      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e13e      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006f78:	cfff69f3 	.word	0xcfff69f3
 8006f7c:	58000c00 	.word	0x58000c00
 8006f80:	11fff4ff 	.word	0x11fff4ff
 8006f84:	40011000 	.word	0x40011000
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	40004400 	.word	0x40004400
 8006f90:	40004800 	.word	0x40004800
 8006f94:	40004c00 	.word	0x40004c00
 8006f98:	40005000 	.word	0x40005000
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e128      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006fa4:	2340      	movs	r3, #64	@ 0x40
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006faa:	e124      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e120      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4acb      	ldr	r2, [pc, #812]	@ (80072e8 <UART_SetConfig+0x698>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d176      	bne.n	80070ac <UART_SetConfig+0x45c>
 8006fbe:	4bcb      	ldr	r3, [pc, #812]	@ (80072ec <UART_SetConfig+0x69c>)
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc6:	2b28      	cmp	r3, #40	@ 0x28
 8006fc8:	d86c      	bhi.n	80070a4 <UART_SetConfig+0x454>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <UART_SetConfig+0x380>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08007075 	.word	0x08007075
 8006fd4:	080070a5 	.word	0x080070a5
 8006fd8:	080070a5 	.word	0x080070a5
 8006fdc:	080070a5 	.word	0x080070a5
 8006fe0:	080070a5 	.word	0x080070a5
 8006fe4:	080070a5 	.word	0x080070a5
 8006fe8:	080070a5 	.word	0x080070a5
 8006fec:	080070a5 	.word	0x080070a5
 8006ff0:	0800707d 	.word	0x0800707d
 8006ff4:	080070a5 	.word	0x080070a5
 8006ff8:	080070a5 	.word	0x080070a5
 8006ffc:	080070a5 	.word	0x080070a5
 8007000:	080070a5 	.word	0x080070a5
 8007004:	080070a5 	.word	0x080070a5
 8007008:	080070a5 	.word	0x080070a5
 800700c:	080070a5 	.word	0x080070a5
 8007010:	08007085 	.word	0x08007085
 8007014:	080070a5 	.word	0x080070a5
 8007018:	080070a5 	.word	0x080070a5
 800701c:	080070a5 	.word	0x080070a5
 8007020:	080070a5 	.word	0x080070a5
 8007024:	080070a5 	.word	0x080070a5
 8007028:	080070a5 	.word	0x080070a5
 800702c:	080070a5 	.word	0x080070a5
 8007030:	0800708d 	.word	0x0800708d
 8007034:	080070a5 	.word	0x080070a5
 8007038:	080070a5 	.word	0x080070a5
 800703c:	080070a5 	.word	0x080070a5
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080070a5 	.word	0x080070a5
 8007048:	080070a5 	.word	0x080070a5
 800704c:	080070a5 	.word	0x080070a5
 8007050:	08007095 	.word	0x08007095
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	080070a5 	.word	0x080070a5
 8007060:	080070a5 	.word	0x080070a5
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
 800706c:	080070a5 	.word	0x080070a5
 8007070:	0800709d 	.word	0x0800709d
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e0bc      	b.n	80071f6 <UART_SetConfig+0x5a6>
 800707c:	2304      	movs	r3, #4
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e0b8      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007084:	2308      	movs	r3, #8
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e0b4      	b.n	80071f6 <UART_SetConfig+0x5a6>
 800708c:	2310      	movs	r3, #16
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e0b0      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007094:	2320      	movs	r3, #32
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e0ac      	b.n	80071f6 <UART_SetConfig+0x5a6>
 800709c:	2340      	movs	r3, #64	@ 0x40
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e0a8      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80070a4:	2380      	movs	r3, #128	@ 0x80
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e0a4      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a8f      	ldr	r2, [pc, #572]	@ (80072f0 <UART_SetConfig+0x6a0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d130      	bne.n	8007118 <UART_SetConfig+0x4c8>
 80070b6:	4b8d      	ldr	r3, [pc, #564]	@ (80072ec <UART_SetConfig+0x69c>)
 80070b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d826      	bhi.n	8007110 <UART_SetConfig+0x4c0>
 80070c2:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0x478>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070e1 	.word	0x080070e1
 80070cc:	080070e9 	.word	0x080070e9
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007109 	.word	0x08007109
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e086      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80070e8:	2304      	movs	r3, #4
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e082      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80070f0:	2308      	movs	r3, #8
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e07e      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80070f8:	2310      	movs	r3, #16
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e07a      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007100:	2320      	movs	r3, #32
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e076      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007108:	2340      	movs	r3, #64	@ 0x40
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e072      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e06e      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a75      	ldr	r2, [pc, #468]	@ (80072f4 <UART_SetConfig+0x6a4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d130      	bne.n	8007184 <UART_SetConfig+0x534>
 8007122:	4b72      	ldr	r3, [pc, #456]	@ (80072ec <UART_SetConfig+0x69c>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b05      	cmp	r3, #5
 800712c:	d826      	bhi.n	800717c <UART_SetConfig+0x52c>
 800712e:	a201      	add	r2, pc, #4	@ (adr r2, 8007134 <UART_SetConfig+0x4e4>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	0800714d 	.word	0x0800714d
 8007138:	08007155 	.word	0x08007155
 800713c:	0800715d 	.word	0x0800715d
 8007140:	08007165 	.word	0x08007165
 8007144:	0800716d 	.word	0x0800716d
 8007148:	08007175 	.word	0x08007175
 800714c:	2300      	movs	r3, #0
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007152:	e050      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007154:	2304      	movs	r3, #4
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800715a:	e04c      	b.n	80071f6 <UART_SetConfig+0x5a6>
 800715c:	2308      	movs	r3, #8
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007162:	e048      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007164:	2310      	movs	r3, #16
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716a:	e044      	b.n	80071f6 <UART_SetConfig+0x5a6>
 800716c:	2320      	movs	r3, #32
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007172:	e040      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007174:	2340      	movs	r3, #64	@ 0x40
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e03c      	b.n	80071f6 <UART_SetConfig+0x5a6>
 800717c:	2380      	movs	r3, #128	@ 0x80
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007182:	e038      	b.n	80071f6 <UART_SetConfig+0x5a6>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a5b      	ldr	r2, [pc, #364]	@ (80072f8 <UART_SetConfig+0x6a8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d130      	bne.n	80071f0 <UART_SetConfig+0x5a0>
 800718e:	4b57      	ldr	r3, [pc, #348]	@ (80072ec <UART_SetConfig+0x69c>)
 8007190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b05      	cmp	r3, #5
 8007198:	d826      	bhi.n	80071e8 <UART_SetConfig+0x598>
 800719a:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <UART_SetConfig+0x550>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071b9 	.word	0x080071b9
 80071a4:	080071c1 	.word	0x080071c1
 80071a8:	080071c9 	.word	0x080071c9
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	2302      	movs	r3, #2
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071be:	e01a      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80071c0:	2304      	movs	r3, #4
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c6:	e016      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80071c8:	2308      	movs	r3, #8
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ce:	e012      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80071d0:	2310      	movs	r3, #16
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d6:	e00e      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80071d8:	2320      	movs	r3, #32
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071de:	e00a      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80071e0:	2340      	movs	r3, #64	@ 0x40
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e6:	e006      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80071e8:	2380      	movs	r3, #128	@ 0x80
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ee:	e002      	b.n	80071f6 <UART_SetConfig+0x5a6>
 80071f0:	2380      	movs	r3, #128	@ 0x80
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a3f      	ldr	r2, [pc, #252]	@ (80072f8 <UART_SetConfig+0x6a8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	f040 80f8 	bne.w	80073f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007202:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007206:	2b20      	cmp	r3, #32
 8007208:	dc46      	bgt.n	8007298 <UART_SetConfig+0x648>
 800720a:	2b02      	cmp	r3, #2
 800720c:	f2c0 8082 	blt.w	8007314 <UART_SetConfig+0x6c4>
 8007210:	3b02      	subs	r3, #2
 8007212:	2b1e      	cmp	r3, #30
 8007214:	d87e      	bhi.n	8007314 <UART_SetConfig+0x6c4>
 8007216:	a201      	add	r2, pc, #4	@ (adr r2, 800721c <UART_SetConfig+0x5cc>)
 8007218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721c:	0800729f 	.word	0x0800729f
 8007220:	08007315 	.word	0x08007315
 8007224:	080072a7 	.word	0x080072a7
 8007228:	08007315 	.word	0x08007315
 800722c:	08007315 	.word	0x08007315
 8007230:	08007315 	.word	0x08007315
 8007234:	080072b7 	.word	0x080072b7
 8007238:	08007315 	.word	0x08007315
 800723c:	08007315 	.word	0x08007315
 8007240:	08007315 	.word	0x08007315
 8007244:	08007315 	.word	0x08007315
 8007248:	08007315 	.word	0x08007315
 800724c:	08007315 	.word	0x08007315
 8007250:	08007315 	.word	0x08007315
 8007254:	080072c7 	.word	0x080072c7
 8007258:	08007315 	.word	0x08007315
 800725c:	08007315 	.word	0x08007315
 8007260:	08007315 	.word	0x08007315
 8007264:	08007315 	.word	0x08007315
 8007268:	08007315 	.word	0x08007315
 800726c:	08007315 	.word	0x08007315
 8007270:	08007315 	.word	0x08007315
 8007274:	08007315 	.word	0x08007315
 8007278:	08007315 	.word	0x08007315
 800727c:	08007315 	.word	0x08007315
 8007280:	08007315 	.word	0x08007315
 8007284:	08007315 	.word	0x08007315
 8007288:	08007315 	.word	0x08007315
 800728c:	08007315 	.word	0x08007315
 8007290:	08007315 	.word	0x08007315
 8007294:	08007307 	.word	0x08007307
 8007298:	2b40      	cmp	r3, #64	@ 0x40
 800729a:	d037      	beq.n	800730c <UART_SetConfig+0x6bc>
 800729c:	e03a      	b.n	8007314 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800729e:	f7fd fe6f 	bl	8004f80 <HAL_RCCEx_GetD3PCLK1Freq>
 80072a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80072a4:	e03c      	b.n	8007320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fe7e 	bl	8004fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b4:	e034      	b.n	8007320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b6:	f107 0318 	add.w	r3, r7, #24
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd ffca 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072c4:	e02c      	b.n	8007320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c6:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <UART_SetConfig+0x69c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d016      	beq.n	8007300 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072d2:	4b06      	ldr	r3, [pc, #24]	@ (80072ec <UART_SetConfig+0x69c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	08db      	lsrs	r3, r3, #3
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	4a07      	ldr	r2, [pc, #28]	@ (80072fc <UART_SetConfig+0x6ac>)
 80072de:	fa22 f303 	lsr.w	r3, r2, r3
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072e4:	e01c      	b.n	8007320 <UART_SetConfig+0x6d0>
 80072e6:	bf00      	nop
 80072e8:	40011400 	.word	0x40011400
 80072ec:	58024400 	.word	0x58024400
 80072f0:	40007800 	.word	0x40007800
 80072f4:	40007c00 	.word	0x40007c00
 80072f8:	58000c00 	.word	0x58000c00
 80072fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007300:	4b9d      	ldr	r3, [pc, #628]	@ (8007578 <UART_SetConfig+0x928>)
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007304:	e00c      	b.n	8007320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007306:	4b9d      	ldr	r3, [pc, #628]	@ (800757c <UART_SetConfig+0x92c>)
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800730a:	e009      	b.n	8007320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007312:	e005      	b.n	8007320 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800731e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 81de 	beq.w	80076e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	4a94      	ldr	r2, [pc, #592]	@ (8007580 <UART_SetConfig+0x930>)
 800732e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007332:	461a      	mov	r2, r3
 8007334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007336:	fbb3 f3f2 	udiv	r3, r3, r2
 800733a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	4413      	add	r3, r2
 8007346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007348:	429a      	cmp	r2, r3
 800734a:	d305      	bcc.n	8007358 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007354:	429a      	cmp	r2, r3
 8007356:	d903      	bls.n	8007360 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800735e:	e1c1      	b.n	80076e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007362:	2200      	movs	r2, #0
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	60fa      	str	r2, [r7, #12]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	4a84      	ldr	r2, [pc, #528]	@ (8007580 <UART_SetConfig+0x930>)
 800736e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007372:	b29b      	uxth	r3, r3
 8007374:	2200      	movs	r2, #0
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007382:	f7f8 fffd 	bl	8000380 <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	020b      	lsls	r3, r1, #8
 8007398:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800739c:	0202      	lsls	r2, r0, #8
 800739e:	6979      	ldr	r1, [r7, #20]
 80073a0:	6849      	ldr	r1, [r1, #4]
 80073a2:	0849      	lsrs	r1, r1, #1
 80073a4:	2000      	movs	r0, #0
 80073a6:	460c      	mov	r4, r1
 80073a8:	4605      	mov	r5, r0
 80073aa:	eb12 0804 	adds.w	r8, r2, r4
 80073ae:	eb43 0905 	adc.w	r9, r3, r5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	469a      	mov	sl, r3
 80073ba:	4693      	mov	fp, r2
 80073bc:	4652      	mov	r2, sl
 80073be:	465b      	mov	r3, fp
 80073c0:	4640      	mov	r0, r8
 80073c2:	4649      	mov	r1, r9
 80073c4:	f7f8 ffdc 	bl	8000380 <__aeabi_uldivmod>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4613      	mov	r3, r2
 80073ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073d6:	d308      	bcc.n	80073ea <UART_SetConfig+0x79a>
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073de:	d204      	bcs.n	80073ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073e6:	60da      	str	r2, [r3, #12]
 80073e8:	e17c      	b.n	80076e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073f0:	e178      	b.n	80076e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073fa:	f040 80c5 	bne.w	8007588 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80073fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007402:	2b20      	cmp	r3, #32
 8007404:	dc48      	bgt.n	8007498 <UART_SetConfig+0x848>
 8007406:	2b00      	cmp	r3, #0
 8007408:	db7b      	blt.n	8007502 <UART_SetConfig+0x8b2>
 800740a:	2b20      	cmp	r3, #32
 800740c:	d879      	bhi.n	8007502 <UART_SetConfig+0x8b2>
 800740e:	a201      	add	r2, pc, #4	@ (adr r2, 8007414 <UART_SetConfig+0x7c4>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	0800749f 	.word	0x0800749f
 8007418:	080074a7 	.word	0x080074a7
 800741c:	08007503 	.word	0x08007503
 8007420:	08007503 	.word	0x08007503
 8007424:	080074af 	.word	0x080074af
 8007428:	08007503 	.word	0x08007503
 800742c:	08007503 	.word	0x08007503
 8007430:	08007503 	.word	0x08007503
 8007434:	080074bf 	.word	0x080074bf
 8007438:	08007503 	.word	0x08007503
 800743c:	08007503 	.word	0x08007503
 8007440:	08007503 	.word	0x08007503
 8007444:	08007503 	.word	0x08007503
 8007448:	08007503 	.word	0x08007503
 800744c:	08007503 	.word	0x08007503
 8007450:	08007503 	.word	0x08007503
 8007454:	080074cf 	.word	0x080074cf
 8007458:	08007503 	.word	0x08007503
 800745c:	08007503 	.word	0x08007503
 8007460:	08007503 	.word	0x08007503
 8007464:	08007503 	.word	0x08007503
 8007468:	08007503 	.word	0x08007503
 800746c:	08007503 	.word	0x08007503
 8007470:	08007503 	.word	0x08007503
 8007474:	08007503 	.word	0x08007503
 8007478:	08007503 	.word	0x08007503
 800747c:	08007503 	.word	0x08007503
 8007480:	08007503 	.word	0x08007503
 8007484:	08007503 	.word	0x08007503
 8007488:	08007503 	.word	0x08007503
 800748c:	08007503 	.word	0x08007503
 8007490:	08007503 	.word	0x08007503
 8007494:	080074f5 	.word	0x080074f5
 8007498:	2b40      	cmp	r3, #64	@ 0x40
 800749a:	d02e      	beq.n	80074fa <UART_SetConfig+0x8aa>
 800749c:	e031      	b.n	8007502 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800749e:	f7fc fb39 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 80074a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074a4:	e033      	b.n	800750e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a6:	f7fc fb4b 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 80074aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074ac:	e02f      	b.n	800750e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fd fd7a 	bl	8004fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074bc:	e027      	b.n	800750e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074be:	f107 0318 	add.w	r3, r7, #24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fd fec6 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074cc:	e01f      	b.n	800750e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007584 <UART_SetConfig+0x934>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074da:	4b2a      	ldr	r3, [pc, #168]	@ (8007584 <UART_SetConfig+0x934>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	4a24      	ldr	r2, [pc, #144]	@ (8007578 <UART_SetConfig+0x928>)
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074ec:	e00f      	b.n	800750e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80074ee:	4b22      	ldr	r3, [pc, #136]	@ (8007578 <UART_SetConfig+0x928>)
 80074f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f2:	e00c      	b.n	800750e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074f4:	4b21      	ldr	r3, [pc, #132]	@ (800757c <UART_SetConfig+0x92c>)
 80074f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f8:	e009      	b.n	800750e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007500:	e005      	b.n	800750e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800750c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800750e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80e7 	beq.w	80076e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	4a19      	ldr	r2, [pc, #100]	@ (8007580 <UART_SetConfig+0x930>)
 800751c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007520:	461a      	mov	r2, r3
 8007522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007524:	fbb3 f3f2 	udiv	r3, r3, r2
 8007528:	005a      	lsls	r2, r3, #1
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	441a      	add	r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	fbb2 f3f3 	udiv	r3, r2, r3
 800753a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	2b0f      	cmp	r3, #15
 8007540:	d916      	bls.n	8007570 <UART_SetConfig+0x920>
 8007542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007548:	d212      	bcs.n	8007570 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754c:	b29b      	uxth	r3, r3
 800754e:	f023 030f 	bic.w	r3, r3, #15
 8007552:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	b29b      	uxth	r3, r3
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	b29a      	uxth	r2, r3
 8007560:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007562:	4313      	orrs	r3, r2
 8007564:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800756c:	60da      	str	r2, [r3, #12]
 800756e:	e0b9      	b.n	80076e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007576:	e0b5      	b.n	80076e4 <UART_SetConfig+0xa94>
 8007578:	03d09000 	.word	0x03d09000
 800757c:	003d0900 	.word	0x003d0900
 8007580:	0800a3a4 	.word	0x0800a3a4
 8007584:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007588:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800758c:	2b20      	cmp	r3, #32
 800758e:	dc49      	bgt.n	8007624 <UART_SetConfig+0x9d4>
 8007590:	2b00      	cmp	r3, #0
 8007592:	db7c      	blt.n	800768e <UART_SetConfig+0xa3e>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d87a      	bhi.n	800768e <UART_SetConfig+0xa3e>
 8007598:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <UART_SetConfig+0x950>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	0800762b 	.word	0x0800762b
 80075a4:	08007633 	.word	0x08007633
 80075a8:	0800768f 	.word	0x0800768f
 80075ac:	0800768f 	.word	0x0800768f
 80075b0:	0800763b 	.word	0x0800763b
 80075b4:	0800768f 	.word	0x0800768f
 80075b8:	0800768f 	.word	0x0800768f
 80075bc:	0800768f 	.word	0x0800768f
 80075c0:	0800764b 	.word	0x0800764b
 80075c4:	0800768f 	.word	0x0800768f
 80075c8:	0800768f 	.word	0x0800768f
 80075cc:	0800768f 	.word	0x0800768f
 80075d0:	0800768f 	.word	0x0800768f
 80075d4:	0800768f 	.word	0x0800768f
 80075d8:	0800768f 	.word	0x0800768f
 80075dc:	0800768f 	.word	0x0800768f
 80075e0:	0800765b 	.word	0x0800765b
 80075e4:	0800768f 	.word	0x0800768f
 80075e8:	0800768f 	.word	0x0800768f
 80075ec:	0800768f 	.word	0x0800768f
 80075f0:	0800768f 	.word	0x0800768f
 80075f4:	0800768f 	.word	0x0800768f
 80075f8:	0800768f 	.word	0x0800768f
 80075fc:	0800768f 	.word	0x0800768f
 8007600:	0800768f 	.word	0x0800768f
 8007604:	0800768f 	.word	0x0800768f
 8007608:	0800768f 	.word	0x0800768f
 800760c:	0800768f 	.word	0x0800768f
 8007610:	0800768f 	.word	0x0800768f
 8007614:	0800768f 	.word	0x0800768f
 8007618:	0800768f 	.word	0x0800768f
 800761c:	0800768f 	.word	0x0800768f
 8007620:	08007681 	.word	0x08007681
 8007624:	2b40      	cmp	r3, #64	@ 0x40
 8007626:	d02e      	beq.n	8007686 <UART_SetConfig+0xa36>
 8007628:	e031      	b.n	800768e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800762a:	f7fc fa73 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 800762e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007630:	e033      	b.n	800769a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007632:	f7fc fa85 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8007636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007638:	e02f      	b.n	800769a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800763a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd fcb4 	bl	8004fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007648:	e027      	b.n	800769a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800764a:	f107 0318 	add.w	r3, r7, #24
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd fe00 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007658:	e01f      	b.n	800769a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800765a:	4b2d      	ldr	r3, [pc, #180]	@ (8007710 <UART_SetConfig+0xac0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007666:	4b2a      	ldr	r3, [pc, #168]	@ (8007710 <UART_SetConfig+0xac0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	08db      	lsrs	r3, r3, #3
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	4a28      	ldr	r2, [pc, #160]	@ (8007714 <UART_SetConfig+0xac4>)
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007678:	e00f      	b.n	800769a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800767a:	4b26      	ldr	r3, [pc, #152]	@ (8007714 <UART_SetConfig+0xac4>)
 800767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767e:	e00c      	b.n	800769a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007680:	4b25      	ldr	r3, [pc, #148]	@ (8007718 <UART_SetConfig+0xac8>)
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007684:	e009      	b.n	800769a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768c:	e005      	b.n	800769a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007698:	bf00      	nop
    }

    if (pclk != 0U)
 800769a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d021      	beq.n	80076e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	4a1d      	ldr	r2, [pc, #116]	@ (800771c <UART_SetConfig+0xacc>)
 80076a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	441a      	add	r2, r3
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	d909      	bls.n	80076de <UART_SetConfig+0xa8e>
 80076ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d0:	d205      	bcs.n	80076de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60da      	str	r2, [r3, #12]
 80076dc:	e002      	b.n	80076e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2200      	movs	r2, #0
 80076f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2200      	movs	r2, #0
 80076fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007700:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007704:	4618      	mov	r0, r3
 8007706:	3748      	adds	r7, #72	@ 0x48
 8007708:	46bd      	mov	sp, r7
 800770a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800770e:	bf00      	nop
 8007710:	58024400 	.word	0x58024400
 8007714:	03d09000 	.word	0x03d09000
 8007718:	003d0900 	.word	0x003d0900
 800771c:	0800a3a4 	.word	0x0800a3a4

08007720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01a      	beq.n	8007836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800781e:	d10a      	bne.n	8007836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b098      	sub	sp, #96	@ 0x60
 8007868:	af02      	add	r7, sp, #8
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007874:	f7fa faee 	bl	8001e54 <HAL_GetTick>
 8007878:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b08      	cmp	r3, #8
 8007886:	d12f      	bne.n	80078e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007888:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007890:	2200      	movs	r2, #0
 8007892:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f88e 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d022      	beq.n	80078e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e063      	b.n	80079b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d149      	bne.n	800798a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078fe:	2200      	movs	r2, #0
 8007900:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f857 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03c      	beq.n	800798a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	623b      	str	r3, [r7, #32]
   return(result);
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800792e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007930:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e6      	bne.n	8007910 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3308      	adds	r3, #8
 8007948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	60fb      	str	r3, [r7, #12]
   return(result);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007962:	61fa      	str	r2, [r7, #28]
 8007964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	69b9      	ldr	r1, [r7, #24]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	617b      	str	r3, [r7, #20]
   return(result);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e5      	bne.n	8007942 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e012      	b.n	80079b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3758      	adds	r7, #88	@ 0x58
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	e04f      	b.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d04b      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fa fa3f 	bl	8001e54 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e04e      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d037      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b80      	cmp	r3, #128	@ 0x80
 80079fe:	d034      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b40      	cmp	r3, #64	@ 0x40
 8007a04:	d031      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d110      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f839 	bl	8007a94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2208      	movs	r2, #8
 8007a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e029      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a44:	d111      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f81f 	bl	8007a94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e00f      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4013      	ands	r3, r2
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d0a0      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b095      	sub	sp, #84	@ 0x54
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8007abc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e6      	bne.n	8007a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8007b5c <UART_EndRxTransfer+0xc8>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3308      	adds	r3, #8
 8007aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e5      	bne.n	8007ace <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d118      	bne.n	8007b3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f023 0310 	bic.w	r3, r3, #16
 8007b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6979      	ldr	r1, [r7, #20]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	613b      	str	r3, [r7, #16]
   return(result);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e6      	bne.n	8007b0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b50:	bf00      	nop
 8007b52:	3754      	adds	r7, #84	@ 0x54
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	effffffe 	.word	0xeffffffe

08007b60 <std>:
 8007b60:	2300      	movs	r3, #0
 8007b62:	b510      	push	{r4, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	e9c0 3300 	strd	r3, r3, [r0]
 8007b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6e:	6083      	str	r3, [r0, #8]
 8007b70:	8181      	strh	r1, [r0, #12]
 8007b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b74:	81c2      	strh	r2, [r0, #14]
 8007b76:	6183      	str	r3, [r0, #24]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	305c      	adds	r0, #92	@ 0x5c
 8007b7e:	f000 f906 	bl	8007d8e <memset>
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <std+0x58>)
 8007b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b86:	4b0d      	ldr	r3, [pc, #52]	@ (8007bbc <std+0x5c>)
 8007b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <std+0x60>)
 8007b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <std+0x64>)
 8007b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <std+0x68>)
 8007b94:	6224      	str	r4, [r4, #32]
 8007b96:	429c      	cmp	r4, r3
 8007b98:	d006      	beq.n	8007ba8 <std+0x48>
 8007b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b9e:	4294      	cmp	r4, r2
 8007ba0:	d002      	beq.n	8007ba8 <std+0x48>
 8007ba2:	33d0      	adds	r3, #208	@ 0xd0
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	d105      	bne.n	8007bb4 <std+0x54>
 8007ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f000 b966 	b.w	8007e80 <__retarget_lock_init_recursive>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	bf00      	nop
 8007bb8:	08007d09 	.word	0x08007d09
 8007bbc:	08007d2b 	.word	0x08007d2b
 8007bc0:	08007d63 	.word	0x08007d63
 8007bc4:	08007d87 	.word	0x08007d87
 8007bc8:	240001e8 	.word	0x240001e8

08007bcc <stdio_exit_handler>:
 8007bcc:	4a02      	ldr	r2, [pc, #8]	@ (8007bd8 <stdio_exit_handler+0xc>)
 8007bce:	4903      	ldr	r1, [pc, #12]	@ (8007bdc <stdio_exit_handler+0x10>)
 8007bd0:	4803      	ldr	r0, [pc, #12]	@ (8007be0 <stdio_exit_handler+0x14>)
 8007bd2:	f000 b869 	b.w	8007ca8 <_fwalk_sglue>
 8007bd6:	bf00      	nop
 8007bd8:	2400002c 	.word	0x2400002c
 8007bdc:	0800871d 	.word	0x0800871d
 8007be0:	2400003c 	.word	0x2400003c

08007be4 <cleanup_stdio>:
 8007be4:	6841      	ldr	r1, [r0, #4]
 8007be6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c18 <cleanup_stdio+0x34>)
 8007be8:	4299      	cmp	r1, r3
 8007bea:	b510      	push	{r4, lr}
 8007bec:	4604      	mov	r4, r0
 8007bee:	d001      	beq.n	8007bf4 <cleanup_stdio+0x10>
 8007bf0:	f000 fd94 	bl	800871c <_fflush_r>
 8007bf4:	68a1      	ldr	r1, [r4, #8]
 8007bf6:	4b09      	ldr	r3, [pc, #36]	@ (8007c1c <cleanup_stdio+0x38>)
 8007bf8:	4299      	cmp	r1, r3
 8007bfa:	d002      	beq.n	8007c02 <cleanup_stdio+0x1e>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fd8d 	bl	800871c <_fflush_r>
 8007c02:	68e1      	ldr	r1, [r4, #12]
 8007c04:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <cleanup_stdio+0x3c>)
 8007c06:	4299      	cmp	r1, r3
 8007c08:	d004      	beq.n	8007c14 <cleanup_stdio+0x30>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c10:	f000 bd84 	b.w	800871c <_fflush_r>
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	240001e8 	.word	0x240001e8
 8007c1c:	24000250 	.word	0x24000250
 8007c20:	240002b8 	.word	0x240002b8

08007c24 <global_stdio_init.part.0>:
 8007c24:	b510      	push	{r4, lr}
 8007c26:	4b0b      	ldr	r3, [pc, #44]	@ (8007c54 <global_stdio_init.part.0+0x30>)
 8007c28:	4c0b      	ldr	r4, [pc, #44]	@ (8007c58 <global_stdio_init.part.0+0x34>)
 8007c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007c5c <global_stdio_init.part.0+0x38>)
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	2200      	movs	r2, #0
 8007c32:	2104      	movs	r1, #4
 8007c34:	f7ff ff94 	bl	8007b60 <std>
 8007c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	2109      	movs	r1, #9
 8007c40:	f7ff ff8e 	bl	8007b60 <std>
 8007c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c48:	2202      	movs	r2, #2
 8007c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4e:	2112      	movs	r1, #18
 8007c50:	f7ff bf86 	b.w	8007b60 <std>
 8007c54:	24000320 	.word	0x24000320
 8007c58:	240001e8 	.word	0x240001e8
 8007c5c:	08007bcd 	.word	0x08007bcd

08007c60 <__sfp_lock_acquire>:
 8007c60:	4801      	ldr	r0, [pc, #4]	@ (8007c68 <__sfp_lock_acquire+0x8>)
 8007c62:	f000 b90e 	b.w	8007e82 <__retarget_lock_acquire_recursive>
 8007c66:	bf00      	nop
 8007c68:	24000329 	.word	0x24000329

08007c6c <__sfp_lock_release>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	@ (8007c74 <__sfp_lock_release+0x8>)
 8007c6e:	f000 b909 	b.w	8007e84 <__retarget_lock_release_recursive>
 8007c72:	bf00      	nop
 8007c74:	24000329 	.word	0x24000329

08007c78 <__sinit>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f7ff fff0 	bl	8007c60 <__sfp_lock_acquire>
 8007c80:	6a23      	ldr	r3, [r4, #32]
 8007c82:	b11b      	cbz	r3, 8007c8c <__sinit+0x14>
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f7ff bff0 	b.w	8007c6c <__sfp_lock_release>
 8007c8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ca0 <__sinit+0x28>)
 8007c8e:	6223      	str	r3, [r4, #32]
 8007c90:	4b04      	ldr	r3, [pc, #16]	@ (8007ca4 <__sinit+0x2c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f5      	bne.n	8007c84 <__sinit+0xc>
 8007c98:	f7ff ffc4 	bl	8007c24 <global_stdio_init.part.0>
 8007c9c:	e7f2      	b.n	8007c84 <__sinit+0xc>
 8007c9e:	bf00      	nop
 8007ca0:	08007be5 	.word	0x08007be5
 8007ca4:	24000320 	.word	0x24000320

08007ca8 <_fwalk_sglue>:
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	4607      	mov	r7, r0
 8007cae:	4688      	mov	r8, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8007cbc:	d505      	bpl.n	8007cca <_fwalk_sglue+0x22>
 8007cbe:	6824      	ldr	r4, [r4, #0]
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	d1f7      	bne.n	8007cb4 <_fwalk_sglue+0xc>
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d907      	bls.n	8007ce0 <_fwalk_sglue+0x38>
 8007cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	d003      	beq.n	8007ce0 <_fwalk_sglue+0x38>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c0      	blx	r8
 8007cde:	4306      	orrs	r6, r0
 8007ce0:	3568      	adds	r5, #104	@ 0x68
 8007ce2:	e7e9      	b.n	8007cb8 <_fwalk_sglue+0x10>

08007ce4 <iprintf>:
 8007ce4:	b40f      	push	{r0, r1, r2, r3}
 8007ce6:	b507      	push	{r0, r1, r2, lr}
 8007ce8:	4906      	ldr	r1, [pc, #24]	@ (8007d04 <iprintf+0x20>)
 8007cea:	ab04      	add	r3, sp, #16
 8007cec:	6808      	ldr	r0, [r1, #0]
 8007cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf2:	6881      	ldr	r1, [r0, #8]
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	f000 f9e9 	bl	80080cc <_vfiprintf_r>
 8007cfa:	b003      	add	sp, #12
 8007cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d00:	b004      	add	sp, #16
 8007d02:	4770      	bx	lr
 8007d04:	24000038 	.word	0x24000038

08007d08 <__sread>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d10:	f000 f868 	bl	8007de4 <_read_r>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	bfab      	itete	ge
 8007d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d1c:	181b      	addge	r3, r3, r0
 8007d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d22:	bfac      	ite	ge
 8007d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d26:	81a3      	strhlt	r3, [r4, #12]
 8007d28:	bd10      	pop	{r4, pc}

08007d2a <__swrite>:
 8007d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2e:	461f      	mov	r7, r3
 8007d30:	898b      	ldrh	r3, [r1, #12]
 8007d32:	05db      	lsls	r3, r3, #23
 8007d34:	4605      	mov	r5, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	4616      	mov	r6, r2
 8007d3a:	d505      	bpl.n	8007d48 <__swrite+0x1e>
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	2302      	movs	r3, #2
 8007d42:	2200      	movs	r2, #0
 8007d44:	f000 f83c 	bl	8007dc0 <_lseek_r>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	4632      	mov	r2, r6
 8007d56:	463b      	mov	r3, r7
 8007d58:	4628      	mov	r0, r5
 8007d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	f000 b853 	b.w	8007e08 <_write_r>

08007d62 <__sseek>:
 8007d62:	b510      	push	{r4, lr}
 8007d64:	460c      	mov	r4, r1
 8007d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6a:	f000 f829 	bl	8007dc0 <_lseek_r>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	bf15      	itete	ne
 8007d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d7e:	81a3      	strheq	r3, [r4, #12]
 8007d80:	bf18      	it	ne
 8007d82:	81a3      	strhne	r3, [r4, #12]
 8007d84:	bd10      	pop	{r4, pc}

08007d86 <__sclose>:
 8007d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8a:	f000 b809 	b.w	8007da0 <_close_r>

08007d8e <memset>:
 8007d8e:	4402      	add	r2, r0
 8007d90:	4603      	mov	r3, r0
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d100      	bne.n	8007d98 <memset+0xa>
 8007d96:	4770      	bx	lr
 8007d98:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9c:	e7f9      	b.n	8007d92 <memset+0x4>
	...

08007da0 <_close_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d06      	ldr	r5, [pc, #24]	@ (8007dbc <_close_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7f9 fc27 	bl	80015fe <_close>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_close_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_close_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	24000324 	.word	0x24000324

08007dc0 <_lseek_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	@ (8007de0 <_lseek_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7f9 fc3c 	bl	800164c <_lseek>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_lseek_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_lseek_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	24000324 	.word	0x24000324

08007de4 <_read_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	@ (8007e04 <_read_r+0x20>)
 8007de8:	4604      	mov	r4, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7f9 fbca 	bl	800158c <_read>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_read_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_read_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	24000324 	.word	0x24000324

08007e08 <_write_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	@ (8007e28 <_write_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7f9 fbd5 	bl	80015c6 <_write>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_write_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_write_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	24000324 	.word	0x24000324

08007e2c <__errno>:
 8007e2c:	4b01      	ldr	r3, [pc, #4]	@ (8007e34 <__errno+0x8>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	24000038 	.word	0x24000038

08007e38 <__libc_init_array>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e70 <__libc_init_array+0x38>)
 8007e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e74 <__libc_init_array+0x3c>)
 8007e3e:	1b64      	subs	r4, r4, r5
 8007e40:	10a4      	asrs	r4, r4, #2
 8007e42:	2600      	movs	r6, #0
 8007e44:	42a6      	cmp	r6, r4
 8007e46:	d109      	bne.n	8007e5c <__libc_init_array+0x24>
 8007e48:	4d0b      	ldr	r5, [pc, #44]	@ (8007e78 <__libc_init_array+0x40>)
 8007e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e7c <__libc_init_array+0x44>)
 8007e4c:	f000 fdb6 	bl	80089bc <_init>
 8007e50:	1b64      	subs	r4, r4, r5
 8007e52:	10a4      	asrs	r4, r4, #2
 8007e54:	2600      	movs	r6, #0
 8007e56:	42a6      	cmp	r6, r4
 8007e58:	d105      	bne.n	8007e66 <__libc_init_array+0x2e>
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}
 8007e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e60:	4798      	blx	r3
 8007e62:	3601      	adds	r6, #1
 8007e64:	e7ee      	b.n	8007e44 <__libc_init_array+0xc>
 8007e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6a:	4798      	blx	r3
 8007e6c:	3601      	adds	r6, #1
 8007e6e:	e7f2      	b.n	8007e56 <__libc_init_array+0x1e>
 8007e70:	0800a3f8 	.word	0x0800a3f8
 8007e74:	0800a3f8 	.word	0x0800a3f8
 8007e78:	0800a3f8 	.word	0x0800a3f8
 8007e7c:	0800a3fc 	.word	0x0800a3fc

08007e80 <__retarget_lock_init_recursive>:
 8007e80:	4770      	bx	lr

08007e82 <__retarget_lock_acquire_recursive>:
 8007e82:	4770      	bx	lr

08007e84 <__retarget_lock_release_recursive>:
 8007e84:	4770      	bx	lr
	...

08007e88 <_free_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	d041      	beq.n	8007f14 <_free_r+0x8c>
 8007e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e94:	1f0c      	subs	r4, r1, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfb8      	it	lt
 8007e9a:	18e4      	addlt	r4, r4, r3
 8007e9c:	f000 f8e0 	bl	8008060 <__malloc_lock>
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f18 <_free_r+0x90>)
 8007ea2:	6813      	ldr	r3, [r2, #0]
 8007ea4:	b933      	cbnz	r3, 8007eb4 <_free_r+0x2c>
 8007ea6:	6063      	str	r3, [r4, #4]
 8007ea8:	6014      	str	r4, [r2, #0]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb0:	f000 b8dc 	b.w	800806c <__malloc_unlock>
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d908      	bls.n	8007eca <_free_r+0x42>
 8007eb8:	6820      	ldr	r0, [r4, #0]
 8007eba:	1821      	adds	r1, r4, r0
 8007ebc:	428b      	cmp	r3, r1
 8007ebe:	bf01      	itttt	eq
 8007ec0:	6819      	ldreq	r1, [r3, #0]
 8007ec2:	685b      	ldreq	r3, [r3, #4]
 8007ec4:	1809      	addeq	r1, r1, r0
 8007ec6:	6021      	streq	r1, [r4, #0]
 8007ec8:	e7ed      	b.n	8007ea6 <_free_r+0x1e>
 8007eca:	461a      	mov	r2, r3
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	b10b      	cbz	r3, 8007ed4 <_free_r+0x4c>
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	d9fa      	bls.n	8007eca <_free_r+0x42>
 8007ed4:	6811      	ldr	r1, [r2, #0]
 8007ed6:	1850      	adds	r0, r2, r1
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d10b      	bne.n	8007ef4 <_free_r+0x6c>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	4401      	add	r1, r0
 8007ee0:	1850      	adds	r0, r2, r1
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	6011      	str	r1, [r2, #0]
 8007ee6:	d1e0      	bne.n	8007eaa <_free_r+0x22>
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	6053      	str	r3, [r2, #4]
 8007eee:	4408      	add	r0, r1
 8007ef0:	6010      	str	r0, [r2, #0]
 8007ef2:	e7da      	b.n	8007eaa <_free_r+0x22>
 8007ef4:	d902      	bls.n	8007efc <_free_r+0x74>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	e7d6      	b.n	8007eaa <_free_r+0x22>
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	1821      	adds	r1, r4, r0
 8007f00:	428b      	cmp	r3, r1
 8007f02:	bf04      	itt	eq
 8007f04:	6819      	ldreq	r1, [r3, #0]
 8007f06:	685b      	ldreq	r3, [r3, #4]
 8007f08:	6063      	str	r3, [r4, #4]
 8007f0a:	bf04      	itt	eq
 8007f0c:	1809      	addeq	r1, r1, r0
 8007f0e:	6021      	streq	r1, [r4, #0]
 8007f10:	6054      	str	r4, [r2, #4]
 8007f12:	e7ca      	b.n	8007eaa <_free_r+0x22>
 8007f14:	bd38      	pop	{r3, r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	24000330 	.word	0x24000330

08007f1c <sbrk_aligned>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f5c <sbrk_aligned+0x40>)
 8007f20:	460c      	mov	r4, r1
 8007f22:	6831      	ldr	r1, [r6, #0]
 8007f24:	4605      	mov	r5, r0
 8007f26:	b911      	cbnz	r1, 8007f2e <sbrk_aligned+0x12>
 8007f28:	f000 fcb4 	bl	8008894 <_sbrk_r>
 8007f2c:	6030      	str	r0, [r6, #0]
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4628      	mov	r0, r5
 8007f32:	f000 fcaf 	bl	8008894 <_sbrk_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	d103      	bne.n	8007f42 <sbrk_aligned+0x26>
 8007f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f3e:	4620      	mov	r0, r4
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
 8007f42:	1cc4      	adds	r4, r0, #3
 8007f44:	f024 0403 	bic.w	r4, r4, #3
 8007f48:	42a0      	cmp	r0, r4
 8007f4a:	d0f8      	beq.n	8007f3e <sbrk_aligned+0x22>
 8007f4c:	1a21      	subs	r1, r4, r0
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 fca0 	bl	8008894 <_sbrk_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d1f2      	bne.n	8007f3e <sbrk_aligned+0x22>
 8007f58:	e7ef      	b.n	8007f3a <sbrk_aligned+0x1e>
 8007f5a:	bf00      	nop
 8007f5c:	2400032c 	.word	0x2400032c

08007f60 <_malloc_r>:
 8007f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f64:	1ccd      	adds	r5, r1, #3
 8007f66:	f025 0503 	bic.w	r5, r5, #3
 8007f6a:	3508      	adds	r5, #8
 8007f6c:	2d0c      	cmp	r5, #12
 8007f6e:	bf38      	it	cc
 8007f70:	250c      	movcc	r5, #12
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	4606      	mov	r6, r0
 8007f76:	db01      	blt.n	8007f7c <_malloc_r+0x1c>
 8007f78:	42a9      	cmp	r1, r5
 8007f7a:	d904      	bls.n	8007f86 <_malloc_r+0x26>
 8007f7c:	230c      	movs	r3, #12
 8007f7e:	6033      	str	r3, [r6, #0]
 8007f80:	2000      	movs	r0, #0
 8007f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800805c <_malloc_r+0xfc>
 8007f8a:	f000 f869 	bl	8008060 <__malloc_lock>
 8007f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f92:	461c      	mov	r4, r3
 8007f94:	bb44      	cbnz	r4, 8007fe8 <_malloc_r+0x88>
 8007f96:	4629      	mov	r1, r5
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff ffbf 	bl	8007f1c <sbrk_aligned>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	d158      	bne.n	8008056 <_malloc_r+0xf6>
 8007fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fa8:	4627      	mov	r7, r4
 8007faa:	2f00      	cmp	r7, #0
 8007fac:	d143      	bne.n	8008036 <_malloc_r+0xd6>
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	d04b      	beq.n	800804a <_malloc_r+0xea>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	eb04 0903 	add.w	r9, r4, r3
 8007fbc:	f000 fc6a 	bl	8008894 <_sbrk_r>
 8007fc0:	4581      	cmp	r9, r0
 8007fc2:	d142      	bne.n	800804a <_malloc_r+0xea>
 8007fc4:	6821      	ldr	r1, [r4, #0]
 8007fc6:	1a6d      	subs	r5, r5, r1
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7ff ffa6 	bl	8007f1c <sbrk_aligned>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d03a      	beq.n	800804a <_malloc_r+0xea>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	442b      	add	r3, r5
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	f8d8 3000 	ldr.w	r3, [r8]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	bb62      	cbnz	r2, 800803c <_malloc_r+0xdc>
 8007fe2:	f8c8 7000 	str.w	r7, [r8]
 8007fe6:	e00f      	b.n	8008008 <_malloc_r+0xa8>
 8007fe8:	6822      	ldr	r2, [r4, #0]
 8007fea:	1b52      	subs	r2, r2, r5
 8007fec:	d420      	bmi.n	8008030 <_malloc_r+0xd0>
 8007fee:	2a0b      	cmp	r2, #11
 8007ff0:	d917      	bls.n	8008022 <_malloc_r+0xc2>
 8007ff2:	1961      	adds	r1, r4, r5
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	6025      	str	r5, [r4, #0]
 8007ff8:	bf18      	it	ne
 8007ffa:	6059      	strne	r1, [r3, #4]
 8007ffc:	6863      	ldr	r3, [r4, #4]
 8007ffe:	bf08      	it	eq
 8008000:	f8c8 1000 	streq.w	r1, [r8]
 8008004:	5162      	str	r2, [r4, r5]
 8008006:	604b      	str	r3, [r1, #4]
 8008008:	4630      	mov	r0, r6
 800800a:	f000 f82f 	bl	800806c <__malloc_unlock>
 800800e:	f104 000b 	add.w	r0, r4, #11
 8008012:	1d23      	adds	r3, r4, #4
 8008014:	f020 0007 	bic.w	r0, r0, #7
 8008018:	1ac2      	subs	r2, r0, r3
 800801a:	bf1c      	itt	ne
 800801c:	1a1b      	subne	r3, r3, r0
 800801e:	50a3      	strne	r3, [r4, r2]
 8008020:	e7af      	b.n	8007f82 <_malloc_r+0x22>
 8008022:	6862      	ldr	r2, [r4, #4]
 8008024:	42a3      	cmp	r3, r4
 8008026:	bf0c      	ite	eq
 8008028:	f8c8 2000 	streq.w	r2, [r8]
 800802c:	605a      	strne	r2, [r3, #4]
 800802e:	e7eb      	b.n	8008008 <_malloc_r+0xa8>
 8008030:	4623      	mov	r3, r4
 8008032:	6864      	ldr	r4, [r4, #4]
 8008034:	e7ae      	b.n	8007f94 <_malloc_r+0x34>
 8008036:	463c      	mov	r4, r7
 8008038:	687f      	ldr	r7, [r7, #4]
 800803a:	e7b6      	b.n	8007faa <_malloc_r+0x4a>
 800803c:	461a      	mov	r2, r3
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	d1fb      	bne.n	800803c <_malloc_r+0xdc>
 8008044:	2300      	movs	r3, #0
 8008046:	6053      	str	r3, [r2, #4]
 8008048:	e7de      	b.n	8008008 <_malloc_r+0xa8>
 800804a:	230c      	movs	r3, #12
 800804c:	6033      	str	r3, [r6, #0]
 800804e:	4630      	mov	r0, r6
 8008050:	f000 f80c 	bl	800806c <__malloc_unlock>
 8008054:	e794      	b.n	8007f80 <_malloc_r+0x20>
 8008056:	6005      	str	r5, [r0, #0]
 8008058:	e7d6      	b.n	8008008 <_malloc_r+0xa8>
 800805a:	bf00      	nop
 800805c:	24000330 	.word	0x24000330

08008060 <__malloc_lock>:
 8008060:	4801      	ldr	r0, [pc, #4]	@ (8008068 <__malloc_lock+0x8>)
 8008062:	f7ff bf0e 	b.w	8007e82 <__retarget_lock_acquire_recursive>
 8008066:	bf00      	nop
 8008068:	24000328 	.word	0x24000328

0800806c <__malloc_unlock>:
 800806c:	4801      	ldr	r0, [pc, #4]	@ (8008074 <__malloc_unlock+0x8>)
 800806e:	f7ff bf09 	b.w	8007e84 <__retarget_lock_release_recursive>
 8008072:	bf00      	nop
 8008074:	24000328 	.word	0x24000328

08008078 <__sfputc_r>:
 8008078:	6893      	ldr	r3, [r2, #8]
 800807a:	3b01      	subs	r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	b410      	push	{r4}
 8008080:	6093      	str	r3, [r2, #8]
 8008082:	da08      	bge.n	8008096 <__sfputc_r+0x1e>
 8008084:	6994      	ldr	r4, [r2, #24]
 8008086:	42a3      	cmp	r3, r4
 8008088:	db01      	blt.n	800808e <__sfputc_r+0x16>
 800808a:	290a      	cmp	r1, #10
 800808c:	d103      	bne.n	8008096 <__sfputc_r+0x1e>
 800808e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008092:	f000 bb6b 	b.w	800876c <__swbuf_r>
 8008096:	6813      	ldr	r3, [r2, #0]
 8008098:	1c58      	adds	r0, r3, #1
 800809a:	6010      	str	r0, [r2, #0]
 800809c:	7019      	strb	r1, [r3, #0]
 800809e:	4608      	mov	r0, r1
 80080a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <__sfputs_r>:
 80080a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a8:	4606      	mov	r6, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	4614      	mov	r4, r2
 80080ae:	18d5      	adds	r5, r2, r3
 80080b0:	42ac      	cmp	r4, r5
 80080b2:	d101      	bne.n	80080b8 <__sfputs_r+0x12>
 80080b4:	2000      	movs	r0, #0
 80080b6:	e007      	b.n	80080c8 <__sfputs_r+0x22>
 80080b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080bc:	463a      	mov	r2, r7
 80080be:	4630      	mov	r0, r6
 80080c0:	f7ff ffda 	bl	8008078 <__sfputc_r>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d1f3      	bne.n	80080b0 <__sfputs_r+0xa>
 80080c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080cc <_vfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	460d      	mov	r5, r1
 80080d2:	b09d      	sub	sp, #116	@ 0x74
 80080d4:	4614      	mov	r4, r2
 80080d6:	4698      	mov	r8, r3
 80080d8:	4606      	mov	r6, r0
 80080da:	b118      	cbz	r0, 80080e4 <_vfiprintf_r+0x18>
 80080dc:	6a03      	ldr	r3, [r0, #32]
 80080de:	b90b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x18>
 80080e0:	f7ff fdca 	bl	8007c78 <__sinit>
 80080e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	d405      	bmi.n	80080f6 <_vfiprintf_r+0x2a>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	059a      	lsls	r2, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_vfiprintf_r+0x2a>
 80080f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080f2:	f7ff fec6 	bl	8007e82 <__retarget_lock_acquire_recursive>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	071b      	lsls	r3, r3, #28
 80080fa:	d501      	bpl.n	8008100 <_vfiprintf_r+0x34>
 80080fc:	692b      	ldr	r3, [r5, #16]
 80080fe:	b99b      	cbnz	r3, 8008128 <_vfiprintf_r+0x5c>
 8008100:	4629      	mov	r1, r5
 8008102:	4630      	mov	r0, r6
 8008104:	f000 fb70 	bl	80087e8 <__swsetup_r>
 8008108:	b170      	cbz	r0, 8008128 <_vfiprintf_r+0x5c>
 800810a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800810c:	07dc      	lsls	r4, r3, #31
 800810e:	d504      	bpl.n	800811a <_vfiprintf_r+0x4e>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	b01d      	add	sp, #116	@ 0x74
 8008116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	0598      	lsls	r0, r3, #22
 800811e:	d4f7      	bmi.n	8008110 <_vfiprintf_r+0x44>
 8008120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008122:	f7ff feaf 	bl	8007e84 <__retarget_lock_release_recursive>
 8008126:	e7f3      	b.n	8008110 <_vfiprintf_r+0x44>
 8008128:	2300      	movs	r3, #0
 800812a:	9309      	str	r3, [sp, #36]	@ 0x24
 800812c:	2320      	movs	r3, #32
 800812e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008132:	f8cd 800c 	str.w	r8, [sp, #12]
 8008136:	2330      	movs	r3, #48	@ 0x30
 8008138:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082e8 <_vfiprintf_r+0x21c>
 800813c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008140:	f04f 0901 	mov.w	r9, #1
 8008144:	4623      	mov	r3, r4
 8008146:	469a      	mov	sl, r3
 8008148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814c:	b10a      	cbz	r2, 8008152 <_vfiprintf_r+0x86>
 800814e:	2a25      	cmp	r2, #37	@ 0x25
 8008150:	d1f9      	bne.n	8008146 <_vfiprintf_r+0x7a>
 8008152:	ebba 0b04 	subs.w	fp, sl, r4
 8008156:	d00b      	beq.n	8008170 <_vfiprintf_r+0xa4>
 8008158:	465b      	mov	r3, fp
 800815a:	4622      	mov	r2, r4
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ffa1 	bl	80080a6 <__sfputs_r>
 8008164:	3001      	adds	r0, #1
 8008166:	f000 80a7 	beq.w	80082b8 <_vfiprintf_r+0x1ec>
 800816a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800816c:	445a      	add	r2, fp
 800816e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008170:	f89a 3000 	ldrb.w	r3, [sl]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 809f 	beq.w	80082b8 <_vfiprintf_r+0x1ec>
 800817a:	2300      	movs	r3, #0
 800817c:	f04f 32ff 	mov.w	r2, #4294967295
 8008180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008184:	f10a 0a01 	add.w	sl, sl, #1
 8008188:	9304      	str	r3, [sp, #16]
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008190:	931a      	str	r3, [sp, #104]	@ 0x68
 8008192:	4654      	mov	r4, sl
 8008194:	2205      	movs	r2, #5
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	4853      	ldr	r0, [pc, #332]	@ (80082e8 <_vfiprintf_r+0x21c>)
 800819c:	f7f8 f8a0 	bl	80002e0 <memchr>
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	b9d8      	cbnz	r0, 80081dc <_vfiprintf_r+0x110>
 80081a4:	06d1      	lsls	r1, r2, #27
 80081a6:	bf44      	itt	mi
 80081a8:	2320      	movmi	r3, #32
 80081aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ae:	0713      	lsls	r3, r2, #28
 80081b0:	bf44      	itt	mi
 80081b2:	232b      	movmi	r3, #43	@ 0x2b
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b8:	f89a 3000 	ldrb.w	r3, [sl]
 80081bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081be:	d015      	beq.n	80081ec <_vfiprintf_r+0x120>
 80081c0:	9a07      	ldr	r2, [sp, #28]
 80081c2:	4654      	mov	r4, sl
 80081c4:	2000      	movs	r0, #0
 80081c6:	f04f 0c0a 	mov.w	ip, #10
 80081ca:	4621      	mov	r1, r4
 80081cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d0:	3b30      	subs	r3, #48	@ 0x30
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	d94b      	bls.n	800826e <_vfiprintf_r+0x1a2>
 80081d6:	b1b0      	cbz	r0, 8008206 <_vfiprintf_r+0x13a>
 80081d8:	9207      	str	r2, [sp, #28]
 80081da:	e014      	b.n	8008206 <_vfiprintf_r+0x13a>
 80081dc:	eba0 0308 	sub.w	r3, r0, r8
 80081e0:	fa09 f303 	lsl.w	r3, r9, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	46a2      	mov	sl, r4
 80081ea:	e7d2      	b.n	8008192 <_vfiprintf_r+0xc6>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1d19      	adds	r1, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9103      	str	r1, [sp, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbb      	ittet	lt
 80081f8:	425b      	neglt	r3, r3
 80081fa:	f042 0202 	orrlt.w	r2, r2, #2
 80081fe:	9307      	strge	r3, [sp, #28]
 8008200:	9307      	strlt	r3, [sp, #28]
 8008202:	bfb8      	it	lt
 8008204:	9204      	strlt	r2, [sp, #16]
 8008206:	7823      	ldrb	r3, [r4, #0]
 8008208:	2b2e      	cmp	r3, #46	@ 0x2e
 800820a:	d10a      	bne.n	8008222 <_vfiprintf_r+0x156>
 800820c:	7863      	ldrb	r3, [r4, #1]
 800820e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008210:	d132      	bne.n	8008278 <_vfiprintf_r+0x1ac>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9203      	str	r2, [sp, #12]
 800821a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800821e:	3402      	adds	r4, #2
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082f8 <_vfiprintf_r+0x22c>
 8008226:	7821      	ldrb	r1, [r4, #0]
 8008228:	2203      	movs	r2, #3
 800822a:	4650      	mov	r0, sl
 800822c:	f7f8 f858 	bl	80002e0 <memchr>
 8008230:	b138      	cbz	r0, 8008242 <_vfiprintf_r+0x176>
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	eba0 000a 	sub.w	r0, r0, sl
 8008238:	2240      	movs	r2, #64	@ 0x40
 800823a:	4082      	lsls	r2, r0
 800823c:	4313      	orrs	r3, r2
 800823e:	3401      	adds	r4, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008246:	4829      	ldr	r0, [pc, #164]	@ (80082ec <_vfiprintf_r+0x220>)
 8008248:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800824c:	2206      	movs	r2, #6
 800824e:	f7f8 f847 	bl	80002e0 <memchr>
 8008252:	2800      	cmp	r0, #0
 8008254:	d03f      	beq.n	80082d6 <_vfiprintf_r+0x20a>
 8008256:	4b26      	ldr	r3, [pc, #152]	@ (80082f0 <_vfiprintf_r+0x224>)
 8008258:	bb1b      	cbnz	r3, 80082a2 <_vfiprintf_r+0x1d6>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	3307      	adds	r3, #7
 800825e:	f023 0307 	bic.w	r3, r3, #7
 8008262:	3308      	adds	r3, #8
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008268:	443b      	add	r3, r7
 800826a:	9309      	str	r3, [sp, #36]	@ 0x24
 800826c:	e76a      	b.n	8008144 <_vfiprintf_r+0x78>
 800826e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008272:	460c      	mov	r4, r1
 8008274:	2001      	movs	r0, #1
 8008276:	e7a8      	b.n	80081ca <_vfiprintf_r+0xfe>
 8008278:	2300      	movs	r3, #0
 800827a:	3401      	adds	r4, #1
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	4619      	mov	r1, r3
 8008280:	f04f 0c0a 	mov.w	ip, #10
 8008284:	4620      	mov	r0, r4
 8008286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828a:	3a30      	subs	r2, #48	@ 0x30
 800828c:	2a09      	cmp	r2, #9
 800828e:	d903      	bls.n	8008298 <_vfiprintf_r+0x1cc>
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0c6      	beq.n	8008222 <_vfiprintf_r+0x156>
 8008294:	9105      	str	r1, [sp, #20]
 8008296:	e7c4      	b.n	8008222 <_vfiprintf_r+0x156>
 8008298:	fb0c 2101 	mla	r1, ip, r1, r2
 800829c:	4604      	mov	r4, r0
 800829e:	2301      	movs	r3, #1
 80082a0:	e7f0      	b.n	8008284 <_vfiprintf_r+0x1b8>
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4b12      	ldr	r3, [pc, #72]	@ (80082f4 <_vfiprintf_r+0x228>)
 80082aa:	a904      	add	r1, sp, #16
 80082ac:	4630      	mov	r0, r6
 80082ae:	f3af 8000 	nop.w
 80082b2:	4607      	mov	r7, r0
 80082b4:	1c78      	adds	r0, r7, #1
 80082b6:	d1d6      	bne.n	8008266 <_vfiprintf_r+0x19a>
 80082b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ba:	07d9      	lsls	r1, r3, #31
 80082bc:	d405      	bmi.n	80082ca <_vfiprintf_r+0x1fe>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	059a      	lsls	r2, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_vfiprintf_r+0x1fe>
 80082c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082c6:	f7ff fddd 	bl	8007e84 <__retarget_lock_release_recursive>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	065b      	lsls	r3, r3, #25
 80082ce:	f53f af1f 	bmi.w	8008110 <_vfiprintf_r+0x44>
 80082d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082d4:	e71e      	b.n	8008114 <_vfiprintf_r+0x48>
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <_vfiprintf_r+0x228>)
 80082de:	a904      	add	r1, sp, #16
 80082e0:	4630      	mov	r0, r6
 80082e2:	f000 f879 	bl	80083d8 <_printf_i>
 80082e6:	e7e4      	b.n	80082b2 <_vfiprintf_r+0x1e6>
 80082e8:	0800a3bc 	.word	0x0800a3bc
 80082ec:	0800a3c6 	.word	0x0800a3c6
 80082f0:	00000000 	.word	0x00000000
 80082f4:	080080a7 	.word	0x080080a7
 80082f8:	0800a3c2 	.word	0x0800a3c2

080082fc <_printf_common>:
 80082fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008300:	4616      	mov	r6, r2
 8008302:	4698      	mov	r8, r3
 8008304:	688a      	ldr	r2, [r1, #8]
 8008306:	690b      	ldr	r3, [r1, #16]
 8008308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800830c:	4293      	cmp	r3, r2
 800830e:	bfb8      	it	lt
 8008310:	4613      	movlt	r3, r2
 8008312:	6033      	str	r3, [r6, #0]
 8008314:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008318:	4607      	mov	r7, r0
 800831a:	460c      	mov	r4, r1
 800831c:	b10a      	cbz	r2, 8008322 <_printf_common+0x26>
 800831e:	3301      	adds	r3, #1
 8008320:	6033      	str	r3, [r6, #0]
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	0699      	lsls	r1, r3, #26
 8008326:	bf42      	ittt	mi
 8008328:	6833      	ldrmi	r3, [r6, #0]
 800832a:	3302      	addmi	r3, #2
 800832c:	6033      	strmi	r3, [r6, #0]
 800832e:	6825      	ldr	r5, [r4, #0]
 8008330:	f015 0506 	ands.w	r5, r5, #6
 8008334:	d106      	bne.n	8008344 <_printf_common+0x48>
 8008336:	f104 0a19 	add.w	sl, r4, #25
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	6832      	ldr	r2, [r6, #0]
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	42ab      	cmp	r3, r5
 8008342:	dc26      	bgt.n	8008392 <_printf_common+0x96>
 8008344:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008348:	6822      	ldr	r2, [r4, #0]
 800834a:	3b00      	subs	r3, #0
 800834c:	bf18      	it	ne
 800834e:	2301      	movne	r3, #1
 8008350:	0692      	lsls	r2, r2, #26
 8008352:	d42b      	bmi.n	80083ac <_printf_common+0xb0>
 8008354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008358:	4641      	mov	r1, r8
 800835a:	4638      	mov	r0, r7
 800835c:	47c8      	blx	r9
 800835e:	3001      	adds	r0, #1
 8008360:	d01e      	beq.n	80083a0 <_printf_common+0xa4>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	f003 0306 	and.w	r3, r3, #6
 800836a:	2b04      	cmp	r3, #4
 800836c:	bf02      	ittt	eq
 800836e:	68e5      	ldreq	r5, [r4, #12]
 8008370:	6833      	ldreq	r3, [r6, #0]
 8008372:	1aed      	subeq	r5, r5, r3
 8008374:	68a3      	ldr	r3, [r4, #8]
 8008376:	bf0c      	ite	eq
 8008378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800837c:	2500      	movne	r5, #0
 800837e:	4293      	cmp	r3, r2
 8008380:	bfc4      	itt	gt
 8008382:	1a9b      	subgt	r3, r3, r2
 8008384:	18ed      	addgt	r5, r5, r3
 8008386:	2600      	movs	r6, #0
 8008388:	341a      	adds	r4, #26
 800838a:	42b5      	cmp	r5, r6
 800838c:	d11a      	bne.n	80083c4 <_printf_common+0xc8>
 800838e:	2000      	movs	r0, #0
 8008390:	e008      	b.n	80083a4 <_printf_common+0xa8>
 8008392:	2301      	movs	r3, #1
 8008394:	4652      	mov	r2, sl
 8008396:	4641      	mov	r1, r8
 8008398:	4638      	mov	r0, r7
 800839a:	47c8      	blx	r9
 800839c:	3001      	adds	r0, #1
 800839e:	d103      	bne.n	80083a8 <_printf_common+0xac>
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a8:	3501      	adds	r5, #1
 80083aa:	e7c6      	b.n	800833a <_printf_common+0x3e>
 80083ac:	18e1      	adds	r1, r4, r3
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	2030      	movs	r0, #48	@ 0x30
 80083b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083b6:	4422      	add	r2, r4
 80083b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083c0:	3302      	adds	r3, #2
 80083c2:	e7c7      	b.n	8008354 <_printf_common+0x58>
 80083c4:	2301      	movs	r3, #1
 80083c6:	4622      	mov	r2, r4
 80083c8:	4641      	mov	r1, r8
 80083ca:	4638      	mov	r0, r7
 80083cc:	47c8      	blx	r9
 80083ce:	3001      	adds	r0, #1
 80083d0:	d0e6      	beq.n	80083a0 <_printf_common+0xa4>
 80083d2:	3601      	adds	r6, #1
 80083d4:	e7d9      	b.n	800838a <_printf_common+0x8e>
	...

080083d8 <_printf_i>:
 80083d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	7e0f      	ldrb	r7, [r1, #24]
 80083de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083e0:	2f78      	cmp	r7, #120	@ 0x78
 80083e2:	4691      	mov	r9, r2
 80083e4:	4680      	mov	r8, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	469a      	mov	sl, r3
 80083ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083ee:	d807      	bhi.n	8008400 <_printf_i+0x28>
 80083f0:	2f62      	cmp	r7, #98	@ 0x62
 80083f2:	d80a      	bhi.n	800840a <_printf_i+0x32>
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	f000 80d1 	beq.w	800859c <_printf_i+0x1c4>
 80083fa:	2f58      	cmp	r7, #88	@ 0x58
 80083fc:	f000 80b8 	beq.w	8008570 <_printf_i+0x198>
 8008400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008408:	e03a      	b.n	8008480 <_printf_i+0xa8>
 800840a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800840e:	2b15      	cmp	r3, #21
 8008410:	d8f6      	bhi.n	8008400 <_printf_i+0x28>
 8008412:	a101      	add	r1, pc, #4	@ (adr r1, 8008418 <_printf_i+0x40>)
 8008414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008418:	08008471 	.word	0x08008471
 800841c:	08008485 	.word	0x08008485
 8008420:	08008401 	.word	0x08008401
 8008424:	08008401 	.word	0x08008401
 8008428:	08008401 	.word	0x08008401
 800842c:	08008401 	.word	0x08008401
 8008430:	08008485 	.word	0x08008485
 8008434:	08008401 	.word	0x08008401
 8008438:	08008401 	.word	0x08008401
 800843c:	08008401 	.word	0x08008401
 8008440:	08008401 	.word	0x08008401
 8008444:	08008583 	.word	0x08008583
 8008448:	080084af 	.word	0x080084af
 800844c:	0800853d 	.word	0x0800853d
 8008450:	08008401 	.word	0x08008401
 8008454:	08008401 	.word	0x08008401
 8008458:	080085a5 	.word	0x080085a5
 800845c:	08008401 	.word	0x08008401
 8008460:	080084af 	.word	0x080084af
 8008464:	08008401 	.word	0x08008401
 8008468:	08008401 	.word	0x08008401
 800846c:	08008545 	.word	0x08008545
 8008470:	6833      	ldr	r3, [r6, #0]
 8008472:	1d1a      	adds	r2, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6032      	str	r2, [r6, #0]
 8008478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800847c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008480:	2301      	movs	r3, #1
 8008482:	e09c      	b.n	80085be <_printf_i+0x1e6>
 8008484:	6833      	ldr	r3, [r6, #0]
 8008486:	6820      	ldr	r0, [r4, #0]
 8008488:	1d19      	adds	r1, r3, #4
 800848a:	6031      	str	r1, [r6, #0]
 800848c:	0606      	lsls	r6, r0, #24
 800848e:	d501      	bpl.n	8008494 <_printf_i+0xbc>
 8008490:	681d      	ldr	r5, [r3, #0]
 8008492:	e003      	b.n	800849c <_printf_i+0xc4>
 8008494:	0645      	lsls	r5, r0, #25
 8008496:	d5fb      	bpl.n	8008490 <_printf_i+0xb8>
 8008498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800849c:	2d00      	cmp	r5, #0
 800849e:	da03      	bge.n	80084a8 <_printf_i+0xd0>
 80084a0:	232d      	movs	r3, #45	@ 0x2d
 80084a2:	426d      	negs	r5, r5
 80084a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084a8:	4858      	ldr	r0, [pc, #352]	@ (800860c <_printf_i+0x234>)
 80084aa:	230a      	movs	r3, #10
 80084ac:	e011      	b.n	80084d2 <_printf_i+0xfa>
 80084ae:	6821      	ldr	r1, [r4, #0]
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	0608      	lsls	r0, r1, #24
 80084b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80084b8:	d402      	bmi.n	80084c0 <_printf_i+0xe8>
 80084ba:	0649      	lsls	r1, r1, #25
 80084bc:	bf48      	it	mi
 80084be:	b2ad      	uxthmi	r5, r5
 80084c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80084c2:	4852      	ldr	r0, [pc, #328]	@ (800860c <_printf_i+0x234>)
 80084c4:	6033      	str	r3, [r6, #0]
 80084c6:	bf14      	ite	ne
 80084c8:	230a      	movne	r3, #10
 80084ca:	2308      	moveq	r3, #8
 80084cc:	2100      	movs	r1, #0
 80084ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084d2:	6866      	ldr	r6, [r4, #4]
 80084d4:	60a6      	str	r6, [r4, #8]
 80084d6:	2e00      	cmp	r6, #0
 80084d8:	db05      	blt.n	80084e6 <_printf_i+0x10e>
 80084da:	6821      	ldr	r1, [r4, #0]
 80084dc:	432e      	orrs	r6, r5
 80084de:	f021 0104 	bic.w	r1, r1, #4
 80084e2:	6021      	str	r1, [r4, #0]
 80084e4:	d04b      	beq.n	800857e <_printf_i+0x1a6>
 80084e6:	4616      	mov	r6, r2
 80084e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80084ec:	fb03 5711 	mls	r7, r3, r1, r5
 80084f0:	5dc7      	ldrb	r7, [r0, r7]
 80084f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084f6:	462f      	mov	r7, r5
 80084f8:	42bb      	cmp	r3, r7
 80084fa:	460d      	mov	r5, r1
 80084fc:	d9f4      	bls.n	80084e8 <_printf_i+0x110>
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d10b      	bne.n	800851a <_printf_i+0x142>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	07df      	lsls	r7, r3, #31
 8008506:	d508      	bpl.n	800851a <_printf_i+0x142>
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	6861      	ldr	r1, [r4, #4]
 800850c:	4299      	cmp	r1, r3
 800850e:	bfde      	ittt	le
 8008510:	2330      	movle	r3, #48	@ 0x30
 8008512:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008516:	f106 36ff 	addle.w	r6, r6, #4294967295
 800851a:	1b92      	subs	r2, r2, r6
 800851c:	6122      	str	r2, [r4, #16]
 800851e:	f8cd a000 	str.w	sl, [sp]
 8008522:	464b      	mov	r3, r9
 8008524:	aa03      	add	r2, sp, #12
 8008526:	4621      	mov	r1, r4
 8008528:	4640      	mov	r0, r8
 800852a:	f7ff fee7 	bl	80082fc <_printf_common>
 800852e:	3001      	adds	r0, #1
 8008530:	d14a      	bne.n	80085c8 <_printf_i+0x1f0>
 8008532:	f04f 30ff 	mov.w	r0, #4294967295
 8008536:	b004      	add	sp, #16
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	f043 0320 	orr.w	r3, r3, #32
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	4832      	ldr	r0, [pc, #200]	@ (8008610 <_printf_i+0x238>)
 8008546:	2778      	movs	r7, #120	@ 0x78
 8008548:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	6831      	ldr	r1, [r6, #0]
 8008550:	061f      	lsls	r7, r3, #24
 8008552:	f851 5b04 	ldr.w	r5, [r1], #4
 8008556:	d402      	bmi.n	800855e <_printf_i+0x186>
 8008558:	065f      	lsls	r7, r3, #25
 800855a:	bf48      	it	mi
 800855c:	b2ad      	uxthmi	r5, r5
 800855e:	6031      	str	r1, [r6, #0]
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	bf44      	itt	mi
 8008564:	f043 0320 	orrmi.w	r3, r3, #32
 8008568:	6023      	strmi	r3, [r4, #0]
 800856a:	b11d      	cbz	r5, 8008574 <_printf_i+0x19c>
 800856c:	2310      	movs	r3, #16
 800856e:	e7ad      	b.n	80084cc <_printf_i+0xf4>
 8008570:	4826      	ldr	r0, [pc, #152]	@ (800860c <_printf_i+0x234>)
 8008572:	e7e9      	b.n	8008548 <_printf_i+0x170>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	f023 0320 	bic.w	r3, r3, #32
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	e7f6      	b.n	800856c <_printf_i+0x194>
 800857e:	4616      	mov	r6, r2
 8008580:	e7bd      	b.n	80084fe <_printf_i+0x126>
 8008582:	6833      	ldr	r3, [r6, #0]
 8008584:	6825      	ldr	r5, [r4, #0]
 8008586:	6961      	ldr	r1, [r4, #20]
 8008588:	1d18      	adds	r0, r3, #4
 800858a:	6030      	str	r0, [r6, #0]
 800858c:	062e      	lsls	r6, r5, #24
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	d501      	bpl.n	8008596 <_printf_i+0x1be>
 8008592:	6019      	str	r1, [r3, #0]
 8008594:	e002      	b.n	800859c <_printf_i+0x1c4>
 8008596:	0668      	lsls	r0, r5, #25
 8008598:	d5fb      	bpl.n	8008592 <_printf_i+0x1ba>
 800859a:	8019      	strh	r1, [r3, #0]
 800859c:	2300      	movs	r3, #0
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	4616      	mov	r6, r2
 80085a2:	e7bc      	b.n	800851e <_printf_i+0x146>
 80085a4:	6833      	ldr	r3, [r6, #0]
 80085a6:	1d1a      	adds	r2, r3, #4
 80085a8:	6032      	str	r2, [r6, #0]
 80085aa:	681e      	ldr	r6, [r3, #0]
 80085ac:	6862      	ldr	r2, [r4, #4]
 80085ae:	2100      	movs	r1, #0
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7f7 fe95 	bl	80002e0 <memchr>
 80085b6:	b108      	cbz	r0, 80085bc <_printf_i+0x1e4>
 80085b8:	1b80      	subs	r0, r0, r6
 80085ba:	6060      	str	r0, [r4, #4]
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	2300      	movs	r3, #0
 80085c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c6:	e7aa      	b.n	800851e <_printf_i+0x146>
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	4632      	mov	r2, r6
 80085cc:	4649      	mov	r1, r9
 80085ce:	4640      	mov	r0, r8
 80085d0:	47d0      	blx	sl
 80085d2:	3001      	adds	r0, #1
 80085d4:	d0ad      	beq.n	8008532 <_printf_i+0x15a>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	079b      	lsls	r3, r3, #30
 80085da:	d413      	bmi.n	8008604 <_printf_i+0x22c>
 80085dc:	68e0      	ldr	r0, [r4, #12]
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	4298      	cmp	r0, r3
 80085e2:	bfb8      	it	lt
 80085e4:	4618      	movlt	r0, r3
 80085e6:	e7a6      	b.n	8008536 <_printf_i+0x15e>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4632      	mov	r2, r6
 80085ec:	4649      	mov	r1, r9
 80085ee:	4640      	mov	r0, r8
 80085f0:	47d0      	blx	sl
 80085f2:	3001      	adds	r0, #1
 80085f4:	d09d      	beq.n	8008532 <_printf_i+0x15a>
 80085f6:	3501      	adds	r5, #1
 80085f8:	68e3      	ldr	r3, [r4, #12]
 80085fa:	9903      	ldr	r1, [sp, #12]
 80085fc:	1a5b      	subs	r3, r3, r1
 80085fe:	42ab      	cmp	r3, r5
 8008600:	dcf2      	bgt.n	80085e8 <_printf_i+0x210>
 8008602:	e7eb      	b.n	80085dc <_printf_i+0x204>
 8008604:	2500      	movs	r5, #0
 8008606:	f104 0619 	add.w	r6, r4, #25
 800860a:	e7f5      	b.n	80085f8 <_printf_i+0x220>
 800860c:	0800a3cd 	.word	0x0800a3cd
 8008610:	0800a3de 	.word	0x0800a3de

08008614 <__sflush_r>:
 8008614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	0716      	lsls	r6, r2, #28
 800861e:	4605      	mov	r5, r0
 8008620:	460c      	mov	r4, r1
 8008622:	d454      	bmi.n	80086ce <__sflush_r+0xba>
 8008624:	684b      	ldr	r3, [r1, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	dc02      	bgt.n	8008630 <__sflush_r+0x1c>
 800862a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	dd48      	ble.n	80086c2 <__sflush_r+0xae>
 8008630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008632:	2e00      	cmp	r6, #0
 8008634:	d045      	beq.n	80086c2 <__sflush_r+0xae>
 8008636:	2300      	movs	r3, #0
 8008638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800863c:	682f      	ldr	r7, [r5, #0]
 800863e:	6a21      	ldr	r1, [r4, #32]
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	d030      	beq.n	80086a6 <__sflush_r+0x92>
 8008644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	0759      	lsls	r1, r3, #29
 800864a:	d505      	bpl.n	8008658 <__sflush_r+0x44>
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008652:	b10b      	cbz	r3, 8008658 <__sflush_r+0x44>
 8008654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008656:	1ad2      	subs	r2, r2, r3
 8008658:	2300      	movs	r3, #0
 800865a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800865c:	6a21      	ldr	r1, [r4, #32]
 800865e:	4628      	mov	r0, r5
 8008660:	47b0      	blx	r6
 8008662:	1c43      	adds	r3, r0, #1
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	d106      	bne.n	8008676 <__sflush_r+0x62>
 8008668:	6829      	ldr	r1, [r5, #0]
 800866a:	291d      	cmp	r1, #29
 800866c:	d82b      	bhi.n	80086c6 <__sflush_r+0xb2>
 800866e:	4a2a      	ldr	r2, [pc, #168]	@ (8008718 <__sflush_r+0x104>)
 8008670:	40ca      	lsrs	r2, r1
 8008672:	07d6      	lsls	r6, r2, #31
 8008674:	d527      	bpl.n	80086c6 <__sflush_r+0xb2>
 8008676:	2200      	movs	r2, #0
 8008678:	6062      	str	r2, [r4, #4]
 800867a:	04d9      	lsls	r1, r3, #19
 800867c:	6922      	ldr	r2, [r4, #16]
 800867e:	6022      	str	r2, [r4, #0]
 8008680:	d504      	bpl.n	800868c <__sflush_r+0x78>
 8008682:	1c42      	adds	r2, r0, #1
 8008684:	d101      	bne.n	800868a <__sflush_r+0x76>
 8008686:	682b      	ldr	r3, [r5, #0]
 8008688:	b903      	cbnz	r3, 800868c <__sflush_r+0x78>
 800868a:	6560      	str	r0, [r4, #84]	@ 0x54
 800868c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800868e:	602f      	str	r7, [r5, #0]
 8008690:	b1b9      	cbz	r1, 80086c2 <__sflush_r+0xae>
 8008692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008696:	4299      	cmp	r1, r3
 8008698:	d002      	beq.n	80086a0 <__sflush_r+0x8c>
 800869a:	4628      	mov	r0, r5
 800869c:	f7ff fbf4 	bl	8007e88 <_free_r>
 80086a0:	2300      	movs	r3, #0
 80086a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80086a4:	e00d      	b.n	80086c2 <__sflush_r+0xae>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b0      	blx	r6
 80086ac:	4602      	mov	r2, r0
 80086ae:	1c50      	adds	r0, r2, #1
 80086b0:	d1c9      	bne.n	8008646 <__sflush_r+0x32>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0c6      	beq.n	8008646 <__sflush_r+0x32>
 80086b8:	2b1d      	cmp	r3, #29
 80086ba:	d001      	beq.n	80086c0 <__sflush_r+0xac>
 80086bc:	2b16      	cmp	r3, #22
 80086be:	d11e      	bne.n	80086fe <__sflush_r+0xea>
 80086c0:	602f      	str	r7, [r5, #0]
 80086c2:	2000      	movs	r0, #0
 80086c4:	e022      	b.n	800870c <__sflush_r+0xf8>
 80086c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ca:	b21b      	sxth	r3, r3
 80086cc:	e01b      	b.n	8008706 <__sflush_r+0xf2>
 80086ce:	690f      	ldr	r7, [r1, #16]
 80086d0:	2f00      	cmp	r7, #0
 80086d2:	d0f6      	beq.n	80086c2 <__sflush_r+0xae>
 80086d4:	0793      	lsls	r3, r2, #30
 80086d6:	680e      	ldr	r6, [r1, #0]
 80086d8:	bf08      	it	eq
 80086da:	694b      	ldreq	r3, [r1, #20]
 80086dc:	600f      	str	r7, [r1, #0]
 80086de:	bf18      	it	ne
 80086e0:	2300      	movne	r3, #0
 80086e2:	eba6 0807 	sub.w	r8, r6, r7
 80086e6:	608b      	str	r3, [r1, #8]
 80086e8:	f1b8 0f00 	cmp.w	r8, #0
 80086ec:	dde9      	ble.n	80086c2 <__sflush_r+0xae>
 80086ee:	6a21      	ldr	r1, [r4, #32]
 80086f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086f2:	4643      	mov	r3, r8
 80086f4:	463a      	mov	r2, r7
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b0      	blx	r6
 80086fa:	2800      	cmp	r0, #0
 80086fc:	dc08      	bgt.n	8008710 <__sflush_r+0xfc>
 80086fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008710:	4407      	add	r7, r0
 8008712:	eba8 0800 	sub.w	r8, r8, r0
 8008716:	e7e7      	b.n	80086e8 <__sflush_r+0xd4>
 8008718:	20400001 	.word	0x20400001

0800871c <_fflush_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	690b      	ldr	r3, [r1, #16]
 8008720:	4605      	mov	r5, r0
 8008722:	460c      	mov	r4, r1
 8008724:	b913      	cbnz	r3, 800872c <_fflush_r+0x10>
 8008726:	2500      	movs	r5, #0
 8008728:	4628      	mov	r0, r5
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	b118      	cbz	r0, 8008736 <_fflush_r+0x1a>
 800872e:	6a03      	ldr	r3, [r0, #32]
 8008730:	b90b      	cbnz	r3, 8008736 <_fflush_r+0x1a>
 8008732:	f7ff faa1 	bl	8007c78 <__sinit>
 8008736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0f3      	beq.n	8008726 <_fflush_r+0xa>
 800873e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008740:	07d0      	lsls	r0, r2, #31
 8008742:	d404      	bmi.n	800874e <_fflush_r+0x32>
 8008744:	0599      	lsls	r1, r3, #22
 8008746:	d402      	bmi.n	800874e <_fflush_r+0x32>
 8008748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800874a:	f7ff fb9a 	bl	8007e82 <__retarget_lock_acquire_recursive>
 800874e:	4628      	mov	r0, r5
 8008750:	4621      	mov	r1, r4
 8008752:	f7ff ff5f 	bl	8008614 <__sflush_r>
 8008756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008758:	07da      	lsls	r2, r3, #31
 800875a:	4605      	mov	r5, r0
 800875c:	d4e4      	bmi.n	8008728 <_fflush_r+0xc>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	059b      	lsls	r3, r3, #22
 8008762:	d4e1      	bmi.n	8008728 <_fflush_r+0xc>
 8008764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008766:	f7ff fb8d 	bl	8007e84 <__retarget_lock_release_recursive>
 800876a:	e7dd      	b.n	8008728 <_fflush_r+0xc>

0800876c <__swbuf_r>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	460e      	mov	r6, r1
 8008770:	4614      	mov	r4, r2
 8008772:	4605      	mov	r5, r0
 8008774:	b118      	cbz	r0, 800877e <__swbuf_r+0x12>
 8008776:	6a03      	ldr	r3, [r0, #32]
 8008778:	b90b      	cbnz	r3, 800877e <__swbuf_r+0x12>
 800877a:	f7ff fa7d 	bl	8007c78 <__sinit>
 800877e:	69a3      	ldr	r3, [r4, #24]
 8008780:	60a3      	str	r3, [r4, #8]
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	071a      	lsls	r2, r3, #28
 8008786:	d501      	bpl.n	800878c <__swbuf_r+0x20>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	b943      	cbnz	r3, 800879e <__swbuf_r+0x32>
 800878c:	4621      	mov	r1, r4
 800878e:	4628      	mov	r0, r5
 8008790:	f000 f82a 	bl	80087e8 <__swsetup_r>
 8008794:	b118      	cbz	r0, 800879e <__swbuf_r+0x32>
 8008796:	f04f 37ff 	mov.w	r7, #4294967295
 800879a:	4638      	mov	r0, r7
 800879c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	6922      	ldr	r2, [r4, #16]
 80087a2:	1a98      	subs	r0, r3, r2
 80087a4:	6963      	ldr	r3, [r4, #20]
 80087a6:	b2f6      	uxtb	r6, r6
 80087a8:	4283      	cmp	r3, r0
 80087aa:	4637      	mov	r7, r6
 80087ac:	dc05      	bgt.n	80087ba <__swbuf_r+0x4e>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4628      	mov	r0, r5
 80087b2:	f7ff ffb3 	bl	800871c <_fflush_r>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d1ed      	bne.n	8008796 <__swbuf_r+0x2a>
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	3b01      	subs	r3, #1
 80087be:	60a3      	str	r3, [r4, #8]
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	6022      	str	r2, [r4, #0]
 80087c6:	701e      	strb	r6, [r3, #0]
 80087c8:	6962      	ldr	r2, [r4, #20]
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d004      	beq.n	80087da <__swbuf_r+0x6e>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	07db      	lsls	r3, r3, #31
 80087d4:	d5e1      	bpl.n	800879a <__swbuf_r+0x2e>
 80087d6:	2e0a      	cmp	r6, #10
 80087d8:	d1df      	bne.n	800879a <__swbuf_r+0x2e>
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f7ff ff9d 	bl	800871c <_fflush_r>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d0d9      	beq.n	800879a <__swbuf_r+0x2e>
 80087e6:	e7d6      	b.n	8008796 <__swbuf_r+0x2a>

080087e8 <__swsetup_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4b29      	ldr	r3, [pc, #164]	@ (8008890 <__swsetup_r+0xa8>)
 80087ec:	4605      	mov	r5, r0
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	460c      	mov	r4, r1
 80087f2:	b118      	cbz	r0, 80087fc <__swsetup_r+0x14>
 80087f4:	6a03      	ldr	r3, [r0, #32]
 80087f6:	b90b      	cbnz	r3, 80087fc <__swsetup_r+0x14>
 80087f8:	f7ff fa3e 	bl	8007c78 <__sinit>
 80087fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008800:	0719      	lsls	r1, r3, #28
 8008802:	d422      	bmi.n	800884a <__swsetup_r+0x62>
 8008804:	06da      	lsls	r2, r3, #27
 8008806:	d407      	bmi.n	8008818 <__swsetup_r+0x30>
 8008808:	2209      	movs	r2, #9
 800880a:	602a      	str	r2, [r5, #0]
 800880c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	f04f 30ff 	mov.w	r0, #4294967295
 8008816:	e033      	b.n	8008880 <__swsetup_r+0x98>
 8008818:	0758      	lsls	r0, r3, #29
 800881a:	d512      	bpl.n	8008842 <__swsetup_r+0x5a>
 800881c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800881e:	b141      	cbz	r1, 8008832 <__swsetup_r+0x4a>
 8008820:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008824:	4299      	cmp	r1, r3
 8008826:	d002      	beq.n	800882e <__swsetup_r+0x46>
 8008828:	4628      	mov	r0, r5
 800882a:	f7ff fb2d 	bl	8007e88 <_free_r>
 800882e:	2300      	movs	r3, #0
 8008830:	6363      	str	r3, [r4, #52]	@ 0x34
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	2300      	movs	r3, #0
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f043 0308 	orr.w	r3, r3, #8
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	b94b      	cbnz	r3, 8008862 <__swsetup_r+0x7a>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008858:	d003      	beq.n	8008862 <__swsetup_r+0x7a>
 800885a:	4621      	mov	r1, r4
 800885c:	4628      	mov	r0, r5
 800885e:	f000 f84f 	bl	8008900 <__smakebuf_r>
 8008862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008866:	f013 0201 	ands.w	r2, r3, #1
 800886a:	d00a      	beq.n	8008882 <__swsetup_r+0x9a>
 800886c:	2200      	movs	r2, #0
 800886e:	60a2      	str	r2, [r4, #8]
 8008870:	6962      	ldr	r2, [r4, #20]
 8008872:	4252      	negs	r2, r2
 8008874:	61a2      	str	r2, [r4, #24]
 8008876:	6922      	ldr	r2, [r4, #16]
 8008878:	b942      	cbnz	r2, 800888c <__swsetup_r+0xa4>
 800887a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800887e:	d1c5      	bne.n	800880c <__swsetup_r+0x24>
 8008880:	bd38      	pop	{r3, r4, r5, pc}
 8008882:	0799      	lsls	r1, r3, #30
 8008884:	bf58      	it	pl
 8008886:	6962      	ldrpl	r2, [r4, #20]
 8008888:	60a2      	str	r2, [r4, #8]
 800888a:	e7f4      	b.n	8008876 <__swsetup_r+0x8e>
 800888c:	2000      	movs	r0, #0
 800888e:	e7f7      	b.n	8008880 <__swsetup_r+0x98>
 8008890:	24000038 	.word	0x24000038

08008894 <_sbrk_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d06      	ldr	r5, [pc, #24]	@ (80088b0 <_sbrk_r+0x1c>)
 8008898:	2300      	movs	r3, #0
 800889a:	4604      	mov	r4, r0
 800889c:	4608      	mov	r0, r1
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	f7f8 fee2 	bl	8001668 <_sbrk>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_sbrk_r+0x1a>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_sbrk_r+0x1a>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	24000324 	.word	0x24000324

080088b4 <__swhatbuf_r>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	2900      	cmp	r1, #0
 80088be:	b096      	sub	sp, #88	@ 0x58
 80088c0:	4615      	mov	r5, r2
 80088c2:	461e      	mov	r6, r3
 80088c4:	da0d      	bge.n	80088e2 <__swhatbuf_r+0x2e>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088cc:	f04f 0100 	mov.w	r1, #0
 80088d0:	bf14      	ite	ne
 80088d2:	2340      	movne	r3, #64	@ 0x40
 80088d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088d8:	2000      	movs	r0, #0
 80088da:	6031      	str	r1, [r6, #0]
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	b016      	add	sp, #88	@ 0x58
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	466a      	mov	r2, sp
 80088e4:	f000 f848 	bl	8008978 <_fstat_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	dbec      	blt.n	80088c6 <__swhatbuf_r+0x12>
 80088ec:	9901      	ldr	r1, [sp, #4]
 80088ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088f6:	4259      	negs	r1, r3
 80088f8:	4159      	adcs	r1, r3
 80088fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088fe:	e7eb      	b.n	80088d8 <__swhatbuf_r+0x24>

08008900 <__smakebuf_r>:
 8008900:	898b      	ldrh	r3, [r1, #12]
 8008902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008904:	079d      	lsls	r5, r3, #30
 8008906:	4606      	mov	r6, r0
 8008908:	460c      	mov	r4, r1
 800890a:	d507      	bpl.n	800891c <__smakebuf_r+0x1c>
 800890c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	2301      	movs	r3, #1
 8008916:	6163      	str	r3, [r4, #20]
 8008918:	b003      	add	sp, #12
 800891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800891c:	ab01      	add	r3, sp, #4
 800891e:	466a      	mov	r2, sp
 8008920:	f7ff ffc8 	bl	80088b4 <__swhatbuf_r>
 8008924:	9f00      	ldr	r7, [sp, #0]
 8008926:	4605      	mov	r5, r0
 8008928:	4639      	mov	r1, r7
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff fb18 	bl	8007f60 <_malloc_r>
 8008930:	b948      	cbnz	r0, 8008946 <__smakebuf_r+0x46>
 8008932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008936:	059a      	lsls	r2, r3, #22
 8008938:	d4ee      	bmi.n	8008918 <__smakebuf_r+0x18>
 800893a:	f023 0303 	bic.w	r3, r3, #3
 800893e:	f043 0302 	orr.w	r3, r3, #2
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	e7e2      	b.n	800890c <__smakebuf_r+0xc>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	6020      	str	r0, [r4, #0]
 800894a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008956:	b15b      	cbz	r3, 8008970 <__smakebuf_r+0x70>
 8008958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800895c:	4630      	mov	r0, r6
 800895e:	f000 f81d 	bl	800899c <_isatty_r>
 8008962:	b128      	cbz	r0, 8008970 <__smakebuf_r+0x70>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f023 0303 	bic.w	r3, r3, #3
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	431d      	orrs	r5, r3
 8008974:	81a5      	strh	r5, [r4, #12]
 8008976:	e7cf      	b.n	8008918 <__smakebuf_r+0x18>

08008978 <_fstat_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	@ (8008998 <_fstat_r+0x20>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	4611      	mov	r1, r2
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	f7f8 fe46 	bl	8001616 <_fstat>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	d102      	bne.n	8008994 <_fstat_r+0x1c>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b103      	cbz	r3, 8008994 <_fstat_r+0x1c>
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	24000324 	.word	0x24000324

0800899c <_isatty_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	@ (80089b8 <_isatty_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7f8 fe45 	bl	8001636 <_isatty>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_isatty_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_isatty_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	24000324 	.word	0x24000324

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
