
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ec  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b8  0800858c  0800858c  0000958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009844  08009844  0000a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800984c  0800984c  0000a84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009850  08009850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009854  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  080098dc  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  080098dc  0000b334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b00  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c6b  00000000  00000000  00020bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f00  00000000  00000000  00023828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b79  00000000  00000000  00024728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  000252a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016182  00000000  00000000  0005d786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eef7  00000000  00000000  00073908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d27ff  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004578  00000000  00000000  001d2844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d6dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008574 	.word	0x08008574

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008574 	.word	0x08008574

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f007 f8e3 	bl	8007880 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 f87b 	bl	80007b8 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f007 f8d8 	bl	8007880 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	0800858c 	.word	0x0800858c
 80006e0:	080085b8 	.word	0x080085b8

080006e4 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <CC1201_Nop+0x30>)
 80006ee:	f007 f8c7 	bl	8007880 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	203d      	movs	r0, #61	@ 0x3d
 80006f6:	f000 f85f 	bl	80007b8 <CC1201_SendStrobe>
 80006fa:	4603      	mov	r3, r0
 80006fc:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	4619      	mov	r1, r3
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <CC1201_Nop+0x34>)
 8000704:	f007 f8bc 	bl	8007880 <iprintf>
    return result;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	080085e8 	.word	0x080085e8
 8000718:	08008610 	.word	0x08008610

0800071c <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af02      	add	r7, sp, #8
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	2bff      	cmp	r3, #255	@ 0xff
 800072c:	d909      	bls.n	8000742 <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 800072e:	232f      	movs	r3, #47	@ 0x2f
 8000730:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 8000738:	2300      	movs	r3, #0
 800073a:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 800073c:	2303      	movs	r3, #3
 800073e:	75fb      	strb	r3, [r7, #23]
 8000740:	e009      	b.n	8000756 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800074a:	b2db      	uxtb	r3, r3
 800074c:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 800074e:	2300      	movs	r3, #0
 8000750:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000756:	2200      	movs	r2, #0
 8000758:	2110      	movs	r1, #16
 800075a:	4815      	ldr	r0, [pc, #84]	@ (80007b0 <CC1201_ReadStatus+0x94>)
 800075c:	f002 f96c 	bl	8002a38 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	b29b      	uxth	r3, r3
 8000764:	f107 020c 	add.w	r2, r7, #12
 8000768:	f107 0110 	add.w	r1, r7, #16
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	9000      	str	r0, [sp, #0]
 8000772:	4810      	ldr	r0, [pc, #64]	@ (80007b4 <CC1201_ReadStatus+0x98>)
 8000774:	f005 f914 	bl	80059a0 <HAL_SPI_TransmitReceive>
 8000778:	4603      	mov	r3, r0
 800077a:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <CC1201_ReadStatus+0x94>)
 8000782:	f002 f959 	bl	8002a38 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000786:	7dbb      	ldrb	r3, [r7, #22]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10c      	bne.n	80007a6 <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d009      	beq.n	80007a6 <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	2bff      	cmp	r3, #255	@ 0xff
 8000796:	d903      	bls.n	80007a0 <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 8000798:	7bba      	ldrb	r2, [r7, #14]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e002      	b.n	80007a6 <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 80007a0:	7b7a      	ldrb	r2, [r7, #13]
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 80007a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58021000 	.word	0x58021000
 80007b4:	240000b8 	.word	0x240000b8

080007b8 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007c4:	2200      	movs	r2, #0
 80007c6:	2110      	movs	r1, #16
 80007c8:	4812      	ldr	r0, [pc, #72]	@ (8000814 <CC1201_SendStrobe+0x5c>)
 80007ca:	f002 f935 	bl	8002a38 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f001 f9cc 	bl	8001b6c <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 80007d4:	f107 020e 	add.w	r2, r7, #14
 80007d8:	1df9      	adds	r1, r7, #7
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <CC1201_SendStrobe+0x60>)
 80007e4:	f005 f8dc 	bl	80059a0 <HAL_SPI_TransmitReceive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4808      	ldr	r0, [pc, #32]	@ (8000814 <CC1201_SendStrobe+0x5c>)
 80007f2:	f002 f921 	bl	8002a38 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d105      	bne.n	8000808 <CC1201_SendStrobe+0x50>
        if (status_byte != NULL) {
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <CC1201_SendStrobe+0x50>
            *status_byte = rx_data;
 8000802:	7bba      	ldrb	r2, [r7, #14]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58021000 	.word	0x58021000
 8000818:	240000b8 	.word	0x240000b8

0800081c <diagnose_spi_communication>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Diagnostic function to test SPI communication patterns
void diagnose_spi_communication(void) {
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af02      	add	r7, sp, #8
    printf("\n=== SPI COMMUNICATION DIAGNOSTICS ===\n\r");
 8000822:	486d      	ldr	r0, [pc, #436]	@ (80009d8 <diagnose_spi_communication+0x1bc>)
 8000824:	f007 f82c 	bl	8007880 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t tx_data, rx_data;
    
    // Test 1: Check if MISO line is stuck
    printf("1. MISO Line Test:\n\r");
 8000828:	486c      	ldr	r0, [pc, #432]	@ (80009dc <diagnose_spi_communication+0x1c0>)
 800082a:	f007 f829 	bl	8007880 <iprintf>
    
    // Send different patterns and see if we get different responses
    uint8_t test_patterns[] = {0x00, 0xFF, 0x55, 0xAA, 0x0F, 0xF0};
 800082e:	4a6c      	ldr	r2, [pc, #432]	@ (80009e0 <diagnose_spi_communication+0x1c4>)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000838:	6018      	str	r0, [r3, #0]
 800083a:	3304      	adds	r3, #4
 800083c:	8019      	strh	r1, [r3, #0]
    
    for (int i = 0; i < 6; i++) {
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e02c      	b.n	800089e <diagnose_spi_communication+0x82>
        tx_data = test_patterns[i];
 8000844:	f107 0208 	add.w	r2, r7, #8
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	74bb      	strb	r3, [r7, #18]
        rx_data = 0x00;
 8000850:	2300      	movs	r3, #0
 8000852:	747b      	strb	r3, [r7, #17]
        
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	4862      	ldr	r0, [pc, #392]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 800085a:	f002 f8ed 	bl	8002a38 <HAL_GPIO_WritePin>
        status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &tx_data, &rx_data, 1, HAL_MAX_DELAY);
 800085e:	f107 0211 	add.w	r2, r7, #17
 8000862:	f107 0112 	add.w	r1, r7, #18
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2301      	movs	r3, #1
 800086e:	485e      	ldr	r0, [pc, #376]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 8000870:	f005 f896 	bl	80059a0 <HAL_SPI_TransmitReceive>
 8000874:	4603      	mov	r3, r0
 8000876:	74fb      	strb	r3, [r7, #19]
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	4859      	ldr	r0, [pc, #356]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 800087e:	f002 f8db 	bl	8002a38 <HAL_GPIO_WritePin>
        
        printf("  TX: 0x%02X -> RX: 0x%02X (HAL: %d)\n\r", tx_data, rx_data, status);
 8000882:	7cbb      	ldrb	r3, [r7, #18]
 8000884:	4619      	mov	r1, r3
 8000886:	7c7b      	ldrb	r3, [r7, #17]
 8000888:	461a      	mov	r2, r3
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	4857      	ldr	r0, [pc, #348]	@ (80009ec <diagnose_spi_communication+0x1d0>)
 800088e:	f006 fff7 	bl	8007880 <iprintf>
        HAL_Delay(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f001 f96a 	bl	8001b6c <HAL_Delay>
    for (int i = 0; i < 6; i++) {
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	ddcf      	ble.n	8000844 <diagnose_spi_communication+0x28>
    }
    
    // Test 2: Check GPIO pin states
    printf("\n2. GPIO Pin State Check:\n\r");
 80008a4:	4852      	ldr	r0, [pc, #328]	@ (80009f0 <diagnose_spi_communication+0x1d4>)
 80008a6:	f006 ffeb 	bl	8007880 <iprintf>
    printf("  CS Pin (PE11) State: %s\n\r", 
           HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) ? "HIGH" : "LOW");
 80008aa:	2110      	movs	r1, #16
 80008ac:	484d      	ldr	r0, [pc, #308]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 80008ae:	f002 f8ab 	bl	8002a08 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
    printf("  CS Pin (PE11) State: %s\n\r", 
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <diagnose_spi_communication+0xa0>
 80008b8:	4b4e      	ldr	r3, [pc, #312]	@ (80009f4 <diagnose_spi_communication+0x1d8>)
 80008ba:	e000      	b.n	80008be <diagnose_spi_communication+0xa2>
 80008bc:	4b4e      	ldr	r3, [pc, #312]	@ (80009f8 <diagnose_spi_communication+0x1dc>)
 80008be:	4619      	mov	r1, r3
 80008c0:	484e      	ldr	r0, [pc, #312]	@ (80009fc <diagnose_spi_communication+0x1e0>)
 80008c2:	f006 ffdd 	bl	8007880 <iprintf>
    printf("  MISO Pin (PE13) State: %s\n\r", 
           HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 80008c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ca:	4846      	ldr	r0, [pc, #280]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 80008cc:	f002 f89c 	bl	8002a08 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
    printf("  MISO Pin (PE13) State: %s\n\r", 
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <diagnose_spi_communication+0xbe>
 80008d6:	4b47      	ldr	r3, [pc, #284]	@ (80009f4 <diagnose_spi_communication+0x1d8>)
 80008d8:	e000      	b.n	80008dc <diagnose_spi_communication+0xc0>
 80008da:	4b47      	ldr	r3, [pc, #284]	@ (80009f8 <diagnose_spi_communication+0x1dc>)
 80008dc:	4619      	mov	r1, r3
 80008de:	4848      	ldr	r0, [pc, #288]	@ (8000a00 <diagnose_spi_communication+0x1e4>)
 80008e0:	f006 ffce 	bl	8007880 <iprintf>
    printf("  SCK Pin (PE12) State: %s\n\r", 
           HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) ? "HIGH" : "LOW");
 80008e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e8:	483e      	ldr	r0, [pc, #248]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 80008ea:	f002 f88d 	bl	8002a08 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
    printf("  SCK Pin (PE12) State: %s\n\r", 
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <diagnose_spi_communication+0xdc>
 80008f4:	4b3f      	ldr	r3, [pc, #252]	@ (80009f4 <diagnose_spi_communication+0x1d8>)
 80008f6:	e000      	b.n	80008fa <diagnose_spi_communication+0xde>
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <diagnose_spi_communication+0x1dc>)
 80008fa:	4619      	mov	r1, r3
 80008fc:	4841      	ldr	r0, [pc, #260]	@ (8000a04 <diagnose_spi_communication+0x1e8>)
 80008fe:	f006 ffbf 	bl	8007880 <iprintf>
    printf("  MOSI Pin (PE14) State: %s\n\r", 
           HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) ? "HIGH" : "LOW");
 8000902:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000906:	4837      	ldr	r0, [pc, #220]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 8000908:	f002 f87e 	bl	8002a08 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
    printf("  MOSI Pin (PE14) State: %s\n\r", 
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <diagnose_spi_communication+0xfa>
 8000912:	4b38      	ldr	r3, [pc, #224]	@ (80009f4 <diagnose_spi_communication+0x1d8>)
 8000914:	e000      	b.n	8000918 <diagnose_spi_communication+0xfc>
 8000916:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <diagnose_spi_communication+0x1dc>)
 8000918:	4619      	mov	r1, r3
 800091a:	483b      	ldr	r0, [pc, #236]	@ (8000a08 <diagnose_spi_communication+0x1ec>)
 800091c:	f006 ffb0 	bl	8007880 <iprintf>
    
    // Test 3: Multiple byte transmission
    printf("\n3. Multi-byte Transmission Test:\n\r");
 8000920:	483a      	ldr	r0, [pc, #232]	@ (8000a0c <diagnose_spi_communication+0x1f0>)
 8000922:	f006 ffad 	bl	8007880 <iprintf>
    uint8_t tx_buffer[] = {0x3D, 0x00}; // NOP command + dummy
 8000926:	233d      	movs	r3, #61	@ 0x3d
 8000928:	80bb      	strh	r3, [r7, #4]
    uint8_t rx_buffer[2] = {0x00, 0x00};
 800092a:	2300      	movs	r3, #0
 800092c:	803b      	strh	r3, [r7, #0]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2110      	movs	r1, #16
 8000932:	482c      	ldr	r0, [pc, #176]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 8000934:	f002 f880 	bl	8002a38 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, 2, HAL_MAX_DELAY);
 8000938:	463a      	mov	r2, r7
 800093a:	1d39      	adds	r1, r7, #4
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2302      	movs	r3, #2
 8000944:	4828      	ldr	r0, [pc, #160]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 8000946:	f005 f82b 	bl	80059a0 <HAL_SPI_TransmitReceive>
 800094a:	4603      	mov	r3, r0
 800094c:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2110      	movs	r1, #16
 8000952:	4824      	ldr	r0, [pc, #144]	@ (80009e4 <diagnose_spi_communication+0x1c8>)
 8000954:	f002 f870 	bl	8002a38 <HAL_GPIO_WritePin>
    
    printf("  TX: [0x%02X, 0x%02X] -> RX: [0x%02X, 0x%02X] (HAL: %d)\n\r", 
           tx_buffer[0], tx_buffer[1], rx_buffer[0], rx_buffer[1], status);
 8000958:	793b      	ldrb	r3, [r7, #4]
    printf("  TX: [0x%02X, 0x%02X] -> RX: [0x%02X, 0x%02X] (HAL: %d)\n\r", 
 800095a:	4619      	mov	r1, r3
           tx_buffer[0], tx_buffer[1], rx_buffer[0], rx_buffer[1], status);
 800095c:	797b      	ldrb	r3, [r7, #5]
    printf("  TX: [0x%02X, 0x%02X] -> RX: [0x%02X, 0x%02X] (HAL: %d)\n\r", 
 800095e:	4618      	mov	r0, r3
           tx_buffer[0], tx_buffer[1], rx_buffer[0], rx_buffer[1], status);
 8000960:	783b      	ldrb	r3, [r7, #0]
    printf("  TX: [0x%02X, 0x%02X] -> RX: [0x%02X, 0x%02X] (HAL: %d)\n\r", 
 8000962:	461c      	mov	r4, r3
           tx_buffer[0], tx_buffer[1], rx_buffer[0], rx_buffer[1], status);
 8000964:	787b      	ldrb	r3, [r7, #1]
    printf("  TX: [0x%02X, 0x%02X] -> RX: [0x%02X, 0x%02X] (HAL: %d)\n\r", 
 8000966:	461a      	mov	r2, r3
 8000968:	7cfb      	ldrb	r3, [r7, #19]
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	9200      	str	r2, [sp, #0]
 800096e:	4623      	mov	r3, r4
 8000970:	4602      	mov	r2, r0
 8000972:	4827      	ldr	r0, [pc, #156]	@ (8000a10 <diagnose_spi_communication+0x1f4>)
 8000974:	f006 ff84 	bl	8007880 <iprintf>
    
    // Test 4: SPI Configuration Check
    printf("\n4. SPI4 Configuration Check:\n\r");
 8000978:	4826      	ldr	r0, [pc, #152]	@ (8000a14 <diagnose_spi_communication+0x1f8>)
 800097a:	f006 ff81 	bl	8007880 <iprintf>
    printf("  SPI State: %d\n\r", CC1201_SPI_HANDLE.State);
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 8000980:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4619      	mov	r1, r3
 8000988:	4823      	ldr	r0, [pc, #140]	@ (8000a18 <diagnose_spi_communication+0x1fc>)
 800098a:	f006 ff79 	bl	8007880 <iprintf>
    printf("  SPI Mode: %lu\n\r", CC1201_SPI_HANDLE.Init.Mode);
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4619      	mov	r1, r3
 8000994:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <diagnose_spi_communication+0x200>)
 8000996:	f006 ff73 	bl	8007880 <iprintf>
    printf("  Data Size: %lu\n\r", CC1201_SPI_HANDLE.Init.DataSize);
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4619      	mov	r1, r3
 80009a0:	481f      	ldr	r0, [pc, #124]	@ (8000a20 <diagnose_spi_communication+0x204>)
 80009a2:	f006 ff6d 	bl	8007880 <iprintf>
    printf("  Clock Polarity: %lu\n\r", CC1201_SPI_HANDLE.Init.CLKPolarity);
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	4619      	mov	r1, r3
 80009ac:	481d      	ldr	r0, [pc, #116]	@ (8000a24 <diagnose_spi_communication+0x208>)
 80009ae:	f006 ff67 	bl	8007880 <iprintf>
    printf("  Clock Phase: %lu\n\r", CC1201_SPI_HANDLE.Init.CLKPhase);
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4619      	mov	r1, r3
 80009b8:	481b      	ldr	r0, [pc, #108]	@ (8000a28 <diagnose_spi_communication+0x20c>)
 80009ba:	f006 ff61 	bl	8007880 <iprintf>
    printf("  Baud Rate Prescaler: %lu\n\r", CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <diagnose_spi_communication+0x1cc>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4819      	ldr	r0, [pc, #100]	@ (8000a2c <diagnose_spi_communication+0x210>)
 80009c6:	f006 ff5b 	bl	8007880 <iprintf>
    
    printf("=== DIAGNOSTICS COMPLETE ===\n\r");
 80009ca:	4819      	ldr	r0, [pc, #100]	@ (8000a30 <diagnose_spi_communication+0x214>)
 80009cc:	f006 ff58 	bl	8007880 <iprintf>
}
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	0800863c 	.word	0x0800863c
 80009dc:	08008668 	.word	0x08008668
 80009e0:	08008878 	.word	0x08008878
 80009e4:	58021000 	.word	0x58021000
 80009e8:	240000b8 	.word	0x240000b8
 80009ec:	08008680 	.word	0x08008680
 80009f0:	080086a8 	.word	0x080086a8
 80009f4:	080086c4 	.word	0x080086c4
 80009f8:	080086cc 	.word	0x080086cc
 80009fc:	080086d0 	.word	0x080086d0
 8000a00:	080086ec 	.word	0x080086ec
 8000a04:	0800870c 	.word	0x0800870c
 8000a08:	0800872c 	.word	0x0800872c
 8000a0c:	0800874c 	.word	0x0800874c
 8000a10:	08008770 	.word	0x08008770
 8000a14:	080087ac 	.word	0x080087ac
 8000a18:	080087cc 	.word	0x080087cc
 8000a1c:	080087e0 	.word	0x080087e0
 8000a20:	080087f4 	.word	0x080087f4
 8000a24:	08008808 	.word	0x08008808
 8000a28:	08008820 	.word	0x08008820
 8000a2c:	08008838 	.word	0x08008838
 8000a30:	08008858 	.word	0x08008858

08000a34 <test_spi_configurations>:

// Test different SPI configurations
void test_spi_configurations(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0ae      	sub	sp, #184	@ 0xb8
 8000a38:	af00      	add	r7, sp, #0
    printf("\n=== SPI CONFIGURATION TEST ===\n\r");
 8000a3a:	4851      	ldr	r0, [pc, #324]	@ (8000b80 <test_spi_configurations+0x14c>)
 8000a3c:	f006 ff20 	bl	8007880 <iprintf>
    
    // Save current configuration
    SPI_HandleTypeDef original_config = CC1201_SPI_HANDLE;
 8000a40:	4a50      	ldr	r2, [pc, #320]	@ (8000b84 <test_spi_configurations+0x150>)
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	4611      	mov	r1, r2
 8000a48:	2288      	movs	r2, #136	@ 0x88
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 ffe9 	bl	8007a22 <memcpy>
    
    // Test different clock polarity/phase combinations
    uint32_t polarity_options[] = {SPI_POLARITY_LOW, SPI_POLARITY_HIGH};
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a58:	623b      	str	r3, [r7, #32]
    uint32_t phase_options[] = {SPI_PHASE_1EDGE, SPI_PHASE_2EDGE};
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a62:	61bb      	str	r3, [r7, #24]
    const char* pol_names[] = {"LOW", "HIGH"};
 8000a64:	4a48      	ldr	r2, [pc, #288]	@ (8000b88 <test_spi_configurations+0x154>)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a6e:	e883 0003 	stmia.w	r3, {r0, r1}
    const char* phase_names[] = {"1EDGE", "2EDGE"};
 8000a72:	4a46      	ldr	r2, [pc, #280]	@ (8000b8c <test_spi_configurations+0x158>)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7a:	e883 0003 	stmia.w	r3, {r0, r1}
    
    for (int pol = 0; pol < 2; pol++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000a84:	e060      	b.n	8000b48 <test_spi_configurations+0x114>
        for (int phase = 0; phase < 2; phase++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a8c:	e053      	b.n	8000b36 <test_spi_configurations+0x102>
            printf("\nTesting CPOL=%s, CPHA=%s:\n\r", pol_names[pol], phase_names[phase]);
 8000a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	33b8      	adds	r3, #184	@ 0xb8
 8000a96:	443b      	add	r3, r7
 8000a98:	f853 1cac 	ldr.w	r1, [r3, #-172]
 8000a9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	33b8      	adds	r3, #184	@ 0xb8
 8000aa4:	443b      	add	r3, r7
 8000aa6:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4838      	ldr	r0, [pc, #224]	@ (8000b90 <test_spi_configurations+0x15c>)
 8000aae:	f006 fee7 	bl	8007880 <iprintf>
            
            // Reconfigure SPI
            HAL_SPI_DeInit(&CC1201_SPI_HANDLE);
 8000ab2:	4834      	ldr	r0, [pc, #208]	@ (8000b84 <test_spi_configurations+0x150>)
 8000ab4:	f004 ff4a 	bl	800594c <HAL_SPI_DeInit>
            CC1201_SPI_HANDLE.Init.CLKPolarity = polarity_options[pol];
 8000ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	33b8      	adds	r3, #184	@ 0xb8
 8000ac0:	443b      	add	r3, r7
 8000ac2:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <test_spi_configurations+0x150>)
 8000ac8:	6113      	str	r3, [r2, #16]
            CC1201_SPI_HANDLE.Init.CLKPhase = phase_options[phase];
 8000aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	33b8      	adds	r3, #184	@ 0xb8
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b84 <test_spi_configurations+0x150>)
 8000ada:	6153      	str	r3, [r2, #20]
            CC1201_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT; // Ensure 8-bit
 8000adc:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <test_spi_configurations+0x150>)
 8000ade:	2207      	movs	r2, #7
 8000ae0:	60da      	str	r2, [r3, #12]
            HAL_StatusTypeDef init_status = HAL_SPI_Init(&CC1201_SPI_HANDLE);
 8000ae2:	4828      	ldr	r0, [pc, #160]	@ (8000b84 <test_spi_configurations+0x150>)
 8000ae4:	f004 fe0e 	bl	8005704 <HAL_SPI_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            
            printf("  SPI Init: %s\n\r", init_status == HAL_OK ? "OK" : "FAILED");
 8000aee:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <test_spi_configurations+0xc6>
 8000af6:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <test_spi_configurations+0x160>)
 8000af8:	e000      	b.n	8000afc <test_spi_configurations+0xc8>
 8000afa:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <test_spi_configurations+0x164>)
 8000afc:	4619      	mov	r1, r3
 8000afe:	4827      	ldr	r0, [pc, #156]	@ (8000b9c <test_spi_configurations+0x168>)
 8000b00:	f006 febe 	bl	8007880 <iprintf>
            
            if (init_status == HAL_OK) {
 8000b04:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10f      	bne.n	8000b2c <test_spi_configurations+0xf8>
                // Test NOP command
                uint8_t status_byte = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	70fb      	strb	r3, [r7, #3]
                HAL_StatusTypeDef nop_status = CC1201_Nop(&status_byte);
 8000b10:	1cfb      	adds	r3, r7, #3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fde6 	bl	80006e4 <CC1201_Nop>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
                printf("  NOP Result: HAL=%d, Status=0x%02X\n\r", nop_status, status_byte);
 8000b1e:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8000b22:	78fa      	ldrb	r2, [r7, #3]
 8000b24:	4619      	mov	r1, r3
 8000b26:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <test_spi_configurations+0x16c>)
 8000b28:	f006 feaa 	bl	8007880 <iprintf>
        for (int phase = 0; phase < 2; phase++) {
 8000b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	dda7      	ble.n	8000a8e <test_spi_configurations+0x5a>
    for (int pol = 0; pol < 2; pol++) {
 8000b3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b42:	3301      	adds	r3, #1
 8000b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000b48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	dd9a      	ble.n	8000a86 <test_spi_configurations+0x52>
            }
        }
    }
    
    // Restore original configuration
    printf("\nRestoring original SPI configuration...\n\r");
 8000b50:	4814      	ldr	r0, [pc, #80]	@ (8000ba4 <test_spi_configurations+0x170>)
 8000b52:	f006 fe95 	bl	8007880 <iprintf>
    HAL_SPI_DeInit(&CC1201_SPI_HANDLE);
 8000b56:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <test_spi_configurations+0x150>)
 8000b58:	f004 fef8 	bl	800594c <HAL_SPI_DeInit>
    CC1201_SPI_HANDLE = original_config;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <test_spi_configurations+0x150>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b64:	2288      	movs	r2, #136	@ 0x88
 8000b66:	4619      	mov	r1, r3
 8000b68:	f006 ff5b 	bl	8007a22 <memcpy>
    HAL_SPI_Init(&CC1201_SPI_HANDLE);
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <test_spi_configurations+0x150>)
 8000b6e:	f004 fdc9 	bl	8005704 <HAL_SPI_Init>
    
    printf("=== SPI CONFIGURATION TEST COMPLETE ===\n\r");
 8000b72:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <test_spi_configurations+0x174>)
 8000b74:	f006 fe84 	bl	8007880 <iprintf>
}
 8000b78:	bf00      	nop
 8000b7a:	37b8      	adds	r7, #184	@ 0xb8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	08008880 	.word	0x08008880
 8000b84:	240000b8 	.word	0x240000b8
 8000b88:	08008964 	.word	0x08008964
 8000b8c:	0800897c 	.word	0x0800897c
 8000b90:	080088a4 	.word	0x080088a4
 8000b94:	080088c4 	.word	0x080088c4
 8000b98:	080088c8 	.word	0x080088c8
 8000b9c:	080088d0 	.word	0x080088d0
 8000ba0:	080088e4 	.word	0x080088e4
 8000ba4:	0800890c 	.word	0x0800890c
 8000ba8:	08008938 	.word	0x08008938

08000bac <test_cc1201_presence>:

// Check if CC1201 is responding at all
void test_cc1201_presence(void) {
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b08c      	sub	sp, #48	@ 0x30
 8000bb0:	af02      	add	r7, sp, #8
    printf("\n=== CC1201 PRESENCE TEST ===\n\r");
 8000bb2:	484b      	ldr	r0, [pc, #300]	@ (8000ce0 <test_cc1201_presence+0x134>)
 8000bb4:	f006 fe64 	bl	8007880 <iprintf>
    
    // Test 1: Try to read chip ID or version register
    printf("1. Attempting to read CHIP_ID register:\n\r");
 8000bb8:	484a      	ldr	r0, [pc, #296]	@ (8000ce4 <test_cc1201_presence+0x138>)
 8000bba:	f006 fe61 	bl	8007880 <iprintf>
    uint8_t chip_id = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    HAL_StatusTypeDef status = CC1201_ReadStatus(0x8F, &chip_id); // Extended register
 8000bc4:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8000bc8:	4619      	mov	r1, r3
 8000bca:	208f      	movs	r0, #143	@ 0x8f
 8000bcc:	f7ff fda6 	bl	800071c <CC1201_ReadStatus>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    printf("  CHIP_ID: HAL=%d, Data=0x%02X\n\r", status, chip_id);
 8000bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000bda:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000bde:	4619      	mov	r1, r3
 8000be0:	4841      	ldr	r0, [pc, #260]	@ (8000ce8 <test_cc1201_presence+0x13c>)
 8000be2:	f006 fe4d 	bl	8007880 <iprintf>
    
    // Test 2: Try reading different registers
    printf("\n2. Reading various registers:\n\r");
 8000be6:	4841      	ldr	r0, [pc, #260]	@ (8000cec <test_cc1201_presence+0x140>)
 8000be8:	f006 fe4a 	bl	8007880 <iprintf>
    uint8_t registers[] = {0x00, 0x01, 0x02, 0x03, 0x17, 0x18}; // Various addresses
 8000bec:	4a40      	ldr	r2, [pc, #256]	@ (8000cf0 <test_cc1201_presence+0x144>)
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf6:	6018      	str	r0, [r3, #0]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	8019      	strh	r1, [r3, #0]
    const char* reg_names[] = {"IOCFG3", "IOCFG2", "IOCFG1", "IOCFG0", "MARCSTATE", "PKTSTATUS"};
 8000bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf4 <test_cc1201_presence+0x148>)
 8000bfe:	1d3c      	adds	r4, r7, #4
 8000c00:	461d      	mov	r5, r3
 8000c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c0a:	e884 0003 	stmia.w	r4, {r0, r1}
    
    for (int i = 0; i < 6; i++) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c12:	e026      	b.n	8000c62 <test_cc1201_presence+0xb6>
        uint8_t reg_data = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	703b      	strb	r3, [r7, #0]
        status = CC1201_ReadStatus(registers[i], &reg_data);
 8000c18:	f107 021c 	add.w	r2, r7, #28
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	4610      	mov	r0, r2
 8000c2a:	f7ff fd77 	bl	800071c <CC1201_ReadStatus>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        printf("  %s (0x%02X): HAL=%d, Data=0x%02X\n\r", 
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	3328      	adds	r3, #40	@ 0x28
 8000c3a:	443b      	add	r3, r7
 8000c3c:	f853 1c24 	ldr.w	r1, [r3, #-36]
               reg_names[i], registers[i], status, reg_data);
 8000c40:	f107 021c 	add.w	r2, r7, #28
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
        printf("  %s (0x%02X): HAL=%d, Data=0x%02X\n\r", 
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c50:	783a      	ldrb	r2, [r7, #0]
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	4602      	mov	r2, r0
 8000c56:	4828      	ldr	r0, [pc, #160]	@ (8000cf8 <test_cc1201_presence+0x14c>)
 8000c58:	f006 fe12 	bl	8007880 <iprintf>
    for (int i = 0; i < 6; i++) {
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5e:	3301      	adds	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	ddd5      	ble.n	8000c14 <test_cc1201_presence+0x68>
    }
    
    // Test 3: Try a soft reset and see if anything changes
    printf("\n3. Testing Soft Reset Response:\n\r");
 8000c68:	4824      	ldr	r0, [pc, #144]	@ (8000cfc <test_cc1201_presence+0x150>)
 8000c6a:	f006 fe09 	bl	8007880 <iprintf>
    uint8_t before_reset = 0, after_reset = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	70fb      	strb	r3, [r7, #3]
 8000c72:	2300      	movs	r3, #0
 8000c74:	70bb      	strb	r3, [r7, #2]
    
    CC1201_ReadStatus(0x01, &before_reset);
 8000c76:	1cfb      	adds	r3, r7, #3
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fd4e 	bl	800071c <CC1201_ReadStatus>
    printf("  Before reset: 0x%02X\n\r", before_reset);
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	4619      	mov	r1, r3
 8000c84:	481e      	ldr	r0, [pc, #120]	@ (8000d00 <test_cc1201_presence+0x154>)
 8000c86:	f006 fdfb 	bl	8007880 <iprintf>
    
    uint8_t reset_status = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	707b      	strb	r3, [r7, #1]
    CC1201_SoftReset(&reset_status);
 8000c8e:	1c7b      	adds	r3, r7, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fd0b 	bl	80006ac <CC1201_SoftReset>
    printf("  Reset command status: 0x%02X\n\r", reset_status);
 8000c96:	787b      	ldrb	r3, [r7, #1]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481a      	ldr	r0, [pc, #104]	@ (8000d04 <test_cc1201_presence+0x158>)
 8000c9c:	f006 fdf0 	bl	8007880 <iprintf>
    HAL_Delay(100);
 8000ca0:	2064      	movs	r0, #100	@ 0x64
 8000ca2:	f000 ff63 	bl	8001b6c <HAL_Delay>
    
    CC1201_ReadStatus(0x01, &after_reset);
 8000ca6:	1cbb      	adds	r3, r7, #2
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fd36 	bl	800071c <CC1201_ReadStatus>
    printf("  After reset: 0x%02X\n\r", after_reset);
 8000cb0:	78bb      	ldrb	r3, [r7, #2]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <test_cc1201_presence+0x15c>)
 8000cb6:	f006 fde3 	bl	8007880 <iprintf>
    
    if (before_reset != after_reset) {
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	78bb      	ldrb	r3, [r7, #2]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d003      	beq.n	8000cca <test_cc1201_presence+0x11e>
        printf("  ✓ Reset caused status change - CC1201 likely responding\n\r");
 8000cc2:	4812      	ldr	r0, [pc, #72]	@ (8000d0c <test_cc1201_presence+0x160>)
 8000cc4:	f006 fddc 	bl	8007880 <iprintf>
 8000cc8:	e002      	b.n	8000cd0 <test_cc1201_presence+0x124>
    } else {
        printf("  ✗ No status change - CC1201 may not be responding\n\r");
 8000cca:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <test_cc1201_presence+0x164>)
 8000ccc:	f006 fdd8 	bl	8007880 <iprintf>
    }
    
    printf("=== PRESENCE TEST COMPLETE ===\n\r");
 8000cd0:	4810      	ldr	r0, [pc, #64]	@ (8000d14 <test_cc1201_presence+0x168>)
 8000cd2:	f006 fdd5 	bl	8007880 <iprintf>
}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	@ 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08008984 	.word	0x08008984
 8000ce4:	080089a4 	.word	0x080089a4
 8000ce8:	080089d0 	.word	0x080089d0
 8000cec:	080089f4 	.word	0x080089f4
 8000cf0:	08008b58 	.word	0x08008b58
 8000cf4:	08008b98 	.word	0x08008b98
 8000cf8:	08008a18 	.word	0x08008a18
 8000cfc:	08008a40 	.word	0x08008a40
 8000d00:	08008a64 	.word	0x08008a64
 8000d04:	08008a80 	.word	0x08008a80
 8000d08:	08008aa4 	.word	0x08008aa4
 8000d0c:	08008abc 	.word	0x08008abc
 8000d10:	08008afc 	.word	0x08008afc
 8000d14:	08008b34 	.word	0x08008b34

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d1e:	f000 f9ab 	bl	8001078 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d22:	f000 fe91 	bl	8001a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d26:	f000 f879 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2a:	f000 f939 	bl	8000fa0 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000d2e:	f000 f8e1 	bl	8000ef4 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 fc5c 	bl	80015f0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fc59 	bl	80015f0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f000 fc56 	bl	80015f0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000d44:	2101      	movs	r1, #1
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fd1c 	bl	8001784 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <main+0xec>)
 8000d4e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d52:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	@ (8000e04 <main+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <main+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <main+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000d66:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <main+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000d6c:	4925      	ldr	r1, [pc, #148]	@ (8000e04 <main+0xec>)
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 fd8c 	bl	800188c <BSP_COM_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <main+0x66>
  {
    Error_Handler();
 8000d7a:	f000 f9bd 	bl	80010f8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000d7e:	4822      	ldr	r0, [pc, #136]	@ (8000e08 <main+0xf0>)
 8000d80:	f006 fd7e 	bl	8007880 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 fca9 	bl	80016dc <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8000d8a:	4820      	ldr	r0, [pc, #128]	@ (8000e0c <main+0xf4>)
 8000d8c:	f006 fd78 	bl	8007880 <iprintf>

  uint8_t test_status = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fca4 	bl	80006e4 <CC1201_Nop>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	79ba      	ldrb	r2, [r7, #6]
 8000da4:	4619      	mov	r1, r3
 8000da6:	481a      	ldr	r0, [pc, #104]	@ (8000e10 <main+0xf8>)
 8000da8:	f006 fd6a 	bl	8007880 <iprintf>
  
  if (nop_result == HAL_OK) {
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d11b      	bne.n	8000dea <main+0xd2>
      printf("Basic CC1201 communication working!\n\r");
 8000db2:	4818      	ldr	r0, [pc, #96]	@ (8000e14 <main+0xfc>)
 8000db4:	f006 fd64 	bl	8007880 <iprintf>
      BSP_LED_Off(LED_RED);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f000 fcb9 	bl	8001730 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 fc8c 	bl	80016dc <BSP_LED_On>
      
      // Run diagnostic tests to identify the communication issue
      HAL_Delay(1000);
 8000dc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dc8:	f000 fed0 	bl	8001b6c <HAL_Delay>
      diagnose_spi_communication();
 8000dcc:	f7ff fd26 	bl	800081c <diagnose_spi_communication>
      HAL_Delay(500);
 8000dd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dd4:	f000 feca 	bl	8001b6c <HAL_Delay>
      test_cc1201_presence();
 8000dd8:	f7ff fee8 	bl	8000bac <test_cc1201_presence>
      HAL_Delay(500);
 8000ddc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000de0:	f000 fec4 	bl	8001b6c <HAL_Delay>
      test_spi_configurations();
 8000de4:	f7ff fe26 	bl	8000a34 <test_spi_configurations>
 8000de8:	e009      	b.n	8000dfe <main+0xe6>
  } else {
      printf("CC1201 communication failed!\n\r");
 8000dea:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <main+0x100>)
 8000dec:	f006 fd48 	bl	8007880 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fc9d 	bl	8001730 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f000 fc70 	bl	80016dc <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	e7fd      	b.n	8000dfe <main+0xe6>
 8000e02:	bf00      	nop
 8000e04:	240000a4 	.word	0x240000a4
 8000e08:	0800969c 	.word	0x0800969c
 8000e0c:	080096b8 	.word	0x080096b8
 8000e10:	080096e8 	.word	0x080096e8
 8000e14:	08009714 	.word	0x08009714
 8000e18:	0800973c 	.word	0x0800973c

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09c      	sub	sp, #112	@ 0x70
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	224c      	movs	r2, #76	@ 0x4c
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 fd7d 	bl	800792a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2220      	movs	r2, #32
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 fd77 	bl	800792a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f001 fe15 	bl	8002a6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4a:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e52:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <SystemClock_Config+0xd4>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e64:	4a22      	ldr	r2, [pc, #136]	@ (8000ef0 <SystemClock_Config+0xd4>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <SystemClock_Config+0xd4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e78:	bf00      	nop
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <SystemClock_Config+0xd4>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e86:	d1f8      	bne.n	8000e7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e90:	2340      	movs	r3, #64	@ 0x40
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fe1f 	bl	8002ae0 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ea8:	f000 f926 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	233f      	movs	r3, #63	@ 0x3f
 8000eae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fa5e 	bl	8003394 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ede:	f000 f90b 	bl	80010f8 <Error_Handler>
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3770      	adds	r7, #112	@ 0x70
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	58000400 	.word	0x58000400
 8000ef0:	58024800 	.word	0x58024800

08000ef4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000efa:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <MX_SPI4_Init+0xa8>)
 8000efc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f04:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f06:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f0e:	2207      	movs	r2, #7
 8000f10:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f24:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f38:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_SPI4_Init+0xa4>)
 8000f84:	f004 fbbe 	bl	8005704 <HAL_SPI_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000f8e:	f000 f8b3 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240000b8 	.word	0x240000b8
 8000f9c:	40013400 	.word	0x40013400

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	4a25      	ldr	r2, [pc, #148]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe4:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a16      	ldr	r2, [pc, #88]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_GPIO_Init+0xd0>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104c:	2320      	movs	r3, #32
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4804      	ldr	r0, [pc, #16]	@ (8001074 <MX_GPIO_Init+0xd4>)
 8001062:	f001 fa17 	bl	8002494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	@ 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	58020c00 	.word	0x58020c00

08001078 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800108a:	f000 fee1 	bl	8001e50 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800108e:	2301      	movs	r3, #1
 8001090:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001092:	2300      	movs	r3, #0
 8001094:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800109a:	231f      	movs	r3, #31
 800109c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800109e:	2387      	movs	r3, #135	@ 0x87
 80010a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010a6:	2300      	movs	r3, #0
 80010a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010aa:	2301      	movs	r3, #1
 80010ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ba:	463b      	mov	r3, r7
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 feff 	bl	8001ec0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010c2:	2004      	movs	r0, #4
 80010c4:	f000 fedc 	bl	8001e80 <HAL_MPU_Enable>

}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <BSP_PB_Callback+0x24>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	240000b4 	.word	0x240000b4

080010f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <Error_Handler+0x8>

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_MspInit+0x30>)
 800110c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_MspInit+0x30>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_MspInit+0x30>)
 800111c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58024400 	.word	0x58024400

08001138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ba      	sub	sp, #232	@ 0xe8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	22c0      	movs	r2, #192	@ 0xc0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f006 fbe6 	bl	800792a <memset>
  if(hspi->Instance==SPI4)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2a      	ldr	r2, [pc, #168]	@ (800120c <HAL_SPI_MspInit+0xd4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d14d      	bne.n	8001204 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001168:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001174:	2300      	movs	r3, #0
 8001176:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fc95 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001188:	f7ff ffb6 	bl	80010f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800118c:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <HAL_SPI_MspInit+0xd8>)
 800118e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001192:	4a1f      	ldr	r2, [pc, #124]	@ (8001210 <HAL_SPI_MspInit+0xd8>)
 8001194:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001198:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800119c:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <HAL_SPI_MspInit+0xd8>)
 800119e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <HAL_SPI_MspInit+0xd8>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <HAL_SPI_MspInit+0xd8>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_SPI_MspInit+0xd8>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80011c8:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80011cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011e2:	2305      	movs	r3, #5
 80011e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4809      	ldr	r0, [pc, #36]	@ (8001214 <HAL_SPI_MspInit+0xdc>)
 80011f0:	f001 f950 	bl	8002494 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2054      	movs	r0, #84	@ 0x54
 80011fa:	f000 fde6 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80011fe:	2054      	movs	r0, #84	@ 0x54
 8001200:	f000 fdfd 	bl	8001dfe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001204:	bf00      	nop
 8001206:	37e8      	adds	r7, #232	@ 0xe8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40013400 	.word	0x40013400
 8001210:	58024400 	.word	0x58024400
 8001214:	58021000 	.word	0x58021000

08001218 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <HAL_SPI_MspDeInit+0x3c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10f      	bne.n	800124a <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <HAL_SPI_MspDeInit+0x40>)
 800122c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001230:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <HAL_SPI_MspDeInit+0x40>)
 8001232:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001236:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14);
 800123a:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 800123e:	4807      	ldr	r0, [pc, #28]	@ (800125c <HAL_SPI_MspDeInit+0x44>)
 8001240:	f001 fad8 	bl	80027f4 <HAL_GPIO_DeInit>

    /* SPI4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 8001244:	2054      	movs	r0, #84	@ 0x54
 8001246:	f000 fde8 	bl	8001e1a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40013400 	.word	0x40013400
 8001258:	58024400 	.word	0x58024400
 800125c:	58021000 	.word	0x58021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <NMI_Handler+0x4>

08001268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <MemManage_Handler+0x4>

08001278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <UsageFault_Handler+0x4>

08001288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b6:	f000 fc39 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 fad0 	bl	8001868 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <SPI4_IRQHandler+0x10>)
 80012d2:	f004 fe9f 	bl	8006014 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	240000b8 	.word	0x240000b8

080012e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e00a      	b.n	8001308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f2:	f3af 8000 	nop.w
 80012f6:	4601      	mov	r1, r0
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	b2ca      	uxtb	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf0      	blt.n	80012f2 <_read+0x12>
  }

  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e009      	b.n	8001340 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fb0b 	bl	8001950 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	dbf1      	blt.n	800132c <_write+0x12>
  }
  return len;
 8001348:	687b      	ldr	r3, [r7, #4]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_close>:

int _close(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800137a:	605a      	str	r2, [r3, #4]
  return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_isatty>:

int _isatty(int file)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	@ (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f006 faec 	bl	80079c8 <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	24080000 	.word	0x24080000
 800141c:	00000400 	.word	0x00000400
 8001420:	24000140 	.word	0x24000140
 8001424:	24000338 	.word	0x24000338

08001428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800142c:	4b43      	ldr	r3, [pc, #268]	@ (800153c <SystemInit+0x114>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001432:	4a42      	ldr	r2, [pc, #264]	@ (800153c <SystemInit+0x114>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800143c:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <SystemInit+0x118>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	2b06      	cmp	r3, #6
 8001446:	d807      	bhi.n	8001458 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001448:	4b3d      	ldr	r3, [pc, #244]	@ (8001540 <SystemInit+0x118>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 030f 	bic.w	r3, r3, #15
 8001450:	4a3b      	ldr	r2, [pc, #236]	@ (8001540 <SystemInit+0x118>)
 8001452:	f043 0307 	orr.w	r3, r3, #7
 8001456:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001458:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <SystemInit+0x11c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a39      	ldr	r2, [pc, #228]	@ (8001544 <SystemInit+0x11c>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001464:	4b37      	ldr	r3, [pc, #220]	@ (8001544 <SystemInit+0x11c>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800146a:	4b36      	ldr	r3, [pc, #216]	@ (8001544 <SystemInit+0x11c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4935      	ldr	r1, [pc, #212]	@ (8001544 <SystemInit+0x11c>)
 8001470:	4b35      	ldr	r3, [pc, #212]	@ (8001548 <SystemInit+0x120>)
 8001472:	4013      	ands	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001476:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <SystemInit+0x118>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001482:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <SystemInit+0x118>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 030f 	bic.w	r3, r3, #15
 800148a:	4a2d      	ldr	r2, [pc, #180]	@ (8001540 <SystemInit+0x118>)
 800148c:	f043 0307 	orr.w	r3, r3, #7
 8001490:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001492:	4b2c      	ldr	r3, [pc, #176]	@ (8001544 <SystemInit+0x11c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001498:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <SystemInit+0x11c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800149e:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <SystemInit+0x11c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014a4:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <SystemInit+0x11c>)
 80014a6:	4a29      	ldr	r2, [pc, #164]	@ (800154c <SystemInit+0x124>)
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014aa:	4b26      	ldr	r3, [pc, #152]	@ (8001544 <SystemInit+0x11c>)
 80014ac:	4a28      	ldr	r2, [pc, #160]	@ (8001550 <SystemInit+0x128>)
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b0:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <SystemInit+0x11c>)
 80014b2:	4a28      	ldr	r2, [pc, #160]	@ (8001554 <SystemInit+0x12c>)
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <SystemInit+0x11c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014bc:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <SystemInit+0x11c>)
 80014be:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <SystemInit+0x12c>)
 80014c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <SystemInit+0x11c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <SystemInit+0x11c>)
 80014ca:	4a22      	ldr	r2, [pc, #136]	@ (8001554 <SystemInit+0x12c>)
 80014cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <SystemInit+0x11c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <SystemInit+0x11c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001544 <SystemInit+0x11c>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <SystemInit+0x11c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <SystemInit+0x130>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <SystemInit+0x134>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014f2:	d202      	bcs.n	80014fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <SystemInit+0x138>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <SystemInit+0x11c>)
 80014fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d113      	bne.n	8001530 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <SystemInit+0x11c>)
 800150a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800150e:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <SystemInit+0x11c>)
 8001510:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001514:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <SystemInit+0x13c>)
 800151a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800151e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <SystemInit+0x11c>)
 8001522:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001526:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <SystemInit+0x11c>)
 8001528:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800152c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	52002000 	.word	0x52002000
 8001544:	58024400 	.word	0x58024400
 8001548:	eaf6ed7f 	.word	0xeaf6ed7f
 800154c:	02020200 	.word	0x02020200
 8001550:	01ff0000 	.word	0x01ff0000
 8001554:	01010280 	.word	0x01010280
 8001558:	5c001000 	.word	0x5c001000
 800155c:	ffff0000 	.word	0xffff0000
 8001560:	51008108 	.word	0x51008108
 8001564:	52004000 	.word	0x52004000

08001568 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <ExitRun0Mode+0x2c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <ExitRun0Mode+0x2c>)
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001578:	bf00      	nop
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <ExitRun0Mode+0x2c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f9      	beq.n	800157a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	58024800 	.word	0x58024800

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015d4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800159c:	f7ff ffe4 	bl	8001568 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015a0:	f7ff ff42 	bl	8001428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	@ (80015dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	@ (80015e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f006 fa03 	bl	80079d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ce:	f7ff fba3 	bl	8000d18 <main>
  bx  lr
 80015d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015dc:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80015e0:	08009854 	.word	0x08009854
  ldr r2, =_sbss
 80015e4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80015e8:	24000334 	.word	0x24000334

080015ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC3_IRQHandler>
	...

080015f0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <BSP_LED_Init+0x28>
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d006      	beq.n	8001618 <BSP_LED_Init+0x28>
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d003      	beq.n	8001618 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001610:	f06f 0301 	mvn.w	r3, #1
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001616:	e055      	b.n	80016c4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800161e:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <BSP_LED_Init+0xe0>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	4a2a      	ldr	r2, [pc, #168]	@ (80016d0 <BSP_LED_Init+0xe0>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162e:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <BSP_LED_Init+0xe0>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	e021      	b.n	8001682 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d10f      	bne.n	8001664 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <BSP_LED_Init+0xe0>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <BSP_LED_Init+0xe0>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <BSP_LED_Init+0xe0>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	e00e      	b.n	8001682 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <BSP_LED_Init+0xe0>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166a:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <BSP_LED_Init+0xe0>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <BSP_LED_Init+0xe0>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <BSP_LED_Init+0xe4>)
 8001686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800168a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <BSP_LED_Init+0xe8>)
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	f107 0218 	add.w	r2, r7, #24
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fef4 	bl	8002494 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <BSP_LED_Init+0xe8>)
 80016b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <BSP_LED_Init+0xe4>)
 80016b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	f001 f9ba 	bl	8002a38 <HAL_GPIO_WritePin>
  }

  return ret;
 80016c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3730      	adds	r7, #48	@ 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	58024400 	.word	0x58024400
 80016d4:	080097ec 	.word	0x080097ec
 80016d8:	2400000c 	.word	0x2400000c

080016dc <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <BSP_LED_On+0x28>
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d006      	beq.n	8001704 <BSP_LED_On+0x28>
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d003      	beq.n	8001704 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016fc:	f06f 0301 	mvn.w	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00b      	b.n	800171c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <BSP_LED_On+0x4c>)
 8001708:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a07      	ldr	r2, [pc, #28]	@ (800172c <BSP_LED_On+0x50>)
 8001710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001714:	2201      	movs	r2, #1
 8001716:	4619      	mov	r1, r3
 8001718:	f001 f98e 	bl	8002a38 <HAL_GPIO_WritePin>
  }

  return ret;
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2400000c 	.word	0x2400000c
 800172c:	080097ec 	.word	0x080097ec

08001730 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <BSP_LED_Off+0x28>
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d006      	beq.n	8001758 <BSP_LED_Off+0x28>
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d003      	beq.n	8001758 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001750:	f06f 0301 	mvn.w	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e00b      	b.n	8001770 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <BSP_LED_Off+0x4c>)
 800175c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <BSP_LED_Off+0x50>)
 8001764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	f001 f964 	bl	8002a38 <HAL_GPIO_WritePin>
  }

  return ret;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2400000c 	.word	0x2400000c
 8001780:	080097ec 	.word	0x080097ec

08001784 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001794:	4b2e      	ldr	r3, [pc, #184]	@ (8001850 <BSP_PB_Init+0xcc>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179a:	4a2d      	ldr	r2, [pc, #180]	@ (8001850 <BSP_PB_Init+0xcc>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001850 <BSP_PB_Init+0xcc>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80017b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80017b8:	2302      	movs	r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <BSP_PB_Init+0xd0>)
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	f107 020c 	add.w	r2, r7, #12
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fe5b 	bl	8002494 <HAL_GPIO_Init>
 80017de:	e031      	b.n	8001844 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80017e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017e4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001854 <BSP_PB_Init+0xd0>)
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	f107 020c 	add.w	r2, r7, #12
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fe4d 	bl	8002494 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <BSP_PB_Init+0xd4>)
 8001800:	441a      	add	r2, r3
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4915      	ldr	r1, [pc, #84]	@ (800185c <BSP_PB_Init+0xd8>)
 8001806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f000 fdfc 	bl	800240a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4a10      	ldr	r2, [pc, #64]	@ (8001858 <BSP_PB_Init+0xd4>)
 8001818:	1898      	adds	r0, r3, r2
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <BSP_PB_Init+0xdc>)
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	461a      	mov	r2, r3
 8001824:	2100      	movs	r1, #0
 8001826:	f000 fdd1 	bl	80023cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800182a:	2028      	movs	r0, #40	@ 0x28
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <BSP_PB_Init+0xe0>)
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	f000 fac7 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800183c:	2328      	movs	r3, #40	@ 0x28
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fadd 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	58024400 	.word	0x58024400
 8001854:	24000018 	.word	0x24000018
 8001858:	24000144 	.word	0x24000144
 800185c:	080097f4 	.word	0x080097f4
 8001860:	2400001c 	.word	0x2400001c
 8001864:	24000020 	.word	0x24000020

08001868 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <BSP_PB_IRQHandler+0x20>)
 8001878:	4413      	add	r3, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fdda 	bl	8002434 <HAL_EXTI_IRQHandler>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	24000144 	.word	0x24000144

0800188c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018a2:	f06f 0301 	mvn.w	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e018      	b.n	80018dc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2294      	movs	r2, #148	@ 0x94
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <BSP_COM_Init+0x5c>)
 80018b4:	4413      	add	r3, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f86e 	bl	8001998 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2294      	movs	r2, #148	@ 0x94
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <BSP_COM_Init+0x5c>)
 80018c6:	4413      	add	r3, r2
 80018c8:	6839      	ldr	r1, [r7, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f80e 	bl	80018ec <MX_USART3_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018d6:	f06f 0303 	mvn.w	r3, #3
 80018da:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80018dc:	68fb      	ldr	r3, [r7, #12]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2400014c 	.word	0x2400014c

080018ec <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <MX_USART3_Init+0x60>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	220c      	movs	r2, #12
 800190a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	895b      	ldrh	r3, [r3, #10]
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	891b      	ldrh	r3, [r3, #8]
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	899b      	ldrh	r3, [r3, #12]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001938:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f004 fe6d 	bl	800661a <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	24000008 	.word	0x24000008

08001950 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <__io_putchar+0x30>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	2394      	movs	r3, #148	@ 0x94
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <__io_putchar+0x34>)
 8001966:	1898      	adds	r0, r3, r2
 8001968:	1d39      	adds	r1, r7, #4
 800196a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196e:	2201      	movs	r2, #1
 8001970:	f004 fead 	bl	80066ce <HAL_UART_Transmit>
  return ch;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	240001e0 	.word	0x240001e0
 8001984:	2400014c 	.word	0x2400014c

08001988 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fb9f 	bl	80010d0 <BSP_PB_Callback>
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a6:	4a26      	ldr	r2, [pc, #152]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80019be:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019e2:	4a17      	ldr	r2, [pc, #92]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <COM1_MspInit+0xa8>)
 80019ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80019fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019fe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	480b      	ldr	r0, [pc, #44]	@ (8001a44 <COM1_MspInit+0xac>)
 8001a18:	f000 fd3c 	bl	8002494 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a20:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001a26:	2307      	movs	r3, #7
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <COM1_MspInit+0xac>)
 8001a32:	f000 fd2f 	bl	8002494 <HAL_GPIO_Init>
}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58020c00 	.word	0x58020c00

08001a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4e:	2003      	movs	r0, #3
 8001a50:	f000 f9b0 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a54:	f001 fe54 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_Init+0x68>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	4913      	ldr	r1, [pc, #76]	@ (8001ab4 <HAL_Init+0x6c>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_Init+0x68>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab4 <HAL_Init+0x6c>)
 8001a7c:	5cd3      	ldrb	r3, [r2, r3]
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab8 <HAL_Init+0x70>)
 8001a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <HAL_Init+0x74>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f814 	bl	8001ac0 <HAL_InitTick>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e002      	b.n	8001aa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa2:	f7ff fb2f 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	080097dc 	.word	0x080097dc
 8001ab8:	24000004 	.word	0x24000004
 8001abc:	24000000 	.word	0x24000000

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ac8:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_InitTick+0x60>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e021      	b.n	8001b18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <HAL_InitTick+0x64>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_InitTick+0x60>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f9a3 	bl	8001e36 <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 f95f 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <HAL_InitTick+0x68>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	24000028 	.word	0x24000028
 8001b24:	24000000 	.word	0x24000000
 8001b28:	24000024 	.word	0x24000024

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	24000028 	.word	0x24000028
 8001b50:	240001e4 	.word	0x240001e4

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	240001e4 	.word	0x240001e4

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff ffee 	bl	8001b54 <HAL_GetTick>
 8001b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d005      	beq.n	8001b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <HAL_Delay+0x44>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b92:	bf00      	nop
 8001b94:	f7ff ffde 	bl	8001b54 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8f7      	bhi.n	8001b94 <HAL_Delay+0x28>
  {
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	24000028 	.word	0x24000028

08001bb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <HAL_GetREVID+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	5c001000 	.word	0x5c001000

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <__NVIC_SetPriorityGrouping+0x40>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <__NVIC_SetPriorityGrouping+0x40>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	05fa0000 	.word	0x05fa0000

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4907      	ldr	r1, [pc, #28]	@ (8001c68 <__NVIC_EnableIRQ+0x38>)
 8001c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db12      	blt.n	8001ca4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	490a      	ldr	r1, [pc, #40]	@ (8001cb0 <__NVIC_DisableIRQ+0x44>)
 8001c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	3320      	adds	r3, #32
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c98:	f3bf 8f4f 	dsb	sy
}
 8001c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c9e:	f3bf 8f6f 	isb	sy
}
 8001ca2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff05 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff1c 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff90 	bl	8001d08 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5f 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff0f 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff1f 	bl	8001c6c <__NVIC_DisableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff96 	bl	8001d70 <SysTick_Config>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e54:	f3bf 8f5f 	dmb	sy
}
 8001e58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_MPU_Disable+0x28>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	4a06      	ldr	r2, [pc, #24]	@ (8001e78 <HAL_MPU_Disable+0x28>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e64:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_MPU_Disable+0x2c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00
 8001e7c:	e000ed90 	.word	0xe000ed90

08001e80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e88:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <HAL_MPU_Enable+0x38>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_MPU_Enable+0x3c>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	4a09      	ldr	r2, [pc, #36]	@ (8001ebc <HAL_MPU_Enable+0x3c>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e9e:	f3bf 8f4f 	dsb	sy
}
 8001ea2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ea4:	f3bf 8f6f 	isb	sy
}
 8001ea8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed90 	.word	0xe000ed90
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	785a      	ldrb	r2, [r3, #1]
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_MPU_ConfigRegion+0x7c>)
 8001ece:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_MPU_ConfigRegion+0x7c>)
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <HAL_MPU_ConfigRegion+0x7c>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001edc:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_MPU_ConfigRegion+0x7c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7b1b      	ldrb	r3, [r3, #12]
 8001ee8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7adb      	ldrb	r3, [r3, #11]
 8001eee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7a9b      	ldrb	r3, [r3, #10]
 8001ef6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ef8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7b5b      	ldrb	r3, [r3, #13]
 8001efe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7b9b      	ldrb	r3, [r3, #14]
 8001f06:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7bdb      	ldrb	r3, [r3, #15]
 8001f0e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7a5b      	ldrb	r3, [r3, #9]
 8001f16:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7a1b      	ldrb	r3, [r3, #8]
 8001f1e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f20:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f28:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f2a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f2c:	6113      	str	r3, [r2, #16]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed90 	.word	0xe000ed90

08001f40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e237      	b.n	80023c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e22c      	b.n	80023c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a5c      	ldr	r2, [pc, #368]	@ (80020e0 <HAL_DMA_Abort_IT+0x1a0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d04a      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a5b      	ldr	r2, [pc, #364]	@ (80020e4 <HAL_DMA_Abort_IT+0x1a4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d045      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a59      	ldr	r2, [pc, #356]	@ (80020e8 <HAL_DMA_Abort_IT+0x1a8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d040      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a58      	ldr	r2, [pc, #352]	@ (80020ec <HAL_DMA_Abort_IT+0x1ac>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d03b      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a56      	ldr	r2, [pc, #344]	@ (80020f0 <HAL_DMA_Abort_IT+0x1b0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d036      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a55      	ldr	r2, [pc, #340]	@ (80020f4 <HAL_DMA_Abort_IT+0x1b4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d031      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a53      	ldr	r2, [pc, #332]	@ (80020f8 <HAL_DMA_Abort_IT+0x1b8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02c      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a52      	ldr	r2, [pc, #328]	@ (80020fc <HAL_DMA_Abort_IT+0x1bc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d027      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a50      	ldr	r2, [pc, #320]	@ (8002100 <HAL_DMA_Abort_IT+0x1c0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d022      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002104 <HAL_DMA_Abort_IT+0x1c4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d01d      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002108 <HAL_DMA_Abort_IT+0x1c8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d018      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a4c      	ldr	r2, [pc, #304]	@ (800210c <HAL_DMA_Abort_IT+0x1cc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8002110 <HAL_DMA_Abort_IT+0x1d0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00e      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a49      	ldr	r2, [pc, #292]	@ (8002114 <HAL_DMA_Abort_IT+0x1d4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a47      	ldr	r2, [pc, #284]	@ (8002118 <HAL_DMA_Abort_IT+0x1d8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a46      	ldr	r2, [pc, #280]	@ (800211c <HAL_DMA_Abort_IT+0x1dc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_DMA_Abort_IT+0xcc>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_DMA_Abort_IT+0xce>
 800200c:	2300      	movs	r3, #0
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8086 	beq.w	8002120 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2204      	movs	r2, #4
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2f      	ldr	r2, [pc, #188]	@ (80020e0 <HAL_DMA_Abort_IT+0x1a0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d04a      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2e      	ldr	r2, [pc, #184]	@ (80020e4 <HAL_DMA_Abort_IT+0x1a4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d045      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2c      	ldr	r2, [pc, #176]	@ (80020e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d040      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2b      	ldr	r2, [pc, #172]	@ (80020ec <HAL_DMA_Abort_IT+0x1ac>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d03b      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a29      	ldr	r2, [pc, #164]	@ (80020f0 <HAL_DMA_Abort_IT+0x1b0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d036      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a28      	ldr	r2, [pc, #160]	@ (80020f4 <HAL_DMA_Abort_IT+0x1b4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d031      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a26      	ldr	r2, [pc, #152]	@ (80020f8 <HAL_DMA_Abort_IT+0x1b8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02c      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a25      	ldr	r2, [pc, #148]	@ (80020fc <HAL_DMA_Abort_IT+0x1bc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d027      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a23      	ldr	r2, [pc, #140]	@ (8002100 <HAL_DMA_Abort_IT+0x1c0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d022      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a22      	ldr	r2, [pc, #136]	@ (8002104 <HAL_DMA_Abort_IT+0x1c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d01d      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a20      	ldr	r2, [pc, #128]	@ (8002108 <HAL_DMA_Abort_IT+0x1c8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d018      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1f      	ldr	r2, [pc, #124]	@ (800210c <HAL_DMA_Abort_IT+0x1cc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d013      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1d      	ldr	r2, [pc, #116]	@ (8002110 <HAL_DMA_Abort_IT+0x1d0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00e      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002114 <HAL_DMA_Abort_IT+0x1d4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002118 <HAL_DMA_Abort_IT+0x1d8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_DMA_Abort_IT+0x17c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a19      	ldr	r2, [pc, #100]	@ (800211c <HAL_DMA_Abort_IT+0x1dc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <HAL_DMA_Abort_IT+0x18e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e178      	b.n	80023c0 <HAL_DMA_Abort_IT+0x480>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e16f      	b.n	80023c0 <HAL_DMA_Abort_IT+0x480>
 80020e0:	40020010 	.word	0x40020010
 80020e4:	40020028 	.word	0x40020028
 80020e8:	40020040 	.word	0x40020040
 80020ec:	40020058 	.word	0x40020058
 80020f0:	40020070 	.word	0x40020070
 80020f4:	40020088 	.word	0x40020088
 80020f8:	400200a0 	.word	0x400200a0
 80020fc:	400200b8 	.word	0x400200b8
 8002100:	40020410 	.word	0x40020410
 8002104:	40020428 	.word	0x40020428
 8002108:	40020440 	.word	0x40020440
 800210c:	40020458 	.word	0x40020458
 8002110:	40020470 	.word	0x40020470
 8002114:	40020488 	.word	0x40020488
 8002118:	400204a0 	.word	0x400204a0
 800211c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 020e 	bic.w	r2, r2, #14
 800212e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6c      	ldr	r2, [pc, #432]	@ (80022e8 <HAL_DMA_Abort_IT+0x3a8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d04a      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6b      	ldr	r2, [pc, #428]	@ (80022ec <HAL_DMA_Abort_IT+0x3ac>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d045      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a69      	ldr	r2, [pc, #420]	@ (80022f0 <HAL_DMA_Abort_IT+0x3b0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d040      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a68      	ldr	r2, [pc, #416]	@ (80022f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d03b      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a66      	ldr	r2, [pc, #408]	@ (80022f8 <HAL_DMA_Abort_IT+0x3b8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d036      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a65      	ldr	r2, [pc, #404]	@ (80022fc <HAL_DMA_Abort_IT+0x3bc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d031      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a63      	ldr	r2, [pc, #396]	@ (8002300 <HAL_DMA_Abort_IT+0x3c0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02c      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a62      	ldr	r2, [pc, #392]	@ (8002304 <HAL_DMA_Abort_IT+0x3c4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d027      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a60      	ldr	r2, [pc, #384]	@ (8002308 <HAL_DMA_Abort_IT+0x3c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d022      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a5f      	ldr	r2, [pc, #380]	@ (800230c <HAL_DMA_Abort_IT+0x3cc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d01d      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5d      	ldr	r2, [pc, #372]	@ (8002310 <HAL_DMA_Abort_IT+0x3d0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d018      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002314 <HAL_DMA_Abort_IT+0x3d4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002318 <HAL_DMA_Abort_IT+0x3d8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00e      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a59      	ldr	r2, [pc, #356]	@ (800231c <HAL_DMA_Abort_IT+0x3dc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d009      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a57      	ldr	r2, [pc, #348]	@ (8002320 <HAL_DMA_Abort_IT+0x3e0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d004      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x290>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a56      	ldr	r2, [pc, #344]	@ (8002324 <HAL_DMA_Abort_IT+0x3e4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d108      	bne.n	80021e2 <HAL_DMA_Abort_IT+0x2a2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_DMA_Abort_IT+0x2b2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a3c      	ldr	r2, [pc, #240]	@ (80022e8 <HAL_DMA_Abort_IT+0x3a8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d072      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a3a      	ldr	r2, [pc, #232]	@ (80022ec <HAL_DMA_Abort_IT+0x3ac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d06d      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a39      	ldr	r2, [pc, #228]	@ (80022f0 <HAL_DMA_Abort_IT+0x3b0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d068      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a37      	ldr	r2, [pc, #220]	@ (80022f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d063      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a36      	ldr	r2, [pc, #216]	@ (80022f8 <HAL_DMA_Abort_IT+0x3b8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d05e      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a34      	ldr	r2, [pc, #208]	@ (80022fc <HAL_DMA_Abort_IT+0x3bc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d059      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a33      	ldr	r2, [pc, #204]	@ (8002300 <HAL_DMA_Abort_IT+0x3c0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d054      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a31      	ldr	r2, [pc, #196]	@ (8002304 <HAL_DMA_Abort_IT+0x3c4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d04f      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a30      	ldr	r2, [pc, #192]	@ (8002308 <HAL_DMA_Abort_IT+0x3c8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04a      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2e      	ldr	r2, [pc, #184]	@ (800230c <HAL_DMA_Abort_IT+0x3cc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d045      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2d      	ldr	r2, [pc, #180]	@ (8002310 <HAL_DMA_Abort_IT+0x3d0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d040      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2b      	ldr	r2, [pc, #172]	@ (8002314 <HAL_DMA_Abort_IT+0x3d4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d03b      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2a      	ldr	r2, [pc, #168]	@ (8002318 <HAL_DMA_Abort_IT+0x3d8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d036      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <HAL_DMA_Abort_IT+0x3dc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d031      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_DMA_Abort_IT+0x3e0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d02c      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <HAL_DMA_Abort_IT+0x3e4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d027      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <HAL_DMA_Abort_IT+0x3e8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a22      	ldr	r2, [pc, #136]	@ (800232c <HAL_DMA_Abort_IT+0x3ec>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a21      	ldr	r2, [pc, #132]	@ (8002330 <HAL_DMA_Abort_IT+0x3f0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002334 <HAL_DMA_Abort_IT+0x3f4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1e      	ldr	r2, [pc, #120]	@ (8002338 <HAL_DMA_Abort_IT+0x3f8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00e      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1c      	ldr	r2, [pc, #112]	@ (800233c <HAL_DMA_Abort_IT+0x3fc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002340 <HAL_DMA_Abort_IT+0x400>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x3a2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_DMA_Abort_IT+0x404>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d132      	bne.n	8002348 <HAL_DMA_Abort_IT+0x408>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e031      	b.n	800234a <HAL_DMA_Abort_IT+0x40a>
 80022e6:	bf00      	nop
 80022e8:	40020010 	.word	0x40020010
 80022ec:	40020028 	.word	0x40020028
 80022f0:	40020040 	.word	0x40020040
 80022f4:	40020058 	.word	0x40020058
 80022f8:	40020070 	.word	0x40020070
 80022fc:	40020088 	.word	0x40020088
 8002300:	400200a0 	.word	0x400200a0
 8002304:	400200b8 	.word	0x400200b8
 8002308:	40020410 	.word	0x40020410
 800230c:	40020428 	.word	0x40020428
 8002310:	40020440 	.word	0x40020440
 8002314:	40020458 	.word	0x40020458
 8002318:	40020470 	.word	0x40020470
 800231c:	40020488 	.word	0x40020488
 8002320:	400204a0 	.word	0x400204a0
 8002324:	400204b8 	.word	0x400204b8
 8002328:	58025408 	.word	0x58025408
 800232c:	5802541c 	.word	0x5802541c
 8002330:	58025430 	.word	0x58025430
 8002334:	58025444 	.word	0x58025444
 8002338:	58025458 	.word	0x58025458
 800233c:	5802546c 	.word	0x5802546c
 8002340:	58025480 	.word	0x58025480
 8002344:	58025494 	.word	0x58025494
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d028      	beq.n	80023a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800235c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2201      	movs	r2, #1
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800237c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002394:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800239e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop

080023cc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	460b      	mov	r3, r1
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e00a      	b.n	80023fe <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]
      break;
 80023f4:	e002      	b.n	80023fc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
      break;
 80023fa:	bf00      	nop
  }

  return status;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e003      	b.n	8002426 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2201      	movs	r2, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	011a      	lsls	r2, r3, #4
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_EXTI_IRQHandler+0x5c>)
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4798      	blx	r3
    }
  }
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	58000088 	.word	0x58000088

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024a2:	4b89      	ldr	r3, [pc, #548]	@ (80026c8 <HAL_GPIO_Init+0x234>)
 80024a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024a6:	e194      	b.n	80027d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8186 	beq.w	80027cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d005      	beq.n	80024d8 <HAL_GPIO_Init+0x44>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0201 	and.w	r2, r3, #1
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d017      	beq.n	8002576 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d123      	bne.n	80025ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	69b9      	ldr	r1, [r7, #24]
 80025c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80e0 	beq.w	80027cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260c:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <HAL_GPIO_Init+0x238>)
 800260e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002612:	4a2e      	ldr	r2, [pc, #184]	@ (80026cc <HAL_GPIO_Init+0x238>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800261c:	4b2b      	ldr	r3, [pc, #172]	@ (80026cc <HAL_GPIO_Init+0x238>)
 800261e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262a:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <HAL_GPIO_Init+0x23c>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <HAL_GPIO_Init+0x240>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d052      	beq.n	80026fc <HAL_GPIO_Init+0x268>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1f      	ldr	r2, [pc, #124]	@ (80026d8 <HAL_GPIO_Init+0x244>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_GPIO_Init+0x22e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1e      	ldr	r2, [pc, #120]	@ (80026dc <HAL_GPIO_Init+0x248>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d02b      	beq.n	80026be <HAL_GPIO_Init+0x22a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_GPIO_Init+0x24c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x226>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1c      	ldr	r2, [pc, #112]	@ (80026e4 <HAL_GPIO_Init+0x250>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x222>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <HAL_GPIO_Init+0x254>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x21e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1a      	ldr	r2, [pc, #104]	@ (80026ec <HAL_GPIO_Init+0x258>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x21a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <HAL_GPIO_Init+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x216>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <HAL_GPIO_Init+0x260>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x212>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a17      	ldr	r2, [pc, #92]	@ (80026f8 <HAL_GPIO_Init+0x264>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x20e>
 800269e:	2309      	movs	r3, #9
 80026a0:	e02d      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026a2:	230a      	movs	r3, #10
 80026a4:	e02b      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026a6:	2308      	movs	r3, #8
 80026a8:	e029      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e027      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e025      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e023      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e021      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e01f      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e01d      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e01b      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026c6:	bf00      	nop
 80026c8:	58000080 	.word	0x58000080
 80026cc:	58024400 	.word	0x58024400
 80026d0:	58000400 	.word	0x58000400
 80026d4:	58020000 	.word	0x58020000
 80026d8:	58020400 	.word	0x58020400
 80026dc:	58020800 	.word	0x58020800
 80026e0:	58020c00 	.word	0x58020c00
 80026e4:	58021000 	.word	0x58021000
 80026e8:	58021400 	.word	0x58021400
 80026ec:	58021800 	.word	0x58021800
 80026f0:	58021c00 	.word	0x58021c00
 80026f4:	58022000 	.word	0x58022000
 80026f8:	58022400 	.word	0x58022400
 80026fc:	2300      	movs	r3, #0
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	f002 0203 	and.w	r2, r2, #3
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	4093      	lsls	r3, r2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270e:	4938      	ldr	r1, [pc, #224]	@ (80027f0 <HAL_GPIO_Init+0x35c>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3301      	adds	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f ae63 	bne.w	80024a8 <HAL_GPIO_Init+0x14>
  }
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	3724      	adds	r7, #36	@ 0x24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	58000400 	.word	0x58000400

080027f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002802:	4b75      	ldr	r3, [pc, #468]	@ (80029d8 <HAL_GPIO_DeInit+0x1e4>)
 8002804:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002806:	e0d9      	b.n	80029bc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002808:	2201      	movs	r2, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80cc 	beq.w	80029b6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800281e:	4a6f      	ldr	r2, [pc, #444]	@ (80029dc <HAL_GPIO_DeInit+0x1e8>)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	220f      	movs	r2, #15
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a67      	ldr	r2, [pc, #412]	@ (80029e0 <HAL_GPIO_DeInit+0x1ec>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d037      	beq.n	80028b8 <HAL_GPIO_DeInit+0xc4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a66      	ldr	r2, [pc, #408]	@ (80029e4 <HAL_GPIO_DeInit+0x1f0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_GPIO_DeInit+0xc0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a65      	ldr	r2, [pc, #404]	@ (80029e8 <HAL_GPIO_DeInit+0x1f4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d02b      	beq.n	80028b0 <HAL_GPIO_DeInit+0xbc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a64      	ldr	r2, [pc, #400]	@ (80029ec <HAL_GPIO_DeInit+0x1f8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d025      	beq.n	80028ac <HAL_GPIO_DeInit+0xb8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a63      	ldr	r2, [pc, #396]	@ (80029f0 <HAL_GPIO_DeInit+0x1fc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01f      	beq.n	80028a8 <HAL_GPIO_DeInit+0xb4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a62      	ldr	r2, [pc, #392]	@ (80029f4 <HAL_GPIO_DeInit+0x200>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d019      	beq.n	80028a4 <HAL_GPIO_DeInit+0xb0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a61      	ldr	r2, [pc, #388]	@ (80029f8 <HAL_GPIO_DeInit+0x204>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_GPIO_DeInit+0xac>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a60      	ldr	r2, [pc, #384]	@ (80029fc <HAL_GPIO_DeInit+0x208>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00d      	beq.n	800289c <HAL_GPIO_DeInit+0xa8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a5f      	ldr	r2, [pc, #380]	@ (8002a00 <HAL_GPIO_DeInit+0x20c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <HAL_GPIO_DeInit+0xa4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a04 <HAL_GPIO_DeInit+0x210>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_GPIO_DeInit+0xa0>
 8002890:	2309      	movs	r3, #9
 8002892:	e012      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 8002894:	230a      	movs	r3, #10
 8002896:	e010      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 8002898:	2308      	movs	r3, #8
 800289a:	e00e      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 800289c:	2307      	movs	r3, #7
 800289e:	e00c      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 80028a0:	2306      	movs	r3, #6
 80028a2:	e00a      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 80028a4:	2305      	movs	r3, #5
 80028a6:	e008      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e006      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e004      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e002      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_GPIO_DeInit+0xc6>
 80028b8:	2300      	movs	r3, #0
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	f002 0203 	and.w	r2, r2, #3
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	4093      	lsls	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d136      	bne.n	8002938 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	401a      	ands	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	401a      	ands	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f4:	4013      	ands	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43db      	mvns	r3, r3
 8002902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002906:	4013      	ands	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800291a:	4a30      	ldr	r2, [pc, #192]	@ (80029dc <HAL_GPIO_DeInit+0x1e8>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	43da      	mvns	r2, r3
 800292a:	482c      	ldr	r0, [pc, #176]	@ (80029dc <HAL_GPIO_DeInit+0x1e8>)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	400a      	ands	r2, r1
 8002932:	3302      	adds	r3, #2
 8002934:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2103      	movs	r1, #3
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	08d2      	lsrs	r2, r2, #3
 800296c:	4019      	ands	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2103      	movs	r1, #3
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	2101      	movs	r1, #1
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2103      	movs	r1, #3
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f47f af1f 	bne.w	8002808 <HAL_GPIO_DeInit+0x14>
  }
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	58000080 	.word	0x58000080
 80029dc:	58000400 	.word	0x58000400
 80029e0:	58020000 	.word	0x58020000
 80029e4:	58020400 	.word	0x58020400
 80029e8:	58020800 	.word	0x58020800
 80029ec:	58020c00 	.word	0x58020c00
 80029f0:	58021000 	.word	0x58021000
 80029f4:	58021400 	.word	0x58021400
 80029f8:	58021800 	.word	0x58021800
 80029fc:	58021c00 	.word	0x58021c00
 8002a00:	58022000 	.word	0x58022000
 8002a04:	58022400 	.word	0x58022400

08002a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e001      	b.n	8002a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_PWREx_ConfigSupply+0x70>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d00a      	beq.n	8002a96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a80:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <HAL_PWREx_ConfigSupply+0x70>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e01f      	b.n	8002ad2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e01d      	b.n	8002ad2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_PWREx_ConfigSupply+0x70>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f023 0207 	bic.w	r2, r3, #7
 8002a9e:	490f      	ldr	r1, [pc, #60]	@ (8002adc <HAL_PWREx_ConfigSupply+0x70>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002aa6:	f7ff f855 	bl	8001b54 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aac:	e009      	b.n	8002ac2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aae:	f7ff f851 	bl	8001b54 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002abc:	d901      	bls.n	8002ac2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e007      	b.n	8002ad2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_PWREx_ConfigSupply+0x70>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ace:	d1ee      	bne.n	8002aae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	58024800 	.word	0x58024800

08002ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	@ 0x30
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f000 bc48 	b.w	8003384 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8088 	beq.w	8002c12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b02:	4b99      	ldr	r3, [pc, #612]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b0c:	4b96      	ldr	r3, [pc, #600]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d007      	beq.n	8002b28 <HAL_RCC_OscConfig+0x48>
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	2b18      	cmp	r3, #24
 8002b1c:	d111      	bne.n	8002b42 <HAL_RCC_OscConfig+0x62>
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4b8f      	ldr	r3, [pc, #572]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d06d      	beq.n	8002c10 <HAL_RCC_OscConfig+0x130>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d169      	bne.n	8002c10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f000 bc21 	b.w	8003384 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x7a>
 8002b4c:	4b86      	ldr	r3, [pc, #536]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a85      	ldr	r2, [pc, #532]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	e02e      	b.n	8002bb8 <HAL_RCC_OscConfig+0xd8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x9c>
 8002b62:	4b81      	ldr	r3, [pc, #516]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a80      	ldr	r2, [pc, #512]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a7d      	ldr	r2, [pc, #500]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e01d      	b.n	8002bb8 <HAL_RCC_OscConfig+0xd8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0xc0>
 8002b86:	4b78      	ldr	r3, [pc, #480]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a77      	ldr	r2, [pc, #476]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b75      	ldr	r3, [pc, #468]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a74      	ldr	r2, [pc, #464]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0xd8>
 8002ba0:	4b71      	ldr	r3, [pc, #452]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a70      	ldr	r2, [pc, #448]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b6e      	ldr	r3, [pc, #440]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6d      	ldr	r2, [pc, #436]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ffc8 	bl	8001b54 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe ffc4 	bl	8001b54 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	@ 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e3d4      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bda:	4b63      	ldr	r3, [pc, #396]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0xe8>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe ffb4 	bl	8001b54 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe ffb0 	bl	8001b54 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	@ 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e3c0      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c02:	4b59      	ldr	r3, [pc, #356]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x110>
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80ca 	beq.w	8002db4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c20:	4b51      	ldr	r3, [pc, #324]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_RCC_OscConfig+0x166>
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	2b18      	cmp	r3, #24
 8002c3a:	d156      	bne.n	8002cea <HAL_RCC_OscConfig+0x20a>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d151      	bne.n	8002cea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c46:	4b48      	ldr	r3, [pc, #288]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x17e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e392      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c5e:	4b42      	ldr	r3, [pc, #264]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0219 	bic.w	r2, r3, #25
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	493f      	ldr	r1, [pc, #252]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe ff70 	bl	8001b54 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fe ff6c 	bl	8001b54 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e37c      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c8a:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	f7fe ff8d 	bl	8001bb4 <HAL_GetREVID>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d817      	bhi.n	8002cd4 <HAL_RCC_OscConfig+0x1f4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b40      	cmp	r3, #64	@ 0x40
 8002caa:	d108      	bne.n	8002cbe <HAL_RCC_OscConfig+0x1de>
 8002cac:	4b2e      	ldr	r3, [pc, #184]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbc:	e07a      	b.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	031b      	lsls	r3, r3, #12
 8002ccc:	4926      	ldr	r1, [pc, #152]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd2:	e06f      	b.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b24      	ldr	r3, [pc, #144]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4921      	ldr	r1, [pc, #132]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	e064      	b.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d047      	beq.n	8002d82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0219 	bic.w	r2, r3, #25
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	491a      	ldr	r1, [pc, #104]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe ff26 	bl	8001b54 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe ff22 	bl	8001b54 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e332      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1e:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	f7fe ff43 	bl	8001bb4 <HAL_GetREVID>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d819      	bhi.n	8002d6c <HAL_RCC_OscConfig+0x28c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	d108      	bne.n	8002d52 <HAL_RCC_OscConfig+0x272>
 8002d40:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d48:	4a07      	ldr	r2, [pc, #28]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d4e:	6053      	str	r3, [r2, #4]
 8002d50:	e030      	b.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	031b      	lsls	r3, r3, #12
 8002d60:	4901      	ldr	r1, [pc, #4]	@ (8002d68 <HAL_RCC_OscConfig+0x288>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
 8002d66:	e025      	b.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	4997      	ldr	r1, [pc, #604]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
 8002d80:	e018      	b.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b95      	ldr	r3, [pc, #596]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a94      	ldr	r2, [pc, #592]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fee1 	bl	8001b54 <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe fedd 	bl	8001b54 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e2ed      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da8:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a9 	beq.w	8002f14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc2:	4b85      	ldr	r3, [pc, #532]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dcc:	4b82      	ldr	r3, [pc, #520]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d007      	beq.n	8002de8 <HAL_RCC_OscConfig+0x308>
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b18      	cmp	r3, #24
 8002ddc:	d13a      	bne.n	8002e54 <HAL_RCC_OscConfig+0x374>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d135      	bne.n	8002e54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002de8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x320>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b80      	cmp	r3, #128	@ 0x80
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e2c1      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e00:	f7fe fed8 	bl	8001bb4 <HAL_GetREVID>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d817      	bhi.n	8002e3e <HAL_RCC_OscConfig+0x35e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d108      	bne.n	8002e28 <HAL_RCC_OscConfig+0x348>
 8002e16:	4b70      	ldr	r3, [pc, #448]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e1e:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e26:	e075      	b.n	8002f14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e28:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	069b      	lsls	r3, r3, #26
 8002e36:	4968      	ldr	r1, [pc, #416]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e3c:	e06a      	b.n	8002f14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e3e:	4b66      	ldr	r3, [pc, #408]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	4962      	ldr	r1, [pc, #392]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e52:	e05f      	b.n	8002f14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d042      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fe74 	bl	8001b54 <HAL_GetTick>
 8002e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e70:	f7fe fe70 	bl	8001b54 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e280      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e82:	4b55      	ldr	r3, [pc, #340]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e8e:	f7fe fe91 	bl	8001bb4 <HAL_GetREVID>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d817      	bhi.n	8002ecc <HAL_RCC_OscConfig+0x3ec>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d108      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x3d6>
 8002ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002eac:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002eae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002eb2:	6053      	str	r3, [r2, #4]
 8002eb4:	e02e      	b.n	8002f14 <HAL_RCC_OscConfig+0x434>
 8002eb6:	4b48      	ldr	r3, [pc, #288]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	069b      	lsls	r3, r3, #26
 8002ec4:	4944      	ldr	r1, [pc, #272]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
 8002eca:	e023      	b.n	8002f14 <HAL_RCC_OscConfig+0x434>
 8002ecc:	4b42      	ldr	r3, [pc, #264]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	493f      	ldr	r1, [pc, #252]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60cb      	str	r3, [r1, #12]
 8002ee0:	e018      	b.n	8002f14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe fe31 	bl	8001b54 <HAL_GetTick>
 8002ef2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ef6:	f7fe fe2d 	bl	8001b54 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e23d      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f08:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d036      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d019      	beq.n	8002f5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f28:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe fe0e 	bl	8001b54 <HAL_GetTick>
 8002f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fe0a 	bl	8001b54 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e21a      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f4e:	4b22      	ldr	r3, [pc, #136]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x45c>
 8002f5a:	e018      	b.n	8002f8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f60:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe fdf4 	bl	8001b54 <HAL_GetTick>
 8002f6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe fdf0 	bl	8001b54 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e200      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d039      	beq.n	800300e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fdd1 	bl	8001b54 <HAL_GetTick>
 8002fb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb6:	f7fe fdcd 	bl	8001b54 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1dd      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x4d6>
 8002fd4:	e01b      	b.n	800300e <HAL_RCC_OscConfig+0x52e>
 8002fd6:	bf00      	nop
 8002fd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a9a      	ldr	r2, [pc, #616]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8002fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fdb4 	bl	8001b54 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff0:	f7fe fdb0 	bl	8001b54 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1c0      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003002:	4b92      	ldr	r3, [pc, #584]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8081 	beq.w	800311e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800301c:	4b8c      	ldr	r3, [pc, #560]	@ (8003250 <HAL_RCC_OscConfig+0x770>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a8b      	ldr	r2, [pc, #556]	@ (8003250 <HAL_RCC_OscConfig+0x770>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003028:	f7fe fd94 	bl	8001b54 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe fd90 	bl	8001b54 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1a0      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003042:	4b83      	ldr	r3, [pc, #524]	@ (8003250 <HAL_RCC_OscConfig+0x770>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x584>
 8003056:	4b7d      	ldr	r3, [pc, #500]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305a:	4a7c      	ldr	r2, [pc, #496]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6713      	str	r3, [r2, #112]	@ 0x70
 8003062:	e02d      	b.n	80030c0 <HAL_RCC_OscConfig+0x5e0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <HAL_RCC_OscConfig+0x5a6>
 800306c:	4b77      	ldr	r3, [pc, #476]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a76      	ldr	r2, [pc, #472]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	4b74      	ldr	r3, [pc, #464]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4a73      	ldr	r2, [pc, #460]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	@ 0x70
 8003084:	e01c      	b.n	80030c0 <HAL_RCC_OscConfig+0x5e0>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b05      	cmp	r3, #5
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5c8>
 800308e:	4b6f      	ldr	r3, [pc, #444]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	4a6e      	ldr	r2, [pc, #440]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	@ 0x70
 800309a:	4b6c      	ldr	r3, [pc, #432]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	4a6b      	ldr	r2, [pc, #428]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0x5e0>
 80030a8:	4b68      	ldr	r3, [pc, #416]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ac:	4a67      	ldr	r2, [pc, #412]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b4:	4b65      	ldr	r3, [pc, #404]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	4a64      	ldr	r2, [pc, #400]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80030ba:	f023 0304 	bic.w	r3, r3, #4
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fd44 	bl	8001b54 <HAL_GetTick>
 80030cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe fd40 	bl	8001b54 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e14e      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030e6:	4b59      	ldr	r3, [pc, #356]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0ee      	beq.n	80030d0 <HAL_RCC_OscConfig+0x5f0>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fd2e 	bl	8001b54 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe fd2a 	bl	8001b54 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e138      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003112:	4b4e      	ldr	r3, [pc, #312]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ee      	bne.n	80030fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 812d 	beq.w	8003382 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003128:	4b48      	ldr	r3, [pc, #288]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003130:	2b18      	cmp	r3, #24
 8003132:	f000 80bd 	beq.w	80032b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	2b02      	cmp	r3, #2
 800313c:	f040 809e 	bne.w	800327c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b42      	ldr	r3, [pc, #264]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a41      	ldr	r2, [pc, #260]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fd02 	bl	8001b54 <HAL_GetTick>
 8003150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fcfe 	bl	8001b54 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e10e      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003166:	4b39      	ldr	r3, [pc, #228]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	4b36      	ldr	r3, [pc, #216]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003176:	4b37      	ldr	r3, [pc, #220]	@ (8003254 <HAL_RCC_OscConfig+0x774>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	430a      	orrs	r2, r1
 8003186:	4931      	ldr	r1, [pc, #196]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	628b      	str	r3, [r1, #40]	@ 0x28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	3b01      	subs	r3, #1
 8003192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319a:	3b01      	subs	r3, #1
 800319c:	025b      	lsls	r3, r3, #9
 800319e:	b29b      	uxth	r3, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	3b01      	subs	r3, #1
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	3b01      	subs	r3, #1
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80031bc:	4923      	ldr	r1, [pc, #140]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80031c2:	4b22      	ldr	r3, [pc, #136]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	4a21      	ldr	r2, [pc, #132]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ce:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031d2:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <HAL_RCC_OscConfig+0x778>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031da:	00d2      	lsls	r2, r2, #3
 80031dc:	491b      	ldr	r1, [pc, #108]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	f023 020c 	bic.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	4917      	ldr	r1, [pc, #92]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031f4:	4b15      	ldr	r3, [pc, #84]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	f023 0202 	bic.w	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003200:	4912      	ldr	r1, [pc, #72]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003202:	4313      	orrs	r3, r2
 8003204:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003206:	4b11      	ldr	r3, [pc, #68]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	4a10      	ldr	r2, [pc, #64]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003210:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	4a0d      	ldr	r2, [pc, #52]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800321c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	4a0a      	ldr	r2, [pc, #40]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003228:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	4a07      	ldr	r2, [pc, #28]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003236:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a04      	ldr	r2, [pc, #16]	@ (800324c <HAL_RCC_OscConfig+0x76c>)
 800323c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe fc87 	bl	8001b54 <HAL_GetTick>
 8003246:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003248:	e011      	b.n	800326e <HAL_RCC_OscConfig+0x78e>
 800324a:	bf00      	nop
 800324c:	58024400 	.word	0x58024400
 8003250:	58024800 	.word	0x58024800
 8003254:	fffffc0c 	.word	0xfffffc0c
 8003258:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fc7a 	bl	8001b54 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e08a      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800326e:	4b47      	ldr	r3, [pc, #284]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x77c>
 800327a:	e082      	b.n	8003382 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	4b43      	ldr	r3, [pc, #268]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a42      	ldr	r2, [pc, #264]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 8003282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe fc64 	bl	8001b54 <HAL_GetTick>
 800328c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe fc60 	bl	8001b54 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e070      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032a2:	4b3a      	ldr	r3, [pc, #232]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x7b0>
 80032ae:	e068      	b.n	8003382 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032b0:	4b36      	ldr	r3, [pc, #216]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032b6:	4b35      	ldr	r3, [pc, #212]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d031      	beq.n	8003328 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d12a      	bne.n	8003328 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d122      	bne.n	8003328 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d11a      	bne.n	8003328 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0a5b      	lsrs	r3, r3, #9
 80032f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d111      	bne.n	8003328 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d108      	bne.n	8003328 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	0e1b      	lsrs	r3, r3, #24
 800331a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003322:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e02b      	b.n	8003384 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800332c:	4b17      	ldr	r3, [pc, #92]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003336:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	d01f      	beq.n	8003382 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003342:	4b12      	ldr	r3, [pc, #72]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	4a11      	ldr	r2, [pc, #68]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334e:	f7fe fc01 	bl	8001b54 <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003354:	bf00      	nop
 8003356:	f7fe fbfd 	bl	8001b54 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	4293      	cmp	r3, r2
 8003360:	d0f9      	beq.n	8003356 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 8003364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003366:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <HAL_RCC_OscConfig+0x8b0>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800336e:	00d2      	lsls	r2, r2, #3
 8003370:	4906      	ldr	r1, [pc, #24]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 8003372:	4313      	orrs	r3, r2
 8003374:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003376:	4b05      	ldr	r3, [pc, #20]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 8003378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337a:	4a04      	ldr	r2, [pc, #16]	@ (800338c <HAL_RCC_OscConfig+0x8ac>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3730      	adds	r7, #48	@ 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	ffff0007 	.word	0xffff0007

08003394 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e19c      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b8a      	ldr	r3, [pc, #552]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b87      	ldr	r3, [pc, #540]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 020f 	bic.w	r2, r3, #15
 80033be:	4985      	ldr	r1, [pc, #532]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b83      	ldr	r3, [pc, #524]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e184      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	4b7b      	ldr	r3, [pc, #492]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d908      	bls.n	8003406 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033f4:	4b78      	ldr	r3, [pc, #480]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4975      	ldr	r1, [pc, #468]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003402:	4313      	orrs	r3, r2
 8003404:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d010      	beq.n	8003434 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	4b70      	ldr	r3, [pc, #448]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800341e:	429a      	cmp	r2, r3
 8003420:	d908      	bls.n	8003434 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003422:	4b6d      	ldr	r3, [pc, #436]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	496a      	ldr	r1, [pc, #424]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003430:	4313      	orrs	r3, r2
 8003432:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	4b64      	ldr	r3, [pc, #400]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800344c:	429a      	cmp	r2, r3
 800344e:	d908      	bls.n	8003462 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003450:	4b61      	ldr	r3, [pc, #388]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	495e      	ldr	r1, [pc, #376]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 800345e:	4313      	orrs	r3, r2
 8003460:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	4b59      	ldr	r3, [pc, #356]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800347a:	429a      	cmp	r2, r3
 800347c:	d908      	bls.n	8003490 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800347e:	4b56      	ldr	r3, [pc, #344]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4953      	ldr	r1, [pc, #332]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 800348c:	4313      	orrs	r3, r2
 800348e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	4b4d      	ldr	r3, [pc, #308]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d908      	bls.n	80034be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ac:	4b4a      	ldr	r3, [pc, #296]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f023 020f 	bic.w	r2, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4947      	ldr	r1, [pc, #284]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d055      	beq.n	8003576 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034ca:	4b43      	ldr	r3, [pc, #268]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	4940      	ldr	r1, [pc, #256]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034e4:	4b3c      	ldr	r3, [pc, #240]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d121      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0f6      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034fc:	4b36      	ldr	r3, [pc, #216]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d115      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0ea      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003514:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0de      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003524:	4b2c      	ldr	r3, [pc, #176]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0d6      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003534:	4b28      	ldr	r3, [pc, #160]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f023 0207 	bic.w	r2, r3, #7
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4925      	ldr	r1, [pc, #148]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003542:	4313      	orrs	r3, r2
 8003544:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003546:	f7fe fb05 	bl	8001b54 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354c:	e00a      	b.n	8003564 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354e:	f7fe fb01 	bl	8001b54 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0be      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	4b1c      	ldr	r3, [pc, #112]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	429a      	cmp	r2, r3
 8003574:	d1eb      	bne.n	800354e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d010      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	429a      	cmp	r2, r3
 8003590:	d208      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003592:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	490e      	ldr	r1, [pc, #56]	@ (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d214      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 020f 	bic.w	r2, r3, #15
 80035ba:	4906      	ldr	r1, [pc, #24]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e086      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
 80035d4:	52002000 	.word	0x52002000
 80035d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d208      	bcs.n	800360a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f8:	4b3c      	ldr	r3, [pc, #240]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	4939      	ldr	r1, [pc, #228]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003606:	4313      	orrs	r3, r2
 8003608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	4b34      	ldr	r3, [pc, #208]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003622:	429a      	cmp	r2, r3
 8003624:	d208      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003626:	4b31      	ldr	r3, [pc, #196]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	492e      	ldr	r1, [pc, #184]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003634:	4313      	orrs	r3, r2
 8003636:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	4b28      	ldr	r3, [pc, #160]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003650:	429a      	cmp	r2, r3
 8003652:	d208      	bcs.n	8003666 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003654:	4b25      	ldr	r3, [pc, #148]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	4922      	ldr	r1, [pc, #136]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003662:	4313      	orrs	r3, r2
 8003664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800367e:	429a      	cmp	r2, r3
 8003680:	d208      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003682:	4b1a      	ldr	r3, [pc, #104]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4917      	ldr	r1, [pc, #92]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003690:	4313      	orrs	r3, r2
 8003692:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003694:	f000 f834 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	4912      	ldr	r1, [pc, #72]	@ (80036f0 <HAL_RCC_ClockConfig+0x35c>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b2:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <HAL_RCC_ClockConfig+0x358>)
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <HAL_RCC_ClockConfig+0x35c>)
 80036bc:	5cd3      	ldrb	r3, [r2, r3]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <HAL_RCC_ClockConfig+0x360>)
 80036ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036cc:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <HAL_RCC_ClockConfig+0x364>)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <HAL_RCC_ClockConfig+0x368>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe f9f2 	bl	8001ac0 <HAL_InitTick>
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	58024400 	.word	0x58024400
 80036f0:	080097dc 	.word	0x080097dc
 80036f4:	24000004 	.word	0x24000004
 80036f8:	24000000 	.word	0x24000000
 80036fc:	24000024 	.word	0x24000024

08003700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003706:	4bb3      	ldr	r3, [pc, #716]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800370e:	2b18      	cmp	r3, #24
 8003710:	f200 8155 	bhi.w	80039be <HAL_RCC_GetSysClockFreq+0x2be>
 8003714:	a201      	add	r2, pc, #4	@ (adr r2, 800371c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003781 	.word	0x08003781
 8003720:	080039bf 	.word	0x080039bf
 8003724:	080039bf 	.word	0x080039bf
 8003728:	080039bf 	.word	0x080039bf
 800372c:	080039bf 	.word	0x080039bf
 8003730:	080039bf 	.word	0x080039bf
 8003734:	080039bf 	.word	0x080039bf
 8003738:	080039bf 	.word	0x080039bf
 800373c:	080037a7 	.word	0x080037a7
 8003740:	080039bf 	.word	0x080039bf
 8003744:	080039bf 	.word	0x080039bf
 8003748:	080039bf 	.word	0x080039bf
 800374c:	080039bf 	.word	0x080039bf
 8003750:	080039bf 	.word	0x080039bf
 8003754:	080039bf 	.word	0x080039bf
 8003758:	080039bf 	.word	0x080039bf
 800375c:	080037ad 	.word	0x080037ad
 8003760:	080039bf 	.word	0x080039bf
 8003764:	080039bf 	.word	0x080039bf
 8003768:	080039bf 	.word	0x080039bf
 800376c:	080039bf 	.word	0x080039bf
 8003770:	080039bf 	.word	0x080039bf
 8003774:	080039bf 	.word	0x080039bf
 8003778:	080039bf 	.word	0x080039bf
 800377c:	080037b3 	.word	0x080037b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003780:	4b94      	ldr	r3, [pc, #592]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800378c:	4b91      	ldr	r3, [pc, #580]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	4a90      	ldr	r2, [pc, #576]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800379e:	e111      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037a0:	4b8d      	ldr	r3, [pc, #564]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037a2:	61bb      	str	r3, [r7, #24]
      break;
 80037a4:	e10e      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80037a6:	4b8d      	ldr	r3, [pc, #564]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037a8:	61bb      	str	r3, [r7, #24]
      break;
 80037aa:	e10b      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80037ac:	4b8c      	ldr	r3, [pc, #560]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037ae:	61bb      	str	r3, [r7, #24]
      break;
 80037b0:	e108      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037b2:	4b88      	ldr	r3, [pc, #544]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037bc:	4b85      	ldr	r3, [pc, #532]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037c8:	4b82      	ldr	r3, [pc, #520]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037d2:	4b80      	ldr	r3, [pc, #512]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80e1 	beq.w	80039b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	f000 8083 	beq.w	8003904 <HAL_RCC_GetSysClockFreq+0x204>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b02      	cmp	r3, #2
 8003802:	f200 80a1 	bhi.w	8003948 <HAL_RCC_GetSysClockFreq+0x248>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x114>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d056      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003812:	e099      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003814:	4b6f      	ldr	r3, [pc, #444]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02d      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003820:	4b6c      	ldr	r3, [pc, #432]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	4a6b      	ldr	r2, [pc, #428]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800384a:	4b62      	ldr	r3, [pc, #392]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385a:	ed97 6a02 	vldr	s12, [r7, #8]
 800385e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800386e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003876:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800387a:	e087      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80039e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800388a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388e:	4b51      	ldr	r3, [pc, #324]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389e:	ed97 6a02 	vldr	s12, [r7, #8]
 80038a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038be:	e065      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80039ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d2:	4b40      	ldr	r3, [pc, #256]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003902:	e043      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80039f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003916:	4b2f      	ldr	r3, [pc, #188]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003926:	ed97 6a02 	vldr	s12, [r7, #8]
 800392a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800392e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800393a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800393e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003946:	e021      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80039ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395a:	4b1e      	ldr	r3, [pc, #120]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396a:	ed97 6a02 	vldr	s12, [r7, #8]
 800396e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800397e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800398a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800398c:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	0a5b      	lsrs	r3, r3, #9
 8003992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003996:	3301      	adds	r3, #1
 8003998:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	ee07 3a90 	vmov	s15, r3
 80039a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b0:	ee17 3a90 	vmov	r3, s15
 80039b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80039b6:	e005      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
      break;
 80039bc:	e002      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80039be:	4b07      	ldr	r3, [pc, #28]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039c0:	61bb      	str	r3, [r7, #24]
      break;
 80039c2:	bf00      	nop
  }

  return sysclockfreq;
 80039c4:	69bb      	ldr	r3, [r7, #24]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	@ 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
 80039d8:	03d09000 	.word	0x03d09000
 80039dc:	003d0900 	.word	0x003d0900
 80039e0:	017d7840 	.word	0x017d7840
 80039e4:	46000000 	.word	0x46000000
 80039e8:	4c742400 	.word	0x4c742400
 80039ec:	4a742400 	.word	0x4a742400
 80039f0:	4bbebc20 	.word	0x4bbebc20

080039f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039fa:	f7ff fe81 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	490f      	ldr	r1, [pc, #60]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a18:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	4a07      	ldr	r2, [pc, #28]	@ (8003a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a32:	4a07      	ldr	r2, [pc, #28]	@ (8003a50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a38:	4b04      	ldr	r3, [pc, #16]	@ (8003a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	58024400 	.word	0x58024400
 8003a48:	080097dc 	.word	0x080097dc
 8003a4c:	24000004 	.word	0x24000004
 8003a50:	24000000 	.word	0x24000000

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a58:	f7ff ffcc 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	@ (8003a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	080097dc 	.word	0x080097dc

08003a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a84:	f7ff ffb6 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4904      	ldr	r1, [pc, #16]	@ (8003aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	080097dc 	.word	0x080097dc

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab0:	b0ca      	sub	sp, #296	@ 0x128
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	ea54 0305 	orrs.w	r3, r4, r5
 8003ad6:	d049      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ae2:	d02f      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ae8:	d828      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aee:	d01a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003af4:	d822      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003afe:	d007      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b00:	e01c      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b02:	4bb8      	ldr	r3, [pc, #736]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	4ab7      	ldr	r2, [pc, #732]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b0e:	e01a      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	3308      	adds	r3, #8
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fc8f 	bl	800543c <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b24:	e00f      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	3328      	adds	r3, #40	@ 0x28
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fd36 	bl	80055a0 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b4e:	4ba5      	ldr	r3, [pc, #660]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b5c:	4aa1      	ldr	r2, [pc, #644]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b78:	f04f 0900 	mov.w	r9, #0
 8003b7c:	ea58 0309 	orrs.w	r3, r8, r9
 8003b80:	d047      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d82a      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba9 	.word	0x08003ba9
 8003b98:	08003bb7 	.word	0x08003bb7
 8003b9c:	08003bcd 	.word	0x08003bcd
 8003ba0:	08003beb 	.word	0x08003beb
 8003ba4:	08003beb 	.word	0x08003beb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	4a8d      	ldr	r2, [pc, #564]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bb4:	e01a      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 fc3c 	bl	800543c <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bca:	e00f      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	3328      	adds	r3, #40	@ 0x28
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fce3 	bl	80055a0 <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf4:	4b7b      	ldr	r3, [pc, #492]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf8:	f023 0107 	bic.w	r1, r3, #7
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c02:	4a78      	ldr	r2, [pc, #480]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003c1e:	f04f 0b00 	mov.w	fp, #0
 8003c22:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c26:	d04c      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c32:	d030      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c38:	d829      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c3c:	d02d      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c40:	d825      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c42:	2b80      	cmp	r3, #128	@ 0x80
 8003c44:	d018      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c46:	2b80      	cmp	r3, #128	@ 0x80
 8003c48:	d821      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c4e:	2b40      	cmp	r3, #64	@ 0x40
 8003c50:	d007      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c52:	e01c      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c54:	4b63      	ldr	r3, [pc, #396]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	4a62      	ldr	r2, [pc, #392]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c60:	e01c      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	3308      	adds	r3, #8
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 fbe6 	bl	800543c <RCCEx_PLL2_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c76:	e011      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	3328      	adds	r3, #40	@ 0x28
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 fc8d 	bl	80055a0 <RCCEx_PLL3_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c8c:	e006      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003cce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003cd8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	d053      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cee:	d035      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003cf0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cf4:	d82e      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cf6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cfa:	d031      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cfc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d00:	d828      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d06:	d01a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d0c:	d822      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d16:	d007      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003d18:	e01c      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1a:	4b32      	ldr	r3, [pc, #200]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	4a31      	ldr	r2, [pc, #196]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d26:	e01c      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fb83 	bl	800543c <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d3c:	e011      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	3328      	adds	r3, #40	@ 0x28
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 fc2a 	bl	80055a0 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d52:	e006      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003da0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003da4:	460b      	mov	r3, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	d056      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003db2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db6:	d038      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003db8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dbc:	d831      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dc2:	d034      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003dc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dc8:	d82b      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dce:	d01d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003dd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd4:	d825      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003de0:	e01f      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003de2:	bf00      	nop
 8003de4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de8:	4ba2      	ldr	r3, [pc, #648]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	4aa1      	ldr	r2, [pc, #644]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df4:	e01c      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fb1c 	bl	800543c <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e011      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	3328      	adds	r3, #40	@ 0x28
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fbc3 	bl	80055a0 <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e38:	4b8e      	ldr	r3, [pc, #568]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e48:	4a8a      	ldr	r2, [pc, #552]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e72:	460b      	mov	r3, r1
 8003e74:	4313      	orrs	r3, r2
 8003e76:	d03a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7e:	2b30      	cmp	r3, #48	@ 0x30
 8003e80:	d01f      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e82:	2b30      	cmp	r3, #48	@ 0x30
 8003e84:	d819      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d00c      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d815      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d019      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d111      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e96:	4b77      	ldr	r3, [pc, #476]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	4a76      	ldr	r2, [pc, #472]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ea2:	e011      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	2102      	movs	r1, #2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 fac5 	bl	800543c <RCCEx_PLL2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003eb8:	e006      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec0:	e002      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ed0:	4b68      	ldr	r3, [pc, #416]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	4a65      	ldr	r2, [pc, #404]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003efa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	d051      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f18:	d035      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f1e:	d82e      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f24:	d031      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f2a:	d828      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f30:	d01a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f36:	d822      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f40:	d007      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f42:	e01c      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f44:	4b4b      	ldr	r3, [pc, #300]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	4a4a      	ldr	r2, [pc, #296]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f50:	e01c      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	3308      	adds	r3, #8
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fa6e 	bl	800543c <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f66:	e011      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	3328      	adds	r3, #40	@ 0x28
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 fb15 	bl	80055a0 <RCCEx_PLL3_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f7c:	e006      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f84:	e002      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f86:	bf00      	nop
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f94:	4b37      	ldr	r3, [pc, #220]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa2:	4a34      	ldr	r2, [pc, #208]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fa8:	e003      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003fc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d056      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fdc:	d033      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003fde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe2:	d82c      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fe4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fe8:	d02f      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fee:	d826      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ff0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ff4:	d02b      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ff6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ffa:	d820      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004000:	d012      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004006:	d81a      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d022      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	d115      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	3308      	adds	r3, #8
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f001 fa0e 	bl	800543c <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004026:	e015      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	3328      	adds	r3, #40	@ 0x28
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f001 fab5 	bl	80055a0 <RCCEx_PLL3_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004044:	e006      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004046:	bf00      	nop
 8004048:	e004      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800405e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004060:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800406a:	4a02      	ldr	r2, [pc, #8]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800406c:	430b      	orrs	r3, r1
 800406e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004070:	e006      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800407c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004096:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800409a:	460b      	mov	r3, r1
 800409c:	4313      	orrs	r3, r2
 800409e:	d055      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ac:	d033      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80040ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b2:	d82c      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b8:	d02f      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d826      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040c4:	d02b      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80040c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ca:	d820      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d0:	d012      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d6:	d81a      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d022      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80040dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040e0:	d115      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	3308      	adds	r3, #8
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f9a6 	bl	800543c <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040f6:	e015      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fc:	3328      	adds	r3, #40	@ 0x28
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fa4d 	bl	80055a0 <RCCEx_PLL3_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800410c:	e00a      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004114:	e006      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004116:	bf00      	nop
 8004118:	e004      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800411a:	bf00      	nop
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800412c:	4ba3      	ldr	r3, [pc, #652]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800413c:	4a9f      	ldr	r2, [pc, #636]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413e:	430b      	orrs	r3, r1
 8004140:	6593      	str	r3, [r2, #88]	@ 0x58
 8004142:	e003      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	d037      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004176:	d00e      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800417c:	d816      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d018      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004186:	d111      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b8c      	ldr	r3, [pc, #560]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4a8b      	ldr	r2, [pc, #556]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004194:	e00f      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	3308      	adds	r3, #8
 800419c:	2101      	movs	r1, #1
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 f94c 	bl	800543c <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041aa:	e004      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041b2:	e000      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80041b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041be:	4b7f      	ldr	r3, [pc, #508]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041cc:	4a7b      	ldr	r2, [pc, #492]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ce:	430b      	orrs	r3, r1
 80041d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d039      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004202:	2b03      	cmp	r3, #3
 8004204:	d81c      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004206:	a201      	add	r2, pc, #4	@ (adr r2, 800420c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004249 	.word	0x08004249
 8004210:	0800421d 	.word	0x0800421d
 8004214:	0800422b 	.word	0x0800422b
 8004218:	08004249 	.word	0x08004249
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421c:	4b67      	ldr	r3, [pc, #412]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	4a66      	ldr	r2, [pc, #408]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004228:	e00f      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	3308      	adds	r3, #8
 8004230:	2102      	movs	r1, #2
 8004232:	4618      	mov	r0, r3
 8004234:	f001 f902 	bl	800543c <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004252:	4b5a      	ldr	r3, [pc, #360]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	f023 0103 	bic.w	r1, r3, #3
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004260:	4a56      	ldr	r2, [pc, #344]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004262:	430b      	orrs	r3, r1
 8004264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800427c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004286:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800428a:	460b      	mov	r3, r1
 800428c:	4313      	orrs	r3, r2
 800428e:	f000 809f 	beq.w	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004292:	4b4b      	ldr	r3, [pc, #300]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a4a      	ldr	r2, [pc, #296]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800429c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800429e:	f7fd fc59 	bl	8001b54 <HAL_GetTick>
 80042a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a6:	e00b      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a8:	f7fd fc54 	bl	8001b54 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b64      	cmp	r3, #100	@ 0x64
 80042b6:	d903      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042be:	e005      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c0:	4b3f      	ldr	r3, [pc, #252]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ed      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80042cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d179      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042d4:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042e0:	4053      	eors	r3, r2
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d015      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ea:	4b34      	ldr	r3, [pc, #208]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042f6:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	4a30      	ldr	r2, [pc, #192]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004302:	4b2e      	ldr	r3, [pc, #184]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	4a2d      	ldr	r2, [pc, #180]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800430e:	4a2b      	ldr	r2, [pc, #172]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004314:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800431e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004322:	d118      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fc16 	bl	8001b54 <HAL_GetTick>
 8004328:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432c:	e00d      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fd fc11 	bl	8001b54 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004338:	1ad2      	subs	r2, r2, r3
 800433a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800433e:	429a      	cmp	r2, r3
 8004340:	d903      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004348:	e005      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800434a:	4b1c      	ldr	r3, [pc, #112]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0eb      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435a:	2b00      	cmp	r3, #0
 800435c:	d129      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800436e:	d10e      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004370:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004380:	091a      	lsrs	r2, r3, #4
 8004382:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004384:	4013      	ands	r3, r2
 8004386:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6113      	str	r3, [r2, #16]
 800438c:	e005      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004394:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004398:	6113      	str	r3, [r2, #16]
 800439a:	4b08      	ldr	r3, [pc, #32]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800439c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043aa:	4a04      	ldr	r2, [pc, #16]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b0:	e00e      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80043ba:	e009      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80043bc:	58024400 	.word	0x58024400
 80043c0:	58024800 	.word	0x58024800
 80043c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f002 0301 	and.w	r3, r2, #1
 80043dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f000 8089 	beq.w	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f8:	2b28      	cmp	r3, #40	@ 0x28
 80043fa:	d86b      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80043fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	080044dd 	.word	0x080044dd
 8004408:	080044d5 	.word	0x080044d5
 800440c:	080044d5 	.word	0x080044d5
 8004410:	080044d5 	.word	0x080044d5
 8004414:	080044d5 	.word	0x080044d5
 8004418:	080044d5 	.word	0x080044d5
 800441c:	080044d5 	.word	0x080044d5
 8004420:	080044d5 	.word	0x080044d5
 8004424:	080044a9 	.word	0x080044a9
 8004428:	080044d5 	.word	0x080044d5
 800442c:	080044d5 	.word	0x080044d5
 8004430:	080044d5 	.word	0x080044d5
 8004434:	080044d5 	.word	0x080044d5
 8004438:	080044d5 	.word	0x080044d5
 800443c:	080044d5 	.word	0x080044d5
 8004440:	080044d5 	.word	0x080044d5
 8004444:	080044bf 	.word	0x080044bf
 8004448:	080044d5 	.word	0x080044d5
 800444c:	080044d5 	.word	0x080044d5
 8004450:	080044d5 	.word	0x080044d5
 8004454:	080044d5 	.word	0x080044d5
 8004458:	080044d5 	.word	0x080044d5
 800445c:	080044d5 	.word	0x080044d5
 8004460:	080044d5 	.word	0x080044d5
 8004464:	080044dd 	.word	0x080044dd
 8004468:	080044d5 	.word	0x080044d5
 800446c:	080044d5 	.word	0x080044d5
 8004470:	080044d5 	.word	0x080044d5
 8004474:	080044d5 	.word	0x080044d5
 8004478:	080044d5 	.word	0x080044d5
 800447c:	080044d5 	.word	0x080044d5
 8004480:	080044d5 	.word	0x080044d5
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044d5 	.word	0x080044d5
 800448c:	080044d5 	.word	0x080044d5
 8004490:	080044d5 	.word	0x080044d5
 8004494:	080044d5 	.word	0x080044d5
 8004498:	080044d5 	.word	0x080044d5
 800449c:	080044d5 	.word	0x080044d5
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044dd 	.word	0x080044dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ac:	3308      	adds	r3, #8
 80044ae:	2101      	movs	r1, #1
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 ffc3 	bl	800543c <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044bc:	e00f      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	3328      	adds	r3, #40	@ 0x28
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 f86a 	bl	80055a0 <RCCEx_PLL3_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044d2:	e004      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80044dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044e6:	4bbf      	ldr	r3, [pc, #764]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f4:	4abb      	ldr	r2, [pc, #748]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044f6:	430b      	orrs	r3, r1
 80044f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044fa:	e003      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f002 0302 	and.w	r3, r2, #2
 8004510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800451a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	d041      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800452a:	2b05      	cmp	r3, #5
 800452c:	d824      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800452e:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004581 	.word	0x08004581
 8004538:	0800454d 	.word	0x0800454d
 800453c:	08004563 	.word	0x08004563
 8004540:	08004581 	.word	0x08004581
 8004544:	08004581 	.word	0x08004581
 8004548:	08004581 	.word	0x08004581
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004550:	3308      	adds	r3, #8
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f000 ff71 	bl	800543c <RCCEx_PLL2_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004560:	e00f      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	3328      	adds	r3, #40	@ 0x28
 8004568:	2101      	movs	r1, #1
 800456a:	4618      	mov	r0, r3
 800456c:	f001 f818 	bl	80055a0 <RCCEx_PLL3_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800458a:	4b96      	ldr	r3, [pc, #600]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f023 0107 	bic.w	r1, r3, #7
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004598:	4a92      	ldr	r2, [pc, #584]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800459a:	430b      	orrs	r3, r1
 800459c:	6553      	str	r3, [r2, #84]	@ 0x54
 800459e:	e003      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f002 0304 	and.w	r3, r2, #4
 80045b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d044      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d825      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80045d4:	a201      	add	r2, pc, #4	@ (adr r2, 80045dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004629 	.word	0x08004629
 80045e0:	080045f5 	.word	0x080045f5
 80045e4:	0800460b 	.word	0x0800460b
 80045e8:	08004629 	.word	0x08004629
 80045ec:	08004629 	.word	0x08004629
 80045f0:	08004629 	.word	0x08004629
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	3308      	adds	r3, #8
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 ff1d 	bl	800543c <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004608:	e00f      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	3328      	adds	r3, #40	@ 0x28
 8004610:	2101      	movs	r1, #1
 8004612:	4618      	mov	r0, r3
 8004614:	f000 ffc4 	bl	80055a0 <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800461e:	e004      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004626:	e000      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004632:	4b6c      	ldr	r3, [pc, #432]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f023 0107 	bic.w	r1, r3, #7
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004642:	4a68      	ldr	r2, [pc, #416]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004644:	430b      	orrs	r3, r1
 8004646:	6593      	str	r3, [r2, #88]	@ 0x58
 8004648:	e003      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	f002 0320 	and.w	r3, r2, #32
 800465e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004662:	2300      	movs	r3, #0
 8004664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800466c:	460b      	mov	r3, r1
 800466e:	4313      	orrs	r3, r2
 8004670:	d055      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800467e:	d033      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004684:	d82c      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468a:	d02f      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004690:	d826      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004692:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004696:	d02b      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004698:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800469c:	d820      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800469e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a2:	d012      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80046a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a8:	d81a      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d022      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80046ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046b2:	d115      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b8:	3308      	adds	r3, #8
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 febd 	bl	800543c <RCCEx_PLL2_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046c8:	e015      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	3328      	adds	r3, #40	@ 0x28
 80046d0:	2102      	movs	r1, #2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff64 	bl	80055a0 <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046de:	e00a      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e6:	e006      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046e8:	bf00      	nop
 80046ea:	e004      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046ec:	bf00      	nop
 80046ee:	e002      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10b      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046fe:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	4a35      	ldr	r2, [pc, #212]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004710:	430b      	orrs	r3, r1
 8004712:	6553      	str	r3, [r2, #84]	@ 0x54
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800472a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004734:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d058      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004746:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800474a:	d033      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800474c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004750:	d82c      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004756:	d02f      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475c:	d826      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800475e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004762:	d02b      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004764:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004768:	d820      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476e:	d012      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004774:	d81a      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d022      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477e:	d115      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004784:	3308      	adds	r3, #8
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fe57 	bl	800543c <RCCEx_PLL2_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004794:	e015      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	3328      	adds	r3, #40	@ 0x28
 800479c:	2102      	movs	r1, #2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fefe 	bl	80055a0 <RCCEx_PLL3_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047aa:	e00a      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b2:	e006      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b4:	bf00      	nop
 80047b6:	e004      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b8:	bf00      	nop
 80047ba:	e002      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10e      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047da:	4a02      	ldr	r2, [pc, #8]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047dc:	430b      	orrs	r3, r1
 80047de:	6593      	str	r3, [r2, #88]	@ 0x58
 80047e0:	e006      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047e2:	bf00      	nop
 80047e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004806:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800480a:	460b      	mov	r3, r1
 800480c:	4313      	orrs	r3, r2
 800480e:	d055      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004818:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800481c:	d033      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800481e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004822:	d82c      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004828:	d02f      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800482a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800482e:	d826      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004830:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004834:	d02b      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004836:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800483a:	d820      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004840:	d012      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004846:	d81a      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d022      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004850:	d115      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	3308      	adds	r3, #8
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fdee 	bl	800543c <RCCEx_PLL2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004866:	e015      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	3328      	adds	r3, #40	@ 0x28
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fe95 	bl	80055a0 <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800487c:	e00a      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004886:	bf00      	nop
 8004888:	e004      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800489c:	4ba1      	ldr	r3, [pc, #644]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048ac:	4a9d      	ldr	r2, [pc, #628]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048ae:	430b      	orrs	r3, r1
 80048b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b2:	e003      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f002 0308 	and.w	r3, r2, #8
 80048c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	d01e      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	3328      	adds	r3, #40	@ 0x28
 80048f0:	2102      	movs	r1, #2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fe54 	bl	80055a0 <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004904:	4b87      	ldr	r3, [pc, #540]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004908:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004914:	4a83      	ldr	r2, [pc, #524]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004916:	430b      	orrs	r3, r1
 8004918:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f002 0310 	and.w	r3, r2, #16
 8004926:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004930:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004934:	460b      	mov	r3, r1
 8004936:	4313      	orrs	r3, r2
 8004938:	d01e      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004946:	d10c      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494c:	3328      	adds	r3, #40	@ 0x28
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fe25 	bl	80055a0 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004962:	4b70      	ldr	r3, [pc, #448]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004966:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004972:	4a6c      	ldr	r2, [pc, #432]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004974:	430b      	orrs	r3, r1
 8004976:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800498e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d03e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049a4:	d022      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80049a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049aa:	d81b      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b4:	d00b      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80049b6:	e015      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	3308      	adds	r3, #8
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fd3b 	bl	800543c <RCCEx_PLL2_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049cc:	e00f      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	3328      	adds	r3, #40	@ 0x28
 80049d4:	2102      	movs	r1, #2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fde2 	bl	80055a0 <RCCEx_PLL3_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049e2:	e004      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80049ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a06:	4a47      	ldr	r2, [pc, #284]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a0c:	e003      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a24:	2300      	movs	r3, #0
 8004a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d03b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a3e:	d01f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a44:	d818      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a4a:	d003      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a50:	d007      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a52:	e011      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4b33      	ldr	r3, [pc, #204]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a60:	e00f      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	3328      	adds	r3, #40	@ 0x28
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fd98 	bl	80055a0 <RCCEx_PLL3_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a76:	e004      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a7e:	e000      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10b      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a8a:	4b26      	ldr	r3, [pc, #152]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9a:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ab6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ab8:	2300      	movs	r3, #0
 8004aba:	677b      	str	r3, [r7, #116]	@ 0x74
 8004abc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	d034      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad4:	d007      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ad6:	e011      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4b12      	ldr	r3, [pc, #72]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	4a11      	ldr	r2, [pc, #68]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ae4:	e00e      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3308      	adds	r3, #8
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fca4 	bl	800543c <RCCEx_PLL2_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1a:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b3e:	2300      	movs	r3, #0
 8004b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b46:	460b      	mov	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	d00c      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b50:	3328      	adds	r3, #40	@ 0x28
 8004b52:	2102      	movs	r1, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fd23 	bl	80055a0 <RCCEx_PLL3_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b72:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b74:	2300      	movs	r3, #0
 8004b76:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d038      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8e:	d018      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b94:	d811      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b9a:	d014      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba0:	d80b      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d011      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004baa:	d106      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bac:	4bc3      	ldr	r3, [pc, #780]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	4ac2      	ldr	r2, [pc, #776]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bb8:	e008      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bc0:	e004      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bd4:	4bb9      	ldr	r3, [pc, #740]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be4:	4ab5      	ldr	r2, [pc, #724]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bea:	e003      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c02:	2300      	movs	r3, #0
 8004c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	d009      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c10:	4baa      	ldr	r3, [pc, #680]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1e:	4aa7      	ldr	r2, [pc, #668]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c30:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c32:	2300      	movs	r3, #0
 8004c34:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c40:	4b9e      	ldr	r3, [pc, #632]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c50:	4a9a      	ldr	r2, [pc, #616]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c52:	430b      	orrs	r3, r1
 8004c54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c64:	2300      	movs	r3, #0
 8004c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c72:	4b92      	ldr	r3, [pc, #584]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c76:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c80:	4a8e      	ldr	r2, [pc, #568]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c82:	430b      	orrs	r3, r1
 8004c84:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c94:	2300      	movs	r3, #0
 8004c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ca2:	4b86      	ldr	r3, [pc, #536]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4a85      	ldr	r2, [pc, #532]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cac:	6113      	str	r3, [r2, #16]
 8004cae:	4b83      	ldr	r3, [pc, #524]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb0:	6919      	ldr	r1, [r3, #16]
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004cba:	4a80      	ldr	r2, [pc, #512]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cce:	2300      	movs	r3, #0
 8004cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cd2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cdc:	4b77      	ldr	r3, [pc, #476]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cea:	4a74      	ldr	r2, [pc, #464]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d0c:	4b6b      	ldr	r3, [pc, #428]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d1c:	4a67      	ldr	r2, [pc, #412]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	d011      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	3308      	adds	r3, #8
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fb78 	bl	800543c <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	6239      	str	r1, [r7, #32]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	d011      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	3308      	adds	r3, #8
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fb58 	bl	800543c <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	2100      	movs	r1, #0
 8004dac:	61b9      	str	r1, [r7, #24]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d011      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	2102      	movs	r1, #2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fb38 	bl	800543c <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	2100      	movs	r1, #0
 8004dec:	6139      	str	r1, [r7, #16]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d011      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	3328      	adds	r3, #40	@ 0x28
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fbca 	bl	80055a0 <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d011      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	3328      	adds	r3, #40	@ 0x28
 8004e44:	2101      	movs	r1, #1
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fbaa 	bl	80055a0 <RCCEx_PLL3_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	d011      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	3328      	adds	r3, #40	@ 0x28
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fb8a 	bl	80055a0 <RCCEx_PLL3_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004ea2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ebc:	58024400 	.word	0x58024400

08004ec0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ec4:	f7fe fd96 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4904      	ldr	r1, [pc, #16]	@ (8004ee8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	080097dc 	.word	0x080097dc

08004eec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	@ 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ef4:	4ba1      	ldr	r3, [pc, #644]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004efe:	4b9f      	ldr	r3, [pc, #636]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f02:	0b1b      	lsrs	r3, r3, #12
 8004f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f0a:	4b9c      	ldr	r3, [pc, #624]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004f16:	4b99      	ldr	r3, [pc, #612]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1a:	08db      	lsrs	r3, r3, #3
 8004f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8111 	beq.w	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	f000 8083 	beq.w	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	f200 80a1 	bhi.w	800508c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d056      	beq.n	8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f56:	e099      	b.n	800508c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f58:	4b88      	ldr	r3, [pc, #544]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02d      	beq.n	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f64:	4b85      	ldr	r3, [pc, #532]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	4a84      	ldr	r2, [pc, #528]	@ (8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fbe:	e087      	b.n	80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005002:	e065      	b.n	80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800518c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b59      	ldr	r3, [pc, #356]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005026:	ed97 6a03 	vldr	s12, [r7, #12]
 800502a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005046:	e043      	b.n	80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505a:	4b48      	ldr	r3, [pc, #288]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506a:	ed97 6a03 	vldr	s12, [r7, #12]
 800506e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800507e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800508a:	e021      	b.n	80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800518c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b37      	ldr	r3, [pc, #220]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80050d0:	4b2a      	ldr	r3, [pc, #168]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	0a5b      	lsrs	r3, r3, #9
 80050d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f6:	ee17 2a90 	vmov	r2, s15
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050fe:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005108:	ee07 3a90 	vmov	s15, r3
 800510c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005114:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005118:	edd7 6a07 	vldr	s13, [r7, #28]
 800511c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005124:	ee17 2a90 	vmov	r2, s15
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800512c:	4b13      	ldr	r3, [pc, #76]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	0e1b      	lsrs	r3, r3, #24
 8005132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005146:	edd7 6a07 	vldr	s13, [r7, #28]
 800514a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800514e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005152:	ee17 2a90 	vmov	r2, s15
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800515a:	e008      	b.n	800516e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	609a      	str	r2, [r3, #8]
}
 800516e:	bf00      	nop
 8005170:	3724      	adds	r7, #36	@ 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	58024400 	.word	0x58024400
 8005180:	03d09000 	.word	0x03d09000
 8005184:	46000000 	.word	0x46000000
 8005188:	4c742400 	.word	0x4c742400
 800518c:	4a742400 	.word	0x4a742400
 8005190:	4bbebc20 	.word	0x4bbebc20

08005194 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	@ 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800519c:	4ba1      	ldr	r3, [pc, #644]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80051a6:	4b9f      	ldr	r3, [pc, #636]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	0d1b      	lsrs	r3, r3, #20
 80051ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051b2:	4b9c      	ldr	r3, [pc, #624]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80051be:	4b99      	ldr	r3, [pc, #612]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8111 	beq.w	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f000 8083 	beq.w	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f200 80a1 	bhi.w	8005334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d056      	beq.n	80052ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051fe:	e099      	b.n	8005334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005200:	4b88      	ldr	r3, [pc, #544]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02d      	beq.n	8005268 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800520c:	4b85      	ldr	r3, [pc, #532]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	4a84      	ldr	r2, [pc, #528]	@ (8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
 800521c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005236:	4b7b      	ldr	r3, [pc, #492]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	ed97 6a03 	vldr	s12, [r7, #12]
 800524a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800524e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005266:	e087      	b.n	8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b6a      	ldr	r3, [pc, #424]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a03 	vldr	s12, [r7, #12]
 800528e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052aa:	e065      	b.n	8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052be:	4b59      	ldr	r3, [pc, #356]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ee:	e043      	b.n	8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005302:	4b48      	ldr	r3, [pc, #288]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005312:	ed97 6a03 	vldr	s12, [r7, #12]
 8005316:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800531a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005332:	e021      	b.n	8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b37      	ldr	r3, [pc, #220]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005356:	ed97 6a03 	vldr	s12, [r7, #12]
 800535a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005376:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005378:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	0a5b      	lsrs	r3, r3, #9
 800537e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800538e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005392:	edd7 6a07 	vldr	s13, [r7, #28]
 8005396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800539a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539e:	ee17 2a90 	vmov	r2, s15
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80053a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	0c1b      	lsrs	r3, r3, #16
 80053ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053cc:	ee17 2a90 	vmov	r2, s15
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053d4:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	0e1b      	lsrs	r3, r3, #24
 80053da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fa:	ee17 2a90 	vmov	r2, s15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005402:	e008      	b.n	8005416 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
}
 8005416:	bf00      	nop
 8005418:	3724      	adds	r7, #36	@ 0x24
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	03d09000 	.word	0x03d09000
 800542c:	46000000 	.word	0x46000000
 8005430:	4c742400 	.word	0x4c742400
 8005434:	4a742400 	.word	0x4a742400
 8005438:	4bbebc20 	.word	0x4bbebc20

0800543c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800544a:	4b53      	ldr	r3, [pc, #332]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b03      	cmp	r3, #3
 8005454:	d101      	bne.n	800545a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e099      	b.n	800558e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800545a:	4b4f      	ldr	r3, [pc, #316]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a4e      	ldr	r2, [pc, #312]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005460:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005466:	f7fc fb75 	bl	8001b54 <HAL_GetTick>
 800546a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800546c:	e008      	b.n	8005480 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800546e:	f7fc fb71 	bl	8001b54 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e086      	b.n	800558e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005480:	4b45      	ldr	r3, [pc, #276]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800548c:	4b42      	ldr	r3, [pc, #264]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	031b      	lsls	r3, r3, #12
 800549a:	493f      	ldr	r1, [pc, #252]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	628b      	str	r3, [r1, #40]	@ 0x28
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	025b      	lsls	r3, r3, #9
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	061b      	lsls	r3, r3, #24
 80054cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054d0:	4931      	ldr	r1, [pc, #196]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054d6:	4b30      	ldr	r3, [pc, #192]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	492d      	ldr	r1, [pc, #180]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	f023 0220 	bic.w	r2, r3, #32
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4928      	ldr	r1, [pc, #160]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054fa:	4b27      	ldr	r3, [pc, #156]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	4a26      	ldr	r2, [pc, #152]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005500:	f023 0310 	bic.w	r3, r3, #16
 8005504:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005506:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005508:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800550a:	4b24      	ldr	r3, [pc, #144]	@ (800559c <RCCEx_PLL2_Config+0x160>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	69d2      	ldr	r2, [r2, #28]
 8005512:	00d2      	lsls	r2, r2, #3
 8005514:	4920      	ldr	r1, [pc, #128]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800551a:	4b1f      	ldr	r3, [pc, #124]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	4a1e      	ldr	r2, [pc, #120]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f043 0310 	orr.w	r3, r3, #16
 8005524:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800552c:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	4a19      	ldr	r2, [pc, #100]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005532:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005536:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005538:	e00f      	b.n	800555a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d106      	bne.n	800554e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005540:	4b15      	ldr	r3, [pc, #84]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	4a14      	ldr	r2, [pc, #80]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800554c:	e005      	b.n	800555a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800554e:	4b12      	ldr	r3, [pc, #72]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	4a11      	ldr	r2, [pc, #68]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005554:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005558:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800555a:	4b0f      	ldr	r3, [pc, #60]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a0e      	ldr	r2, [pc, #56]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005560:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005566:	f7fc faf5 	bl	8001b54 <HAL_GetTick>
 800556a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800556c:	e008      	b.n	8005580 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800556e:	f7fc faf1 	bl	8001b54 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e006      	b.n	800558e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <RCCEx_PLL2_Config+0x15c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	ffff0007 	.word	0xffff0007

080055a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055ae:	4b53      	ldr	r3, [pc, #332]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d101      	bne.n	80055be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e099      	b.n	80056f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055be:	4b4f      	ldr	r3, [pc, #316]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a4e      	ldr	r2, [pc, #312]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80055c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ca:	f7fc fac3 	bl	8001b54 <HAL_GetTick>
 80055ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055d0:	e008      	b.n	80055e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055d2:	f7fc fabf 	bl	8001b54 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e086      	b.n	80056f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055e4:	4b45      	ldr	r3, [pc, #276]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f0      	bne.n	80055d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055f0:	4b42      	ldr	r3, [pc, #264]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	051b      	lsls	r3, r3, #20
 80055fe:	493f      	ldr	r1, [pc, #252]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	628b      	str	r3, [r1, #40]	@ 0x28
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	3b01      	subs	r3, #1
 800560a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	3b01      	subs	r3, #1
 8005614:	025b      	lsls	r3, r3, #9
 8005616:	b29b      	uxth	r3, r3
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	3b01      	subs	r3, #1
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	3b01      	subs	r3, #1
 800562e:	061b      	lsls	r3, r3, #24
 8005630:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005634:	4931      	ldr	r1, [pc, #196]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800563a:	4b30      	ldr	r3, [pc, #192]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	492d      	ldr	r1, [pc, #180]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005648:	4313      	orrs	r3, r2
 800564a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800564c:	4b2b      	ldr	r3, [pc, #172]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	4928      	ldr	r1, [pc, #160]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800565e:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	4a26      	ldr	r2, [pc, #152]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 800566c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800566e:	4b24      	ldr	r3, [pc, #144]	@ (8005700 <RCCEx_PLL3_Config+0x160>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	69d2      	ldr	r2, [r2, #28]
 8005676:	00d2      	lsls	r2, r2, #3
 8005678:	4920      	ldr	r1, [pc, #128]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800567e:	4b1f      	ldr	r3, [pc, #124]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	4a1e      	ldr	r2, [pc, #120]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005688:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005690:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	4a19      	ldr	r2, [pc, #100]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 8005696:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800569a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800569c:	e00f      	b.n	80056be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d106      	bne.n	80056b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056a4:	4b15      	ldr	r3, [pc, #84]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80056aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056b0:	e005      	b.n	80056be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056b2:	4b12      	ldr	r3, [pc, #72]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	4a11      	ldr	r2, [pc, #68]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80056b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056be:	4b0f      	ldr	r3, [pc, #60]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a0e      	ldr	r2, [pc, #56]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80056c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ca:	f7fc fa43 	bl	8001b54 <HAL_GetTick>
 80056ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056d2:	f7fc fa3f 	bl	8001b54 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056e4:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <RCCEx_PLL3_Config+0x15c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
 8005700:	ffff0007 	.word	0xffff0007

08005704 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e10f      	b.n	8005936 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a87      	ldr	r2, [pc, #540]	@ (8005940 <HAL_SPI_Init+0x23c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <HAL_SPI_Init+0x42>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a86      	ldr	r2, [pc, #536]	@ (8005944 <HAL_SPI_Init+0x240>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00a      	beq.n	8005746 <HAL_SPI_Init+0x42>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a84      	ldr	r2, [pc, #528]	@ (8005948 <HAL_SPI_Init+0x244>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d005      	beq.n	8005746 <HAL_SPI_Init+0x42>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b0f      	cmp	r3, #15
 8005740:	d901      	bls.n	8005746 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0f7      	b.n	8005936 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 ff4c 	bl	80065e4 <SPI_GetPacketSize>
 800574c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a7b      	ldr	r2, [pc, #492]	@ (8005940 <HAL_SPI_Init+0x23c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00c      	beq.n	8005772 <HAL_SPI_Init+0x6e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a79      	ldr	r2, [pc, #484]	@ (8005944 <HAL_SPI_Init+0x240>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <HAL_SPI_Init+0x6e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a78      	ldr	r2, [pc, #480]	@ (8005948 <HAL_SPI_Init+0x244>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d002      	beq.n	8005772 <HAL_SPI_Init+0x6e>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b08      	cmp	r3, #8
 8005770:	d811      	bhi.n	8005796 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005776:	4a72      	ldr	r2, [pc, #456]	@ (8005940 <HAL_SPI_Init+0x23c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a70      	ldr	r2, [pc, #448]	@ (8005944 <HAL_SPI_Init+0x240>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_SPI_Init+0x8c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a6f      	ldr	r2, [pc, #444]	@ (8005948 <HAL_SPI_Init+0x244>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d104      	bne.n	800579a <HAL_SPI_Init+0x96>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b10      	cmp	r3, #16
 8005794:	d901      	bls.n	800579a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e0cd      	b.n	8005936 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fb fcc2 	bl	8001138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80057d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057e0:	d119      	bne.n	8005816 <HAL_SPI_Init+0x112>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057ea:	d103      	bne.n	80057f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10c      	bne.n	8005816 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005804:	d107      	bne.n	8005816 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005814:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00f      	beq.n	8005842 <HAL_SPI_Init+0x13e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b06      	cmp	r3, #6
 8005828:	d90b      	bls.n	8005842 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e007      	b.n	8005852 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005850:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	431a      	orrs	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005864:	ea42 0103 	orr.w	r1, r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b2:	ea42 0103 	orr.w	r1, r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d113      	bne.n	80058f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40013000 	.word	0x40013000
 8005944:	40003800 	.word	0x40003800
 8005948:	40003c00 	.word	0x40003c00

0800594c <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e01b      	b.n	8005996 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fb fc4e 	bl	8001218 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08e      	sub	sp, #56	@ 0x38
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3320      	adds	r3, #32
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3330      	adds	r3, #48	@ 0x30
 80059bc:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3301      	adds	r3, #1
 80059c8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ca:	f7fc f8c3 	bl	8001b54 <HAL_GetTick>
 80059ce:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80059d4:	887b      	ldrh	r3, [r7, #2]
 80059d6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d001      	beq.n	80059e8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
 80059e6:	e310      	b.n	800600a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x5a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x5a>
 80059f4:	887b      	ldrh	r3, [r7, #2]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e305      	b.n	800600a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x6c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e2fe      	b.n	800600a <HAL_SPI_TransmitReceive+0x66a>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2205      	movs	r2, #5
 8005a18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	887a      	ldrh	r2, [r7, #2]
 8005a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	887a      	ldrh	r2, [r7, #2]
 8005a36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	887a      	ldrh	r2, [r7, #2]
 8005a44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	887a      	ldrh	r2, [r7, #2]
 8005a4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a70      	ldr	r2, [pc, #448]	@ (8005c34 <HAL_SPI_TransmitReceive+0x294>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_SPI_TransmitReceive+0xea>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6f      	ldr	r2, [pc, #444]	@ (8005c38 <HAL_SPI_TransmitReceive+0x298>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_SPI_TransmitReceive+0xea>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a6d      	ldr	r2, [pc, #436]	@ (8005c3c <HAL_SPI_TransmitReceive+0x29c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d102      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005a8a:	2310      	movs	r3, #16
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a8e:	e001      	b.n	8005a94 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005a90:	2308      	movs	r3, #8
 8005a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	4b69      	ldr	r3, [pc, #420]	@ (8005c40 <HAL_SPI_TransmitReceive+0x2a0>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	8879      	ldrh	r1, [r7, #2]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ac0:	d107      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	f240 80a2 	bls.w	8005c20 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ae2:	e094      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d120      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x194>
 8005af2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01d      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005af8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005afa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d217      	bcs.n	8005b34 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b32:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005b3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d065      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d118      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b5a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b80:	e045      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005b82:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b84:	8bfb      	ldrh	r3, [r7, #30]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d21d      	bcs.n	8005bc6 <HAL_SPI_TransmitReceive+0x226>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d018      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b9e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bc2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005bc4:	e023      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc6:	f7fb ffc5 	bl	8001b54 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d803      	bhi.n	8005bde <HAL_SPI_TransmitReceive+0x23e>
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d102      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x244>
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d114      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fc2f 	bl	8006448 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bf0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e1fd      	b.n	800600a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f af67 	bne.w	8005ae4 <HAL_SPI_TransmitReceive+0x144>
 8005c16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f af63 	bne.w	8005ae4 <HAL_SPI_TransmitReceive+0x144>
 8005c1e:	e1ce      	b.n	8005fbe <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2b07      	cmp	r3, #7
 8005c26:	f240 81c2 	bls.w	8005fae <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c30:	e0c9      	b.n	8005dc6 <HAL_SPI_TransmitReceive+0x426>
 8005c32:	bf00      	nop
 8005c34:	40013000 	.word	0x40013000
 8005c38:	40003800 	.word	0x40003800
 8005c3c:	40003c00 	.word	0x40003c00
 8005c40:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d11f      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x2f2>
 8005c52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01c      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005c58:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c5a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d216      	bcs.n	8005c92 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c90:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005c9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8092 	beq.w	8005dc6 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d118      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb4:	6a3a      	ldr	r2, [r7, #32]
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	b292      	uxth	r2, r2
 8005cba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc0:	1c9a      	adds	r2, r3, #2
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cde:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ce0:	e071      	b.n	8005dc6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ce2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ce4:	8bfb      	ldrh	r3, [r7, #30]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d228      	bcs.n	8005d3c <HAL_SPI_TransmitReceive+0x39c>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d023      	beq.n	8005d3c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf8:	6a3a      	ldr	r2, [r7, #32]
 8005cfa:	8812      	ldrh	r2, [r2, #0]
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	8812      	ldrh	r2, [r2, #0]
 8005d12:	b292      	uxth	r2, r2
 8005d14:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d1a:	1c9a      	adds	r2, r3, #2
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b02      	subs	r3, #2
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d38:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d3a:	e044      	b.n	8005dc6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005d3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d11d      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x3de>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d018      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	8812      	ldrh	r2, [r2, #0]
 8005d54:	b292      	uxth	r2, r2
 8005d56:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d5c:	1c9a      	adds	r2, r3, #2
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d7a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d7c:	e023      	b.n	8005dc6 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7e:	f7fb fee9 	bl	8001b54 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d803      	bhi.n	8005d96 <HAL_SPI_TransmitReceive+0x3f6>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d102      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x3fc>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d114      	bne.n	8005dc6 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fb53 	bl	8006448 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e121      	b.n	800600a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f47f af3b 	bne.w	8005c44 <HAL_SPI_TransmitReceive+0x2a4>
 8005dce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af37 	bne.w	8005c44 <HAL_SPI_TransmitReceive+0x2a4>
 8005dd6:	e0f2      	b.n	8005fbe <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d121      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x48a>
 8005de6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01e      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005dec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005dee:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d218      	bcs.n	8005e2a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3320      	adds	r3, #32
 8005e02:	7812      	ldrb	r2, [r2, #0]
 8005e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e28:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005e32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80ba 	beq.w	8005fae <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d11b      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e7c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e7e:	e096      	b.n	8005fae <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005e80:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005e82:	8bfb      	ldrh	r3, [r7, #30]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d24a      	bcs.n	8005f1e <HAL_SPI_TransmitReceive+0x57e>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d045      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eba:	7812      	ldrb	r2, [r2, #0]
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed6:	7812      	ldrb	r2, [r2, #0]
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef2:	7812      	ldrb	r2, [r2, #0]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b04      	subs	r3, #4
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f1c:	e047      	b.n	8005fae <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005f1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d820      	bhi.n	8005f66 <HAL_SPI_TransmitReceive+0x5c6>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f64:	e023      	b.n	8005fae <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f66:	f7fb fdf5 	bl	8001b54 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d803      	bhi.n	8005f7e <HAL_SPI_TransmitReceive+0x5de>
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d102      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x5e4>
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d114      	bne.n	8005fae <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fa5f 	bl	8006448 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e02d      	b.n	800600a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005fae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f af11 	bne.w	8005dd8 <HAL_SPI_TransmitReceive+0x438>
 8005fb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f af0d 	bne.w	8005dd8 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2108      	movs	r1, #8
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fadd 	bl	8006588 <SPI_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fda:	f043 0220 	orr.w	r2, r3, #32
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fa2f 	bl	8006448 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006008:	2300      	movs	r3, #0
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3730      	adds	r7, #48	@ 0x30
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop

08006014 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	@ 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800603c:	2300      	movs	r3, #0
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006046:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3330      	adds	r3, #48	@ 0x30
 800604e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006056:	2b00      	cmp	r3, #0
 8006058:	d010      	beq.n	800607c <HAL_SPI_IRQHandler+0x68>
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006072:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f9c3 	bl	8006400 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800607a:	e192      	b.n	80063a2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d113      	bne.n	80060ae <HAL_SPI_IRQHandler+0x9a>
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10e      	bne.n	80060ae <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
    handled = 1UL;
 80060aa:	2301      	movs	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10f      	bne.n	80060d8 <HAL_SPI_IRQHandler+0xc4>
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
    handled = 1UL;
 80060d4:	2301      	movs	r3, #1
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10f      	bne.n	8006102 <HAL_SPI_IRQHandler+0xee>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d105      	bne.n	8006102 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
    handled = 1UL;
 80060fe:	2301      	movs	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 8147 	bne.w	8006398 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 808b 	beq.w	800622c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0208 	orr.w	r2, r2, #8
 8006124:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699a      	ldr	r2, [r3, #24]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0210 	orr.w	r2, r2, #16
 8006134:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699a      	ldr	r2, [r3, #24]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006144:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0208 	bic.w	r2, r2, #8
 8006154:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d13d      	bne.n	80061e0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006164:	e036      	b.n	80061d4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	d90b      	bls.n	8006186 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006176:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006178:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800617e:	1d1a      	adds	r2, r3, #4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	665a      	str	r2, [r3, #100]	@ 0x64
 8006184:	e01d      	b.n	80061c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b07      	cmp	r3, #7
 800618c:	d90b      	bls.n	80061a6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	8812      	ldrh	r2, [r2, #0]
 8006196:	b292      	uxth	r2, r2
 8006198:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	665a      	str	r2, [r3, #100]	@ 0x64
 80061a4:	e00d      	b.n	80061c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061b2:	7812      	ldrb	r2, [r2, #0]
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1c2      	bne.n	8006166 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f931 	bl	8006448 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f8f7 	bl	80063ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80061fe:	e0d0      	b.n	80063a2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	2b05      	cmp	r3, #5
 8006204:	d103      	bne.n	800620e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f8e6 	bl	80063d8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800620c:	e0c6      	b.n	800639c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d103      	bne.n	800621c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8d5 	bl	80063c4 <HAL_SPI_RxCpltCallback>
    return;
 800621a:	e0bf      	b.n	800639c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800621c:	7cfb      	ldrb	r3, [r7, #19]
 800621e:	2b03      	cmp	r3, #3
 8006220:	f040 80bc 	bne.w	800639c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f8c3 	bl	80063b0 <HAL_SPI_TxCpltCallback>
    return;
 800622a:	e0b7      	b.n	800639c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 80b5 	beq.w	80063a2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00f      	beq.n	8006262 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006248:	f043 0204 	orr.w	r2, r3, #4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006260:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00f      	beq.n	800628c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006272:	f043 0201 	orr.w	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800628a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00f      	beq.n	80062b6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800629c:	f043 0208 	orr.w	r2, r3, #8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00f      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0220 	orr.w	r2, r2, #32
 80062de:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d05a      	beq.n	80063a0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0201 	bic.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6919      	ldr	r1, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b28      	ldr	r3, [pc, #160]	@ (80063a8 <HAL_SPI_IRQHandler+0x394>)
 8006306:	400b      	ands	r3, r1
 8006308:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006310:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006314:	d138      	bne.n	8006388 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006324:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d013      	beq.n	8006356 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006332:	4a1e      	ldr	r2, [pc, #120]	@ (80063ac <HAL_SPI_IRQHandler+0x398>)
 8006334:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800633a:	4618      	mov	r0, r3
 800633c:	f7fb fe00 	bl	8001f40 <HAL_DMA_Abort_IT>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800634c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800635a:	2b00      	cmp	r3, #0
 800635c:	d020      	beq.n	80063a0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006362:	4a12      	ldr	r2, [pc, #72]	@ (80063ac <HAL_SPI_IRQHandler+0x398>)
 8006364:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800636a:	4618      	mov	r0, r3
 800636c:	f7fb fde8 	bl	8001f40 <HAL_DMA_Abort_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d014      	beq.n	80063a0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800637c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006386:	e00b      	b.n	80063a0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f82b 	bl	80063ec <HAL_SPI_ErrorCallback>
    return;
 8006396:	e003      	b.n	80063a0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8006398:	bf00      	nop
 800639a:	e002      	b.n	80063a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80063a0:	bf00      	nop
  }
}
 80063a2:	3728      	adds	r7, #40	@ 0x28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	fffffc94 	.word	0xfffffc94
 80063ac:	08006415 	.word	0x08006415

080063b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff ffd6 	bl	80063ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0208 	orr.w	r2, r2, #8
 8006466:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0210 	orr.w	r2, r2, #16
 8006476:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6919      	ldr	r1, [r3, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b3c      	ldr	r3, [pc, #240]	@ (8006584 <SPI_CloseTransfer+0x13c>)
 8006494:	400b      	ands	r3, r1
 8006496:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80064a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d014      	beq.n	80064de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00f      	beq.n	80064de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0220 	orr.w	r2, r2, #32
 80064dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d014      	beq.n	8006514 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00f      	beq.n	8006514 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064fa:	f043 0204 	orr.w	r2, r3, #4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006512:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00f      	beq.n	800653e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006524:	f043 0201 	orr.w	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699a      	ldr	r2, [r3, #24]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800653c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00f      	beq.n	8006568 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654e:	f043 0208 	orr.w	r2, r3, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006566:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	fffffc90 	.word	0xfffffc90

08006588 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	603b      	str	r3, [r7, #0]
 8006594:	4613      	mov	r3, r2
 8006596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006598:	e010      	b.n	80065bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800659a:	f7fb fadb 	bl	8001b54 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d803      	bhi.n	80065b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d102      	bne.n	80065b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e00f      	b.n	80065dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	4013      	ands	r3, r2
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	bf0c      	ite	eq
 80065cc:	2301      	moveq	r3, #1
 80065ce:	2300      	movne	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d0df      	beq.n	800659a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	3307      	adds	r3, #7
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	fb02 f303 	mul.w	r3, r2, r3
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e042      	b.n	80066b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f83b 	bl	80066ba <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	@ 0x24
 8006648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fe29 	bl	80072bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8be 	bl	80067ec <UART_SetConfig>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e01b      	b.n	80066b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006688:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006698:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fea8 	bl	8007400 <UART_CheckIdleState>
 80066b0:	4603      	mov	r3, r0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b08a      	sub	sp, #40	@ 0x28
 80066d2:	af02      	add	r7, sp, #8
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d17b      	bne.n	80067e0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_UART_Transmit+0x26>
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e074      	b.n	80067e2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2221      	movs	r2, #33	@ 0x21
 8006704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006708:	f7fb fa24 	bl	8001b54 <HAL_GetTick>
 800670c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	88fa      	ldrh	r2, [r7, #6]
 8006712:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006726:	d108      	bne.n	800673a <HAL_UART_Transmit+0x6c>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	e003      	b.n	8006742 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006742:	e030      	b.n	80067a6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	2180      	movs	r1, #128	@ 0x80
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 ff00 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e03d      	b.n	80067e2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800677a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	3302      	adds	r3, #2
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e007      	b.n	8006794 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	3301      	adds	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1c8      	bne.n	8006744 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2140      	movs	r1, #64	@ 0x40
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fec9 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e006      	b.n	80067e2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	e000      	b.n	80067e2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
  }
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f0:	b092      	sub	sp, #72	@ 0x48
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	431a      	orrs	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	431a      	orrs	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	4313      	orrs	r3, r2
 8006812:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4bbe      	ldr	r3, [pc, #760]	@ (8006b14 <UART_SetConfig+0x328>)
 800681c:	4013      	ands	r3, r2
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006824:	430b      	orrs	r3, r1
 8006826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4ab3      	ldr	r2, [pc, #716]	@ (8006b18 <UART_SetConfig+0x32c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006854:	4313      	orrs	r3, r2
 8006856:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	4baf      	ldr	r3, [pc, #700]	@ (8006b1c <UART_SetConfig+0x330>)
 8006860:	4013      	ands	r3, r2
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006868:	430b      	orrs	r3, r1
 800686a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	f023 010f 	bic.w	r1, r3, #15
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4aa6      	ldr	r2, [pc, #664]	@ (8006b20 <UART_SetConfig+0x334>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d177      	bne.n	800697c <UART_SetConfig+0x190>
 800688c:	4ba5      	ldr	r3, [pc, #660]	@ (8006b24 <UART_SetConfig+0x338>)
 800688e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006890:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006894:	2b28      	cmp	r3, #40	@ 0x28
 8006896:	d86d      	bhi.n	8006974 <UART_SetConfig+0x188>
 8006898:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <UART_SetConfig+0xb4>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	08006945 	.word	0x08006945
 80068a4:	08006975 	.word	0x08006975
 80068a8:	08006975 	.word	0x08006975
 80068ac:	08006975 	.word	0x08006975
 80068b0:	08006975 	.word	0x08006975
 80068b4:	08006975 	.word	0x08006975
 80068b8:	08006975 	.word	0x08006975
 80068bc:	08006975 	.word	0x08006975
 80068c0:	0800694d 	.word	0x0800694d
 80068c4:	08006975 	.word	0x08006975
 80068c8:	08006975 	.word	0x08006975
 80068cc:	08006975 	.word	0x08006975
 80068d0:	08006975 	.word	0x08006975
 80068d4:	08006975 	.word	0x08006975
 80068d8:	08006975 	.word	0x08006975
 80068dc:	08006975 	.word	0x08006975
 80068e0:	08006955 	.word	0x08006955
 80068e4:	08006975 	.word	0x08006975
 80068e8:	08006975 	.word	0x08006975
 80068ec:	08006975 	.word	0x08006975
 80068f0:	08006975 	.word	0x08006975
 80068f4:	08006975 	.word	0x08006975
 80068f8:	08006975 	.word	0x08006975
 80068fc:	08006975 	.word	0x08006975
 8006900:	0800695d 	.word	0x0800695d
 8006904:	08006975 	.word	0x08006975
 8006908:	08006975 	.word	0x08006975
 800690c:	08006975 	.word	0x08006975
 8006910:	08006975 	.word	0x08006975
 8006914:	08006975 	.word	0x08006975
 8006918:	08006975 	.word	0x08006975
 800691c:	08006975 	.word	0x08006975
 8006920:	08006965 	.word	0x08006965
 8006924:	08006975 	.word	0x08006975
 8006928:	08006975 	.word	0x08006975
 800692c:	08006975 	.word	0x08006975
 8006930:	08006975 	.word	0x08006975
 8006934:	08006975 	.word	0x08006975
 8006938:	08006975 	.word	0x08006975
 800693c:	08006975 	.word	0x08006975
 8006940:	0800696d 	.word	0x0800696d
 8006944:	2301      	movs	r3, #1
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e222      	b.n	8006d92 <UART_SetConfig+0x5a6>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e21e      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695a:	e21a      	b.n	8006d92 <UART_SetConfig+0x5a6>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006962:	e216      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006964:	2320      	movs	r3, #32
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696a:	e212      	b.n	8006d92 <UART_SetConfig+0x5a6>
 800696c:	2340      	movs	r3, #64	@ 0x40
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006972:	e20e      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697a:	e20a      	b.n	8006d92 <UART_SetConfig+0x5a6>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a69      	ldr	r2, [pc, #420]	@ (8006b28 <UART_SetConfig+0x33c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d130      	bne.n	80069e8 <UART_SetConfig+0x1fc>
 8006986:	4b67      	ldr	r3, [pc, #412]	@ (8006b24 <UART_SetConfig+0x338>)
 8006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	2b05      	cmp	r3, #5
 8006990:	d826      	bhi.n	80069e0 <UART_SetConfig+0x1f4>
 8006992:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <UART_SetConfig+0x1ac>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069b1 	.word	0x080069b1
 800699c:	080069b9 	.word	0x080069b9
 80069a0:	080069c1 	.word	0x080069c1
 80069a4:	080069c9 	.word	0x080069c9
 80069a8:	080069d1 	.word	0x080069d1
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e1ec      	b.n	8006d92 <UART_SetConfig+0x5a6>
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e1e8      	b.n	8006d92 <UART_SetConfig+0x5a6>
 80069c0:	2308      	movs	r3, #8
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e1e4      	b.n	8006d92 <UART_SetConfig+0x5a6>
 80069c8:	2310      	movs	r3, #16
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ce:	e1e0      	b.n	8006d92 <UART_SetConfig+0x5a6>
 80069d0:	2320      	movs	r3, #32
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d6:	e1dc      	b.n	8006d92 <UART_SetConfig+0x5a6>
 80069d8:	2340      	movs	r3, #64	@ 0x40
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069de:	e1d8      	b.n	8006d92 <UART_SetConfig+0x5a6>
 80069e0:	2380      	movs	r3, #128	@ 0x80
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e1d4      	b.n	8006d92 <UART_SetConfig+0x5a6>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a4f      	ldr	r2, [pc, #316]	@ (8006b2c <UART_SetConfig+0x340>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d130      	bne.n	8006a54 <UART_SetConfig+0x268>
 80069f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006b24 <UART_SetConfig+0x338>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d826      	bhi.n	8006a4c <UART_SetConfig+0x260>
 80069fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <UART_SetConfig+0x218>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a1d 	.word	0x08006a1d
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a3d 	.word	0x08006a3d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e1b6      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e1b2      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e1ae      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e1aa      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e1a6      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a44:	2340      	movs	r3, #64	@ 0x40
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	e1a2      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a4c:	2380      	movs	r3, #128	@ 0x80
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e19e      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a35      	ldr	r2, [pc, #212]	@ (8006b30 <UART_SetConfig+0x344>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d130      	bne.n	8006ac0 <UART_SetConfig+0x2d4>
 8006a5e:	4b31      	ldr	r3, [pc, #196]	@ (8006b24 <UART_SetConfig+0x338>)
 8006a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d826      	bhi.n	8006ab8 <UART_SetConfig+0x2cc>
 8006a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <UART_SetConfig+0x284>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a89 	.word	0x08006a89
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	08006a99 	.word	0x08006a99
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e180      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e17c      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e178      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	e174      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aae:	e170      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006ab0:	2340      	movs	r3, #64	@ 0x40
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab6:	e16c      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006ab8:	2380      	movs	r3, #128	@ 0x80
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e168      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b34 <UART_SetConfig+0x348>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d142      	bne.n	8006b50 <UART_SetConfig+0x364>
 8006aca:	4b16      	ldr	r3, [pc, #88]	@ (8006b24 <UART_SetConfig+0x338>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d838      	bhi.n	8006b48 <UART_SetConfig+0x35c>
 8006ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8006adc <UART_SetConfig+0x2f0>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006af5 	.word	0x08006af5
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	08006b05 	.word	0x08006b05
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b41 	.word	0x08006b41
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e14a      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b02:	e146      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0a:	e142      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b12:	e13e      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006b14:	cfff69f3 	.word	0xcfff69f3
 8006b18:	58000c00 	.word	0x58000c00
 8006b1c:	11fff4ff 	.word	0x11fff4ff
 8006b20:	40011000 	.word	0x40011000
 8006b24:	58024400 	.word	0x58024400
 8006b28:	40004400 	.word	0x40004400
 8006b2c:	40004800 	.word	0x40004800
 8006b30:	40004c00 	.word	0x40004c00
 8006b34:	40005000 	.word	0x40005000
 8006b38:	2320      	movs	r3, #32
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3e:	e128      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006b40:	2340      	movs	r3, #64	@ 0x40
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b46:	e124      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006b48:	2380      	movs	r3, #128	@ 0x80
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4e:	e120      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4acb      	ldr	r2, [pc, #812]	@ (8006e84 <UART_SetConfig+0x698>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d176      	bne.n	8006c48 <UART_SetConfig+0x45c>
 8006b5a:	4bcb      	ldr	r3, [pc, #812]	@ (8006e88 <UART_SetConfig+0x69c>)
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b62:	2b28      	cmp	r3, #40	@ 0x28
 8006b64:	d86c      	bhi.n	8006c40 <UART_SetConfig+0x454>
 8006b66:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <UART_SetConfig+0x380>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006c11 	.word	0x08006c11
 8006b70:	08006c41 	.word	0x08006c41
 8006b74:	08006c41 	.word	0x08006c41
 8006b78:	08006c41 	.word	0x08006c41
 8006b7c:	08006c41 	.word	0x08006c41
 8006b80:	08006c41 	.word	0x08006c41
 8006b84:	08006c41 	.word	0x08006c41
 8006b88:	08006c41 	.word	0x08006c41
 8006b8c:	08006c19 	.word	0x08006c19
 8006b90:	08006c41 	.word	0x08006c41
 8006b94:	08006c41 	.word	0x08006c41
 8006b98:	08006c41 	.word	0x08006c41
 8006b9c:	08006c41 	.word	0x08006c41
 8006ba0:	08006c41 	.word	0x08006c41
 8006ba4:	08006c41 	.word	0x08006c41
 8006ba8:	08006c41 	.word	0x08006c41
 8006bac:	08006c21 	.word	0x08006c21
 8006bb0:	08006c41 	.word	0x08006c41
 8006bb4:	08006c41 	.word	0x08006c41
 8006bb8:	08006c41 	.word	0x08006c41
 8006bbc:	08006c41 	.word	0x08006c41
 8006bc0:	08006c41 	.word	0x08006c41
 8006bc4:	08006c41 	.word	0x08006c41
 8006bc8:	08006c41 	.word	0x08006c41
 8006bcc:	08006c29 	.word	0x08006c29
 8006bd0:	08006c41 	.word	0x08006c41
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006c41 	.word	0x08006c41
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	08006c41 	.word	0x08006c41
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006c41 	.word	0x08006c41
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c41 	.word	0x08006c41
 8006c00:	08006c41 	.word	0x08006c41
 8006c04:	08006c41 	.word	0x08006c41
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c16:	e0bc      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1e:	e0b8      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c20:	2308      	movs	r3, #8
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c26:	e0b4      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e0b0      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c30:	2320      	movs	r3, #32
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e0ac      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c38:	2340      	movs	r3, #64	@ 0x40
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e0a8      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c40:	2380      	movs	r3, #128	@ 0x80
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e0a4      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a8f      	ldr	r2, [pc, #572]	@ (8006e8c <UART_SetConfig+0x6a0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d130      	bne.n	8006cb4 <UART_SetConfig+0x4c8>
 8006c52:	4b8d      	ldr	r3, [pc, #564]	@ (8006e88 <UART_SetConfig+0x69c>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	d826      	bhi.n	8006cac <UART_SetConfig+0x4c0>
 8006c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <UART_SetConfig+0x478>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006c85 	.word	0x08006c85
 8006c6c:	08006c8d 	.word	0x08006c8d
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c82:	e086      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e082      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e07e      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e07a      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e076      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006ca4:	2340      	movs	r3, #64	@ 0x40
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e072      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e06e      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a75      	ldr	r2, [pc, #468]	@ (8006e90 <UART_SetConfig+0x6a4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d130      	bne.n	8006d20 <UART_SetConfig+0x534>
 8006cbe:	4b72      	ldr	r3, [pc, #456]	@ (8006e88 <UART_SetConfig+0x69c>)
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d826      	bhi.n	8006d18 <UART_SetConfig+0x52c>
 8006cca:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0x4e4>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006ce9 	.word	0x08006ce9
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006cf9 	.word	0x08006cf9
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006d09 	.word	0x08006d09
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e050      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e04c      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e048      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e044      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d08:	2320      	movs	r3, #32
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e040      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d10:	2340      	movs	r3, #64	@ 0x40
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e03c      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e038      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5b      	ldr	r2, [pc, #364]	@ (8006e94 <UART_SetConfig+0x6a8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d130      	bne.n	8006d8c <UART_SetConfig+0x5a0>
 8006d2a:	4b57      	ldr	r3, [pc, #348]	@ (8006e88 <UART_SetConfig+0x69c>)
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d826      	bhi.n	8006d84 <UART_SetConfig+0x598>
 8006d36:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <UART_SetConfig+0x550>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d55 	.word	0x08006d55
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	08006d65 	.word	0x08006d65
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d75 	.word	0x08006d75
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	2302      	movs	r3, #2
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	e01a      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e016      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	e012      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d72:	e00e      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d74:	2320      	movs	r3, #32
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e00a      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d7c:	2340      	movs	r3, #64	@ 0x40
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e006      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d84:	2380      	movs	r3, #128	@ 0x80
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e002      	b.n	8006d92 <UART_SetConfig+0x5a6>
 8006d8c:	2380      	movs	r3, #128	@ 0x80
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a3f      	ldr	r2, [pc, #252]	@ (8006e94 <UART_SetConfig+0x6a8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	f040 80f8 	bne.w	8006f8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	dc46      	bgt.n	8006e34 <UART_SetConfig+0x648>
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	f2c0 8082 	blt.w	8006eb0 <UART_SetConfig+0x6c4>
 8006dac:	3b02      	subs	r3, #2
 8006dae:	2b1e      	cmp	r3, #30
 8006db0:	d87e      	bhi.n	8006eb0 <UART_SetConfig+0x6c4>
 8006db2:	a201      	add	r2, pc, #4	@ (adr r2, 8006db8 <UART_SetConfig+0x5cc>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006e3b 	.word	0x08006e3b
 8006dbc:	08006eb1 	.word	0x08006eb1
 8006dc0:	08006e43 	.word	0x08006e43
 8006dc4:	08006eb1 	.word	0x08006eb1
 8006dc8:	08006eb1 	.word	0x08006eb1
 8006dcc:	08006eb1 	.word	0x08006eb1
 8006dd0:	08006e53 	.word	0x08006e53
 8006dd4:	08006eb1 	.word	0x08006eb1
 8006dd8:	08006eb1 	.word	0x08006eb1
 8006ddc:	08006eb1 	.word	0x08006eb1
 8006de0:	08006eb1 	.word	0x08006eb1
 8006de4:	08006eb1 	.word	0x08006eb1
 8006de8:	08006eb1 	.word	0x08006eb1
 8006dec:	08006eb1 	.word	0x08006eb1
 8006df0:	08006e63 	.word	0x08006e63
 8006df4:	08006eb1 	.word	0x08006eb1
 8006df8:	08006eb1 	.word	0x08006eb1
 8006dfc:	08006eb1 	.word	0x08006eb1
 8006e00:	08006eb1 	.word	0x08006eb1
 8006e04:	08006eb1 	.word	0x08006eb1
 8006e08:	08006eb1 	.word	0x08006eb1
 8006e0c:	08006eb1 	.word	0x08006eb1
 8006e10:	08006eb1 	.word	0x08006eb1
 8006e14:	08006eb1 	.word	0x08006eb1
 8006e18:	08006eb1 	.word	0x08006eb1
 8006e1c:	08006eb1 	.word	0x08006eb1
 8006e20:	08006eb1 	.word	0x08006eb1
 8006e24:	08006eb1 	.word	0x08006eb1
 8006e28:	08006eb1 	.word	0x08006eb1
 8006e2c:	08006eb1 	.word	0x08006eb1
 8006e30:	08006ea3 	.word	0x08006ea3
 8006e34:	2b40      	cmp	r3, #64	@ 0x40
 8006e36:	d037      	beq.n	8006ea8 <UART_SetConfig+0x6bc>
 8006e38:	e03a      	b.n	8006eb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e3a:	f7fe f841 	bl	8004ec0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e40:	e03c      	b.n	8006ebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe f850 	bl	8004eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e50:	e034      	b.n	8006ebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e52:	f107 0318 	add.w	r3, r7, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe f99c 	bl	8005194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e60:	e02c      	b.n	8006ebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e62:	4b09      	ldr	r3, [pc, #36]	@ (8006e88 <UART_SetConfig+0x69c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e6e:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <UART_SetConfig+0x69c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	4a07      	ldr	r2, [pc, #28]	@ (8006e98 <UART_SetConfig+0x6ac>)
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e80:	e01c      	b.n	8006ebc <UART_SetConfig+0x6d0>
 8006e82:	bf00      	nop
 8006e84:	40011400 	.word	0x40011400
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	40007800 	.word	0x40007800
 8006e90:	40007c00 	.word	0x40007c00
 8006e94:	58000c00 	.word	0x58000c00
 8006e98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006e9c:	4b9d      	ldr	r3, [pc, #628]	@ (8007114 <UART_SetConfig+0x928>)
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea0:	e00c      	b.n	8006ebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ea2:	4b9d      	ldr	r3, [pc, #628]	@ (8007118 <UART_SetConfig+0x92c>)
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea6:	e009      	b.n	8006ebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eae:	e005      	b.n	8006ebc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006eba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 81de 	beq.w	8007280 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	4a94      	ldr	r2, [pc, #592]	@ (800711c <UART_SetConfig+0x930>)
 8006eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	4613      	mov	r3, r2
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	4413      	add	r3, r2
 8006ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d305      	bcc.n	8006ef4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d903      	bls.n	8006efc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006efa:	e1c1      	b.n	8007280 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efe:	2200      	movs	r2, #0
 8006f00:	60bb      	str	r3, [r7, #8]
 8006f02:	60fa      	str	r2, [r7, #12]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f08:	4a84      	ldr	r2, [pc, #528]	@ (800711c <UART_SetConfig+0x930>)
 8006f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2200      	movs	r2, #0
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f1e:	f7f9 fa2f 	bl	8000380 <__aeabi_uldivmod>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4610      	mov	r0, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	020b      	lsls	r3, r1, #8
 8006f34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f38:	0202      	lsls	r2, r0, #8
 8006f3a:	6979      	ldr	r1, [r7, #20]
 8006f3c:	6849      	ldr	r1, [r1, #4]
 8006f3e:	0849      	lsrs	r1, r1, #1
 8006f40:	2000      	movs	r0, #0
 8006f42:	460c      	mov	r4, r1
 8006f44:	4605      	mov	r5, r0
 8006f46:	eb12 0804 	adds.w	r8, r2, r4
 8006f4a:	eb43 0905 	adc.w	r9, r3, r5
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	469a      	mov	sl, r3
 8006f56:	4693      	mov	fp, r2
 8006f58:	4652      	mov	r2, sl
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 fa0e 	bl	8000380 <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4613      	mov	r3, r2
 8006f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f72:	d308      	bcc.n	8006f86 <UART_SetConfig+0x79a>
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7a:	d204      	bcs.n	8006f86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f82:	60da      	str	r2, [r3, #12]
 8006f84:	e17c      	b.n	8007280 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f8c:	e178      	b.n	8007280 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f96:	f040 80c5 	bne.w	8007124 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006f9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	dc48      	bgt.n	8007034 <UART_SetConfig+0x848>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	db7b      	blt.n	800709e <UART_SetConfig+0x8b2>
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d879      	bhi.n	800709e <UART_SetConfig+0x8b2>
 8006faa:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <UART_SetConfig+0x7c4>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	0800703b 	.word	0x0800703b
 8006fb4:	08007043 	.word	0x08007043
 8006fb8:	0800709f 	.word	0x0800709f
 8006fbc:	0800709f 	.word	0x0800709f
 8006fc0:	0800704b 	.word	0x0800704b
 8006fc4:	0800709f 	.word	0x0800709f
 8006fc8:	0800709f 	.word	0x0800709f
 8006fcc:	0800709f 	.word	0x0800709f
 8006fd0:	0800705b 	.word	0x0800705b
 8006fd4:	0800709f 	.word	0x0800709f
 8006fd8:	0800709f 	.word	0x0800709f
 8006fdc:	0800709f 	.word	0x0800709f
 8006fe0:	0800709f 	.word	0x0800709f
 8006fe4:	0800709f 	.word	0x0800709f
 8006fe8:	0800709f 	.word	0x0800709f
 8006fec:	0800709f 	.word	0x0800709f
 8006ff0:	0800706b 	.word	0x0800706b
 8006ff4:	0800709f 	.word	0x0800709f
 8006ff8:	0800709f 	.word	0x0800709f
 8006ffc:	0800709f 	.word	0x0800709f
 8007000:	0800709f 	.word	0x0800709f
 8007004:	0800709f 	.word	0x0800709f
 8007008:	0800709f 	.word	0x0800709f
 800700c:	0800709f 	.word	0x0800709f
 8007010:	0800709f 	.word	0x0800709f
 8007014:	0800709f 	.word	0x0800709f
 8007018:	0800709f 	.word	0x0800709f
 800701c:	0800709f 	.word	0x0800709f
 8007020:	0800709f 	.word	0x0800709f
 8007024:	0800709f 	.word	0x0800709f
 8007028:	0800709f 	.word	0x0800709f
 800702c:	0800709f 	.word	0x0800709f
 8007030:	08007091 	.word	0x08007091
 8007034:	2b40      	cmp	r3, #64	@ 0x40
 8007036:	d02e      	beq.n	8007096 <UART_SetConfig+0x8aa>
 8007038:	e031      	b.n	800709e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703a:	f7fc fd0b 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 800703e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007040:	e033      	b.n	80070aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007042:	f7fc fd1d 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8007046:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007048:	e02f      	b.n	80070aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800704e:	4618      	mov	r0, r3
 8007050:	f7fd ff4c 	bl	8004eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007058:	e027      	b.n	80070aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705a:	f107 0318 	add.w	r3, r7, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe f898 	bl	8005194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007068:	e01f      	b.n	80070aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800706a:	4b2d      	ldr	r3, [pc, #180]	@ (8007120 <UART_SetConfig+0x934>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007076:	4b2a      	ldr	r3, [pc, #168]	@ (8007120 <UART_SetConfig+0x934>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	08db      	lsrs	r3, r3, #3
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	4a24      	ldr	r2, [pc, #144]	@ (8007114 <UART_SetConfig+0x928>)
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007088:	e00f      	b.n	80070aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800708a:	4b22      	ldr	r3, [pc, #136]	@ (8007114 <UART_SetConfig+0x928>)
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708e:	e00c      	b.n	80070aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007090:	4b21      	ldr	r3, [pc, #132]	@ (8007118 <UART_SetConfig+0x92c>)
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007094:	e009      	b.n	80070aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800709c:	e005      	b.n	80070aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 80e7 	beq.w	8007280 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	4a19      	ldr	r2, [pc, #100]	@ (800711c <UART_SetConfig+0x930>)
 80070b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070bc:	461a      	mov	r2, r3
 80070be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c4:	005a      	lsls	r2, r3, #1
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	441a      	add	r2, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	2b0f      	cmp	r3, #15
 80070dc:	d916      	bls.n	800710c <UART_SetConfig+0x920>
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070e4:	d212      	bcs.n	800710c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	f023 030f 	bic.w	r3, r3, #15
 80070ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070fe:	4313      	orrs	r3, r2
 8007100:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007108:	60da      	str	r2, [r3, #12]
 800710a:	e0b9      	b.n	8007280 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007112:	e0b5      	b.n	8007280 <UART_SetConfig+0xa94>
 8007114:	03d09000 	.word	0x03d09000
 8007118:	003d0900 	.word	0x003d0900
 800711c:	080097f8 	.word	0x080097f8
 8007120:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007124:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007128:	2b20      	cmp	r3, #32
 800712a:	dc49      	bgt.n	80071c0 <UART_SetConfig+0x9d4>
 800712c:	2b00      	cmp	r3, #0
 800712e:	db7c      	blt.n	800722a <UART_SetConfig+0xa3e>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d87a      	bhi.n	800722a <UART_SetConfig+0xa3e>
 8007134:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <UART_SetConfig+0x950>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	080071c7 	.word	0x080071c7
 8007140:	080071cf 	.word	0x080071cf
 8007144:	0800722b 	.word	0x0800722b
 8007148:	0800722b 	.word	0x0800722b
 800714c:	080071d7 	.word	0x080071d7
 8007150:	0800722b 	.word	0x0800722b
 8007154:	0800722b 	.word	0x0800722b
 8007158:	0800722b 	.word	0x0800722b
 800715c:	080071e7 	.word	0x080071e7
 8007160:	0800722b 	.word	0x0800722b
 8007164:	0800722b 	.word	0x0800722b
 8007168:	0800722b 	.word	0x0800722b
 800716c:	0800722b 	.word	0x0800722b
 8007170:	0800722b 	.word	0x0800722b
 8007174:	0800722b 	.word	0x0800722b
 8007178:	0800722b 	.word	0x0800722b
 800717c:	080071f7 	.word	0x080071f7
 8007180:	0800722b 	.word	0x0800722b
 8007184:	0800722b 	.word	0x0800722b
 8007188:	0800722b 	.word	0x0800722b
 800718c:	0800722b 	.word	0x0800722b
 8007190:	0800722b 	.word	0x0800722b
 8007194:	0800722b 	.word	0x0800722b
 8007198:	0800722b 	.word	0x0800722b
 800719c:	0800722b 	.word	0x0800722b
 80071a0:	0800722b 	.word	0x0800722b
 80071a4:	0800722b 	.word	0x0800722b
 80071a8:	0800722b 	.word	0x0800722b
 80071ac:	0800722b 	.word	0x0800722b
 80071b0:	0800722b 	.word	0x0800722b
 80071b4:	0800722b 	.word	0x0800722b
 80071b8:	0800722b 	.word	0x0800722b
 80071bc:	0800721d 	.word	0x0800721d
 80071c0:	2b40      	cmp	r3, #64	@ 0x40
 80071c2:	d02e      	beq.n	8007222 <UART_SetConfig+0xa36>
 80071c4:	e031      	b.n	800722a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c6:	f7fc fc45 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 80071ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071cc:	e033      	b.n	8007236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ce:	f7fc fc57 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 80071d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071d4:	e02f      	b.n	8007236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fd fe86 	bl	8004eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e4:	e027      	b.n	8007236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e6:	f107 0318 	add.w	r3, r7, #24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fd ffd2 	bl	8005194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f4:	e01f      	b.n	8007236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f6:	4b2d      	ldr	r3, [pc, #180]	@ (80072ac <UART_SetConfig+0xac0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007202:	4b2a      	ldr	r3, [pc, #168]	@ (80072ac <UART_SetConfig+0xac0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	08db      	lsrs	r3, r3, #3
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	4a28      	ldr	r2, [pc, #160]	@ (80072b0 <UART_SetConfig+0xac4>)
 800720e:	fa22 f303 	lsr.w	r3, r2, r3
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007214:	e00f      	b.n	8007236 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007216:	4b26      	ldr	r3, [pc, #152]	@ (80072b0 <UART_SetConfig+0xac4>)
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800721a:	e00c      	b.n	8007236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800721c:	4b25      	ldr	r3, [pc, #148]	@ (80072b4 <UART_SetConfig+0xac8>)
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007220:	e009      	b.n	8007236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007228:	e005      	b.n	8007236 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007234:	bf00      	nop
    }

    if (pclk != 0U)
 8007236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d021      	beq.n	8007280 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	4a1d      	ldr	r2, [pc, #116]	@ (80072b8 <UART_SetConfig+0xacc>)
 8007242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007246:	461a      	mov	r2, r3
 8007248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724a:	fbb3 f2f2 	udiv	r2, r3, r2
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	441a      	add	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	fbb2 f3f3 	udiv	r3, r2, r3
 800725e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	2b0f      	cmp	r3, #15
 8007264:	d909      	bls.n	800727a <UART_SetConfig+0xa8e>
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800726c:	d205      	bcs.n	800727a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	b29a      	uxth	r2, r3
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60da      	str	r2, [r3, #12]
 8007278:	e002      	b.n	8007280 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2201      	movs	r2, #1
 8007284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2201      	movs	r2, #1
 800728c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2200      	movs	r2, #0
 8007294:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2200      	movs	r2, #0
 800729a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800729c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3748      	adds	r7, #72	@ 0x48
 80072a4:	46bd      	mov	sp, r7
 80072a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072aa:	bf00      	nop
 80072ac:	58024400 	.word	0x58024400
 80072b0:	03d09000 	.word	0x03d09000
 80072b4:	003d0900 	.word	0x003d0900
 80072b8:	080097f8 	.word	0x080097f8

080072bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01a      	beq.n	80073d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ba:	d10a      	bne.n	80073d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b098      	sub	sp, #96	@ 0x60
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007410:	f7fa fba0 	bl	8001b54 <HAL_GetTick>
 8007414:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b08      	cmp	r3, #8
 8007422:	d12f      	bne.n	8007484 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007424:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742c:	2200      	movs	r2, #0
 800742e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f88e 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d022      	beq.n	8007484 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800744c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007452:	653b      	str	r3, [r7, #80]	@ 0x50
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800745c:	647b      	str	r3, [r7, #68]	@ 0x44
 800745e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800746a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e6      	bne.n	800743e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e063      	b.n	800754c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b04      	cmp	r3, #4
 8007490:	d149      	bne.n	8007526 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007492:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749a:	2200      	movs	r2, #0
 800749c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f857 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d03c      	beq.n	8007526 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80074cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e6      	bne.n	80074ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3308      	adds	r3, #8
 80074e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 0301 	bic.w	r3, r3, #1
 80074f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3308      	adds	r3, #8
 80074fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074fe:	61fa      	str	r2, [r7, #28]
 8007500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	69b9      	ldr	r1, [r7, #24]
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	617b      	str	r3, [r7, #20]
   return(result);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e5      	bne.n	80074de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e012      	b.n	800754c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3758      	adds	r7, #88	@ 0x58
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007564:	e04f      	b.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d04b      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756e:	f7fa faf1 	bl	8001b54 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	429a      	cmp	r2, r3
 800757c:	d302      	bcc.n	8007584 <UART_WaitOnFlagUntilTimeout+0x30>
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e04e      	b.n	8007626 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b00      	cmp	r3, #0
 8007594:	d037      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b80      	cmp	r3, #128	@ 0x80
 800759a:	d034      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b40      	cmp	r3, #64	@ 0x40
 80075a0:	d031      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d110      	bne.n	80075d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2208      	movs	r2, #8
 80075b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f839 	bl	8007630 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2208      	movs	r2, #8
 80075c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e029      	b.n	8007626 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075e0:	d111      	bne.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f81f 	bl	8007630 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e00f      	b.n	8007626 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4013      	ands	r3, r2
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	bf0c      	ite	eq
 8007616:	2301      	moveq	r3, #1
 8007618:	2300      	movne	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	429a      	cmp	r2, r3
 8007622:	d0a0      	beq.n	8007566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b095      	sub	sp, #84	@ 0x54
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800764c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007656:	643b      	str	r3, [r7, #64]	@ 0x40
 8007658:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800765c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e6      	bne.n	8007638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	61fb      	str	r3, [r7, #28]
   return(result);
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	4b1e      	ldr	r3, [pc, #120]	@ (80076f8 <UART_EndRxTransfer+0xc8>)
 800767e:	4013      	ands	r3, r2
 8007680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3308      	adds	r3, #8
 8007688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800768a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e5      	bne.n	800766a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d118      	bne.n	80076d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f023 0310 	bic.w	r3, r3, #16
 80076ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	613b      	str	r3, [r7, #16]
   return(result);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e6      	bne.n	80076a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076ec:	bf00      	nop
 80076ee:	3754      	adds	r7, #84	@ 0x54
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	effffffe 	.word	0xeffffffe

080076fc <std>:
 80076fc:	2300      	movs	r3, #0
 80076fe:	b510      	push	{r4, lr}
 8007700:	4604      	mov	r4, r0
 8007702:	e9c0 3300 	strd	r3, r3, [r0]
 8007706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800770a:	6083      	str	r3, [r0, #8]
 800770c:	8181      	strh	r1, [r0, #12]
 800770e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007710:	81c2      	strh	r2, [r0, #14]
 8007712:	6183      	str	r3, [r0, #24]
 8007714:	4619      	mov	r1, r3
 8007716:	2208      	movs	r2, #8
 8007718:	305c      	adds	r0, #92	@ 0x5c
 800771a:	f000 f906 	bl	800792a <memset>
 800771e:	4b0d      	ldr	r3, [pc, #52]	@ (8007754 <std+0x58>)
 8007720:	6263      	str	r3, [r4, #36]	@ 0x24
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <std+0x5c>)
 8007724:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <std+0x60>)
 8007728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <std+0x64>)
 800772c:	6323      	str	r3, [r4, #48]	@ 0x30
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <std+0x68>)
 8007730:	6224      	str	r4, [r4, #32]
 8007732:	429c      	cmp	r4, r3
 8007734:	d006      	beq.n	8007744 <std+0x48>
 8007736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800773a:	4294      	cmp	r4, r2
 800773c:	d002      	beq.n	8007744 <std+0x48>
 800773e:	33d0      	adds	r3, #208	@ 0xd0
 8007740:	429c      	cmp	r4, r3
 8007742:	d105      	bne.n	8007750 <std+0x54>
 8007744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f000 b966 	b.w	8007a1c <__retarget_lock_init_recursive>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	bf00      	nop
 8007754:	080078a5 	.word	0x080078a5
 8007758:	080078c7 	.word	0x080078c7
 800775c:	080078ff 	.word	0x080078ff
 8007760:	08007923 	.word	0x08007923
 8007764:	240001e8 	.word	0x240001e8

08007768 <stdio_exit_handler>:
 8007768:	4a02      	ldr	r2, [pc, #8]	@ (8007774 <stdio_exit_handler+0xc>)
 800776a:	4903      	ldr	r1, [pc, #12]	@ (8007778 <stdio_exit_handler+0x10>)
 800776c:	4803      	ldr	r0, [pc, #12]	@ (800777c <stdio_exit_handler+0x14>)
 800776e:	f000 b869 	b.w	8007844 <_fwalk_sglue>
 8007772:	bf00      	nop
 8007774:	2400002c 	.word	0x2400002c
 8007778:	080082d5 	.word	0x080082d5
 800777c:	2400003c 	.word	0x2400003c

08007780 <cleanup_stdio>:
 8007780:	6841      	ldr	r1, [r0, #4]
 8007782:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <cleanup_stdio+0x34>)
 8007784:	4299      	cmp	r1, r3
 8007786:	b510      	push	{r4, lr}
 8007788:	4604      	mov	r4, r0
 800778a:	d001      	beq.n	8007790 <cleanup_stdio+0x10>
 800778c:	f000 fda2 	bl	80082d4 <_fflush_r>
 8007790:	68a1      	ldr	r1, [r4, #8]
 8007792:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <cleanup_stdio+0x38>)
 8007794:	4299      	cmp	r1, r3
 8007796:	d002      	beq.n	800779e <cleanup_stdio+0x1e>
 8007798:	4620      	mov	r0, r4
 800779a:	f000 fd9b 	bl	80082d4 <_fflush_r>
 800779e:	68e1      	ldr	r1, [r4, #12]
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <cleanup_stdio+0x3c>)
 80077a2:	4299      	cmp	r1, r3
 80077a4:	d004      	beq.n	80077b0 <cleanup_stdio+0x30>
 80077a6:	4620      	mov	r0, r4
 80077a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ac:	f000 bd92 	b.w	80082d4 <_fflush_r>
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	bf00      	nop
 80077b4:	240001e8 	.word	0x240001e8
 80077b8:	24000250 	.word	0x24000250
 80077bc:	240002b8 	.word	0x240002b8

080077c0 <global_stdio_init.part.0>:
 80077c0:	b510      	push	{r4, lr}
 80077c2:	4b0b      	ldr	r3, [pc, #44]	@ (80077f0 <global_stdio_init.part.0+0x30>)
 80077c4:	4c0b      	ldr	r4, [pc, #44]	@ (80077f4 <global_stdio_init.part.0+0x34>)
 80077c6:	4a0c      	ldr	r2, [pc, #48]	@ (80077f8 <global_stdio_init.part.0+0x38>)
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	4620      	mov	r0, r4
 80077cc:	2200      	movs	r2, #0
 80077ce:	2104      	movs	r1, #4
 80077d0:	f7ff ff94 	bl	80076fc <std>
 80077d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077d8:	2201      	movs	r2, #1
 80077da:	2109      	movs	r1, #9
 80077dc:	f7ff ff8e 	bl	80076fc <std>
 80077e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077e4:	2202      	movs	r2, #2
 80077e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ea:	2112      	movs	r1, #18
 80077ec:	f7ff bf86 	b.w	80076fc <std>
 80077f0:	24000320 	.word	0x24000320
 80077f4:	240001e8 	.word	0x240001e8
 80077f8:	08007769 	.word	0x08007769

080077fc <__sfp_lock_acquire>:
 80077fc:	4801      	ldr	r0, [pc, #4]	@ (8007804 <__sfp_lock_acquire+0x8>)
 80077fe:	f000 b90e 	b.w	8007a1e <__retarget_lock_acquire_recursive>
 8007802:	bf00      	nop
 8007804:	24000329 	.word	0x24000329

08007808 <__sfp_lock_release>:
 8007808:	4801      	ldr	r0, [pc, #4]	@ (8007810 <__sfp_lock_release+0x8>)
 800780a:	f000 b909 	b.w	8007a20 <__retarget_lock_release_recursive>
 800780e:	bf00      	nop
 8007810:	24000329 	.word	0x24000329

08007814 <__sinit>:
 8007814:	b510      	push	{r4, lr}
 8007816:	4604      	mov	r4, r0
 8007818:	f7ff fff0 	bl	80077fc <__sfp_lock_acquire>
 800781c:	6a23      	ldr	r3, [r4, #32]
 800781e:	b11b      	cbz	r3, 8007828 <__sinit+0x14>
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	f7ff bff0 	b.w	8007808 <__sfp_lock_release>
 8007828:	4b04      	ldr	r3, [pc, #16]	@ (800783c <__sinit+0x28>)
 800782a:	6223      	str	r3, [r4, #32]
 800782c:	4b04      	ldr	r3, [pc, #16]	@ (8007840 <__sinit+0x2c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f5      	bne.n	8007820 <__sinit+0xc>
 8007834:	f7ff ffc4 	bl	80077c0 <global_stdio_init.part.0>
 8007838:	e7f2      	b.n	8007820 <__sinit+0xc>
 800783a:	bf00      	nop
 800783c:	08007781 	.word	0x08007781
 8007840:	24000320 	.word	0x24000320

08007844 <_fwalk_sglue>:
 8007844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007848:	4607      	mov	r7, r0
 800784a:	4688      	mov	r8, r1
 800784c:	4614      	mov	r4, r2
 800784e:	2600      	movs	r6, #0
 8007850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007854:	f1b9 0901 	subs.w	r9, r9, #1
 8007858:	d505      	bpl.n	8007866 <_fwalk_sglue+0x22>
 800785a:	6824      	ldr	r4, [r4, #0]
 800785c:	2c00      	cmp	r4, #0
 800785e:	d1f7      	bne.n	8007850 <_fwalk_sglue+0xc>
 8007860:	4630      	mov	r0, r6
 8007862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d907      	bls.n	800787c <_fwalk_sglue+0x38>
 800786c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007870:	3301      	adds	r3, #1
 8007872:	d003      	beq.n	800787c <_fwalk_sglue+0x38>
 8007874:	4629      	mov	r1, r5
 8007876:	4638      	mov	r0, r7
 8007878:	47c0      	blx	r8
 800787a:	4306      	orrs	r6, r0
 800787c:	3568      	adds	r5, #104	@ 0x68
 800787e:	e7e9      	b.n	8007854 <_fwalk_sglue+0x10>

08007880 <iprintf>:
 8007880:	b40f      	push	{r0, r1, r2, r3}
 8007882:	b507      	push	{r0, r1, r2, lr}
 8007884:	4906      	ldr	r1, [pc, #24]	@ (80078a0 <iprintf+0x20>)
 8007886:	ab04      	add	r3, sp, #16
 8007888:	6808      	ldr	r0, [r1, #0]
 800788a:	f853 2b04 	ldr.w	r2, [r3], #4
 800788e:	6881      	ldr	r1, [r0, #8]
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	f000 f9f7 	bl	8007c84 <_vfiprintf_r>
 8007896:	b003      	add	sp, #12
 8007898:	f85d eb04 	ldr.w	lr, [sp], #4
 800789c:	b004      	add	sp, #16
 800789e:	4770      	bx	lr
 80078a0:	24000038 	.word	0x24000038

080078a4 <__sread>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	460c      	mov	r4, r1
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	f000 f868 	bl	8007980 <_read_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	bfab      	itete	ge
 80078b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078b6:	89a3      	ldrhlt	r3, [r4, #12]
 80078b8:	181b      	addge	r3, r3, r0
 80078ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078be:	bfac      	ite	ge
 80078c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078c2:	81a3      	strhlt	r3, [r4, #12]
 80078c4:	bd10      	pop	{r4, pc}

080078c6 <__swrite>:
 80078c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	461f      	mov	r7, r3
 80078cc:	898b      	ldrh	r3, [r1, #12]
 80078ce:	05db      	lsls	r3, r3, #23
 80078d0:	4605      	mov	r5, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4616      	mov	r6, r2
 80078d6:	d505      	bpl.n	80078e4 <__swrite+0x1e>
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	2302      	movs	r3, #2
 80078de:	2200      	movs	r2, #0
 80078e0:	f000 f83c 	bl	800795c <_lseek_r>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	4632      	mov	r2, r6
 80078f2:	463b      	mov	r3, r7
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	f000 b853 	b.w	80079a4 <_write_r>

080078fe <__sseek>:
 80078fe:	b510      	push	{r4, lr}
 8007900:	460c      	mov	r4, r1
 8007902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007906:	f000 f829 	bl	800795c <_lseek_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	bf15      	itete	ne
 8007910:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800791a:	81a3      	strheq	r3, [r4, #12]
 800791c:	bf18      	it	ne
 800791e:	81a3      	strhne	r3, [r4, #12]
 8007920:	bd10      	pop	{r4, pc}

08007922 <__sclose>:
 8007922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007926:	f000 b809 	b.w	800793c <_close_r>

0800792a <memset>:
 800792a:	4402      	add	r2, r0
 800792c:	4603      	mov	r3, r0
 800792e:	4293      	cmp	r3, r2
 8007930:	d100      	bne.n	8007934 <memset+0xa>
 8007932:	4770      	bx	lr
 8007934:	f803 1b01 	strb.w	r1, [r3], #1
 8007938:	e7f9      	b.n	800792e <memset+0x4>
	...

0800793c <_close_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d06      	ldr	r5, [pc, #24]	@ (8007958 <_close_r+0x1c>)
 8007940:	2300      	movs	r3, #0
 8007942:	4604      	mov	r4, r0
 8007944:	4608      	mov	r0, r1
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	f7f9 fd03 	bl	8001352 <_close>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_close_r+0x1a>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_close_r+0x1a>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	24000324 	.word	0x24000324

0800795c <_lseek_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	@ (800797c <_lseek_r+0x20>)
 8007960:	4604      	mov	r4, r0
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	2200      	movs	r2, #0
 8007968:	602a      	str	r2, [r5, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	f7f9 fd18 	bl	80013a0 <_lseek>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_lseek_r+0x1e>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_lseek_r+0x1e>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	24000324 	.word	0x24000324

08007980 <_read_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d07      	ldr	r5, [pc, #28]	@ (80079a0 <_read_r+0x20>)
 8007984:	4604      	mov	r4, r0
 8007986:	4608      	mov	r0, r1
 8007988:	4611      	mov	r1, r2
 800798a:	2200      	movs	r2, #0
 800798c:	602a      	str	r2, [r5, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	f7f9 fca6 	bl	80012e0 <_read>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_read_r+0x1e>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_read_r+0x1e>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	24000324 	.word	0x24000324

080079a4 <_write_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d07      	ldr	r5, [pc, #28]	@ (80079c4 <_write_r+0x20>)
 80079a8:	4604      	mov	r4, r0
 80079aa:	4608      	mov	r0, r1
 80079ac:	4611      	mov	r1, r2
 80079ae:	2200      	movs	r2, #0
 80079b0:	602a      	str	r2, [r5, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f7f9 fcb1 	bl	800131a <_write>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_write_r+0x1e>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_write_r+0x1e>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	24000324 	.word	0x24000324

080079c8 <__errno>:
 80079c8:	4b01      	ldr	r3, [pc, #4]	@ (80079d0 <__errno+0x8>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	24000038 	.word	0x24000038

080079d4 <__libc_init_array>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4d0d      	ldr	r5, [pc, #52]	@ (8007a0c <__libc_init_array+0x38>)
 80079d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007a10 <__libc_init_array+0x3c>)
 80079da:	1b64      	subs	r4, r4, r5
 80079dc:	10a4      	asrs	r4, r4, #2
 80079de:	2600      	movs	r6, #0
 80079e0:	42a6      	cmp	r6, r4
 80079e2:	d109      	bne.n	80079f8 <__libc_init_array+0x24>
 80079e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007a14 <__libc_init_array+0x40>)
 80079e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007a18 <__libc_init_array+0x44>)
 80079e8:	f000 fdc4 	bl	8008574 <_init>
 80079ec:	1b64      	subs	r4, r4, r5
 80079ee:	10a4      	asrs	r4, r4, #2
 80079f0:	2600      	movs	r6, #0
 80079f2:	42a6      	cmp	r6, r4
 80079f4:	d105      	bne.n	8007a02 <__libc_init_array+0x2e>
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fc:	4798      	blx	r3
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7ee      	b.n	80079e0 <__libc_init_array+0xc>
 8007a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a06:	4798      	blx	r3
 8007a08:	3601      	adds	r6, #1
 8007a0a:	e7f2      	b.n	80079f2 <__libc_init_array+0x1e>
 8007a0c:	0800984c 	.word	0x0800984c
 8007a10:	0800984c 	.word	0x0800984c
 8007a14:	0800984c 	.word	0x0800984c
 8007a18:	08009850 	.word	0x08009850

08007a1c <__retarget_lock_init_recursive>:
 8007a1c:	4770      	bx	lr

08007a1e <__retarget_lock_acquire_recursive>:
 8007a1e:	4770      	bx	lr

08007a20 <__retarget_lock_release_recursive>:
 8007a20:	4770      	bx	lr

08007a22 <memcpy>:
 8007a22:	440a      	add	r2, r1
 8007a24:	4291      	cmp	r1, r2
 8007a26:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a2a:	d100      	bne.n	8007a2e <memcpy+0xc>
 8007a2c:	4770      	bx	lr
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a38:	4291      	cmp	r1, r2
 8007a3a:	d1f9      	bne.n	8007a30 <memcpy+0xe>
 8007a3c:	bd10      	pop	{r4, pc}
	...

08007a40 <_free_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4605      	mov	r5, r0
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d041      	beq.n	8007acc <_free_r+0x8c>
 8007a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4c:	1f0c      	subs	r4, r1, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfb8      	it	lt
 8007a52:	18e4      	addlt	r4, r4, r3
 8007a54:	f000 f8e0 	bl	8007c18 <__malloc_lock>
 8007a58:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad0 <_free_r+0x90>)
 8007a5a:	6813      	ldr	r3, [r2, #0]
 8007a5c:	b933      	cbnz	r3, 8007a6c <_free_r+0x2c>
 8007a5e:	6063      	str	r3, [r4, #4]
 8007a60:	6014      	str	r4, [r2, #0]
 8007a62:	4628      	mov	r0, r5
 8007a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a68:	f000 b8dc 	b.w	8007c24 <__malloc_unlock>
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	d908      	bls.n	8007a82 <_free_r+0x42>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	1821      	adds	r1, r4, r0
 8007a74:	428b      	cmp	r3, r1
 8007a76:	bf01      	itttt	eq
 8007a78:	6819      	ldreq	r1, [r3, #0]
 8007a7a:	685b      	ldreq	r3, [r3, #4]
 8007a7c:	1809      	addeq	r1, r1, r0
 8007a7e:	6021      	streq	r1, [r4, #0]
 8007a80:	e7ed      	b.n	8007a5e <_free_r+0x1e>
 8007a82:	461a      	mov	r2, r3
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	b10b      	cbz	r3, 8007a8c <_free_r+0x4c>
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	d9fa      	bls.n	8007a82 <_free_r+0x42>
 8007a8c:	6811      	ldr	r1, [r2, #0]
 8007a8e:	1850      	adds	r0, r2, r1
 8007a90:	42a0      	cmp	r0, r4
 8007a92:	d10b      	bne.n	8007aac <_free_r+0x6c>
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	4401      	add	r1, r0
 8007a98:	1850      	adds	r0, r2, r1
 8007a9a:	4283      	cmp	r3, r0
 8007a9c:	6011      	str	r1, [r2, #0]
 8007a9e:	d1e0      	bne.n	8007a62 <_free_r+0x22>
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	6053      	str	r3, [r2, #4]
 8007aa6:	4408      	add	r0, r1
 8007aa8:	6010      	str	r0, [r2, #0]
 8007aaa:	e7da      	b.n	8007a62 <_free_r+0x22>
 8007aac:	d902      	bls.n	8007ab4 <_free_r+0x74>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	e7d6      	b.n	8007a62 <_free_r+0x22>
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	1821      	adds	r1, r4, r0
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	bf04      	itt	eq
 8007abc:	6819      	ldreq	r1, [r3, #0]
 8007abe:	685b      	ldreq	r3, [r3, #4]
 8007ac0:	6063      	str	r3, [r4, #4]
 8007ac2:	bf04      	itt	eq
 8007ac4:	1809      	addeq	r1, r1, r0
 8007ac6:	6021      	streq	r1, [r4, #0]
 8007ac8:	6054      	str	r4, [r2, #4]
 8007aca:	e7ca      	b.n	8007a62 <_free_r+0x22>
 8007acc:	bd38      	pop	{r3, r4, r5, pc}
 8007ace:	bf00      	nop
 8007ad0:	24000330 	.word	0x24000330

08007ad4 <sbrk_aligned>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8007b14 <sbrk_aligned+0x40>)
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6831      	ldr	r1, [r6, #0]
 8007adc:	4605      	mov	r5, r0
 8007ade:	b911      	cbnz	r1, 8007ae6 <sbrk_aligned+0x12>
 8007ae0:	f000 fcb4 	bl	800844c <_sbrk_r>
 8007ae4:	6030      	str	r0, [r6, #0]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 fcaf 	bl	800844c <_sbrk_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d103      	bne.n	8007afa <sbrk_aligned+0x26>
 8007af2:	f04f 34ff 	mov.w	r4, #4294967295
 8007af6:	4620      	mov	r0, r4
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	1cc4      	adds	r4, r0, #3
 8007afc:	f024 0403 	bic.w	r4, r4, #3
 8007b00:	42a0      	cmp	r0, r4
 8007b02:	d0f8      	beq.n	8007af6 <sbrk_aligned+0x22>
 8007b04:	1a21      	subs	r1, r4, r0
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fca0 	bl	800844c <_sbrk_r>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d1f2      	bne.n	8007af6 <sbrk_aligned+0x22>
 8007b10:	e7ef      	b.n	8007af2 <sbrk_aligned+0x1e>
 8007b12:	bf00      	nop
 8007b14:	2400032c 	.word	0x2400032c

08007b18 <_malloc_r>:
 8007b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b1c:	1ccd      	adds	r5, r1, #3
 8007b1e:	f025 0503 	bic.w	r5, r5, #3
 8007b22:	3508      	adds	r5, #8
 8007b24:	2d0c      	cmp	r5, #12
 8007b26:	bf38      	it	cc
 8007b28:	250c      	movcc	r5, #12
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	db01      	blt.n	8007b34 <_malloc_r+0x1c>
 8007b30:	42a9      	cmp	r1, r5
 8007b32:	d904      	bls.n	8007b3e <_malloc_r+0x26>
 8007b34:	230c      	movs	r3, #12
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c14 <_malloc_r+0xfc>
 8007b42:	f000 f869 	bl	8007c18 <__malloc_lock>
 8007b46:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4a:	461c      	mov	r4, r3
 8007b4c:	bb44      	cbnz	r4, 8007ba0 <_malloc_r+0x88>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff ffbf 	bl	8007ad4 <sbrk_aligned>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	4604      	mov	r4, r0
 8007b5a:	d158      	bne.n	8007c0e <_malloc_r+0xf6>
 8007b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b60:	4627      	mov	r7, r4
 8007b62:	2f00      	cmp	r7, #0
 8007b64:	d143      	bne.n	8007bee <_malloc_r+0xd6>
 8007b66:	2c00      	cmp	r4, #0
 8007b68:	d04b      	beq.n	8007c02 <_malloc_r+0xea>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	4630      	mov	r0, r6
 8007b70:	eb04 0903 	add.w	r9, r4, r3
 8007b74:	f000 fc6a 	bl	800844c <_sbrk_r>
 8007b78:	4581      	cmp	r9, r0
 8007b7a:	d142      	bne.n	8007c02 <_malloc_r+0xea>
 8007b7c:	6821      	ldr	r1, [r4, #0]
 8007b7e:	1a6d      	subs	r5, r5, r1
 8007b80:	4629      	mov	r1, r5
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff ffa6 	bl	8007ad4 <sbrk_aligned>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d03a      	beq.n	8007c02 <_malloc_r+0xea>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	442b      	add	r3, r5
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	f8d8 3000 	ldr.w	r3, [r8]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	bb62      	cbnz	r2, 8007bf4 <_malloc_r+0xdc>
 8007b9a:	f8c8 7000 	str.w	r7, [r8]
 8007b9e:	e00f      	b.n	8007bc0 <_malloc_r+0xa8>
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	1b52      	subs	r2, r2, r5
 8007ba4:	d420      	bmi.n	8007be8 <_malloc_r+0xd0>
 8007ba6:	2a0b      	cmp	r2, #11
 8007ba8:	d917      	bls.n	8007bda <_malloc_r+0xc2>
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	6025      	str	r5, [r4, #0]
 8007bb0:	bf18      	it	ne
 8007bb2:	6059      	strne	r1, [r3, #4]
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	bf08      	it	eq
 8007bb8:	f8c8 1000 	streq.w	r1, [r8]
 8007bbc:	5162      	str	r2, [r4, r5]
 8007bbe:	604b      	str	r3, [r1, #4]
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f000 f82f 	bl	8007c24 <__malloc_unlock>
 8007bc6:	f104 000b 	add.w	r0, r4, #11
 8007bca:	1d23      	adds	r3, r4, #4
 8007bcc:	f020 0007 	bic.w	r0, r0, #7
 8007bd0:	1ac2      	subs	r2, r0, r3
 8007bd2:	bf1c      	itt	ne
 8007bd4:	1a1b      	subne	r3, r3, r0
 8007bd6:	50a3      	strne	r3, [r4, r2]
 8007bd8:	e7af      	b.n	8007b3a <_malloc_r+0x22>
 8007bda:	6862      	ldr	r2, [r4, #4]
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	bf0c      	ite	eq
 8007be0:	f8c8 2000 	streq.w	r2, [r8]
 8007be4:	605a      	strne	r2, [r3, #4]
 8007be6:	e7eb      	b.n	8007bc0 <_malloc_r+0xa8>
 8007be8:	4623      	mov	r3, r4
 8007bea:	6864      	ldr	r4, [r4, #4]
 8007bec:	e7ae      	b.n	8007b4c <_malloc_r+0x34>
 8007bee:	463c      	mov	r4, r7
 8007bf0:	687f      	ldr	r7, [r7, #4]
 8007bf2:	e7b6      	b.n	8007b62 <_malloc_r+0x4a>
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d1fb      	bne.n	8007bf4 <_malloc_r+0xdc>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6053      	str	r3, [r2, #4]
 8007c00:	e7de      	b.n	8007bc0 <_malloc_r+0xa8>
 8007c02:	230c      	movs	r3, #12
 8007c04:	6033      	str	r3, [r6, #0]
 8007c06:	4630      	mov	r0, r6
 8007c08:	f000 f80c 	bl	8007c24 <__malloc_unlock>
 8007c0c:	e794      	b.n	8007b38 <_malloc_r+0x20>
 8007c0e:	6005      	str	r5, [r0, #0]
 8007c10:	e7d6      	b.n	8007bc0 <_malloc_r+0xa8>
 8007c12:	bf00      	nop
 8007c14:	24000330 	.word	0x24000330

08007c18 <__malloc_lock>:
 8007c18:	4801      	ldr	r0, [pc, #4]	@ (8007c20 <__malloc_lock+0x8>)
 8007c1a:	f7ff bf00 	b.w	8007a1e <__retarget_lock_acquire_recursive>
 8007c1e:	bf00      	nop
 8007c20:	24000328 	.word	0x24000328

08007c24 <__malloc_unlock>:
 8007c24:	4801      	ldr	r0, [pc, #4]	@ (8007c2c <__malloc_unlock+0x8>)
 8007c26:	f7ff befb 	b.w	8007a20 <__retarget_lock_release_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	24000328 	.word	0x24000328

08007c30 <__sfputc_r>:
 8007c30:	6893      	ldr	r3, [r2, #8]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	b410      	push	{r4}
 8007c38:	6093      	str	r3, [r2, #8]
 8007c3a:	da08      	bge.n	8007c4e <__sfputc_r+0x1e>
 8007c3c:	6994      	ldr	r4, [r2, #24]
 8007c3e:	42a3      	cmp	r3, r4
 8007c40:	db01      	blt.n	8007c46 <__sfputc_r+0x16>
 8007c42:	290a      	cmp	r1, #10
 8007c44:	d103      	bne.n	8007c4e <__sfputc_r+0x1e>
 8007c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c4a:	f000 bb6b 	b.w	8008324 <__swbuf_r>
 8007c4e:	6813      	ldr	r3, [r2, #0]
 8007c50:	1c58      	adds	r0, r3, #1
 8007c52:	6010      	str	r0, [r2, #0]
 8007c54:	7019      	strb	r1, [r3, #0]
 8007c56:	4608      	mov	r0, r1
 8007c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <__sfputs_r>:
 8007c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c60:	4606      	mov	r6, r0
 8007c62:	460f      	mov	r7, r1
 8007c64:	4614      	mov	r4, r2
 8007c66:	18d5      	adds	r5, r2, r3
 8007c68:	42ac      	cmp	r4, r5
 8007c6a:	d101      	bne.n	8007c70 <__sfputs_r+0x12>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e007      	b.n	8007c80 <__sfputs_r+0x22>
 8007c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c74:	463a      	mov	r2, r7
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7ff ffda 	bl	8007c30 <__sfputc_r>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d1f3      	bne.n	8007c68 <__sfputs_r+0xa>
 8007c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c84 <_vfiprintf_r>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	460d      	mov	r5, r1
 8007c8a:	b09d      	sub	sp, #116	@ 0x74
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	4698      	mov	r8, r3
 8007c90:	4606      	mov	r6, r0
 8007c92:	b118      	cbz	r0, 8007c9c <_vfiprintf_r+0x18>
 8007c94:	6a03      	ldr	r3, [r0, #32]
 8007c96:	b90b      	cbnz	r3, 8007c9c <_vfiprintf_r+0x18>
 8007c98:	f7ff fdbc 	bl	8007814 <__sinit>
 8007c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c9e:	07d9      	lsls	r1, r3, #31
 8007ca0:	d405      	bmi.n	8007cae <_vfiprintf_r+0x2a>
 8007ca2:	89ab      	ldrh	r3, [r5, #12]
 8007ca4:	059a      	lsls	r2, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_vfiprintf_r+0x2a>
 8007ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007caa:	f7ff feb8 	bl	8007a1e <__retarget_lock_acquire_recursive>
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	071b      	lsls	r3, r3, #28
 8007cb2:	d501      	bpl.n	8007cb8 <_vfiprintf_r+0x34>
 8007cb4:	692b      	ldr	r3, [r5, #16]
 8007cb6:	b99b      	cbnz	r3, 8007ce0 <_vfiprintf_r+0x5c>
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 fb70 	bl	80083a0 <__swsetup_r>
 8007cc0:	b170      	cbz	r0, 8007ce0 <_vfiprintf_r+0x5c>
 8007cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cc4:	07dc      	lsls	r4, r3, #31
 8007cc6:	d504      	bpl.n	8007cd2 <_vfiprintf_r+0x4e>
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	b01d      	add	sp, #116	@ 0x74
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	0598      	lsls	r0, r3, #22
 8007cd6:	d4f7      	bmi.n	8007cc8 <_vfiprintf_r+0x44>
 8007cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cda:	f7ff fea1 	bl	8007a20 <__retarget_lock_release_recursive>
 8007cde:	e7f3      	b.n	8007cc8 <_vfiprintf_r+0x44>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cee:	2330      	movs	r3, #48	@ 0x30
 8007cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ea0 <_vfiprintf_r+0x21c>
 8007cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cf8:	f04f 0901 	mov.w	r9, #1
 8007cfc:	4623      	mov	r3, r4
 8007cfe:	469a      	mov	sl, r3
 8007d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d04:	b10a      	cbz	r2, 8007d0a <_vfiprintf_r+0x86>
 8007d06:	2a25      	cmp	r2, #37	@ 0x25
 8007d08:	d1f9      	bne.n	8007cfe <_vfiprintf_r+0x7a>
 8007d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d0e:	d00b      	beq.n	8007d28 <_vfiprintf_r+0xa4>
 8007d10:	465b      	mov	r3, fp
 8007d12:	4622      	mov	r2, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ffa1 	bl	8007c5e <__sfputs_r>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f000 80a7 	beq.w	8007e70 <_vfiprintf_r+0x1ec>
 8007d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d24:	445a      	add	r2, fp
 8007d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d28:	f89a 3000 	ldrb.w	r3, [sl]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 809f 	beq.w	8007e70 <_vfiprintf_r+0x1ec>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f04f 32ff 	mov.w	r2, #4294967295
 8007d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d3c:	f10a 0a01 	add.w	sl, sl, #1
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	9307      	str	r3, [sp, #28]
 8007d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d4a:	4654      	mov	r4, sl
 8007d4c:	2205      	movs	r2, #5
 8007d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d52:	4853      	ldr	r0, [pc, #332]	@ (8007ea0 <_vfiprintf_r+0x21c>)
 8007d54:	f7f8 fac4 	bl	80002e0 <memchr>
 8007d58:	9a04      	ldr	r2, [sp, #16]
 8007d5a:	b9d8      	cbnz	r0, 8007d94 <_vfiprintf_r+0x110>
 8007d5c:	06d1      	lsls	r1, r2, #27
 8007d5e:	bf44      	itt	mi
 8007d60:	2320      	movmi	r3, #32
 8007d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d66:	0713      	lsls	r3, r2, #28
 8007d68:	bf44      	itt	mi
 8007d6a:	232b      	movmi	r3, #43	@ 0x2b
 8007d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d70:	f89a 3000 	ldrb.w	r3, [sl]
 8007d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d76:	d015      	beq.n	8007da4 <_vfiprintf_r+0x120>
 8007d78:	9a07      	ldr	r2, [sp, #28]
 8007d7a:	4654      	mov	r4, sl
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	f04f 0c0a 	mov.w	ip, #10
 8007d82:	4621      	mov	r1, r4
 8007d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d88:	3b30      	subs	r3, #48	@ 0x30
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	d94b      	bls.n	8007e26 <_vfiprintf_r+0x1a2>
 8007d8e:	b1b0      	cbz	r0, 8007dbe <_vfiprintf_r+0x13a>
 8007d90:	9207      	str	r2, [sp, #28]
 8007d92:	e014      	b.n	8007dbe <_vfiprintf_r+0x13a>
 8007d94:	eba0 0308 	sub.w	r3, r0, r8
 8007d98:	fa09 f303 	lsl.w	r3, r9, r3
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	9304      	str	r3, [sp, #16]
 8007da0:	46a2      	mov	sl, r4
 8007da2:	e7d2      	b.n	8007d4a <_vfiprintf_r+0xc6>
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	1d19      	adds	r1, r3, #4
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	9103      	str	r1, [sp, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bfbb      	ittet	lt
 8007db0:	425b      	neglt	r3, r3
 8007db2:	f042 0202 	orrlt.w	r2, r2, #2
 8007db6:	9307      	strge	r3, [sp, #28]
 8007db8:	9307      	strlt	r3, [sp, #28]
 8007dba:	bfb8      	it	lt
 8007dbc:	9204      	strlt	r2, [sp, #16]
 8007dbe:	7823      	ldrb	r3, [r4, #0]
 8007dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dc2:	d10a      	bne.n	8007dda <_vfiprintf_r+0x156>
 8007dc4:	7863      	ldrb	r3, [r4, #1]
 8007dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dc8:	d132      	bne.n	8007e30 <_vfiprintf_r+0x1ac>
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	1d1a      	adds	r2, r3, #4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	9203      	str	r2, [sp, #12]
 8007dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dd6:	3402      	adds	r4, #2
 8007dd8:	9305      	str	r3, [sp, #20]
 8007dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007eb0 <_vfiprintf_r+0x22c>
 8007dde:	7821      	ldrb	r1, [r4, #0]
 8007de0:	2203      	movs	r2, #3
 8007de2:	4650      	mov	r0, sl
 8007de4:	f7f8 fa7c 	bl	80002e0 <memchr>
 8007de8:	b138      	cbz	r0, 8007dfa <_vfiprintf_r+0x176>
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	eba0 000a 	sub.w	r0, r0, sl
 8007df0:	2240      	movs	r2, #64	@ 0x40
 8007df2:	4082      	lsls	r2, r0
 8007df4:	4313      	orrs	r3, r2
 8007df6:	3401      	adds	r4, #1
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfe:	4829      	ldr	r0, [pc, #164]	@ (8007ea4 <_vfiprintf_r+0x220>)
 8007e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e04:	2206      	movs	r2, #6
 8007e06:	f7f8 fa6b 	bl	80002e0 <memchr>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d03f      	beq.n	8007e8e <_vfiprintf_r+0x20a>
 8007e0e:	4b26      	ldr	r3, [pc, #152]	@ (8007ea8 <_vfiprintf_r+0x224>)
 8007e10:	bb1b      	cbnz	r3, 8007e5a <_vfiprintf_r+0x1d6>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	3307      	adds	r3, #7
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	9303      	str	r3, [sp, #12]
 8007e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e20:	443b      	add	r3, r7
 8007e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e24:	e76a      	b.n	8007cfc <_vfiprintf_r+0x78>
 8007e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	e7a8      	b.n	8007d82 <_vfiprintf_r+0xfe>
 8007e30:	2300      	movs	r3, #0
 8007e32:	3401      	adds	r4, #1
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	4619      	mov	r1, r3
 8007e38:	f04f 0c0a 	mov.w	ip, #10
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e42:	3a30      	subs	r2, #48	@ 0x30
 8007e44:	2a09      	cmp	r2, #9
 8007e46:	d903      	bls.n	8007e50 <_vfiprintf_r+0x1cc>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0c6      	beq.n	8007dda <_vfiprintf_r+0x156>
 8007e4c:	9105      	str	r1, [sp, #20]
 8007e4e:	e7c4      	b.n	8007dda <_vfiprintf_r+0x156>
 8007e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e54:	4604      	mov	r4, r0
 8007e56:	2301      	movs	r3, #1
 8007e58:	e7f0      	b.n	8007e3c <_vfiprintf_r+0x1b8>
 8007e5a:	ab03      	add	r3, sp, #12
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4b12      	ldr	r3, [pc, #72]	@ (8007eac <_vfiprintf_r+0x228>)
 8007e62:	a904      	add	r1, sp, #16
 8007e64:	4630      	mov	r0, r6
 8007e66:	f3af 8000 	nop.w
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	1c78      	adds	r0, r7, #1
 8007e6e:	d1d6      	bne.n	8007e1e <_vfiprintf_r+0x19a>
 8007e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e72:	07d9      	lsls	r1, r3, #31
 8007e74:	d405      	bmi.n	8007e82 <_vfiprintf_r+0x1fe>
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	059a      	lsls	r2, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_vfiprintf_r+0x1fe>
 8007e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e7e:	f7ff fdcf 	bl	8007a20 <__retarget_lock_release_recursive>
 8007e82:	89ab      	ldrh	r3, [r5, #12]
 8007e84:	065b      	lsls	r3, r3, #25
 8007e86:	f53f af1f 	bmi.w	8007cc8 <_vfiprintf_r+0x44>
 8007e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e8c:	e71e      	b.n	8007ccc <_vfiprintf_r+0x48>
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	462a      	mov	r2, r5
 8007e94:	4b05      	ldr	r3, [pc, #20]	@ (8007eac <_vfiprintf_r+0x228>)
 8007e96:	a904      	add	r1, sp, #16
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f879 	bl	8007f90 <_printf_i>
 8007e9e:	e7e4      	b.n	8007e6a <_vfiprintf_r+0x1e6>
 8007ea0:	08009810 	.word	0x08009810
 8007ea4:	0800981a 	.word	0x0800981a
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	08007c5f 	.word	0x08007c5f
 8007eb0:	08009816 	.word	0x08009816

08007eb4 <_printf_common>:
 8007eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	4616      	mov	r6, r2
 8007eba:	4698      	mov	r8, r3
 8007ebc:	688a      	ldr	r2, [r1, #8]
 8007ebe:	690b      	ldr	r3, [r1, #16]
 8007ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bfb8      	it	lt
 8007ec8:	4613      	movlt	r3, r2
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b10a      	cbz	r2, 8007eda <_printf_common+0x26>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	0699      	lsls	r1, r3, #26
 8007ede:	bf42      	ittt	mi
 8007ee0:	6833      	ldrmi	r3, [r6, #0]
 8007ee2:	3302      	addmi	r3, #2
 8007ee4:	6033      	strmi	r3, [r6, #0]
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	f015 0506 	ands.w	r5, r5, #6
 8007eec:	d106      	bne.n	8007efc <_printf_common+0x48>
 8007eee:	f104 0a19 	add.w	sl, r4, #25
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	6832      	ldr	r2, [r6, #0]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dc26      	bgt.n	8007f4a <_printf_common+0x96>
 8007efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	3b00      	subs	r3, #0
 8007f04:	bf18      	it	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	0692      	lsls	r2, r2, #26
 8007f0a:	d42b      	bmi.n	8007f64 <_printf_common+0xb0>
 8007f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f10:	4641      	mov	r1, r8
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c8      	blx	r9
 8007f16:	3001      	adds	r0, #1
 8007f18:	d01e      	beq.n	8007f58 <_printf_common+0xa4>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	6922      	ldr	r2, [r4, #16]
 8007f1e:	f003 0306 	and.w	r3, r3, #6
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	bf02      	ittt	eq
 8007f26:	68e5      	ldreq	r5, [r4, #12]
 8007f28:	6833      	ldreq	r3, [r6, #0]
 8007f2a:	1aed      	subeq	r5, r5, r3
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	bf0c      	ite	eq
 8007f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f34:	2500      	movne	r5, #0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bfc4      	itt	gt
 8007f3a:	1a9b      	subgt	r3, r3, r2
 8007f3c:	18ed      	addgt	r5, r5, r3
 8007f3e:	2600      	movs	r6, #0
 8007f40:	341a      	adds	r4, #26
 8007f42:	42b5      	cmp	r5, r6
 8007f44:	d11a      	bne.n	8007f7c <_printf_common+0xc8>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e008      	b.n	8007f5c <_printf_common+0xa8>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	4641      	mov	r1, r8
 8007f50:	4638      	mov	r0, r7
 8007f52:	47c8      	blx	r9
 8007f54:	3001      	adds	r0, #1
 8007f56:	d103      	bne.n	8007f60 <_printf_common+0xac>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7c6      	b.n	8007ef2 <_printf_common+0x3e>
 8007f64:	18e1      	adds	r1, r4, r3
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	2030      	movs	r0, #48	@ 0x30
 8007f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f6e:	4422      	add	r2, r4
 8007f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f78:	3302      	adds	r3, #2
 8007f7a:	e7c7      	b.n	8007f0c <_printf_common+0x58>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4641      	mov	r1, r8
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c8      	blx	r9
 8007f86:	3001      	adds	r0, #1
 8007f88:	d0e6      	beq.n	8007f58 <_printf_common+0xa4>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7d9      	b.n	8007f42 <_printf_common+0x8e>
	...

08007f90 <_printf_i>:
 8007f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	7e0f      	ldrb	r7, [r1, #24]
 8007f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f98:	2f78      	cmp	r7, #120	@ 0x78
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fa6:	d807      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fa8:	2f62      	cmp	r7, #98	@ 0x62
 8007faa:	d80a      	bhi.n	8007fc2 <_printf_i+0x32>
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	f000 80d1 	beq.w	8008154 <_printf_i+0x1c4>
 8007fb2:	2f58      	cmp	r7, #88	@ 0x58
 8007fb4:	f000 80b8 	beq.w	8008128 <_printf_i+0x198>
 8007fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fc0:	e03a      	b.n	8008038 <_printf_i+0xa8>
 8007fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fc6:	2b15      	cmp	r3, #21
 8007fc8:	d8f6      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fca:	a101      	add	r1, pc, #4	@ (adr r1, 8007fd0 <_printf_i+0x40>)
 8007fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd0:	08008029 	.word	0x08008029
 8007fd4:	0800803d 	.word	0x0800803d
 8007fd8:	08007fb9 	.word	0x08007fb9
 8007fdc:	08007fb9 	.word	0x08007fb9
 8007fe0:	08007fb9 	.word	0x08007fb9
 8007fe4:	08007fb9 	.word	0x08007fb9
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	08007fb9 	.word	0x08007fb9
 8007ff0:	08007fb9 	.word	0x08007fb9
 8007ff4:	08007fb9 	.word	0x08007fb9
 8007ff8:	08007fb9 	.word	0x08007fb9
 8007ffc:	0800813b 	.word	0x0800813b
 8008000:	08008067 	.word	0x08008067
 8008004:	080080f5 	.word	0x080080f5
 8008008:	08007fb9 	.word	0x08007fb9
 800800c:	08007fb9 	.word	0x08007fb9
 8008010:	0800815d 	.word	0x0800815d
 8008014:	08007fb9 	.word	0x08007fb9
 8008018:	08008067 	.word	0x08008067
 800801c:	08007fb9 	.word	0x08007fb9
 8008020:	08007fb9 	.word	0x08007fb9
 8008024:	080080fd 	.word	0x080080fd
 8008028:	6833      	ldr	r3, [r6, #0]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6032      	str	r2, [r6, #0]
 8008030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008038:	2301      	movs	r3, #1
 800803a:	e09c      	b.n	8008176 <_printf_i+0x1e6>
 800803c:	6833      	ldr	r3, [r6, #0]
 800803e:	6820      	ldr	r0, [r4, #0]
 8008040:	1d19      	adds	r1, r3, #4
 8008042:	6031      	str	r1, [r6, #0]
 8008044:	0606      	lsls	r6, r0, #24
 8008046:	d501      	bpl.n	800804c <_printf_i+0xbc>
 8008048:	681d      	ldr	r5, [r3, #0]
 800804a:	e003      	b.n	8008054 <_printf_i+0xc4>
 800804c:	0645      	lsls	r5, r0, #25
 800804e:	d5fb      	bpl.n	8008048 <_printf_i+0xb8>
 8008050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008054:	2d00      	cmp	r5, #0
 8008056:	da03      	bge.n	8008060 <_printf_i+0xd0>
 8008058:	232d      	movs	r3, #45	@ 0x2d
 800805a:	426d      	negs	r5, r5
 800805c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008060:	4858      	ldr	r0, [pc, #352]	@ (80081c4 <_printf_i+0x234>)
 8008062:	230a      	movs	r3, #10
 8008064:	e011      	b.n	800808a <_printf_i+0xfa>
 8008066:	6821      	ldr	r1, [r4, #0]
 8008068:	6833      	ldr	r3, [r6, #0]
 800806a:	0608      	lsls	r0, r1, #24
 800806c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008070:	d402      	bmi.n	8008078 <_printf_i+0xe8>
 8008072:	0649      	lsls	r1, r1, #25
 8008074:	bf48      	it	mi
 8008076:	b2ad      	uxthmi	r5, r5
 8008078:	2f6f      	cmp	r7, #111	@ 0x6f
 800807a:	4852      	ldr	r0, [pc, #328]	@ (80081c4 <_printf_i+0x234>)
 800807c:	6033      	str	r3, [r6, #0]
 800807e:	bf14      	ite	ne
 8008080:	230a      	movne	r3, #10
 8008082:	2308      	moveq	r3, #8
 8008084:	2100      	movs	r1, #0
 8008086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800808a:	6866      	ldr	r6, [r4, #4]
 800808c:	60a6      	str	r6, [r4, #8]
 800808e:	2e00      	cmp	r6, #0
 8008090:	db05      	blt.n	800809e <_printf_i+0x10e>
 8008092:	6821      	ldr	r1, [r4, #0]
 8008094:	432e      	orrs	r6, r5
 8008096:	f021 0104 	bic.w	r1, r1, #4
 800809a:	6021      	str	r1, [r4, #0]
 800809c:	d04b      	beq.n	8008136 <_printf_i+0x1a6>
 800809e:	4616      	mov	r6, r2
 80080a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80080a4:	fb03 5711 	mls	r7, r3, r1, r5
 80080a8:	5dc7      	ldrb	r7, [r0, r7]
 80080aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080ae:	462f      	mov	r7, r5
 80080b0:	42bb      	cmp	r3, r7
 80080b2:	460d      	mov	r5, r1
 80080b4:	d9f4      	bls.n	80080a0 <_printf_i+0x110>
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d10b      	bne.n	80080d2 <_printf_i+0x142>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	07df      	lsls	r7, r3, #31
 80080be:	d508      	bpl.n	80080d2 <_printf_i+0x142>
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	6861      	ldr	r1, [r4, #4]
 80080c4:	4299      	cmp	r1, r3
 80080c6:	bfde      	ittt	le
 80080c8:	2330      	movle	r3, #48	@ 0x30
 80080ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080d2:	1b92      	subs	r2, r2, r6
 80080d4:	6122      	str	r2, [r4, #16]
 80080d6:	f8cd a000 	str.w	sl, [sp]
 80080da:	464b      	mov	r3, r9
 80080dc:	aa03      	add	r2, sp, #12
 80080de:	4621      	mov	r1, r4
 80080e0:	4640      	mov	r0, r8
 80080e2:	f7ff fee7 	bl	8007eb4 <_printf_common>
 80080e6:	3001      	adds	r0, #1
 80080e8:	d14a      	bne.n	8008180 <_printf_i+0x1f0>
 80080ea:	f04f 30ff 	mov.w	r0, #4294967295
 80080ee:	b004      	add	sp, #16
 80080f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	f043 0320 	orr.w	r3, r3, #32
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	4832      	ldr	r0, [pc, #200]	@ (80081c8 <_printf_i+0x238>)
 80080fe:	2778      	movs	r7, #120	@ 0x78
 8008100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	6831      	ldr	r1, [r6, #0]
 8008108:	061f      	lsls	r7, r3, #24
 800810a:	f851 5b04 	ldr.w	r5, [r1], #4
 800810e:	d402      	bmi.n	8008116 <_printf_i+0x186>
 8008110:	065f      	lsls	r7, r3, #25
 8008112:	bf48      	it	mi
 8008114:	b2ad      	uxthmi	r5, r5
 8008116:	6031      	str	r1, [r6, #0]
 8008118:	07d9      	lsls	r1, r3, #31
 800811a:	bf44      	itt	mi
 800811c:	f043 0320 	orrmi.w	r3, r3, #32
 8008120:	6023      	strmi	r3, [r4, #0]
 8008122:	b11d      	cbz	r5, 800812c <_printf_i+0x19c>
 8008124:	2310      	movs	r3, #16
 8008126:	e7ad      	b.n	8008084 <_printf_i+0xf4>
 8008128:	4826      	ldr	r0, [pc, #152]	@ (80081c4 <_printf_i+0x234>)
 800812a:	e7e9      	b.n	8008100 <_printf_i+0x170>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	f023 0320 	bic.w	r3, r3, #32
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	e7f6      	b.n	8008124 <_printf_i+0x194>
 8008136:	4616      	mov	r6, r2
 8008138:	e7bd      	b.n	80080b6 <_printf_i+0x126>
 800813a:	6833      	ldr	r3, [r6, #0]
 800813c:	6825      	ldr	r5, [r4, #0]
 800813e:	6961      	ldr	r1, [r4, #20]
 8008140:	1d18      	adds	r0, r3, #4
 8008142:	6030      	str	r0, [r6, #0]
 8008144:	062e      	lsls	r6, r5, #24
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	d501      	bpl.n	800814e <_printf_i+0x1be>
 800814a:	6019      	str	r1, [r3, #0]
 800814c:	e002      	b.n	8008154 <_printf_i+0x1c4>
 800814e:	0668      	lsls	r0, r5, #25
 8008150:	d5fb      	bpl.n	800814a <_printf_i+0x1ba>
 8008152:	8019      	strh	r1, [r3, #0]
 8008154:	2300      	movs	r3, #0
 8008156:	6123      	str	r3, [r4, #16]
 8008158:	4616      	mov	r6, r2
 800815a:	e7bc      	b.n	80080d6 <_printf_i+0x146>
 800815c:	6833      	ldr	r3, [r6, #0]
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	6032      	str	r2, [r6, #0]
 8008162:	681e      	ldr	r6, [r3, #0]
 8008164:	6862      	ldr	r2, [r4, #4]
 8008166:	2100      	movs	r1, #0
 8008168:	4630      	mov	r0, r6
 800816a:	f7f8 f8b9 	bl	80002e0 <memchr>
 800816e:	b108      	cbz	r0, 8008174 <_printf_i+0x1e4>
 8008170:	1b80      	subs	r0, r0, r6
 8008172:	6060      	str	r0, [r4, #4]
 8008174:	6863      	ldr	r3, [r4, #4]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2300      	movs	r3, #0
 800817a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800817e:	e7aa      	b.n	80080d6 <_printf_i+0x146>
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	4632      	mov	r2, r6
 8008184:	4649      	mov	r1, r9
 8008186:	4640      	mov	r0, r8
 8008188:	47d0      	blx	sl
 800818a:	3001      	adds	r0, #1
 800818c:	d0ad      	beq.n	80080ea <_printf_i+0x15a>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	079b      	lsls	r3, r3, #30
 8008192:	d413      	bmi.n	80081bc <_printf_i+0x22c>
 8008194:	68e0      	ldr	r0, [r4, #12]
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	4298      	cmp	r0, r3
 800819a:	bfb8      	it	lt
 800819c:	4618      	movlt	r0, r3
 800819e:	e7a6      	b.n	80080ee <_printf_i+0x15e>
 80081a0:	2301      	movs	r3, #1
 80081a2:	4632      	mov	r2, r6
 80081a4:	4649      	mov	r1, r9
 80081a6:	4640      	mov	r0, r8
 80081a8:	47d0      	blx	sl
 80081aa:	3001      	adds	r0, #1
 80081ac:	d09d      	beq.n	80080ea <_printf_i+0x15a>
 80081ae:	3501      	adds	r5, #1
 80081b0:	68e3      	ldr	r3, [r4, #12]
 80081b2:	9903      	ldr	r1, [sp, #12]
 80081b4:	1a5b      	subs	r3, r3, r1
 80081b6:	42ab      	cmp	r3, r5
 80081b8:	dcf2      	bgt.n	80081a0 <_printf_i+0x210>
 80081ba:	e7eb      	b.n	8008194 <_printf_i+0x204>
 80081bc:	2500      	movs	r5, #0
 80081be:	f104 0619 	add.w	r6, r4, #25
 80081c2:	e7f5      	b.n	80081b0 <_printf_i+0x220>
 80081c4:	08009821 	.word	0x08009821
 80081c8:	08009832 	.word	0x08009832

080081cc <__sflush_r>:
 80081cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	0716      	lsls	r6, r2, #28
 80081d6:	4605      	mov	r5, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	d454      	bmi.n	8008286 <__sflush_r+0xba>
 80081dc:	684b      	ldr	r3, [r1, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	dc02      	bgt.n	80081e8 <__sflush_r+0x1c>
 80081e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd48      	ble.n	800827a <__sflush_r+0xae>
 80081e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	d045      	beq.n	800827a <__sflush_r+0xae>
 80081ee:	2300      	movs	r3, #0
 80081f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081f4:	682f      	ldr	r7, [r5, #0]
 80081f6:	6a21      	ldr	r1, [r4, #32]
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	d030      	beq.n	800825e <__sflush_r+0x92>
 80081fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	0759      	lsls	r1, r3, #29
 8008202:	d505      	bpl.n	8008210 <__sflush_r+0x44>
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	1ad2      	subs	r2, r2, r3
 8008208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800820a:	b10b      	cbz	r3, 8008210 <__sflush_r+0x44>
 800820c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	2300      	movs	r3, #0
 8008212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008214:	6a21      	ldr	r1, [r4, #32]
 8008216:	4628      	mov	r0, r5
 8008218:	47b0      	blx	r6
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	d106      	bne.n	800822e <__sflush_r+0x62>
 8008220:	6829      	ldr	r1, [r5, #0]
 8008222:	291d      	cmp	r1, #29
 8008224:	d82b      	bhi.n	800827e <__sflush_r+0xb2>
 8008226:	4a2a      	ldr	r2, [pc, #168]	@ (80082d0 <__sflush_r+0x104>)
 8008228:	40ca      	lsrs	r2, r1
 800822a:	07d6      	lsls	r6, r2, #31
 800822c:	d527      	bpl.n	800827e <__sflush_r+0xb2>
 800822e:	2200      	movs	r2, #0
 8008230:	6062      	str	r2, [r4, #4]
 8008232:	04d9      	lsls	r1, r3, #19
 8008234:	6922      	ldr	r2, [r4, #16]
 8008236:	6022      	str	r2, [r4, #0]
 8008238:	d504      	bpl.n	8008244 <__sflush_r+0x78>
 800823a:	1c42      	adds	r2, r0, #1
 800823c:	d101      	bne.n	8008242 <__sflush_r+0x76>
 800823e:	682b      	ldr	r3, [r5, #0]
 8008240:	b903      	cbnz	r3, 8008244 <__sflush_r+0x78>
 8008242:	6560      	str	r0, [r4, #84]	@ 0x54
 8008244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008246:	602f      	str	r7, [r5, #0]
 8008248:	b1b9      	cbz	r1, 800827a <__sflush_r+0xae>
 800824a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800824e:	4299      	cmp	r1, r3
 8008250:	d002      	beq.n	8008258 <__sflush_r+0x8c>
 8008252:	4628      	mov	r0, r5
 8008254:	f7ff fbf4 	bl	8007a40 <_free_r>
 8008258:	2300      	movs	r3, #0
 800825a:	6363      	str	r3, [r4, #52]	@ 0x34
 800825c:	e00d      	b.n	800827a <__sflush_r+0xae>
 800825e:	2301      	movs	r3, #1
 8008260:	4628      	mov	r0, r5
 8008262:	47b0      	blx	r6
 8008264:	4602      	mov	r2, r0
 8008266:	1c50      	adds	r0, r2, #1
 8008268:	d1c9      	bne.n	80081fe <__sflush_r+0x32>
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0c6      	beq.n	80081fe <__sflush_r+0x32>
 8008270:	2b1d      	cmp	r3, #29
 8008272:	d001      	beq.n	8008278 <__sflush_r+0xac>
 8008274:	2b16      	cmp	r3, #22
 8008276:	d11e      	bne.n	80082b6 <__sflush_r+0xea>
 8008278:	602f      	str	r7, [r5, #0]
 800827a:	2000      	movs	r0, #0
 800827c:	e022      	b.n	80082c4 <__sflush_r+0xf8>
 800827e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008282:	b21b      	sxth	r3, r3
 8008284:	e01b      	b.n	80082be <__sflush_r+0xf2>
 8008286:	690f      	ldr	r7, [r1, #16]
 8008288:	2f00      	cmp	r7, #0
 800828a:	d0f6      	beq.n	800827a <__sflush_r+0xae>
 800828c:	0793      	lsls	r3, r2, #30
 800828e:	680e      	ldr	r6, [r1, #0]
 8008290:	bf08      	it	eq
 8008292:	694b      	ldreq	r3, [r1, #20]
 8008294:	600f      	str	r7, [r1, #0]
 8008296:	bf18      	it	ne
 8008298:	2300      	movne	r3, #0
 800829a:	eba6 0807 	sub.w	r8, r6, r7
 800829e:	608b      	str	r3, [r1, #8]
 80082a0:	f1b8 0f00 	cmp.w	r8, #0
 80082a4:	dde9      	ble.n	800827a <__sflush_r+0xae>
 80082a6:	6a21      	ldr	r1, [r4, #32]
 80082a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082aa:	4643      	mov	r3, r8
 80082ac:	463a      	mov	r2, r7
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b0      	blx	r6
 80082b2:	2800      	cmp	r0, #0
 80082b4:	dc08      	bgt.n	80082c8 <__sflush_r+0xfc>
 80082b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c8:	4407      	add	r7, r0
 80082ca:	eba8 0800 	sub.w	r8, r8, r0
 80082ce:	e7e7      	b.n	80082a0 <__sflush_r+0xd4>
 80082d0:	20400001 	.word	0x20400001

080082d4 <_fflush_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	4605      	mov	r5, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	b913      	cbnz	r3, 80082e4 <_fflush_r+0x10>
 80082de:	2500      	movs	r5, #0
 80082e0:	4628      	mov	r0, r5
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	b118      	cbz	r0, 80082ee <_fflush_r+0x1a>
 80082e6:	6a03      	ldr	r3, [r0, #32]
 80082e8:	b90b      	cbnz	r3, 80082ee <_fflush_r+0x1a>
 80082ea:	f7ff fa93 	bl	8007814 <__sinit>
 80082ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0f3      	beq.n	80082de <_fflush_r+0xa>
 80082f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082f8:	07d0      	lsls	r0, r2, #31
 80082fa:	d404      	bmi.n	8008306 <_fflush_r+0x32>
 80082fc:	0599      	lsls	r1, r3, #22
 80082fe:	d402      	bmi.n	8008306 <_fflush_r+0x32>
 8008300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008302:	f7ff fb8c 	bl	8007a1e <__retarget_lock_acquire_recursive>
 8008306:	4628      	mov	r0, r5
 8008308:	4621      	mov	r1, r4
 800830a:	f7ff ff5f 	bl	80081cc <__sflush_r>
 800830e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008310:	07da      	lsls	r2, r3, #31
 8008312:	4605      	mov	r5, r0
 8008314:	d4e4      	bmi.n	80082e0 <_fflush_r+0xc>
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	059b      	lsls	r3, r3, #22
 800831a:	d4e1      	bmi.n	80082e0 <_fflush_r+0xc>
 800831c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800831e:	f7ff fb7f 	bl	8007a20 <__retarget_lock_release_recursive>
 8008322:	e7dd      	b.n	80082e0 <_fflush_r+0xc>

08008324 <__swbuf_r>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	460e      	mov	r6, r1
 8008328:	4614      	mov	r4, r2
 800832a:	4605      	mov	r5, r0
 800832c:	b118      	cbz	r0, 8008336 <__swbuf_r+0x12>
 800832e:	6a03      	ldr	r3, [r0, #32]
 8008330:	b90b      	cbnz	r3, 8008336 <__swbuf_r+0x12>
 8008332:	f7ff fa6f 	bl	8007814 <__sinit>
 8008336:	69a3      	ldr	r3, [r4, #24]
 8008338:	60a3      	str	r3, [r4, #8]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	071a      	lsls	r2, r3, #28
 800833e:	d501      	bpl.n	8008344 <__swbuf_r+0x20>
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	b943      	cbnz	r3, 8008356 <__swbuf_r+0x32>
 8008344:	4621      	mov	r1, r4
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f82a 	bl	80083a0 <__swsetup_r>
 800834c:	b118      	cbz	r0, 8008356 <__swbuf_r+0x32>
 800834e:	f04f 37ff 	mov.w	r7, #4294967295
 8008352:	4638      	mov	r0, r7
 8008354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	6922      	ldr	r2, [r4, #16]
 800835a:	1a98      	subs	r0, r3, r2
 800835c:	6963      	ldr	r3, [r4, #20]
 800835e:	b2f6      	uxtb	r6, r6
 8008360:	4283      	cmp	r3, r0
 8008362:	4637      	mov	r7, r6
 8008364:	dc05      	bgt.n	8008372 <__swbuf_r+0x4e>
 8008366:	4621      	mov	r1, r4
 8008368:	4628      	mov	r0, r5
 800836a:	f7ff ffb3 	bl	80082d4 <_fflush_r>
 800836e:	2800      	cmp	r0, #0
 8008370:	d1ed      	bne.n	800834e <__swbuf_r+0x2a>
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	3b01      	subs	r3, #1
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	6022      	str	r2, [r4, #0]
 800837e:	701e      	strb	r6, [r3, #0]
 8008380:	6962      	ldr	r2, [r4, #20]
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	429a      	cmp	r2, r3
 8008386:	d004      	beq.n	8008392 <__swbuf_r+0x6e>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d5e1      	bpl.n	8008352 <__swbuf_r+0x2e>
 800838e:	2e0a      	cmp	r6, #10
 8008390:	d1df      	bne.n	8008352 <__swbuf_r+0x2e>
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f7ff ff9d 	bl	80082d4 <_fflush_r>
 800839a:	2800      	cmp	r0, #0
 800839c:	d0d9      	beq.n	8008352 <__swbuf_r+0x2e>
 800839e:	e7d6      	b.n	800834e <__swbuf_r+0x2a>

080083a0 <__swsetup_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4b29      	ldr	r3, [pc, #164]	@ (8008448 <__swsetup_r+0xa8>)
 80083a4:	4605      	mov	r5, r0
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	460c      	mov	r4, r1
 80083aa:	b118      	cbz	r0, 80083b4 <__swsetup_r+0x14>
 80083ac:	6a03      	ldr	r3, [r0, #32]
 80083ae:	b90b      	cbnz	r3, 80083b4 <__swsetup_r+0x14>
 80083b0:	f7ff fa30 	bl	8007814 <__sinit>
 80083b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b8:	0719      	lsls	r1, r3, #28
 80083ba:	d422      	bmi.n	8008402 <__swsetup_r+0x62>
 80083bc:	06da      	lsls	r2, r3, #27
 80083be:	d407      	bmi.n	80083d0 <__swsetup_r+0x30>
 80083c0:	2209      	movs	r2, #9
 80083c2:	602a      	str	r2, [r5, #0]
 80083c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	f04f 30ff 	mov.w	r0, #4294967295
 80083ce:	e033      	b.n	8008438 <__swsetup_r+0x98>
 80083d0:	0758      	lsls	r0, r3, #29
 80083d2:	d512      	bpl.n	80083fa <__swsetup_r+0x5a>
 80083d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083d6:	b141      	cbz	r1, 80083ea <__swsetup_r+0x4a>
 80083d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083dc:	4299      	cmp	r1, r3
 80083de:	d002      	beq.n	80083e6 <__swsetup_r+0x46>
 80083e0:	4628      	mov	r0, r5
 80083e2:	f7ff fb2d 	bl	8007a40 <_free_r>
 80083e6:	2300      	movs	r3, #0
 80083e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	2300      	movs	r3, #0
 80083f4:	6063      	str	r3, [r4, #4]
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f043 0308 	orr.w	r3, r3, #8
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	6923      	ldr	r3, [r4, #16]
 8008404:	b94b      	cbnz	r3, 800841a <__swsetup_r+0x7a>
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800840c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008410:	d003      	beq.n	800841a <__swsetup_r+0x7a>
 8008412:	4621      	mov	r1, r4
 8008414:	4628      	mov	r0, r5
 8008416:	f000 f84f 	bl	80084b8 <__smakebuf_r>
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	f013 0201 	ands.w	r2, r3, #1
 8008422:	d00a      	beq.n	800843a <__swsetup_r+0x9a>
 8008424:	2200      	movs	r2, #0
 8008426:	60a2      	str	r2, [r4, #8]
 8008428:	6962      	ldr	r2, [r4, #20]
 800842a:	4252      	negs	r2, r2
 800842c:	61a2      	str	r2, [r4, #24]
 800842e:	6922      	ldr	r2, [r4, #16]
 8008430:	b942      	cbnz	r2, 8008444 <__swsetup_r+0xa4>
 8008432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008436:	d1c5      	bne.n	80083c4 <__swsetup_r+0x24>
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	0799      	lsls	r1, r3, #30
 800843c:	bf58      	it	pl
 800843e:	6962      	ldrpl	r2, [r4, #20]
 8008440:	60a2      	str	r2, [r4, #8]
 8008442:	e7f4      	b.n	800842e <__swsetup_r+0x8e>
 8008444:	2000      	movs	r0, #0
 8008446:	e7f7      	b.n	8008438 <__swsetup_r+0x98>
 8008448:	24000038 	.word	0x24000038

0800844c <_sbrk_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d06      	ldr	r5, [pc, #24]	@ (8008468 <_sbrk_r+0x1c>)
 8008450:	2300      	movs	r3, #0
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	f7f8 ffb0 	bl	80013bc <_sbrk>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_sbrk_r+0x1a>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_sbrk_r+0x1a>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	24000324 	.word	0x24000324

0800846c <__swhatbuf_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	460c      	mov	r4, r1
 8008470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008474:	2900      	cmp	r1, #0
 8008476:	b096      	sub	sp, #88	@ 0x58
 8008478:	4615      	mov	r5, r2
 800847a:	461e      	mov	r6, r3
 800847c:	da0d      	bge.n	800849a <__swhatbuf_r+0x2e>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008484:	f04f 0100 	mov.w	r1, #0
 8008488:	bf14      	ite	ne
 800848a:	2340      	movne	r3, #64	@ 0x40
 800848c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008490:	2000      	movs	r0, #0
 8008492:	6031      	str	r1, [r6, #0]
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	b016      	add	sp, #88	@ 0x58
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	466a      	mov	r2, sp
 800849c:	f000 f848 	bl	8008530 <_fstat_r>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	dbec      	blt.n	800847e <__swhatbuf_r+0x12>
 80084a4:	9901      	ldr	r1, [sp, #4]
 80084a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084ae:	4259      	negs	r1, r3
 80084b0:	4159      	adcs	r1, r3
 80084b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084b6:	e7eb      	b.n	8008490 <__swhatbuf_r+0x24>

080084b8 <__smakebuf_r>:
 80084b8:	898b      	ldrh	r3, [r1, #12]
 80084ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084bc:	079d      	lsls	r5, r3, #30
 80084be:	4606      	mov	r6, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	d507      	bpl.n	80084d4 <__smakebuf_r+0x1c>
 80084c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	2301      	movs	r3, #1
 80084ce:	6163      	str	r3, [r4, #20]
 80084d0:	b003      	add	sp, #12
 80084d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d4:	ab01      	add	r3, sp, #4
 80084d6:	466a      	mov	r2, sp
 80084d8:	f7ff ffc8 	bl	800846c <__swhatbuf_r>
 80084dc:	9f00      	ldr	r7, [sp, #0]
 80084de:	4605      	mov	r5, r0
 80084e0:	4639      	mov	r1, r7
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff fb18 	bl	8007b18 <_malloc_r>
 80084e8:	b948      	cbnz	r0, 80084fe <__smakebuf_r+0x46>
 80084ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ee:	059a      	lsls	r2, r3, #22
 80084f0:	d4ee      	bmi.n	80084d0 <__smakebuf_r+0x18>
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	f043 0302 	orr.w	r3, r3, #2
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	e7e2      	b.n	80084c4 <__smakebuf_r+0xc>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	6020      	str	r0, [r4, #0]
 8008502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008506:	81a3      	strh	r3, [r4, #12]
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800850e:	b15b      	cbz	r3, 8008528 <__smakebuf_r+0x70>
 8008510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008514:	4630      	mov	r0, r6
 8008516:	f000 f81d 	bl	8008554 <_isatty_r>
 800851a:	b128      	cbz	r0, 8008528 <__smakebuf_r+0x70>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	f043 0301 	orr.w	r3, r3, #1
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	431d      	orrs	r5, r3
 800852c:	81a5      	strh	r5, [r4, #12]
 800852e:	e7cf      	b.n	80084d0 <__smakebuf_r+0x18>

08008530 <_fstat_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d07      	ldr	r5, [pc, #28]	@ (8008550 <_fstat_r+0x20>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	f7f8 ff14 	bl	800136a <_fstat>
 8008542:	1c43      	adds	r3, r0, #1
 8008544:	d102      	bne.n	800854c <_fstat_r+0x1c>
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	b103      	cbz	r3, 800854c <_fstat_r+0x1c>
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	bf00      	nop
 8008550:	24000324 	.word	0x24000324

08008554 <_isatty_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d06      	ldr	r5, [pc, #24]	@ (8008570 <_isatty_r+0x1c>)
 8008558:	2300      	movs	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f7f8 ff13 	bl	800138a <_isatty>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_isatty_r+0x1a>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_isatty_r+0x1a>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	24000324 	.word	0x24000324

08008574 <_init>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	bf00      	nop
 8008578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857a:	bc08      	pop	{r3}
 800857c:	469e      	mov	lr, r3
 800857e:	4770      	bx	lr

08008580 <_fini>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr
