
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000948c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c38  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c364  0800c364  0000d364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c36c  0800c36c  0000d36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c370  0800c370  0000d370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800c374  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800c3fc  0000e088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800c3fc  0000e334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016720  00000000  00000000  0000e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e90  00000000  00000000  000247d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f48  00000000  00000000  00027668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bbd  00000000  00000000  000285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038829  00000000  00000000  0002916d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001708d  00000000  00000000  00061996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015efdf  00000000  00000000  00078a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d7a02  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004634  00000000  00000000  001d7a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001dc07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009714 	.word	0x08009714

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08009714 	.word	0x08009714

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f008 f9c1 	bl	8008a3c <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 fbfd 	bl	8000ebc <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f008 f9b6 	bl	8008a3c <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	0800972c 	.word	0x0800972c
 80006e0:	08009758 	.word	0x08009758

080006e4 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f000 fbe4 	bl	8000ebc <CC1201_SendStrobe>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2033      	movs	r0, #51	@ 0x33
 800070a:	f000 fbd7 	bl	8000ebc <CC1201_SendStrobe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC1201_EnterTxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
}

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2035      	movs	r0, #53	@ 0x35
 8000724:	f000 fbca 	bl	8000ebc <CC1201_SendStrobe>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2036      	movs	r0, #54	@ 0x36
 800073e:	f000 fbbd 	bl	8000ebc <CC1201_SendStrobe>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	203a      	movs	r0, #58	@ 0x3a
 8000758:	f000 fbb0 	bl	8000ebc <CC1201_SendStrobe>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	203b      	movs	r0, #59	@ 0x3b
 8000772:	f000 fba3 	bl	8000ebc <CC1201_SendStrobe>
 8000776:	4603      	mov	r3, r0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CC1201_Nop+0x30>)
 800078a:	f008 f957 	bl	8008a3c <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	203d      	movs	r0, #61	@ 0x3d
 8000792:	f000 fb93 	bl	8000ebc <CC1201_SendStrobe>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <CC1201_Nop+0x34>)
 80007a0:	f008 f94c 	bl	8008a3c <iprintf>
    return result;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08009788 	.word	0x08009788
 80007b4:	080097b0 	.word	0x080097b0

080007b8 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d909      	bls.n	80007de <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 80007ca:	232f      	movs	r3, #47	@ 0x2f
 80007cc:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 80007d4:	2300      	movs	r3, #0
 80007d6:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	e009      	b.n	80007f2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007ea:	2300      	movs	r3, #0
 80007ec:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	4815      	ldr	r0, [pc, #84]	@ (800084c <CC1201_ReadStatus+0x94>)
 80007f8:	f003 f9e2 	bl	8003bc0 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	9000      	str	r0, [sp, #0]
 800080e:	4810      	ldr	r0, [pc, #64]	@ (8000850 <CC1201_ReadStatus+0x98>)
 8000810:	f006 f9a4 	bl	8006b5c <HAL_SPI_TransmitReceive>
 8000814:	4603      	mov	r3, r0
 8000816:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <CC1201_ReadStatus+0x94>)
 800081e:	f003 f9cf 	bl	8003bc0 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000822:	7dbb      	ldrb	r3, [r7, #22]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10c      	bne.n	8000842 <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d009      	beq.n	8000842 <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2bff      	cmp	r3, #255	@ 0xff
 8000832:	d903      	bls.n	800083c <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e002      	b.n	8000842 <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 800083c:	7b7a      	ldrb	r2, [r7, #13]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 8000842:	7dbb      	ldrb	r3, [r7, #22]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58021000 	.word	0x58021000
 8000850:	240000b8 	.word	0x240000b8

08000854 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8000862:	f7ff ffa9 	bl	80007b8 <CC1201_ReadStatus>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 800087e:	f7ff ff9b 	bl	80007b8 <CC1201_ReadStatus>
 8000882:	4603      	mov	r3, r0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 800089a:	f7ff ff8d 	bl	80007b8 <CC1201_ReadStatus>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ac:	b08f      	sub	sp, #60	@ 0x3c
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6178      	str	r0, [r7, #20]
 80008b2:	460b      	mov	r3, r1
 80008b4:	60fa      	str	r2, [r7, #12]
 80008b6:	74fb      	strb	r3, [r7, #19]
 80008b8:	466b      	mov	r3, sp
 80008ba:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e088      	b.n	80009e4 <CC1201_WriteTxFifo+0x13c>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 80008d2:	7cfb      	ldrb	r3, [r7, #19]
 80008d4:	1c99      	adds	r1, r3, #2
 80008d6:	1e4b      	subs	r3, r1, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008da:	460a      	mov	r2, r1
 80008dc:	2300      	movs	r3, #0
 80008de:	603a      	str	r2, [r7, #0]
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	00c3      	lsls	r3, r0, #3
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	00c2      	lsls	r2, r0, #3
 80008f8:	460a      	mov	r2, r1
 80008fa:	2300      	movs	r3, #0
 80008fc:	4692      	mov	sl, r2
 80008fe:	469b      	mov	fp, r3
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800090c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000914:	460b      	mov	r3, r1
 8000916:	3307      	adds	r3, #7
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	ebad 0d03 	sub.w	sp, sp, r3
 8000920:	ab02      	add	r3, sp, #8
 8000922:	3300      	adds	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	1c99      	adds	r1, r3, #2
 800092a:	1e4b      	subs	r3, r1, #1
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	460a      	mov	r2, r1
 8000930:	2300      	movs	r3, #0
 8000932:	4690      	mov	r8, r2
 8000934:	4699      	mov	r9, r3
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800094a:	460a      	mov	r2, r1
 800094c:	2300      	movs	r3, #0
 800094e:	4614      	mov	r4, r2
 8000950:	461d      	mov	r5, r3
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	00eb      	lsls	r3, r5, #3
 800095c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000960:	00e2      	lsls	r2, r4, #3
 8000962:	460b      	mov	r3, r1
 8000964:	3307      	adds	r3, #7
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	ebad 0d03 	sub.w	sp, sp, r3
 800096e:	ab02      	add	r3, sp, #8
 8000970:	3300      	adds	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	227f      	movs	r2, #127	@ 0x7f
 8000978:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000980:	e00e      	b.n	80009a0 <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	441a      	add	r2, r3
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098e:	3301      	adds	r3, #1
 8000990:	7811      	ldrb	r1, [r2, #0]
 8000992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000994:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	3301      	adds	r3, #1
 800099c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009a0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3eb      	bcc.n	8000982 <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2110      	movs	r1, #16
 80009ae:	4810      	ldr	r0, [pc, #64]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009b0:	f003 f906 	bl	8003bc0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <CC1201_WriteTxFifo+0x14c>)
 80009c8:	f006 f8c8 	bl	8006b5c <HAL_SPI_TransmitReceive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009d6:	f003 f8f3 	bl	8003bc0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	701a      	strb	r2, [r3, #0]
    
    return status;
 80009e2:	7efb      	ldrb	r3, [r7, #27]
 80009e4:	46b5      	mov	sp, r6
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3734      	adds	r7, #52	@ 0x34
 80009ea:	46bd      	mov	sp, r7
 80009ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f0:	58021000 	.word	0x58021000
 80009f4:	240000b8 	.word	0x240000b8

080009f8 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80009f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fc:	b08f      	sub	sp, #60	@ 0x3c
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	6178      	str	r0, [r7, #20]
 8000a02:	460b      	mov	r3, r1
 8000a04:	60fa      	str	r2, [r7, #12]
 8000a06:	74fb      	strb	r3, [r7, #19]
 8000a08:	466b      	mov	r3, sp
 8000a0a:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e09b      	b.n	8000b5a <CC1201_ReadRxFifo+0x162>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	1c59      	adds	r1, r3, #1
 8000a26:	1e4b      	subs	r3, r1, #1
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603a      	str	r2, [r7, #0]
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	00c3      	lsls	r3, r0, #3
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	00c2      	lsls	r2, r0, #3
 8000a48:	460a      	mov	r2, r1
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4692      	mov	sl, r2
 8000a4e:	469b      	mov	fp, r3
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000a64:	460b      	mov	r3, r1
 8000a66:	3307      	adds	r3, #7
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a70:	ab02      	add	r3, sp, #8
 8000a72:	3300      	adds	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	1e4b      	subs	r3, r1, #1
 8000a7c:	623b      	str	r3, [r7, #32]
 8000a7e:	460a      	mov	r2, r1
 8000a80:	2300      	movs	r3, #0
 8000a82:	4690      	mov	r8, r2
 8000a84:	4699      	mov	r9, r3
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	4614      	mov	r4, r2
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	00eb      	lsls	r3, r5, #3
 8000aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab0:	00e2      	lsls	r2, r4, #3
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	ebad 0d03 	sub.w	sp, sp, r3
 8000abe:	ab02      	add	r3, sp, #8
 8000ac0:	3300      	adds	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	22ff      	movs	r2, #255	@ 0xff
 8000ac8:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ad0:	e009      	b.n	8000ae6 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ae6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000aea:	7cfb      	ldrb	r3, [r7, #19]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d9f0      	bls.n	8000ad2 <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	481c      	ldr	r0, [pc, #112]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000af6:	f003 f863 	bl	8003bc0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000afa:	7cfb      	ldrb	r3, [r7, #19]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <CC1201_ReadRxFifo+0x174>)
 8000b0e:	f006 f825 	bl	8006b5c <HAL_SPI_TransmitReceive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000b1c:	f003 f850 	bl	8003bc0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b2e:	e00e      	b.n	8000b4e <CC1201_ReadRxFifo+0x156>
        data[i] = rx_buffer[1 + i];
 8000b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b3a:	6979      	ldr	r1, [r7, #20]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	69f9      	ldr	r1, [r7, #28]
 8000b40:	5c8a      	ldrb	r2, [r1, r2]
 8000b42:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000b44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b4e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3eb      	bcc.n	8000b30 <CC1201_ReadRxFifo+0x138>
    }
    
    return status;
 8000b58:	7efb      	ldrb	r3, [r7, #27]
 8000b5a:	46b5      	mov	sp, r6
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3734      	adds	r7, #52	@ 0x34
 8000b60:	46bd      	mov	sp, r7
 8000b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b66:	bf00      	nop
 8000b68:	58021000 	.word	0x58021000
 8000b6c:	240000b8 	.word	0x240000b8

08000b70 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe90 	bl	80008a8 <CC1201_WriteTxFifo>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <CC1201_HardwareDiagnostic>:
#include <stdio.h>

/**
 * @brief Comprehensive hardware diagnostic test for CC1201
 */
void CC1201_HardwareDiagnostic(void) {
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b08f      	sub	sp, #60	@ 0x3c
 8000b98:	af02      	add	r7, sp, #8
    printf("\n=== CC1201 HARDWARE DIAGNOSTIC TEST ===\n\r");
 8000b9a:	489e      	ldr	r0, [pc, #632]	@ (8000e14 <CC1201_HardwareDiagnostic+0x280>)
 8000b9c:	f007 ff4e 	bl	8008a3c <iprintf>
    
    // 1. Test SPI with different patterns
    printf("1. SPI COMMUNICATION PATTERN TEST\n\r");
 8000ba0:	489d      	ldr	r0, [pc, #628]	@ (8000e18 <CC1201_HardwareDiagnostic+0x284>)
 8000ba2:	f007 ff4b 	bl	8008a3c <iprintf>
    
    uint8_t test_commands[] = {0x3D, 0x30, 0x34, 0x36}; // NOP, RESET, IDLE, CALIBRATE
 8000ba6:	4b9d      	ldr	r3, [pc, #628]	@ (8000e1c <CC1201_HardwareDiagnostic+0x288>)
 8000ba8:	623b      	str	r3, [r7, #32]
    const char* cmd_names[] = {"NOP", "RESET", "IDLE", "CALIBRATE"};
 8000baa:	4b9d      	ldr	r3, [pc, #628]	@ (8000e20 <CC1201_HardwareDiagnostic+0x28c>)
 8000bac:	f107 0410 	add.w	r4, r7, #16
 8000bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int i = 0; i < 4; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bba:	e04c      	b.n	8000c56 <CC1201_HardwareDiagnostic+0xc2>
        uint8_t tx_data = test_commands[i];
 8000bbc:	f107 0220 	add.w	r2, r7, #32
 8000bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
        uint8_t rx_data = 0xFF; // Initialize with known pattern
 8000bc8:	23ff      	movs	r3, #255	@ 0xff
 8000bca:	71bb      	strb	r3, [r7, #6]
        
        // Manual SPI transaction to see exact response
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4894      	ldr	r0, [pc, #592]	@ (8000e24 <CC1201_HardwareDiagnostic+0x290>)
 8000bd2:	f002 fff5 	bl	8003bc0 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f002 f88c 	bl	8002cf4 <HAL_Delay>
        HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &tx_data, &rx_data, 1, 1000);
 8000bdc:	1dba      	adds	r2, r7, #6
 8000bde:	1df9      	adds	r1, r7, #7
 8000be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	488f      	ldr	r0, [pc, #572]	@ (8000e28 <CC1201_HardwareDiagnostic+0x294>)
 8000bea:	f005 ffb7 	bl	8006b5c <HAL_SPI_TransmitReceive>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	488a      	ldr	r0, [pc, #552]	@ (8000e24 <CC1201_HardwareDiagnostic+0x290>)
 8000bfa:	f002 ffe1 	bl	8003bc0 <HAL_GPIO_WritePin>
        
        printf("  %s (0x%02X): TX=0x%02X -> RX=0x%02X, HAL=%d\n\r", 
 8000bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	3330      	adds	r3, #48	@ 0x30
 8000c04:	443b      	add	r3, r7
 8000c06:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	461c      	mov	r4, r3
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	461a      	mov	r2, r3
 8000c16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	9200      	str	r2, [sp, #0]
 8000c1e:	4623      	mov	r3, r4
 8000c20:	4602      	mov	r2, r0
 8000c22:	4882      	ldr	r0, [pc, #520]	@ (8000e2c <CC1201_HardwareDiagnostic+0x298>)
 8000c24:	f007 ff0a 	bl	8008a3c <iprintf>
               cmd_names[i], tx_data, tx_data, rx_data, spi_status);
        
        if (rx_data == 0xFF) {
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	2bff      	cmp	r3, #255	@ 0xff
 8000c2c:	d103      	bne.n	8000c36 <CC1201_HardwareDiagnostic+0xa2>
            printf("    ⚠ MISO may be disconnected (received same as initialized)\n\r");
 8000c2e:	4880      	ldr	r0, [pc, #512]	@ (8000e30 <CC1201_HardwareDiagnostic+0x29c>)
 8000c30:	f007 ff04 	bl	8008a3c <iprintf>
 8000c34:	e009      	b.n	8000c4a <CC1201_HardwareDiagnostic+0xb6>
        } else if (rx_data == 0x00) {
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d103      	bne.n	8000c44 <CC1201_HardwareDiagnostic+0xb0>
            printf("    ⚠ Consistent 0x00 - CC1201 may not be responding\n\r");
 8000c3c:	487d      	ldr	r0, [pc, #500]	@ (8000e34 <CC1201_HardwareDiagnostic+0x2a0>)
 8000c3e:	f007 fefd 	bl	8008a3c <iprintf>
 8000c42:	e002      	b.n	8000c4a <CC1201_HardwareDiagnostic+0xb6>
        } else {
            printf("    ✓ Got response - CC1201 may be communicating\n\r");
 8000c44:	487c      	ldr	r0, [pc, #496]	@ (8000e38 <CC1201_HardwareDiagnostic+0x2a4>)
 8000c46:	f007 fef9 	bl	8008a3c <iprintf>
        }
        HAL_Delay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f002 f852 	bl	8002cf4 <HAL_Delay>
    for (int i = 0; i < 4; i++) {
 8000c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c52:	3301      	adds	r3, #1
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	ddaf      	ble.n	8000bbc <CC1201_HardwareDiagnostic+0x28>
    }
    
    // 2. Test with different SPI settings
    printf("\n2. SPI CONFIGURATION VERIFICATION\n\r");
 8000c5c:	4877      	ldr	r0, [pc, #476]	@ (8000e3c <CC1201_HardwareDiagnostic+0x2a8>)
 8000c5e:	f007 feed 	bl	8008a3c <iprintf>
    printf("  Current SPI2 Settings:\n\r");
 8000c62:	4877      	ldr	r0, [pc, #476]	@ (8000e40 <CC1201_HardwareDiagnostic+0x2ac>)
 8000c64:	f007 feea 	bl	8008a3c <iprintf>
    printf("    Mode: 0x%08lX (0x00400000 = Master)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.Mode);
 8000c68:	4b6f      	ldr	r3, [pc, #444]	@ (8000e28 <CC1201_HardwareDiagnostic+0x294>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4875      	ldr	r0, [pc, #468]	@ (8000e44 <CC1201_HardwareDiagnostic+0x2b0>)
 8000c70:	f007 fee4 	bl	8008a3c <iprintf>
    printf("    DataSize: 0x%08lX (0x00000007 = 8-bit)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.DataSize);
 8000c74:	4b6c      	ldr	r3, [pc, #432]	@ (8000e28 <CC1201_HardwareDiagnostic+0x294>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4873      	ldr	r0, [pc, #460]	@ (8000e48 <CC1201_HardwareDiagnostic+0x2b4>)
 8000c7c:	f007 fede 	bl	8008a3c <iprintf>
    printf("    CPOL: %lu (0 = Low)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.CLKPolarity);
 8000c80:	4b69      	ldr	r3, [pc, #420]	@ (8000e28 <CC1201_HardwareDiagnostic+0x294>)
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4871      	ldr	r0, [pc, #452]	@ (8000e4c <CC1201_HardwareDiagnostic+0x2b8>)
 8000c88:	f007 fed8 	bl	8008a3c <iprintf>
    printf("    CPHA: %lu (0 = 1st Edge)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.CLKPhase);
 8000c8c:	4b66      	ldr	r3, [pc, #408]	@ (8000e28 <CC1201_HardwareDiagnostic+0x294>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4619      	mov	r1, r3
 8000c92:	486f      	ldr	r0, [pc, #444]	@ (8000e50 <CC1201_HardwareDiagnostic+0x2bc>)
 8000c94:	f007 fed2 	bl	8008a3c <iprintf>
    printf("    BaudRate: 0x%08lX\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
 8000c98:	4b63      	ldr	r3, [pc, #396]	@ (8000e28 <CC1201_HardwareDiagnostic+0x294>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	486d      	ldr	r0, [pc, #436]	@ (8000e54 <CC1201_HardwareDiagnostic+0x2c0>)
 8000ca0:	f007 fecc 	bl	8008a3c <iprintf>
    
    // 3. GPIO Pin State Check
    printf("\n3. GPIO PIN STATE CHECK\n\r");
 8000ca4:	486c      	ldr	r0, [pc, #432]	@ (8000e58 <CC1201_HardwareDiagnostic+0x2c4>)
 8000ca6:	f007 fec9 	bl	8008a3c <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000caa:	2110      	movs	r1, #16
 8000cac:	485d      	ldr	r0, [pc, #372]	@ (8000e24 <CC1201_HardwareDiagnostic+0x290>)
 8000cae:	f002 ff6f 	bl	8003b90 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("  CS Pin (PE4) current state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <CC1201_HardwareDiagnostic+0x130>
 8000cc0:	4b66      	ldr	r3, [pc, #408]	@ (8000e5c <CC1201_HardwareDiagnostic+0x2c8>)
 8000cc2:	e000      	b.n	8000cc6 <CC1201_HardwareDiagnostic+0x132>
 8000cc4:	4b66      	ldr	r3, [pc, #408]	@ (8000e60 <CC1201_HardwareDiagnostic+0x2cc>)
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4866      	ldr	r0, [pc, #408]	@ (8000e64 <CC1201_HardwareDiagnostic+0x2d0>)
 8000cca:	f007 feb7 	bl	8008a3c <iprintf>
    
    // Toggle CS pin to verify control
    printf("  Testing CS pin control:\n\r");
 8000cce:	4866      	ldr	r0, [pc, #408]	@ (8000e68 <CC1201_HardwareDiagnostic+0x2d4>)
 8000cd0:	f007 feb4 	bl	8008a3c <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4852      	ldr	r0, [pc, #328]	@ (8000e24 <CC1201_HardwareDiagnostic+0x290>)
 8000cda:	f002 ff71 	bl	8003bc0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f002 f808 	bl	8002cf4 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	484f      	ldr	r0, [pc, #316]	@ (8000e24 <CC1201_HardwareDiagnostic+0x290>)
 8000ce8:	f002 ff52 	bl	8003b90 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("    After setting LOW: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d101      	bne.n	8000cfe <CC1201_HardwareDiagnostic+0x16a>
 8000cfa:	4b58      	ldr	r3, [pc, #352]	@ (8000e5c <CC1201_HardwareDiagnostic+0x2c8>)
 8000cfc:	e000      	b.n	8000d00 <CC1201_HardwareDiagnostic+0x16c>
 8000cfe:	4b58      	ldr	r3, [pc, #352]	@ (8000e60 <CC1201_HardwareDiagnostic+0x2cc>)
 8000d00:	4619      	mov	r1, r3
 8000d02:	485a      	ldr	r0, [pc, #360]	@ (8000e6c <CC1201_HardwareDiagnostic+0x2d8>)
 8000d04:	f007 fe9a 	bl	8008a3c <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4845      	ldr	r0, [pc, #276]	@ (8000e24 <CC1201_HardwareDiagnostic+0x290>)
 8000d0e:	f002 ff57 	bl	8003bc0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f001 ffee 	bl	8002cf4 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000d18:	2110      	movs	r1, #16
 8000d1a:	4842      	ldr	r0, [pc, #264]	@ (8000e24 <CC1201_HardwareDiagnostic+0x290>)
 8000d1c:	f002 ff38 	bl	8003b90 <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("    After setting HIGH: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <CC1201_HardwareDiagnostic+0x19e>
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e5c <CC1201_HardwareDiagnostic+0x2c8>)
 8000d30:	e000      	b.n	8000d34 <CC1201_HardwareDiagnostic+0x1a0>
 8000d32:	4b4b      	ldr	r3, [pc, #300]	@ (8000e60 <CC1201_HardwareDiagnostic+0x2cc>)
 8000d34:	4619      	mov	r1, r3
 8000d36:	484e      	ldr	r0, [pc, #312]	@ (8000e70 <CC1201_HardwareDiagnostic+0x2dc>)
 8000d38:	f007 fe80 	bl	8008a3c <iprintf>
    
    // 4. Loopback test (if possible)
    printf("\n4. SPI LOOPBACK TEST (Connect MOSI to MISO temporarily)\n\r");
 8000d3c:	484d      	ldr	r0, [pc, #308]	@ (8000e74 <CC1201_HardwareDiagnostic+0x2e0>)
 8000d3e:	f007 fe7d 	bl	8008a3c <iprintf>
    uint8_t loopback_patterns[] = {0xAA, 0x55, 0xFF, 0x00, 0xA5};
 8000d42:	4a4d      	ldr	r2, [pc, #308]	@ (8000e78 <CC1201_HardwareDiagnostic+0x2e4>)
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d4c:	6018      	str	r0, [r3, #0]
 8000d4e:	3304      	adds	r3, #4
 8000d50:	7019      	strb	r1, [r3, #0]
    
    for (int i = 0; i < 5; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d56:	e02e      	b.n	8000db6 <CC1201_HardwareDiagnostic+0x222>
        uint8_t tx = loopback_patterns[i];
 8000d58:	f107 0208 	add.w	r2, r7, #8
 8000d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	717b      	strb	r3, [r7, #5]
        uint8_t rx = 0x00;
 8000d64:	2300      	movs	r3, #0
 8000d66:	713b      	strb	r3, [r7, #4]
        
        HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &tx, &rx, 1, 1000);
 8000d68:	1d3a      	adds	r2, r7, #4
 8000d6a:	1d79      	adds	r1, r7, #5
 8000d6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2301      	movs	r3, #1
 8000d74:	482c      	ldr	r0, [pc, #176]	@ (8000e28 <CC1201_HardwareDiagnostic+0x294>)
 8000d76:	f005 fef1 	bl	8006b5c <HAL_SPI_TransmitReceive>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        printf("  Pattern 0x%02X: TX=0x%02X -> RX=0x%02X, HAL=%d", tx, tx, rx, status);
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	4619      	mov	r1, r3
 8000d84:	797b      	ldrb	r3, [r7, #5]
 8000d86:	461a      	mov	r2, r3
 8000d88:	793b      	ldrb	r3, [r7, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4603      	mov	r3, r0
 8000d94:	4839      	ldr	r0, [pc, #228]	@ (8000e7c <CC1201_HardwareDiagnostic+0x2e8>)
 8000d96:	f007 fe51 	bl	8008a3c <iprintf>
        
        if (rx == tx) {
 8000d9a:	793a      	ldrb	r2, [r7, #4]
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d103      	bne.n	8000daa <CC1201_HardwareDiagnostic+0x216>
            printf(" ✓ LOOPBACK OK\n\r");
 8000da2:	4837      	ldr	r0, [pc, #220]	@ (8000e80 <CC1201_HardwareDiagnostic+0x2ec>)
 8000da4:	f007 fe4a 	bl	8008a3c <iprintf>
 8000da8:	e002      	b.n	8000db0 <CC1201_HardwareDiagnostic+0x21c>
        } else {
            printf(" ✗ No loopback\n\r");
 8000daa:	4836      	ldr	r0, [pc, #216]	@ (8000e84 <CC1201_HardwareDiagnostic+0x2f0>)
 8000dac:	f007 fe46 	bl	8008a3c <iprintf>
    for (int i = 0; i < 5; i++) {
 8000db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db2:	3301      	adds	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	ddcd      	ble.n	8000d58 <CC1201_HardwareDiagnostic+0x1c4>
        }
    }
    
    // 5. Diagnostic Summary
    printf("\n5. DIAGNOSTIC SUMMARY\n\r");
 8000dbc:	4832      	ldr	r0, [pc, #200]	@ (8000e88 <CC1201_HardwareDiagnostic+0x2f4>)
 8000dbe:	f007 fe3d 	bl	8008a3c <iprintf>
    printf("  If all RX data is 0x00:\n\r");
 8000dc2:	4832      	ldr	r0, [pc, #200]	@ (8000e8c <CC1201_HardwareDiagnostic+0x2f8>)
 8000dc4:	f007 fe3a 	bl	8008a3c <iprintf>
    printf("    - Check CC1201 power supply (3.3V)\n\r");
 8000dc8:	4831      	ldr	r0, [pc, #196]	@ (8000e90 <CC1201_HardwareDiagnostic+0x2fc>)
 8000dca:	f007 fe37 	bl	8008a3c <iprintf>
    printf("    - Check MISO connection (CC1201 SO pin to STM32 PA6)\n\r");
 8000dce:	4831      	ldr	r0, [pc, #196]	@ (8000e94 <CC1201_HardwareDiagnostic+0x300>)
 8000dd0:	f007 fe34 	bl	8008a3c <iprintf>
    printf("    - Check if CC1201 is in reset or sleep state\n\r");
 8000dd4:	4830      	ldr	r0, [pc, #192]	@ (8000e98 <CC1201_HardwareDiagnostic+0x304>)
 8000dd6:	f007 fe31 	bl	8008a3c <iprintf>
    printf("    - Verify CC1201 crystal oscillator is running\n\r");
 8000dda:	4830      	ldr	r0, [pc, #192]	@ (8000e9c <CC1201_HardwareDiagnostic+0x308>)
 8000ddc:	f007 fe2e 	bl	8008a3c <iprintf>
    printf("\n  If all RX data is 0xFF:\n\r");
 8000de0:	482f      	ldr	r0, [pc, #188]	@ (8000ea0 <CC1201_HardwareDiagnostic+0x30c>)
 8000de2:	f007 fe2b 	bl	8008a3c <iprintf>
    printf("    - MISO line may be floating (not connected)\n\r");
 8000de6:	482f      	ldr	r0, [pc, #188]	@ (8000ea4 <CC1201_HardwareDiagnostic+0x310>)
 8000de8:	f007 fe28 	bl	8008a3c <iprintf>
    printf("    - Check SPI MISO pin configuration\n\r");
 8000dec:	482e      	ldr	r0, [pc, #184]	@ (8000ea8 <CC1201_HardwareDiagnostic+0x314>)
 8000dee:	f007 fe25 	bl	8008a3c <iprintf>
    printf("\n  If RX data varies:\n\r");
 8000df2:	482e      	ldr	r0, [pc, #184]	@ (8000eac <CC1201_HardwareDiagnostic+0x318>)
 8000df4:	f007 fe22 	bl	8008a3c <iprintf>
    printf("    - CC1201 is responding - check command format\n\r");
 8000df8:	482d      	ldr	r0, [pc, #180]	@ (8000eb0 <CC1201_HardwareDiagnostic+0x31c>)
 8000dfa:	f007 fe1f 	bl	8008a3c <iprintf>
    printf("    - May need proper initialization sequence\n\r");
 8000dfe:	482d      	ldr	r0, [pc, #180]	@ (8000eb4 <CC1201_HardwareDiagnostic+0x320>)
 8000e00:	f007 fe1c 	bl	8008a3c <iprintf>
    
    printf("=== HARDWARE DIAGNOSTIC COMPLETE ===\n\r");
 8000e04:	482c      	ldr	r0, [pc, #176]	@ (8000eb8 <CC1201_HardwareDiagnostic+0x324>)
 8000e06:	f007 fe19 	bl	8008a3c <iprintf>
}
 8000e0a:	bf00      	nop
 8000e0c:	3734      	adds	r7, #52	@ 0x34
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd90      	pop	{r4, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	080097dc 	.word	0x080097dc
 8000e18:	08009808 	.word	0x08009808
 8000e1c:	3634303d 	.word	0x3634303d
 8000e20:	08009d90 	.word	0x08009d90
 8000e24:	58021000 	.word	0x58021000
 8000e28:	240000b8 	.word	0x240000b8
 8000e2c:	0800982c 	.word	0x0800982c
 8000e30:	0800985c 	.word	0x0800985c
 8000e34:	080098a0 	.word	0x080098a0
 8000e38:	080098dc 	.word	0x080098dc
 8000e3c:	08009914 	.word	0x08009914
 8000e40:	0800993c 	.word	0x0800993c
 8000e44:	08009958 	.word	0x08009958
 8000e48:	08009984 	.word	0x08009984
 8000e4c:	080099b4 	.word	0x080099b4
 8000e50:	080099d0 	.word	0x080099d0
 8000e54:	080099f0 	.word	0x080099f0
 8000e58:	08009a08 	.word	0x08009a08
 8000e5c:	08009a24 	.word	0x08009a24
 8000e60:	08009a2c 	.word	0x08009a2c
 8000e64:	08009a30 	.word	0x08009a30
 8000e68:	08009a54 	.word	0x08009a54
 8000e6c:	08009a70 	.word	0x08009a70
 8000e70:	08009a8c 	.word	0x08009a8c
 8000e74:	08009aac 	.word	0x08009aac
 8000e78:	08009da0 	.word	0x08009da0
 8000e7c:	08009ae8 	.word	0x08009ae8
 8000e80:	08009b1c 	.word	0x08009b1c
 8000e84:	08009b30 	.word	0x08009b30
 8000e88:	08009b44 	.word	0x08009b44
 8000e8c:	08009b60 	.word	0x08009b60
 8000e90:	08009b7c 	.word	0x08009b7c
 8000e94:	08009ba8 	.word	0x08009ba8
 8000e98:	08009be4 	.word	0x08009be4
 8000e9c:	08009c18 	.word	0x08009c18
 8000ea0:	08009c4c 	.word	0x08009c4c
 8000ea4:	08009c6c 	.word	0x08009c6c
 8000ea8:	08009ca0 	.word	0x08009ca0
 8000eac:	08009ccc 	.word	0x08009ccc
 8000eb0:	08009ce4 	.word	0x08009ce4
 8000eb4:	08009d18 	.word	0x08009d18
 8000eb8:	08009d48 	.word	0x08009d48

08000ebc <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2110      	movs	r1, #16
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <CC1201_SendStrobe+0x5c>)
 8000ece:	f002 fe77 	bl	8003bc0 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f001 ff0e 	bl	8002cf4 <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000ed8:	f107 020e 	add.w	r2, r7, #14
 8000edc:	1df9      	adds	r1, r7, #7
 8000ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <CC1201_SendStrobe+0x60>)
 8000ee8:	f005 fe38 	bl	8006b5c <HAL_SPI_TransmitReceive>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <CC1201_SendStrobe+0x5c>)
 8000ef6:	f002 fe63 	bl	8003bc0 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <CC1201_SendStrobe+0x50>
        if (status_byte != NULL) {
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <CC1201_SendStrobe+0x50>
            *status_byte = rx_data;
 8000f06:	7bba      	ldrb	r2, [r7, #14]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	58021000 	.word	0x58021000
 8000f1c:	240000b8 	.word	0x240000b8

08000f20 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000f3a:	79fa      	ldrb	r2, [r7, #7]
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	6839      	ldr	r1, [r7, #0]
 8000f40:	4823      	ldr	r0, [pc, #140]	@ (8000fd0 <print_cc1201_status+0xb0>)
 8000f42:	f007 fd7b 	bl	8008a3c <iprintf>
    switch(radio_state) {
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b07      	cmp	r3, #7
 8000f4a:	d833      	bhi.n	8000fb4 <print_cc1201_status+0x94>
 8000f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <print_cc1201_status+0x34>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f75 	.word	0x08000f75
 8000f58:	08000f7d 	.word	0x08000f7d
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	08000f8d 	.word	0x08000f8d
 8000f64:	08000f95 	.word	0x08000f95
 8000f68:	08000f9d 	.word	0x08000f9d
 8000f6c:	08000fa5 	.word	0x08000fa5
 8000f70:	08000fad 	.word	0x08000fad
        case 0x0: printf("(IDLE)"); break;
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <print_cc1201_status+0xb4>)
 8000f76:	f007 fd61 	bl	8008a3c <iprintf>
 8000f7a:	e01f      	b.n	8000fbc <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000f7c:	4816      	ldr	r0, [pc, #88]	@ (8000fd8 <print_cc1201_status+0xb8>)
 8000f7e:	f007 fd5d 	bl	8008a3c <iprintf>
 8000f82:	e01b      	b.n	8000fbc <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000f84:	4815      	ldr	r0, [pc, #84]	@ (8000fdc <print_cc1201_status+0xbc>)
 8000f86:	f007 fd59 	bl	8008a3c <iprintf>
 8000f8a:	e017      	b.n	8000fbc <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000f8c:	4814      	ldr	r0, [pc, #80]	@ (8000fe0 <print_cc1201_status+0xc0>)
 8000f8e:	f007 fd55 	bl	8008a3c <iprintf>
 8000f92:	e013      	b.n	8000fbc <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000f94:	4813      	ldr	r0, [pc, #76]	@ (8000fe4 <print_cc1201_status+0xc4>)
 8000f96:	f007 fd51 	bl	8008a3c <iprintf>
 8000f9a:	e00f      	b.n	8000fbc <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000f9c:	4812      	ldr	r0, [pc, #72]	@ (8000fe8 <print_cc1201_status+0xc8>)
 8000f9e:	f007 fd4d 	bl	8008a3c <iprintf>
 8000fa2:	e00b      	b.n	8000fbc <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000fa4:	4811      	ldr	r0, [pc, #68]	@ (8000fec <print_cc1201_status+0xcc>)
 8000fa6:	f007 fd49 	bl	8008a3c <iprintf>
 8000faa:	e007      	b.n	8000fbc <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000fac:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <print_cc1201_status+0xd0>)
 8000fae:	f007 fd45 	bl	8008a3c <iprintf>
 8000fb2:	e003      	b.n	8000fbc <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000fb4:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <print_cc1201_status+0xd4>)
 8000fb6:	f007 fd41 	bl	8008a3c <iprintf>
 8000fba:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <print_cc1201_status+0xd8>)
 8000fc2:	f007 fd3b 	bl	8008a3c <iprintf>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	08009da8 	.word	0x08009da8
 8000fd4:	08009dc8 	.word	0x08009dc8
 8000fd8:	08009dd0 	.word	0x08009dd0
 8000fdc:	08009dd8 	.word	0x08009dd8
 8000fe0:	08009de0 	.word	0x08009de0
 8000fe4:	08009dec 	.word	0x08009dec
 8000fe8:	08009df8 	.word	0x08009df8
 8000fec:	08009e04 	.word	0x08009e04
 8000ff0:	08009e14 	.word	0x08009e14
 8000ff4:	08009e24 	.word	0x08009e24
 8000ff8:	08009e30 	.word	0x08009e30

08000ffc <test_fifo_operations>:
    
    printf("=== CONFIGURATION TEST COMPLETE ===\n\r");
}

// Test FIFO operations (read/write buffer tests)
void test_fifo_operations(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	777b      	strb	r3, [r7, #29]
    
    printf("\n=== FIFO OPERATIONS TEST ===\n\r");
 8001006:	489b      	ldr	r0, [pc, #620]	@ (8001274 <test_fifo_operations+0x278>)
 8001008:	f007 fd18 	bl	8008a3c <iprintf>
    
    // First ensure we're in IDLE state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 800100c:	f107 031d 	add.w	r3, r7, #29
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb8e 	bl	8000732 <CC1201_EnterIdleMode>
 8001016:	4603      	mov	r3, r0
 8001018:	77fb      	strb	r3, [r7, #31]
    if (hal_status != HAL_OK) {
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <test_fifo_operations+0x2c>
        printf("  ✗ Failed to enter IDLE mode\n\r");
 8001020:	4895      	ldr	r0, [pc, #596]	@ (8001278 <test_fifo_operations+0x27c>)
 8001022:	f007 fd0b 	bl	8008a3c <iprintf>
 8001026:	e121      	b.n	800126c <test_fifo_operations+0x270>
        return;
    }
    print_cc1201_status(status_byte, "IDLE_FOR_FIFO");
 8001028:	7f7b      	ldrb	r3, [r7, #29]
 800102a:	4994      	ldr	r1, [pc, #592]	@ (800127c <test_fifo_operations+0x280>)
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff77 	bl	8000f20 <print_cc1201_status>
    
    // Test 1: Flush both FIFOs to start clean
    printf("1. Flushing FIFOs\n\r");
 8001032:	4893      	ldr	r0, [pc, #588]	@ (8001280 <test_fifo_operations+0x284>)
 8001034:	f007 fd02 	bl	8008a3c <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8001038:	f107 031d 	add.w	r3, r7, #29
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fb92 	bl	8000766 <CC1201_FlushTxFifo>
 8001042:	4603      	mov	r3, r0
 8001044:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001046:	7ffb      	ldrb	r3, [r7, #31]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <test_fifo_operations+0x5a>
        print_cc1201_status(status_byte, "FLUSH_TX");
 800104c:	7f7b      	ldrb	r3, [r7, #29]
 800104e:	498d      	ldr	r1, [pc, #564]	@ (8001284 <test_fifo_operations+0x288>)
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff65 	bl	8000f20 <print_cc1201_status>
    }
    
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8001056:	f107 031d 	add.w	r3, r7, #29
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb76 	bl	800074c <CC1201_FlushRxFifo>
 8001060:	4603      	mov	r3, r0
 8001062:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001064:	7ffb      	ldrb	r3, [r7, #31]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <test_fifo_operations+0x78>
        print_cc1201_status(status_byte, "FLUSH_RX");
 800106a:	7f7b      	ldrb	r3, [r7, #29]
 800106c:	4986      	ldr	r1, [pc, #536]	@ (8001288 <test_fifo_operations+0x28c>)
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff56 	bl	8000f20 <print_cc1201_status>
    }
    
    // Test 2: Check initial FIFO byte counts
    printf("2. Initial FIFO status\n\r");
 8001074:	4885      	ldr	r0, [pc, #532]	@ (800128c <test_fifo_operations+0x290>)
 8001076:	f007 fce1 	bl	8008a3c <iprintf>
    uint8_t tx_bytes = 0, rx_bytes = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	773b      	strb	r3, [r7, #28]
 800107e:	2300      	movs	r3, #0
 8001080:	76fb      	strb	r3, [r7, #27]
    
    hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fc00 	bl	800088c <CC1201_GetNumTXBytes>
 800108c:	4603      	mov	r3, r0
 800108e:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001090:	7ffb      	ldrb	r3, [r7, #31]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d104      	bne.n	80010a0 <test_fifo_operations+0xa4>
        printf("  TX FIFO bytes: %d\n\r", tx_bytes);
 8001096:	7f3b      	ldrb	r3, [r7, #28]
 8001098:	4619      	mov	r1, r3
 800109a:	487d      	ldr	r0, [pc, #500]	@ (8001290 <test_fifo_operations+0x294>)
 800109c:	f007 fcce 	bl	8008a3c <iprintf>
    }
    
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 80010a0:	f107 031b 	add.w	r3, r7, #27
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fbe3 	bl	8000870 <CC1201_GetNumRXBytes>
 80010aa:	4603      	mov	r3, r0
 80010ac:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80010ae:	7ffb      	ldrb	r3, [r7, #31]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d104      	bne.n	80010be <test_fifo_operations+0xc2>
        printf("  RX FIFO bytes: %d\n\r", rx_bytes);
 80010b4:	7efb      	ldrb	r3, [r7, #27]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4876      	ldr	r0, [pc, #472]	@ (8001294 <test_fifo_operations+0x298>)
 80010ba:	f007 fcbf 	bl	8008a3c <iprintf>
    }
    
    // Test 3: Write test data to TX FIFO
    printf("3. Writing test data to TX FIFO\n\r");
 80010be:	4876      	ldr	r0, [pc, #472]	@ (8001298 <test_fifo_operations+0x29c>)
 80010c0:	f007 fcbc 	bl	8008a3c <iprintf>
    uint8_t test_data[] = {0xAA, 0x55, 0xCC, 0x33, 0xFF, 0x00, 0x11, 0x22};
 80010c4:	4a75      	ldr	r2, [pc, #468]	@ (800129c <test_fifo_operations+0x2a0>)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ce:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t test_data_length = sizeof(test_data);
 80010d2:	2308      	movs	r3, #8
 80010d4:	77bb      	strb	r3, [r7, #30]
    
    hal_status = CC1201_WriteTxFifo(test_data, test_data_length, &status_byte);
 80010d6:	f107 021d 	add.w	r2, r7, #29
 80010da:	7fb9      	ldrb	r1, [r7, #30]
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fbe1 	bl	80008a8 <CC1201_WriteTxFifo>
 80010e6:	4603      	mov	r3, r0
 80010e8:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80010ea:	7ffb      	ldrb	r3, [r7, #31]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d126      	bne.n	800113e <test_fifo_operations+0x142>
        printf("  ✓ Wrote %d bytes to TX FIFO\n\r", test_data_length);
 80010f0:	7fbb      	ldrb	r3, [r7, #30]
 80010f2:	4619      	mov	r1, r3
 80010f4:	486a      	ldr	r0, [pc, #424]	@ (80012a0 <test_fifo_operations+0x2a4>)
 80010f6:	f007 fca1 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "TX_WRITE");
 80010fa:	7f7b      	ldrb	r3, [r7, #29]
 80010fc:	4969      	ldr	r1, [pc, #420]	@ (80012a4 <test_fifo_operations+0x2a8>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff0e 	bl	8000f20 <print_cc1201_status>
        
        // Check TX FIFO count after write
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fbbf 	bl	800088c <CC1201_GetNumTXBytes>
 800110e:	4603      	mov	r3, r0
 8001110:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d117      	bne.n	8001148 <test_fifo_operations+0x14c>
            printf("  TX FIFO bytes after write: %d (expected: %d)\n\r", tx_bytes, test_data_length);
 8001118:	7f3b      	ldrb	r3, [r7, #28]
 800111a:	4619      	mov	r1, r3
 800111c:	7fbb      	ldrb	r3, [r7, #30]
 800111e:	461a      	mov	r2, r3
 8001120:	4861      	ldr	r0, [pc, #388]	@ (80012a8 <test_fifo_operations+0x2ac>)
 8001122:	f007 fc8b 	bl	8008a3c <iprintf>
            if (tx_bytes == test_data_length) {
 8001126:	7f3b      	ldrb	r3, [r7, #28]
 8001128:	7fba      	ldrb	r2, [r7, #30]
 800112a:	429a      	cmp	r2, r3
 800112c:	d103      	bne.n	8001136 <test_fifo_operations+0x13a>
                printf("  ✓ TX FIFO count matches written data\n\r");
 800112e:	485f      	ldr	r0, [pc, #380]	@ (80012ac <test_fifo_operations+0x2b0>)
 8001130:	f007 fc84 	bl	8008a3c <iprintf>
 8001134:	e008      	b.n	8001148 <test_fifo_operations+0x14c>
            } else {
                printf("  ✗ TX FIFO count mismatch\n\r");
 8001136:	485e      	ldr	r0, [pc, #376]	@ (80012b0 <test_fifo_operations+0x2b4>)
 8001138:	f007 fc80 	bl	8008a3c <iprintf>
 800113c:	e004      	b.n	8001148 <test_fifo_operations+0x14c>
            }
        }
    } else {
        printf("  ✗ TX FIFO write FAILED - HAL Error: %d\n\r", hal_status);
 800113e:	7ffb      	ldrb	r3, [r7, #31]
 8001140:	4619      	mov	r1, r3
 8001142:	485c      	ldr	r0, [pc, #368]	@ (80012b4 <test_fifo_operations+0x2b8>)
 8001144:	f007 fc7a 	bl	8008a3c <iprintf>
    }
    
    // Test 4: Write single byte to TX FIFO
    printf("4. Writing single byte to TX FIFO\n\r");
 8001148:	485b      	ldr	r0, [pc, #364]	@ (80012b8 <test_fifo_operations+0x2bc>)
 800114a:	f007 fc77 	bl	8008a3c <iprintf>
    hal_status = CC1201_WriteSingleTxFifo(0x42, &status_byte);
 800114e:	f107 031d 	add.w	r3, r7, #29
 8001152:	4619      	mov	r1, r3
 8001154:	2042      	movs	r0, #66	@ 0x42
 8001156:	f7ff fd0b 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 800115a:	4603      	mov	r3, r0
 800115c:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d117      	bne.n	8001194 <test_fifo_operations+0x198>
        printf("  ✓ Wrote single byte (0x42) to TX FIFO\n\r");
 8001164:	4855      	ldr	r0, [pc, #340]	@ (80012bc <test_fifo_operations+0x2c0>)
 8001166:	f007 fc69 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "TX_SINGLE");
 800116a:	7f7b      	ldrb	r3, [r7, #29]
 800116c:	4954      	ldr	r1, [pc, #336]	@ (80012c0 <test_fifo_operations+0x2c4>)
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fed6 	bl	8000f20 <print_cc1201_status>
        
        // Check updated count
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fb87 	bl	800088c <CC1201_GetNumTXBytes>
 800117e:	4603      	mov	r3, r0
 8001180:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8001182:	7ffb      	ldrb	r3, [r7, #31]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10a      	bne.n	800119e <test_fifo_operations+0x1a2>
            printf("  TX FIFO bytes after single write: %d\n\r", tx_bytes);
 8001188:	7f3b      	ldrb	r3, [r7, #28]
 800118a:	4619      	mov	r1, r3
 800118c:	484d      	ldr	r0, [pc, #308]	@ (80012c4 <test_fifo_operations+0x2c8>)
 800118e:	f007 fc55 	bl	8008a3c <iprintf>
 8001192:	e004      	b.n	800119e <test_fifo_operations+0x1a2>
        }
    } else {
        printf("  ✗ Single TX write FAILED - HAL Error: %d\n\r", hal_status);
 8001194:	7ffb      	ldrb	r3, [r7, #31]
 8001196:	4619      	mov	r1, r3
 8001198:	484b      	ldr	r0, [pc, #300]	@ (80012c8 <test_fifo_operations+0x2cc>)
 800119a:	f007 fc4f 	bl	8008a3c <iprintf>
    }
    
    // Test 5: Attempt to read from RX FIFO (should be empty)
    printf("5. Reading from empty RX FIFO\n\r");
 800119e:	484b      	ldr	r0, [pc, #300]	@ (80012cc <test_fifo_operations+0x2d0>)
 80011a0:	f007 fc4c 	bl	8008a3c <iprintf>
    uint8_t read_buffer[10] = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	811a      	strh	r2, [r3, #8]
    hal_status = CC1201_ReadRxFifo(read_buffer, 1, &status_byte);
 80011ae:	f107 021d 	add.w	r2, r7, #29
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2101      	movs	r1, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fc1e 	bl	80009f8 <CC1201_ReadRxFifo>
 80011bc:	4603      	mov	r3, r0
 80011be:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d119      	bne.n	80011fa <test_fifo_operations+0x1fe>
        printf("  Read from RX FIFO: 0x%02X\n\r", read_buffer[0]);
 80011c6:	793b      	ldrb	r3, [r7, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4841      	ldr	r0, [pc, #260]	@ (80012d0 <test_fifo_operations+0x2d4>)
 80011cc:	f007 fc36 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "RX_READ_EMPTY");
 80011d0:	7f7b      	ldrb	r3, [r7, #29]
 80011d2:	4940      	ldr	r1, [pc, #256]	@ (80012d4 <test_fifo_operations+0x2d8>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fea3 	bl	8000f20 <print_cc1201_status>
        
        hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 80011da:	f107 031b 	add.w	r3, r7, #27
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb46 	bl	8000870 <CC1201_GetNumRXBytes>
 80011e4:	4603      	mov	r3, r0
 80011e6:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <test_fifo_operations+0x208>
            printf("  RX FIFO bytes after read: %d\n\r", rx_bytes);
 80011ee:	7efb      	ldrb	r3, [r7, #27]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4839      	ldr	r0, [pc, #228]	@ (80012d8 <test_fifo_operations+0x2dc>)
 80011f4:	f007 fc22 	bl	8008a3c <iprintf>
 80011f8:	e004      	b.n	8001204 <test_fifo_operations+0x208>
        }
    } else {
        printf("  ✗ RX FIFO read FAILED - HAL Error: %d\n\r", hal_status);
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4837      	ldr	r0, [pc, #220]	@ (80012dc <test_fifo_operations+0x2e0>)
 8001200:	f007 fc1c 	bl	8008a3c <iprintf>
    }
    
    // Test 6: Flush TX FIFO and verify
    printf("6. Flushing TX FIFO and verifying\n\r");
 8001204:	4836      	ldr	r0, [pc, #216]	@ (80012e0 <test_fifo_operations+0x2e4>)
 8001206:	f007 fc19 	bl	8008a3c <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 800120a:	f107 031d 	add.w	r3, r7, #29
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff faa9 	bl	8000766 <CC1201_FlushTxFifo>
 8001214:	4603      	mov	r3, r0
 8001216:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d11e      	bne.n	800125c <test_fifo_operations+0x260>
        print_cc1201_status(status_byte, "FINAL_FLUSH_TX");
 800121e:	7f7b      	ldrb	r3, [r7, #29]
 8001220:	4930      	ldr	r1, [pc, #192]	@ (80012e4 <test_fifo_operations+0x2e8>)
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe7c 	bl	8000f20 <print_cc1201_status>
        
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fb2d 	bl	800088c <CC1201_GetNumTXBytes>
 8001232:	4603      	mov	r3, r0
 8001234:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d114      	bne.n	8001266 <test_fifo_operations+0x26a>
            printf("  TX FIFO bytes after flush: %d (expected: 0)\n\r", tx_bytes);
 800123c:	7f3b      	ldrb	r3, [r7, #28]
 800123e:	4619      	mov	r1, r3
 8001240:	4829      	ldr	r0, [pc, #164]	@ (80012e8 <test_fifo_operations+0x2ec>)
 8001242:	f007 fbfb 	bl	8008a3c <iprintf>
            if (tx_bytes == 0) {
 8001246:	7f3b      	ldrb	r3, [r7, #28]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d103      	bne.n	8001254 <test_fifo_operations+0x258>
                printf("  ✓ TX FIFO successfully flushed\n\r");
 800124c:	4827      	ldr	r0, [pc, #156]	@ (80012ec <test_fifo_operations+0x2f0>)
 800124e:	f007 fbf5 	bl	8008a3c <iprintf>
 8001252:	e008      	b.n	8001266 <test_fifo_operations+0x26a>
            } else {
                printf("  ✗ TX FIFO flush incomplete\n\r");
 8001254:	4826      	ldr	r0, [pc, #152]	@ (80012f0 <test_fifo_operations+0x2f4>)
 8001256:	f007 fbf1 	bl	8008a3c <iprintf>
 800125a:	e004      	b.n	8001266 <test_fifo_operations+0x26a>
            }
        }
    } else {
        printf("  ✗ TX FIFO flush FAILED - HAL Error: %d\n\r", hal_status);
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	4619      	mov	r1, r3
 8001260:	4824      	ldr	r0, [pc, #144]	@ (80012f4 <test_fifo_operations+0x2f8>)
 8001262:	f007 fbeb 	bl	8008a3c <iprintf>
    }
    
    printf("=== FIFO OPERATIONS TEST COMPLETE ===\n\r");
 8001266:	4824      	ldr	r0, [pc, #144]	@ (80012f8 <test_fifo_operations+0x2fc>)
 8001268:	f007 fbe8 	bl	8008a3c <iprintf>
}
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800a6d4 	.word	0x0800a6d4
 8001278:	0800a6f4 	.word	0x0800a6f4
 800127c:	0800a718 	.word	0x0800a718
 8001280:	0800a728 	.word	0x0800a728
 8001284:	0800a0b0 	.word	0x0800a0b0
 8001288:	0800a06c 	.word	0x0800a06c
 800128c:	0800a73c 	.word	0x0800a73c
 8001290:	0800a758 	.word	0x0800a758
 8001294:	0800a770 	.word	0x0800a770
 8001298:	0800a788 	.word	0x0800a788
 800129c:	0800aaec 	.word	0x0800aaec
 80012a0:	0800a7ac 	.word	0x0800a7ac
 80012a4:	0800a7d0 	.word	0x0800a7d0
 80012a8:	0800a7dc 	.word	0x0800a7dc
 80012ac:	0800a810 	.word	0x0800a810
 80012b0:	0800a83c 	.word	0x0800a83c
 80012b4:	0800a85c 	.word	0x0800a85c
 80012b8:	0800a88c 	.word	0x0800a88c
 80012bc:	0800a8b0 	.word	0x0800a8b0
 80012c0:	0800a8dc 	.word	0x0800a8dc
 80012c4:	0800a8e8 	.word	0x0800a8e8
 80012c8:	0800a914 	.word	0x0800a914
 80012cc:	0800a944 	.word	0x0800a944
 80012d0:	0800a964 	.word	0x0800a964
 80012d4:	0800a984 	.word	0x0800a984
 80012d8:	0800a994 	.word	0x0800a994
 80012dc:	0800a9b8 	.word	0x0800a9b8
 80012e0:	0800a9e4 	.word	0x0800a9e4
 80012e4:	0800aa08 	.word	0x0800aa08
 80012e8:	0800aa18 	.word	0x0800aa18
 80012ec:	0800aa48 	.word	0x0800aa48
 80012f0:	0800aa70 	.word	0x0800aa70
 80012f4:	0800aa94 	.word	0x0800aa94
 80012f8:	0800aac4 	.word	0x0800aac4

080012fc <test_buffer_readwrite_verification>:

// New comprehensive buffer read/write with verification test
void test_buffer_readwrite_verification(void) {
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b094      	sub	sp, #80	@ 0x50
 8001300:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    
    printf("\n=== BUFFER READ/WRITE VERIFICATION TEST ===\n\r");
 8001308:	48aa      	ldr	r0, [pc, #680]	@ (80015b4 <test_buffer_readwrite_verification+0x2b8>)
 800130a:	f007 fb97 	bl	8008a3c <iprintf>
    
    // This test demonstrates comprehensive buffer operations with full transparency
    
    // 1. Enter IDLE and clear FIFOs
    printf("1. INITIALIZING TEST STATE\n\r");
 800130e:	48aa      	ldr	r0, [pc, #680]	@ (80015b8 <test_buffer_readwrite_verification+0x2bc>)
 8001310:	f007 fb94 	bl	8008a3c <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001314:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fa0a 	bl	8000732 <CC1201_EnterIdleMode>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 8001324:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001328:	2b00      	cmp	r3, #0
 800132a:	d131      	bne.n	8001390 <test_buffer_readwrite_verification+0x94>
        print_cc1201_status(status_byte, "ENTER_IDLE");
 800132c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001330:	49a2      	ldr	r1, [pc, #648]	@ (80015bc <test_buffer_readwrite_verification+0x2c0>)
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fdf4 	bl	8000f20 <print_cc1201_status>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
        return;
    }
    
    // Clear FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8001338:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fa12 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 8001342:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001346:	499e      	ldr	r1, [pc, #632]	@ (80015c0 <test_buffer_readwrite_verification+0x2c4>)
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fde9 	bl	8000f20 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 800134e:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f9fa 	bl	800074c <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 8001358:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800135c:	4999      	ldr	r1, [pc, #612]	@ (80015c4 <test_buffer_readwrite_verification+0x2c8>)
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fdde 	bl	8000f20 <print_cc1201_status>
    
    // 2. Test different data patterns
    printf("\n2. TESTING MULTIPLE DATA PATTERNS\n\r");
 8001364:	4898      	ldr	r0, [pc, #608]	@ (80015c8 <test_buffer_readwrite_verification+0x2cc>)
 8001366:	f007 fb69 	bl	8008a3c <iprintf>
    
    uint8_t patterns[][8] = {
 800136a:	4b98      	ldr	r3, [pc, #608]	@ (80015cc <test_buffer_readwrite_verification+0x2d0>)
 800136c:	f107 0420 	add.w	r4, r7, #32
 8001370:	461d      	mov	r5, r3
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800137a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55},  // Alternating
        {0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00},  // High/Low
        {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}   // Bit shifts
    };
    
    const char* pattern_names[] = {"SEQUENTIAL", "ALTERNATING", "HIGH_LOW", "BIT_SHIFT"};
 800137e:	4b94      	ldr	r3, [pc, #592]	@ (80015d0 <test_buffer_readwrite_verification+0x2d4>)
 8001380:	f107 0410 	add.w	r4, r7, #16
 8001384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int p = 0; p < 4; p++) {
 800138a:	2300      	movs	r3, #0
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800138e:	e065      	b.n	800145c <test_buffer_readwrite_verification+0x160>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
 8001390:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001394:	4619      	mov	r1, r3
 8001396:	488f      	ldr	r0, [pc, #572]	@ (80015d4 <test_buffer_readwrite_verification+0x2d8>)
 8001398:	f007 fb50 	bl	8008a3c <iprintf>
 800139c:	e106      	b.n	80015ac <test_buffer_readwrite_verification+0x2b0>
        printf("\n  Pattern %d: %s\n\r", p+1, pattern_names[p]);
 800139e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013a0:	1c59      	adds	r1, r3, #1
 80013a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	3350      	adds	r3, #80	@ 0x50
 80013a8:	443b      	add	r3, r7
 80013aa:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4889      	ldr	r0, [pc, #548]	@ (80015d8 <test_buffer_readwrite_verification+0x2dc>)
 80013b2:	f007 fb43 	bl	8008a3c <iprintf>
        printf("  Data: ");
 80013b6:	4889      	ldr	r0, [pc, #548]	@ (80015dc <test_buffer_readwrite_verification+0x2e0>)
 80013b8:	f007 fb40 	bl	8008a3c <iprintf>
        for (int i = 0; i < 8; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013c0:	e00e      	b.n	80013e0 <test_buffer_readwrite_verification+0xe4>
            printf("0x%02X ", patterns[p][i]);
 80013c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	3350      	adds	r3, #80	@ 0x50
 80013c8:	19da      	adds	r2, r3, r7
 80013ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013cc:	4413      	add	r3, r2
 80013ce:	3b30      	subs	r3, #48	@ 0x30
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4882      	ldr	r0, [pc, #520]	@ (80015e0 <test_buffer_readwrite_verification+0x2e4>)
 80013d6:	f007 fb31 	bl	8008a3c <iprintf>
        for (int i = 0; i < 8; i++) {
 80013da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013dc:	3301      	adds	r3, #1
 80013de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013e2:	2b07      	cmp	r3, #7
 80013e4:	dded      	ble.n	80013c2 <test_buffer_readwrite_verification+0xc6>
        }
        printf("\n\r");
 80013e6:	487f      	ldr	r0, [pc, #508]	@ (80015e4 <test_buffer_readwrite_verification+0x2e8>)
 80013e8:	f007 fb28 	bl	8008a3c <iprintf>
        
        // Write pattern to TX FIFO
        hal_status = CC1201_WriteTxFifo(patterns[p], 8, &status_byte);
 80013ec:	f107 0220 	add.w	r2, r7, #32
 80013f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80013fa:	2108      	movs	r1, #8
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fa53 	bl	80008a8 <CC1201_WriteTxFifo>
 8001402:	4603      	mov	r3, r0
 8001404:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 8001408:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800140c:	2b00      	cmp	r3, #0
 800140e:	d11c      	bne.n	800144a <test_buffer_readwrite_verification+0x14e>
            printf("  ✓ Write SUCCESS ");
 8001410:	4875      	ldr	r0, [pc, #468]	@ (80015e8 <test_buffer_readwrite_verification+0x2ec>)
 8001412:	f007 fb13 	bl	8008a3c <iprintf>
            print_cc1201_status(status_byte, "PATTERN_WRITE");
 8001416:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800141a:	4974      	ldr	r1, [pc, #464]	@ (80015ec <test_buffer_readwrite_verification+0x2f0>)
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fd7f 	bl	8000f20 <print_cc1201_status>
            
            // Check FIFO count
            uint8_t fifo_count = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	717b      	strb	r3, [r7, #5]
            CC1201_GetNumTXBytes(&fifo_count);
 8001426:	1d7b      	adds	r3, r7, #5
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fa2f 	bl	800088c <CC1201_GetNumTXBytes>
            printf("  FIFO count: %d bytes\n\r", fifo_count);
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	4619      	mov	r1, r3
 8001432:	486f      	ldr	r0, [pc, #444]	@ (80015f0 <test_buffer_readwrite_verification+0x2f4>)
 8001434:	f007 fb02 	bl	8008a3c <iprintf>
            
            // Clear FIFO for next test
            CC1201_FlushTxFifo(&status_byte);
 8001438:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f992 	bl	8000766 <CC1201_FlushTxFifo>
            printf("  Flushed for next test\n\r");
 8001442:	486c      	ldr	r0, [pc, #432]	@ (80015f4 <test_buffer_readwrite_verification+0x2f8>)
 8001444:	f007 fafa 	bl	8008a3c <iprintf>
 8001448:	e005      	b.n	8001456 <test_buffer_readwrite_verification+0x15a>
        } else {
            printf("  ✗ Write FAILED - HAL: %d\n\r", hal_status);
 800144a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800144e:	4619      	mov	r1, r3
 8001450:	4869      	ldr	r0, [pc, #420]	@ (80015f8 <test_buffer_readwrite_verification+0x2fc>)
 8001452:	f007 faf3 	bl	8008a3c <iprintf>
    for (int p = 0; p < 4; p++) {
 8001456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001458:	3301      	adds	r3, #1
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800145c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800145e:	2b03      	cmp	r3, #3
 8001460:	dd9d      	ble.n	800139e <test_buffer_readwrite_verification+0xa2>
        }
    }
    
    // 3. Test single byte operations with verification
    printf("\n3. SINGLE BYTE OPERATIONS TEST\n\r");
 8001462:	4866      	ldr	r0, [pc, #408]	@ (80015fc <test_buffer_readwrite_verification+0x300>)
 8001464:	f007 faea 	bl	8008a3c <iprintf>
    uint8_t test_bytes[] = {0x42, 0x69, 0xA5, 0x3C, 0xF0};
 8001468:	4a65      	ldr	r2, [pc, #404]	@ (8001600 <test_buffer_readwrite_verification+0x304>)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001472:	6018      	str	r0, [r3, #0]
 8001474:	3304      	adds	r3, #4
 8001476:	7019      	strb	r1, [r3, #0]
    
    for (int i = 0; i < 5; i++) {
 8001478:	2300      	movs	r3, #0
 800147a:	647b      	str	r3, [r7, #68]	@ 0x44
 800147c:	e02f      	b.n	80014de <test_buffer_readwrite_verification+0x1e2>
        printf("  Writing byte %d: 0x%02X\n\r", i+1, test_bytes[i]);
 800147e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001480:	1c59      	adds	r1, r3, #1
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	485d      	ldr	r0, [pc, #372]	@ (8001604 <test_buffer_readwrite_verification+0x308>)
 8001490:	f007 fad4 	bl	8008a3c <iprintf>
        hal_status = CC1201_WriteSingleTxFifo(test_bytes[i], &status_byte);
 8001494:	f107 0208 	add.w	r2, r7, #8
 8001498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fb63 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 80014b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <test_buffer_readwrite_verification+0x1d0>
            printf("    ✓ Single write SUCCESS ");
 80014b8:	4853      	ldr	r0, [pc, #332]	@ (8001608 <test_buffer_readwrite_verification+0x30c>)
 80014ba:	f007 fabf 	bl	8008a3c <iprintf>
            print_cc1201_status(status_byte, "SINGLE_BYTE");
 80014be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80014c2:	4952      	ldr	r1, [pc, #328]	@ (800160c <test_buffer_readwrite_verification+0x310>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fd2b 	bl	8000f20 <print_cc1201_status>
 80014ca:	e005      	b.n	80014d8 <test_buffer_readwrite_verification+0x1dc>
        } else {
            printf("    ✗ Single write FAILED - HAL: %d\n\r", hal_status);
 80014cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80014d0:	4619      	mov	r1, r3
 80014d2:	484f      	ldr	r0, [pc, #316]	@ (8001610 <test_buffer_readwrite_verification+0x314>)
 80014d4:	f007 fab2 	bl	8008a3c <iprintf>
    for (int i = 0; i < 5; i++) {
 80014d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014da:	3301      	adds	r3, #1
 80014dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80014de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	ddcc      	ble.n	800147e <test_buffer_readwrite_verification+0x182>
        }
    }
    
    // Check final FIFO count
    uint8_t final_count = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	71fb      	strb	r3, [r7, #7]
    CC1201_GetNumTXBytes(&final_count);
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f9ce 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO: %d bytes (expected: 5)\n\r", final_count);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4847      	ldr	r0, [pc, #284]	@ (8001614 <test_buffer_readwrite_verification+0x318>)
 80014f6:	f007 faa1 	bl	8008a3c <iprintf>
    
    // 4. Test state transitions with data
    printf("\n4. STATE TRANSITION WITH BUFFER DATA\n\r");
 80014fa:	4847      	ldr	r0, [pc, #284]	@ (8001618 <test_buffer_readwrite_verification+0x31c>)
 80014fc:	f007 fa9e 	bl	8008a3c <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 8001500:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f907 	bl	8000718 <CC1201_EnterTxMode>
 800150a:	4603      	mov	r3, r0
 800150c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 8001510:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001514:	2b00      	cmp	r3, #0
 8001516:	d123      	bne.n	8001560 <test_buffer_readwrite_verification+0x264>
        printf("  ✓ Entered TX mode with %d bytes in FIFO\n\r", final_count);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4619      	mov	r1, r3
 800151c:	483f      	ldr	r0, [pc, #252]	@ (800161c <test_buffer_readwrite_verification+0x320>)
 800151e:	f007 fa8d 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "TX_MODE_WITH_DATA");
 8001522:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001526:	493e      	ldr	r1, [pc, #248]	@ (8001620 <test_buffer_readwrite_verification+0x324>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fcf9 	bl	8000f20 <print_cc1201_status>
        
        HAL_Delay(50); // Allow some time for potential transmission
 800152e:	2032      	movs	r0, #50	@ 0x32
 8001530:	f001 fbe0 	bl	8002cf4 <HAL_Delay>
        
        // Check status after time in TX mode
        CC1201_Nop(&status_byte);
 8001534:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f921 	bl	8000780 <CC1201_Nop>
        print_cc1201_status(status_byte, "TX_AFTER_DELAY");
 800153e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001542:	4938      	ldr	r1, [pc, #224]	@ (8001624 <test_buffer_readwrite_verification+0x328>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fceb 	bl	8000f20 <print_cc1201_status>
        
        // Return to IDLE
        CC1201_EnterIdleMode(&status_byte);
 800154a:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f8ef 	bl	8000732 <CC1201_EnterIdleMode>
        print_cc1201_status(status_byte, "RETURN_TO_IDLE");
 8001554:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001558:	4933      	ldr	r1, [pc, #204]	@ (8001628 <test_buffer_readwrite_verification+0x32c>)
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fce0 	bl	8000f20 <print_cc1201_status>
    }
    
    // 5. Final cleanup
    printf("\n5. FINAL CLEANUP AND VERIFICATION\n\r");
 8001560:	4832      	ldr	r0, [pc, #200]	@ (800162c <test_buffer_readwrite_verification+0x330>)
 8001562:	f007 fa6b 	bl	8008a3c <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 8001566:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f8fb 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FINAL_CLEANUP");
 8001570:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001574:	492e      	ldr	r1, [pc, #184]	@ (8001630 <test_buffer_readwrite_verification+0x334>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fcd2 	bl	8000f20 <print_cc1201_status>
    
    uint8_t cleanup_count = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	71bb      	strb	r3, [r7, #6]
    CC1201_GetNumTXBytes(&cleanup_count);
 8001580:	1dbb      	adds	r3, r7, #6
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f982 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final FIFO count: %d (should be 0)\n\r", cleanup_count);
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	4619      	mov	r1, r3
 800158c:	4829      	ldr	r0, [pc, #164]	@ (8001634 <test_buffer_readwrite_verification+0x338>)
 800158e:	f007 fa55 	bl	8008a3c <iprintf>
    
    if (cleanup_count == 0) {
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d103      	bne.n	80015a0 <test_buffer_readwrite_verification+0x2a4>
        printf("  ✓ BUFFER TEST COMPLETED SUCCESSFULLY\n\r");
 8001598:	4827      	ldr	r0, [pc, #156]	@ (8001638 <test_buffer_readwrite_verification+0x33c>)
 800159a:	f007 fa4f 	bl	8008a3c <iprintf>
 800159e:	e002      	b.n	80015a6 <test_buffer_readwrite_verification+0x2aa>
    } else {
        printf("  ⚠ FIFO not completely empty after cleanup\n\r");
 80015a0:	4826      	ldr	r0, [pc, #152]	@ (800163c <test_buffer_readwrite_verification+0x340>)
 80015a2:	f007 fa4b 	bl	8008a3c <iprintf>
    }
    
    printf("=== BUFFER VERIFICATION TEST COMPLETE ===\n\r");
 80015a6:	4826      	ldr	r0, [pc, #152]	@ (8001640 <test_buffer_readwrite_verification+0x344>)
 80015a8:	f007 fa48 	bl	8008a3c <iprintf>
}
 80015ac:	3750      	adds	r7, #80	@ 0x50
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bdb0      	pop	{r4, r5, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800aaf4 	.word	0x0800aaf4
 80015b8:	0800ab24 	.word	0x0800ab24
 80015bc:	0800ab44 	.word	0x0800ab44
 80015c0:	0800a0b0 	.word	0x0800a0b0
 80015c4:	0800a06c 	.word	0x0800a06c
 80015c8:	0800ab78 	.word	0x0800ab78
 80015cc:	0800ae80 	.word	0x0800ae80
 80015d0:	0800aed0 	.word	0x0800aed0
 80015d4:	0800ab50 	.word	0x0800ab50
 80015d8:	0800aba0 	.word	0x0800aba0
 80015dc:	0800abb4 	.word	0x0800abb4
 80015e0:	0800abc0 	.word	0x0800abc0
 80015e4:	0800abc8 	.word	0x0800abc8
 80015e8:	0800abcc 	.word	0x0800abcc
 80015ec:	0800abe4 	.word	0x0800abe4
 80015f0:	0800abf4 	.word	0x0800abf4
 80015f4:	0800ac10 	.word	0x0800ac10
 80015f8:	0800ac2c 	.word	0x0800ac2c
 80015fc:	0800ac4c 	.word	0x0800ac4c
 8001600:	0800aee0 	.word	0x0800aee0
 8001604:	0800ac70 	.word	0x0800ac70
 8001608:	0800ac8c 	.word	0x0800ac8c
 800160c:	0800acac 	.word	0x0800acac
 8001610:	0800acb8 	.word	0x0800acb8
 8001614:	0800ace0 	.word	0x0800ace0
 8001618:	0800ad0c 	.word	0x0800ad0c
 800161c:	0800ad34 	.word	0x0800ad34
 8001620:	0800ad64 	.word	0x0800ad64
 8001624:	0800ad78 	.word	0x0800ad78
 8001628:	0800ad88 	.word	0x0800ad88
 800162c:	0800ad98 	.word	0x0800ad98
 8001630:	0800adc0 	.word	0x0800adc0
 8001634:	0800add0 	.word	0x0800add0
 8001638:	0800adf8 	.word	0x0800adf8
 800163c:	0800ae24 	.word	0x0800ae24
 8001640:	0800ae54 	.word	0x0800ae54

08001644 <test_cc1201_communication_verification>:

// CC1201 Communication Verification Test
void test_cc1201_communication_verification(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	70bb      	strb	r3, [r7, #2]
    
    printf("\n=== CC1201 COMMUNICATION VERIFICATION TEST ===\n\r");
 800164e:	487b      	ldr	r0, [pc, #492]	@ (800183c <test_cc1201_communication_verification+0x1f8>)
 8001650:	f007 f9f4 	bl	8008a3c <iprintf>
    
    // 1. Test basic communication with different strobe commands
    printf("1. TESTING BASIC STROBE RESPONSES\n\r");
 8001654:	487a      	ldr	r0, [pc, #488]	@ (8001840 <test_cc1201_communication_verification+0x1fc>)
 8001656:	f007 f9f1 	bl	8008a3c <iprintf>
    
    // Test NOP command multiple times to see if we get consistent responses
    for (int i = 0; i < 5; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	e01b      	b.n	8001698 <test_cc1201_communication_verification+0x54>
        hal_status = CC1201_Nop(&status_byte);
 8001660:	1cbb      	adds	r3, r7, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f88c 	bl	8000780 <CC1201_Nop>
 8001668:	4603      	mov	r3, r0
 800166a:	70fb      	strb	r3, [r7, #3]
        printf("  NOP %d: HAL=%d, Status=0x%02X ", i+1, hal_status, status_byte);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	1c59      	adds	r1, r3, #1
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	78bb      	ldrb	r3, [r7, #2]
 8001674:	4873      	ldr	r0, [pc, #460]	@ (8001844 <test_cc1201_communication_verification+0x200>)
 8001676:	f007 f9e1 	bl	8008a3c <iprintf>
        if (hal_status == HAL_OK) {
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <test_cc1201_communication_verification+0x48>
            print_cc1201_status(status_byte, "NOP_TEST");
 8001680:	78bb      	ldrb	r3, [r7, #2]
 8001682:	4971      	ldr	r1, [pc, #452]	@ (8001848 <test_cc1201_communication_verification+0x204>)
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fc4b 	bl	8000f20 <print_cc1201_status>
 800168a:	e002      	b.n	8001692 <test_cc1201_communication_verification+0x4e>
        } else {
            printf(" - COMMUNICATION FAILED\n\r");
 800168c:	486f      	ldr	r0, [pc, #444]	@ (800184c <test_cc1201_communication_verification+0x208>)
 800168e:	f007 f9d5 	bl	8008a3c <iprintf>
    for (int i = 0; i < 5; i++) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b04      	cmp	r3, #4
 800169c:	dde0      	ble.n	8001660 <test_cc1201_communication_verification+0x1c>
        }
    }
    
    // 2. Test soft reset to see if status changes
    printf("\n2. TESTING SOFT RESET RESPONSE\n\r");
 800169e:	486c      	ldr	r0, [pc, #432]	@ (8001850 <test_cc1201_communication_verification+0x20c>)
 80016a0:	f007 f9cc 	bl	8008a3c <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 80016a4:	1cbb      	adds	r3, r7, #2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f800 	bl	80006ac <CC1201_SoftReset>
 80016ac:	4603      	mov	r3, r0
 80016ae:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11c      	bne.n	80016f0 <test_cc1201_communication_verification+0xac>
        printf("  Soft Reset: ");
 80016b6:	4867      	ldr	r0, [pc, #412]	@ (8001854 <test_cc1201_communication_verification+0x210>)
 80016b8:	f007 f9c0 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "RESET");
 80016bc:	78bb      	ldrb	r3, [r7, #2]
 80016be:	4966      	ldr	r1, [pc, #408]	@ (8001858 <test_cc1201_communication_verification+0x214>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc2d 	bl	8000f20 <print_cc1201_status>
        
        // Wait for reset to complete and test again
        HAL_Delay(100);
 80016c6:	2064      	movs	r0, #100	@ 0x64
 80016c8:	f001 fb14 	bl	8002cf4 <HAL_Delay>
        hal_status = CC1201_Nop(&status_byte);
 80016cc:	1cbb      	adds	r3, r7, #2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f856 	bl	8000780 <CC1201_Nop>
 80016d4:	4603      	mov	r3, r0
 80016d6:	70fb      	strb	r3, [r7, #3]
        if (hal_status == HAL_OK) {
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <test_cc1201_communication_verification+0xb6>
            printf("  After Reset: ");
 80016de:	485f      	ldr	r0, [pc, #380]	@ (800185c <test_cc1201_communication_verification+0x218>)
 80016e0:	f007 f9ac 	bl	8008a3c <iprintf>
            print_cc1201_status(status_byte, "POST_RESET");
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	495e      	ldr	r1, [pc, #376]	@ (8001860 <test_cc1201_communication_verification+0x21c>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fc19 	bl	8000f20 <print_cc1201_status>
 80016ee:	e004      	b.n	80016fa <test_cc1201_communication_verification+0xb6>
        }
    } else {
        printf("  ✗ Soft Reset FAILED - HAL: %d\n\r", hal_status);
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	4619      	mov	r1, r3
 80016f4:	485b      	ldr	r0, [pc, #364]	@ (8001864 <test_cc1201_communication_verification+0x220>)
 80016f6:	f007 f9a1 	bl	8008a3c <iprintf>
    }
    
    // 3. Test different states to see if we get different status responses
    printf("\n3. TESTING STATE TRANSITIONS\n\r");
 80016fa:	485b      	ldr	r0, [pc, #364]	@ (8001868 <test_cc1201_communication_verification+0x224>)
 80016fc:	f007 f99e 	bl	8008a3c <iprintf>
    
    // Try to enter IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001700:	1cbb      	adds	r3, r7, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f815 	bl	8000732 <CC1201_EnterIdleMode>
 8001708:	4603      	mov	r3, r0
 800170a:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <test_cc1201_communication_verification+0xde>
        printf("  IDLE Mode: ");
 8001712:	4856      	ldr	r0, [pc, #344]	@ (800186c <test_cc1201_communication_verification+0x228>)
 8001714:	f007 f992 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "IDLE_ENTRY");
 8001718:	78bb      	ldrb	r3, [r7, #2]
 800171a:	4955      	ldr	r1, [pc, #340]	@ (8001870 <test_cc1201_communication_verification+0x22c>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fbff 	bl	8000f20 <print_cc1201_status>
    }
    
    // Try calibration
    hal_status = CC1201_CalFreqSynth(&status_byte);
 8001722:	1cbb      	adds	r3, r7, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ffea 	bl	80006fe <CC1201_CalFreqSynth>
 800172a:	4603      	mov	r3, r0
 800172c:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <test_cc1201_communication_verification+0x106>
        printf("  Calibrate: ");
 8001734:	484f      	ldr	r0, [pc, #316]	@ (8001874 <test_cc1201_communication_verification+0x230>)
 8001736:	f007 f981 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "CALIBRATE");
 800173a:	78bb      	ldrb	r3, [r7, #2]
 800173c:	494e      	ldr	r1, [pc, #312]	@ (8001878 <test_cc1201_communication_verification+0x234>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fbee 	bl	8000f20 <print_cc1201_status>
        HAL_Delay(50); // Wait for calibration
 8001744:	2032      	movs	r0, #50	@ 0x32
 8001746:	f001 fad5 	bl	8002cf4 <HAL_Delay>
    }
    
    // Try fast TX on
    hal_status = CC1201_FastTxOn(&status_byte);
 800174a:	1cbb      	adds	r3, r7, #2
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ffc9 	bl	80006e4 <CC1201_FastTxOn>
 8001752:	4603      	mov	r3, r0
 8001754:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <test_cc1201_communication_verification+0x128>
        printf("  Fast TX On: ");
 800175c:	4847      	ldr	r0, [pc, #284]	@ (800187c <test_cc1201_communication_verification+0x238>)
 800175e:	f007 f96d 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "FAST_TX_ON");
 8001762:	78bb      	ldrb	r3, [r7, #2]
 8001764:	4946      	ldr	r1, [pc, #280]	@ (8001880 <test_cc1201_communication_verification+0x23c>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fbda 	bl	8000f20 <print_cc1201_status>
    }
    
    // Return to IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 800176c:	1cbb      	adds	r3, r7, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ffdf 	bl	8000732 <CC1201_EnterIdleMode>
 8001774:	4603      	mov	r3, r0
 8001776:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d107      	bne.n	800178e <test_cc1201_communication_verification+0x14a>
        printf("  Return IDLE: ");
 800177e:	4841      	ldr	r0, [pc, #260]	@ (8001884 <test_cc1201_communication_verification+0x240>)
 8001780:	f007 f95c 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "RETURN_IDLE");
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	4940      	ldr	r1, [pc, #256]	@ (8001888 <test_cc1201_communication_verification+0x244>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fbc9 	bl	8000f20 <print_cc1201_status>
    }
    
    // 4. Test register read to verify communication
    printf("\n4. TESTING REGISTER READ OPERATIONS\n\r");
 800178e:	483f      	ldr	r0, [pc, #252]	@ (800188c <test_cc1201_communication_verification+0x248>)
 8001790:	f007 f954 	bl	8008a3c <iprintf>
    
    uint8_t chip_id = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	707b      	strb	r3, [r7, #1]
    hal_status = CC1201_ReadStatus(CC1201_MARCSTATE, &chip_id);
 8001798:	1c7b      	adds	r3, r7, #1
 800179a:	4619      	mov	r1, r3
 800179c:	f642 7073 	movw	r0, #12147	@ 0x2f73
 80017a0:	f7ff f80a 	bl	80007b8 <CC1201_ReadStatus>
 80017a4:	4603      	mov	r3, r0
 80017a6:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d105      	bne.n	80017ba <test_cc1201_communication_verification+0x176>
        printf("  MARCSTATE: 0x%02X\n\r", chip_id);
 80017ae:	787b      	ldrb	r3, [r7, #1]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4837      	ldr	r0, [pc, #220]	@ (8001890 <test_cc1201_communication_verification+0x24c>)
 80017b4:	f007 f942 	bl	8008a3c <iprintf>
 80017b8:	e004      	b.n	80017c4 <test_cc1201_communication_verification+0x180>
    } else {
        printf("  ✗ MARCSTATE read failed - HAL: %d\n\r", hal_status);
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	4619      	mov	r1, r3
 80017be:	4835      	ldr	r0, [pc, #212]	@ (8001894 <test_cc1201_communication_verification+0x250>)
 80017c0:	f007 f93c 	bl	8008a3c <iprintf>
    }
    
    uint8_t marc_state = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	703b      	strb	r3, [r7, #0]
    hal_status = CC1201_ReadMARCState(&marc_state);
 80017c8:	463b      	mov	r3, r7
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f842 	bl	8000854 <CC1201_ReadMARCState>
 80017d0:	4603      	mov	r3, r0
 80017d2:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d105      	bne.n	80017e6 <test_cc1201_communication_verification+0x1a2>
        printf("  MARC_STATE: 0x%02X\n\r", marc_state);
 80017da:	783b      	ldrb	r3, [r7, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	482e      	ldr	r0, [pc, #184]	@ (8001898 <test_cc1201_communication_verification+0x254>)
 80017e0:	f007 f92c 	bl	8008a3c <iprintf>
 80017e4:	e004      	b.n	80017f0 <test_cc1201_communication_verification+0x1ac>
    } else {
        printf("  ✗ MARC_STATE read failed - HAL: %d\n\r", hal_status);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	4619      	mov	r1, r3
 80017ea:	482c      	ldr	r0, [pc, #176]	@ (800189c <test_cc1201_communication_verification+0x258>)
 80017ec:	f007 f926 	bl	8008a3c <iprintf>
    }
    
    // 5. Analyze status byte patterns
    printf("\n5. STATUS BYTE ANALYSIS\n\r");
 80017f0:	482b      	ldr	r0, [pc, #172]	@ (80018a0 <test_cc1201_communication_verification+0x25c>)
 80017f2:	f007 f923 	bl	8008a3c <iprintf>
    printf("  If all status bytes are 0x00, this suggests:\n\r");
 80017f6:	482b      	ldr	r0, [pc, #172]	@ (80018a4 <test_cc1201_communication_verification+0x260>)
 80017f8:	f007 f920 	bl	8008a3c <iprintf>
    printf("  - CC1201 may not be responding (check power/connections)\n\r");
 80017fc:	482a      	ldr	r0, [pc, #168]	@ (80018a8 <test_cc1201_communication_verification+0x264>)
 80017fe:	f007 f91d 	bl	8008a3c <iprintf>
    printf("  - SPI communication issue (check MISO line)\n\r");
 8001802:	482a      	ldr	r0, [pc, #168]	@ (80018ac <test_cc1201_communication_verification+0x268>)
 8001804:	f007 f91a 	bl	8008a3c <iprintf>
    printf("  - CC1201 may be in reset or powered down\n\r");
 8001808:	4829      	ldr	r0, [pc, #164]	@ (80018b0 <test_cc1201_communication_verification+0x26c>)
 800180a:	f007 f917 	bl	8008a3c <iprintf>
    printf("  \n\r");
 800180e:	4829      	ldr	r0, [pc, #164]	@ (80018b4 <test_cc1201_communication_verification+0x270>)
 8001810:	f007 f914 	bl	8008a3c <iprintf>
    printf("  Normal CC1201 status should show:\n\r");
 8001814:	4828      	ldr	r0, [pc, #160]	@ (80018b8 <test_cc1201_communication_verification+0x274>)
 8001816:	f007 f911 	bl	8008a3c <iprintf>
    printf("  - Bits [7:4]: Current state (0=IDLE, 1=RX, 2=TX, etc.)\n\r");
 800181a:	4828      	ldr	r0, [pc, #160]	@ (80018bc <test_cc1201_communication_verification+0x278>)
 800181c:	f007 f90e 	bl	8008a3c <iprintf>
    printf("  - Bits [3:0]: FIFO bytes or chip status info\n\r");
 8001820:	4827      	ldr	r0, [pc, #156]	@ (80018c0 <test_cc1201_communication_verification+0x27c>)
 8001822:	f007 f90b 	bl	8008a3c <iprintf>
    printf("  - A functioning CC1201 should rarely return exactly 0x00\n\r");
 8001826:	4827      	ldr	r0, [pc, #156]	@ (80018c4 <test_cc1201_communication_verification+0x280>)
 8001828:	f007 f908 	bl	8008a3c <iprintf>
    
    printf("=== COMMUNICATION VERIFICATION COMPLETE ===\n\r");
 800182c:	4826      	ldr	r0, [pc, #152]	@ (80018c8 <test_cc1201_communication_verification+0x284>)
 800182e:	f007 f905 	bl	8008a3c <iprintf>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	0800aee8 	.word	0x0800aee8
 8001840:	0800af1c 	.word	0x0800af1c
 8001844:	0800af40 	.word	0x0800af40
 8001848:	0800af64 	.word	0x0800af64
 800184c:	0800af70 	.word	0x0800af70
 8001850:	0800af8c 	.word	0x0800af8c
 8001854:	0800afb0 	.word	0x0800afb0
 8001858:	08009ec8 	.word	0x08009ec8
 800185c:	0800afc0 	.word	0x0800afc0
 8001860:	0800afd0 	.word	0x0800afd0
 8001864:	0800afdc 	.word	0x0800afdc
 8001868:	0800b000 	.word	0x0800b000
 800186c:	0800b020 	.word	0x0800b020
 8001870:	0800b030 	.word	0x0800b030
 8001874:	0800b03c 	.word	0x0800b03c
 8001878:	08009f5c 	.word	0x08009f5c
 800187c:	0800b04c 	.word	0x0800b04c
 8001880:	08009fa4 	.word	0x08009fa4
 8001884:	0800b05c 	.word	0x0800b05c
 8001888:	0800b06c 	.word	0x0800b06c
 800188c:	0800b078 	.word	0x0800b078
 8001890:	0800b0a0 	.word	0x0800b0a0
 8001894:	0800b0b8 	.word	0x0800b0b8
 8001898:	0800b0e0 	.word	0x0800b0e0
 800189c:	0800b0f8 	.word	0x0800b0f8
 80018a0:	0800b124 	.word	0x0800b124
 80018a4:	0800b140 	.word	0x0800b140
 80018a8:	0800b174 	.word	0x0800b174
 80018ac:	0800b1b4 	.word	0x0800b1b4
 80018b0:	0800b1e4 	.word	0x0800b1e4
 80018b4:	0800b214 	.word	0x0800b214
 80018b8:	0800b21c 	.word	0x0800b21c
 80018bc:	0800b244 	.word	0x0800b244
 80018c0:	0800b280 	.word	0x0800b280
 80018c4:	0800b2b4 	.word	0x0800b2b4
 80018c8:	0800b2f4 	.word	0x0800b2f4

080018cc <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 80018d2:	485c      	ldr	r0, [pc, #368]	@ (8001a44 <test_GPIO_pins+0x178>)
 80018d4:	f007 f8b2 	bl	8008a3c <iprintf>
    
    // Test CS pin more thoroughly
    printf("CS Pin (PE4) Detailed Test:\n\r");
 80018d8:	485b      	ldr	r0, [pc, #364]	@ (8001a48 <test_GPIO_pins+0x17c>)
 80018da:	f007 f8af 	bl	8008a3c <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80018de:	2110      	movs	r1, #16
 80018e0:	485a      	ldr	r0, [pc, #360]	@ (8001a4c <test_GPIO_pins+0x180>)
 80018e2:	f002 f955 	bl	8003b90 <HAL_GPIO_ReadPin>
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
    printf("  Initial state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <test_GPIO_pins+0x28>
 80018f0:	4b57      	ldr	r3, [pc, #348]	@ (8001a50 <test_GPIO_pins+0x184>)
 80018f2:	e000      	b.n	80018f6 <test_GPIO_pins+0x2a>
 80018f4:	4b57      	ldr	r3, [pc, #348]	@ (8001a54 <test_GPIO_pins+0x188>)
 80018f6:	4619      	mov	r1, r3
 80018f8:	4857      	ldr	r0, [pc, #348]	@ (8001a58 <test_GPIO_pins+0x18c>)
 80018fa:	f007 f89f 	bl	8008a3c <iprintf>
    
    // Force CS LOW and check multiple times
    printf("  Forcing CS LOW...\n\r");
 80018fe:	4857      	ldr	r0, [pc, #348]	@ (8001a5c <test_GPIO_pins+0x190>)
 8001900:	f007 f89c 	bl	8008a3c <iprintf>
    for (int i = 0; i < 5; i++) {
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e01c      	b.n	8001944 <test_GPIO_pins+0x78>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	484f      	ldr	r0, [pc, #316]	@ (8001a4c <test_GPIO_pins+0x180>)
 8001910:	f002 f956 	bl	8003bc0 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8001914:	200a      	movs	r0, #10
 8001916:	f001 f9ed 	bl	8002cf4 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 800191a:	2110      	movs	r1, #16
 800191c:	484b      	ldr	r0, [pc, #300]	@ (8001a4c <test_GPIO_pins+0x180>)
 800191e:	f002 f937 	bl	8003b90 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1c59      	adds	r1, r3, #1
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <test_GPIO_pins+0x68>
 8001930:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <test_GPIO_pins+0x184>)
 8001932:	e000      	b.n	8001936 <test_GPIO_pins+0x6a>
 8001934:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <test_GPIO_pins+0x188>)
 8001936:	461a      	mov	r2, r3
 8001938:	4849      	ldr	r0, [pc, #292]	@ (8001a60 <test_GPIO_pins+0x194>)
 800193a:	f007 f87f 	bl	8008a3c <iprintf>
    for (int i = 0; i < 5; i++) {
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3301      	adds	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b04      	cmp	r3, #4
 8001948:	dddf      	ble.n	800190a <test_GPIO_pins+0x3e>
    }
    
    // Force CS HIGH and check multiple times
    printf("  Forcing CS HIGH...\n\r");
 800194a:	4846      	ldr	r0, [pc, #280]	@ (8001a64 <test_GPIO_pins+0x198>)
 800194c:	f007 f876 	bl	8008a3c <iprintf>
    for (int i = 0; i < 5; i++) {
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	e01c      	b.n	8001990 <test_GPIO_pins+0xc4>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2110      	movs	r1, #16
 800195a:	483c      	ldr	r0, [pc, #240]	@ (8001a4c <test_GPIO_pins+0x180>)
 800195c:	f002 f930 	bl	8003bc0 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8001960:	200a      	movs	r0, #10
 8001962:	f001 f9c7 	bl	8002cf4 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8001966:	2110      	movs	r1, #16
 8001968:	4838      	ldr	r0, [pc, #224]	@ (8001a4c <test_GPIO_pins+0x180>)
 800196a:	f002 f911 	bl	8003b90 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1c59      	adds	r1, r3, #1
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <test_GPIO_pins+0xb4>
 800197c:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <test_GPIO_pins+0x184>)
 800197e:	e000      	b.n	8001982 <test_GPIO_pins+0xb6>
 8001980:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <test_GPIO_pins+0x188>)
 8001982:	461a      	mov	r2, r3
 8001984:	4836      	ldr	r0, [pc, #216]	@ (8001a60 <test_GPIO_pins+0x194>)
 8001986:	f007 f859 	bl	8008a3c <iprintf>
    for (int i = 0; i < 5; i++) {
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b04      	cmp	r3, #4
 8001994:	dddf      	ble.n	8001956 <test_GPIO_pins+0x8a>
    }
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8001996:	4834      	ldr	r0, [pc, #208]	@ (8001a68 <test_GPIO_pins+0x19c>)
 8001998:	f007 f850 	bl	8008a3c <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 800199c:	2110      	movs	r1, #16
 800199e:	4833      	ldr	r0, [pc, #204]	@ (8001a6c <test_GPIO_pins+0x1a0>)
 80019a0:	f002 f8f6 	bl	8003b90 <HAL_GPIO_ReadPin>
 80019a4:	4603      	mov	r3, r0
 80019a6:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80019a8:	79bb      	ldrb	r3, [r7, #6]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <test_GPIO_pins+0xe6>
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <test_GPIO_pins+0x184>)
 80019b0:	e000      	b.n	80019b4 <test_GPIO_pins+0xe8>
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <test_GPIO_pins+0x188>)
 80019b4:	4619      	mov	r1, r3
 80019b6:	482e      	ldr	r0, [pc, #184]	@ (8001a70 <test_GPIO_pins+0x1a4>)
 80019b8:	f007 f840 	bl	8008a3c <iprintf>
    
    // Check SPI state
    printf("SPI2 State: ");
 80019bc:	482d      	ldr	r0, [pc, #180]	@ (8001a74 <test_GPIO_pins+0x1a8>)
 80019be:	f007 f83d 	bl	8008a3c <iprintf>
    if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_READY) {
 80019c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <test_GPIO_pins+0x1ac>)
 80019c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d103      	bne.n	80019d6 <test_GPIO_pins+0x10a>
        printf("READY\n\r");
 80019ce:	482b      	ldr	r0, [pc, #172]	@ (8001a7c <test_GPIO_pins+0x1b0>)
 80019d0:	f007 f834 	bl	8008a3c <iprintf>
 80019d4:	e02f      	b.n	8001a36 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY) {
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <test_GPIO_pins+0x1ac>)
 80019d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d103      	bne.n	80019ea <test_GPIO_pins+0x11e>
        printf("BUSY\n\r");
 80019e2:	4827      	ldr	r0, [pc, #156]	@ (8001a80 <test_GPIO_pins+0x1b4>)
 80019e4:	f007 f82a 	bl	8008a3c <iprintf>
 80019e8:	e025      	b.n	8001a36 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX) {
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <test_GPIO_pins+0x1ac>)
 80019ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d103      	bne.n	80019fe <test_GPIO_pins+0x132>
        printf("BUSY_TX\n\r");
 80019f6:	4823      	ldr	r0, [pc, #140]	@ (8001a84 <test_GPIO_pins+0x1b8>)
 80019f8:	f007 f820 	bl	8008a3c <iprintf>
 80019fc:	e01b      	b.n	8001a36 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_RX) {
 80019fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <test_GPIO_pins+0x1ac>)
 8001a00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d103      	bne.n	8001a12 <test_GPIO_pins+0x146>
        printf("BUSY_RX\n\r");
 8001a0a:	481f      	ldr	r0, [pc, #124]	@ (8001a88 <test_GPIO_pins+0x1bc>)
 8001a0c:	f007 f816 	bl	8008a3c <iprintf>
 8001a10:	e011      	b.n	8001a36 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX_RX) {
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <test_GPIO_pins+0x1ac>)
 8001a14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d103      	bne.n	8001a26 <test_GPIO_pins+0x15a>
        printf("BUSY_TX_RX\n\r");
 8001a1e:	481b      	ldr	r0, [pc, #108]	@ (8001a8c <test_GPIO_pins+0x1c0>)
 8001a20:	f007 f80c 	bl	8008a3c <iprintf>
 8001a24:	e007      	b.n	8001a36 <test_GPIO_pins+0x16a>
    } else {
        printf("ERROR/RESET (%d)\n\r", CC1201_SPI_HANDLE.State);
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <test_GPIO_pins+0x1ac>)
 8001a28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4817      	ldr	r0, [pc, #92]	@ (8001a90 <test_GPIO_pins+0x1c4>)
 8001a32:	f007 f803 	bl	8008a3c <iprintf>
    }
    
    printf("===================\n\r");
 8001a36:	4817      	ldr	r0, [pc, #92]	@ (8001a94 <test_GPIO_pins+0x1c8>)
 8001a38:	f007 f800 	bl	8008a3c <iprintf>
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	0800b5c0 	.word	0x0800b5c0
 8001a48:	0800b5d8 	.word	0x0800b5d8
 8001a4c:	58021000 	.word	0x58021000
 8001a50:	0800b5f8 	.word	0x0800b5f8
 8001a54:	0800b600 	.word	0x0800b600
 8001a58:	0800b604 	.word	0x0800b604
 8001a5c:	0800b61c 	.word	0x0800b61c
 8001a60:	0800b634 	.word	0x0800b634
 8001a64:	0800b64c 	.word	0x0800b64c
 8001a68:	0800b664 	.word	0x0800b664
 8001a6c:	58020c00 	.word	0x58020c00
 8001a70:	0800b674 	.word	0x0800b674
 8001a74:	0800b67c 	.word	0x0800b67c
 8001a78:	240000b8 	.word	0x240000b8
 8001a7c:	0800b68c 	.word	0x0800b68c
 8001a80:	0800b694 	.word	0x0800b694
 8001a84:	0800b69c 	.word	0x0800b69c
 8001a88:	0800b6a8 	.word	0x0800b6a8
 8001a8c:	0800b6b4 	.word	0x0800b6b4
 8001a90:	0800b6c4 	.word	0x0800b6c4
 8001a94:	0800b6d8 	.word	0x0800b6d8

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001a9e:	f000 fb6f 	bl	8002180 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa2:	f001 f895 	bl	8002bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa6:	f000 fa07 	bl	8001eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aaa:	f000 fad9 	bl	8002060 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001aae:	f000 fa81 	bl	8001fb4 <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 fe36 	bl	8002724 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f000 fe33 	bl	8002724 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f000 fe30 	bl	8002724 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 ff20 	bl	800290c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001acc:	4b87      	ldr	r3, [pc, #540]	@ (8001cec <main+0x254>)
 8001ace:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001ad4:	4b85      	ldr	r3, [pc, #532]	@ (8001cec <main+0x254>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001ada:	4b84      	ldr	r3, [pc, #528]	@ (8001cec <main+0x254>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001ae0:	4b82      	ldr	r3, [pc, #520]	@ (8001cec <main+0x254>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001ae6:	4b81      	ldr	r3, [pc, #516]	@ (8001cec <main+0x254>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001aec:	497f      	ldr	r1, [pc, #508]	@ (8001cec <main+0x254>)
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 ff90 	bl	8002a14 <BSP_COM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <main+0x66>
  {
    Error_Handler();
 8001afa:	f000 fb81 	bl	8002200 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8001afe:	487c      	ldr	r0, [pc, #496]	@ (8001cf0 <main+0x258>)
 8001b00:	f006 ff9c 	bl	8008a3c <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 fe83 	bl	8002810 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 fe80 	bl	8002810 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f000 fe7d 	bl	8002810 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8001b16:	4877      	ldr	r0, [pc, #476]	@ (8001cf4 <main+0x25c>)
 8001b18:	f006 ff90 	bl	8008a3c <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8001b1c:	f7ff fed6 	bl	80018cc <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 8001b20:	4875      	ldr	r0, [pc, #468]	@ (8001cf8 <main+0x260>)
 8001b22:	f006 ff8b 	bl	8008a3c <iprintf>
  HAL_Delay(100);
 8001b26:	2064      	movs	r0, #100	@ 0x64
 8001b28:	f001 f8e4 	bl	8002cf4 <HAL_Delay>
  
  // First, test SPI2 peripheral directly
  printf("Testing SPI2 peripheral directly...\n\r");
 8001b2c:	4873      	ldr	r0, [pc, #460]	@ (8001cfc <main+0x264>)
 8001b2e:	f006 ff85 	bl	8008a3c <iprintf>
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
         CC1201_SPI_HANDLE.State, 
 8001b32:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <main+0x268>)
 8001b34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001b38:	b2db      	uxtb	r3, r3
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <main+0x268>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <main+0x268>)
 8001b42:	68d9      	ldr	r1, [r3, #12]
 8001b44:	4b6e      	ldr	r3, [pc, #440]	@ (8001d00 <main+0x268>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	486d      	ldr	r0, [pc, #436]	@ (8001d04 <main+0x26c>)
 8001b50:	f006 ff74 	bl	8008a3c <iprintf>
         CC1201_SPI_HANDLE.Init.Mode,
         CC1201_SPI_HANDLE.Init.DataSize,
         CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  
  // Try to fix SPI2 configuration
  printf("Attempting to reconfigure SPI2...\n\r");
 8001b54:	486c      	ldr	r0, [pc, #432]	@ (8001d08 <main+0x270>)
 8001b56:	f006 ff71 	bl	8008a3c <iprintf>
  
  // Deinitialize SPI2
  HAL_SPI_DeInit(&CC1201_SPI_HANDLE);
 8001b5a:	4869      	ldr	r0, [pc, #420]	@ (8001d00 <main+0x268>)
 8001b5c:	f004 ffd4 	bl	8006b08 <HAL_SPI_DeInit>
  
  // Reconfigure SPI2 manually
  CC1201_SPI_HANDLE.Instance = SPI2;
 8001b60:	4b67      	ldr	r3, [pc, #412]	@ (8001d00 <main+0x268>)
 8001b62:	4a6a      	ldr	r2, [pc, #424]	@ (8001d0c <main+0x274>)
 8001b64:	601a      	str	r2, [r3, #0]
  CC1201_SPI_HANDLE.Init.Mode = SPI_MODE_MASTER;
 8001b66:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <main+0x268>)
 8001b68:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b6c:	605a      	str	r2, [r3, #4]
  CC1201_SPI_HANDLE.Init.Direction = SPI_DIRECTION_2LINES;
 8001b6e:	4b64      	ldr	r3, [pc, #400]	@ (8001d00 <main+0x268>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  CC1201_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b74:	4b62      	ldr	r3, [pc, #392]	@ (8001d00 <main+0x268>)
 8001b76:	2207      	movs	r2, #7
 8001b78:	60da      	str	r2, [r3, #12]
  CC1201_SPI_HANDLE.Init.CLKPolarity = SPI_POLARITY_LOW;    // CPOL = 0
 8001b7a:	4b61      	ldr	r3, [pc, #388]	@ (8001d00 <main+0x268>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  CC1201_SPI_HANDLE.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0
 8001b80:	4b5f      	ldr	r3, [pc, #380]	@ (8001d00 <main+0x268>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  CC1201_SPI_HANDLE.Init.NSS = SPI_NSS_SOFT;
 8001b86:	4b5e      	ldr	r3, [pc, #376]	@ (8001d00 <main+0x268>)
 8001b88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b8c:	619a      	str	r2, [r3, #24]
  CC1201_SPI_HANDLE.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // Slower speed
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d00 <main+0x268>)
 8001b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b94:	61da      	str	r2, [r3, #28]
  CC1201_SPI_HANDLE.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b96:	4b5a      	ldr	r3, [pc, #360]	@ (8001d00 <main+0x268>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  CC1201_SPI_HANDLE.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b9c:	4b58      	ldr	r3, [pc, #352]	@ (8001d00 <main+0x268>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  CC1201_SPI_HANDLE.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba2:	4b57      	ldr	r3, [pc, #348]	@ (8001d00 <main+0x268>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  CC1201_SPI_HANDLE.Init.CRCPolynomial = 0x0;
 8001ba8:	4b55      	ldr	r3, [pc, #340]	@ (8001d00 <main+0x268>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  CC1201_SPI_HANDLE.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bae:	4b54      	ldr	r3, [pc, #336]	@ (8001d00 <main+0x268>)
 8001bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb4:	635a      	str	r2, [r3, #52]	@ 0x34
  CC1201_SPI_HANDLE.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bb6:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <main+0x268>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	639a      	str	r2, [r3, #56]	@ 0x38
  CC1201_SPI_HANDLE.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bbc:	4b50      	ldr	r3, [pc, #320]	@ (8001d00 <main+0x268>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  CC1201_SPI_HANDLE.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8001d00 <main+0x268>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  CC1201_SPI_HANDLE.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d00 <main+0x268>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  CC1201_SPI_HANDLE.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bce:	4b4c      	ldr	r3, [pc, #304]	@ (8001d00 <main+0x268>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	649a      	str	r2, [r3, #72]	@ 0x48
  CC1201_SPI_HANDLE.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d00 <main+0x268>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  CC1201_SPI_HANDLE.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bda:	4b49      	ldr	r3, [pc, #292]	@ (8001d00 <main+0x268>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	651a      	str	r2, [r3, #80]	@ 0x50
  CC1201_SPI_HANDLE.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001be0:	4b47      	ldr	r3, [pc, #284]	@ (8001d00 <main+0x268>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	655a      	str	r2, [r3, #84]	@ 0x54
  CC1201_SPI_HANDLE.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001be6:	4b46      	ldr	r3, [pc, #280]	@ (8001d00 <main+0x268>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	659a      	str	r2, [r3, #88]	@ 0x58
  
  HAL_StatusTypeDef spi_init_result = HAL_SPI_Init(&CC1201_SPI_HANDLE);
 8001bec:	4844      	ldr	r0, [pc, #272]	@ (8001d00 <main+0x268>)
 8001bee:	f004 fe67 	bl	80068c0 <HAL_SPI_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  printf("SPI2 reinitialization result: %d\n\r", spi_init_result);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4845      	ldr	r0, [pc, #276]	@ (8001d10 <main+0x278>)
 8001bfc:	f006 ff1e 	bl	8008a3c <iprintf>
  
  if (spi_init_result == HAL_OK) {
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d111      	bne.n	8001c2a <main+0x192>
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
             CC1201_SPI_HANDLE.State, 
 8001c06:	4b3e      	ldr	r3, [pc, #248]	@ (8001d00 <main+0x268>)
 8001c08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001c0c:	b2db      	uxtb	r3, r3
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <main+0x268>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4b3a      	ldr	r3, [pc, #232]	@ (8001d00 <main+0x268>)
 8001c16:	68d9      	ldr	r1, [r3, #12]
 8001c18:	4b39      	ldr	r3, [pc, #228]	@ (8001d00 <main+0x268>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4601      	mov	r1, r0
 8001c22:	483c      	ldr	r0, [pc, #240]	@ (8001d14 <main+0x27c>)
 8001c24:	f006 ff0a 	bl	8008a3c <iprintf>
 8001c28:	e002      	b.n	8001c30 <main+0x198>
             CC1201_SPI_HANDLE.Init.Mode,
             CC1201_SPI_HANDLE.Init.DataSize,
             CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  } else {
      printf("SPI2 reconfiguration failed!\n\r");
 8001c2a:	483b      	ldr	r0, [pc, #236]	@ (8001d18 <main+0x280>)
 8001c2c:	f006 ff06 	bl	8008a3c <iprintf>
  }
  
  uint8_t spi_test_tx = 0xAA;
 8001c30:	23aa      	movs	r3, #170	@ 0xaa
 8001c32:	70fb      	strb	r3, [r7, #3]
  uint8_t spi_test_rx = 0x00;
 8001c34:	2300      	movs	r3, #0
 8001c36:	70bb      	strb	r3, [r7, #2]
  
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // CS Low
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4837      	ldr	r0, [pc, #220]	@ (8001d1c <main+0x284>)
 8001c3e:	f001 ffbf 	bl	8003bc0 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef spi_test_result = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &spi_test_tx, &spi_test_rx, 1, 100);
 8001c42:	1cba      	adds	r2, r7, #2
 8001c44:	1cf9      	adds	r1, r7, #3
 8001c46:	2364      	movs	r3, #100	@ 0x64
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	482c      	ldr	r0, [pc, #176]	@ (8001d00 <main+0x268>)
 8001c4e:	f004 ff85 	bl	8006b5c <HAL_SPI_TransmitReceive>
 8001c52:	4603      	mov	r3, r0
 8001c54:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // CS High
 8001c56:	2201      	movs	r2, #1
 8001c58:	2110      	movs	r1, #16
 8001c5a:	4830      	ldr	r0, [pc, #192]	@ (8001d1c <main+0x284>)
 8001c5c:	f001 ffb0 	bl	8003bc0 <HAL_GPIO_WritePin>
  
  printf("Direct SPI test - HAL: %d, TX: 0x%02X, RX: 0x%02X\n\r", spi_test_result, spi_test_tx, spi_test_rx);
 8001c60:	79b9      	ldrb	r1, [r7, #6]
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	461a      	mov	r2, r3
 8001c66:	78bb      	ldrb	r3, [r7, #2]
 8001c68:	482d      	ldr	r0, [pc, #180]	@ (8001d20 <main+0x288>)
 8001c6a:	f006 fee7 	bl	8008a3c <iprintf>
  
  if (spi_test_result == HAL_OK) {
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <main+0x1e4>
      printf("SPI2 peripheral working!\n\r");
 8001c74:	482b      	ldr	r0, [pc, #172]	@ (8001d24 <main+0x28c>)
 8001c76:	f006 fee1 	bl	8008a3c <iprintf>
 8001c7a:	e016      	b.n	8001caa <main+0x212>
  } else {
      printf("SPI2 peripheral failed! Error: %d\n\r", spi_test_result);
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4829      	ldr	r0, [pc, #164]	@ (8001d28 <main+0x290>)
 8001c82:	f006 fedb 	bl	8008a3c <iprintf>
      if (spi_test_result == HAL_TIMEOUT) printf("  -> SPI TIMEOUT\n\r");
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d102      	bne.n	8001c92 <main+0x1fa>
 8001c8c:	4827      	ldr	r0, [pc, #156]	@ (8001d2c <main+0x294>)
 8001c8e:	f006 fed5 	bl	8008a3c <iprintf>
      if (spi_test_result == HAL_ERROR) printf("  -> SPI ERROR\n\r");
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d102      	bne.n	8001c9e <main+0x206>
 8001c98:	4825      	ldr	r0, [pc, #148]	@ (8001d30 <main+0x298>)
 8001c9a:	f006 fecf 	bl	8008a3c <iprintf>
      if (spi_test_result == HAL_BUSY) printf("  -> SPI BUSY\n\r");
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d102      	bne.n	8001caa <main+0x212>
 8001ca4:	4823      	ldr	r0, [pc, #140]	@ (8001d34 <main+0x29c>)
 8001ca6:	f006 fec9 	bl	8008a3c <iprintf>
  }
  
  printf("Test 1: Creating status byte variable...\n\r");
 8001caa:	4823      	ldr	r0, [pc, #140]	@ (8001d38 <main+0x2a0>)
 8001cac:	f006 fec6 	bl	8008a3c <iprintf>
  uint8_t test_status = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	707b      	strb	r3, [r7, #1]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 8001cb4:	4821      	ldr	r0, [pc, #132]	@ (8001d3c <main+0x2a4>)
 8001cb6:	f006 fec1 	bl	8008a3c <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8001cba:	1c7b      	adds	r3, r7, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fd5f 	bl	8000780 <CC1201_Nop>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	717b      	strb	r3, [r7, #5]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	787a      	ldrb	r2, [r7, #1]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481c      	ldr	r0, [pc, #112]	@ (8001d40 <main+0x2a8>)
 8001cce:	f006 feb5 	bl	8008a3c <iprintf>
  
  if (nop_result == HAL_OK) {
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d137      	bne.n	8001d48 <main+0x2b0>
      printf("Basic CC1201 communication working!\n\r");
 8001cd8:	481a      	ldr	r0, [pc, #104]	@ (8001d44 <main+0x2ac>)
 8001cda:	f006 feaf 	bl	8008a3c <iprintf>
      BSP_LED_Off(LED_RED);
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f000 fdc0 	bl	8002864 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 fd93 	bl	8002810 <BSP_LED_On>
 8001cea:	e036      	b.n	8001d5a <main+0x2c2>
 8001cec:	240000a4 	.word	0x240000a4
 8001cf0:	0800be3c 	.word	0x0800be3c
 8001cf4:	0800be58 	.word	0x0800be58
 8001cf8:	0800be88 	.word	0x0800be88
 8001cfc:	0800beac 	.word	0x0800beac
 8001d00:	240000b8 	.word	0x240000b8
 8001d04:	0800bed4 	.word	0x0800bed4
 8001d08:	0800bf1c 	.word	0x0800bf1c
 8001d0c:	40003800 	.word	0x40003800
 8001d10:	0800bf40 	.word	0x0800bf40
 8001d14:	0800bf64 	.word	0x0800bf64
 8001d18:	0800bfac 	.word	0x0800bfac
 8001d1c:	58021000 	.word	0x58021000
 8001d20:	0800bfcc 	.word	0x0800bfcc
 8001d24:	0800c000 	.word	0x0800c000
 8001d28:	0800c01c 	.word	0x0800c01c
 8001d2c:	0800c040 	.word	0x0800c040
 8001d30:	0800c054 	.word	0x0800c054
 8001d34:	0800c068 	.word	0x0800c068
 8001d38:	0800c078 	.word	0x0800c078
 8001d3c:	0800c0a4 	.word	0x0800c0a4
 8001d40:	0800c0cc 	.word	0x0800c0cc
 8001d44:	0800c100 	.word	0x0800c100
  } else {
      printf("CC1201 communication failed!\n\r");
 8001d48:	484e      	ldr	r0, [pc, #312]	@ (8001e84 <main+0x3ec>)
 8001d4a:	f006 fe77 	bl	8008a3c <iprintf>
      BSP_LED_Off(LED_GREEN);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 fd88 	bl	8002864 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8001d54:	2002      	movs	r0, #2
 8001d56:	f000 fd5b 	bl	8002810 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  uint32_t test_counter = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 8001d62:	4849      	ldr	r0, [pc, #292]	@ (8001e88 <main+0x3f0>)
 8001d64:	f006 fe6a 	bl	8008a3c <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8001d68:	4b48      	ldr	r3, [pc, #288]	@ (8001e8c <main+0x3f4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d116      	bne.n	8001d9e <main+0x306>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8001d70:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <main+0x3f4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 fd9e 	bl	80028b8 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f000 fd9b 	bl	80028b8 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f000 fd98 	bl	80028b8 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual comprehensive test triggered...\n\r");
 8001d88:	4841      	ldr	r0, [pc, #260]	@ (8001e90 <main+0x3f8>)
 8001d8a:	f006 fe57 	bl	8008a3c <iprintf>
      CC1201_HardwareDiagnostic();
 8001d8e:	f7fe ff01 	bl	8000b94 <CC1201_HardwareDiagnostic>
      test_cc1201_communication_verification();
 8001d92:	f7ff fc57 	bl	8001644 <test_cc1201_communication_verification>
      test_fifo_operations();
 8001d96:	f7ff f931 	bl	8000ffc <test_fifo_operations>
      test_buffer_readwrite_verification();
 8001d9a:	f7ff faaf 	bl	80012fc <test_buffer_readwrite_verification>
    }
    
    // Simple periodic test every 5 seconds  
    if (HAL_GetTick() - last_test > 5000) {
 8001d9e:	f000 ff9d 	bl	8002cdc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d964      	bls.n	8001e7a <main+0x3e2>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 8001db0:	f000 ff94 	bl	8002cdc <HAL_GetTick>
 8001db4:	4601      	mov	r1, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	4835      	ldr	r0, [pc, #212]	@ (8001e94 <main+0x3fc>)
 8001dc0:	f006 fe3c 	bl	8008a3c <iprintf>
      
      uint8_t status_byte = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	703b      	strb	r3, [r7, #0]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fcd8 	bl	8000780 <CC1201_Nop>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	713b      	strb	r3, [r7, #4]
      
      if (hal_status == HAL_OK) {
 8001dd4:	793b      	ldrb	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d141      	bne.n	8001e5e <main+0x3c6>
        printf("OK ");
 8001dda:	482f      	ldr	r0, [pc, #188]	@ (8001e98 <main+0x400>)
 8001ddc:	f006 fe2e 	bl	8008a3c <iprintf>
        print_cc1201_status(status_byte, "NOP_STATUS");
 8001de0:	783b      	ldrb	r3, [r7, #0]
 8001de2:	492e      	ldr	r1, [pc, #184]	@ (8001e9c <main+0x404>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f89b 	bl	8000f20 <print_cc1201_status>
        BSP_LED_On(LED_GREEN);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 fd10 	bl	8002810 <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 8001df0:	2002      	movs	r0, #2
 8001df2:	f000 fd37 	bl	8002864 <BSP_LED_Off>
        
        // Every 10th test, run comprehensive buffer test
        if (test_counter % 10 == 0) {
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <main+0x408>)
 8001dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	1aca      	subs	r2, r1, r3
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d104      	bne.n	8001e18 <main+0x380>
          printf("\n[PERIODIC] Running comprehensive buffer test...\n\r");
 8001e0e:	4825      	ldr	r0, [pc, #148]	@ (8001ea4 <main+0x40c>)
 8001e10:	f006 fe14 	bl	8008a3c <iprintf>
          test_fifo_operations();
 8001e14:	f7ff f8f2 	bl	8000ffc <test_fifo_operations>
        }
        
        // Every 20th test, run communication verification
        if (test_counter % 20 == 0) {
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <main+0x408>)
 8001e1c:	fba3 2301 	umull	r2, r3, r3, r1
 8001e20:	091a      	lsrs	r2, r3, #4
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	1aca      	subs	r2, r1, r3
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d104      	bne.n	8001e3a <main+0x3a2>
          printf("\n[PERIODIC] Running communication verification...\n\r");
 8001e30:	481d      	ldr	r0, [pc, #116]	@ (8001ea8 <main+0x410>)
 8001e32:	f006 fe03 	bl	8008a3c <iprintf>
          test_cc1201_communication_verification();
 8001e36:	f7ff fc05 	bl	8001644 <test_cc1201_communication_verification>
        }
        
        // Every 30th test, run hardware diagnostic
        if (test_counter % 30 == 0) {
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <main+0x414>)
 8001e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8001e42:	091a      	lsrs	r2, r3, #4
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	1aca      	subs	r2, r1, r3
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	d110      	bne.n	8001e74 <main+0x3dc>
          printf("\n[PERIODIC] Running hardware diagnostic...\n\r");
 8001e52:	4817      	ldr	r0, [pc, #92]	@ (8001eb0 <main+0x418>)
 8001e54:	f006 fdf2 	bl	8008a3c <iprintf>
          CC1201_HardwareDiagnostic();
 8001e58:	f7fe fe9c 	bl	8000b94 <CC1201_HardwareDiagnostic>
 8001e5c:	e00a      	b.n	8001e74 <main+0x3dc>
        }
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 8001e5e:	793b      	ldrb	r3, [r7, #4]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4814      	ldr	r0, [pc, #80]	@ (8001eb4 <main+0x41c>)
 8001e64:	f006 fdea 	bl	8008a3c <iprintf>
        BSP_LED_Off(LED_GREEN);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 fcfb 	bl	8002864 <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f000 fcce 	bl	8002810 <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 8001e74:	f000 ff32 	bl	8002cdc <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]
    }
    
    HAL_Delay(100);
 8001e7a:	2064      	movs	r0, #100	@ 0x64
 8001e7c:	f000 ff3a 	bl	8002cf4 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8001e80:	e772      	b.n	8001d68 <main+0x2d0>
 8001e82:	bf00      	nop
 8001e84:	0800c128 	.word	0x0800c128
 8001e88:	0800c148 	.word	0x0800c148
 8001e8c:	240000b4 	.word	0x240000b4
 8001e90:	0800c178 	.word	0x0800c178
 8001e94:	0800c1ac 	.word	0x0800c1ac
 8001e98:	0800c1c0 	.word	0x0800c1c0
 8001e9c:	0800c1c4 	.word	0x0800c1c4
 8001ea0:	cccccccd 	.word	0xcccccccd
 8001ea4:	0800c1d0 	.word	0x0800c1d0
 8001ea8:	0800c204 	.word	0x0800c204
 8001eac:	88888889 	.word	0x88888889
 8001eb0:	0800c238 	.word	0x0800c238
 8001eb4:	0800c268 	.word	0x0800c268

08001eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09c      	sub	sp, #112	@ 0x70
 8001ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec2:	224c      	movs	r2, #76	@ 0x4c
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f006 fe0d 	bl	8008ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2220      	movs	r2, #32
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f006 fe07 	bl	8008ae6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f001 fea5 	bl	8003c28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b32      	ldr	r3, [pc, #200]	@ (8001fac <SystemClock_Config+0xf4>)
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	4a31      	ldr	r2, [pc, #196]	@ (8001fac <SystemClock_Config+0xf4>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001eee:	4b2f      	ldr	r3, [pc, #188]	@ (8001fac <SystemClock_Config+0xf4>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <SystemClock_Config+0xf8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f00:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <SystemClock_Config+0xf8>)
 8001f02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <SystemClock_Config+0xf8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f14:	bf00      	nop
 8001f16:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <SystemClock_Config+0xf8>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f22:	d1f8      	bne.n	8001f16 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f24:	2302      	movs	r3, #2
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f2c:	2340      	movs	r3, #64	@ 0x40
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f30:	2302      	movs	r3, #2
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f34:	2300      	movs	r3, #0
 8001f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f3c:	230a      	movs	r3, #10
 8001f3e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001f50:	2302      	movs	r3, #2
 8001f52:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fe9d 	bl	8003c9c <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001f68:	f000 f94a 	bl	8002200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6c:	233f      	movs	r3, #63	@ 0x3f
 8001f6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fadc 	bl	8004550 <HAL_RCC_ClockConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001f9e:	f000 f92f 	bl	8002200 <Error_Handler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3770      	adds	r7, #112	@ 0x70
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	58000400 	.word	0x58000400
 8001fb0:	58024800 	.word	0x58024800

08001fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fb8:	4b27      	ldr	r3, [pc, #156]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fba:	4a28      	ldr	r2, [pc, #160]	@ (800205c <MX_SPI2_Init+0xa8>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fc0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc6:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fce:	2203      	movs	r2, #3
 8001fd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fe0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001fe4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002004:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002006:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800200a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_SPI2_Init+0xa4>)
 800200e:	2200      	movs	r2, #0
 8002010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_SPI2_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002020:	2200      	movs	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <MX_SPI2_Init+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_SPI2_Init+0xa4>)
 800203e:	2200      	movs	r2, #0
 8002040:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_SPI2_Init+0xa4>)
 8002044:	f004 fc3c 	bl	80068c0 <HAL_SPI_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800204e:	f000 f8d7 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	240000b8 	.word	0x240000b8
 800205c:	40003800 	.word	0x40003800

08002060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	@ 0x30
 8002064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002076:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <MX_GPIO_Init+0x114>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207c:	4a3d      	ldr	r2, [pc, #244]	@ (8002174 <MX_GPIO_Init+0x114>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002086:	4b3b      	ldr	r3, [pc, #236]	@ (8002174 <MX_GPIO_Init+0x114>)
 8002088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <MX_GPIO_Init+0x114>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209a:	4a36      	ldr	r2, [pc, #216]	@ (8002174 <MX_GPIO_Init+0x114>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a4:	4b33      	ldr	r3, [pc, #204]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d0:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d6:	4a27      	ldr	r2, [pc, #156]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e0:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <MX_GPIO_Init+0x114>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <MX_GPIO_Init+0x114>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <MX_GPIO_Init+0x114>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002112:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <MX_GPIO_Init+0x114>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800211c:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <MX_GPIO_Init+0x114>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	2110      	movs	r1, #16
 800212e:	4812      	ldr	r0, [pc, #72]	@ (8002178 <MX_GPIO_Init+0x118>)
 8002130:	f001 fd46 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002134:	2310      	movs	r3, #16
 8002136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	4619      	mov	r1, r3
 800214a:	480b      	ldr	r0, [pc, #44]	@ (8002178 <MX_GPIO_Init+0x118>)
 800214c:	f001 fa66 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002150:	2310      	movs	r3, #16
 8002152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_GPIO_Init+0x11c>)
 8002166:	f001 fa59 	bl	800361c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	@ 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	58024400 	.word	0x58024400
 8002178:	58021000 	.word	0x58021000
 800217c:	58020c00 	.word	0x58020c00

08002180 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002186:	463b      	mov	r3, r7
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002192:	f000 ff21 	bl	8002fd8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002196:	2301      	movs	r3, #1
 8002198:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800219a:	2300      	movs	r3, #0
 800219c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80021a2:	231f      	movs	r3, #31
 80021a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80021a6:	2387      	movs	r3, #135	@ 0x87
 80021a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80021ae:	2300      	movs	r3, #0
 80021b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021c2:	463b      	mov	r3, r7
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 ff3f 	bl	8003048 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021ca:	2004      	movs	r0, #4
 80021cc:	f000 ff1c 	bl	8003008 <HAL_MPU_Enable>

}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <BSP_PB_Callback+0x24>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
  }
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	240000b4 	.word	0x240000b4

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <Error_Handler+0x8>

0800220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_MspInit+0x30>)
 8002214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002218:	4a08      	ldr	r2, [pc, #32]	@ (800223c <HAL_MspInit+0x30>)
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_MspInit+0x30>)
 8002224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	58024400 	.word	0x58024400

08002240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b0ba      	sub	sp, #232	@ 0xe8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	22c0      	movs	r2, #192	@ 0xc0
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f006 fc40 	bl	8008ae6 <memset>
  if(hspi->Instance==SPI2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a35      	ldr	r2, [pc, #212]	@ (8002340 <HAL_SPI_MspInit+0x100>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d163      	bne.n	8002338 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002270:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800227c:	2300      	movs	r3, #0
 800227e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	4618      	mov	r0, r3
 8002286:	f002 fcef 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002290:	f7ff ffb6 	bl	8002200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002294:	4b2b      	ldr	r3, [pc, #172]	@ (8002344 <HAL_SPI_MspInit+0x104>)
 8002296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800229a:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <HAL_SPI_MspInit+0x104>)
 800229c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022a4:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_SPI_MspInit+0x104>)
 80022a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_SPI_MspInit+0x104>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b8:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_SPI_MspInit+0x104>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_SPI_MspInit+0x104>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022de:	2301      	movs	r3, #1
 80022e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ea:	2305      	movs	r3, #5
 80022ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4814      	ldr	r0, [pc, #80]	@ (8002348 <HAL_SPI_MspInit+0x108>)
 80022f8:	f001 f990 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022fc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002300:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002316:	2305      	movs	r3, #5
 8002318:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002320:	4619      	mov	r1, r3
 8002322:	4809      	ldr	r0, [pc, #36]	@ (8002348 <HAL_SPI_MspInit+0x108>)
 8002324:	f001 f97a 	bl	800361c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2024      	movs	r0, #36	@ 0x24
 800232e:	f000 fe10 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002332:	2024      	movs	r0, #36	@ 0x24
 8002334:	f000 fe27 	bl	8002f86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002338:	bf00      	nop
 800233a:	37e8      	adds	r7, #232	@ 0xe8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40003800 	.word	0x40003800
 8002344:	58024400 	.word	0x58024400
 8002348:	58020400 	.word	0x58020400

0800234c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0b      	ldr	r2, [pc, #44]	@ (8002388 <HAL_SPI_MspDeInit+0x3c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10f      	bne.n	800237e <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_SPI_MspDeInit+0x40>)
 8002360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002364:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_SPI_MspDeInit+0x40>)
 8002366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800236a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800236e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002372:	4807      	ldr	r0, [pc, #28]	@ (8002390 <HAL_SPI_MspDeInit+0x44>)
 8002374:	f001 fb02 	bl	800397c <HAL_GPIO_DeInit>

    /* SPI2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8002378:	2024      	movs	r0, #36	@ 0x24
 800237a:	f000 fe12 	bl	8002fa2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40003800 	.word	0x40003800
 800238c:	58024400 	.word	0x58024400
 8002390:	58020400 	.word	0x58020400

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <NMI_Handler+0x4>

0800239c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <MemManage_Handler+0x4>

080023ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <UsageFault_Handler+0x4>

080023bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ea:	f000 fc63 	bl	8002cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <SPI2_IRQHandler+0x10>)
 80023fa:	f004 fee9 	bl	80071d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	240000b8 	.word	0x240000b8

08002408 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800240c:	2000      	movs	r0, #0
 800240e:	f000 faef 	bl	80029f0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}

08002416 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e00a      	b.n	800243e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002428:	f3af 8000 	nop.w
 800242c:	4601      	mov	r1, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	dbf0      	blt.n	8002428 <_read+0x12>
  }

  return len;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e009      	b.n	8002476 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	60ba      	str	r2, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fb34 	bl	8002ad8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	dbf1      	blt.n	8002462 <_write+0x12>
  }
  return len;
 800247e:	687b      	ldr	r3, [r7, #4]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_close>:

int _close(int file)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024b0:	605a      	str	r2, [r3, #4]
  return 0;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_isatty>:

int _isatty(int file)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <_sbrk+0x5c>)
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <_sbrk+0x60>)
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002504:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <_sbrk+0x64>)
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <_sbrk+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	429a      	cmp	r2, r3
 800251e:	d207      	bcs.n	8002530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002520:	f006 fb30 	bl	8008b84 <__errno>
 8002524:	4603      	mov	r3, r0
 8002526:	220c      	movs	r2, #12
 8002528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	e009      	b.n	8002544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002536:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <_sbrk+0x64>)
 8002540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	24080000 	.word	0x24080000
 8002550:	00000400 	.word	0x00000400
 8002554:	24000140 	.word	0x24000140
 8002558:	24000338 	.word	0x24000338

0800255c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002560:	4b43      	ldr	r3, [pc, #268]	@ (8002670 <SystemInit+0x114>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002566:	4a42      	ldr	r2, [pc, #264]	@ (8002670 <SystemInit+0x114>)
 8002568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800256c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002570:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <SystemInit+0x118>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b06      	cmp	r3, #6
 800257a:	d807      	bhi.n	800258c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800257c:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <SystemInit+0x118>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 030f 	bic.w	r3, r3, #15
 8002584:	4a3b      	ldr	r2, [pc, #236]	@ (8002674 <SystemInit+0x118>)
 8002586:	f043 0307 	orr.w	r3, r3, #7
 800258a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800258c:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <SystemInit+0x11c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a39      	ldr	r2, [pc, #228]	@ (8002678 <SystemInit+0x11c>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <SystemInit+0x11c>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800259e:	4b36      	ldr	r3, [pc, #216]	@ (8002678 <SystemInit+0x11c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4935      	ldr	r1, [pc, #212]	@ (8002678 <SystemInit+0x11c>)
 80025a4:	4b35      	ldr	r3, [pc, #212]	@ (800267c <SystemInit+0x120>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <SystemInit+0x118>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <SystemInit+0x118>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 030f 	bic.w	r3, r3, #15
 80025be:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <SystemInit+0x118>)
 80025c0:	f043 0307 	orr.w	r3, r3, #7
 80025c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <SystemInit+0x11c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <SystemInit+0x11c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <SystemInit+0x11c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <SystemInit+0x11c>)
 80025da:	4a29      	ldr	r2, [pc, #164]	@ (8002680 <SystemInit+0x124>)
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025de:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <SystemInit+0x11c>)
 80025e0:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <SystemInit+0x128>)
 80025e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <SystemInit+0x11c>)
 80025e6:	4a28      	ldr	r2, [pc, #160]	@ (8002688 <SystemInit+0x12c>)
 80025e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025ea:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <SystemInit+0x11c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025f0:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <SystemInit+0x11c>)
 80025f2:	4a25      	ldr	r2, [pc, #148]	@ (8002688 <SystemInit+0x12c>)
 80025f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <SystemInit+0x11c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <SystemInit+0x11c>)
 80025fe:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <SystemInit+0x12c>)
 8002600:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <SystemInit+0x11c>)
 8002604:	2200      	movs	r2, #0
 8002606:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <SystemInit+0x11c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1a      	ldr	r2, [pc, #104]	@ (8002678 <SystemInit+0x11c>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002612:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002614:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <SystemInit+0x11c>)
 8002616:	2200      	movs	r2, #0
 8002618:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800261a:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <SystemInit+0x130>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <SystemInit+0x134>)
 8002620:	4013      	ands	r3, r2
 8002622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002626:	d202      	bcs.n	800262e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <SystemInit+0x138>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800262e:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <SystemInit+0x11c>)
 8002630:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002634:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d113      	bne.n	8002664 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800263c:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <SystemInit+0x11c>)
 800263e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002642:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <SystemInit+0x11c>)
 8002644:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002648:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <SystemInit+0x13c>)
 800264e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002652:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <SystemInit+0x11c>)
 8002656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800265a:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <SystemInit+0x11c>)
 800265c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002660:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	52002000 	.word	0x52002000
 8002678:	58024400 	.word	0x58024400
 800267c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002680:	02020200 	.word	0x02020200
 8002684:	01ff0000 	.word	0x01ff0000
 8002688:	01010280 	.word	0x01010280
 800268c:	5c001000 	.word	0x5c001000
 8002690:	ffff0000 	.word	0xffff0000
 8002694:	51008108 	.word	0x51008108
 8002698:	52004000 	.word	0x52004000

0800269c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <ExitRun0Mode+0x2c>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a08      	ldr	r2, [pc, #32]	@ (80026c8 <ExitRun0Mode+0x2c>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80026ac:	bf00      	nop
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <ExitRun0Mode+0x2c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f9      	beq.n	80026ae <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	58024800 	.word	0x58024800

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002708 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80026d0:	f7ff ffe4 	bl	800269c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026d4:	f7ff ff42 	bl	800255c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d8:	480c      	ldr	r0, [pc, #48]	@ (800270c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026da:	490d      	ldr	r1, [pc, #52]	@ (8002710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f0:	4c0a      	ldr	r4, [pc, #40]	@ (800271c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fe:	f006 fa47 	bl	8008b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7ff f9c9 	bl	8001a98 <main>
  bx  lr
 8002706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002708:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800270c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002710:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002714:	0800c374 	.word	0x0800c374
  ldr r2, =_sbss
 8002718:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800271c:	24000334 	.word	0x24000334

08002720 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC3_IRQHandler>
	...

08002724 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	@ 0x30
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800272e:	2300      	movs	r3, #0
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <BSP_LED_Init+0x28>
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d006      	beq.n	800274c <BSP_LED_Init+0x28>
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d003      	beq.n	800274c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002744:	f06f 0301 	mvn.w	r3, #1
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274a:	e055      	b.n	80027f8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002752:	4b2c      	ldr	r3, [pc, #176]	@ (8002804 <BSP_LED_Init+0xe0>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002758:	4a2a      	ldr	r2, [pc, #168]	@ (8002804 <BSP_LED_Init+0xe0>)
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002762:	4b28      	ldr	r3, [pc, #160]	@ (8002804 <BSP_LED_Init+0xe0>)
 8002764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	e021      	b.n	80027b6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10f      	bne.n	8002798 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002778:	4b22      	ldr	r3, [pc, #136]	@ (8002804 <BSP_LED_Init+0xe0>)
 800277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277e:	4a21      	ldr	r2, [pc, #132]	@ (8002804 <BSP_LED_Init+0xe0>)
 8002780:	f043 0310 	orr.w	r3, r3, #16
 8002784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002788:	4b1e      	ldr	r3, [pc, #120]	@ (8002804 <BSP_LED_Init+0xe0>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	e00e      	b.n	80027b6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <BSP_LED_Init+0xe0>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800279e:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <BSP_LED_Init+0xe0>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a8:	4b16      	ldr	r3, [pc, #88]	@ (8002804 <BSP_LED_Init+0xe0>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <BSP_LED_Init+0xe4>)
 80027ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027be:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <BSP_LED_Init+0xe8>)
 80027d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d4:	f107 0218 	add.w	r2, r7, #24
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 ff1e 	bl	800361c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4a0a      	ldr	r2, [pc, #40]	@ (800280c <BSP_LED_Init+0xe8>)
 80027e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <BSP_LED_Init+0xe4>)
 80027ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f0:	2200      	movs	r2, #0
 80027f2:	4619      	mov	r1, r3
 80027f4:	f001 f9e4 	bl	8003bc0 <HAL_GPIO_WritePin>
  }

  return ret;
 80027f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3730      	adds	r7, #48	@ 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	58024400 	.word	0x58024400
 8002808:	0800c30c 	.word	0x0800c30c
 800280c:	2400000c 	.word	0x2400000c

08002810 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <BSP_LED_On+0x28>
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d006      	beq.n	8002838 <BSP_LED_On+0x28>
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d003      	beq.n	8002838 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002830:	f06f 0301 	mvn.w	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e00b      	b.n	8002850 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	4a08      	ldr	r2, [pc, #32]	@ (800285c <BSP_LED_On+0x4c>)
 800283c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <BSP_LED_On+0x50>)
 8002844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002848:	2201      	movs	r2, #1
 800284a:	4619      	mov	r1, r3
 800284c:	f001 f9b8 	bl	8003bc0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2400000c 	.word	0x2400000c
 8002860:	0800c30c 	.word	0x0800c30c

08002864 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <BSP_LED_Off+0x28>
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d006      	beq.n	800288c <BSP_LED_Off+0x28>
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d003      	beq.n	800288c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002884:	f06f 0301 	mvn.w	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e00b      	b.n	80028a4 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <BSP_LED_Off+0x4c>)
 8002890:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4a07      	ldr	r2, [pc, #28]	@ (80028b4 <BSP_LED_Off+0x50>)
 8002898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800289c:	2200      	movs	r2, #0
 800289e:	4619      	mov	r1, r3
 80028a0:	f001 f98e 	bl	8003bc0 <HAL_GPIO_WritePin>
  }

  return ret;
 80028a4:	68fb      	ldr	r3, [r7, #12]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2400000c 	.word	0x2400000c
 80028b4:	0800c30c 	.word	0x0800c30c

080028b8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <BSP_LED_Toggle+0x28>
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d006      	beq.n	80028e0 <BSP_LED_Toggle+0x28>
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d003      	beq.n	80028e0 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028d8:	f06f 0301 	mvn.w	r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e00b      	b.n	80028f8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	4a08      	ldr	r2, [pc, #32]	@ (8002904 <BSP_LED_Toggle+0x4c>)
 80028e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4907      	ldr	r1, [pc, #28]	@ (8002908 <BSP_LED_Toggle+0x50>)
 80028ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f001 f97d 	bl	8003bf2 <HAL_GPIO_TogglePin>
  }

  return ret;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2400000c 	.word	0x2400000c
 8002908:	0800c30c 	.word	0x0800c30c

0800290c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	460a      	mov	r2, r1
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	4613      	mov	r3, r2
 800291a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800291c:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <BSP_PB_Init+0xcc>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002922:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <BSP_PB_Init+0xcc>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <BSP_PB_Init+0xcc>)
 800292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800293a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800293e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002940:	2302      	movs	r3, #2
 8002942:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002948:	79bb      	ldrb	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10c      	bne.n	8002968 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	4a21      	ldr	r2, [pc, #132]	@ (80029dc <BSP_PB_Init+0xd0>)
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	f107 020c 	add.w	r2, r7, #12
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fe5b 	bl	800361c <HAL_GPIO_Init>
 8002966:	e031      	b.n	80029cc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002968:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800296c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4a1a      	ldr	r2, [pc, #104]	@ (80029dc <BSP_PB_Init+0xd0>)
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	f107 020c 	add.w	r2, r7, #12
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fe4d 	bl	800361c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4a16      	ldr	r2, [pc, #88]	@ (80029e0 <BSP_PB_Init+0xd4>)
 8002988:	441a      	add	r2, r3
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4915      	ldr	r1, [pc, #84]	@ (80029e4 <BSP_PB_Init+0xd8>)
 800298e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 fdfc 	bl	8003592 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <BSP_PB_Init+0xd4>)
 80029a0:	1898      	adds	r0, r3, r2
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	4a10      	ldr	r2, [pc, #64]	@ (80029e8 <BSP_PB_Init+0xdc>)
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	461a      	mov	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f000 fdd1 	bl	8003554 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80029b2:	2028      	movs	r0, #40	@ 0x28
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <BSP_PB_Init+0xe0>)
 80029b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029bc:	2200      	movs	r2, #0
 80029be:	4619      	mov	r1, r3
 80029c0:	f000 fac7 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80029c4:	2328      	movs	r3, #40	@ 0x28
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fadd 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	24000018 	.word	0x24000018
 80029e0:	24000144 	.word	0x24000144
 80029e4:	0800c314 	.word	0x0800c314
 80029e8:	2400001c 	.word	0x2400001c
 80029ec:	24000020 	.word	0x24000020

080029f0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <BSP_PB_IRQHandler+0x20>)
 8002a00:	4413      	add	r3, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fdda 	bl	80035bc <HAL_EXTI_IRQHandler>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	24000144 	.word	0x24000144

08002a14 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a2a:	f06f 0301 	mvn.w	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e018      	b.n	8002a64 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2294      	movs	r2, #148	@ 0x94
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <BSP_COM_Init+0x5c>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f86e 	bl	8002b20 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2294      	movs	r2, #148	@ 0x94
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	4a08      	ldr	r2, [pc, #32]	@ (8002a70 <BSP_COM_Init+0x5c>)
 8002a4e:	4413      	add	r3, r2
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f80e 	bl	8002a74 <MX_USART3_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002a5e:	f06f 0303 	mvn.w	r3, #3
 8002a62:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2400014c 	.word	0x2400014c

08002a74 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <MX_USART3_Init+0x60>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	220c      	movs	r2, #12
 8002a92:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	895b      	ldrh	r3, [r3, #10]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	891b      	ldrh	r3, [r3, #8]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	899b      	ldrh	r3, [r3, #12]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ac0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f004 fe87 	bl	80077d6 <HAL_UART_Init>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24000008 	.word	0x24000008

08002ad8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002ae0:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <__io_putchar+0x30>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2394      	movs	r3, #148	@ 0x94
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	4a07      	ldr	r2, [pc, #28]	@ (8002b0c <__io_putchar+0x34>)
 8002aee:	1898      	adds	r0, r3, r2
 8002af0:	1d39      	adds	r1, r7, #4
 8002af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002af6:	2201      	movs	r2, #1
 8002af8:	f004 fec7 	bl	800788a <HAL_UART_Transmit>
  return ch;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	240001e0 	.word	0x240001e0
 8002b0c:	2400014c 	.word	0x2400014c

08002b10 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7ff fb5f 	bl	80021d8 <BSP_PB_Callback>
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002b28:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2e:	4a26      	ldr	r2, [pc, #152]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b30:	f043 0308 	orr.w	r3, r3, #8
 8002b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b38:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b56:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002b64:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b6a:	4a17      	ldr	r2, [pc, #92]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b74:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <COM1_MspInit+0xa8>)
 8002b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b86:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002b94:	2307      	movs	r3, #7
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	480b      	ldr	r0, [pc, #44]	@ (8002bcc <COM1_MspInit+0xac>)
 8002ba0:	f000 fd3c 	bl	800361c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ba8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002bae:	2307      	movs	r3, #7
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4804      	ldr	r0, [pc, #16]	@ (8002bcc <COM1_MspInit+0xac>)
 8002bba:	f000 fd2f 	bl	800361c <HAL_GPIO_Init>
}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	@ 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	58020c00 	.word	0x58020c00

08002bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	f000 f9b0 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bdc:	f001 fe6e 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <HAL_Init+0x68>)
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	4913      	ldr	r1, [pc, #76]	@ (8002c3c <HAL_Init+0x6c>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <HAL_Init+0x68>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	4a0e      	ldr	r2, [pc, #56]	@ (8002c3c <HAL_Init+0x6c>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	4a0b      	ldr	r2, [pc, #44]	@ (8002c40 <HAL_Init+0x70>)
 8002c12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c14:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <HAL_Init+0x74>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f000 f814 	bl	8002c48 <HAL_InitTick>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e002      	b.n	8002c30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c2a:	f7ff faef 	bl	800220c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	58024400 	.word	0x58024400
 8002c3c:	0800c2fc 	.word	0x0800c2fc
 8002c40:	24000004 	.word	0x24000004
 8002c44:	24000000 	.word	0x24000000

08002c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c50:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_InitTick+0x60>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e021      	b.n	8002ca0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c5c:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <HAL_InitTick+0x64>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_InitTick+0x60>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f9a3 	bl	8002fbe <HAL_SYSTICK_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00e      	b.n	8002ca0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	d80a      	bhi.n	8002c9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f000 f95f 	bl	8002f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c94:	4a06      	ldr	r2, [pc, #24]	@ (8002cb0 <HAL_InitTick+0x68>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	24000028 	.word	0x24000028
 8002cac:	24000000 	.word	0x24000000
 8002cb0:	24000024 	.word	0x24000024

08002cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_IncTick+0x20>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_IncTick+0x24>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_IncTick+0x24>)
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	24000028 	.word	0x24000028
 8002cd8:	240001e4 	.word	0x240001e4

08002cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_GetTick+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	240001e4 	.word	0x240001e4

08002cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7ff ffee 	bl	8002cdc <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d005      	beq.n	8002d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <HAL_Delay+0x44>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d1a:	bf00      	nop
 8002d1c:	f7ff ffde 	bl	8002cdc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d8f7      	bhi.n	8002d1c <HAL_Delay+0x28>
  {
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	24000028 	.word	0x24000028

08002d3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <HAL_GetREVID+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0c1b      	lsrs	r3, r3, #16
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	5c001000 	.word	0x5c001000

08002d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <__NVIC_SetPriorityGrouping+0x40>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	@ (8002d94 <__NVIC_SetPriorityGrouping+0x40>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00
 8002d98:	05fa0000 	.word	0x05fa0000

08002d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <__NVIC_GetPriorityGrouping+0x18>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0307 	and.w	r3, r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4907      	ldr	r1, [pc, #28]	@ (8002df0 <__NVIC_EnableIRQ+0x38>)
 8002dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fa00 f202 	lsl.w	r2, r0, r2
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db12      	blt.n	8002e2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	490a      	ldr	r1, [pc, #40]	@ (8002e38 <__NVIC_DisableIRQ+0x44>)
 8002e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	3320      	adds	r3, #32
 8002e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e20:	f3bf 8f4f 	dsb	sy
}
 8002e24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e26:	f3bf 8f6f 	isb	sy
}
 8002e2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff05 	bl	8002d54 <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f60:	f7ff ff1c 	bl	8002d9c <__NVIC_GetPriorityGrouping>
 8002f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f7ff ff90 	bl	8002e90 <NVIC_EncodePriority>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff5f 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff0f 	bl	8002db8 <__NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff1f 	bl	8002df4 <__NVIC_DisableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff96 	bl	8002ef8 <SysTick_Config>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002fdc:	f3bf 8f5f 	dmb	sy
}
 8002fe0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002fe2:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <HAL_MPU_Disable+0x28>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	4a06      	ldr	r2, [pc, #24]	@ (8003000 <HAL_MPU_Disable+0x28>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_MPU_Disable+0x2c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	605a      	str	r2, [r3, #4]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000ed00 	.word	0xe000ed00
 8003004:	e000ed90 	.word	0xe000ed90

08003008 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003010:	4a0b      	ldr	r2, [pc, #44]	@ (8003040 <HAL_MPU_Enable+0x38>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800301a:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_MPU_Enable+0x3c>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <HAL_MPU_Enable+0x3c>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003024:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003026:	f3bf 8f4f 	dsb	sy
}
 800302a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800302c:	f3bf 8f6f 	isb	sy
}
 8003030:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000ed90 	.word	0xe000ed90
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	785a      	ldrb	r2, [r3, #1]
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_MPU_ConfigRegion+0x7c>)
 8003056:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003058:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <HAL_MPU_ConfigRegion+0x7c>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4a19      	ldr	r2, [pc, #100]	@ (80030c4 <HAL_MPU_ConfigRegion+0x7c>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003064:	4a17      	ldr	r2, [pc, #92]	@ (80030c4 <HAL_MPU_ConfigRegion+0x7c>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7b1b      	ldrb	r3, [r3, #12]
 8003070:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7adb      	ldrb	r3, [r3, #11]
 8003076:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003078:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7a9b      	ldrb	r3, [r3, #10]
 800307e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003080:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7b5b      	ldrb	r3, [r3, #13]
 8003086:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003088:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7b9b      	ldrb	r3, [r3, #14]
 800308e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003090:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7bdb      	ldrb	r3, [r3, #15]
 8003096:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003098:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7a5b      	ldrb	r3, [r3, #9]
 800309e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7a1b      	ldrb	r3, [r3, #8]
 80030a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030b0:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030b4:	6113      	str	r3, [r2, #16]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000ed90 	.word	0xe000ed90

080030c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e237      	b.n	800354a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d004      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2280      	movs	r2, #128	@ 0x80
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e22c      	b.n	800354a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003268 <HAL_DMA_Abort_IT+0x1a0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d04a      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5b      	ldr	r2, [pc, #364]	@ (800326c <HAL_DMA_Abort_IT+0x1a4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d045      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a59      	ldr	r2, [pc, #356]	@ (8003270 <HAL_DMA_Abort_IT+0x1a8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d040      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a58      	ldr	r2, [pc, #352]	@ (8003274 <HAL_DMA_Abort_IT+0x1ac>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d03b      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a56      	ldr	r2, [pc, #344]	@ (8003278 <HAL_DMA_Abort_IT+0x1b0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d036      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a55      	ldr	r2, [pc, #340]	@ (800327c <HAL_DMA_Abort_IT+0x1b4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d031      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a53      	ldr	r2, [pc, #332]	@ (8003280 <HAL_DMA_Abort_IT+0x1b8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02c      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <HAL_DMA_Abort_IT+0x1bc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d027      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a50      	ldr	r2, [pc, #320]	@ (8003288 <HAL_DMA_Abort_IT+0x1c0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a4f      	ldr	r2, [pc, #316]	@ (800328c <HAL_DMA_Abort_IT+0x1c4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d01d      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4d      	ldr	r2, [pc, #308]	@ (8003290 <HAL_DMA_Abort_IT+0x1c8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4c      	ldr	r2, [pc, #304]	@ (8003294 <HAL_DMA_Abort_IT+0x1cc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4a      	ldr	r2, [pc, #296]	@ (8003298 <HAL_DMA_Abort_IT+0x1d0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a49      	ldr	r2, [pc, #292]	@ (800329c <HAL_DMA_Abort_IT+0x1d4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a47      	ldr	r2, [pc, #284]	@ (80032a0 <HAL_DMA_Abort_IT+0x1d8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_DMA_Abort_IT+0xc8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <HAL_DMA_Abort_IT+0x1dc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_DMA_Abort_IT+0xcc>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_DMA_Abort_IT+0xce>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8086 	beq.w	80032a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2204      	movs	r2, #4
 80031a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003268 <HAL_DMA_Abort_IT+0x1a0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d04a      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2e      	ldr	r2, [pc, #184]	@ (800326c <HAL_DMA_Abort_IT+0x1a4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d045      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003270 <HAL_DMA_Abort_IT+0x1a8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d040      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003274 <HAL_DMA_Abort_IT+0x1ac>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d03b      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a29      	ldr	r2, [pc, #164]	@ (8003278 <HAL_DMA_Abort_IT+0x1b0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d036      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a28      	ldr	r2, [pc, #160]	@ (800327c <HAL_DMA_Abort_IT+0x1b4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d031      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a26      	ldr	r2, [pc, #152]	@ (8003280 <HAL_DMA_Abort_IT+0x1b8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d02c      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a25      	ldr	r2, [pc, #148]	@ (8003284 <HAL_DMA_Abort_IT+0x1bc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d027      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a23      	ldr	r2, [pc, #140]	@ (8003288 <HAL_DMA_Abort_IT+0x1c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d022      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a22      	ldr	r2, [pc, #136]	@ (800328c <HAL_DMA_Abort_IT+0x1c4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01d      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a20      	ldr	r2, [pc, #128]	@ (8003290 <HAL_DMA_Abort_IT+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d018      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1f      	ldr	r2, [pc, #124]	@ (8003294 <HAL_DMA_Abort_IT+0x1cc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <HAL_DMA_Abort_IT+0x1d0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1c      	ldr	r2, [pc, #112]	@ (800329c <HAL_DMA_Abort_IT+0x1d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1a      	ldr	r2, [pc, #104]	@ (80032a0 <HAL_DMA_Abort_IT+0x1d8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_DMA_Abort_IT+0x17c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a19      	ldr	r2, [pc, #100]	@ (80032a4 <HAL_DMA_Abort_IT+0x1dc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <HAL_DMA_Abort_IT+0x18e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e178      	b.n	8003548 <HAL_DMA_Abort_IT+0x480>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e16f      	b.n	8003548 <HAL_DMA_Abort_IT+0x480>
 8003268:	40020010 	.word	0x40020010
 800326c:	40020028 	.word	0x40020028
 8003270:	40020040 	.word	0x40020040
 8003274:	40020058 	.word	0x40020058
 8003278:	40020070 	.word	0x40020070
 800327c:	40020088 	.word	0x40020088
 8003280:	400200a0 	.word	0x400200a0
 8003284:	400200b8 	.word	0x400200b8
 8003288:	40020410 	.word	0x40020410
 800328c:	40020428 	.word	0x40020428
 8003290:	40020440 	.word	0x40020440
 8003294:	40020458 	.word	0x40020458
 8003298:	40020470 	.word	0x40020470
 800329c:	40020488 	.word	0x40020488
 80032a0:	400204a0 	.word	0x400204a0
 80032a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 020e 	bic.w	r2, r2, #14
 80032b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003470 <HAL_DMA_Abort_IT+0x3a8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d04a      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003474 <HAL_DMA_Abort_IT+0x3ac>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d045      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a69      	ldr	r2, [pc, #420]	@ (8003478 <HAL_DMA_Abort_IT+0x3b0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d040      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a68      	ldr	r2, [pc, #416]	@ (800347c <HAL_DMA_Abort_IT+0x3b4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d03b      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a66      	ldr	r2, [pc, #408]	@ (8003480 <HAL_DMA_Abort_IT+0x3b8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d036      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a65      	ldr	r2, [pc, #404]	@ (8003484 <HAL_DMA_Abort_IT+0x3bc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d031      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a63      	ldr	r2, [pc, #396]	@ (8003488 <HAL_DMA_Abort_IT+0x3c0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d02c      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a62      	ldr	r2, [pc, #392]	@ (800348c <HAL_DMA_Abort_IT+0x3c4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d027      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a60      	ldr	r2, [pc, #384]	@ (8003490 <HAL_DMA_Abort_IT+0x3c8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d022      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5f      	ldr	r2, [pc, #380]	@ (8003494 <HAL_DMA_Abort_IT+0x3cc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d01d      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5d      	ldr	r2, [pc, #372]	@ (8003498 <HAL_DMA_Abort_IT+0x3d0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d018      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a5c      	ldr	r2, [pc, #368]	@ (800349c <HAL_DMA_Abort_IT+0x3d4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5a      	ldr	r2, [pc, #360]	@ (80034a0 <HAL_DMA_Abort_IT+0x3d8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00e      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a59      	ldr	r2, [pc, #356]	@ (80034a4 <HAL_DMA_Abort_IT+0x3dc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a57      	ldr	r2, [pc, #348]	@ (80034a8 <HAL_DMA_Abort_IT+0x3e0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_DMA_Abort_IT+0x290>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a56      	ldr	r2, [pc, #344]	@ (80034ac <HAL_DMA_Abort_IT+0x3e4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <HAL_DMA_Abort_IT+0x2a2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e007      	b.n	800337a <HAL_DMA_Abort_IT+0x2b2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a3c      	ldr	r2, [pc, #240]	@ (8003470 <HAL_DMA_Abort_IT+0x3a8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d072      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a3a      	ldr	r2, [pc, #232]	@ (8003474 <HAL_DMA_Abort_IT+0x3ac>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d06d      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a39      	ldr	r2, [pc, #228]	@ (8003478 <HAL_DMA_Abort_IT+0x3b0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d068      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a37      	ldr	r2, [pc, #220]	@ (800347c <HAL_DMA_Abort_IT+0x3b4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d063      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a36      	ldr	r2, [pc, #216]	@ (8003480 <HAL_DMA_Abort_IT+0x3b8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d05e      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a34      	ldr	r2, [pc, #208]	@ (8003484 <HAL_DMA_Abort_IT+0x3bc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d059      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a33      	ldr	r2, [pc, #204]	@ (8003488 <HAL_DMA_Abort_IT+0x3c0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d054      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a31      	ldr	r2, [pc, #196]	@ (800348c <HAL_DMA_Abort_IT+0x3c4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04f      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a30      	ldr	r2, [pc, #192]	@ (8003490 <HAL_DMA_Abort_IT+0x3c8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04a      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003494 <HAL_DMA_Abort_IT+0x3cc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d045      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003498 <HAL_DMA_Abort_IT+0x3d0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_DMA_Abort_IT+0x3d4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03b      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2a      	ldr	r2, [pc, #168]	@ (80034a0 <HAL_DMA_Abort_IT+0x3d8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d036      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <HAL_DMA_Abort_IT+0x3dc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a27      	ldr	r2, [pc, #156]	@ (80034a8 <HAL_DMA_Abort_IT+0x3e0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d02c      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a25      	ldr	r2, [pc, #148]	@ (80034ac <HAL_DMA_Abort_IT+0x3e4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d027      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <HAL_DMA_Abort_IT+0x3e8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_DMA_Abort_IT+0x3ec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01d      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	@ (80034b8 <HAL_DMA_Abort_IT+0x3f0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_DMA_Abort_IT+0x3f4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <HAL_DMA_Abort_IT+0x3f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1c      	ldr	r2, [pc, #112]	@ (80034c4 <HAL_DMA_Abort_IT+0x3fc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1b      	ldr	r2, [pc, #108]	@ (80034c8 <HAL_DMA_Abort_IT+0x400>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_DMA_Abort_IT+0x3a2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	@ (80034cc <HAL_DMA_Abort_IT+0x404>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d132      	bne.n	80034d0 <HAL_DMA_Abort_IT+0x408>
 800346a:	2301      	movs	r3, #1
 800346c:	e031      	b.n	80034d2 <HAL_DMA_Abort_IT+0x40a>
 800346e:	bf00      	nop
 8003470:	40020010 	.word	0x40020010
 8003474:	40020028 	.word	0x40020028
 8003478:	40020040 	.word	0x40020040
 800347c:	40020058 	.word	0x40020058
 8003480:	40020070 	.word	0x40020070
 8003484:	40020088 	.word	0x40020088
 8003488:	400200a0 	.word	0x400200a0
 800348c:	400200b8 	.word	0x400200b8
 8003490:	40020410 	.word	0x40020410
 8003494:	40020428 	.word	0x40020428
 8003498:	40020440 	.word	0x40020440
 800349c:	40020458 	.word	0x40020458
 80034a0:	40020470 	.word	0x40020470
 80034a4:	40020488 	.word	0x40020488
 80034a8:	400204a0 	.word	0x400204a0
 80034ac:	400204b8 	.word	0x400204b8
 80034b0:	58025408 	.word	0x58025408
 80034b4:	5802541c 	.word	0x5802541c
 80034b8:	58025430 	.word	0x58025430
 80034bc:	58025444 	.word	0x58025444
 80034c0:	58025458 	.word	0x58025458
 80034c4:	5802546c 	.word	0x5802546c
 80034c8:	58025480 	.word	0x58025480
 80034cc:	58025494 	.word	0x58025494
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d028      	beq.n	8003528 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003504:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003518:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800351c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003526:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop

08003554 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	460b      	mov	r3, r1
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00a      	b.n	8003586 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003570:	7afb      	ldrb	r3, [r7, #11]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	605a      	str	r2, [r3, #4]
      break;
 800357c:	e002      	b.n	8003584 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
      break;
 8003582:	bf00      	nop
  }

  return status;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e003      	b.n	80035ae <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2201      	movs	r2, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	011a      	lsls	r2, r3, #4
 80035e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <HAL_EXTI_IRQHandler+0x5c>)
 80035e6:	4413      	add	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4798      	blx	r3
    }
  }
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	58000088 	.word	0x58000088

0800361c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	@ 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800362a:	4b89      	ldr	r3, [pc, #548]	@ (8003850 <HAL_GPIO_Init+0x234>)
 800362c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800362e:	e194      	b.n	800395a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8186 	beq.w	8003954 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d005      	beq.n	8003660 <HAL_GPIO_Init+0x44>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d130      	bne.n	80036c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003696:	2201      	movs	r2, #1
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0201 	and.w	r2, r3, #1
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d017      	beq.n	80036fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d123      	bne.n	8003752 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	08da      	lsrs	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	220f      	movs	r2, #15
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80e0 	beq.w	8003954 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003794:	4b2f      	ldr	r3, [pc, #188]	@ (8003854 <HAL_GPIO_Init+0x238>)
 8003796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800379a:	4a2e      	ldr	r2, [pc, #184]	@ (8003854 <HAL_GPIO_Init+0x238>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80037a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003854 <HAL_GPIO_Init+0x238>)
 80037a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037b2:	4a29      	ldr	r2, [pc, #164]	@ (8003858 <HAL_GPIO_Init+0x23c>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a20      	ldr	r2, [pc, #128]	@ (800385c <HAL_GPIO_Init+0x240>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d052      	beq.n	8003884 <HAL_GPIO_Init+0x268>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <HAL_GPIO_Init+0x244>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d031      	beq.n	800384a <HAL_GPIO_Init+0x22e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003864 <HAL_GPIO_Init+0x248>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d02b      	beq.n	8003846 <HAL_GPIO_Init+0x22a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003868 <HAL_GPIO_Init+0x24c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d025      	beq.n	8003842 <HAL_GPIO_Init+0x226>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <HAL_GPIO_Init+0x250>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01f      	beq.n	800383e <HAL_GPIO_Init+0x222>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_GPIO_Init+0x254>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d019      	beq.n	800383a <HAL_GPIO_Init+0x21e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1a      	ldr	r2, [pc, #104]	@ (8003874 <HAL_GPIO_Init+0x258>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0x21a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a19      	ldr	r2, [pc, #100]	@ (8003878 <HAL_GPIO_Init+0x25c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00d      	beq.n	8003832 <HAL_GPIO_Init+0x216>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_GPIO_Init+0x260>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <HAL_GPIO_Init+0x212>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <HAL_GPIO_Init+0x264>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_GPIO_Init+0x20e>
 8003826:	2309      	movs	r3, #9
 8003828:	e02d      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 800382a:	230a      	movs	r3, #10
 800382c:	e02b      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 800382e:	2308      	movs	r3, #8
 8003830:	e029      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 8003832:	2307      	movs	r3, #7
 8003834:	e027      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 8003836:	2306      	movs	r3, #6
 8003838:	e025      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 800383a:	2305      	movs	r3, #5
 800383c:	e023      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 800383e:	2304      	movs	r3, #4
 8003840:	e021      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 8003842:	2303      	movs	r3, #3
 8003844:	e01f      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 8003846:	2302      	movs	r3, #2
 8003848:	e01d      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 800384a:	2301      	movs	r3, #1
 800384c:	e01b      	b.n	8003886 <HAL_GPIO_Init+0x26a>
 800384e:	bf00      	nop
 8003850:	58000080 	.word	0x58000080
 8003854:	58024400 	.word	0x58024400
 8003858:	58000400 	.word	0x58000400
 800385c:	58020000 	.word	0x58020000
 8003860:	58020400 	.word	0x58020400
 8003864:	58020800 	.word	0x58020800
 8003868:	58020c00 	.word	0x58020c00
 800386c:	58021000 	.word	0x58021000
 8003870:	58021400 	.word	0x58021400
 8003874:	58021800 	.word	0x58021800
 8003878:	58021c00 	.word	0x58021c00
 800387c:	58022000 	.word	0x58022000
 8003880:	58022400 	.word	0x58022400
 8003884:	2300      	movs	r3, #0
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	f002 0203 	and.w	r2, r2, #3
 800388c:	0092      	lsls	r2, r2, #2
 800388e:	4093      	lsls	r3, r2
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003896:	4938      	ldr	r1, [pc, #224]	@ (8003978 <HAL_GPIO_Init+0x35c>)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3302      	adds	r3, #2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	3301      	adds	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	f47f ae63 	bne.w	8003630 <HAL_GPIO_Init+0x14>
  }
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3724      	adds	r7, #36	@ 0x24
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	58000400 	.word	0x58000400

0800397c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800398a:	4b75      	ldr	r3, [pc, #468]	@ (8003b60 <HAL_GPIO_DeInit+0x1e4>)
 800398c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800398e:	e0d9      	b.n	8003b44 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003990:	2201      	movs	r2, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80cc 	beq.w	8003b3e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b64 <HAL_GPIO_DeInit+0x1e8>)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a67      	ldr	r2, [pc, #412]	@ (8003b68 <HAL_GPIO_DeInit+0x1ec>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d037      	beq.n	8003a40 <HAL_GPIO_DeInit+0xc4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a66      	ldr	r2, [pc, #408]	@ (8003b6c <HAL_GPIO_DeInit+0x1f0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d031      	beq.n	8003a3c <HAL_GPIO_DeInit+0xc0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a65      	ldr	r2, [pc, #404]	@ (8003b70 <HAL_GPIO_DeInit+0x1f4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d02b      	beq.n	8003a38 <HAL_GPIO_DeInit+0xbc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a64      	ldr	r2, [pc, #400]	@ (8003b74 <HAL_GPIO_DeInit+0x1f8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d025      	beq.n	8003a34 <HAL_GPIO_DeInit+0xb8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a63      	ldr	r2, [pc, #396]	@ (8003b78 <HAL_GPIO_DeInit+0x1fc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01f      	beq.n	8003a30 <HAL_GPIO_DeInit+0xb4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a62      	ldr	r2, [pc, #392]	@ (8003b7c <HAL_GPIO_DeInit+0x200>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d019      	beq.n	8003a2c <HAL_GPIO_DeInit+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a61      	ldr	r2, [pc, #388]	@ (8003b80 <HAL_GPIO_DeInit+0x204>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_GPIO_DeInit+0xac>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_GPIO_DeInit+0x208>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00d      	beq.n	8003a24 <HAL_GPIO_DeInit+0xa8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b88 <HAL_GPIO_DeInit+0x20c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <HAL_GPIO_DeInit+0xa4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a5e      	ldr	r2, [pc, #376]	@ (8003b8c <HAL_GPIO_DeInit+0x210>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_GPIO_DeInit+0xa0>
 8003a18:	2309      	movs	r3, #9
 8003a1a:	e012      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a1c:	230a      	movs	r3, #10
 8003a1e:	e010      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a20:	2308      	movs	r3, #8
 8003a22:	e00e      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a24:	2307      	movs	r3, #7
 8003a26:	e00c      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a28:	2306      	movs	r3, #6
 8003a2a:	e00a      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a2c:	2305      	movs	r3, #5
 8003a2e:	e008      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e006      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a34:	2303      	movs	r3, #3
 8003a36:	e004      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e002      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_GPIO_DeInit+0xc6>
 8003a40:	2300      	movs	r3, #0
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	f002 0203 	and.w	r2, r2, #3
 8003a48:	0092      	lsls	r2, r2, #2
 8003a4a:	4093      	lsls	r3, r2
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d136      	bne.n	8003ac0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	401a      	ands	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a8e:	4013      	ands	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003aa2:	4a30      	ldr	r2, [pc, #192]	@ (8003b64 <HAL_GPIO_DeInit+0x1e8>)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	482c      	ldr	r0, [pc, #176]	@ (8003b64 <HAL_GPIO_DeInit+0x1e8>)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	400a      	ands	r2, r1
 8003aba:	3302      	adds	r3, #2
 8003abc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2103      	movs	r1, #3
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	08d2      	lsrs	r2, r2, #3
 8003af4:	4019      	ands	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2103      	movs	r1, #3
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	401a      	ands	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2103      	movs	r1, #3
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f af1f 	bne.w	8003990 <HAL_GPIO_DeInit+0x14>
  }
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	58000080 	.word	0x58000080
 8003b64:	58000400 	.word	0x58000400
 8003b68:	58020000 	.word	0x58020000
 8003b6c:	58020400 	.word	0x58020400
 8003b70:	58020800 	.word	0x58020800
 8003b74:	58020c00 	.word	0x58020c00
 8003b78:	58021000 	.word	0x58021000
 8003b7c:	58021400 	.word	0x58021400
 8003b80:	58021800 	.word	0x58021800
 8003b84:	58021c00 	.word	0x58021c00
 8003b88:	58022000 	.word	0x58022000
 8003b8c:	58022400 	.word	0x58022400

08003b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	887b      	ldrh	r3, [r7, #2]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e001      	b.n	8003bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c04:	887a      	ldrh	r2, [r7, #2]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	041a      	lsls	r2, r3, #16
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	400b      	ands	r3, r1
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003c30:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <HAL_PWREx_ConfigSupply+0x70>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d00a      	beq.n	8003c52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c3c:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <HAL_PWREx_ConfigSupply+0x70>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d001      	beq.n	8003c4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e01f      	b.n	8003c8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e01d      	b.n	8003c8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c52:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <HAL_PWREx_ConfigSupply+0x70>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 0207 	bic.w	r2, r3, #7
 8003c5a:	490f      	ldr	r1, [pc, #60]	@ (8003c98 <HAL_PWREx_ConfigSupply+0x70>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c62:	f7ff f83b 	bl	8002cdc <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c68:	e009      	b.n	8003c7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c6a:	f7ff f837 	bl	8002cdc <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c78:	d901      	bls.n	8003c7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e007      	b.n	8003c8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <HAL_PWREx_ConfigSupply+0x70>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8a:	d1ee      	bne.n	8003c6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	58024800 	.word	0x58024800

08003c9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	@ 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f000 bc48 	b.w	8004540 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8088 	beq.w	8003dce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cbe:	4b99      	ldr	r3, [pc, #612]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cc8:	4b96      	ldr	r3, [pc, #600]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d007      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x48>
 8003cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd6:	2b18      	cmp	r3, #24
 8003cd8:	d111      	bne.n	8003cfe <HAL_RCC_OscConfig+0x62>
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d06d      	beq.n	8003dcc <HAL_RCC_OscConfig+0x130>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d169      	bne.n	8003dcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f000 bc21 	b.w	8004540 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x7a>
 8003d08:	4b86      	ldr	r3, [pc, #536]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a85      	ldr	r2, [pc, #532]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e02e      	b.n	8003d74 <HAL_RCC_OscConfig+0xd8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x9c>
 8003d1e:	4b81      	ldr	r3, [pc, #516]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a80      	ldr	r2, [pc, #512]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xd8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0xc0>
 8003d42:	4b78      	ldr	r3, [pc, #480]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a77      	ldr	r2, [pc, #476]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b75      	ldr	r3, [pc, #468]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a74      	ldr	r2, [pc, #464]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xd8>
 8003d5c:	4b71      	ldr	r3, [pc, #452]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a70      	ldr	r2, [pc, #448]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b6e      	ldr	r3, [pc, #440]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fe ffae 	bl	8002cdc <HAL_GetTick>
 8003d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fe ffaa 	bl	8002cdc <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	@ 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e3d4      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d96:	4b63      	ldr	r3, [pc, #396]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xe8>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe ff9a 	bl	8002cdc <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe ff96 	bl	8002cdc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	@ 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e3c0      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dbe:	4b59      	ldr	r3, [pc, #356]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x110>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80ca 	beq.w	8003f70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ddc:	4b51      	ldr	r3, [pc, #324]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003de4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003de6:	4b4f      	ldr	r3, [pc, #316]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_RCC_OscConfig+0x166>
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	2b18      	cmp	r3, #24
 8003df6:	d156      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x20a>
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d151      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e02:	4b48      	ldr	r3, [pc, #288]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_RCC_OscConfig+0x17e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e392      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e1a:	4b42      	ldr	r3, [pc, #264]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 0219 	bic.w	r2, r3, #25
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	493f      	ldr	r1, [pc, #252]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe ff56 	bl	8002cdc <HAL_GetTick>
 8003e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e34:	f7fe ff52 	bl	8002cdc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e37c      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e46:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e52:	f7fe ff73 	bl	8002d3c <HAL_GetREVID>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d817      	bhi.n	8003e90 <HAL_RCC_OscConfig+0x1f4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b40      	cmp	r3, #64	@ 0x40
 8003e66:	d108      	bne.n	8003e7a <HAL_RCC_OscConfig+0x1de>
 8003e68:	4b2e      	ldr	r3, [pc, #184]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e70:	4a2c      	ldr	r2, [pc, #176]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e76:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e78:	e07a      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	031b      	lsls	r3, r3, #12
 8003e88:	4926      	ldr	r1, [pc, #152]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e8e:	e06f      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	061b      	lsls	r3, r3, #24
 8003e9e:	4921      	ldr	r1, [pc, #132]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea4:	e064      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d047      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eae:	4b1d      	ldr	r3, [pc, #116]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 0219 	bic.w	r2, r3, #25
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	491a      	ldr	r1, [pc, #104]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe ff0c 	bl	8002cdc <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fe ff08 	bl	8002cdc <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e332      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eda:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	f7fe ff29 	bl	8002d3c <HAL_GetREVID>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d819      	bhi.n	8003f28 <HAL_RCC_OscConfig+0x28c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d108      	bne.n	8003f0e <HAL_RCC_OscConfig+0x272>
 8003efc:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f04:	4a07      	ldr	r2, [pc, #28]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0a:	6053      	str	r3, [r2, #4]
 8003f0c:	e030      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	031b      	lsls	r3, r3, #12
 8003f1c:	4901      	ldr	r1, [pc, #4]	@ (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
 8003f22:	e025      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
 8003f24:	58024400 	.word	0x58024400
 8003f28:	4b9a      	ldr	r3, [pc, #616]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	4997      	ldr	r1, [pc, #604]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
 8003f3c:	e018      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3e:	4b95      	ldr	r3, [pc, #596]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a94      	ldr	r2, [pc, #592]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fec7 	bl	8002cdc <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fe fec3 	bl	8002cdc <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e2ed      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f64:	4b8b      	ldr	r3, [pc, #556]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a9 	beq.w	80040d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7e:	4b85      	ldr	r3, [pc, #532]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f88:	4b82      	ldr	r3, [pc, #520]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d007      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x308>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b18      	cmp	r3, #24
 8003f98:	d13a      	bne.n	8004010 <HAL_RCC_OscConfig+0x374>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d135      	bne.n	8004010 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fa4:	4b7b      	ldr	r3, [pc, #492]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x320>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2b80      	cmp	r3, #128	@ 0x80
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e2c1      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fbc:	f7fe febe 	bl	8002d3c <HAL_GetREVID>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d817      	bhi.n	8003ffa <HAL_RCC_OscConfig+0x35e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x348>
 8003fd2:	4b70      	ldr	r3, [pc, #448]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003fda:	4a6e      	ldr	r2, [pc, #440]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fe0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fe2:	e075      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fe4:	4b6b      	ldr	r3, [pc, #428]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	069b      	lsls	r3, r3, #26
 8003ff2:	4968      	ldr	r1, [pc, #416]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ff8:	e06a      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ffa:	4b66      	ldr	r3, [pc, #408]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	4962      	ldr	r1, [pc, #392]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800400e:	e05f      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d042      	beq.n	800409e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004018:	4b5e      	ldr	r3, [pc, #376]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5d      	ldr	r2, [pc, #372]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800401e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fe5a 	bl	8002cdc <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800402c:	f7fe fe56 	bl	8002cdc <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e280      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800403e:	4b55      	ldr	r3, [pc, #340]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800404a:	f7fe fe77 	bl	8002d3c <HAL_GetREVID>
 800404e:	4603      	mov	r3, r0
 8004050:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004054:	4293      	cmp	r3, r2
 8004056:	d817      	bhi.n	8004088 <HAL_RCC_OscConfig+0x3ec>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	2b20      	cmp	r3, #32
 800405e:	d108      	bne.n	8004072 <HAL_RCC_OscConfig+0x3d6>
 8004060:	4b4c      	ldr	r3, [pc, #304]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004068:	4a4a      	ldr	r2, [pc, #296]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800406a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800406e:	6053      	str	r3, [r2, #4]
 8004070:	e02e      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
 8004072:	4b48      	ldr	r3, [pc, #288]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	4944      	ldr	r1, [pc, #272]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
 8004086:	e023      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
 8004088:	4b42      	ldr	r3, [pc, #264]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	493f      	ldr	r1, [pc, #252]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004098:	4313      	orrs	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
 800409c:	e018      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800409e:	4b3d      	ldr	r3, [pc, #244]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe fe17 	bl	8002cdc <HAL_GetTick>
 80040ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040b2:	f7fe fe13 	bl	8002cdc <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e23d      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040c4:	4b33      	ldr	r3, [pc, #204]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d036      	beq.n	800414a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d019      	beq.n	8004118 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fe fdf4 	bl	8002cdc <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fe fdf0 	bl	8002cdc <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e21a      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800410a:	4b22      	ldr	r3, [pc, #136]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800410c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x45c>
 8004116:	e018      	b.n	800414a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004118:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800411a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411c:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fe fdda 	bl	8002cdc <HAL_GetTick>
 8004128:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412c:	f7fe fdd6 	bl	8002cdc <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e200      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d039      	beq.n	80041ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01c      	beq.n	8004198 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a0c      	ldr	r2, [pc, #48]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004164:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004168:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800416a:	f7fe fdb7 	bl	8002cdc <HAL_GetTick>
 800416e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004172:	f7fe fdb3 	bl	8002cdc <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1dd      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x4d6>
 8004190:	e01b      	b.n	80041ca <HAL_RCC_OscConfig+0x52e>
 8004192:	bf00      	nop
 8004194:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004198:	4b9b      	ldr	r3, [pc, #620]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a9a      	ldr	r2, [pc, #616]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800419e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041a4:	f7fe fd9a 	bl	8002cdc <HAL_GetTick>
 80041a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ac:	f7fe fd96 	bl	8002cdc <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1c0      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041be:	4b92      	ldr	r3, [pc, #584]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8081 	beq.w	80042da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041d8:	4b8c      	ldr	r3, [pc, #560]	@ (800440c <HAL_RCC_OscConfig+0x770>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a8b      	ldr	r2, [pc, #556]	@ (800440c <HAL_RCC_OscConfig+0x770>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e4:	f7fe fd7a 	bl	8002cdc <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fe fd76 	bl	8002cdc <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	@ 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1a0      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fe:	4b83      	ldr	r3, [pc, #524]	@ (800440c <HAL_RCC_OscConfig+0x770>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x584>
 8004212:	4b7d      	ldr	r3, [pc, #500]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	4a7c      	ldr	r2, [pc, #496]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	@ 0x70
 800421e:	e02d      	b.n	800427c <HAL_RCC_OscConfig+0x5e0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10c      	bne.n	8004242 <HAL_RCC_OscConfig+0x5a6>
 8004228:	4b77      	ldr	r3, [pc, #476]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	4a76      	ldr	r2, [pc, #472]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	@ 0x70
 8004234:	4b74      	ldr	r3, [pc, #464]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004238:	4a73      	ldr	r2, [pc, #460]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800423a:	f023 0304 	bic.w	r3, r3, #4
 800423e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x5e0>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c8>
 800424a:	4b6f      	ldr	r3, [pc, #444]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424e:	4a6e      	ldr	r2, [pc, #440]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6713      	str	r3, [r2, #112]	@ 0x70
 8004256:	4b6c      	ldr	r3, [pc, #432]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	4a6b      	ldr	r2, [pc, #428]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6713      	str	r3, [r2, #112]	@ 0x70
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0x5e0>
 8004264:	4b68      	ldr	r3, [pc, #416]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004268:	4a67      	ldr	r2, [pc, #412]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004270:	4b65      	ldr	r3, [pc, #404]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	4a64      	ldr	r2, [pc, #400]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe fd2a 	bl	8002cdc <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fe fd26 	bl	8002cdc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e14e      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a2:	4b59      	ldr	r3, [pc, #356]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ee      	beq.n	800428c <HAL_RCC_OscConfig+0x5f0>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fe fd14 	bl	8002cdc <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe fd10 	bl	8002cdc <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e138      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ee      	bne.n	80042b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 812d 	beq.w	800453e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042e4:	4b48      	ldr	r3, [pc, #288]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ec:	2b18      	cmp	r3, #24
 80042ee:	f000 80bd 	beq.w	800446c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	f040 809e 	bne.w	8004438 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fc:	4b42      	ldr	r3, [pc, #264]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a41      	ldr	r2, [pc, #260]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fce8 	bl	8002cdc <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004310:	f7fe fce4 	bl	8002cdc <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e10e      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004322:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800432e:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004332:	4b37      	ldr	r3, [pc, #220]	@ (8004410 <HAL_RCC_OscConfig+0x774>)
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	430a      	orrs	r2, r1
 8004342:	4931      	ldr	r1, [pc, #196]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	628b      	str	r3, [r1, #40]	@ 0x28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	3b01      	subs	r3, #1
 800434e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004356:	3b01      	subs	r3, #1
 8004358:	025b      	lsls	r3, r3, #9
 800435a:	b29b      	uxth	r3, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004370:	3b01      	subs	r3, #1
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004378:	4923      	ldr	r1, [pc, #140]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	4a21      	ldr	r2, [pc, #132]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800438a:	4b1f      	ldr	r3, [pc, #124]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800438c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800438e:	4b21      	ldr	r3, [pc, #132]	@ (8004414 <HAL_RCC_OscConfig+0x778>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004396:	00d2      	lsls	r2, r2, #3
 8004398:	491b      	ldr	r1, [pc, #108]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800439e:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	f023 020c 	bic.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	4917      	ldr	r1, [pc, #92]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043b0:	4b15      	ldr	r3, [pc, #84]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f023 0202 	bic.w	r2, r3, #2
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	4912      	ldr	r1, [pc, #72]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043c2:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	4a10      	ldr	r2, [pc, #64]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043da:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	4a07      	ldr	r2, [pc, #28]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f2:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a04      	ldr	r2, [pc, #16]	@ (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fe fc6d 	bl	8002cdc <HAL_GetTick>
 8004402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004404:	e011      	b.n	800442a <HAL_RCC_OscConfig+0x78e>
 8004406:	bf00      	nop
 8004408:	58024400 	.word	0x58024400
 800440c:	58024800 	.word	0x58024800
 8004410:	fffffc0c 	.word	0xfffffc0c
 8004414:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fe fc60 	bl	8002cdc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e08a      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800442a:	4b47      	ldr	r3, [pc, #284]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x77c>
 8004436:	e082      	b.n	800453e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b43      	ldr	r3, [pc, #268]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a42      	ldr	r2, [pc, #264]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fc4a 	bl	8002cdc <HAL_GetTick>
 8004448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe fc46 	bl	8002cdc <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e070      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800445e:	4b3a      	ldr	r3, [pc, #232]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x7b0>
 800446a:	e068      	b.n	800453e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800446c:	4b36      	ldr	r3, [pc, #216]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004472:	4b35      	ldr	r3, [pc, #212]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	2b01      	cmp	r3, #1
 800447e:	d031      	beq.n	80044e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f003 0203 	and.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d12a      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d122      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d11a      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	0a5b      	lsrs	r3, r3, #9
 80044b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d111      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	0c1b      	lsrs	r3, r3, #16
 80044c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d108      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e02b      	b.n	8004540 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044e8:	4b17      	ldr	r3, [pc, #92]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 80044ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ec:	08db      	lsrs	r3, r3, #3
 80044ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d01f      	beq.n	800453e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80044fe:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	4a11      	ldr	r2, [pc, #68]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800450a:	f7fe fbe7 	bl	8002cdc <HAL_GetTick>
 800450e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004510:	bf00      	nop
 8004512:	f7fe fbe3 	bl	8002cdc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	4293      	cmp	r3, r2
 800451c:	d0f9      	beq.n	8004512 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800451e:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 8004520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_RCC_OscConfig+0x8b0>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800452a:	00d2      	lsls	r2, r2, #3
 800452c:	4906      	ldr	r1, [pc, #24]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 800452e:	4313      	orrs	r3, r2
 8004530:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004532:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	4a04      	ldr	r2, [pc, #16]	@ (8004548 <HAL_RCC_OscConfig+0x8ac>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3730      	adds	r7, #48	@ 0x30
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	58024400 	.word	0x58024400
 800454c:	ffff0007 	.word	0xffff0007

08004550 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e19c      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b8a      	ldr	r3, [pc, #552]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b87      	ldr	r3, [pc, #540]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 020f 	bic.w	r2, r3, #15
 800457a:	4985      	ldr	r1, [pc, #532]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b83      	ldr	r3, [pc, #524]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e184      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d010      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d908      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045b0:	4b78      	ldr	r3, [pc, #480]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	4975      	ldr	r1, [pc, #468]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	4b70      	ldr	r3, [pc, #448]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045da:	429a      	cmp	r2, r3
 80045dc:	d908      	bls.n	80045f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	496a      	ldr	r1, [pc, #424]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d010      	beq.n	800461e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699a      	ldr	r2, [r3, #24]
 8004600:	4b64      	ldr	r3, [pc, #400]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004608:	429a      	cmp	r2, r3
 800460a:	d908      	bls.n	800461e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800460c:	4b61      	ldr	r3, [pc, #388]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	495e      	ldr	r1, [pc, #376]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 800461a:	4313      	orrs	r3, r2
 800461c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	4b59      	ldr	r3, [pc, #356]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004636:	429a      	cmp	r2, r3
 8004638:	d908      	bls.n	800464c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800463a:	4b56      	ldr	r3, [pc, #344]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4953      	ldr	r1, [pc, #332]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004648:	4313      	orrs	r3, r2
 800464a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	4b4d      	ldr	r3, [pc, #308]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	429a      	cmp	r2, r3
 8004666:	d908      	bls.n	800467a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b4a      	ldr	r3, [pc, #296]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f023 020f 	bic.w	r2, r3, #15
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4947      	ldr	r1, [pc, #284]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004676:	4313      	orrs	r3, r2
 8004678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d055      	beq.n	8004732 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004686:	4b43      	ldr	r3, [pc, #268]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4940      	ldr	r1, [pc, #256]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004694:	4313      	orrs	r3, r2
 8004696:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d121      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0f6      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d107      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046b8:	4b36      	ldr	r3, [pc, #216]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d115      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0ea      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d107      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d0:	4b30      	ldr	r3, [pc, #192]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0de      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0d6      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046f0:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f023 0207 	bic.w	r2, r3, #7
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4925      	ldr	r1, [pc, #148]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004702:	f7fe faeb 	bl	8002cdc <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004708:	e00a      	b.n	8004720 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800470a:	f7fe fae7 	bl	8002cdc <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0be      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004720:	4b1c      	ldr	r3, [pc, #112]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	429a      	cmp	r2, r3
 8004730:	d1eb      	bne.n	800470a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d010      	beq.n	8004760 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	4b14      	ldr	r3, [pc, #80]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	429a      	cmp	r2, r3
 800474c:	d208      	bcs.n	8004760 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474e:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f023 020f 	bic.w	r2, r3, #15
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	490e      	ldr	r1, [pc, #56]	@ (8004794 <HAL_RCC_ClockConfig+0x244>)
 800475c:	4313      	orrs	r3, r2
 800475e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d214      	bcs.n	8004798 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b08      	ldr	r3, [pc, #32]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	4906      	ldr	r1, [pc, #24]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <HAL_RCC_ClockConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e086      	b.n	800489e <HAL_RCC_ClockConfig+0x34e>
 8004790:	52002000 	.word	0x52002000
 8004794:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d010      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	4b3f      	ldr	r3, [pc, #252]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d208      	bcs.n	80047c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047b4:	4b3c      	ldr	r3, [pc, #240]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4939      	ldr	r1, [pc, #228]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d010      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	4b34      	ldr	r3, [pc, #208]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047de:	429a      	cmp	r2, r3
 80047e0:	d208      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047e2:	4b31      	ldr	r3, [pc, #196]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	492e      	ldr	r1, [pc, #184]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d010      	beq.n	8004822 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699a      	ldr	r2, [r3, #24]
 8004804:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800480c:	429a      	cmp	r2, r3
 800480e:	d208      	bcs.n	8004822 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004810:	4b25      	ldr	r3, [pc, #148]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	4922      	ldr	r1, [pc, #136]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 800481e:	4313      	orrs	r3, r2
 8004820:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800483a:	429a      	cmp	r2, r3
 800483c:	d208      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800483e:	4b1a      	ldr	r3, [pc, #104]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4917      	ldr	r1, [pc, #92]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 800484c:	4313      	orrs	r3, r2
 800484e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004850:	f000 f834 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	4912      	ldr	r1, [pc, #72]	@ (80048ac <HAL_RCC_ClockConfig+0x35c>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
 800486c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800486e:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <HAL_RCC_ClockConfig+0x358>)
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	4a0d      	ldr	r2, [pc, #52]	@ (80048ac <HAL_RCC_ClockConfig+0x35c>)
 8004878:	5cd3      	ldrb	r3, [r2, r3]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
 8004884:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <HAL_RCC_ClockConfig+0x360>)
 8004886:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004888:	4a0a      	ldr	r2, [pc, #40]	@ (80048b4 <HAL_RCC_ClockConfig+0x364>)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800488e:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <HAL_RCC_ClockConfig+0x368>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe f9d8 	bl	8002c48 <HAL_InitTick>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	58024400 	.word	0x58024400
 80048ac:	0800c2fc 	.word	0x0800c2fc
 80048b0:	24000004 	.word	0x24000004
 80048b4:	24000000 	.word	0x24000000
 80048b8:	24000024 	.word	0x24000024

080048bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	@ 0x24
 80048c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c2:	4bb3      	ldr	r3, [pc, #716]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ca:	2b18      	cmp	r3, #24
 80048cc:	f200 8155 	bhi.w	8004b7a <HAL_RCC_GetSysClockFreq+0x2be>
 80048d0:	a201      	add	r2, pc, #4	@ (adr r2, 80048d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d6:	bf00      	nop
 80048d8:	0800493d 	.word	0x0800493d
 80048dc:	08004b7b 	.word	0x08004b7b
 80048e0:	08004b7b 	.word	0x08004b7b
 80048e4:	08004b7b 	.word	0x08004b7b
 80048e8:	08004b7b 	.word	0x08004b7b
 80048ec:	08004b7b 	.word	0x08004b7b
 80048f0:	08004b7b 	.word	0x08004b7b
 80048f4:	08004b7b 	.word	0x08004b7b
 80048f8:	08004963 	.word	0x08004963
 80048fc:	08004b7b 	.word	0x08004b7b
 8004900:	08004b7b 	.word	0x08004b7b
 8004904:	08004b7b 	.word	0x08004b7b
 8004908:	08004b7b 	.word	0x08004b7b
 800490c:	08004b7b 	.word	0x08004b7b
 8004910:	08004b7b 	.word	0x08004b7b
 8004914:	08004b7b 	.word	0x08004b7b
 8004918:	08004969 	.word	0x08004969
 800491c:	08004b7b 	.word	0x08004b7b
 8004920:	08004b7b 	.word	0x08004b7b
 8004924:	08004b7b 	.word	0x08004b7b
 8004928:	08004b7b 	.word	0x08004b7b
 800492c:	08004b7b 	.word	0x08004b7b
 8004930:	08004b7b 	.word	0x08004b7b
 8004934:	08004b7b 	.word	0x08004b7b
 8004938:	0800496f 	.word	0x0800496f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800493c:	4b94      	ldr	r3, [pc, #592]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004948:	4b91      	ldr	r3, [pc, #580]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	08db      	lsrs	r3, r3, #3
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	4a90      	ldr	r2, [pc, #576]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800495a:	e111      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800495c:	4b8d      	ldr	r3, [pc, #564]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800495e:	61bb      	str	r3, [r7, #24]
      break;
 8004960:	e10e      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004962:	4b8d      	ldr	r3, [pc, #564]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004964:	61bb      	str	r3, [r7, #24]
      break;
 8004966:	e10b      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004968:	4b8c      	ldr	r3, [pc, #560]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800496a:	61bb      	str	r3, [r7, #24]
      break;
 800496c:	e108      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800496e:	4b88      	ldr	r3, [pc, #544]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004978:	4b85      	ldr	r3, [pc, #532]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004982:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004984:	4b82      	ldr	r3, [pc, #520]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800498e:	4b80      	ldr	r3, [pc, #512]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004992:	08db      	lsrs	r3, r3, #3
 8004994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80e1 	beq.w	8004b74 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f000 8083 	beq.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x204>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	f200 80a1 	bhi.w	8004b04 <HAL_RCC_GetSysClockFreq+0x248>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x114>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d056      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x1c0>
 80049ce:	e099      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d02d      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	08db      	lsrs	r3, r3, #3
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	4a6b      	ldr	r2, [pc, #428]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a06:	4b62      	ldr	r3, [pc, #392]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a36:	e087      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004ba4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4a:	4b51      	ldr	r3, [pc, #324]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a7a:	e065      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004ba8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8e:	4b40      	ldr	r3, [pc, #256]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aa2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004abe:	e043      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004bac <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b02:	e021      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004ba8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b16:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b48:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	0a5b      	lsrs	r3, r3, #9
 8004b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b52:	3301      	adds	r3, #1
 8004b54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6c:	ee17 3a90 	vmov	r3, s15
 8004b70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b72:	e005      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
      break;
 8004b78:	e002      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b7a:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b7c:	61bb      	str	r3, [r7, #24]
      break;
 8004b7e:	bf00      	nop
  }

  return sysclockfreq;
 8004b80:	69bb      	ldr	r3, [r7, #24]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	03d09000 	.word	0x03d09000
 8004b98:	003d0900 	.word	0x003d0900
 8004b9c:	017d7840 	.word	0x017d7840
 8004ba0:	46000000 	.word	0x46000000
 8004ba4:	4c742400 	.word	0x4c742400
 8004ba8:	4a742400 	.word	0x4a742400
 8004bac:	4bbebc20 	.word	0x4bbebc20

08004bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bb6:	f7ff fe81 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	490f      	ldr	r1, [pc, #60]	@ (8004c04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004bc8:	5ccb      	ldrb	r3, [r1, r3]
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	4a07      	ldr	r2, [pc, #28]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bee:	4a07      	ldr	r2, [pc, #28]	@ (8004c0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004bf4:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	58024400 	.word	0x58024400
 8004c04:	0800c2fc 	.word	0x0800c2fc
 8004c08:	24000004 	.word	0x24000004
 8004c0c:	24000000 	.word	0x24000000

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c14:	f7ff ffcc 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4904      	ldr	r1, [pc, #16]	@ (8004c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	58024400 	.word	0x58024400
 8004c38:	0800c2fc 	.word	0x0800c2fc

08004c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c40:	f7ff ffb6 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4904      	ldr	r1, [pc, #16]	@ (8004c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	58024400 	.word	0x58024400
 8004c64:	0800c2fc 	.word	0x0800c2fc

08004c68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c6c:	b0ca      	sub	sp, #296	@ 0x128
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004c8c:	2500      	movs	r5, #0
 8004c8e:	ea54 0305 	orrs.w	r3, r4, r5
 8004c92:	d049      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c9e:	d02f      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ca0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ca4:	d828      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004caa:	d01a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb0:	d822      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cba:	d007      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cbe:	4bb8      	ldr	r3, [pc, #736]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	4ab7      	ldr	r2, [pc, #732]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cca:	e01a      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fc8f 	bl	80065f8 <RCCEx_PLL2_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ce0:	e00f      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	3328      	adds	r3, #40	@ 0x28
 8004ce8:	2102      	movs	r1, #2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 fd36 	bl	800675c <RCCEx_PLL3_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cf6:	e004      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d0a:	4ba5      	ldr	r3, [pc, #660]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d18:	4aa1      	ldr	r2, [pc, #644]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d1e:	e003      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004d34:	f04f 0900 	mov.w	r9, #0
 8004d38:	ea58 0309 	orrs.w	r3, r8, r9
 8004d3c:	d047      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d82a      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d48:	a201      	add	r2, pc, #4	@ (adr r2, 8004d50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d65 	.word	0x08004d65
 8004d54:	08004d73 	.word	0x08004d73
 8004d58:	08004d89 	.word	0x08004d89
 8004d5c:	08004da7 	.word	0x08004da7
 8004d60:	08004da7 	.word	0x08004da7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d64:	4b8e      	ldr	r3, [pc, #568]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	4a8d      	ldr	r2, [pc, #564]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d70:	e01a      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	3308      	adds	r3, #8
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fc3c 	bl	80065f8 <RCCEx_PLL2_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d86:	e00f      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8c:	3328      	adds	r3, #40	@ 0x28
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fce3 	bl	800675c <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d9c:	e004      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004da4:	e000      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db0:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db4:	f023 0107 	bic.w	r1, r3, #7
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbe:	4a78      	ldr	r2, [pc, #480]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dc4:	e003      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004dda:	f04f 0b00 	mov.w	fp, #0
 8004dde:	ea5a 030b 	orrs.w	r3, sl, fp
 8004de2:	d04c      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dee:	d030      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df4:	d829      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004df8:	d02d      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004dfc:	d825      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004dfe:	2b80      	cmp	r3, #128	@ 0x80
 8004e00:	d018      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004e02:	2b80      	cmp	r3, #128	@ 0x80
 8004e04:	d821      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004e0a:	2b40      	cmp	r3, #64	@ 0x40
 8004e0c:	d007      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004e0e:	e01c      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e10:	4b63      	ldr	r3, [pc, #396]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	4a62      	ldr	r2, [pc, #392]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e1c:	e01c      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	3308      	adds	r3, #8
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 fbe6 	bl	80065f8 <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e32:	e011      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e38:	3328      	adds	r3, #40	@ 0x28
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fc8d 	bl	800675c <RCCEx_PLL3_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e48:	e006      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e60:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e74:	e003      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004e94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d053      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eaa:	d035      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004eac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eb0:	d82e      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004eb2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004eb6:	d031      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004eb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ebc:	d828      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec2:	d01a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec8:	d822      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ed2:	d007      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ed4:	e01c      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed6:	4b32      	ldr	r3, [pc, #200]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	4a31      	ldr	r2, [pc, #196]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ee2:	e01c      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	3308      	adds	r3, #8
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fb83 	bl	80065f8 <RCCEx_PLL2_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ef8:	e011      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	3328      	adds	r3, #40	@ 0x28
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f001 fc2a 	bl	800675c <RCCEx_PLL3_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f0e:	e006      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f16:	e002      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004f18:	bf00      	nop
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f26:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f36:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f3c:	e003      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004f60:	460b      	mov	r3, r1
 8004f62:	4313      	orrs	r3, r2
 8004f64:	d056      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f72:	d038      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f78:	d831      	bhi.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f7e:	d034      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004f80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f84:	d82b      	bhi.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f8a:	d01d      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f90:	d825      	bhi.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d006      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f9c:	e01f      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f9e:	bf00      	nop
 8004fa0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa4:	4ba2      	ldr	r3, [pc, #648]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	4aa1      	ldr	r2, [pc, #644]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fb0:	e01c      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 fb1c 	bl	80065f8 <RCCEx_PLL2_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004fc6:	e011      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fcc:	3328      	adds	r3, #40	@ 0x28
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fbc3 	bl	800675c <RCCEx_PLL3_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fdc:	e006      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005000:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005004:	4a8a      	ldr	r2, [pc, #552]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005006:	430b      	orrs	r3, r1
 8005008:	6593      	str	r3, [r2, #88]	@ 0x58
 800500a:	e003      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005024:	2300      	movs	r3, #0
 8005026:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800502a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800502e:	460b      	mov	r3, r1
 8005030:	4313      	orrs	r3, r2
 8005032:	d03a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503a:	2b30      	cmp	r3, #48	@ 0x30
 800503c:	d01f      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800503e:	2b30      	cmp	r3, #48	@ 0x30
 8005040:	d819      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005042:	2b20      	cmp	r3, #32
 8005044:	d00c      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005046:	2b20      	cmp	r3, #32
 8005048:	d815      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d019      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800504e:	2b10      	cmp	r3, #16
 8005050:	d111      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005052:	4b77      	ldr	r3, [pc, #476]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	4a76      	ldr	r2, [pc, #472]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800505c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800505e:	e011      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005064:	3308      	adds	r3, #8
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fac5 	bl	80065f8 <RCCEx_PLL2_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800507c:	e002      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800508c:	4b68      	ldr	r3, [pc, #416]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800508e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005090:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509a:	4a65      	ldr	r2, [pc, #404]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800509c:	430b      	orrs	r3, r1
 800509e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80050b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80050c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d051      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d4:	d035      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80050d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050da:	d82e      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050e0:	d031      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80050e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050e6:	d828      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ec:	d01a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80050ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f2:	d822      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80050f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fc:	d007      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80050fe:	e01c      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b4b      	ldr	r3, [pc, #300]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	4a4a      	ldr	r2, [pc, #296]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800510c:	e01c      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005112:	3308      	adds	r3, #8
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f001 fa6e 	bl	80065f8 <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005122:	e011      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	3328      	adds	r3, #40	@ 0x28
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fb15 	bl	800675c <RCCEx_PLL3_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005140:	e002      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005150:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005154:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515e:	4a34      	ldr	r2, [pc, #208]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005160:	430b      	orrs	r3, r1
 8005162:	6513      	str	r3, [r2, #80]	@ 0x50
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800517a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005184:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d056      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005198:	d033      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800519a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800519e:	d82c      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051a4:	d02f      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80051a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051aa:	d826      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051b0:	d02b      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80051b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051b6:	d820      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051bc:	d012      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80051be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051c2:	d81a      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d022      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051cc:	d115      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	3308      	adds	r3, #8
 80051d4:	2101      	movs	r1, #1
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fa0e 	bl	80065f8 <RCCEx_PLL2_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051e2:	e015      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e8:	3328      	adds	r3, #40	@ 0x28
 80051ea:	2101      	movs	r1, #1
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 fab5 	bl	800675c <RCCEx_PLL3_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051f8:	e00a      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005200:	e006      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005202:	bf00      	nop
 8005204:	e004      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005206:	bf00      	nop
 8005208:	e002      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800520e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10d      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800521a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005226:	4a02      	ldr	r2, [pc, #8]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005228:	430b      	orrs	r3, r1
 800522a:	6513      	str	r3, [r2, #80]	@ 0x50
 800522c:	e006      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005252:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d055      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800525c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005268:	d033      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800526a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800526e:	d82c      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005274:	d02f      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527a:	d826      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800527c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005280:	d02b      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005282:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005286:	d820      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800528c:	d012      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800528e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005292:	d81a      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d022      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800529c:	d115      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a2:	3308      	adds	r3, #8
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f001 f9a6 	bl	80065f8 <RCCEx_PLL2_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80052b2:	e015      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b8:	3328      	adds	r3, #40	@ 0x28
 80052ba:	2101      	movs	r1, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 fa4d 	bl	800675c <RCCEx_PLL3_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80052c8:	e00a      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052d0:	e006      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052e8:	4ba3      	ldr	r3, [pc, #652]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052f8:	4a9f      	ldr	r2, [pc, #636]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800531e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d037      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005332:	d00e      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005338:	d816      	bhi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800533e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005342:	d111      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005344:	4b8c      	ldr	r3, [pc, #560]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	4a8b      	ldr	r2, [pc, #556]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005350:	e00f      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	3308      	adds	r3, #8
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f001 f94c 	bl	80065f8 <RCCEx_PLL2_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005366:	e004      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800536e:	e000      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800537a:	4b7f      	ldr	r3, [pc, #508]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800537c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800537e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005388:	4a7b      	ldr	r2, [pc, #492]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800538a:	430b      	orrs	r3, r1
 800538c:	6513      	str	r3, [r2, #80]	@ 0x50
 800538e:	e003      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80053a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80053ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d039      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d81c      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80053c2:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	08005405 	.word	0x08005405
 80053cc:	080053d9 	.word	0x080053d9
 80053d0:	080053e7 	.word	0x080053e7
 80053d4:	08005405 	.word	0x08005405
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d8:	4b67      	ldr	r3, [pc, #412]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	4a66      	ldr	r2, [pc, #408]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053e4:	e00f      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ea:	3308      	adds	r3, #8
 80053ec:	2102      	movs	r1, #2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 f902 	bl	80065f8 <RCCEx_PLL2_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053fa:	e004      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800540e:	4b5a      	ldr	r3, [pc, #360]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005412:	f023 0103 	bic.w	r1, r3, #3
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541c:	4a56      	ldr	r2, [pc, #344]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800541e:	430b      	orrs	r3, r1
 8005420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005438:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005442:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005446:	460b      	mov	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	f000 809f 	beq.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800544e:	4b4b      	ldr	r3, [pc, #300]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a4a      	ldr	r2, [pc, #296]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005458:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800545a:	f7fd fc3f 	bl	8002cdc <HAL_GetTick>
 800545e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005462:	e00b      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005464:	f7fd fc3a 	bl	8002cdc <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b64      	cmp	r3, #100	@ 0x64
 8005472:	d903      	bls.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800547a:	e005      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800547c:	4b3f      	ldr	r3, [pc, #252]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ed      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800548c:	2b00      	cmp	r3, #0
 800548e:	d179      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005490:	4b39      	ldr	r3, [pc, #228]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005492:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800549c:	4053      	eors	r3, r2
 800549e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d015      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054a6:	4b34      	ldr	r3, [pc, #208]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054b2:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b6:	4a30      	ldr	r2, [pc, #192]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054be:	4b2e      	ldr	r3, [pc, #184]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054de:	d118      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fd fbfc 	bl	8002cdc <HAL_GetTick>
 80054e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054e8:	e00d      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fd fbf7 	bl	8002cdc <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80054f4:	1ad2      	subs	r2, r2, r3
 80054f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d903      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005504:	e005      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005506:	4b1c      	ldr	r3, [pc, #112]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0eb      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005516:	2b00      	cmp	r3, #0
 8005518:	d129      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800552a:	d10e      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800552c:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800553c:	091a      	lsrs	r2, r3, #4
 800553e:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005540:	4013      	ands	r3, r2
 8005542:	4a0d      	ldr	r2, [pc, #52]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005544:	430b      	orrs	r3, r1
 8005546:	6113      	str	r3, [r2, #16]
 8005548:	e005      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800554a:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	4a0a      	ldr	r2, [pc, #40]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005550:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005554:	6113      	str	r3, [r2, #16]
 8005556:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005558:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005566:	4a04      	ldr	r2, [pc, #16]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005568:	430b      	orrs	r3, r1
 800556a:	6713      	str	r3, [r2, #112]	@ 0x70
 800556c:	e00e      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800556e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005576:	e009      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005578:	58024400 	.word	0x58024400
 800557c:	58024800 	.word	0x58024800
 8005580:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f002 0301 	and.w	r3, r2, #1
 8005598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f000 8089 	beq.w	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055b4:	2b28      	cmp	r3, #40	@ 0x28
 80055b6:	d86b      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80055b8:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	08005699 	.word	0x08005699
 80055c4:	08005691 	.word	0x08005691
 80055c8:	08005691 	.word	0x08005691
 80055cc:	08005691 	.word	0x08005691
 80055d0:	08005691 	.word	0x08005691
 80055d4:	08005691 	.word	0x08005691
 80055d8:	08005691 	.word	0x08005691
 80055dc:	08005691 	.word	0x08005691
 80055e0:	08005665 	.word	0x08005665
 80055e4:	08005691 	.word	0x08005691
 80055e8:	08005691 	.word	0x08005691
 80055ec:	08005691 	.word	0x08005691
 80055f0:	08005691 	.word	0x08005691
 80055f4:	08005691 	.word	0x08005691
 80055f8:	08005691 	.word	0x08005691
 80055fc:	08005691 	.word	0x08005691
 8005600:	0800567b 	.word	0x0800567b
 8005604:	08005691 	.word	0x08005691
 8005608:	08005691 	.word	0x08005691
 800560c:	08005691 	.word	0x08005691
 8005610:	08005691 	.word	0x08005691
 8005614:	08005691 	.word	0x08005691
 8005618:	08005691 	.word	0x08005691
 800561c:	08005691 	.word	0x08005691
 8005620:	08005699 	.word	0x08005699
 8005624:	08005691 	.word	0x08005691
 8005628:	08005691 	.word	0x08005691
 800562c:	08005691 	.word	0x08005691
 8005630:	08005691 	.word	0x08005691
 8005634:	08005691 	.word	0x08005691
 8005638:	08005691 	.word	0x08005691
 800563c:	08005691 	.word	0x08005691
 8005640:	08005699 	.word	0x08005699
 8005644:	08005691 	.word	0x08005691
 8005648:	08005691 	.word	0x08005691
 800564c:	08005691 	.word	0x08005691
 8005650:	08005691 	.word	0x08005691
 8005654:	08005691 	.word	0x08005691
 8005658:	08005691 	.word	0x08005691
 800565c:	08005691 	.word	0x08005691
 8005660:	08005699 	.word	0x08005699
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	3308      	adds	r3, #8
 800566a:	2101      	movs	r1, #1
 800566c:	4618      	mov	r0, r3
 800566e:	f000 ffc3 	bl	80065f8 <RCCEx_PLL2_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005678:	e00f      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567e:	3328      	adds	r3, #40	@ 0x28
 8005680:	2101      	movs	r1, #1
 8005682:	4618      	mov	r0, r3
 8005684:	f001 f86a 	bl	800675c <RCCEx_PLL3_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800568e:	e004      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005696:	e000      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80056a2:	4bbf      	ldr	r3, [pc, #764]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056b0:	4abb      	ldr	r2, [pc, #748]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056b2:	430b      	orrs	r3, r1
 80056b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80056b6:	e003      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f002 0302 	and.w	r3, r2, #2
 80056cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80056d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80056da:	460b      	mov	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	d041      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d824      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80056ea:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	0800573d 	.word	0x0800573d
 80056f4:	08005709 	.word	0x08005709
 80056f8:	0800571f 	.word	0x0800571f
 80056fc:	0800573d 	.word	0x0800573d
 8005700:	0800573d 	.word	0x0800573d
 8005704:	0800573d 	.word	0x0800573d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	3308      	adds	r3, #8
 800570e:	2101      	movs	r1, #1
 8005710:	4618      	mov	r0, r3
 8005712:	f000 ff71 	bl	80065f8 <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800571c:	e00f      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005722:	3328      	adds	r3, #40	@ 0x28
 8005724:	2101      	movs	r1, #1
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f818 	bl	800675c <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005732:	e004      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800573a:	e000      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800573c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005746:	4b96      	ldr	r3, [pc, #600]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574a:	f023 0107 	bic.w	r1, r3, #7
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005754:	4a92      	ldr	r2, [pc, #584]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005756:	430b      	orrs	r3, r1
 8005758:	6553      	str	r3, [r2, #84]	@ 0x54
 800575a:	e003      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f002 0304 	and.w	r3, r2, #4
 8005770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005774:	2300      	movs	r3, #0
 8005776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800577a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d044      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800578c:	2b05      	cmp	r3, #5
 800578e:	d825      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005790:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005796:	bf00      	nop
 8005798:	080057e5 	.word	0x080057e5
 800579c:	080057b1 	.word	0x080057b1
 80057a0:	080057c7 	.word	0x080057c7
 80057a4:	080057e5 	.word	0x080057e5
 80057a8:	080057e5 	.word	0x080057e5
 80057ac:	080057e5 	.word	0x080057e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b4:	3308      	adds	r3, #8
 80057b6:	2101      	movs	r1, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 ff1d 	bl	80065f8 <RCCEx_PLL2_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80057c4:	e00f      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	3328      	adds	r3, #40	@ 0x28
 80057cc:	2101      	movs	r1, #1
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 ffc4 	bl	800675c <RCCEx_PLL3_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80057da:	e004      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057e2:	e000      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80057e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057ee:	4b6c      	ldr	r3, [pc, #432]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f2:	f023 0107 	bic.w	r1, r3, #7
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fe:	4a68      	ldr	r2, [pc, #416]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005800:	430b      	orrs	r3, r1
 8005802:	6593      	str	r3, [r2, #88]	@ 0x58
 8005804:	e003      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f002 0320 	and.w	r3, r2, #32
 800581a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800581e:	2300      	movs	r3, #0
 8005820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d055      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800583a:	d033      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800583c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005840:	d82c      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d02f      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584c:	d826      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800584e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005852:	d02b      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005858:	d820      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800585a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800585e:	d012      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005864:	d81a      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d022      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800586a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800586e:	d115      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	3308      	adds	r3, #8
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f000 febd 	bl	80065f8 <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005884:	e015      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3328      	adds	r3, #40	@ 0x28
 800588c:	2102      	movs	r1, #2
 800588e:	4618      	mov	r0, r3
 8005890:	f000 ff64 	bl	800675c <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800589a:	e00a      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a2:	e006      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058a4:	bf00      	nop
 80058a6:	e004      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058a8:	bf00      	nop
 80058aa:	e002      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058ba:	4b39      	ldr	r3, [pc, #228]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	4a35      	ldr	r2, [pc, #212]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80058d0:	e003      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80058e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80058f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4313      	orrs	r3, r2
 80058f8:	d058      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005902:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005906:	d033      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005908:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800590c:	d82c      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005912:	d02f      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005918:	d826      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800591a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800591e:	d02b      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005924:	d820      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800592a:	d012      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800592c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005930:	d81a      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d022      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593a:	d115      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005940:	3308      	adds	r3, #8
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fe57 	bl	80065f8 <RCCEx_PLL2_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005950:	e015      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	3328      	adds	r3, #40	@ 0x28
 8005958:	2102      	movs	r1, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fefe 	bl	800675c <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005966:	e00a      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800596e:	e006      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005970:	bf00      	nop
 8005972:	e004      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005974:	bf00      	nop
 8005976:	e002      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005978:	bf00      	nop
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800597c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10e      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005986:	4b06      	ldr	r3, [pc, #24]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005996:	4a02      	ldr	r2, [pc, #8]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6593      	str	r3, [r2, #88]	@ 0x58
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80059b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d055      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80059d8:	d033      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80059da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80059de:	d82c      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e4:	d02f      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80059e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ea:	d826      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80059f0:	d02b      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80059f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80059f6:	d820      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059fc:	d012      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80059fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a02:	d81a      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d022      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a0c:	d115      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a12:	3308      	adds	r3, #8
 8005a14:	2100      	movs	r1, #0
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fdee 	bl	80065f8 <RCCEx_PLL2_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a22:	e015      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a28:	3328      	adds	r3, #40	@ 0x28
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fe95 	bl	800675c <RCCEx_PLL3_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a38:	e00a      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a40:	e006      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a42:	bf00      	nop
 8005a44:	e004      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a46:	bf00      	nop
 8005a48:	e002      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a58:	4ba1      	ldr	r3, [pc, #644]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a68:	4a9d      	ldr	r2, [pc, #628]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a6e:	e003      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f002 0308 	and.w	r3, r2, #8
 8005a84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	d01e      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	3328      	adds	r3, #40	@ 0x28
 8005aac:	2102      	movs	r1, #2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fe54 	bl	800675c <RCCEx_PLL3_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ac0:	4b87      	ldr	r3, [pc, #540]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad0:	4a83      	ldr	r2, [pc, #524]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f002 0310 	and.w	r3, r2, #16
 8005ae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005aec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005af0:	460b      	mov	r3, r1
 8005af2:	4313      	orrs	r3, r2
 8005af4:	d01e      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b02:	d10c      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	3328      	adds	r3, #40	@ 0x28
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe25 	bl	800675c <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b1e:	4b70      	ldr	r3, [pc, #448]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d03e      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b60:	d022      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b66:	d81b      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b70:	d00b      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005b72:	e015      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b78:	3308      	adds	r3, #8
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fd3b 	bl	80065f8 <RCCEx_PLL2_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b88:	e00f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	3328      	adds	r3, #40	@ 0x28
 8005b90:	2102      	movs	r1, #2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fde2 	bl	800675c <RCCEx_PLL3_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bc2:	4a47      	ldr	r2, [pc, #284]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005bde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005be0:	2300      	movs	r3, #0
 8005be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005be4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005be8:	460b      	mov	r3, r1
 8005bea:	4313      	orrs	r3, r2
 8005bec:	d03b      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bfa:	d01f      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005bfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c00:	d818      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c06:	d003      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005c08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c0c:	d007      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005c0e:	e011      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4b33      	ldr	r3, [pc, #204]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	4a32      	ldr	r2, [pc, #200]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c1c:	e00f      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c22:	3328      	adds	r3, #40	@ 0x28
 8005c24:	2101      	movs	r1, #1
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fd98 	bl	800675c <RCCEx_PLL3_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c32:	e004      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c3a:	e000      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c46:	4b26      	ldr	r3, [pc, #152]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	4a22      	ldr	r2, [pc, #136]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c5c:	e003      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c72:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c74:	2300      	movs	r3, #0
 8005c76:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	d034      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c90:	d007      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005c92:	e011      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c94:	4b12      	ldr	r3, [pc, #72]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ca0:	e00e      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	2102      	movs	r1, #2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fca4 	bl	80065f8 <RCCEx_PLL2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ccc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	4a02      	ldr	r2, [pc, #8]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cdc:	e006      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005cde:	bf00      	nop
 8005ce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005d02:	460b      	mov	r3, r1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	d00c      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	3328      	adds	r3, #40	@ 0x28
 8005d0e:	2102      	movs	r1, #2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fd23 	bl	800675c <RCCEx_PLL3_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d30:	2300      	movs	r3, #0
 8005d32:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	d038      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d4a:	d018      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005d4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d50:	d811      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d56:	d014      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5c:	d80b      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d011      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d66:	d106      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d68:	4bc3      	ldr	r3, [pc, #780]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6c:	4ac2      	ldr	r2, [pc, #776]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d74:	e008      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d7c:	e004      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d90:	4bb9      	ldr	r3, [pc, #740]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da0:	4ab5      	ldr	r2, [pc, #724]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005da2:	430b      	orrs	r3, r1
 8005da4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	d009      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005dcc:	4baa      	ldr	r3, [pc, #680]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dda:	4aa7      	ldr	r2, [pc, #668]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005dec:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dee:	2300      	movs	r3, #0
 8005df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005df2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005df6:	460b      	mov	r3, r1
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005dfc:	4b9e      	ldr	r3, [pc, #632]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e0c:	4a9a      	ldr	r2, [pc, #616]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e20:	2300      	movs	r3, #0
 8005e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e2e:	4b92      	ldr	r3, [pc, #584]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e32:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e3c:	4a8e      	ldr	r2, [pc, #568]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005e4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e50:	2300      	movs	r3, #0
 8005e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d00e      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e5e:	4b86      	ldr	r3, [pc, #536]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	4a85      	ldr	r2, [pc, #532]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e68:	6113      	str	r3, [r2, #16]
 8005e6a:	4b83      	ldr	r3, [pc, #524]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e6c:	6919      	ldr	r1, [r3, #16]
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005e76:	4a80      	ldr	r2, [pc, #512]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e92:	460b      	mov	r3, r1
 8005e94:	4313      	orrs	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e98:	4b77      	ldr	r3, [pc, #476]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea6:	4a74      	ldr	r2, [pc, #464]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eba:	2300      	movs	r3, #0
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ebe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d00a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ec8:	4b6b      	ldr	r3, [pc, #428]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ecc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ed8:	4a67      	ldr	r2, [pc, #412]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ef0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d011      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	3308      	adds	r3, #8
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fb78 	bl	80065f8 <RCCEx_PLL2_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	2100      	movs	r1, #0
 8005f28:	6239      	str	r1, [r7, #32]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f34:	460b      	mov	r3, r1
 8005f36:	4313      	orrs	r3, r2
 8005f38:	d011      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	3308      	adds	r3, #8
 8005f40:	2101      	movs	r1, #1
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fb58 	bl	80065f8 <RCCEx_PLL2_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	2100      	movs	r1, #0
 8005f68:	61b9      	str	r1, [r7, #24]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	61fb      	str	r3, [r7, #28]
 8005f70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f74:	460b      	mov	r3, r1
 8005f76:	4313      	orrs	r3, r2
 8005f78:	d011      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7e:	3308      	adds	r3, #8
 8005f80:	2102      	movs	r1, #2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fb38 	bl	80065f8 <RCCEx_PLL2_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	6139      	str	r1, [r7, #16]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d011      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbe:	3328      	adds	r3, #40	@ 0x28
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fbca 	bl	800675c <RCCEx_PLL3_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	d011      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffe:	3328      	adds	r3, #40	@ 0x28
 8006000:	2101      	movs	r1, #1
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fbaa 	bl	800675c <RCCEx_PLL3_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800600e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	2100      	movs	r1, #0
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006034:	460b      	mov	r3, r1
 8006036:	4313      	orrs	r3, r2
 8006038:	d011      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	3328      	adds	r3, #40	@ 0x28
 8006040:	2102      	movs	r1, #2
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fb8a 	bl	800675c <RCCEx_PLL3_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800605e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006078:	58024400 	.word	0x58024400

0800607c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006080:	f7fe fd96 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8006084:	4602      	mov	r2, r0
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	4904      	ldr	r1, [pc, #16]	@ (80060a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006092:	5ccb      	ldrb	r3, [r1, r3]
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	58024400 	.word	0x58024400
 80060a4:	0800c2fc 	.word	0x0800c2fc

080060a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b089      	sub	sp, #36	@ 0x24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80060ba:	4b9f      	ldr	r3, [pc, #636]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	0b1b      	lsrs	r3, r3, #12
 80060c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80060d2:	4b99      	ldr	r3, [pc, #612]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d6:	08db      	lsrs	r3, r3, #3
 80060d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8111 	beq.w	8006318 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	f000 8083 	beq.w	8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b02      	cmp	r3, #2
 8006102:	f200 80a1 	bhi.w	8006248 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d056      	beq.n	80061c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006112:	e099      	b.n	8006248 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006114:	4b88      	ldr	r3, [pc, #544]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02d      	beq.n	800617c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006120:	4b85      	ldr	r3, [pc, #532]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	08db      	lsrs	r3, r3, #3
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	4a84      	ldr	r2, [pc, #528]	@ (800633c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b7b      	ldr	r3, [pc, #492]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800614c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615a:	ed97 6a03 	vldr	s12, [r7, #12]
 800615e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800617a:	e087      	b.n	800628c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800618a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618e:	4b6a      	ldr	r3, [pc, #424]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619e:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061be:	e065      	b.n	800628c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d2:	4b59      	ldr	r3, [pc, #356]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006202:	e043      	b.n	800628c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800634c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006216:	4b48      	ldr	r3, [pc, #288]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006226:	ed97 6a03 	vldr	s12, [r7, #12]
 800622a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800622e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800623a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006246:	e021      	b.n	800628c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800625a:	4b37      	ldr	r3, [pc, #220]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626a:	ed97 6a03 	vldr	s12, [r7, #12]
 800626e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800627a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800627e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800628a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800628c:	4b2a      	ldr	r3, [pc, #168]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	0a5b      	lsrs	r3, r3, #9
 8006292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b2:	ee17 2a90 	vmov	r2, s15
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	0c1b      	lsrs	r3, r3, #16
 80062c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e0:	ee17 2a90 	vmov	r2, s15
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80062e8:	4b13      	ldr	r3, [pc, #76]	@ (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006302:	edd7 6a07 	vldr	s13, [r7, #28]
 8006306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800630e:	ee17 2a90 	vmov	r2, s15
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006316:	e008      	b.n	800632a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	609a      	str	r2, [r3, #8]
}
 800632a:	bf00      	nop
 800632c:	3724      	adds	r7, #36	@ 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
 800633c:	03d09000 	.word	0x03d09000
 8006340:	46000000 	.word	0x46000000
 8006344:	4c742400 	.word	0x4c742400
 8006348:	4a742400 	.word	0x4a742400
 800634c:	4bbebc20 	.word	0x4bbebc20

08006350 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	@ 0x24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006358:	4ba1      	ldr	r3, [pc, #644]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006362:	4b9f      	ldr	r3, [pc, #636]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	0d1b      	lsrs	r3, r3, #20
 8006368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800636c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800636e:	4b9c      	ldr	r3, [pc, #624]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800637a:	4b99      	ldr	r3, [pc, #612]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	08db      	lsrs	r3, r3, #3
 8006380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006392:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8111 	beq.w	80065c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	f000 8083 	beq.w	80064ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	f200 80a1 	bhi.w	80064f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d056      	beq.n	8006468 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063ba:	e099      	b.n	80064f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063bc:	4b88      	ldr	r3, [pc, #544]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02d      	beq.n	8006424 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063c8:	4b85      	ldr	r3, [pc, #532]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	08db      	lsrs	r3, r3, #3
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	4a84      	ldr	r2, [pc, #528]	@ (80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
 80063d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f2:	4b7b      	ldr	r3, [pc, #492]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006402:	ed97 6a03 	vldr	s12, [r7, #12]
 8006406:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800640a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006422:	e087      	b.n	8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006436:	4b6a      	ldr	r3, [pc, #424]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006446:	ed97 6a03 	vldr	s12, [r7, #12]
 800644a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800644e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800645a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006466:	e065      	b.n	8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647a:	4b59      	ldr	r3, [pc, #356]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648a:	ed97 6a03 	vldr	s12, [r7, #12]
 800648e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800649e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064aa:	e043      	b.n	8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064be:	4b48      	ldr	r3, [pc, #288]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80064d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ee:	e021      	b.n	8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006502:	4b37      	ldr	r3, [pc, #220]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006512:	ed97 6a03 	vldr	s12, [r7, #12]
 8006516:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800651a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006532:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006534:	4b2a      	ldr	r3, [pc, #168]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	0a5b      	lsrs	r3, r3, #9
 800653a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800654a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800654e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800655a:	ee17 2a90 	vmov	r2, s15
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006562:	4b1f      	ldr	r3, [pc, #124]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	0c1b      	lsrs	r3, r3, #16
 8006568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006574:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800657c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006588:	ee17 2a90 	vmov	r2, s15
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006590:	4b13      	ldr	r3, [pc, #76]	@ (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006594:	0e1b      	lsrs	r3, r3, #24
 8006596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b6:	ee17 2a90 	vmov	r2, s15
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065be:	e008      	b.n	80065d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]
}
 80065d2:	bf00      	nop
 80065d4:	3724      	adds	r7, #36	@ 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400
 80065e4:	03d09000 	.word	0x03d09000
 80065e8:	46000000 	.word	0x46000000
 80065ec:	4c742400 	.word	0x4c742400
 80065f0:	4a742400 	.word	0x4a742400
 80065f4:	4bbebc20 	.word	0x4bbebc20

080065f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006606:	4b53      	ldr	r3, [pc, #332]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b03      	cmp	r3, #3
 8006610:	d101      	bne.n	8006616 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e099      	b.n	800674a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006616:	4b4f      	ldr	r3, [pc, #316]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a4e      	ldr	r2, [pc, #312]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 800661c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006622:	f7fc fb5b 	bl	8002cdc <HAL_GetTick>
 8006626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006628:	e008      	b.n	800663c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800662a:	f7fc fb57 	bl	8002cdc <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e086      	b.n	800674a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800663c:	4b45      	ldr	r3, [pc, #276]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1f0      	bne.n	800662a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006648:	4b42      	ldr	r3, [pc, #264]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 800664a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	031b      	lsls	r3, r3, #12
 8006656:	493f      	ldr	r1, [pc, #252]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 8006658:	4313      	orrs	r3, r2
 800665a:	628b      	str	r3, [r1, #40]	@ 0x28
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	3b01      	subs	r3, #1
 8006662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	3b01      	subs	r3, #1
 800666c:	025b      	lsls	r3, r3, #9
 800666e:	b29b      	uxth	r3, r3
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	3b01      	subs	r3, #1
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	3b01      	subs	r3, #1
 8006686:	061b      	lsls	r3, r3, #24
 8006688:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800668c:	4931      	ldr	r1, [pc, #196]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006692:	4b30      	ldr	r3, [pc, #192]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	492d      	ldr	r1, [pc, #180]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	f023 0220 	bic.w	r2, r3, #32
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	4928      	ldr	r1, [pc, #160]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066b6:	4b27      	ldr	r3, [pc, #156]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	4a26      	ldr	r2, [pc, #152]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066bc:	f023 0310 	bic.w	r3, r3, #16
 80066c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066c2:	4b24      	ldr	r3, [pc, #144]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066c6:	4b24      	ldr	r3, [pc, #144]	@ (8006758 <RCCEx_PLL2_Config+0x160>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	69d2      	ldr	r2, [r2, #28]
 80066ce:	00d2      	lsls	r2, r2, #3
 80066d0:	4920      	ldr	r1, [pc, #128]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	4a1e      	ldr	r2, [pc, #120]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066dc:	f043 0310 	orr.w	r3, r3, #16
 80066e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	4a19      	ldr	r2, [pc, #100]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066f4:	e00f      	b.n	8006716 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d106      	bne.n	800670a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066fc:	4b15      	ldr	r3, [pc, #84]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	4a14      	ldr	r2, [pc, #80]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 8006702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006706:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006708:	e005      	b.n	8006716 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800670a:	4b12      	ldr	r3, [pc, #72]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	4a11      	ldr	r2, [pc, #68]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 8006710:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006714:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006716:	4b0f      	ldr	r3, [pc, #60]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a0e      	ldr	r2, [pc, #56]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 800671c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006722:	f7fc fadb 	bl	8002cdc <HAL_GetTick>
 8006726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006728:	e008      	b.n	800673c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800672a:	f7fc fad7 	bl	8002cdc <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e006      	b.n	800674a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800673c:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <RCCEx_PLL2_Config+0x15c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	58024400 	.word	0x58024400
 8006758:	ffff0007 	.word	0xffff0007

0800675c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800676a:	4b53      	ldr	r3, [pc, #332]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 800676c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d101      	bne.n	800677a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e099      	b.n	80068ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800677a:	4b4f      	ldr	r3, [pc, #316]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a4e      	ldr	r2, [pc, #312]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006786:	f7fc faa9 	bl	8002cdc <HAL_GetTick>
 800678a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800678c:	e008      	b.n	80067a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800678e:	f7fc faa5 	bl	8002cdc <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e086      	b.n	80068ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067a0:	4b45      	ldr	r3, [pc, #276]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f0      	bne.n	800678e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067ac:	4b42      	ldr	r3, [pc, #264]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	051b      	lsls	r3, r3, #20
 80067ba:	493f      	ldr	r1, [pc, #252]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	628b      	str	r3, [r1, #40]	@ 0x28
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	025b      	lsls	r3, r3, #9
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	3b01      	subs	r3, #1
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	061b      	lsls	r3, r3, #24
 80067ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067f0:	4931      	ldr	r1, [pc, #196]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067f6:	4b30      	ldr	r3, [pc, #192]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	492d      	ldr	r1, [pc, #180]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006804:	4313      	orrs	r3, r2
 8006806:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006808:	4b2b      	ldr	r3, [pc, #172]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	4928      	ldr	r1, [pc, #160]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006816:	4313      	orrs	r3, r2
 8006818:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800681a:	4b27      	ldr	r3, [pc, #156]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 800681c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681e:	4a26      	ldr	r2, [pc, #152]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006826:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800682a:	4b24      	ldr	r3, [pc, #144]	@ (80068bc <RCCEx_PLL3_Config+0x160>)
 800682c:	4013      	ands	r3, r2
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	69d2      	ldr	r2, [r2, #28]
 8006832:	00d2      	lsls	r2, r2, #3
 8006834:	4920      	ldr	r1, [pc, #128]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006836:	4313      	orrs	r3, r2
 8006838:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800683a:	4b1f      	ldr	r3, [pc, #124]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	4a1e      	ldr	r2, [pc, #120]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800684c:	4b1a      	ldr	r3, [pc, #104]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	4a19      	ldr	r2, [pc, #100]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006852:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006856:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006858:	e00f      	b.n	800687a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006860:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	4a14      	ldr	r2, [pc, #80]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006866:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800686a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800686c:	e005      	b.n	800687a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800686e:	4b12      	ldr	r3, [pc, #72]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	4a11      	ldr	r2, [pc, #68]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006874:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006878:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800687a:	4b0f      	ldr	r3, [pc, #60]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a0e      	ldr	r2, [pc, #56]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006886:	f7fc fa29 	bl	8002cdc <HAL_GetTick>
 800688a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800688c:	e008      	b.n	80068a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800688e:	f7fc fa25 	bl	8002cdc <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e006      	b.n	80068ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <RCCEx_PLL3_Config+0x15c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	58024400 	.word	0x58024400
 80068bc:	ffff0007 	.word	0xffff0007

080068c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e10f      	b.n	8006af2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a87      	ldr	r2, [pc, #540]	@ (8006afc <HAL_SPI_Init+0x23c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <HAL_SPI_Init+0x42>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a86      	ldr	r2, [pc, #536]	@ (8006b00 <HAL_SPI_Init+0x240>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00a      	beq.n	8006902 <HAL_SPI_Init+0x42>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a84      	ldr	r2, [pc, #528]	@ (8006b04 <HAL_SPI_Init+0x244>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d005      	beq.n	8006902 <HAL_SPI_Init+0x42>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	2b0f      	cmp	r3, #15
 80068fc:	d901      	bls.n	8006902 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e0f7      	b.n	8006af2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 ff4c 	bl	80077a0 <SPI_GetPacketSize>
 8006908:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7b      	ldr	r2, [pc, #492]	@ (8006afc <HAL_SPI_Init+0x23c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00c      	beq.n	800692e <HAL_SPI_Init+0x6e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a79      	ldr	r2, [pc, #484]	@ (8006b00 <HAL_SPI_Init+0x240>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d007      	beq.n	800692e <HAL_SPI_Init+0x6e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a78      	ldr	r2, [pc, #480]	@ (8006b04 <HAL_SPI_Init+0x244>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d002      	beq.n	800692e <HAL_SPI_Init+0x6e>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b08      	cmp	r3, #8
 800692c:	d811      	bhi.n	8006952 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006932:	4a72      	ldr	r2, [pc, #456]	@ (8006afc <HAL_SPI_Init+0x23c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d009      	beq.n	800694c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a70      	ldr	r2, [pc, #448]	@ (8006b00 <HAL_SPI_Init+0x240>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_SPI_Init+0x8c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a6f      	ldr	r2, [pc, #444]	@ (8006b04 <HAL_SPI_Init+0x244>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d104      	bne.n	8006956 <HAL_SPI_Init+0x96>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b10      	cmp	r3, #16
 8006950:	d901      	bls.n	8006956 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0cd      	b.n	8006af2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fb fc68 	bl	8002240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006992:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800699c:	d119      	bne.n	80069d2 <HAL_SPI_Init+0x112>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069a6:	d103      	bne.n	80069b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069c0:	d107      	bne.n	80069d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00f      	beq.n	80069fe <HAL_SPI_Init+0x13e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2b06      	cmp	r3, #6
 80069e4:	d90b      	bls.n	80069fe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	e007      	b.n	8006a0e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69da      	ldr	r2, [r3, #28]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	431a      	orrs	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a20:	ea42 0103 	orr.w	r1, r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a6e:	ea42 0103 	orr.w	r1, r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d113      	bne.n	8006aae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006aac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40013000 	.word	0x40013000
 8006b00:	40003800 	.word	0x40003800
 8006b04:	40003c00 	.word	0x40003c00

08006b08 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e01b      	b.n	8006b52 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fb fc0a 	bl	800234c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08e      	sub	sp, #56	@ 0x38
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3320      	adds	r3, #32
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3330      	adds	r3, #48	@ 0x30
 8006b78:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3301      	adds	r3, #1
 8006b84:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b86:	f7fc f8a9 	bl	8002cdc <HAL_GetTick>
 8006b8a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006b8c:	887b      	ldrh	r3, [r7, #2]
 8006b8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006b90:	887b      	ldrh	r3, [r7, #2]
 8006b92:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d001      	beq.n	8006ba4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e310      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_SPI_TransmitReceive+0x5a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_SPI_TransmitReceive+0x5a>
 8006bb0:	887b      	ldrh	r3, [r7, #2]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e305      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_SPI_TransmitReceive+0x6c>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e2fe      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x66a>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2205      	movs	r2, #5
 8006bd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	887a      	ldrh	r2, [r7, #2]
 8006bea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	887a      	ldrh	r2, [r7, #2]
 8006bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	887a      	ldrh	r2, [r7, #2]
 8006c00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	887a      	ldrh	r2, [r7, #2]
 8006c08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006c26:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a70      	ldr	r2, [pc, #448]	@ (8006df0 <HAL_SPI_TransmitReceive+0x294>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d009      	beq.n	8006c46 <HAL_SPI_TransmitReceive+0xea>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a6f      	ldr	r2, [pc, #444]	@ (8006df4 <HAL_SPI_TransmitReceive+0x298>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d004      	beq.n	8006c46 <HAL_SPI_TransmitReceive+0xea>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6d      	ldr	r2, [pc, #436]	@ (8006df8 <HAL_SPI_TransmitReceive+0x29c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d102      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006c46:	2310      	movs	r3, #16
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c4a:	e001      	b.n	8006c50 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b69      	ldr	r3, [pc, #420]	@ (8006dfc <HAL_SPI_TransmitReceive+0x2a0>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	8879      	ldrh	r1, [r7, #2]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c7c:	d107      	bne.n	8006c8e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	f240 80a2 	bls.w	8006ddc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9a:	089b      	lsrs	r3, r3, #2
 8006c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c9e:	e094      	b.n	8006dca <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d120      	bne.n	8006cf0 <HAL_SPI_TransmitReceive+0x194>
 8006cae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01d      	beq.n	8006cf0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006cb4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006cb6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d217      	bcs.n	8006cf0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	1d1a      	adds	r2, r3, #4
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cee:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006cf8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d065      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d118      	bne.n	8006d3e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d1c:	1d1a      	adds	r2, r3, #4
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d3c:	e045      	b.n	8006dca <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d3e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006d40:	8bfb      	ldrh	r3, [r7, #30]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d21d      	bcs.n	8006d82 <HAL_SPI_TransmitReceive+0x226>
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d018      	beq.n	8006d82 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d5a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d60:	1d1a      	adds	r2, r3, #4
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d80:	e023      	b.n	8006dca <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d82:	f7fb ffab 	bl	8002cdc <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d803      	bhi.n	8006d9a <HAL_SPI_TransmitReceive+0x23e>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d102      	bne.n	8006da0 <HAL_SPI_TransmitReceive+0x244>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d114      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fc2f 	bl	8007604 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e1fd      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006dca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f af67 	bne.w	8006ca0 <HAL_SPI_TransmitReceive+0x144>
 8006dd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f47f af63 	bne.w	8006ca0 <HAL_SPI_TransmitReceive+0x144>
 8006dda:	e1ce      	b.n	800717a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	2b07      	cmp	r3, #7
 8006de2:	f240 81c2 	bls.w	800716a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006dec:	e0c9      	b.n	8006f82 <HAL_SPI_TransmitReceive+0x426>
 8006dee:	bf00      	nop
 8006df0:	40013000 	.word	0x40013000
 8006df4:	40003800 	.word	0x40003800
 8006df8:	40003c00 	.word	0x40003c00
 8006dfc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d11f      	bne.n	8006e4e <HAL_SPI_TransmitReceive+0x2f2>
 8006e0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01c      	beq.n	8006e4e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006e14:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006e16:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d216      	bcs.n	8006e4e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e24:	881a      	ldrh	r2, [r3, #0]
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2e:	1c9a      	adds	r2, r3, #2
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006e56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8092 	beq.w	8006f82 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d118      	bne.n	8006e9e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	8812      	ldrh	r2, [r2, #0]
 8006e74:	b292      	uxth	r2, r2
 8006e76:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e9a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006e9c:	e071      	b.n	8006f82 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e9e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006ea0:	8bfb      	ldrh	r3, [r7, #30]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d228      	bcs.n	8006ef8 <HAL_SPI_TransmitReceive+0x39c>
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d023      	beq.n	8006ef8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb4:	6a3a      	ldr	r2, [r7, #32]
 8006eb6:	8812      	ldrh	r2, [r2, #0]
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	8812      	ldrh	r2, [r2, #0]
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed6:	1c9a      	adds	r2, r3, #2
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b02      	subs	r3, #2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ef4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ef6:	e044      	b.n	8006f82 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006ef8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d11d      	bne.n	8006f3a <HAL_SPI_TransmitReceive+0x3de>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d018      	beq.n	8006f3a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f0c:	6a3a      	ldr	r2, [r7, #32]
 8006f0e:	8812      	ldrh	r2, [r2, #0]
 8006f10:	b292      	uxth	r2, r2
 8006f12:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f18:	1c9a      	adds	r2, r3, #2
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f36:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f38:	e023      	b.n	8006f82 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f3a:	f7fb fecf 	bl	8002cdc <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d803      	bhi.n	8006f52 <HAL_SPI_TransmitReceive+0x3f6>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d102      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x3fc>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d114      	bne.n	8006f82 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fb53 	bl	8007604 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e121      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006f82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f47f af3b 	bne.w	8006e00 <HAL_SPI_TransmitReceive+0x2a4>
 8006f8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f47f af37 	bne.w	8006e00 <HAL_SPI_TransmitReceive+0x2a4>
 8006f92:	e0f2      	b.n	800717a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d121      	bne.n	8006fe6 <HAL_SPI_TransmitReceive+0x48a>
 8006fa2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01e      	beq.n	8006fe6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006fa8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006faa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fae:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d218      	bcs.n	8006fe6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3320      	adds	r3, #32
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fe4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006fee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80ba 	beq.w	800716a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	d11b      	bne.n	800703c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007038:	853b      	strh	r3, [r7, #40]	@ 0x28
 800703a:	e096      	b.n	800716a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800703c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800703e:	8bfb      	ldrh	r3, [r7, #30]
 8007040:	429a      	cmp	r2, r3
 8007042:	d24a      	bcs.n	80070da <HAL_SPI_TransmitReceive+0x57e>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d045      	beq.n	80070da <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b04      	subs	r3, #4
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070d8:	e047      	b.n	800716a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80070da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d820      	bhi.n	8007122 <HAL_SPI_TransmitReceive+0x5c6>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01b      	beq.n	8007122 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800711e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007120:	e023      	b.n	800716a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007122:	f7fb fddb 	bl	8002cdc <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800712e:	429a      	cmp	r2, r3
 8007130:	d803      	bhi.n	800713a <HAL_SPI_TransmitReceive+0x5de>
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d102      	bne.n	8007140 <HAL_SPI_TransmitReceive+0x5e4>
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	d114      	bne.n	800716a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 fa5f 	bl	8007604 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e02d      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800716a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800716c:	2b00      	cmp	r3, #0
 800716e:	f47f af11 	bne.w	8006f94 <HAL_SPI_TransmitReceive+0x438>
 8007172:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f af0d 	bne.w	8006f94 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	2200      	movs	r2, #0
 8007182:	2108      	movs	r1, #8
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fadd 	bl	8007744 <SPI_WaitOnFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fa2f 	bl	8007604 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3730      	adds	r7, #48	@ 0x30
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	@ 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80071e8:	6a3a      	ldr	r2, [r7, #32]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4013      	ands	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007202:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3330      	adds	r3, #48	@ 0x30
 800720a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007212:	2b00      	cmp	r3, #0
 8007214:	d010      	beq.n	8007238 <HAL_SPI_IRQHandler+0x68>
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800722e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f9c3 	bl	80075bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007236:	e192      	b.n	800755e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d113      	bne.n	800726a <HAL_SPI_IRQHandler+0x9a>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10e      	bne.n	800726a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
    handled = 1UL;
 8007266:	2301      	movs	r3, #1
 8007268:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10f      	bne.n	8007294 <HAL_SPI_IRQHandler+0xc4>
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
    handled = 1UL;
 8007290:	2301      	movs	r3, #1
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10f      	bne.n	80072be <HAL_SPI_IRQHandler+0xee>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d105      	bne.n	80072be <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
    handled = 1UL;
 80072ba:	2301      	movs	r3, #1
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 8147 	bne.w	8007554 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 808b 	beq.w	80073e8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0208 	orr.w	r2, r2, #8
 80072e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699a      	ldr	r2, [r3, #24]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f042 0210 	orr.w	r2, r2, #16
 80072f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699a      	ldr	r2, [r3, #24]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007300:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0208 	bic.w	r2, r2, #8
 8007310:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d13d      	bne.n	800739c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007320:	e036      	b.n	8007390 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b0f      	cmp	r3, #15
 8007328:	d90b      	bls.n	8007342 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007332:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007334:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800733a:	1d1a      	adds	r2, r3, #4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	665a      	str	r2, [r3, #100]	@ 0x64
 8007340:	e01d      	b.n	800737e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b07      	cmp	r3, #7
 8007348:	d90b      	bls.n	8007362 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	8812      	ldrh	r2, [r2, #0]
 8007352:	b292      	uxth	r2, r2
 8007354:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800735a:	1c9a      	adds	r2, r3, #2
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	665a      	str	r2, [r3, #100]	@ 0x64
 8007360:	e00d      	b.n	800737e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1c2      	bne.n	8007322 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f931 	bl	8007604 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f8f7 	bl	80075a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80073ba:	e0d0      	b.n	800755e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	2b05      	cmp	r3, #5
 80073c0:	d103      	bne.n	80073ca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f8e6 	bl	8007594 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80073c8:	e0c6      	b.n	8007558 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80073ca:	7cfb      	ldrb	r3, [r7, #19]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d103      	bne.n	80073d8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f8d5 	bl	8007580 <HAL_SPI_RxCpltCallback>
    return;
 80073d6:	e0bf      	b.n	8007558 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80073d8:	7cfb      	ldrb	r3, [r7, #19]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	f040 80bc 	bne.w	8007558 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8c3 	bl	800756c <HAL_SPI_TxCpltCallback>
    return;
 80073e6:	e0b7      	b.n	8007558 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 80b5 	beq.w	800755e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00f      	beq.n	800741e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007404:	f043 0204 	orr.w	r2, r3, #4
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800741c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00f      	beq.n	8007448 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800742e:	f043 0201 	orr.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007446:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00f      	beq.n	8007472 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007458:	f043 0208 	orr.w	r2, r3, #8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007470:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00f      	beq.n	800749c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007482:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0220 	orr.w	r2, r2, #32
 800749a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d05a      	beq.n	800755c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6919      	ldr	r1, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4b28      	ldr	r3, [pc, #160]	@ (8007564 <HAL_SPI_IRQHandler+0x394>)
 80074c2:	400b      	ands	r3, r1
 80074c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80074cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80074d0:	d138      	bne.n	8007544 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80074e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d013      	beq.n	8007512 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007568 <HAL_SPI_IRQHandler+0x398>)
 80074f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fb fde6 	bl	80030c8 <HAL_DMA_Abort_IT>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007508:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007516:	2b00      	cmp	r3, #0
 8007518:	d020      	beq.n	800755c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800751e:	4a12      	ldr	r2, [pc, #72]	@ (8007568 <HAL_SPI_IRQHandler+0x398>)
 8007520:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007526:	4618      	mov	r0, r3
 8007528:	f7fb fdce 	bl	80030c8 <HAL_DMA_Abort_IT>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d014      	beq.n	800755c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007538:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007542:	e00b      	b.n	800755c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f82b 	bl	80075a8 <HAL_SPI_ErrorCallback>
    return;
 8007552:	e003      	b.n	800755c <HAL_SPI_IRQHandler+0x38c>
    return;
 8007554:	bf00      	nop
 8007556:	e002      	b.n	800755e <HAL_SPI_IRQHandler+0x38e>
    return;
 8007558:	bf00      	nop
 800755a:	e000      	b.n	800755e <HAL_SPI_IRQHandler+0x38e>
    return;
 800755c:	bf00      	nop
  }
}
 800755e:	3728      	adds	r7, #40	@ 0x28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	fffffc94 	.word	0xfffffc94
 8007568:	080075d1 	.word	0x080075d1

0800756c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff ffd6 	bl	80075a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0208 	orr.w	r2, r2, #8
 8007622:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0210 	orr.w	r2, r2, #16
 8007632:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6919      	ldr	r1, [r3, #16]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b3c      	ldr	r3, [pc, #240]	@ (8007740 <SPI_CloseTransfer+0x13c>)
 8007650:	400b      	ands	r3, r1
 8007652:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007662:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b04      	cmp	r3, #4
 800766e:	d014      	beq.n	800769a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00f      	beq.n	800769a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007680:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0220 	orr.w	r2, r2, #32
 8007698:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d014      	beq.n	80076d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00f      	beq.n	80076d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076b6:	f043 0204 	orr.w	r2, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00f      	beq.n	80076fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e0:	f043 0201 	orr.w	r2, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00f      	beq.n	8007724 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800770a:	f043 0208 	orr.w	r2, r3, #8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007722:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	fffffc90 	.word	0xfffffc90

08007744 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007754:	e010      	b.n	8007778 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007756:	f7fb fac1 	bl	8002cdc <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d803      	bhi.n	800776e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d102      	bne.n	8007774 <SPI_WaitOnFlagUntilTimeout+0x30>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e00f      	b.n	8007798 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4013      	ands	r3, r2
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	bf0c      	ite	eq
 8007788:	2301      	moveq	r3, #1
 800778a:	2300      	movne	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	461a      	mov	r2, r3
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	429a      	cmp	r2, r3
 8007794:	d0df      	beq.n	8007756 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	3307      	adds	r3, #7
 80077be:	08db      	lsrs	r3, r3, #3
 80077c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e042      	b.n	800786e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f83b 	bl	8007876 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2224      	movs	r2, #36	@ 0x24
 8007804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0201 	bic.w	r2, r2, #1
 8007816:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fe29 	bl	8008478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f8be 	bl	80079a8 <UART_SetConfig>
 800782c:	4603      	mov	r3, r0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e01b      	b.n	800786e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007844:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007854:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0201 	orr.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fea8 	bl	80085bc <UART_CheckIdleState>
 800786c:	4603      	mov	r3, r0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b08a      	sub	sp, #40	@ 0x28
 800788e:	af02      	add	r7, sp, #8
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	603b      	str	r3, [r7, #0]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d17b      	bne.n	800799c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_UART_Transmit+0x26>
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e074      	b.n	800799e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2221      	movs	r2, #33	@ 0x21
 80078c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078c4:	f7fb fa0a 	bl	8002cdc <HAL_GetTick>
 80078c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078e2:	d108      	bne.n	80078f6 <HAL_UART_Transmit+0x6c>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d104      	bne.n	80078f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	61bb      	str	r3, [r7, #24]
 80078f4:	e003      	b.n	80078fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078fe:	e030      	b.n	8007962 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2200      	movs	r2, #0
 8007908:	2180      	movs	r1, #128	@ 0x80
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 ff00 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e03d      	b.n	800799e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10b      	bne.n	8007940 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007936:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	3302      	adds	r3, #2
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e007      	b.n	8007950 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3301      	adds	r3, #1
 800794e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1c8      	bne.n	8007900 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2200      	movs	r2, #0
 8007976:	2140      	movs	r1, #64	@ 0x40
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fec9 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2220      	movs	r2, #32
 8007988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e006      	b.n	800799e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e000      	b.n	800799e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800799c:	2302      	movs	r3, #2
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ac:	b092      	sub	sp, #72	@ 0x48
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4bbe      	ldr	r3, [pc, #760]	@ (8007cd0 <UART_SetConfig+0x328>)
 80079d8:	4013      	ands	r3, r2
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079e0:	430b      	orrs	r3, r1
 80079e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4ab3      	ldr	r2, [pc, #716]	@ (8007cd4 <UART_SetConfig+0x32c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d004      	beq.n	8007a14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a10:	4313      	orrs	r3, r2
 8007a12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	4baf      	ldr	r3, [pc, #700]	@ (8007cd8 <UART_SetConfig+0x330>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	f023 010f 	bic.w	r1, r3, #15
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4aa6      	ldr	r2, [pc, #664]	@ (8007cdc <UART_SetConfig+0x334>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d177      	bne.n	8007b38 <UART_SetConfig+0x190>
 8007a48:	4ba5      	ldr	r3, [pc, #660]	@ (8007ce0 <UART_SetConfig+0x338>)
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a50:	2b28      	cmp	r3, #40	@ 0x28
 8007a52:	d86d      	bhi.n	8007b30 <UART_SetConfig+0x188>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <UART_SetConfig+0xb4>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007b01 	.word	0x08007b01
 8007a60:	08007b31 	.word	0x08007b31
 8007a64:	08007b31 	.word	0x08007b31
 8007a68:	08007b31 	.word	0x08007b31
 8007a6c:	08007b31 	.word	0x08007b31
 8007a70:	08007b31 	.word	0x08007b31
 8007a74:	08007b31 	.word	0x08007b31
 8007a78:	08007b31 	.word	0x08007b31
 8007a7c:	08007b09 	.word	0x08007b09
 8007a80:	08007b31 	.word	0x08007b31
 8007a84:	08007b31 	.word	0x08007b31
 8007a88:	08007b31 	.word	0x08007b31
 8007a8c:	08007b31 	.word	0x08007b31
 8007a90:	08007b31 	.word	0x08007b31
 8007a94:	08007b31 	.word	0x08007b31
 8007a98:	08007b31 	.word	0x08007b31
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b31 	.word	0x08007b31
 8007aa4:	08007b31 	.word	0x08007b31
 8007aa8:	08007b31 	.word	0x08007b31
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b31 	.word	0x08007b31
 8007ab4:	08007b31 	.word	0x08007b31
 8007ab8:	08007b31 	.word	0x08007b31
 8007abc:	08007b19 	.word	0x08007b19
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b31 	.word	0x08007b31
 8007ac8:	08007b31 	.word	0x08007b31
 8007acc:	08007b31 	.word	0x08007b31
 8007ad0:	08007b31 	.word	0x08007b31
 8007ad4:	08007b31 	.word	0x08007b31
 8007ad8:	08007b31 	.word	0x08007b31
 8007adc:	08007b21 	.word	0x08007b21
 8007ae0:	08007b31 	.word	0x08007b31
 8007ae4:	08007b31 	.word	0x08007b31
 8007ae8:	08007b31 	.word	0x08007b31
 8007aec:	08007b31 	.word	0x08007b31
 8007af0:	08007b31 	.word	0x08007b31
 8007af4:	08007b31 	.word	0x08007b31
 8007af8:	08007b31 	.word	0x08007b31
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e222      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e21e      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e21a      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e216      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b20:	2320      	movs	r3, #32
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e212      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b28:	2340      	movs	r3, #64	@ 0x40
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e20e      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b30:	2380      	movs	r3, #128	@ 0x80
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e20a      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a69      	ldr	r2, [pc, #420]	@ (8007ce4 <UART_SetConfig+0x33c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d130      	bne.n	8007ba4 <UART_SetConfig+0x1fc>
 8007b42:	4b67      	ldr	r3, [pc, #412]	@ (8007ce0 <UART_SetConfig+0x338>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d826      	bhi.n	8007b9c <UART_SetConfig+0x1f4>
 8007b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <UART_SetConfig+0x1ac>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b6d 	.word	0x08007b6d
 8007b58:	08007b75 	.word	0x08007b75
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b8d 	.word	0x08007b8d
 8007b68:	08007b95 	.word	0x08007b95
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e1ec      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e1e8      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b82:	e1e4      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	e1e0      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b8c:	2320      	movs	r3, #32
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b92:	e1dc      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b94:	2340      	movs	r3, #64	@ 0x40
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e1d8      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007b9c:	2380      	movs	r3, #128	@ 0x80
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	e1d4      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a4f      	ldr	r2, [pc, #316]	@ (8007ce8 <UART_SetConfig+0x340>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d130      	bne.n	8007c10 <UART_SetConfig+0x268>
 8007bae:	4b4c      	ldr	r3, [pc, #304]	@ (8007ce0 <UART_SetConfig+0x338>)
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d826      	bhi.n	8007c08 <UART_SetConfig+0x260>
 8007bba:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <UART_SetConfig+0x218>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	08007be9 	.word	0x08007be9
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007bf9 	.word	0x08007bf9
 8007bd4:	08007c01 	.word	0x08007c01
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e1b6      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be6:	e1b2      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bee:	e1ae      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf6:	e1aa      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007bf8:	2320      	movs	r3, #32
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfe:	e1a6      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c00:	2340      	movs	r3, #64	@ 0x40
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c06:	e1a2      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c08:	2380      	movs	r3, #128	@ 0x80
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0e:	e19e      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a35      	ldr	r2, [pc, #212]	@ (8007cec <UART_SetConfig+0x344>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d130      	bne.n	8007c7c <UART_SetConfig+0x2d4>
 8007c1a:	4b31      	ldr	r3, [pc, #196]	@ (8007ce0 <UART_SetConfig+0x338>)
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	d826      	bhi.n	8007c74 <UART_SetConfig+0x2cc>
 8007c26:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <UART_SetConfig+0x284>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c45 	.word	0x08007c45
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c55 	.word	0x08007c55
 8007c38:	08007c5d 	.word	0x08007c5d
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4a:	e180      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c52:	e17c      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5a:	e178      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c62:	e174      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c64:	2320      	movs	r3, #32
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6a:	e170      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c6c:	2340      	movs	r3, #64	@ 0x40
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c72:	e16c      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c74:	2380      	movs	r3, #128	@ 0x80
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e168      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf0 <UART_SetConfig+0x348>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d142      	bne.n	8007d0c <UART_SetConfig+0x364>
 8007c86:	4b16      	ldr	r3, [pc, #88]	@ (8007ce0 <UART_SetConfig+0x338>)
 8007c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d838      	bhi.n	8007d04 <UART_SetConfig+0x35c>
 8007c92:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <UART_SetConfig+0x2f0>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb1 	.word	0x08007cb1
 8007c9c:	08007cb9 	.word	0x08007cb9
 8007ca0:	08007cc1 	.word	0x08007cc1
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cf5 	.word	0x08007cf5
 8007cac:	08007cfd 	.word	0x08007cfd
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e14a      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e146      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc6:	e142      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e13e      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007cd0:	cfff69f3 	.word	0xcfff69f3
 8007cd4:	58000c00 	.word	0x58000c00
 8007cd8:	11fff4ff 	.word	0x11fff4ff
 8007cdc:	40011000 	.word	0x40011000
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	40004400 	.word	0x40004400
 8007ce8:	40004800 	.word	0x40004800
 8007cec:	40004c00 	.word	0x40004c00
 8007cf0:	40005000 	.word	0x40005000
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e128      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007cfc:	2340      	movs	r3, #64	@ 0x40
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e124      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007d04:	2380      	movs	r3, #128	@ 0x80
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e120      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4acb      	ldr	r2, [pc, #812]	@ (8008040 <UART_SetConfig+0x698>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d176      	bne.n	8007e04 <UART_SetConfig+0x45c>
 8007d16:	4bcb      	ldr	r3, [pc, #812]	@ (8008044 <UART_SetConfig+0x69c>)
 8007d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d1e:	2b28      	cmp	r3, #40	@ 0x28
 8007d20:	d86c      	bhi.n	8007dfc <UART_SetConfig+0x454>
 8007d22:	a201      	add	r2, pc, #4	@ (adr r2, 8007d28 <UART_SetConfig+0x380>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007dcd 	.word	0x08007dcd
 8007d2c:	08007dfd 	.word	0x08007dfd
 8007d30:	08007dfd 	.word	0x08007dfd
 8007d34:	08007dfd 	.word	0x08007dfd
 8007d38:	08007dfd 	.word	0x08007dfd
 8007d3c:	08007dfd 	.word	0x08007dfd
 8007d40:	08007dfd 	.word	0x08007dfd
 8007d44:	08007dfd 	.word	0x08007dfd
 8007d48:	08007dd5 	.word	0x08007dd5
 8007d4c:	08007dfd 	.word	0x08007dfd
 8007d50:	08007dfd 	.word	0x08007dfd
 8007d54:	08007dfd 	.word	0x08007dfd
 8007d58:	08007dfd 	.word	0x08007dfd
 8007d5c:	08007dfd 	.word	0x08007dfd
 8007d60:	08007dfd 	.word	0x08007dfd
 8007d64:	08007dfd 	.word	0x08007dfd
 8007d68:	08007ddd 	.word	0x08007ddd
 8007d6c:	08007dfd 	.word	0x08007dfd
 8007d70:	08007dfd 	.word	0x08007dfd
 8007d74:	08007dfd 	.word	0x08007dfd
 8007d78:	08007dfd 	.word	0x08007dfd
 8007d7c:	08007dfd 	.word	0x08007dfd
 8007d80:	08007dfd 	.word	0x08007dfd
 8007d84:	08007dfd 	.word	0x08007dfd
 8007d88:	08007de5 	.word	0x08007de5
 8007d8c:	08007dfd 	.word	0x08007dfd
 8007d90:	08007dfd 	.word	0x08007dfd
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007dfd 	.word	0x08007dfd
 8007d9c:	08007dfd 	.word	0x08007dfd
 8007da0:	08007dfd 	.word	0x08007dfd
 8007da4:	08007dfd 	.word	0x08007dfd
 8007da8:	08007ded 	.word	0x08007ded
 8007dac:	08007dfd 	.word	0x08007dfd
 8007db0:	08007dfd 	.word	0x08007dfd
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007dfd 	.word	0x08007dfd
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007dfd 	.word	0x08007dfd
 8007dc4:	08007dfd 	.word	0x08007dfd
 8007dc8:	08007df5 	.word	0x08007df5
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e0bc      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e0b8      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e0b4      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e0b0      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007dec:	2320      	movs	r3, #32
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e0ac      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007df4:	2340      	movs	r3, #64	@ 0x40
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e0a8      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007dfc:	2380      	movs	r3, #128	@ 0x80
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e0a4      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a8f      	ldr	r2, [pc, #572]	@ (8008048 <UART_SetConfig+0x6a0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d130      	bne.n	8007e70 <UART_SetConfig+0x4c8>
 8007e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8008044 <UART_SetConfig+0x69c>)
 8007e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b05      	cmp	r3, #5
 8007e18:	d826      	bhi.n	8007e68 <UART_SetConfig+0x4c0>
 8007e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <UART_SetConfig+0x478>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e39 	.word	0x08007e39
 8007e24:	08007e41 	.word	0x08007e41
 8007e28:	08007e49 	.word	0x08007e49
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e59 	.word	0x08007e59
 8007e34:	08007e61 	.word	0x08007e61
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3e:	e086      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e46:	e082      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e07e      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e07a      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e58:	2320      	movs	r3, #32
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5e:	e076      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e60:	2340      	movs	r3, #64	@ 0x40
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e66:	e072      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e68:	2380      	movs	r3, #128	@ 0x80
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6e:	e06e      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a75      	ldr	r2, [pc, #468]	@ (800804c <UART_SetConfig+0x6a4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d130      	bne.n	8007edc <UART_SetConfig+0x534>
 8007e7a:	4b72      	ldr	r3, [pc, #456]	@ (8008044 <UART_SetConfig+0x69c>)
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	d826      	bhi.n	8007ed4 <UART_SetConfig+0x52c>
 8007e86:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <UART_SetConfig+0x4e4>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ea5 	.word	0x08007ea5
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007eb5 	.word	0x08007eb5
 8007e98:	08007ebd 	.word	0x08007ebd
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eaa:	e050      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007eac:	2304      	movs	r3, #4
 8007eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb2:	e04c      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e048      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e044      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eca:	e040      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007ecc:	2340      	movs	r3, #64	@ 0x40
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed2:	e03c      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007ed4:	2380      	movs	r3, #128	@ 0x80
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eda:	e038      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a5b      	ldr	r2, [pc, #364]	@ (8008050 <UART_SetConfig+0x6a8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d130      	bne.n	8007f48 <UART_SetConfig+0x5a0>
 8007ee6:	4b57      	ldr	r3, [pc, #348]	@ (8008044 <UART_SetConfig+0x69c>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d826      	bhi.n	8007f40 <UART_SetConfig+0x598>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <UART_SetConfig+0x550>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f11 	.word	0x08007f11
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	2302      	movs	r3, #2
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f16:	e01a      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1e:	e016      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007f20:	2308      	movs	r3, #8
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f26:	e012      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e00e      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007f30:	2320      	movs	r3, #32
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e00a      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007f38:	2340      	movs	r3, #64	@ 0x40
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e006      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007f40:	2380      	movs	r3, #128	@ 0x80
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e002      	b.n	8007f4e <UART_SetConfig+0x5a6>
 8007f48:	2380      	movs	r3, #128	@ 0x80
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a3f      	ldr	r2, [pc, #252]	@ (8008050 <UART_SetConfig+0x6a8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	f040 80f8 	bne.w	800814a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	dc46      	bgt.n	8007ff0 <UART_SetConfig+0x648>
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	f2c0 8082 	blt.w	800806c <UART_SetConfig+0x6c4>
 8007f68:	3b02      	subs	r3, #2
 8007f6a:	2b1e      	cmp	r3, #30
 8007f6c:	d87e      	bhi.n	800806c <UART_SetConfig+0x6c4>
 8007f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <UART_SetConfig+0x5cc>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007ff7 	.word	0x08007ff7
 8007f78:	0800806d 	.word	0x0800806d
 8007f7c:	08007fff 	.word	0x08007fff
 8007f80:	0800806d 	.word	0x0800806d
 8007f84:	0800806d 	.word	0x0800806d
 8007f88:	0800806d 	.word	0x0800806d
 8007f8c:	0800800f 	.word	0x0800800f
 8007f90:	0800806d 	.word	0x0800806d
 8007f94:	0800806d 	.word	0x0800806d
 8007f98:	0800806d 	.word	0x0800806d
 8007f9c:	0800806d 	.word	0x0800806d
 8007fa0:	0800806d 	.word	0x0800806d
 8007fa4:	0800806d 	.word	0x0800806d
 8007fa8:	0800806d 	.word	0x0800806d
 8007fac:	0800801f 	.word	0x0800801f
 8007fb0:	0800806d 	.word	0x0800806d
 8007fb4:	0800806d 	.word	0x0800806d
 8007fb8:	0800806d 	.word	0x0800806d
 8007fbc:	0800806d 	.word	0x0800806d
 8007fc0:	0800806d 	.word	0x0800806d
 8007fc4:	0800806d 	.word	0x0800806d
 8007fc8:	0800806d 	.word	0x0800806d
 8007fcc:	0800806d 	.word	0x0800806d
 8007fd0:	0800806d 	.word	0x0800806d
 8007fd4:	0800806d 	.word	0x0800806d
 8007fd8:	0800806d 	.word	0x0800806d
 8007fdc:	0800806d 	.word	0x0800806d
 8007fe0:	0800806d 	.word	0x0800806d
 8007fe4:	0800806d 	.word	0x0800806d
 8007fe8:	0800806d 	.word	0x0800806d
 8007fec:	0800805f 	.word	0x0800805f
 8007ff0:	2b40      	cmp	r3, #64	@ 0x40
 8007ff2:	d037      	beq.n	8008064 <UART_SetConfig+0x6bc>
 8007ff4:	e03a      	b.n	800806c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ff6:	f7fe f841 	bl	800607c <HAL_RCCEx_GetD3PCLK1Freq>
 8007ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ffc:	e03c      	b.n	8008078 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe f850 	bl	80060a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800800c:	e034      	b.n	8008078 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe f99c 	bl	8006350 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800801c:	e02c      	b.n	8008078 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800801e:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <UART_SetConfig+0x69c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d016      	beq.n	8008058 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800802a:	4b06      	ldr	r3, [pc, #24]	@ (8008044 <UART_SetConfig+0x69c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	4a07      	ldr	r2, [pc, #28]	@ (8008054 <UART_SetConfig+0x6ac>)
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800803c:	e01c      	b.n	8008078 <UART_SetConfig+0x6d0>
 800803e:	bf00      	nop
 8008040:	40011400 	.word	0x40011400
 8008044:	58024400 	.word	0x58024400
 8008048:	40007800 	.word	0x40007800
 800804c:	40007c00 	.word	0x40007c00
 8008050:	58000c00 	.word	0x58000c00
 8008054:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008058:	4b9d      	ldr	r3, [pc, #628]	@ (80082d0 <UART_SetConfig+0x928>)
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800805c:	e00c      	b.n	8008078 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800805e:	4b9d      	ldr	r3, [pc, #628]	@ (80082d4 <UART_SetConfig+0x92c>)
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008062:	e009      	b.n	8008078 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806a:	e005      	b.n	8008078 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008076:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 81de 	beq.w	800843c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	4a94      	ldr	r2, [pc, #592]	@ (80082d8 <UART_SetConfig+0x930>)
 8008086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808a:	461a      	mov	r2, r3
 800808c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008092:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	4613      	mov	r3, r2
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	4413      	add	r3, r2
 800809e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d305      	bcc.n	80080b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d903      	bls.n	80080b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80080b6:	e1c1      	b.n	800843c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ba:	2200      	movs	r2, #0
 80080bc:	60bb      	str	r3, [r7, #8]
 80080be:	60fa      	str	r2, [r7, #12]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c4:	4a84      	ldr	r2, [pc, #528]	@ (80082d8 <UART_SetConfig+0x930>)
 80080c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	2200      	movs	r2, #0
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080da:	f7f8 f951 	bl	8000380 <__aeabi_uldivmod>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4610      	mov	r0, r2
 80080e4:	4619      	mov	r1, r3
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	020b      	lsls	r3, r1, #8
 80080f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080f4:	0202      	lsls	r2, r0, #8
 80080f6:	6979      	ldr	r1, [r7, #20]
 80080f8:	6849      	ldr	r1, [r1, #4]
 80080fa:	0849      	lsrs	r1, r1, #1
 80080fc:	2000      	movs	r0, #0
 80080fe:	460c      	mov	r4, r1
 8008100:	4605      	mov	r5, r0
 8008102:	eb12 0804 	adds.w	r8, r2, r4
 8008106:	eb43 0905 	adc.w	r9, r3, r5
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	469a      	mov	sl, r3
 8008112:	4693      	mov	fp, r2
 8008114:	4652      	mov	r2, sl
 8008116:	465b      	mov	r3, fp
 8008118:	4640      	mov	r0, r8
 800811a:	4649      	mov	r1, r9
 800811c:	f7f8 f930 	bl	8000380 <__aeabi_uldivmod>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4613      	mov	r3, r2
 8008126:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800812e:	d308      	bcc.n	8008142 <UART_SetConfig+0x79a>
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008136:	d204      	bcs.n	8008142 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	e17c      	b.n	800843c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008148:	e178      	b.n	800843c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008152:	f040 80c5 	bne.w	80082e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008156:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800815a:	2b20      	cmp	r3, #32
 800815c:	dc48      	bgt.n	80081f0 <UART_SetConfig+0x848>
 800815e:	2b00      	cmp	r3, #0
 8008160:	db7b      	blt.n	800825a <UART_SetConfig+0x8b2>
 8008162:	2b20      	cmp	r3, #32
 8008164:	d879      	bhi.n	800825a <UART_SetConfig+0x8b2>
 8008166:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <UART_SetConfig+0x7c4>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	080081f7 	.word	0x080081f7
 8008170:	080081ff 	.word	0x080081ff
 8008174:	0800825b 	.word	0x0800825b
 8008178:	0800825b 	.word	0x0800825b
 800817c:	08008207 	.word	0x08008207
 8008180:	0800825b 	.word	0x0800825b
 8008184:	0800825b 	.word	0x0800825b
 8008188:	0800825b 	.word	0x0800825b
 800818c:	08008217 	.word	0x08008217
 8008190:	0800825b 	.word	0x0800825b
 8008194:	0800825b 	.word	0x0800825b
 8008198:	0800825b 	.word	0x0800825b
 800819c:	0800825b 	.word	0x0800825b
 80081a0:	0800825b 	.word	0x0800825b
 80081a4:	0800825b 	.word	0x0800825b
 80081a8:	0800825b 	.word	0x0800825b
 80081ac:	08008227 	.word	0x08008227
 80081b0:	0800825b 	.word	0x0800825b
 80081b4:	0800825b 	.word	0x0800825b
 80081b8:	0800825b 	.word	0x0800825b
 80081bc:	0800825b 	.word	0x0800825b
 80081c0:	0800825b 	.word	0x0800825b
 80081c4:	0800825b 	.word	0x0800825b
 80081c8:	0800825b 	.word	0x0800825b
 80081cc:	0800825b 	.word	0x0800825b
 80081d0:	0800825b 	.word	0x0800825b
 80081d4:	0800825b 	.word	0x0800825b
 80081d8:	0800825b 	.word	0x0800825b
 80081dc:	0800825b 	.word	0x0800825b
 80081e0:	0800825b 	.word	0x0800825b
 80081e4:	0800825b 	.word	0x0800825b
 80081e8:	0800825b 	.word	0x0800825b
 80081ec:	0800824d 	.word	0x0800824d
 80081f0:	2b40      	cmp	r3, #64	@ 0x40
 80081f2:	d02e      	beq.n	8008252 <UART_SetConfig+0x8aa>
 80081f4:	e031      	b.n	800825a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f6:	f7fc fd0b 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 80081fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081fc:	e033      	b.n	8008266 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081fe:	f7fc fd1d 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 8008202:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008204:	e02f      	b.n	8008266 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800820a:	4618      	mov	r0, r3
 800820c:	f7fd ff4c 	bl	80060a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008214:	e027      	b.n	8008266 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008216:	f107 0318 	add.w	r3, r7, #24
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe f898 	bl	8006350 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008224:	e01f      	b.n	8008266 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008226:	4b2d      	ldr	r3, [pc, #180]	@ (80082dc <UART_SetConfig+0x934>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008232:	4b2a      	ldr	r3, [pc, #168]	@ (80082dc <UART_SetConfig+0x934>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	08db      	lsrs	r3, r3, #3
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	4a24      	ldr	r2, [pc, #144]	@ (80082d0 <UART_SetConfig+0x928>)
 800823e:	fa22 f303 	lsr.w	r3, r2, r3
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008244:	e00f      	b.n	8008266 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008246:	4b22      	ldr	r3, [pc, #136]	@ (80082d0 <UART_SetConfig+0x928>)
 8008248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800824a:	e00c      	b.n	8008266 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800824c:	4b21      	ldr	r3, [pc, #132]	@ (80082d4 <UART_SetConfig+0x92c>)
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008250:	e009      	b.n	8008266 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008258:	e005      	b.n	8008266 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80e7 	beq.w	800843c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008272:	4a19      	ldr	r2, [pc, #100]	@ (80082d8 <UART_SetConfig+0x930>)
 8008274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008278:	461a      	mov	r2, r3
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008280:	005a      	lsls	r2, r3, #1
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	085b      	lsrs	r3, r3, #1
 8008288:	441a      	add	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d916      	bls.n	80082c8 <UART_SetConfig+0x920>
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a0:	d212      	bcs.n	80082c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f023 030f 	bic.w	r3, r3, #15
 80082aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80082ba:	4313      	orrs	r3, r2
 80082bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	e0b9      	b.n	800843c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082ce:	e0b5      	b.n	800843c <UART_SetConfig+0xa94>
 80082d0:	03d09000 	.word	0x03d09000
 80082d4:	003d0900 	.word	0x003d0900
 80082d8:	0800c318 	.word	0x0800c318
 80082dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80082e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	dc49      	bgt.n	800837c <UART_SetConfig+0x9d4>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	db7c      	blt.n	80083e6 <UART_SetConfig+0xa3e>
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d87a      	bhi.n	80083e6 <UART_SetConfig+0xa3e>
 80082f0:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <UART_SetConfig+0x950>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	08008383 	.word	0x08008383
 80082fc:	0800838b 	.word	0x0800838b
 8008300:	080083e7 	.word	0x080083e7
 8008304:	080083e7 	.word	0x080083e7
 8008308:	08008393 	.word	0x08008393
 800830c:	080083e7 	.word	0x080083e7
 8008310:	080083e7 	.word	0x080083e7
 8008314:	080083e7 	.word	0x080083e7
 8008318:	080083a3 	.word	0x080083a3
 800831c:	080083e7 	.word	0x080083e7
 8008320:	080083e7 	.word	0x080083e7
 8008324:	080083e7 	.word	0x080083e7
 8008328:	080083e7 	.word	0x080083e7
 800832c:	080083e7 	.word	0x080083e7
 8008330:	080083e7 	.word	0x080083e7
 8008334:	080083e7 	.word	0x080083e7
 8008338:	080083b3 	.word	0x080083b3
 800833c:	080083e7 	.word	0x080083e7
 8008340:	080083e7 	.word	0x080083e7
 8008344:	080083e7 	.word	0x080083e7
 8008348:	080083e7 	.word	0x080083e7
 800834c:	080083e7 	.word	0x080083e7
 8008350:	080083e7 	.word	0x080083e7
 8008354:	080083e7 	.word	0x080083e7
 8008358:	080083e7 	.word	0x080083e7
 800835c:	080083e7 	.word	0x080083e7
 8008360:	080083e7 	.word	0x080083e7
 8008364:	080083e7 	.word	0x080083e7
 8008368:	080083e7 	.word	0x080083e7
 800836c:	080083e7 	.word	0x080083e7
 8008370:	080083e7 	.word	0x080083e7
 8008374:	080083e7 	.word	0x080083e7
 8008378:	080083d9 	.word	0x080083d9
 800837c:	2b40      	cmp	r3, #64	@ 0x40
 800837e:	d02e      	beq.n	80083de <UART_SetConfig+0xa36>
 8008380:	e031      	b.n	80083e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008382:	f7fc fc45 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8008386:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008388:	e033      	b.n	80083f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800838a:	f7fc fc57 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 800838e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008390:	e02f      	b.n	80083f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008396:	4618      	mov	r0, r3
 8008398:	f7fd fe86 	bl	80060a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a0:	e027      	b.n	80083f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a2:	f107 0318 	add.w	r3, r7, #24
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fd ffd2 	bl	8006350 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b0:	e01f      	b.n	80083f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083b2:	4b2d      	ldr	r3, [pc, #180]	@ (8008468 <UART_SetConfig+0xac0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083be:	4b2a      	ldr	r3, [pc, #168]	@ (8008468 <UART_SetConfig+0xac0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	08db      	lsrs	r3, r3, #3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	4a28      	ldr	r2, [pc, #160]	@ (800846c <UART_SetConfig+0xac4>)
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083d0:	e00f      	b.n	80083f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80083d2:	4b26      	ldr	r3, [pc, #152]	@ (800846c <UART_SetConfig+0xac4>)
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d6:	e00c      	b.n	80083f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083d8:	4b25      	ldr	r3, [pc, #148]	@ (8008470 <UART_SetConfig+0xac8>)
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083dc:	e009      	b.n	80083f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e4:	e005      	b.n	80083f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083f0:	bf00      	nop
    }

    if (pclk != 0U)
 80083f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d021      	beq.n	800843c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008474 <UART_SetConfig+0xacc>)
 80083fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008402:	461a      	mov	r2, r3
 8008404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008406:	fbb3 f2f2 	udiv	r2, r3, r2
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	441a      	add	r2, r3
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	2b0f      	cmp	r3, #15
 8008420:	d909      	bls.n	8008436 <UART_SetConfig+0xa8e>
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008428:	d205      	bcs.n	8008436 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	b29a      	uxth	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60da      	str	r2, [r3, #12]
 8008434:	e002      	b.n	800843c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2201      	movs	r2, #1
 8008440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2201      	movs	r2, #1
 8008448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2200      	movs	r2, #0
 8008450:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2200      	movs	r2, #0
 8008456:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008458:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800845c:	4618      	mov	r0, r3
 800845e:	3748      	adds	r7, #72	@ 0x48
 8008460:	46bd      	mov	sp, r7
 8008462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008466:	bf00      	nop
 8008468:	58024400 	.word	0x58024400
 800846c:	03d09000 	.word	0x03d09000
 8008470:	003d0900 	.word	0x003d0900
 8008474:	0800c318 	.word	0x0800c318

08008478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	f003 0310 	and.w	r3, r3, #16
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00a      	beq.n	800852a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01a      	beq.n	800858e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008576:	d10a      	bne.n	800858e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b098      	sub	sp, #96	@ 0x60
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085cc:	f7fa fb86 	bl	8002cdc <HAL_GetTick>
 80085d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d12f      	bne.n	8008640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085e8:	2200      	movs	r2, #0
 80085ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f88e 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d022      	beq.n	8008640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800860e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008618:	647b      	str	r3, [r7, #68]	@ 0x44
 800861a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800861e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e6      	bne.n	80085fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e063      	b.n	8008708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b04      	cmp	r3, #4
 800864c:	d149      	bne.n	80086e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800864e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008656:	2200      	movs	r2, #0
 8008658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f857 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d03c      	beq.n	80086e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	623b      	str	r3, [r7, #32]
   return(result);
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800867c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008686:	633b      	str	r3, [r7, #48]	@ 0x30
 8008688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800868c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e6      	bne.n	8008668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3308      	adds	r3, #8
 80086b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086ba:	61fa      	str	r2, [r7, #28]
 80086bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	69b9      	ldr	r1, [r7, #24]
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	617b      	str	r3, [r7, #20]
   return(result);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e5      	bne.n	800869a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e012      	b.n	8008708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3758      	adds	r7, #88	@ 0x58
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008720:	e04f      	b.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d04b      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872a:	f7fa fad7 	bl	8002cdc <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	429a      	cmp	r2, r3
 8008738:	d302      	bcc.n	8008740 <UART_WaitOnFlagUntilTimeout+0x30>
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e04e      	b.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d037      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b80      	cmp	r3, #128	@ 0x80
 8008756:	d034      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2b40      	cmp	r3, #64	@ 0x40
 800875c:	d031      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b08      	cmp	r3, #8
 800876a:	d110      	bne.n	800878e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2208      	movs	r2, #8
 8008772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f839 	bl	80087ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2208      	movs	r2, #8
 800877e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e029      	b.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800879c:	d111      	bne.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 f81f 	bl	80087ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e00f      	b.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4013      	ands	r3, r2
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	bf0c      	ite	eq
 80087d2:	2301      	moveq	r3, #1
 80087d4:	2300      	movne	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	461a      	mov	r2, r3
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d0a0      	beq.n	8008722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b095      	sub	sp, #84	@ 0x54
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008812:	643b      	str	r3, [r7, #64]	@ 0x40
 8008814:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008818:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e6      	bne.n	80087f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	61fb      	str	r3, [r7, #28]
   return(result);
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	4b1e      	ldr	r3, [pc, #120]	@ (80088b4 <UART_EndRxTransfer+0xc8>)
 800883a:	4013      	ands	r3, r2
 800883c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008848:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800884c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e5      	bne.n	8008826 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800885e:	2b01      	cmp	r3, #1
 8008860:	d118      	bne.n	8008894 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f023 0310 	bic.w	r3, r3, #16
 8008876:	647b      	str	r3, [r7, #68]	@ 0x44
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6979      	ldr	r1, [r7, #20]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	613b      	str	r3, [r7, #16]
   return(result);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e6      	bne.n	8008862 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80088a8:	bf00      	nop
 80088aa:	3754      	adds	r7, #84	@ 0x54
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	effffffe 	.word	0xeffffffe

080088b8 <std>:
 80088b8:	2300      	movs	r3, #0
 80088ba:	b510      	push	{r4, lr}
 80088bc:	4604      	mov	r4, r0
 80088be:	e9c0 3300 	strd	r3, r3, [r0]
 80088c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088c6:	6083      	str	r3, [r0, #8]
 80088c8:	8181      	strh	r1, [r0, #12]
 80088ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80088cc:	81c2      	strh	r2, [r0, #14]
 80088ce:	6183      	str	r3, [r0, #24]
 80088d0:	4619      	mov	r1, r3
 80088d2:	2208      	movs	r2, #8
 80088d4:	305c      	adds	r0, #92	@ 0x5c
 80088d6:	f000 f906 	bl	8008ae6 <memset>
 80088da:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <std+0x58>)
 80088dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80088de:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <std+0x5c>)
 80088e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008918 <std+0x60>)
 80088e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088e6:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <std+0x64>)
 80088e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80088ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008920 <std+0x68>)
 80088ec:	6224      	str	r4, [r4, #32]
 80088ee:	429c      	cmp	r4, r3
 80088f0:	d006      	beq.n	8008900 <std+0x48>
 80088f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088f6:	4294      	cmp	r4, r2
 80088f8:	d002      	beq.n	8008900 <std+0x48>
 80088fa:	33d0      	adds	r3, #208	@ 0xd0
 80088fc:	429c      	cmp	r4, r3
 80088fe:	d105      	bne.n	800890c <std+0x54>
 8008900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	f000 b966 	b.w	8008bd8 <__retarget_lock_init_recursive>
 800890c:	bd10      	pop	{r4, pc}
 800890e:	bf00      	nop
 8008910:	08008a61 	.word	0x08008a61
 8008914:	08008a83 	.word	0x08008a83
 8008918:	08008abb 	.word	0x08008abb
 800891c:	08008adf 	.word	0x08008adf
 8008920:	240001e8 	.word	0x240001e8

08008924 <stdio_exit_handler>:
 8008924:	4a02      	ldr	r2, [pc, #8]	@ (8008930 <stdio_exit_handler+0xc>)
 8008926:	4903      	ldr	r1, [pc, #12]	@ (8008934 <stdio_exit_handler+0x10>)
 8008928:	4803      	ldr	r0, [pc, #12]	@ (8008938 <stdio_exit_handler+0x14>)
 800892a:	f000 b869 	b.w	8008a00 <_fwalk_sglue>
 800892e:	bf00      	nop
 8008930:	2400002c 	.word	0x2400002c
 8008934:	08009475 	.word	0x08009475
 8008938:	2400003c 	.word	0x2400003c

0800893c <cleanup_stdio>:
 800893c:	6841      	ldr	r1, [r0, #4]
 800893e:	4b0c      	ldr	r3, [pc, #48]	@ (8008970 <cleanup_stdio+0x34>)
 8008940:	4299      	cmp	r1, r3
 8008942:	b510      	push	{r4, lr}
 8008944:	4604      	mov	r4, r0
 8008946:	d001      	beq.n	800894c <cleanup_stdio+0x10>
 8008948:	f000 fd94 	bl	8009474 <_fflush_r>
 800894c:	68a1      	ldr	r1, [r4, #8]
 800894e:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <cleanup_stdio+0x38>)
 8008950:	4299      	cmp	r1, r3
 8008952:	d002      	beq.n	800895a <cleanup_stdio+0x1e>
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fd8d 	bl	8009474 <_fflush_r>
 800895a:	68e1      	ldr	r1, [r4, #12]
 800895c:	4b06      	ldr	r3, [pc, #24]	@ (8008978 <cleanup_stdio+0x3c>)
 800895e:	4299      	cmp	r1, r3
 8008960:	d004      	beq.n	800896c <cleanup_stdio+0x30>
 8008962:	4620      	mov	r0, r4
 8008964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008968:	f000 bd84 	b.w	8009474 <_fflush_r>
 800896c:	bd10      	pop	{r4, pc}
 800896e:	bf00      	nop
 8008970:	240001e8 	.word	0x240001e8
 8008974:	24000250 	.word	0x24000250
 8008978:	240002b8 	.word	0x240002b8

0800897c <global_stdio_init.part.0>:
 800897c:	b510      	push	{r4, lr}
 800897e:	4b0b      	ldr	r3, [pc, #44]	@ (80089ac <global_stdio_init.part.0+0x30>)
 8008980:	4c0b      	ldr	r4, [pc, #44]	@ (80089b0 <global_stdio_init.part.0+0x34>)
 8008982:	4a0c      	ldr	r2, [pc, #48]	@ (80089b4 <global_stdio_init.part.0+0x38>)
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	4620      	mov	r0, r4
 8008988:	2200      	movs	r2, #0
 800898a:	2104      	movs	r1, #4
 800898c:	f7ff ff94 	bl	80088b8 <std>
 8008990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008994:	2201      	movs	r2, #1
 8008996:	2109      	movs	r1, #9
 8008998:	f7ff ff8e 	bl	80088b8 <std>
 800899c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089a0:	2202      	movs	r2, #2
 80089a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a6:	2112      	movs	r1, #18
 80089a8:	f7ff bf86 	b.w	80088b8 <std>
 80089ac:	24000320 	.word	0x24000320
 80089b0:	240001e8 	.word	0x240001e8
 80089b4:	08008925 	.word	0x08008925

080089b8 <__sfp_lock_acquire>:
 80089b8:	4801      	ldr	r0, [pc, #4]	@ (80089c0 <__sfp_lock_acquire+0x8>)
 80089ba:	f000 b90e 	b.w	8008bda <__retarget_lock_acquire_recursive>
 80089be:	bf00      	nop
 80089c0:	24000329 	.word	0x24000329

080089c4 <__sfp_lock_release>:
 80089c4:	4801      	ldr	r0, [pc, #4]	@ (80089cc <__sfp_lock_release+0x8>)
 80089c6:	f000 b909 	b.w	8008bdc <__retarget_lock_release_recursive>
 80089ca:	bf00      	nop
 80089cc:	24000329 	.word	0x24000329

080089d0 <__sinit>:
 80089d0:	b510      	push	{r4, lr}
 80089d2:	4604      	mov	r4, r0
 80089d4:	f7ff fff0 	bl	80089b8 <__sfp_lock_acquire>
 80089d8:	6a23      	ldr	r3, [r4, #32]
 80089da:	b11b      	cbz	r3, 80089e4 <__sinit+0x14>
 80089dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e0:	f7ff bff0 	b.w	80089c4 <__sfp_lock_release>
 80089e4:	4b04      	ldr	r3, [pc, #16]	@ (80089f8 <__sinit+0x28>)
 80089e6:	6223      	str	r3, [r4, #32]
 80089e8:	4b04      	ldr	r3, [pc, #16]	@ (80089fc <__sinit+0x2c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f5      	bne.n	80089dc <__sinit+0xc>
 80089f0:	f7ff ffc4 	bl	800897c <global_stdio_init.part.0>
 80089f4:	e7f2      	b.n	80089dc <__sinit+0xc>
 80089f6:	bf00      	nop
 80089f8:	0800893d 	.word	0x0800893d
 80089fc:	24000320 	.word	0x24000320

08008a00 <_fwalk_sglue>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	4607      	mov	r7, r0
 8008a06:	4688      	mov	r8, r1
 8008a08:	4614      	mov	r4, r2
 8008a0a:	2600      	movs	r6, #0
 8008a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a10:	f1b9 0901 	subs.w	r9, r9, #1
 8008a14:	d505      	bpl.n	8008a22 <_fwalk_sglue+0x22>
 8008a16:	6824      	ldr	r4, [r4, #0]
 8008a18:	2c00      	cmp	r4, #0
 8008a1a:	d1f7      	bne.n	8008a0c <_fwalk_sglue+0xc>
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d907      	bls.n	8008a38 <_fwalk_sglue+0x38>
 8008a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	d003      	beq.n	8008a38 <_fwalk_sglue+0x38>
 8008a30:	4629      	mov	r1, r5
 8008a32:	4638      	mov	r0, r7
 8008a34:	47c0      	blx	r8
 8008a36:	4306      	orrs	r6, r0
 8008a38:	3568      	adds	r5, #104	@ 0x68
 8008a3a:	e7e9      	b.n	8008a10 <_fwalk_sglue+0x10>

08008a3c <iprintf>:
 8008a3c:	b40f      	push	{r0, r1, r2, r3}
 8008a3e:	b507      	push	{r0, r1, r2, lr}
 8008a40:	4906      	ldr	r1, [pc, #24]	@ (8008a5c <iprintf+0x20>)
 8008a42:	ab04      	add	r3, sp, #16
 8008a44:	6808      	ldr	r0, [r1, #0]
 8008a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a4a:	6881      	ldr	r1, [r0, #8]
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	f000 f9e9 	bl	8008e24 <_vfiprintf_r>
 8008a52:	b003      	add	sp, #12
 8008a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a58:	b004      	add	sp, #16
 8008a5a:	4770      	bx	lr
 8008a5c:	24000038 	.word	0x24000038

08008a60 <__sread>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	460c      	mov	r4, r1
 8008a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a68:	f000 f868 	bl	8008b3c <_read_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	bfab      	itete	ge
 8008a70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a72:	89a3      	ldrhlt	r3, [r4, #12]
 8008a74:	181b      	addge	r3, r3, r0
 8008a76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a7a:	bfac      	ite	ge
 8008a7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a7e:	81a3      	strhlt	r3, [r4, #12]
 8008a80:	bd10      	pop	{r4, pc}

08008a82 <__swrite>:
 8008a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a86:	461f      	mov	r7, r3
 8008a88:	898b      	ldrh	r3, [r1, #12]
 8008a8a:	05db      	lsls	r3, r3, #23
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	4616      	mov	r6, r2
 8008a92:	d505      	bpl.n	8008aa0 <__swrite+0x1e>
 8008a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a98:	2302      	movs	r3, #2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f000 f83c 	bl	8008b18 <_lseek_r>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	4632      	mov	r2, r6
 8008aae:	463b      	mov	r3, r7
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab6:	f000 b853 	b.w	8008b60 <_write_r>

08008aba <__sseek>:
 8008aba:	b510      	push	{r4, lr}
 8008abc:	460c      	mov	r4, r1
 8008abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac2:	f000 f829 	bl	8008b18 <_lseek_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	bf15      	itete	ne
 8008acc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ad6:	81a3      	strheq	r3, [r4, #12]
 8008ad8:	bf18      	it	ne
 8008ada:	81a3      	strhne	r3, [r4, #12]
 8008adc:	bd10      	pop	{r4, pc}

08008ade <__sclose>:
 8008ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae2:	f000 b809 	b.w	8008af8 <_close_r>

08008ae6 <memset>:
 8008ae6:	4402      	add	r2, r0
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d100      	bne.n	8008af0 <memset+0xa>
 8008aee:	4770      	bx	lr
 8008af0:	f803 1b01 	strb.w	r1, [r3], #1
 8008af4:	e7f9      	b.n	8008aea <memset+0x4>
	...

08008af8 <_close_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d06      	ldr	r5, [pc, #24]	@ (8008b14 <_close_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f7f9 fcc0 	bl	8002488 <_close>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_close_r+0x1a>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_close_r+0x1a>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	24000324 	.word	0x24000324

08008b18 <_lseek_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_lseek_r+0x20>)
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	602a      	str	r2, [r5, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f7f9 fcd5 	bl	80024d6 <_lseek>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_lseek_r+0x1e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_lseek_r+0x1e>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	24000324 	.word	0x24000324

08008b3c <_read_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	@ (8008b5c <_read_r+0x20>)
 8008b40:	4604      	mov	r4, r0
 8008b42:	4608      	mov	r0, r1
 8008b44:	4611      	mov	r1, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	602a      	str	r2, [r5, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7f9 fc63 	bl	8002416 <_read>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_read_r+0x1e>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_read_r+0x1e>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	24000324 	.word	0x24000324

08008b60 <_write_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	@ (8008b80 <_write_r+0x20>)
 8008b64:	4604      	mov	r4, r0
 8008b66:	4608      	mov	r0, r1
 8008b68:	4611      	mov	r1, r2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	602a      	str	r2, [r5, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f7f9 fc6e 	bl	8002450 <_write>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_write_r+0x1e>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_write_r+0x1e>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	24000324 	.word	0x24000324

08008b84 <__errno>:
 8008b84:	4b01      	ldr	r3, [pc, #4]	@ (8008b8c <__errno+0x8>)
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	24000038 	.word	0x24000038

08008b90 <__libc_init_array>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	4d0d      	ldr	r5, [pc, #52]	@ (8008bc8 <__libc_init_array+0x38>)
 8008b94:	4c0d      	ldr	r4, [pc, #52]	@ (8008bcc <__libc_init_array+0x3c>)
 8008b96:	1b64      	subs	r4, r4, r5
 8008b98:	10a4      	asrs	r4, r4, #2
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	42a6      	cmp	r6, r4
 8008b9e:	d109      	bne.n	8008bb4 <__libc_init_array+0x24>
 8008ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8008bd0 <__libc_init_array+0x40>)
 8008ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8008bd4 <__libc_init_array+0x44>)
 8008ba4:	f000 fdb6 	bl	8009714 <_init>
 8008ba8:	1b64      	subs	r4, r4, r5
 8008baa:	10a4      	asrs	r4, r4, #2
 8008bac:	2600      	movs	r6, #0
 8008bae:	42a6      	cmp	r6, r4
 8008bb0:	d105      	bne.n	8008bbe <__libc_init_array+0x2e>
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb8:	4798      	blx	r3
 8008bba:	3601      	adds	r6, #1
 8008bbc:	e7ee      	b.n	8008b9c <__libc_init_array+0xc>
 8008bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc2:	4798      	blx	r3
 8008bc4:	3601      	adds	r6, #1
 8008bc6:	e7f2      	b.n	8008bae <__libc_init_array+0x1e>
 8008bc8:	0800c36c 	.word	0x0800c36c
 8008bcc:	0800c36c 	.word	0x0800c36c
 8008bd0:	0800c36c 	.word	0x0800c36c
 8008bd4:	0800c370 	.word	0x0800c370

08008bd8 <__retarget_lock_init_recursive>:
 8008bd8:	4770      	bx	lr

08008bda <__retarget_lock_acquire_recursive>:
 8008bda:	4770      	bx	lr

08008bdc <__retarget_lock_release_recursive>:
 8008bdc:	4770      	bx	lr
	...

08008be0 <_free_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4605      	mov	r5, r0
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d041      	beq.n	8008c6c <_free_r+0x8c>
 8008be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bec:	1f0c      	subs	r4, r1, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfb8      	it	lt
 8008bf2:	18e4      	addlt	r4, r4, r3
 8008bf4:	f000 f8e0 	bl	8008db8 <__malloc_lock>
 8008bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c70 <_free_r+0x90>)
 8008bfa:	6813      	ldr	r3, [r2, #0]
 8008bfc:	b933      	cbnz	r3, 8008c0c <_free_r+0x2c>
 8008bfe:	6063      	str	r3, [r4, #4]
 8008c00:	6014      	str	r4, [r2, #0]
 8008c02:	4628      	mov	r0, r5
 8008c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c08:	f000 b8dc 	b.w	8008dc4 <__malloc_unlock>
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d908      	bls.n	8008c22 <_free_r+0x42>
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	1821      	adds	r1, r4, r0
 8008c14:	428b      	cmp	r3, r1
 8008c16:	bf01      	itttt	eq
 8008c18:	6819      	ldreq	r1, [r3, #0]
 8008c1a:	685b      	ldreq	r3, [r3, #4]
 8008c1c:	1809      	addeq	r1, r1, r0
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	e7ed      	b.n	8008bfe <_free_r+0x1e>
 8008c22:	461a      	mov	r2, r3
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	b10b      	cbz	r3, 8008c2c <_free_r+0x4c>
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	d9fa      	bls.n	8008c22 <_free_r+0x42>
 8008c2c:	6811      	ldr	r1, [r2, #0]
 8008c2e:	1850      	adds	r0, r2, r1
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d10b      	bne.n	8008c4c <_free_r+0x6c>
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	4401      	add	r1, r0
 8008c38:	1850      	adds	r0, r2, r1
 8008c3a:	4283      	cmp	r3, r0
 8008c3c:	6011      	str	r1, [r2, #0]
 8008c3e:	d1e0      	bne.n	8008c02 <_free_r+0x22>
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	6053      	str	r3, [r2, #4]
 8008c46:	4408      	add	r0, r1
 8008c48:	6010      	str	r0, [r2, #0]
 8008c4a:	e7da      	b.n	8008c02 <_free_r+0x22>
 8008c4c:	d902      	bls.n	8008c54 <_free_r+0x74>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	e7d6      	b.n	8008c02 <_free_r+0x22>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	1821      	adds	r1, r4, r0
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	bf04      	itt	eq
 8008c5c:	6819      	ldreq	r1, [r3, #0]
 8008c5e:	685b      	ldreq	r3, [r3, #4]
 8008c60:	6063      	str	r3, [r4, #4]
 8008c62:	bf04      	itt	eq
 8008c64:	1809      	addeq	r1, r1, r0
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	6054      	str	r4, [r2, #4]
 8008c6a:	e7ca      	b.n	8008c02 <_free_r+0x22>
 8008c6c:	bd38      	pop	{r3, r4, r5, pc}
 8008c6e:	bf00      	nop
 8008c70:	24000330 	.word	0x24000330

08008c74 <sbrk_aligned>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0f      	ldr	r6, [pc, #60]	@ (8008cb4 <sbrk_aligned+0x40>)
 8008c78:	460c      	mov	r4, r1
 8008c7a:	6831      	ldr	r1, [r6, #0]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b911      	cbnz	r1, 8008c86 <sbrk_aligned+0x12>
 8008c80:	f000 fcb4 	bl	80095ec <_sbrk_r>
 8008c84:	6030      	str	r0, [r6, #0]
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f000 fcaf 	bl	80095ec <_sbrk_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d103      	bne.n	8008c9a <sbrk_aligned+0x26>
 8008c92:	f04f 34ff 	mov.w	r4, #4294967295
 8008c96:	4620      	mov	r0, r4
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	1cc4      	adds	r4, r0, #3
 8008c9c:	f024 0403 	bic.w	r4, r4, #3
 8008ca0:	42a0      	cmp	r0, r4
 8008ca2:	d0f8      	beq.n	8008c96 <sbrk_aligned+0x22>
 8008ca4:	1a21      	subs	r1, r4, r0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f000 fca0 	bl	80095ec <_sbrk_r>
 8008cac:	3001      	adds	r0, #1
 8008cae:	d1f2      	bne.n	8008c96 <sbrk_aligned+0x22>
 8008cb0:	e7ef      	b.n	8008c92 <sbrk_aligned+0x1e>
 8008cb2:	bf00      	nop
 8008cb4:	2400032c 	.word	0x2400032c

08008cb8 <_malloc_r>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	1ccd      	adds	r5, r1, #3
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	4606      	mov	r6, r0
 8008cce:	db01      	blt.n	8008cd4 <_malloc_r+0x1c>
 8008cd0:	42a9      	cmp	r1, r5
 8008cd2:	d904      	bls.n	8008cde <_malloc_r+0x26>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008db4 <_malloc_r+0xfc>
 8008ce2:	f000 f869 	bl	8008db8 <__malloc_lock>
 8008ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cea:	461c      	mov	r4, r3
 8008cec:	bb44      	cbnz	r4, 8008d40 <_malloc_r+0x88>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ffbf 	bl	8008c74 <sbrk_aligned>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	d158      	bne.n	8008dae <_malloc_r+0xf6>
 8008cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8008d00:	4627      	mov	r7, r4
 8008d02:	2f00      	cmp	r7, #0
 8008d04:	d143      	bne.n	8008d8e <_malloc_r+0xd6>
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d04b      	beq.n	8008da2 <_malloc_r+0xea>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4630      	mov	r0, r6
 8008d10:	eb04 0903 	add.w	r9, r4, r3
 8008d14:	f000 fc6a 	bl	80095ec <_sbrk_r>
 8008d18:	4581      	cmp	r9, r0
 8008d1a:	d142      	bne.n	8008da2 <_malloc_r+0xea>
 8008d1c:	6821      	ldr	r1, [r4, #0]
 8008d1e:	1a6d      	subs	r5, r5, r1
 8008d20:	4629      	mov	r1, r5
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ffa6 	bl	8008c74 <sbrk_aligned>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d03a      	beq.n	8008da2 <_malloc_r+0xea>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	442b      	add	r3, r5
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	f8d8 3000 	ldr.w	r3, [r8]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	bb62      	cbnz	r2, 8008d94 <_malloc_r+0xdc>
 8008d3a:	f8c8 7000 	str.w	r7, [r8]
 8008d3e:	e00f      	b.n	8008d60 <_malloc_r+0xa8>
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	1b52      	subs	r2, r2, r5
 8008d44:	d420      	bmi.n	8008d88 <_malloc_r+0xd0>
 8008d46:	2a0b      	cmp	r2, #11
 8008d48:	d917      	bls.n	8008d7a <_malloc_r+0xc2>
 8008d4a:	1961      	adds	r1, r4, r5
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	6025      	str	r5, [r4, #0]
 8008d50:	bf18      	it	ne
 8008d52:	6059      	strne	r1, [r3, #4]
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	bf08      	it	eq
 8008d58:	f8c8 1000 	streq.w	r1, [r8]
 8008d5c:	5162      	str	r2, [r4, r5]
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f82f 	bl	8008dc4 <__malloc_unlock>
 8008d66:	f104 000b 	add.w	r0, r4, #11
 8008d6a:	1d23      	adds	r3, r4, #4
 8008d6c:	f020 0007 	bic.w	r0, r0, #7
 8008d70:	1ac2      	subs	r2, r0, r3
 8008d72:	bf1c      	itt	ne
 8008d74:	1a1b      	subne	r3, r3, r0
 8008d76:	50a3      	strne	r3, [r4, r2]
 8008d78:	e7af      	b.n	8008cda <_malloc_r+0x22>
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	bf0c      	ite	eq
 8008d80:	f8c8 2000 	streq.w	r2, [r8]
 8008d84:	605a      	strne	r2, [r3, #4]
 8008d86:	e7eb      	b.n	8008d60 <_malloc_r+0xa8>
 8008d88:	4623      	mov	r3, r4
 8008d8a:	6864      	ldr	r4, [r4, #4]
 8008d8c:	e7ae      	b.n	8008cec <_malloc_r+0x34>
 8008d8e:	463c      	mov	r4, r7
 8008d90:	687f      	ldr	r7, [r7, #4]
 8008d92:	e7b6      	b.n	8008d02 <_malloc_r+0x4a>
 8008d94:	461a      	mov	r2, r3
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d1fb      	bne.n	8008d94 <_malloc_r+0xdc>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6053      	str	r3, [r2, #4]
 8008da0:	e7de      	b.n	8008d60 <_malloc_r+0xa8>
 8008da2:	230c      	movs	r3, #12
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	4630      	mov	r0, r6
 8008da8:	f000 f80c 	bl	8008dc4 <__malloc_unlock>
 8008dac:	e794      	b.n	8008cd8 <_malloc_r+0x20>
 8008dae:	6005      	str	r5, [r0, #0]
 8008db0:	e7d6      	b.n	8008d60 <_malloc_r+0xa8>
 8008db2:	bf00      	nop
 8008db4:	24000330 	.word	0x24000330

08008db8 <__malloc_lock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__malloc_lock+0x8>)
 8008dba:	f7ff bf0e 	b.w	8008bda <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	24000328 	.word	0x24000328

08008dc4 <__malloc_unlock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	@ (8008dcc <__malloc_unlock+0x8>)
 8008dc6:	f7ff bf09 	b.w	8008bdc <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	24000328 	.word	0x24000328

08008dd0 <__sfputc_r>:
 8008dd0:	6893      	ldr	r3, [r2, #8]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	b410      	push	{r4}
 8008dd8:	6093      	str	r3, [r2, #8]
 8008dda:	da08      	bge.n	8008dee <__sfputc_r+0x1e>
 8008ddc:	6994      	ldr	r4, [r2, #24]
 8008dde:	42a3      	cmp	r3, r4
 8008de0:	db01      	blt.n	8008de6 <__sfputc_r+0x16>
 8008de2:	290a      	cmp	r1, #10
 8008de4:	d103      	bne.n	8008dee <__sfputc_r+0x1e>
 8008de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dea:	f000 bb6b 	b.w	80094c4 <__swbuf_r>
 8008dee:	6813      	ldr	r3, [r2, #0]
 8008df0:	1c58      	adds	r0, r3, #1
 8008df2:	6010      	str	r0, [r2, #0]
 8008df4:	7019      	strb	r1, [r3, #0]
 8008df6:	4608      	mov	r0, r1
 8008df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <__sfputs_r>:
 8008dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e00:	4606      	mov	r6, r0
 8008e02:	460f      	mov	r7, r1
 8008e04:	4614      	mov	r4, r2
 8008e06:	18d5      	adds	r5, r2, r3
 8008e08:	42ac      	cmp	r4, r5
 8008e0a:	d101      	bne.n	8008e10 <__sfputs_r+0x12>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e007      	b.n	8008e20 <__sfputs_r+0x22>
 8008e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e14:	463a      	mov	r2, r7
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff ffda 	bl	8008dd0 <__sfputc_r>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d1f3      	bne.n	8008e08 <__sfputs_r+0xa>
 8008e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e24 <_vfiprintf_r>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	460d      	mov	r5, r1
 8008e2a:	b09d      	sub	sp, #116	@ 0x74
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	4698      	mov	r8, r3
 8008e30:	4606      	mov	r6, r0
 8008e32:	b118      	cbz	r0, 8008e3c <_vfiprintf_r+0x18>
 8008e34:	6a03      	ldr	r3, [r0, #32]
 8008e36:	b90b      	cbnz	r3, 8008e3c <_vfiprintf_r+0x18>
 8008e38:	f7ff fdca 	bl	80089d0 <__sinit>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x2a>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x2a>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7ff fec6 	bl	8008bda <__retarget_lock_acquire_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	071b      	lsls	r3, r3, #28
 8008e52:	d501      	bpl.n	8008e58 <_vfiprintf_r+0x34>
 8008e54:	692b      	ldr	r3, [r5, #16]
 8008e56:	b99b      	cbnz	r3, 8008e80 <_vfiprintf_r+0x5c>
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f000 fb70 	bl	8009540 <__swsetup_r>
 8008e60:	b170      	cbz	r0, 8008e80 <_vfiprintf_r+0x5c>
 8008e62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e64:	07dc      	lsls	r4, r3, #31
 8008e66:	d504      	bpl.n	8008e72 <_vfiprintf_r+0x4e>
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	b01d      	add	sp, #116	@ 0x74
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	0598      	lsls	r0, r3, #22
 8008e76:	d4f7      	bmi.n	8008e68 <_vfiprintf_r+0x44>
 8008e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e7a:	f7ff feaf 	bl	8008bdc <__retarget_lock_release_recursive>
 8008e7e:	e7f3      	b.n	8008e68 <_vfiprintf_r+0x44>
 8008e80:	2300      	movs	r3, #0
 8008e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e84:	2320      	movs	r3, #32
 8008e86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e8e:	2330      	movs	r3, #48	@ 0x30
 8008e90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009040 <_vfiprintf_r+0x21c>
 8008e94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e98:	f04f 0901 	mov.w	r9, #1
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	469a      	mov	sl, r3
 8008ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea4:	b10a      	cbz	r2, 8008eaa <_vfiprintf_r+0x86>
 8008ea6:	2a25      	cmp	r2, #37	@ 0x25
 8008ea8:	d1f9      	bne.n	8008e9e <_vfiprintf_r+0x7a>
 8008eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8008eae:	d00b      	beq.n	8008ec8 <_vfiprintf_r+0xa4>
 8008eb0:	465b      	mov	r3, fp
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ffa1 	bl	8008dfe <__sfputs_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	f000 80a7 	beq.w	8009010 <_vfiprintf_r+0x1ec>
 8008ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ec4:	445a      	add	r2, fp
 8008ec6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 809f 	beq.w	8009010 <_vfiprintf_r+0x1ec>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008edc:	f10a 0a01 	add.w	sl, sl, #1
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ee8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008eea:	4654      	mov	r4, sl
 8008eec:	2205      	movs	r2, #5
 8008eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef2:	4853      	ldr	r0, [pc, #332]	@ (8009040 <_vfiprintf_r+0x21c>)
 8008ef4:	f7f7 f9f4 	bl	80002e0 <memchr>
 8008ef8:	9a04      	ldr	r2, [sp, #16]
 8008efa:	b9d8      	cbnz	r0, 8008f34 <_vfiprintf_r+0x110>
 8008efc:	06d1      	lsls	r1, r2, #27
 8008efe:	bf44      	itt	mi
 8008f00:	2320      	movmi	r3, #32
 8008f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f06:	0713      	lsls	r3, r2, #28
 8008f08:	bf44      	itt	mi
 8008f0a:	232b      	movmi	r3, #43	@ 0x2b
 8008f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f16:	d015      	beq.n	8008f44 <_vfiprintf_r+0x120>
 8008f18:	9a07      	ldr	r2, [sp, #28]
 8008f1a:	4654      	mov	r4, sl
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f04f 0c0a 	mov.w	ip, #10
 8008f22:	4621      	mov	r1, r4
 8008f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f28:	3b30      	subs	r3, #48	@ 0x30
 8008f2a:	2b09      	cmp	r3, #9
 8008f2c:	d94b      	bls.n	8008fc6 <_vfiprintf_r+0x1a2>
 8008f2e:	b1b0      	cbz	r0, 8008f5e <_vfiprintf_r+0x13a>
 8008f30:	9207      	str	r2, [sp, #28]
 8008f32:	e014      	b.n	8008f5e <_vfiprintf_r+0x13a>
 8008f34:	eba0 0308 	sub.w	r3, r0, r8
 8008f38:	fa09 f303 	lsl.w	r3, r9, r3
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	46a2      	mov	sl, r4
 8008f42:	e7d2      	b.n	8008eea <_vfiprintf_r+0xc6>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	1d19      	adds	r1, r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	9103      	str	r1, [sp, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bfbb      	ittet	lt
 8008f50:	425b      	neglt	r3, r3
 8008f52:	f042 0202 	orrlt.w	r2, r2, #2
 8008f56:	9307      	strge	r3, [sp, #28]
 8008f58:	9307      	strlt	r3, [sp, #28]
 8008f5a:	bfb8      	it	lt
 8008f5c:	9204      	strlt	r2, [sp, #16]
 8008f5e:	7823      	ldrb	r3, [r4, #0]
 8008f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f62:	d10a      	bne.n	8008f7a <_vfiprintf_r+0x156>
 8008f64:	7863      	ldrb	r3, [r4, #1]
 8008f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f68:	d132      	bne.n	8008fd0 <_vfiprintf_r+0x1ac>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	1d1a      	adds	r2, r3, #4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	9203      	str	r2, [sp, #12]
 8008f72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f76:	3402      	adds	r4, #2
 8008f78:	9305      	str	r3, [sp, #20]
 8008f7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009050 <_vfiprintf_r+0x22c>
 8008f7e:	7821      	ldrb	r1, [r4, #0]
 8008f80:	2203      	movs	r2, #3
 8008f82:	4650      	mov	r0, sl
 8008f84:	f7f7 f9ac 	bl	80002e0 <memchr>
 8008f88:	b138      	cbz	r0, 8008f9a <_vfiprintf_r+0x176>
 8008f8a:	9b04      	ldr	r3, [sp, #16]
 8008f8c:	eba0 000a 	sub.w	r0, r0, sl
 8008f90:	2240      	movs	r2, #64	@ 0x40
 8008f92:	4082      	lsls	r2, r0
 8008f94:	4313      	orrs	r3, r2
 8008f96:	3401      	adds	r4, #1
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9e:	4829      	ldr	r0, [pc, #164]	@ (8009044 <_vfiprintf_r+0x220>)
 8008fa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fa4:	2206      	movs	r2, #6
 8008fa6:	f7f7 f99b 	bl	80002e0 <memchr>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d03f      	beq.n	800902e <_vfiprintf_r+0x20a>
 8008fae:	4b26      	ldr	r3, [pc, #152]	@ (8009048 <_vfiprintf_r+0x224>)
 8008fb0:	bb1b      	cbnz	r3, 8008ffa <_vfiprintf_r+0x1d6>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	3307      	adds	r3, #7
 8008fb6:	f023 0307 	bic.w	r3, r3, #7
 8008fba:	3308      	adds	r3, #8
 8008fbc:	9303      	str	r3, [sp, #12]
 8008fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc0:	443b      	add	r3, r7
 8008fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc4:	e76a      	b.n	8008e9c <_vfiprintf_r+0x78>
 8008fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fca:	460c      	mov	r4, r1
 8008fcc:	2001      	movs	r0, #1
 8008fce:	e7a8      	b.n	8008f22 <_vfiprintf_r+0xfe>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	3401      	adds	r4, #1
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	f04f 0c0a 	mov.w	ip, #10
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe2:	3a30      	subs	r2, #48	@ 0x30
 8008fe4:	2a09      	cmp	r2, #9
 8008fe6:	d903      	bls.n	8008ff0 <_vfiprintf_r+0x1cc>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0c6      	beq.n	8008f7a <_vfiprintf_r+0x156>
 8008fec:	9105      	str	r1, [sp, #20]
 8008fee:	e7c4      	b.n	8008f7a <_vfiprintf_r+0x156>
 8008ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e7f0      	b.n	8008fdc <_vfiprintf_r+0x1b8>
 8008ffa:	ab03      	add	r3, sp, #12
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	462a      	mov	r2, r5
 8009000:	4b12      	ldr	r3, [pc, #72]	@ (800904c <_vfiprintf_r+0x228>)
 8009002:	a904      	add	r1, sp, #16
 8009004:	4630      	mov	r0, r6
 8009006:	f3af 8000 	nop.w
 800900a:	4607      	mov	r7, r0
 800900c:	1c78      	adds	r0, r7, #1
 800900e:	d1d6      	bne.n	8008fbe <_vfiprintf_r+0x19a>
 8009010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009012:	07d9      	lsls	r1, r3, #31
 8009014:	d405      	bmi.n	8009022 <_vfiprintf_r+0x1fe>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	059a      	lsls	r2, r3, #22
 800901a:	d402      	bmi.n	8009022 <_vfiprintf_r+0x1fe>
 800901c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800901e:	f7ff fddd 	bl	8008bdc <__retarget_lock_release_recursive>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	065b      	lsls	r3, r3, #25
 8009026:	f53f af1f 	bmi.w	8008e68 <_vfiprintf_r+0x44>
 800902a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800902c:	e71e      	b.n	8008e6c <_vfiprintf_r+0x48>
 800902e:	ab03      	add	r3, sp, #12
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	462a      	mov	r2, r5
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <_vfiprintf_r+0x228>)
 8009036:	a904      	add	r1, sp, #16
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f879 	bl	8009130 <_printf_i>
 800903e:	e7e4      	b.n	800900a <_vfiprintf_r+0x1e6>
 8009040:	0800c330 	.word	0x0800c330
 8009044:	0800c33a 	.word	0x0800c33a
 8009048:	00000000 	.word	0x00000000
 800904c:	08008dff 	.word	0x08008dff
 8009050:	0800c336 	.word	0x0800c336

08009054 <_printf_common>:
 8009054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	4616      	mov	r6, r2
 800905a:	4698      	mov	r8, r3
 800905c:	688a      	ldr	r2, [r1, #8]
 800905e:	690b      	ldr	r3, [r1, #16]
 8009060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009064:	4293      	cmp	r3, r2
 8009066:	bfb8      	it	lt
 8009068:	4613      	movlt	r3, r2
 800906a:	6033      	str	r3, [r6, #0]
 800906c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009070:	4607      	mov	r7, r0
 8009072:	460c      	mov	r4, r1
 8009074:	b10a      	cbz	r2, 800907a <_printf_common+0x26>
 8009076:	3301      	adds	r3, #1
 8009078:	6033      	str	r3, [r6, #0]
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	0699      	lsls	r1, r3, #26
 800907e:	bf42      	ittt	mi
 8009080:	6833      	ldrmi	r3, [r6, #0]
 8009082:	3302      	addmi	r3, #2
 8009084:	6033      	strmi	r3, [r6, #0]
 8009086:	6825      	ldr	r5, [r4, #0]
 8009088:	f015 0506 	ands.w	r5, r5, #6
 800908c:	d106      	bne.n	800909c <_printf_common+0x48>
 800908e:	f104 0a19 	add.w	sl, r4, #25
 8009092:	68e3      	ldr	r3, [r4, #12]
 8009094:	6832      	ldr	r2, [r6, #0]
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	42ab      	cmp	r3, r5
 800909a:	dc26      	bgt.n	80090ea <_printf_common+0x96>
 800909c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	3b00      	subs	r3, #0
 80090a4:	bf18      	it	ne
 80090a6:	2301      	movne	r3, #1
 80090a8:	0692      	lsls	r2, r2, #26
 80090aa:	d42b      	bmi.n	8009104 <_printf_common+0xb0>
 80090ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090b0:	4641      	mov	r1, r8
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c8      	blx	r9
 80090b6:	3001      	adds	r0, #1
 80090b8:	d01e      	beq.n	80090f8 <_printf_common+0xa4>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	6922      	ldr	r2, [r4, #16]
 80090be:	f003 0306 	and.w	r3, r3, #6
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	bf02      	ittt	eq
 80090c6:	68e5      	ldreq	r5, [r4, #12]
 80090c8:	6833      	ldreq	r3, [r6, #0]
 80090ca:	1aed      	subeq	r5, r5, r3
 80090cc:	68a3      	ldr	r3, [r4, #8]
 80090ce:	bf0c      	ite	eq
 80090d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090d4:	2500      	movne	r5, #0
 80090d6:	4293      	cmp	r3, r2
 80090d8:	bfc4      	itt	gt
 80090da:	1a9b      	subgt	r3, r3, r2
 80090dc:	18ed      	addgt	r5, r5, r3
 80090de:	2600      	movs	r6, #0
 80090e0:	341a      	adds	r4, #26
 80090e2:	42b5      	cmp	r5, r6
 80090e4:	d11a      	bne.n	800911c <_printf_common+0xc8>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e008      	b.n	80090fc <_printf_common+0xa8>
 80090ea:	2301      	movs	r3, #1
 80090ec:	4652      	mov	r2, sl
 80090ee:	4641      	mov	r1, r8
 80090f0:	4638      	mov	r0, r7
 80090f2:	47c8      	blx	r9
 80090f4:	3001      	adds	r0, #1
 80090f6:	d103      	bne.n	8009100 <_printf_common+0xac>
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	3501      	adds	r5, #1
 8009102:	e7c6      	b.n	8009092 <_printf_common+0x3e>
 8009104:	18e1      	adds	r1, r4, r3
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	2030      	movs	r0, #48	@ 0x30
 800910a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800910e:	4422      	add	r2, r4
 8009110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009114:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009118:	3302      	adds	r3, #2
 800911a:	e7c7      	b.n	80090ac <_printf_common+0x58>
 800911c:	2301      	movs	r3, #1
 800911e:	4622      	mov	r2, r4
 8009120:	4641      	mov	r1, r8
 8009122:	4638      	mov	r0, r7
 8009124:	47c8      	blx	r9
 8009126:	3001      	adds	r0, #1
 8009128:	d0e6      	beq.n	80090f8 <_printf_common+0xa4>
 800912a:	3601      	adds	r6, #1
 800912c:	e7d9      	b.n	80090e2 <_printf_common+0x8e>
	...

08009130 <_printf_i>:
 8009130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	7e0f      	ldrb	r7, [r1, #24]
 8009136:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009138:	2f78      	cmp	r7, #120	@ 0x78
 800913a:	4691      	mov	r9, r2
 800913c:	4680      	mov	r8, r0
 800913e:	460c      	mov	r4, r1
 8009140:	469a      	mov	sl, r3
 8009142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009146:	d807      	bhi.n	8009158 <_printf_i+0x28>
 8009148:	2f62      	cmp	r7, #98	@ 0x62
 800914a:	d80a      	bhi.n	8009162 <_printf_i+0x32>
 800914c:	2f00      	cmp	r7, #0
 800914e:	f000 80d1 	beq.w	80092f4 <_printf_i+0x1c4>
 8009152:	2f58      	cmp	r7, #88	@ 0x58
 8009154:	f000 80b8 	beq.w	80092c8 <_printf_i+0x198>
 8009158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800915c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009160:	e03a      	b.n	80091d8 <_printf_i+0xa8>
 8009162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009166:	2b15      	cmp	r3, #21
 8009168:	d8f6      	bhi.n	8009158 <_printf_i+0x28>
 800916a:	a101      	add	r1, pc, #4	@ (adr r1, 8009170 <_printf_i+0x40>)
 800916c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009170:	080091c9 	.word	0x080091c9
 8009174:	080091dd 	.word	0x080091dd
 8009178:	08009159 	.word	0x08009159
 800917c:	08009159 	.word	0x08009159
 8009180:	08009159 	.word	0x08009159
 8009184:	08009159 	.word	0x08009159
 8009188:	080091dd 	.word	0x080091dd
 800918c:	08009159 	.word	0x08009159
 8009190:	08009159 	.word	0x08009159
 8009194:	08009159 	.word	0x08009159
 8009198:	08009159 	.word	0x08009159
 800919c:	080092db 	.word	0x080092db
 80091a0:	08009207 	.word	0x08009207
 80091a4:	08009295 	.word	0x08009295
 80091a8:	08009159 	.word	0x08009159
 80091ac:	08009159 	.word	0x08009159
 80091b0:	080092fd 	.word	0x080092fd
 80091b4:	08009159 	.word	0x08009159
 80091b8:	08009207 	.word	0x08009207
 80091bc:	08009159 	.word	0x08009159
 80091c0:	08009159 	.word	0x08009159
 80091c4:	0800929d 	.word	0x0800929d
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6032      	str	r2, [r6, #0]
 80091d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091d8:	2301      	movs	r3, #1
 80091da:	e09c      	b.n	8009316 <_printf_i+0x1e6>
 80091dc:	6833      	ldr	r3, [r6, #0]
 80091de:	6820      	ldr	r0, [r4, #0]
 80091e0:	1d19      	adds	r1, r3, #4
 80091e2:	6031      	str	r1, [r6, #0]
 80091e4:	0606      	lsls	r6, r0, #24
 80091e6:	d501      	bpl.n	80091ec <_printf_i+0xbc>
 80091e8:	681d      	ldr	r5, [r3, #0]
 80091ea:	e003      	b.n	80091f4 <_printf_i+0xc4>
 80091ec:	0645      	lsls	r5, r0, #25
 80091ee:	d5fb      	bpl.n	80091e8 <_printf_i+0xb8>
 80091f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091f4:	2d00      	cmp	r5, #0
 80091f6:	da03      	bge.n	8009200 <_printf_i+0xd0>
 80091f8:	232d      	movs	r3, #45	@ 0x2d
 80091fa:	426d      	negs	r5, r5
 80091fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009200:	4858      	ldr	r0, [pc, #352]	@ (8009364 <_printf_i+0x234>)
 8009202:	230a      	movs	r3, #10
 8009204:	e011      	b.n	800922a <_printf_i+0xfa>
 8009206:	6821      	ldr	r1, [r4, #0]
 8009208:	6833      	ldr	r3, [r6, #0]
 800920a:	0608      	lsls	r0, r1, #24
 800920c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009210:	d402      	bmi.n	8009218 <_printf_i+0xe8>
 8009212:	0649      	lsls	r1, r1, #25
 8009214:	bf48      	it	mi
 8009216:	b2ad      	uxthmi	r5, r5
 8009218:	2f6f      	cmp	r7, #111	@ 0x6f
 800921a:	4852      	ldr	r0, [pc, #328]	@ (8009364 <_printf_i+0x234>)
 800921c:	6033      	str	r3, [r6, #0]
 800921e:	bf14      	ite	ne
 8009220:	230a      	movne	r3, #10
 8009222:	2308      	moveq	r3, #8
 8009224:	2100      	movs	r1, #0
 8009226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800922a:	6866      	ldr	r6, [r4, #4]
 800922c:	60a6      	str	r6, [r4, #8]
 800922e:	2e00      	cmp	r6, #0
 8009230:	db05      	blt.n	800923e <_printf_i+0x10e>
 8009232:	6821      	ldr	r1, [r4, #0]
 8009234:	432e      	orrs	r6, r5
 8009236:	f021 0104 	bic.w	r1, r1, #4
 800923a:	6021      	str	r1, [r4, #0]
 800923c:	d04b      	beq.n	80092d6 <_printf_i+0x1a6>
 800923e:	4616      	mov	r6, r2
 8009240:	fbb5 f1f3 	udiv	r1, r5, r3
 8009244:	fb03 5711 	mls	r7, r3, r1, r5
 8009248:	5dc7      	ldrb	r7, [r0, r7]
 800924a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800924e:	462f      	mov	r7, r5
 8009250:	42bb      	cmp	r3, r7
 8009252:	460d      	mov	r5, r1
 8009254:	d9f4      	bls.n	8009240 <_printf_i+0x110>
 8009256:	2b08      	cmp	r3, #8
 8009258:	d10b      	bne.n	8009272 <_printf_i+0x142>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	07df      	lsls	r7, r3, #31
 800925e:	d508      	bpl.n	8009272 <_printf_i+0x142>
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	6861      	ldr	r1, [r4, #4]
 8009264:	4299      	cmp	r1, r3
 8009266:	bfde      	ittt	le
 8009268:	2330      	movle	r3, #48	@ 0x30
 800926a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800926e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009272:	1b92      	subs	r2, r2, r6
 8009274:	6122      	str	r2, [r4, #16]
 8009276:	f8cd a000 	str.w	sl, [sp]
 800927a:	464b      	mov	r3, r9
 800927c:	aa03      	add	r2, sp, #12
 800927e:	4621      	mov	r1, r4
 8009280:	4640      	mov	r0, r8
 8009282:	f7ff fee7 	bl	8009054 <_printf_common>
 8009286:	3001      	adds	r0, #1
 8009288:	d14a      	bne.n	8009320 <_printf_i+0x1f0>
 800928a:	f04f 30ff 	mov.w	r0, #4294967295
 800928e:	b004      	add	sp, #16
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	f043 0320 	orr.w	r3, r3, #32
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	4832      	ldr	r0, [pc, #200]	@ (8009368 <_printf_i+0x238>)
 800929e:	2778      	movs	r7, #120	@ 0x78
 80092a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	6831      	ldr	r1, [r6, #0]
 80092a8:	061f      	lsls	r7, r3, #24
 80092aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80092ae:	d402      	bmi.n	80092b6 <_printf_i+0x186>
 80092b0:	065f      	lsls	r7, r3, #25
 80092b2:	bf48      	it	mi
 80092b4:	b2ad      	uxthmi	r5, r5
 80092b6:	6031      	str	r1, [r6, #0]
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	bf44      	itt	mi
 80092bc:	f043 0320 	orrmi.w	r3, r3, #32
 80092c0:	6023      	strmi	r3, [r4, #0]
 80092c2:	b11d      	cbz	r5, 80092cc <_printf_i+0x19c>
 80092c4:	2310      	movs	r3, #16
 80092c6:	e7ad      	b.n	8009224 <_printf_i+0xf4>
 80092c8:	4826      	ldr	r0, [pc, #152]	@ (8009364 <_printf_i+0x234>)
 80092ca:	e7e9      	b.n	80092a0 <_printf_i+0x170>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	f023 0320 	bic.w	r3, r3, #32
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	e7f6      	b.n	80092c4 <_printf_i+0x194>
 80092d6:	4616      	mov	r6, r2
 80092d8:	e7bd      	b.n	8009256 <_printf_i+0x126>
 80092da:	6833      	ldr	r3, [r6, #0]
 80092dc:	6825      	ldr	r5, [r4, #0]
 80092de:	6961      	ldr	r1, [r4, #20]
 80092e0:	1d18      	adds	r0, r3, #4
 80092e2:	6030      	str	r0, [r6, #0]
 80092e4:	062e      	lsls	r6, r5, #24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	d501      	bpl.n	80092ee <_printf_i+0x1be>
 80092ea:	6019      	str	r1, [r3, #0]
 80092ec:	e002      	b.n	80092f4 <_printf_i+0x1c4>
 80092ee:	0668      	lsls	r0, r5, #25
 80092f0:	d5fb      	bpl.n	80092ea <_printf_i+0x1ba>
 80092f2:	8019      	strh	r1, [r3, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	4616      	mov	r6, r2
 80092fa:	e7bc      	b.n	8009276 <_printf_i+0x146>
 80092fc:	6833      	ldr	r3, [r6, #0]
 80092fe:	1d1a      	adds	r2, r3, #4
 8009300:	6032      	str	r2, [r6, #0]
 8009302:	681e      	ldr	r6, [r3, #0]
 8009304:	6862      	ldr	r2, [r4, #4]
 8009306:	2100      	movs	r1, #0
 8009308:	4630      	mov	r0, r6
 800930a:	f7f6 ffe9 	bl	80002e0 <memchr>
 800930e:	b108      	cbz	r0, 8009314 <_printf_i+0x1e4>
 8009310:	1b80      	subs	r0, r0, r6
 8009312:	6060      	str	r0, [r4, #4]
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	2300      	movs	r3, #0
 800931a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800931e:	e7aa      	b.n	8009276 <_printf_i+0x146>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	4632      	mov	r2, r6
 8009324:	4649      	mov	r1, r9
 8009326:	4640      	mov	r0, r8
 8009328:	47d0      	blx	sl
 800932a:	3001      	adds	r0, #1
 800932c:	d0ad      	beq.n	800928a <_printf_i+0x15a>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	079b      	lsls	r3, r3, #30
 8009332:	d413      	bmi.n	800935c <_printf_i+0x22c>
 8009334:	68e0      	ldr	r0, [r4, #12]
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	4298      	cmp	r0, r3
 800933a:	bfb8      	it	lt
 800933c:	4618      	movlt	r0, r3
 800933e:	e7a6      	b.n	800928e <_printf_i+0x15e>
 8009340:	2301      	movs	r3, #1
 8009342:	4632      	mov	r2, r6
 8009344:	4649      	mov	r1, r9
 8009346:	4640      	mov	r0, r8
 8009348:	47d0      	blx	sl
 800934a:	3001      	adds	r0, #1
 800934c:	d09d      	beq.n	800928a <_printf_i+0x15a>
 800934e:	3501      	adds	r5, #1
 8009350:	68e3      	ldr	r3, [r4, #12]
 8009352:	9903      	ldr	r1, [sp, #12]
 8009354:	1a5b      	subs	r3, r3, r1
 8009356:	42ab      	cmp	r3, r5
 8009358:	dcf2      	bgt.n	8009340 <_printf_i+0x210>
 800935a:	e7eb      	b.n	8009334 <_printf_i+0x204>
 800935c:	2500      	movs	r5, #0
 800935e:	f104 0619 	add.w	r6, r4, #25
 8009362:	e7f5      	b.n	8009350 <_printf_i+0x220>
 8009364:	0800c341 	.word	0x0800c341
 8009368:	0800c352 	.word	0x0800c352

0800936c <__sflush_r>:
 800936c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	0716      	lsls	r6, r2, #28
 8009376:	4605      	mov	r5, r0
 8009378:	460c      	mov	r4, r1
 800937a:	d454      	bmi.n	8009426 <__sflush_r+0xba>
 800937c:	684b      	ldr	r3, [r1, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	dc02      	bgt.n	8009388 <__sflush_r+0x1c>
 8009382:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009384:	2b00      	cmp	r3, #0
 8009386:	dd48      	ble.n	800941a <__sflush_r+0xae>
 8009388:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800938a:	2e00      	cmp	r6, #0
 800938c:	d045      	beq.n	800941a <__sflush_r+0xae>
 800938e:	2300      	movs	r3, #0
 8009390:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009394:	682f      	ldr	r7, [r5, #0]
 8009396:	6a21      	ldr	r1, [r4, #32]
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	d030      	beq.n	80093fe <__sflush_r+0x92>
 800939c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	0759      	lsls	r1, r3, #29
 80093a2:	d505      	bpl.n	80093b0 <__sflush_r+0x44>
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	1ad2      	subs	r2, r2, r3
 80093a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093aa:	b10b      	cbz	r3, 80093b0 <__sflush_r+0x44>
 80093ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	2300      	movs	r3, #0
 80093b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093b4:	6a21      	ldr	r1, [r4, #32]
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b0      	blx	r6
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	d106      	bne.n	80093ce <__sflush_r+0x62>
 80093c0:	6829      	ldr	r1, [r5, #0]
 80093c2:	291d      	cmp	r1, #29
 80093c4:	d82b      	bhi.n	800941e <__sflush_r+0xb2>
 80093c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009470 <__sflush_r+0x104>)
 80093c8:	40ca      	lsrs	r2, r1
 80093ca:	07d6      	lsls	r6, r2, #31
 80093cc:	d527      	bpl.n	800941e <__sflush_r+0xb2>
 80093ce:	2200      	movs	r2, #0
 80093d0:	6062      	str	r2, [r4, #4]
 80093d2:	04d9      	lsls	r1, r3, #19
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	6022      	str	r2, [r4, #0]
 80093d8:	d504      	bpl.n	80093e4 <__sflush_r+0x78>
 80093da:	1c42      	adds	r2, r0, #1
 80093dc:	d101      	bne.n	80093e2 <__sflush_r+0x76>
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	b903      	cbnz	r3, 80093e4 <__sflush_r+0x78>
 80093e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80093e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093e6:	602f      	str	r7, [r5, #0]
 80093e8:	b1b9      	cbz	r1, 800941a <__sflush_r+0xae>
 80093ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093ee:	4299      	cmp	r1, r3
 80093f0:	d002      	beq.n	80093f8 <__sflush_r+0x8c>
 80093f2:	4628      	mov	r0, r5
 80093f4:	f7ff fbf4 	bl	8008be0 <_free_r>
 80093f8:	2300      	movs	r3, #0
 80093fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80093fc:	e00d      	b.n	800941a <__sflush_r+0xae>
 80093fe:	2301      	movs	r3, #1
 8009400:	4628      	mov	r0, r5
 8009402:	47b0      	blx	r6
 8009404:	4602      	mov	r2, r0
 8009406:	1c50      	adds	r0, r2, #1
 8009408:	d1c9      	bne.n	800939e <__sflush_r+0x32>
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0c6      	beq.n	800939e <__sflush_r+0x32>
 8009410:	2b1d      	cmp	r3, #29
 8009412:	d001      	beq.n	8009418 <__sflush_r+0xac>
 8009414:	2b16      	cmp	r3, #22
 8009416:	d11e      	bne.n	8009456 <__sflush_r+0xea>
 8009418:	602f      	str	r7, [r5, #0]
 800941a:	2000      	movs	r0, #0
 800941c:	e022      	b.n	8009464 <__sflush_r+0xf8>
 800941e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009422:	b21b      	sxth	r3, r3
 8009424:	e01b      	b.n	800945e <__sflush_r+0xf2>
 8009426:	690f      	ldr	r7, [r1, #16]
 8009428:	2f00      	cmp	r7, #0
 800942a:	d0f6      	beq.n	800941a <__sflush_r+0xae>
 800942c:	0793      	lsls	r3, r2, #30
 800942e:	680e      	ldr	r6, [r1, #0]
 8009430:	bf08      	it	eq
 8009432:	694b      	ldreq	r3, [r1, #20]
 8009434:	600f      	str	r7, [r1, #0]
 8009436:	bf18      	it	ne
 8009438:	2300      	movne	r3, #0
 800943a:	eba6 0807 	sub.w	r8, r6, r7
 800943e:	608b      	str	r3, [r1, #8]
 8009440:	f1b8 0f00 	cmp.w	r8, #0
 8009444:	dde9      	ble.n	800941a <__sflush_r+0xae>
 8009446:	6a21      	ldr	r1, [r4, #32]
 8009448:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800944a:	4643      	mov	r3, r8
 800944c:	463a      	mov	r2, r7
 800944e:	4628      	mov	r0, r5
 8009450:	47b0      	blx	r6
 8009452:	2800      	cmp	r0, #0
 8009454:	dc08      	bgt.n	8009468 <__sflush_r+0xfc>
 8009456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009468:	4407      	add	r7, r0
 800946a:	eba8 0800 	sub.w	r8, r8, r0
 800946e:	e7e7      	b.n	8009440 <__sflush_r+0xd4>
 8009470:	20400001 	.word	0x20400001

08009474 <_fflush_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	690b      	ldr	r3, [r1, #16]
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b913      	cbnz	r3, 8009484 <_fflush_r+0x10>
 800947e:	2500      	movs	r5, #0
 8009480:	4628      	mov	r0, r5
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	b118      	cbz	r0, 800948e <_fflush_r+0x1a>
 8009486:	6a03      	ldr	r3, [r0, #32]
 8009488:	b90b      	cbnz	r3, 800948e <_fflush_r+0x1a>
 800948a:	f7ff faa1 	bl	80089d0 <__sinit>
 800948e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f3      	beq.n	800947e <_fflush_r+0xa>
 8009496:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009498:	07d0      	lsls	r0, r2, #31
 800949a:	d404      	bmi.n	80094a6 <_fflush_r+0x32>
 800949c:	0599      	lsls	r1, r3, #22
 800949e:	d402      	bmi.n	80094a6 <_fflush_r+0x32>
 80094a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094a2:	f7ff fb9a 	bl	8008bda <__retarget_lock_acquire_recursive>
 80094a6:	4628      	mov	r0, r5
 80094a8:	4621      	mov	r1, r4
 80094aa:	f7ff ff5f 	bl	800936c <__sflush_r>
 80094ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094b0:	07da      	lsls	r2, r3, #31
 80094b2:	4605      	mov	r5, r0
 80094b4:	d4e4      	bmi.n	8009480 <_fflush_r+0xc>
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	059b      	lsls	r3, r3, #22
 80094ba:	d4e1      	bmi.n	8009480 <_fflush_r+0xc>
 80094bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094be:	f7ff fb8d 	bl	8008bdc <__retarget_lock_release_recursive>
 80094c2:	e7dd      	b.n	8009480 <_fflush_r+0xc>

080094c4 <__swbuf_r>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	460e      	mov	r6, r1
 80094c8:	4614      	mov	r4, r2
 80094ca:	4605      	mov	r5, r0
 80094cc:	b118      	cbz	r0, 80094d6 <__swbuf_r+0x12>
 80094ce:	6a03      	ldr	r3, [r0, #32]
 80094d0:	b90b      	cbnz	r3, 80094d6 <__swbuf_r+0x12>
 80094d2:	f7ff fa7d 	bl	80089d0 <__sinit>
 80094d6:	69a3      	ldr	r3, [r4, #24]
 80094d8:	60a3      	str	r3, [r4, #8]
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	071a      	lsls	r2, r3, #28
 80094de:	d501      	bpl.n	80094e4 <__swbuf_r+0x20>
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	b943      	cbnz	r3, 80094f6 <__swbuf_r+0x32>
 80094e4:	4621      	mov	r1, r4
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 f82a 	bl	8009540 <__swsetup_r>
 80094ec:	b118      	cbz	r0, 80094f6 <__swbuf_r+0x32>
 80094ee:	f04f 37ff 	mov.w	r7, #4294967295
 80094f2:	4638      	mov	r0, r7
 80094f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	6922      	ldr	r2, [r4, #16]
 80094fa:	1a98      	subs	r0, r3, r2
 80094fc:	6963      	ldr	r3, [r4, #20]
 80094fe:	b2f6      	uxtb	r6, r6
 8009500:	4283      	cmp	r3, r0
 8009502:	4637      	mov	r7, r6
 8009504:	dc05      	bgt.n	8009512 <__swbuf_r+0x4e>
 8009506:	4621      	mov	r1, r4
 8009508:	4628      	mov	r0, r5
 800950a:	f7ff ffb3 	bl	8009474 <_fflush_r>
 800950e:	2800      	cmp	r0, #0
 8009510:	d1ed      	bne.n	80094ee <__swbuf_r+0x2a>
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	60a3      	str	r3, [r4, #8]
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	6022      	str	r2, [r4, #0]
 800951e:	701e      	strb	r6, [r3, #0]
 8009520:	6962      	ldr	r2, [r4, #20]
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	429a      	cmp	r2, r3
 8009526:	d004      	beq.n	8009532 <__swbuf_r+0x6e>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	07db      	lsls	r3, r3, #31
 800952c:	d5e1      	bpl.n	80094f2 <__swbuf_r+0x2e>
 800952e:	2e0a      	cmp	r6, #10
 8009530:	d1df      	bne.n	80094f2 <__swbuf_r+0x2e>
 8009532:	4621      	mov	r1, r4
 8009534:	4628      	mov	r0, r5
 8009536:	f7ff ff9d 	bl	8009474 <_fflush_r>
 800953a:	2800      	cmp	r0, #0
 800953c:	d0d9      	beq.n	80094f2 <__swbuf_r+0x2e>
 800953e:	e7d6      	b.n	80094ee <__swbuf_r+0x2a>

08009540 <__swsetup_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4b29      	ldr	r3, [pc, #164]	@ (80095e8 <__swsetup_r+0xa8>)
 8009544:	4605      	mov	r5, r0
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	460c      	mov	r4, r1
 800954a:	b118      	cbz	r0, 8009554 <__swsetup_r+0x14>
 800954c:	6a03      	ldr	r3, [r0, #32]
 800954e:	b90b      	cbnz	r3, 8009554 <__swsetup_r+0x14>
 8009550:	f7ff fa3e 	bl	80089d0 <__sinit>
 8009554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009558:	0719      	lsls	r1, r3, #28
 800955a:	d422      	bmi.n	80095a2 <__swsetup_r+0x62>
 800955c:	06da      	lsls	r2, r3, #27
 800955e:	d407      	bmi.n	8009570 <__swsetup_r+0x30>
 8009560:	2209      	movs	r2, #9
 8009562:	602a      	str	r2, [r5, #0]
 8009564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	f04f 30ff 	mov.w	r0, #4294967295
 800956e:	e033      	b.n	80095d8 <__swsetup_r+0x98>
 8009570:	0758      	lsls	r0, r3, #29
 8009572:	d512      	bpl.n	800959a <__swsetup_r+0x5a>
 8009574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009576:	b141      	cbz	r1, 800958a <__swsetup_r+0x4a>
 8009578:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800957c:	4299      	cmp	r1, r3
 800957e:	d002      	beq.n	8009586 <__swsetup_r+0x46>
 8009580:	4628      	mov	r0, r5
 8009582:	f7ff fb2d 	bl	8008be0 <_free_r>
 8009586:	2300      	movs	r3, #0
 8009588:	6363      	str	r3, [r4, #52]	@ 0x34
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	2300      	movs	r3, #0
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f043 0308 	orr.w	r3, r3, #8
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	b94b      	cbnz	r3, 80095ba <__swsetup_r+0x7a>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095b0:	d003      	beq.n	80095ba <__swsetup_r+0x7a>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 f84f 	bl	8009658 <__smakebuf_r>
 80095ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095be:	f013 0201 	ands.w	r2, r3, #1
 80095c2:	d00a      	beq.n	80095da <__swsetup_r+0x9a>
 80095c4:	2200      	movs	r2, #0
 80095c6:	60a2      	str	r2, [r4, #8]
 80095c8:	6962      	ldr	r2, [r4, #20]
 80095ca:	4252      	negs	r2, r2
 80095cc:	61a2      	str	r2, [r4, #24]
 80095ce:	6922      	ldr	r2, [r4, #16]
 80095d0:	b942      	cbnz	r2, 80095e4 <__swsetup_r+0xa4>
 80095d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095d6:	d1c5      	bne.n	8009564 <__swsetup_r+0x24>
 80095d8:	bd38      	pop	{r3, r4, r5, pc}
 80095da:	0799      	lsls	r1, r3, #30
 80095dc:	bf58      	it	pl
 80095de:	6962      	ldrpl	r2, [r4, #20]
 80095e0:	60a2      	str	r2, [r4, #8]
 80095e2:	e7f4      	b.n	80095ce <__swsetup_r+0x8e>
 80095e4:	2000      	movs	r0, #0
 80095e6:	e7f7      	b.n	80095d8 <__swsetup_r+0x98>
 80095e8:	24000038 	.word	0x24000038

080095ec <_sbrk_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	@ (8009608 <_sbrk_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7f8 ff7a 	bl	80024f0 <_sbrk>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_sbrk_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_sbrk_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	24000324 	.word	0x24000324

0800960c <__swhatbuf_r>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	460c      	mov	r4, r1
 8009610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009614:	2900      	cmp	r1, #0
 8009616:	b096      	sub	sp, #88	@ 0x58
 8009618:	4615      	mov	r5, r2
 800961a:	461e      	mov	r6, r3
 800961c:	da0d      	bge.n	800963a <__swhatbuf_r+0x2e>
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009624:	f04f 0100 	mov.w	r1, #0
 8009628:	bf14      	ite	ne
 800962a:	2340      	movne	r3, #64	@ 0x40
 800962c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009630:	2000      	movs	r0, #0
 8009632:	6031      	str	r1, [r6, #0]
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	b016      	add	sp, #88	@ 0x58
 8009638:	bd70      	pop	{r4, r5, r6, pc}
 800963a:	466a      	mov	r2, sp
 800963c:	f000 f848 	bl	80096d0 <_fstat_r>
 8009640:	2800      	cmp	r0, #0
 8009642:	dbec      	blt.n	800961e <__swhatbuf_r+0x12>
 8009644:	9901      	ldr	r1, [sp, #4]
 8009646:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800964a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800964e:	4259      	negs	r1, r3
 8009650:	4159      	adcs	r1, r3
 8009652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009656:	e7eb      	b.n	8009630 <__swhatbuf_r+0x24>

08009658 <__smakebuf_r>:
 8009658:	898b      	ldrh	r3, [r1, #12]
 800965a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965c:	079d      	lsls	r5, r3, #30
 800965e:	4606      	mov	r6, r0
 8009660:	460c      	mov	r4, r1
 8009662:	d507      	bpl.n	8009674 <__smakebuf_r+0x1c>
 8009664:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	6123      	str	r3, [r4, #16]
 800966c:	2301      	movs	r3, #1
 800966e:	6163      	str	r3, [r4, #20]
 8009670:	b003      	add	sp, #12
 8009672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009674:	ab01      	add	r3, sp, #4
 8009676:	466a      	mov	r2, sp
 8009678:	f7ff ffc8 	bl	800960c <__swhatbuf_r>
 800967c:	9f00      	ldr	r7, [sp, #0]
 800967e:	4605      	mov	r5, r0
 8009680:	4639      	mov	r1, r7
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff fb18 	bl	8008cb8 <_malloc_r>
 8009688:	b948      	cbnz	r0, 800969e <__smakebuf_r+0x46>
 800968a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968e:	059a      	lsls	r2, r3, #22
 8009690:	d4ee      	bmi.n	8009670 <__smakebuf_r+0x18>
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	f043 0302 	orr.w	r3, r3, #2
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	e7e2      	b.n	8009664 <__smakebuf_r+0xc>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	6020      	str	r0, [r4, #0]
 80096a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096ae:	b15b      	cbz	r3, 80096c8 <__smakebuf_r+0x70>
 80096b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b4:	4630      	mov	r0, r6
 80096b6:	f000 f81d 	bl	80096f4 <_isatty_r>
 80096ba:	b128      	cbz	r0, 80096c8 <__smakebuf_r+0x70>
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	f023 0303 	bic.w	r3, r3, #3
 80096c2:	f043 0301 	orr.w	r3, r3, #1
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	431d      	orrs	r5, r3
 80096cc:	81a5      	strh	r5, [r4, #12]
 80096ce:	e7cf      	b.n	8009670 <__smakebuf_r+0x18>

080096d0 <_fstat_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4d07      	ldr	r5, [pc, #28]	@ (80096f0 <_fstat_r+0x20>)
 80096d4:	2300      	movs	r3, #0
 80096d6:	4604      	mov	r4, r0
 80096d8:	4608      	mov	r0, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f7f8 fedf 	bl	80024a0 <_fstat>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d102      	bne.n	80096ec <_fstat_r+0x1c>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	b103      	cbz	r3, 80096ec <_fstat_r+0x1c>
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	bf00      	nop
 80096f0:	24000324 	.word	0x24000324

080096f4 <_isatty_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d06      	ldr	r5, [pc, #24]	@ (8009710 <_isatty_r+0x1c>)
 80096f8:	2300      	movs	r3, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7f8 fede 	bl	80024c0 <_isatty>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_isatty_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_isatty_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	24000324 	.word	0x24000324

08009714 <_init>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr

08009720 <_fini>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr
