
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046e4  0800b364  0800b364  0000c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa48  0800fa48  00010a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa50  0800fa50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fa54  0800fa54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800fa58  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800fae0  00011088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800fae0  00011334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001984b  00000000  00000000  000110b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036f0  00000000  00000000  0002a901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe8  00000000  00000000  0002dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c21  00000000  00000000  0002efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039857  00000000  00000000  0002fc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aaba  00000000  00000000  00069458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f441  00000000  00000000  00083f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e3353  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000047bc  00000000  00000000  001e3398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001e7b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b34c 	.word	0x0800b34c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800b34c 	.word	0x0800b34c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f009 ff71 	bl	800a59c <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 fd6d 	bl	800119c <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f009 ff66 	bl	800a59c <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	0800b364 	.word	0x0800b364
 80006e0:	0800b390 	.word	0x0800b390

080006e4 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f000 fd54 	bl	800119c <CC1201_SendStrobe>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2033      	movs	r0, #51	@ 0x33
 800070a:	f000 fd47 	bl	800119c <CC1201_SendStrobe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC1201_EnterTxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
}

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2035      	movs	r0, #53	@ 0x35
 8000724:	f000 fd3a 	bl	800119c <CC1201_SendStrobe>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2036      	movs	r0, #54	@ 0x36
 800073e:	f000 fd2d 	bl	800119c <CC1201_SendStrobe>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	203a      	movs	r0, #58	@ 0x3a
 8000758:	f000 fd20 	bl	800119c <CC1201_SendStrobe>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	203b      	movs	r0, #59	@ 0x3b
 8000772:	f000 fd13 	bl	800119c <CC1201_SendStrobe>
 8000776:	4603      	mov	r3, r0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CC1201_Nop+0x30>)
 800078a:	f009 ff07 	bl	800a59c <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	203d      	movs	r0, #61	@ 0x3d
 8000792:	f000 fd03 	bl	800119c <CC1201_SendStrobe>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <CC1201_Nop+0x34>)
 80007a0:	f009 fefc 	bl	800a59c <iprintf>
    return result;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800b3c0 	.word	0x0800b3c0
 80007b4:	0800b3e8 	.word	0x0800b3e8

080007b8 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d909      	bls.n	80007de <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 80007ca:	232f      	movs	r3, #47	@ 0x2f
 80007cc:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 80007d4:	2300      	movs	r3, #0
 80007d6:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	e009      	b.n	80007f2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007ea:	2300      	movs	r3, #0
 80007ec:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	4815      	ldr	r0, [pc, #84]	@ (800084c <CC1201_ReadStatus+0x94>)
 80007f8:	f004 ff92 	bl	8005720 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	9000      	str	r0, [sp, #0]
 800080e:	4810      	ldr	r0, [pc, #64]	@ (8000850 <CC1201_ReadStatus+0x98>)
 8000810:	f007 ff54 	bl	80086bc <HAL_SPI_TransmitReceive>
 8000814:	4603      	mov	r3, r0
 8000816:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <CC1201_ReadStatus+0x94>)
 800081e:	f004 ff7f 	bl	8005720 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000822:	7dbb      	ldrb	r3, [r7, #22]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10c      	bne.n	8000842 <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d009      	beq.n	8000842 <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2bff      	cmp	r3, #255	@ 0xff
 8000832:	d903      	bls.n	800083c <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e002      	b.n	8000842 <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 800083c:	7b7a      	ldrb	r2, [r7, #13]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 8000842:	7dbb      	ldrb	r3, [r7, #22]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58021000 	.word	0x58021000
 8000850:	240000b8 	.word	0x240000b8

08000854 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8000862:	f7ff ffa9 	bl	80007b8 <CC1201_ReadStatus>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 800087e:	f7ff ff9b 	bl	80007b8 <CC1201_ReadStatus>
 8000882:	4603      	mov	r3, r0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 800089a:	f7ff ff8d 	bl	80007b8 <CC1201_ReadStatus>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ac:	b08f      	sub	sp, #60	@ 0x3c
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6178      	str	r0, [r7, #20]
 80008b2:	460b      	mov	r3, r1
 80008b4:	60fa      	str	r2, [r7, #12]
 80008b6:	74fb      	strb	r3, [r7, #19]
 80008b8:	466b      	mov	r3, sp
 80008ba:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e088      	b.n	80009e4 <CC1201_WriteTxFifo+0x13c>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 80008d2:	7cfb      	ldrb	r3, [r7, #19]
 80008d4:	1c99      	adds	r1, r3, #2
 80008d6:	1e4b      	subs	r3, r1, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008da:	460a      	mov	r2, r1
 80008dc:	2300      	movs	r3, #0
 80008de:	603a      	str	r2, [r7, #0]
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	00c3      	lsls	r3, r0, #3
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	00c2      	lsls	r2, r0, #3
 80008f8:	460a      	mov	r2, r1
 80008fa:	2300      	movs	r3, #0
 80008fc:	4692      	mov	sl, r2
 80008fe:	469b      	mov	fp, r3
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800090c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000914:	460b      	mov	r3, r1
 8000916:	3307      	adds	r3, #7
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	ebad 0d03 	sub.w	sp, sp, r3
 8000920:	ab02      	add	r3, sp, #8
 8000922:	3300      	adds	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	1c99      	adds	r1, r3, #2
 800092a:	1e4b      	subs	r3, r1, #1
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	460a      	mov	r2, r1
 8000930:	2300      	movs	r3, #0
 8000932:	4690      	mov	r8, r2
 8000934:	4699      	mov	r9, r3
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800094a:	460a      	mov	r2, r1
 800094c:	2300      	movs	r3, #0
 800094e:	4614      	mov	r4, r2
 8000950:	461d      	mov	r5, r3
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	00eb      	lsls	r3, r5, #3
 800095c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000960:	00e2      	lsls	r2, r4, #3
 8000962:	460b      	mov	r3, r1
 8000964:	3307      	adds	r3, #7
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	ebad 0d03 	sub.w	sp, sp, r3
 800096e:	ab02      	add	r3, sp, #8
 8000970:	3300      	adds	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	227f      	movs	r2, #127	@ 0x7f
 8000978:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000980:	e00e      	b.n	80009a0 <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	441a      	add	r2, r3
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098e:	3301      	adds	r3, #1
 8000990:	7811      	ldrb	r1, [r2, #0]
 8000992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000994:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	3301      	adds	r3, #1
 800099c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009a0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3eb      	bcc.n	8000982 <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2110      	movs	r1, #16
 80009ae:	4810      	ldr	r0, [pc, #64]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009b0:	f004 feb6 	bl	8005720 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <CC1201_WriteTxFifo+0x14c>)
 80009c8:	f007 fe78 	bl	80086bc <HAL_SPI_TransmitReceive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009d6:	f004 fea3 	bl	8005720 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	701a      	strb	r2, [r3, #0]
    
    return status;
 80009e2:	7efb      	ldrb	r3, [r7, #27]
 80009e4:	46b5      	mov	sp, r6
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3734      	adds	r7, #52	@ 0x34
 80009ea:	46bd      	mov	sp, r7
 80009ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f0:	58021000 	.word	0x58021000
 80009f4:	240000b8 	.word	0x240000b8

080009f8 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80009f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fc:	b08f      	sub	sp, #60	@ 0x3c
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	6178      	str	r0, [r7, #20]
 8000a02:	460b      	mov	r3, r1
 8000a04:	60fa      	str	r2, [r7, #12]
 8000a06:	74fb      	strb	r3, [r7, #19]
 8000a08:	466b      	mov	r3, sp
 8000a0a:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e09b      	b.n	8000b5a <CC1201_ReadRxFifo+0x162>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	1c59      	adds	r1, r3, #1
 8000a26:	1e4b      	subs	r3, r1, #1
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603a      	str	r2, [r7, #0]
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	00c3      	lsls	r3, r0, #3
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	00c2      	lsls	r2, r0, #3
 8000a48:	460a      	mov	r2, r1
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4692      	mov	sl, r2
 8000a4e:	469b      	mov	fp, r3
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000a64:	460b      	mov	r3, r1
 8000a66:	3307      	adds	r3, #7
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a70:	ab02      	add	r3, sp, #8
 8000a72:	3300      	adds	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	1e4b      	subs	r3, r1, #1
 8000a7c:	623b      	str	r3, [r7, #32]
 8000a7e:	460a      	mov	r2, r1
 8000a80:	2300      	movs	r3, #0
 8000a82:	4690      	mov	r8, r2
 8000a84:	4699      	mov	r9, r3
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	4614      	mov	r4, r2
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	00eb      	lsls	r3, r5, #3
 8000aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab0:	00e2      	lsls	r2, r4, #3
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	ebad 0d03 	sub.w	sp, sp, r3
 8000abe:	ab02      	add	r3, sp, #8
 8000ac0:	3300      	adds	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	22ff      	movs	r2, #255	@ 0xff
 8000ac8:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ad0:	e009      	b.n	8000ae6 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ae6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000aea:	7cfb      	ldrb	r3, [r7, #19]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d9f0      	bls.n	8000ad2 <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	481c      	ldr	r0, [pc, #112]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000af6:	f004 fe13 	bl	8005720 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000afa:	7cfb      	ldrb	r3, [r7, #19]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <CC1201_ReadRxFifo+0x174>)
 8000b0e:	f007 fdd5 	bl	80086bc <HAL_SPI_TransmitReceive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000b1c:	f004 fe00 	bl	8005720 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b2e:	e00e      	b.n	8000b4e <CC1201_ReadRxFifo+0x156>
        data[i] = rx_buffer[1 + i];
 8000b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b3a:	6979      	ldr	r1, [r7, #20]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	69f9      	ldr	r1, [r7, #28]
 8000b40:	5c8a      	ldrb	r2, [r1, r2]
 8000b42:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000b44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b4e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3eb      	bcc.n	8000b30 <CC1201_ReadRxFifo+0x138>
    }
    
    return status;
 8000b58:	7efb      	ldrb	r3, [r7, #27]
 8000b5a:	46b5      	mov	sp, r6
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3734      	adds	r7, #52	@ 0x34
 8000b60:	46bd      	mov	sp, r7
 8000b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b66:	bf00      	nop
 8000b68:	58021000 	.word	0x58021000
 8000b6c:	240000b8 	.word	0x240000b8

08000b70 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe90 	bl	80008a8 <CC1201_WriteTxFifo>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <CC1201_ChipDetectionTest>:

/**
 * @brief Simple CC1201 chip detection test
 * Tries various commands to see if chip responds with anything other than 0x00
 */
uint8_t CC1201_ChipDetectionTest(void) {
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b094      	sub	sp, #80	@ 0x50
 8000b98:	af00      	add	r7, sp, #0
    printf("\n=== CC1201 CHIP DETECTION TEST ===\n\r");
 8000b9a:	4898      	ldr	r0, [pc, #608]	@ (8000dfc <CC1201_ChipDetectionTest+0x268>)
 8000b9c:	f009 fcfe 	bl	800a59c <iprintf>
    
    uint8_t detection_score = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t non_zero_responses = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    uint8_t response_pattern[16];
    
    // Test 1: Try multiple NOP commands
    printf("1. Testing NOP command pattern:\n\r");
 8000bac:	4894      	ldr	r0, [pc, #592]	@ (8000e00 <CC1201_ChipDetectionTest+0x26c>)
 8000bae:	f009 fcf5 	bl	800a59c <iprintf>
    for (int i = 0; i < 8; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bb6:	e028      	b.n	8000c0a <CC1201_ChipDetectionTest+0x76>
        uint8_t status = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	707b      	strb	r3, [r7, #1]
        CC1201_SendStrobe(0x3D, &status); // NOP
 8000bbc:	1c7b      	adds	r3, r7, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	203d      	movs	r0, #61	@ 0x3d
 8000bc2:	f000 faeb 	bl	800119c <CC1201_SendStrobe>
        response_pattern[i] = status;
 8000bc6:	7879      	ldrb	r1, [r7, #1]
 8000bc8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bce:	4413      	add	r3, r2
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
        printf("   NOP %d: 0x%02X", i+1, status);
 8000bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	787a      	ldrb	r2, [r7, #1]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4889      	ldr	r0, [pc, #548]	@ (8000e04 <CC1201_ChipDetectionTest+0x270>)
 8000bde:	f009 fcdd 	bl	800a59c <iprintf>
        
        if (status != 0x00) {
 8000be2:	787b      	ldrb	r3, [r7, #1]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d007      	beq.n	8000bf8 <CC1201_ChipDetectionTest+0x64>
            non_zero_responses++;
 8000be8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000bec:	3301      	adds	r3, #1
 8000bee:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            printf(" ✓");
 8000bf2:	4885      	ldr	r0, [pc, #532]	@ (8000e08 <CC1201_ChipDetectionTest+0x274>)
 8000bf4:	f009 fcd2 	bl	800a59c <iprintf>
        }
        printf("\n\r");
 8000bf8:	4884      	ldr	r0, [pc, #528]	@ (8000e0c <CC1201_ChipDetectionTest+0x278>)
 8000bfa:	f009 fccf 	bl	800a59c <iprintf>
        HAL_Delay(10);
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f003 fe28 	bl	8004854 <HAL_Delay>
    for (int i = 0; i < 8; i++) {
 8000c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c06:	3301      	adds	r3, #1
 8000c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	ddd3      	ble.n	8000bb8 <CC1201_ChipDetectionTest+0x24>
    }
    
    // Test 2: Try different strobe commands
    printf("\n2. Testing different strobe commands:\n\r");
 8000c10:	487f      	ldr	r0, [pc, #508]	@ (8000e10 <CC1201_ChipDetectionTest+0x27c>)
 8000c12:	f009 fcc3 	bl	800a59c <iprintf>
    uint8_t strobes[] = {0x30, 0x34, 0x36, 0x37, 0x38, 0x3A, 0x3B, 0x3C};
 8000c16:	4a7f      	ldr	r2, [pc, #508]	@ (8000e14 <CC1201_ChipDetectionTest+0x280>)
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c20:	e883 0003 	stmia.w	r3, {r0, r1}
    const char* names[] = {"RESET", "IDLE", "CAL", "TX", "RX", "FLUSH_RX", "FLUSH_TX", "WOR_RST"};
 8000c24:	4b7c      	ldr	r3, [pc, #496]	@ (8000e18 <CC1201_ChipDetectionTest+0x284>)
 8000c26:	1d3c      	adds	r4, r7, #4
 8000c28:	461d      	mov	r5, r3
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int i = 0; i < 8; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c3a:	e031      	b.n	8000ca0 <CC1201_ChipDetectionTest+0x10c>
        uint8_t status = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	703b      	strb	r3, [r7, #0]
        CC1201_SendStrobe(strobes[i], &status);
 8000c40:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	463a      	mov	r2, r7
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 faa4 	bl	800119c <CC1201_SendStrobe>
        response_pattern[i + 8] = status;
 8000c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c56:	3308      	adds	r3, #8
 8000c58:	783a      	ldrb	r2, [r7, #0]
 8000c5a:	3350      	adds	r3, #80	@ 0x50
 8000c5c:	443b      	add	r3, r7
 8000c5e:	f803 2c24 	strb.w	r2, [r3, #-36]
        printf("   %s: 0x%02X", names[i], status);
 8000c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	3350      	adds	r3, #80	@ 0x50
 8000c68:	443b      	add	r3, r7
 8000c6a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000c6e:	783a      	ldrb	r2, [r7, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	486a      	ldr	r0, [pc, #424]	@ (8000e1c <CC1201_ChipDetectionTest+0x288>)
 8000c74:	f009 fc92 	bl	800a59c <iprintf>
        
        if (status != 0x00) {
 8000c78:	783b      	ldrb	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <CC1201_ChipDetectionTest+0xfa>
            non_zero_responses++;
 8000c7e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000c82:	3301      	adds	r3, #1
 8000c84:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            printf(" ✓");
 8000c88:	485f      	ldr	r0, [pc, #380]	@ (8000e08 <CC1201_ChipDetectionTest+0x274>)
 8000c8a:	f009 fc87 	bl	800a59c <iprintf>
        }
        printf("\n\r");
 8000c8e:	485f      	ldr	r0, [pc, #380]	@ (8000e0c <CC1201_ChipDetectionTest+0x278>)
 8000c90:	f009 fc84 	bl	800a59c <iprintf>
        HAL_Delay(50); // Longer delay for state changes
 8000c94:	2032      	movs	r0, #50	@ 0x32
 8000c96:	f003 fddd 	bl	8004854 <HAL_Delay>
    for (int i = 0; i < 8; i++) {
 8000c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	ddca      	ble.n	8000c3c <CC1201_ChipDetectionTest+0xa8>
    }
    
    // Test 3: Analysis
    printf("\n3. DETECTION ANALYSIS:\n\r");
 8000ca6:	485e      	ldr	r0, [pc, #376]	@ (8000e20 <CC1201_ChipDetectionTest+0x28c>)
 8000ca8:	f009 fc78 	bl	800a59c <iprintf>
    printf("   Non-zero responses: %d/16\n\r", non_zero_responses);
 8000cac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	485c      	ldr	r0, [pc, #368]	@ (8000e24 <CC1201_ChipDetectionTest+0x290>)
 8000cb4:	f009 fc72 	bl	800a59c <iprintf>
    
    // Check for patterns that suggest a working chip
    uint8_t all_same = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    for (int i = 1; i < 16; i++) {
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cc2:	e00f      	b.n	8000ce4 <CC1201_ChipDetectionTest+0x150>
        if (response_pattern[i] != response_pattern[0]) {
 8000cc4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cca:	4413      	add	r3, r2
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d003      	beq.n	8000cde <CC1201_ChipDetectionTest+0x14a>
            all_same = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            break;
 8000cdc:	e005      	b.n	8000cea <CC1201_ChipDetectionTest+0x156>
    for (int i = 1; i < 16; i++) {
 8000cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	ddec      	ble.n	8000cc4 <CC1201_ChipDetectionTest+0x130>
        }
    }
    
    if (all_same) {
 8000cea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d009      	beq.n	8000d06 <CC1201_ChipDetectionTest+0x172>
        printf("   ⚠ All responses identical (0x%02X) - likely no chip response\n\r", response_pattern[0]);
 8000cf2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	484b      	ldr	r0, [pc, #300]	@ (8000e28 <CC1201_ChipDetectionTest+0x294>)
 8000cfa:	f009 fc4f 	bl	800a59c <iprintf>
        detection_score = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d04:	e00b      	b.n	8000d1e <CC1201_ChipDetectionTest+0x18a>
    } else {
        printf("   ✓ Response variation detected - chip likely present\n\r");
 8000d06:	4849      	ldr	r0, [pc, #292]	@ (8000e2c <CC1201_ChipDetectionTest+0x298>)
 8000d08:	f009 fc48 	bl	800a59c <iprintf>
        detection_score = 50 + (non_zero_responses * 3);
 8000d0c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d10:	461a      	mov	r2, r3
 8000d12:	0052      	lsls	r2, r2, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3332      	adds	r3, #50	@ 0x32
 8000d1a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    
    // Test 4: Look for specific CC1201 behavior
    printf("\n4. CC1201 SPECIFIC BEHAVIOR TEST:\n\r");
 8000d1e:	4844      	ldr	r0, [pc, #272]	@ (8000e30 <CC1201_ChipDetectionTest+0x29c>)
 8000d20:	f009 fc3c 	bl	800a59c <iprintf>
    
    // CC1201 should respond to RESET with a status change
    uint8_t status_before = 0, status_after = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	70fb      	strb	r3, [r7, #3]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	70bb      	strb	r3, [r7, #2]
    CC1201_SendStrobe(0x3D, &status_before); // NOP to get current status
 8000d2c:	1cfb      	adds	r3, r7, #3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	203d      	movs	r0, #61	@ 0x3d
 8000d32:	f000 fa33 	bl	800119c <CC1201_SendStrobe>
    HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f003 fd8c 	bl	8004854 <HAL_Delay>
    CC1201_SendStrobe(0x30, &status_after);  // RESET
 8000d3c:	1cbb      	adds	r3, r7, #2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2030      	movs	r0, #48	@ 0x30
 8000d42:	f000 fa2b 	bl	800119c <CC1201_SendStrobe>
    HAL_Delay(100); // Wait for reset
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f003 fd84 	bl	8004854 <HAL_Delay>
    
    printf("   Status before reset: 0x%02X\n\r", status_before);
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4838      	ldr	r0, [pc, #224]	@ (8000e34 <CC1201_ChipDetectionTest+0x2a0>)
 8000d52:	f009 fc23 	bl	800a59c <iprintf>
    printf("   Status after reset:  0x%02X\n\r", status_after);
 8000d56:	78bb      	ldrb	r3, [r7, #2]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4837      	ldr	r0, [pc, #220]	@ (8000e38 <CC1201_ChipDetectionTest+0x2a4>)
 8000d5c:	f009 fc1e 	bl	800a59c <iprintf>
    
    if (status_before != status_after && (status_before != 0x00 || status_after != 0x00)) {
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	78bb      	ldrb	r3, [r7, #2]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d00e      	beq.n	8000d86 <CC1201_ChipDetectionTest+0x1f2>
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <CC1201_ChipDetectionTest+0x1e0>
 8000d6e:	78bb      	ldrb	r3, [r7, #2]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d008      	beq.n	8000d86 <CC1201_ChipDetectionTest+0x1f2>
        printf("   ✓ Status changed after reset - good sign\n\r");
 8000d74:	4831      	ldr	r0, [pc, #196]	@ (8000e3c <CC1201_ChipDetectionTest+0x2a8>)
 8000d76:	f009 fc11 	bl	800a59c <iprintf>
        detection_score += 25;
 8000d7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d7e:	3319      	adds	r3, #25
 8000d80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d84:	e002      	b.n	8000d8c <CC1201_ChipDetectionTest+0x1f8>
    } else {
        printf("   ⚠ No status change after reset\n\r");
 8000d86:	482e      	ldr	r0, [pc, #184]	@ (8000e40 <CC1201_ChipDetectionTest+0x2ac>)
 8000d88:	f009 fc08 	bl	800a59c <iprintf>
    }
    
    // Final detection verdict
    printf("\n5. DETECTION VERDICT:\n\r");
 8000d8c:	482d      	ldr	r0, [pc, #180]	@ (8000e44 <CC1201_ChipDetectionTest+0x2b0>)
 8000d8e:	f009 fc05 	bl	800a59c <iprintf>
    printf("   Detection Score: %d/100\n\r", detection_score);
 8000d92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d96:	4619      	mov	r1, r3
 8000d98:	482b      	ldr	r0, [pc, #172]	@ (8000e48 <CC1201_ChipDetectionTest+0x2b4>)
 8000d9a:	f009 fbff 	bl	800a59c <iprintf>
    
    if (detection_score >= 75) {
 8000d9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000da2:	2b4a      	cmp	r3, #74	@ 0x4a
 8000da4:	d903      	bls.n	8000dae <CC1201_ChipDetectionTest+0x21a>
        printf("   ✅ CC1201 DETECTED - Chip responding normally\n\r");
 8000da6:	4829      	ldr	r0, [pc, #164]	@ (8000e4c <CC1201_ChipDetectionTest+0x2b8>)
 8000da8:	f009 fbf8 	bl	800a59c <iprintf>
 8000dac:	e01c      	b.n	8000de8 <CC1201_ChipDetectionTest+0x254>
    } else if (detection_score >= 25) {
 8000dae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000db2:	2b18      	cmp	r3, #24
 8000db4:	d903      	bls.n	8000dbe <CC1201_ChipDetectionTest+0x22a>
        printf("   ⚠ PARTIAL DETECTION - Chip may be present but not fully functional\n\r");
 8000db6:	4826      	ldr	r0, [pc, #152]	@ (8000e50 <CC1201_ChipDetectionTest+0x2bc>)
 8000db8:	f009 fbf0 	bl	800a59c <iprintf>
 8000dbc:	e014      	b.n	8000de8 <CC1201_ChipDetectionTest+0x254>
    } else {
        printf("   ❌ NO DETECTION - CC1201 likely not present or not responding\n\r");
 8000dbe:	4825      	ldr	r0, [pc, #148]	@ (8000e54 <CC1201_ChipDetectionTest+0x2c0>)
 8000dc0:	f009 fbec 	bl	800a59c <iprintf>
        printf("      Possible causes:\n\r");
 8000dc4:	4824      	ldr	r0, [pc, #144]	@ (8000e58 <CC1201_ChipDetectionTest+0x2c4>)
 8000dc6:	f009 fbe9 	bl	800a59c <iprintf>
        printf("      • CC1201 not connected to SPI bus\n\r");
 8000dca:	4824      	ldr	r0, [pc, #144]	@ (8000e5c <CC1201_ChipDetectionTest+0x2c8>)
 8000dcc:	f009 fbe6 	bl	800a59c <iprintf>
        printf("      • Power supply issue (check 3.3V)\n\r");
 8000dd0:	4823      	ldr	r0, [pc, #140]	@ (8000e60 <CC1201_ChipDetectionTest+0x2cc>)
 8000dd2:	f009 fbe3 	bl	800a59c <iprintf>
        printf("      • MISO line disconnected\n\r");
 8000dd6:	4823      	ldr	r0, [pc, #140]	@ (8000e64 <CC1201_ChipDetectionTest+0x2d0>)
 8000dd8:	f009 fbe0 	bl	800a59c <iprintf>
        printf("      • CC1201 in reset or sleep state\n\r");
 8000ddc:	4822      	ldr	r0, [pc, #136]	@ (8000e68 <CC1201_ChipDetectionTest+0x2d4>)
 8000dde:	f009 fbdd 	bl	800a59c <iprintf>
        printf("      • Wrong SPI pin mapping\n\r");
 8000de2:	4822      	ldr	r0, [pc, #136]	@ (8000e6c <CC1201_ChipDetectionTest+0x2d8>)
 8000de4:	f009 fbda 	bl	800a59c <iprintf>
    }
    
    printf("=== CHIP DETECTION TEST COMPLETE ===\n\r");
 8000de8:	4821      	ldr	r0, [pc, #132]	@ (8000e70 <CC1201_ChipDetectionTest+0x2dc>)
 8000dea:	f009 fbd7 	bl	800a59c <iprintf>
    return detection_score;
 8000dee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3750      	adds	r7, #80	@ 0x50
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800b414 	.word	0x0800b414
 8000e00:	0800b43c 	.word	0x0800b43c
 8000e04:	0800b460 	.word	0x0800b460
 8000e08:	0800b474 	.word	0x0800b474
 8000e0c:	0800b47c 	.word	0x0800b47c
 8000e10:	0800b480 	.word	0x0800b480
 8000e14:	0800b850 	.word	0x0800b850
 8000e18:	0800b894 	.word	0x0800b894
 8000e1c:	0800b4ac 	.word	0x0800b4ac
 8000e20:	0800b4bc 	.word	0x0800b4bc
 8000e24:	0800b4d8 	.word	0x0800b4d8
 8000e28:	0800b4f8 	.word	0x0800b4f8
 8000e2c:	0800b53c 	.word	0x0800b53c
 8000e30:	0800b578 	.word	0x0800b578
 8000e34:	0800b5a0 	.word	0x0800b5a0
 8000e38:	0800b5c4 	.word	0x0800b5c4
 8000e3c:	0800b5e8 	.word	0x0800b5e8
 8000e40:	0800b618 	.word	0x0800b618
 8000e44:	0800b640 	.word	0x0800b640
 8000e48:	0800b65c 	.word	0x0800b65c
 8000e4c:	0800b67c 	.word	0x0800b67c
 8000e50:	0800b6b0 	.word	0x0800b6b0
 8000e54:	0800b6fc 	.word	0x0800b6fc
 8000e58:	0800b740 	.word	0x0800b740
 8000e5c:	0800b75c 	.word	0x0800b75c
 8000e60:	0800b788 	.word	0x0800b788
 8000e64:	0800b7b4 	.word	0x0800b7b4
 8000e68:	0800b7d8 	.word	0x0800b7d8
 8000e6c:	0800b804 	.word	0x0800b804
 8000e70:	0800b828 	.word	0x0800b828

08000e74 <CC1201_HardwareDiagnostic>:
#include <stdio.h>

/**
 * @brief Comprehensive hardware diagnostic test for CC1201
 */
void CC1201_HardwareDiagnostic(void) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b08f      	sub	sp, #60	@ 0x3c
 8000e78:	af02      	add	r7, sp, #8
    printf("\n=== CC1201 HARDWARE DIAGNOSTIC TEST ===\n\r");
 8000e7a:	489e      	ldr	r0, [pc, #632]	@ (80010f4 <CC1201_HardwareDiagnostic+0x280>)
 8000e7c:	f009 fb8e 	bl	800a59c <iprintf>
    
    // 1. Test SPI with different patterns
    printf("1. SPI COMMUNICATION PATTERN TEST\n\r");
 8000e80:	489d      	ldr	r0, [pc, #628]	@ (80010f8 <CC1201_HardwareDiagnostic+0x284>)
 8000e82:	f009 fb8b 	bl	800a59c <iprintf>
    
    uint8_t test_commands[] = {0x3D, 0x30, 0x34, 0x36}; // NOP, RESET, IDLE, CALIBRATE
 8000e86:	4b9d      	ldr	r3, [pc, #628]	@ (80010fc <CC1201_HardwareDiagnostic+0x288>)
 8000e88:	623b      	str	r3, [r7, #32]
    const char* cmd_names[] = {"NOP", "RESET", "IDLE", "CALIBRATE"};
 8000e8a:	4b9d      	ldr	r3, [pc, #628]	@ (8001100 <CC1201_HardwareDiagnostic+0x28c>)
 8000e8c:	f107 0410 	add.w	r4, r7, #16
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int i = 0; i < 4; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e9a:	e04c      	b.n	8000f36 <CC1201_HardwareDiagnostic+0xc2>
        uint8_t tx_data = test_commands[i];
 8000e9c:	f107 0220 	add.w	r2, r7, #32
 8000ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
        uint8_t rx_data = 0xFF; // Initialize with known pattern
 8000ea8:	23ff      	movs	r3, #255	@ 0xff
 8000eaa:	71bb      	strb	r3, [r7, #6]
        
        // Manual SPI transaction to see exact response
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4894      	ldr	r0, [pc, #592]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000eb2:	f004 fc35 	bl	8005720 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f003 fccc 	bl	8004854 <HAL_Delay>
        HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &tx_data, &rx_data, 1, 1000);
 8000ebc:	1dba      	adds	r2, r7, #6
 8000ebe:	1df9      	adds	r1, r7, #7
 8000ec0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	488f      	ldr	r0, [pc, #572]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000eca:	f007 fbf7 	bl	80086bc <HAL_SPI_TransmitReceive>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	488a      	ldr	r0, [pc, #552]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000eda:	f004 fc21 	bl	8005720 <HAL_GPIO_WritePin>
        
        printf("  %s (0x%02X): TX=0x%02X -> RX=0x%02X, HAL=%d\n\r", 
 8000ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	3330      	adds	r3, #48	@ 0x30
 8000ee4:	443b      	add	r3, r7
 8000ee6:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	461c      	mov	r4, r3
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	9200      	str	r2, [sp, #0]
 8000efe:	4623      	mov	r3, r4
 8000f00:	4602      	mov	r2, r0
 8000f02:	4882      	ldr	r0, [pc, #520]	@ (800110c <CC1201_HardwareDiagnostic+0x298>)
 8000f04:	f009 fb4a 	bl	800a59c <iprintf>
               cmd_names[i], tx_data, tx_data, rx_data, spi_status);
        
        if (rx_data == 0xFF) {
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2bff      	cmp	r3, #255	@ 0xff
 8000f0c:	d103      	bne.n	8000f16 <CC1201_HardwareDiagnostic+0xa2>
            printf("    ⚠ MISO may be disconnected (received same as initialized)\n\r");
 8000f0e:	4880      	ldr	r0, [pc, #512]	@ (8001110 <CC1201_HardwareDiagnostic+0x29c>)
 8000f10:	f009 fb44 	bl	800a59c <iprintf>
 8000f14:	e009      	b.n	8000f2a <CC1201_HardwareDiagnostic+0xb6>
        } else if (rx_data == 0x00) {
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d103      	bne.n	8000f24 <CC1201_HardwareDiagnostic+0xb0>
            printf("    ⚠ Consistent 0x00 - CC1201 may not be responding\n\r");
 8000f1c:	487d      	ldr	r0, [pc, #500]	@ (8001114 <CC1201_HardwareDiagnostic+0x2a0>)
 8000f1e:	f009 fb3d 	bl	800a59c <iprintf>
 8000f22:	e002      	b.n	8000f2a <CC1201_HardwareDiagnostic+0xb6>
        } else {
            printf("    ✓ Got response - CC1201 may be communicating\n\r");
 8000f24:	487c      	ldr	r0, [pc, #496]	@ (8001118 <CC1201_HardwareDiagnostic+0x2a4>)
 8000f26:	f009 fb39 	bl	800a59c <iprintf>
        }
        HAL_Delay(10);
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	f003 fc92 	bl	8004854 <HAL_Delay>
    for (int i = 0; i < 4; i++) {
 8000f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f32:	3301      	adds	r3, #1
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	ddaf      	ble.n	8000e9c <CC1201_HardwareDiagnostic+0x28>
    }
    
    // 2. Test with different SPI settings
    printf("\n2. SPI CONFIGURATION VERIFICATION\n\r");
 8000f3c:	4877      	ldr	r0, [pc, #476]	@ (800111c <CC1201_HardwareDiagnostic+0x2a8>)
 8000f3e:	f009 fb2d 	bl	800a59c <iprintf>
    printf("  Current SPI2 Settings:\n\r");
 8000f42:	4877      	ldr	r0, [pc, #476]	@ (8001120 <CC1201_HardwareDiagnostic+0x2ac>)
 8000f44:	f009 fb2a 	bl	800a59c <iprintf>
    printf("    Mode: 0x%08lX (0x00400000 = Master)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.Mode);
 8000f48:	4b6f      	ldr	r3, [pc, #444]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4875      	ldr	r0, [pc, #468]	@ (8001124 <CC1201_HardwareDiagnostic+0x2b0>)
 8000f50:	f009 fb24 	bl	800a59c <iprintf>
    printf("    DataSize: 0x%08lX (0x00000007 = 8-bit)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.DataSize);
 8000f54:	4b6c      	ldr	r3, [pc, #432]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4873      	ldr	r0, [pc, #460]	@ (8001128 <CC1201_HardwareDiagnostic+0x2b4>)
 8000f5c:	f009 fb1e 	bl	800a59c <iprintf>
    printf("    CPOL: %lu (0 = Low)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.CLKPolarity);
 8000f60:	4b69      	ldr	r3, [pc, #420]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4871      	ldr	r0, [pc, #452]	@ (800112c <CC1201_HardwareDiagnostic+0x2b8>)
 8000f68:	f009 fb18 	bl	800a59c <iprintf>
    printf("    CPHA: %lu (0 = 1st Edge)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.CLKPhase);
 8000f6c:	4b66      	ldr	r3, [pc, #408]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	4619      	mov	r1, r3
 8000f72:	486f      	ldr	r0, [pc, #444]	@ (8001130 <CC1201_HardwareDiagnostic+0x2bc>)
 8000f74:	f009 fb12 	bl	800a59c <iprintf>
    printf("    BaudRate: 0x%08lX\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
 8000f78:	4b63      	ldr	r3, [pc, #396]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	486d      	ldr	r0, [pc, #436]	@ (8001134 <CC1201_HardwareDiagnostic+0x2c0>)
 8000f80:	f009 fb0c 	bl	800a59c <iprintf>
    
    // 3. GPIO Pin State Check
    printf("\n3. GPIO PIN STATE CHECK\n\r");
 8000f84:	486c      	ldr	r0, [pc, #432]	@ (8001138 <CC1201_HardwareDiagnostic+0x2c4>)
 8000f86:	f009 fb09 	bl	800a59c <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	485d      	ldr	r0, [pc, #372]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000f8e:	f004 fbaf 	bl	80056f0 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("  CS Pin (PE4) current state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <CC1201_HardwareDiagnostic+0x130>
 8000fa0:	4b66      	ldr	r3, [pc, #408]	@ (800113c <CC1201_HardwareDiagnostic+0x2c8>)
 8000fa2:	e000      	b.n	8000fa6 <CC1201_HardwareDiagnostic+0x132>
 8000fa4:	4b66      	ldr	r3, [pc, #408]	@ (8001140 <CC1201_HardwareDiagnostic+0x2cc>)
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4866      	ldr	r0, [pc, #408]	@ (8001144 <CC1201_HardwareDiagnostic+0x2d0>)
 8000faa:	f009 faf7 	bl	800a59c <iprintf>
    
    // Toggle CS pin to verify control
    printf("  Testing CS pin control:\n\r");
 8000fae:	4866      	ldr	r0, [pc, #408]	@ (8001148 <CC1201_HardwareDiagnostic+0x2d4>)
 8000fb0:	f009 faf4 	bl	800a59c <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4852      	ldr	r0, [pc, #328]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000fba:	f004 fbb1 	bl	8005720 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f003 fc48 	bl	8004854 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	484f      	ldr	r0, [pc, #316]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000fc8:	f004 fb92 	bl	80056f0 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("    After setting LOW: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d101      	bne.n	8000fde <CC1201_HardwareDiagnostic+0x16a>
 8000fda:	4b58      	ldr	r3, [pc, #352]	@ (800113c <CC1201_HardwareDiagnostic+0x2c8>)
 8000fdc:	e000      	b.n	8000fe0 <CC1201_HardwareDiagnostic+0x16c>
 8000fde:	4b58      	ldr	r3, [pc, #352]	@ (8001140 <CC1201_HardwareDiagnostic+0x2cc>)
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	485a      	ldr	r0, [pc, #360]	@ (800114c <CC1201_HardwareDiagnostic+0x2d8>)
 8000fe4:	f009 fada 	bl	800a59c <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2110      	movs	r1, #16
 8000fec:	4845      	ldr	r0, [pc, #276]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000fee:	f004 fb97 	bl	8005720 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f003 fc2e 	bl	8004854 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4842      	ldr	r0, [pc, #264]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000ffc:	f004 fb78 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("    After setting HIGH: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <CC1201_HardwareDiagnostic+0x19e>
 800100e:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <CC1201_HardwareDiagnostic+0x2c8>)
 8001010:	e000      	b.n	8001014 <CC1201_HardwareDiagnostic+0x1a0>
 8001012:	4b4b      	ldr	r3, [pc, #300]	@ (8001140 <CC1201_HardwareDiagnostic+0x2cc>)
 8001014:	4619      	mov	r1, r3
 8001016:	484e      	ldr	r0, [pc, #312]	@ (8001150 <CC1201_HardwareDiagnostic+0x2dc>)
 8001018:	f009 fac0 	bl	800a59c <iprintf>
    
    // 4. Loopback test (if possible)
    printf("\n4. SPI LOOPBACK TEST (Connect MOSI to MISO temporarily)\n\r");
 800101c:	484d      	ldr	r0, [pc, #308]	@ (8001154 <CC1201_HardwareDiagnostic+0x2e0>)
 800101e:	f009 fabd 	bl	800a59c <iprintf>
    uint8_t loopback_patterns[] = {0xAA, 0x55, 0xFF, 0x00, 0xA5};
 8001022:	4a4d      	ldr	r2, [pc, #308]	@ (8001158 <CC1201_HardwareDiagnostic+0x2e4>)
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102c:	6018      	str	r0, [r3, #0]
 800102e:	3304      	adds	r3, #4
 8001030:	7019      	strb	r1, [r3, #0]
    
    for (int i = 0; i < 5; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001036:	e02e      	b.n	8001096 <CC1201_HardwareDiagnostic+0x222>
        uint8_t tx = loopback_patterns[i];
 8001038:	f107 0208 	add.w	r2, r7, #8
 800103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	717b      	strb	r3, [r7, #5]
        uint8_t rx = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	713b      	strb	r3, [r7, #4]
        
        HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &tx, &rx, 1, 1000);
 8001048:	1d3a      	adds	r2, r7, #4
 800104a:	1d79      	adds	r1, r7, #5
 800104c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	482c      	ldr	r0, [pc, #176]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8001056:	f007 fb31 	bl	80086bc <HAL_SPI_TransmitReceive>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        printf("  Pattern 0x%02X: TX=0x%02X -> RX=0x%02X, HAL=%d", tx, tx, rx, status);
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	4619      	mov	r1, r3
 8001064:	797b      	ldrb	r3, [r7, #5]
 8001066:	461a      	mov	r2, r3
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4603      	mov	r3, r0
 8001074:	4839      	ldr	r0, [pc, #228]	@ (800115c <CC1201_HardwareDiagnostic+0x2e8>)
 8001076:	f009 fa91 	bl	800a59c <iprintf>
        
        if (rx == tx) {
 800107a:	793a      	ldrb	r2, [r7, #4]
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	429a      	cmp	r2, r3
 8001080:	d103      	bne.n	800108a <CC1201_HardwareDiagnostic+0x216>
            printf(" ✓ LOOPBACK OK\n\r");
 8001082:	4837      	ldr	r0, [pc, #220]	@ (8001160 <CC1201_HardwareDiagnostic+0x2ec>)
 8001084:	f009 fa8a 	bl	800a59c <iprintf>
 8001088:	e002      	b.n	8001090 <CC1201_HardwareDiagnostic+0x21c>
        } else {
            printf(" ✗ No loopback\n\r");
 800108a:	4836      	ldr	r0, [pc, #216]	@ (8001164 <CC1201_HardwareDiagnostic+0x2f0>)
 800108c:	f009 fa86 	bl	800a59c <iprintf>
    for (int i = 0; i < 5; i++) {
 8001090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001092:	3301      	adds	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001098:	2b04      	cmp	r3, #4
 800109a:	ddcd      	ble.n	8001038 <CC1201_HardwareDiagnostic+0x1c4>
        }
    }
    
    // 5. Diagnostic Summary
    printf("\n5. DIAGNOSTIC SUMMARY\n\r");
 800109c:	4832      	ldr	r0, [pc, #200]	@ (8001168 <CC1201_HardwareDiagnostic+0x2f4>)
 800109e:	f009 fa7d 	bl	800a59c <iprintf>
    printf("  If all RX data is 0x00:\n\r");
 80010a2:	4832      	ldr	r0, [pc, #200]	@ (800116c <CC1201_HardwareDiagnostic+0x2f8>)
 80010a4:	f009 fa7a 	bl	800a59c <iprintf>
    printf("    - Check CC1201 power supply (3.3V)\n\r");
 80010a8:	4831      	ldr	r0, [pc, #196]	@ (8001170 <CC1201_HardwareDiagnostic+0x2fc>)
 80010aa:	f009 fa77 	bl	800a59c <iprintf>
    printf("    - Check MISO connection (CC1201 SO pin to STM32 PA6)\n\r");
 80010ae:	4831      	ldr	r0, [pc, #196]	@ (8001174 <CC1201_HardwareDiagnostic+0x300>)
 80010b0:	f009 fa74 	bl	800a59c <iprintf>
    printf("    - Check if CC1201 is in reset or sleep state\n\r");
 80010b4:	4830      	ldr	r0, [pc, #192]	@ (8001178 <CC1201_HardwareDiagnostic+0x304>)
 80010b6:	f009 fa71 	bl	800a59c <iprintf>
    printf("    - Verify CC1201 crystal oscillator is running\n\r");
 80010ba:	4830      	ldr	r0, [pc, #192]	@ (800117c <CC1201_HardwareDiagnostic+0x308>)
 80010bc:	f009 fa6e 	bl	800a59c <iprintf>
    printf("\n  If all RX data is 0xFF:\n\r");
 80010c0:	482f      	ldr	r0, [pc, #188]	@ (8001180 <CC1201_HardwareDiagnostic+0x30c>)
 80010c2:	f009 fa6b 	bl	800a59c <iprintf>
    printf("    - MISO line may be floating (not connected)\n\r");
 80010c6:	482f      	ldr	r0, [pc, #188]	@ (8001184 <CC1201_HardwareDiagnostic+0x310>)
 80010c8:	f009 fa68 	bl	800a59c <iprintf>
    printf("    - Check SPI MISO pin configuration\n\r");
 80010cc:	482e      	ldr	r0, [pc, #184]	@ (8001188 <CC1201_HardwareDiagnostic+0x314>)
 80010ce:	f009 fa65 	bl	800a59c <iprintf>
    printf("\n  If RX data varies:\n\r");
 80010d2:	482e      	ldr	r0, [pc, #184]	@ (800118c <CC1201_HardwareDiagnostic+0x318>)
 80010d4:	f009 fa62 	bl	800a59c <iprintf>
    printf("    - CC1201 is responding - check command format\n\r");
 80010d8:	482d      	ldr	r0, [pc, #180]	@ (8001190 <CC1201_HardwareDiagnostic+0x31c>)
 80010da:	f009 fa5f 	bl	800a59c <iprintf>
    printf("    - May need proper initialization sequence\n\r");
 80010de:	482d      	ldr	r0, [pc, #180]	@ (8001194 <CC1201_HardwareDiagnostic+0x320>)
 80010e0:	f009 fa5c 	bl	800a59c <iprintf>
    
    printf("=== HARDWARE DIAGNOSTIC COMPLETE ===\n\r");
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <CC1201_HardwareDiagnostic+0x324>)
 80010e6:	f009 fa59 	bl	800a59c <iprintf>
}
 80010ea:	bf00      	nop
 80010ec:	3734      	adds	r7, #52	@ 0x34
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0800b8b4 	.word	0x0800b8b4
 80010f8:	0800b8e0 	.word	0x0800b8e0
 80010fc:	3634303d 	.word	0x3634303d
 8001100:	0800be68 	.word	0x0800be68
 8001104:	58021000 	.word	0x58021000
 8001108:	240000b8 	.word	0x240000b8
 800110c:	0800b904 	.word	0x0800b904
 8001110:	0800b934 	.word	0x0800b934
 8001114:	0800b978 	.word	0x0800b978
 8001118:	0800b9b4 	.word	0x0800b9b4
 800111c:	0800b9ec 	.word	0x0800b9ec
 8001120:	0800ba14 	.word	0x0800ba14
 8001124:	0800ba30 	.word	0x0800ba30
 8001128:	0800ba5c 	.word	0x0800ba5c
 800112c:	0800ba8c 	.word	0x0800ba8c
 8001130:	0800baa8 	.word	0x0800baa8
 8001134:	0800bac8 	.word	0x0800bac8
 8001138:	0800bae0 	.word	0x0800bae0
 800113c:	0800bafc 	.word	0x0800bafc
 8001140:	0800bb04 	.word	0x0800bb04
 8001144:	0800bb08 	.word	0x0800bb08
 8001148:	0800bb2c 	.word	0x0800bb2c
 800114c:	0800bb48 	.word	0x0800bb48
 8001150:	0800bb64 	.word	0x0800bb64
 8001154:	0800bb84 	.word	0x0800bb84
 8001158:	0800be78 	.word	0x0800be78
 800115c:	0800bbc0 	.word	0x0800bbc0
 8001160:	0800bbf4 	.word	0x0800bbf4
 8001164:	0800bc08 	.word	0x0800bc08
 8001168:	0800bc1c 	.word	0x0800bc1c
 800116c:	0800bc38 	.word	0x0800bc38
 8001170:	0800bc54 	.word	0x0800bc54
 8001174:	0800bc80 	.word	0x0800bc80
 8001178:	0800bcbc 	.word	0x0800bcbc
 800117c:	0800bcf0 	.word	0x0800bcf0
 8001180:	0800bd24 	.word	0x0800bd24
 8001184:	0800bd44 	.word	0x0800bd44
 8001188:	0800bd78 	.word	0x0800bd78
 800118c:	0800bda4 	.word	0x0800bda4
 8001190:	0800bdbc 	.word	0x0800bdbc
 8001194:	0800bdf0 	.word	0x0800bdf0
 8001198:	0800be20 	.word	0x0800be20

0800119c <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80011a8:	2200      	movs	r2, #0
 80011aa:	2110      	movs	r1, #16
 80011ac:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <CC1201_SendStrobe+0x5c>)
 80011ae:	f004 fab7 	bl	8005720 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f003 fb4e 	bl	8004854 <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 80011b8:	f107 020e 	add.w	r2, r7, #14
 80011bc:	1df9      	adds	r1, r7, #7
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	480d      	ldr	r0, [pc, #52]	@ (80011fc <CC1201_SendStrobe+0x60>)
 80011c8:	f007 fa78 	bl	80086bc <HAL_SPI_TransmitReceive>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80011d0:	2201      	movs	r2, #1
 80011d2:	2110      	movs	r1, #16
 80011d4:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <CC1201_SendStrobe+0x5c>)
 80011d6:	f004 faa3 	bl	8005720 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <CC1201_SendStrobe+0x50>
        if (status_byte != NULL) {
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <CC1201_SendStrobe+0x50>
            *status_byte = rx_data;
 80011e6:	7bba      	ldrb	r2, [r7, #14]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	58021000 	.word	0x58021000
 80011fc:	240000b8 	.word	0x240000b8

08001200 <STM32_PinConfigDiagnostic>:
#include <stdio.h>

/**
 * @brief Comprehensive STM32 pin configuration and state diagnostic
 */
void STM32_PinConfigDiagnostic(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b0a6      	sub	sp, #152	@ 0x98
 8001204:	af00      	add	r7, sp, #0
    printf("\n=== STM32 PIN CONFIGURATION DIAGNOSTIC ===\n\r");
 8001206:	48b0      	ldr	r0, [pc, #704]	@ (80014c8 <STM32_PinConfigDiagnostic+0x2c8>)
 8001208:	f009 f9c8 	bl	800a59c <iprintf>
    
    // 1. SPI2 Pin Configuration Check
    printf("1. SPI2 PIN CONFIGURATION ANALYSIS\n\r");
 800120c:	48af      	ldr	r0, [pc, #700]	@ (80014cc <STM32_PinConfigDiagnostic+0x2cc>)
 800120e:	f009 f9c5 	bl	800a59c <iprintf>
    // Check SPI2 pins (assuming standard STM32H7 Nucleo mapping)
    // SPI2_SCK  = PB10 or PB13 or PA9
    // SPI2_MISO = PB14 or PC2  or PA6  
    // SPI2_MOSI = PB15 or PC3  or PA10
    
    printf("  Checking potential SPI2 pins:\n\r");
 8001212:	48af      	ldr	r0, [pc, #700]	@ (80014d0 <STM32_PinConfigDiagnostic+0x2d0>)
 8001214:	f009 f9c2 	bl	800a59c <iprintf>
    
    // Check PA6 (likely MISO)
    GPIO_TypeDef* porta = GPIOA;
 8001218:	4bae      	ldr	r3, [pc, #696]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 800121a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t moder_a6 = (porta->MODER >> (6 * 2)) & 0x3;
 800121e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0b1b      	lsrs	r3, r3, #12
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t afr_a6 = (porta->AFR[0] >> (6 * 4)) & 0xF;
 800122e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	0e1b      	lsrs	r3, r3, #24
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_PinState state_a6 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 800123e:	2140      	movs	r1, #64	@ 0x40
 8001240:	48a4      	ldr	r0, [pc, #656]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 8001242:	f004 fa55 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    
    printf("    PA6 (MISO): MODE=%lu (2=AF), AF=%lu (5=SPI2), STATE=%s\n\r", 
 800124c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <STM32_PinConfigDiagnostic+0x58>
 8001254:	4ba0      	ldr	r3, [pc, #640]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 8001256:	e000      	b.n	800125a <STM32_PinConfigDiagnostic+0x5a>
 8001258:	4ba0      	ldr	r3, [pc, #640]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 800125a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800125e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001262:	489f      	ldr	r0, [pc, #636]	@ (80014e0 <STM32_PinConfigDiagnostic+0x2e0>)
 8001264:	f009 f99a 	bl	800a59c <iprintf>
           moder_a6, afr_a6, state_a6 == GPIO_PIN_SET ? "HIGH" : "LOW");
    
    // Check PA10 (likely MOSI)  
    uint32_t moder_a10 = (porta->MODER >> (10 * 2)) & 0x3;
 8001268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0d1b      	lsrs	r3, r3, #20
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t afr_a10 = (porta->AFR[1] >> ((10-8) * 4)) & 0xF;
 8001276:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_PinState state_a10 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001284:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001288:	4892      	ldr	r0, [pc, #584]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 800128a:	f004 fa31 	bl	80056f0 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    
    printf("    PA10 (MOSI): MODE=%lu (2=AF), AF=%lu (5=SPI2), STATE=%s\n\r", 
 8001294:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <STM32_PinConfigDiagnostic+0xa0>
 800129c:	4b8e      	ldr	r3, [pc, #568]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 800129e:	e000      	b.n	80012a2 <STM32_PinConfigDiagnostic+0xa2>
 80012a0:	4b8e      	ldr	r3, [pc, #568]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 80012a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80012a4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80012a6:	488f      	ldr	r0, [pc, #572]	@ (80014e4 <STM32_PinConfigDiagnostic+0x2e4>)
 80012a8:	f009 f978 	bl	800a59c <iprintf>
           moder_a10, afr_a10, state_a10 == GPIO_PIN_SET ? "HIGH" : "LOW");
    
    // Check PB10 (likely SCK)
    GPIO_TypeDef* portb = GPIOB;
 80012ac:	4b8e      	ldr	r3, [pc, #568]	@ (80014e8 <STM32_PinConfigDiagnostic+0x2e8>)
 80012ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t moder_b10 = (portb->MODER >> (10 * 2)) & 0x3;
 80012b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0d1b      	lsrs	r3, r3, #20
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    uint32_t afr_b10 = (portb->AFR[1] >> ((10-8) * 4)) & 0xF;
 80012bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_PinState state_b10 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80012c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012cc:	4886      	ldr	r0, [pc, #536]	@ (80014e8 <STM32_PinConfigDiagnostic+0x2e8>)
 80012ce:	f004 fa0f 	bl	80056f0 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    
    printf("    PB10 (SCK): MODE=%lu (2=AF), AF=%lu (5=SPI2), STATE=%s\n\r", 
 80012d8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <STM32_PinConfigDiagnostic+0xe4>
 80012e0:	4b7d      	ldr	r3, [pc, #500]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 80012e2:	e000      	b.n	80012e6 <STM32_PinConfigDiagnostic+0xe6>
 80012e4:	4b7d      	ldr	r3, [pc, #500]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 80012e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80012e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80012ea:	4880      	ldr	r0, [pc, #512]	@ (80014ec <STM32_PinConfigDiagnostic+0x2ec>)
 80012ec:	f009 f956 	bl	800a59c <iprintf>
           moder_b10, afr_b10, state_b10 == GPIO_PIN_SET ? "HIGH" : "LOW");
    
    // 2. CS Pin (PE4) Detailed Analysis
    printf("\n2. CS PIN (PE4) DETAILED ANALYSIS\n\r");
 80012f0:	487f      	ldr	r0, [pc, #508]	@ (80014f0 <STM32_PinConfigDiagnostic+0x2f0>)
 80012f2:	f009 f953 	bl	800a59c <iprintf>
    GPIO_TypeDef* porte = GPIOE;
 80012f6:	4b7f      	ldr	r3, [pc, #508]	@ (80014f4 <STM32_PinConfigDiagnostic+0x2f4>)
 80012f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t moder_e4 = (porte->MODER >> (4 * 2)) & 0x3;
 80012fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t otyper_e4 = (porte->OTYPER >> 4) & 0x1;
 8001306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t ospeedr_e4 = (porte->OSPEEDR >> (4 * 2)) & 0x3;
 8001312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t pupdr_e4 = (porte->PUPDR >> (4 * 2)) & 0x3;
 800131e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_PinState state_e4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 800132a:	2110      	movs	r1, #16
 800132c:	4871      	ldr	r0, [pc, #452]	@ (80014f4 <STM32_PinConfigDiagnostic+0x2f4>)
 800132e:	f004 f9df 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    
    printf("    PE4 Configuration:\n\r");
 8001338:	486f      	ldr	r0, [pc, #444]	@ (80014f8 <STM32_PinConfigDiagnostic+0x2f8>)
 800133a:	f009 f92f 	bl	800a59c <iprintf>
    printf("      MODE: %lu (0=Input, 1=Output, 2=AF, 3=Analog)\n\r", moder_e4);
 800133e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001340:	486e      	ldr	r0, [pc, #440]	@ (80014fc <STM32_PinConfigDiagnostic+0x2fc>)
 8001342:	f009 f92b 	bl	800a59c <iprintf>
    printf("      OTYPE: %lu (0=Push-pull, 1=Open-drain)\n\r", otyper_e4);
 8001346:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001348:	486d      	ldr	r0, [pc, #436]	@ (8001500 <STM32_PinConfigDiagnostic+0x300>)
 800134a:	f009 f927 	bl	800a59c <iprintf>
    printf("      SPEED: %lu (0=Low, 1=Medium, 2=High, 3=VeryHigh)\n\r", ospeedr_e4);
 800134e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001350:	486c      	ldr	r0, [pc, #432]	@ (8001504 <STM32_PinConfigDiagnostic+0x304>)
 8001352:	f009 f923 	bl	800a59c <iprintf>
    printf("      PUPD: %lu (0=None, 1=Pull-up, 2=Pull-down)\n\r", pupdr_e4);
 8001356:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001358:	486b      	ldr	r0, [pc, #428]	@ (8001508 <STM32_PinConfigDiagnostic+0x308>)
 800135a:	f009 f91f 	bl	800a59c <iprintf>
    printf("      STATE: %s\n\r", state_e4 == GPIO_PIN_SET ? "HIGH" : "LOW");
 800135e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <STM32_PinConfigDiagnostic+0x16a>
 8001366:	4b5c      	ldr	r3, [pc, #368]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 8001368:	e000      	b.n	800136c <STM32_PinConfigDiagnostic+0x16c>
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 800136c:	4619      	mov	r1, r3
 800136e:	4867      	ldr	r0, [pc, #412]	@ (800150c <STM32_PinConfigDiagnostic+0x30c>)
 8001370:	f009 f914 	bl	800a59c <iprintf>
    
    // 3. INT Pin (PD4) Analysis
    printf("\n3. INT PIN (PD4) ANALYSIS\n\r");
 8001374:	4866      	ldr	r0, [pc, #408]	@ (8001510 <STM32_PinConfigDiagnostic+0x310>)
 8001376:	f009 f911 	bl	800a59c <iprintf>
    GPIO_TypeDef* portd = GPIOD;
 800137a:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <STM32_PinConfigDiagnostic+0x314>)
 800137c:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t moder_d4 = (portd->MODER >> (4 * 2)) & 0x3;
 800137e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t pupdr_d4 = (portd->PUPDR >> (4 * 2)) & 0x3;
 800138a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_PinState state_d4 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001396:	2110      	movs	r1, #16
 8001398:	485e      	ldr	r0, [pc, #376]	@ (8001514 <STM32_PinConfigDiagnostic+0x314>)
 800139a:	f004 f9a9 	bl	80056f0 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    
    printf("    PD4 Configuration:\n\r");
 80013a4:	485c      	ldr	r0, [pc, #368]	@ (8001518 <STM32_PinConfigDiagnostic+0x318>)
 80013a6:	f009 f8f9 	bl	800a59c <iprintf>
    printf("      MODE: %lu (0=Input, 1=Output, 2=AF, 3=Analog)\n\r", moder_d4);
 80013aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80013ac:	4853      	ldr	r0, [pc, #332]	@ (80014fc <STM32_PinConfigDiagnostic+0x2fc>)
 80013ae:	f009 f8f5 	bl	800a59c <iprintf>
    printf("      PUPD: %lu (0=None, 1=Pull-up, 2=Pull-down)\n\r", pupdr_d4);
 80013b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80013b4:	4854      	ldr	r0, [pc, #336]	@ (8001508 <STM32_PinConfigDiagnostic+0x308>)
 80013b6:	f009 f8f1 	bl	800a59c <iprintf>
    printf("      STATE: %s\n\r", state_d4 == GPIO_PIN_SET ? "HIGH" : "LOW");
 80013ba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <STM32_PinConfigDiagnostic+0x1c6>
 80013c2:	4b45      	ldr	r3, [pc, #276]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 80013c4:	e000      	b.n	80013c8 <STM32_PinConfigDiagnostic+0x1c8>
 80013c6:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 80013c8:	4619      	mov	r1, r3
 80013ca:	4850      	ldr	r0, [pc, #320]	@ (800150c <STM32_PinConfigDiagnostic+0x30c>)
 80013cc:	f009 f8e6 	bl	800a59c <iprintf>
    
    // 4. Alternative Pin Scanning
    printf("\n4. SCANNING FOR POTENTIAL SPI PINS\n\r");
 80013d0:	4852      	ldr	r0, [pc, #328]	@ (800151c <STM32_PinConfigDiagnostic+0x31c>)
 80013d2:	f009 f8e3 	bl	800a59c <iprintf>
    printf("  Checking all GPIO ports for AF5 (SPI2) configuration:\n\r");
 80013d6:	4852      	ldr	r0, [pc, #328]	@ (8001520 <STM32_PinConfigDiagnostic+0x320>)
 80013d8:	f009 f8e0 	bl	800a59c <iprintf>
    
    // Port A scan
    printf("    Port A:\n\r");
 80013dc:	4851      	ldr	r0, [pc, #324]	@ (8001524 <STM32_PinConfigDiagnostic+0x324>)
 80013de:	f009 f8dd 	bl	800a59c <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013e8:	e048      	b.n	800147c <STM32_PinConfigDiagnostic+0x27c>
        uint32_t mode = (porta->MODER >> (pin * 2)) & 0x3;
 80013ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	60bb      	str	r3, [r7, #8]
        if (mode == 2) { // Alternate function mode
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d135      	bne.n	8001472 <STM32_PinConfigDiagnostic+0x272>
            uint32_t af = (pin < 8) ? 
                         ((porta->AFR[0] >> (pin * 4)) & 0xF) : 
 8001406:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800140a:	2b07      	cmp	r3, #7
 800140c:	dc0a      	bgt.n	8001424 <STM32_PinConfigDiagnostic+0x224>
 800140e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	e00a      	b.n	800143a <STM32_PinConfigDiagnostic+0x23a>
                         ((porta->AFR[1] >> ((pin-8) * 4)) & 0xF);
 8001424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800142a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800142e:	3b08      	subs	r3, #8
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
                         ((porta->AFR[0] >> (pin * 4)) & 0xF) : 
 8001436:	f003 030f 	and.w	r3, r3, #15
            uint32_t af = (pin < 8) ? 
 800143a:	607b      	str	r3, [r7, #4]
            if (af == 5) { // AF5 = SPI2
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d117      	bne.n	8001472 <STM32_PinConfigDiagnostic+0x272>
                GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, 1 << pin);
 8001442:	2201      	movs	r2, #1
 8001444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4820      	ldr	r0, [pc, #128]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 8001452:	f004 f94d 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	70fb      	strb	r3, [r7, #3]
                printf("      PA%d: AF5 (SPI2), STATE=%s\n\r", pin, 
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <STM32_PinConfigDiagnostic+0x264>
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 8001462:	e000      	b.n	8001466 <STM32_PinConfigDiagnostic+0x266>
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 8001466:	461a      	mov	r2, r3
 8001468:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800146c:	482e      	ldr	r0, [pc, #184]	@ (8001528 <STM32_PinConfigDiagnostic+0x328>)
 800146e:	f009 f895 	bl	800a59c <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 8001472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001476:	3301      	adds	r3, #1
 8001478:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800147c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001480:	2b0f      	cmp	r3, #15
 8001482:	ddb2      	ble.n	80013ea <STM32_PinConfigDiagnostic+0x1ea>
            }
        }
    }
    
    // Port B scan
    printf("    Port B:\n\r");
 8001484:	4829      	ldr	r0, [pc, #164]	@ (800152c <STM32_PinConfigDiagnostic+0x32c>)
 8001486:	f009 f889 	bl	800a59c <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001490:	e079      	b.n	8001586 <STM32_PinConfigDiagnostic+0x386>
        uint32_t mode = (portb->MODER >> (pin * 2)) & 0x3;
 8001492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	617b      	str	r3, [r7, #20]
        if (mode == 2) { // Alternate function mode
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d167      	bne.n	800157c <STM32_PinConfigDiagnostic+0x37c>
            uint32_t af = (pin < 8) ? 
                         ((portb->AFR[0] >> (pin * 4)) & 0xF) : 
 80014ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014b0:	2b07      	cmp	r3, #7
 80014b2:	dc3d      	bgt.n	8001530 <STM32_PinConfigDiagnostic+0x330>
 80014b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	e03d      	b.n	8001544 <STM32_PinConfigDiagnostic+0x344>
 80014c8:	0800be80 	.word	0x0800be80
 80014cc:	0800beb0 	.word	0x0800beb0
 80014d0:	0800bed8 	.word	0x0800bed8
 80014d4:	58020000 	.word	0x58020000
 80014d8:	0800befc 	.word	0x0800befc
 80014dc:	0800bf04 	.word	0x0800bf04
 80014e0:	0800bf08 	.word	0x0800bf08
 80014e4:	0800bf48 	.word	0x0800bf48
 80014e8:	58020400 	.word	0x58020400
 80014ec:	0800bf88 	.word	0x0800bf88
 80014f0:	0800bfc8 	.word	0x0800bfc8
 80014f4:	58021000 	.word	0x58021000
 80014f8:	0800bff0 	.word	0x0800bff0
 80014fc:	0800c00c 	.word	0x0800c00c
 8001500:	0800c044 	.word	0x0800c044
 8001504:	0800c074 	.word	0x0800c074
 8001508:	0800c0b0 	.word	0x0800c0b0
 800150c:	0800c0e4 	.word	0x0800c0e4
 8001510:	0800c0f8 	.word	0x0800c0f8
 8001514:	58020c00 	.word	0x58020c00
 8001518:	0800c118 	.word	0x0800c118
 800151c:	0800c134 	.word	0x0800c134
 8001520:	0800c15c 	.word	0x0800c15c
 8001524:	0800c198 	.word	0x0800c198
 8001528:	0800c1a8 	.word	0x0800c1a8
 800152c:	0800c1cc 	.word	0x0800c1cc
                         ((portb->AFR[1] >> ((pin-8) * 4)) & 0xF);
 8001530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001534:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001538:	3b08      	subs	r3, #8
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
                         ((portb->AFR[0] >> (pin * 4)) & 0xF) : 
 8001540:	f003 030f 	and.w	r3, r3, #15
            uint32_t af = (pin < 8) ? 
 8001544:	613b      	str	r3, [r7, #16]
            if (af == 5) { // AF5 = SPI2
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d117      	bne.n	800157c <STM32_PinConfigDiagnostic+0x37c>
                GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, 1 << pin);
 800154c:	2201      	movs	r2, #1
 800154e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	4890      	ldr	r0, [pc, #576]	@ (800179c <STM32_PinConfigDiagnostic+0x59c>)
 800155c:	f004 f8c8 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
                printf("      PB%d: AF5 (SPI2), STATE=%s\n\r", pin, 
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <STM32_PinConfigDiagnostic+0x36e>
 800156a:	4b8d      	ldr	r3, [pc, #564]	@ (80017a0 <STM32_PinConfigDiagnostic+0x5a0>)
 800156c:	e000      	b.n	8001570 <STM32_PinConfigDiagnostic+0x370>
 800156e:	4b8d      	ldr	r3, [pc, #564]	@ (80017a4 <STM32_PinConfigDiagnostic+0x5a4>)
 8001570:	461a      	mov	r2, r3
 8001572:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001576:	488c      	ldr	r0, [pc, #560]	@ (80017a8 <STM32_PinConfigDiagnostic+0x5a8>)
 8001578:	f009 f810 	bl	800a59c <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 800157c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001580:	3301      	adds	r3, #1
 8001582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800158a:	2b0f      	cmp	r3, #15
 800158c:	dd81      	ble.n	8001492 <STM32_PinConfigDiagnostic+0x292>
            }
        }
    }
    
    // Port C scan
    GPIO_TypeDef* portc = GPIOC;
 800158e:	4b87      	ldr	r3, [pc, #540]	@ (80017ac <STM32_PinConfigDiagnostic+0x5ac>)
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
    printf("    Port C:\n\r");
 8001592:	4887      	ldr	r0, [pc, #540]	@ (80017b0 <STM32_PinConfigDiagnostic+0x5b0>)
 8001594:	f009 f802 	bl	800a59c <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800159e:	e045      	b.n	800162c <STM32_PinConfigDiagnostic+0x42c>
        uint32_t mode = (portc->MODER >> (pin * 2)) & 0x3;
 80015a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
        if (mode == 2) { // Alternate function mode
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d133      	bne.n	8001622 <STM32_PinConfigDiagnostic+0x422>
            uint32_t af = (pin < 8) ? 
                         ((portc->AFR[0] >> (pin * 4)) & 0xF) : 
 80015ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015be:	2b07      	cmp	r3, #7
 80015c0:	dc09      	bgt.n	80015d6 <STM32_PinConfigDiagnostic+0x3d6>
 80015c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c4:	6a1a      	ldr	r2, [r3, #32]
 80015c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	e009      	b.n	80015ea <STM32_PinConfigDiagnostic+0x3ea>
                         ((portc->AFR[1] >> ((pin-8) * 4)) & 0xF);
 80015d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015de:	3b08      	subs	r3, #8
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
                         ((portc->AFR[0] >> (pin * 4)) & 0xF) : 
 80015e6:	f003 030f 	and.w	r3, r3, #15
            uint32_t af = (pin < 8) ? 
 80015ea:	61fb      	str	r3, [r7, #28]
            if (af == 5) { // AF5 = SPI2
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d117      	bne.n	8001622 <STM32_PinConfigDiagnostic+0x422>
                GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, 1 << pin);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	486a      	ldr	r0, [pc, #424]	@ (80017ac <STM32_PinConfigDiagnostic+0x5ac>)
 8001602:	f004 f875 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	76fb      	strb	r3, [r7, #27]
                printf("      PC%d: AF5 (SPI2), STATE=%s\n\r", pin, 
 800160a:	7efb      	ldrb	r3, [r7, #27]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <STM32_PinConfigDiagnostic+0x414>
 8001610:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <STM32_PinConfigDiagnostic+0x5a0>)
 8001612:	e000      	b.n	8001616 <STM32_PinConfigDiagnostic+0x416>
 8001614:	4b63      	ldr	r3, [pc, #396]	@ (80017a4 <STM32_PinConfigDiagnostic+0x5a4>)
 8001616:	461a      	mov	r2, r3
 8001618:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800161c:	4865      	ldr	r0, [pc, #404]	@ (80017b4 <STM32_PinConfigDiagnostic+0x5b4>)
 800161e:	f008 ffbd 	bl	800a59c <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 8001622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001626:	3301      	adds	r3, #1
 8001628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800162c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001630:	2b0f      	cmp	r3, #15
 8001632:	ddb5      	ble.n	80015a0 <STM32_PinConfigDiagnostic+0x3a0>
            }
        }
    }
    
    // 5. SPI2 Peripheral Register Analysis
    printf("\n5. SPI2 PERIPHERAL REGISTER ANALYSIS\n\r");
 8001634:	4860      	ldr	r0, [pc, #384]	@ (80017b8 <STM32_PinConfigDiagnostic+0x5b8>)
 8001636:	f008 ffb1 	bl	800a59c <iprintf>
    printf("    SPI2->CR1: 0x%08lX\n\r", (unsigned long)SPI2->CR1);
 800163a:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	485f      	ldr	r0, [pc, #380]	@ (80017c0 <STM32_PinConfigDiagnostic+0x5c0>)
 8001642:	f008 ffab 	bl	800a59c <iprintf>
    printf("    SPI2->CR2: 0x%08lX\n\r", (unsigned long)SPI2->CR2);
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4619      	mov	r1, r3
 800164c:	485d      	ldr	r0, [pc, #372]	@ (80017c4 <STM32_PinConfigDiagnostic+0x5c4>)
 800164e:	f008 ffa5 	bl	800a59c <iprintf>
    printf("    SPI2->SR:  0x%08lX\n\r", (unsigned long)SPI2->SR);
 8001652:	4b5a      	ldr	r3, [pc, #360]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4619      	mov	r1, r3
 8001658:	485b      	ldr	r0, [pc, #364]	@ (80017c8 <STM32_PinConfigDiagnostic+0x5c8>)
 800165a:	f008 ff9f 	bl	800a59c <iprintf>
    printf("    SPI2->CFG1: 0x%08lX\n\r", (unsigned long)SPI2->CFG1);
 800165e:	4b57      	ldr	r3, [pc, #348]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4619      	mov	r1, r3
 8001664:	4859      	ldr	r0, [pc, #356]	@ (80017cc <STM32_PinConfigDiagnostic+0x5cc>)
 8001666:	f008 ff99 	bl	800a59c <iprintf>
    printf("    SPI2->CFG2: 0x%08lX\n\r", (unsigned long)SPI2->CFG2);
 800166a:	4b54      	ldr	r3, [pc, #336]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4619      	mov	r1, r3
 8001670:	4857      	ldr	r0, [pc, #348]	@ (80017d0 <STM32_PinConfigDiagnostic+0x5d0>)
 8001672:	f008 ff93 	bl	800a59c <iprintf>
    
    // Decode important bits for STM32H7
    uint32_t cr1 = SPI2->CR1;
 8001676:	4b51      	ldr	r3, [pc, #324]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t cfg2 = SPI2->CFG2;
 800167c:	4b4f      	ldr	r3, [pc, #316]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    printf("    SPI2 Decoded (STM32H7):\n\r");
 8001682:	4854      	ldr	r0, [pc, #336]	@ (80017d4 <STM32_PinConfigDiagnostic+0x5d4>)
 8001684:	f008 ff8a 	bl	800a59c <iprintf>
    printf("      SPE (Enable): %s\n\r", (cr1 & SPI_CR1_SPE) ? "ENABLED" : "DISABLED");
 8001688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <STM32_PinConfigDiagnostic+0x496>
 8001692:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001694:	e000      	b.n	8001698 <STM32_PinConfigDiagnostic+0x498>
 8001696:	4b51      	ldr	r3, [pc, #324]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001698:	4619      	mov	r1, r3
 800169a:	4851      	ldr	r0, [pc, #324]	@ (80017e0 <STM32_PinConfigDiagnostic+0x5e0>)
 800169c:	f008 ff7e 	bl	800a59c <iprintf>
    printf("      MASTER (from CFG2): %s\n\r", (cfg2 & SPI_CFG2_MASTER) ? "MASTER" : "SLAVE");
 80016a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <STM32_PinConfigDiagnostic+0x4ae>
 80016aa:	4b4e      	ldr	r3, [pc, #312]	@ (80017e4 <STM32_PinConfigDiagnostic+0x5e4>)
 80016ac:	e000      	b.n	80016b0 <STM32_PinConfigDiagnostic+0x4b0>
 80016ae:	4b4e      	ldr	r3, [pc, #312]	@ (80017e8 <STM32_PinConfigDiagnostic+0x5e8>)
 80016b0:	4619      	mov	r1, r3
 80016b2:	484e      	ldr	r0, [pc, #312]	@ (80017ec <STM32_PinConfigDiagnostic+0x5ec>)
 80016b4:	f008 ff72 	bl	800a59c <iprintf>
    printf("      SSI (Internal SS): %s\n\r", (cr1 & SPI_CR1_SSI) ? "HIGH" : "LOW");
 80016b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <STM32_PinConfigDiagnostic+0x4c6>
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <STM32_PinConfigDiagnostic+0x5a0>)
 80016c4:	e000      	b.n	80016c8 <STM32_PinConfigDiagnostic+0x4c8>
 80016c6:	4b37      	ldr	r3, [pc, #220]	@ (80017a4 <STM32_PinConfigDiagnostic+0x5a4>)
 80016c8:	4619      	mov	r1, r3
 80016ca:	4849      	ldr	r0, [pc, #292]	@ (80017f0 <STM32_PinConfigDiagnostic+0x5f0>)
 80016cc:	f008 ff66 	bl	800a59c <iprintf>
    printf("      SSOE (SS Output Enable): %s\n\r", (cfg2 & SPI_CFG2_SSOE) ? "ENABLED" : "DISABLED");
 80016d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <STM32_PinConfigDiagnostic+0x4de>
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 80016dc:	e000      	b.n	80016e0 <STM32_PinConfigDiagnostic+0x4e0>
 80016de:	4b3f      	ldr	r3, [pc, #252]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 80016e0:	4619      	mov	r1, r3
 80016e2:	4844      	ldr	r0, [pc, #272]	@ (80017f4 <STM32_PinConfigDiagnostic+0x5f4>)
 80016e4:	f008 ff5a 	bl	800a59c <iprintf>
    
    // 6. Clock Configuration Check
    printf("\n6. CLOCK CONFIGURATION CHECK\n\r");
 80016e8:	4843      	ldr	r0, [pc, #268]	@ (80017f8 <STM32_PinConfigDiagnostic+0x5f8>)
 80016ea:	f008 ff57 	bl	800a59c <iprintf>
    uint32_t rcc_apb1enr = RCC->APB1LENR;
 80016ee:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <STM32_PinConfigDiagnostic+0x5fc>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    printf("    SPI2 Clock: %s\n\r", (rcc_apb1enr & RCC_APB1LENR_SPI2EN) ? "ENABLED" : "DISABLED");
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <STM32_PinConfigDiagnostic+0x504>
 8001700:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001702:	e000      	b.n	8001706 <STM32_PinConfigDiagnostic+0x506>
 8001704:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001706:	4619      	mov	r1, r3
 8001708:	483d      	ldr	r0, [pc, #244]	@ (8001800 <STM32_PinConfigDiagnostic+0x600>)
 800170a:	f008 ff47 	bl	800a59c <iprintf>
    
    uint32_t rcc_ahb4enr = RCC->AHB4ENR;
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <STM32_PinConfigDiagnostic+0x5fc>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("    GPIOA Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOAEN) ? "ENABLED" : "DISABLED");
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <STM32_PinConfigDiagnostic+0x524>
 8001720:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001722:	e000      	b.n	8001726 <STM32_PinConfigDiagnostic+0x526>
 8001724:	4b2d      	ldr	r3, [pc, #180]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001726:	4619      	mov	r1, r3
 8001728:	4836      	ldr	r0, [pc, #216]	@ (8001804 <STM32_PinConfigDiagnostic+0x604>)
 800172a:	f008 ff37 	bl	800a59c <iprintf>
    printf("    GPIOB Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOBEN) ? "ENABLED" : "DISABLED");
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <STM32_PinConfigDiagnostic+0x53c>
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 800173a:	e000      	b.n	800173e <STM32_PinConfigDiagnostic+0x53e>
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 800173e:	4619      	mov	r1, r3
 8001740:	4831      	ldr	r0, [pc, #196]	@ (8001808 <STM32_PinConfigDiagnostic+0x608>)
 8001742:	f008 ff2b 	bl	800a59c <iprintf>
    printf("    GPIOC Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOCEN) ? "ENABLED" : "DISABLED");
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <STM32_PinConfigDiagnostic+0x554>
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001752:	e000      	b.n	8001756 <STM32_PinConfigDiagnostic+0x556>
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001756:	4619      	mov	r1, r3
 8001758:	482c      	ldr	r0, [pc, #176]	@ (800180c <STM32_PinConfigDiagnostic+0x60c>)
 800175a:	f008 ff1f 	bl	800a59c <iprintf>
    printf("    GPIOD Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIODEN) ? "ENABLED" : "DISABLED");
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <STM32_PinConfigDiagnostic+0x56c>
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 800176a:	e000      	b.n	800176e <STM32_PinConfigDiagnostic+0x56e>
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 800176e:	4619      	mov	r1, r3
 8001770:	4827      	ldr	r0, [pc, #156]	@ (8001810 <STM32_PinConfigDiagnostic+0x610>)
 8001772:	f008 ff13 	bl	800a59c <iprintf>
    printf("    GPIOE Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOEEN) ? "ENABLED" : "DISABLED");
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <STM32_PinConfigDiagnostic+0x584>
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001782:	e000      	b.n	8001786 <STM32_PinConfigDiagnostic+0x586>
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001786:	4619      	mov	r1, r3
 8001788:	4822      	ldr	r0, [pc, #136]	@ (8001814 <STM32_PinConfigDiagnostic+0x614>)
 800178a:	f008 ff07 	bl	800a59c <iprintf>
    
    printf("=== PIN CONFIGURATION DIAGNOSTIC COMPLETE ===\n\r");
 800178e:	4822      	ldr	r0, [pc, #136]	@ (8001818 <STM32_PinConfigDiagnostic+0x618>)
 8001790:	f008 ff04 	bl	800a59c <iprintf>
}
 8001794:	bf00      	nop
 8001796:	3798      	adds	r7, #152	@ 0x98
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58020400 	.word	0x58020400
 80017a0:	0800befc 	.word	0x0800befc
 80017a4:	0800bf04 	.word	0x0800bf04
 80017a8:	0800c1dc 	.word	0x0800c1dc
 80017ac:	58020800 	.word	0x58020800
 80017b0:	0800c200 	.word	0x0800c200
 80017b4:	0800c210 	.word	0x0800c210
 80017b8:	0800c234 	.word	0x0800c234
 80017bc:	40003800 	.word	0x40003800
 80017c0:	0800c25c 	.word	0x0800c25c
 80017c4:	0800c278 	.word	0x0800c278
 80017c8:	0800c294 	.word	0x0800c294
 80017cc:	0800c2b0 	.word	0x0800c2b0
 80017d0:	0800c2cc 	.word	0x0800c2cc
 80017d4:	0800c2e8 	.word	0x0800c2e8
 80017d8:	0800c308 	.word	0x0800c308
 80017dc:	0800c310 	.word	0x0800c310
 80017e0:	0800c31c 	.word	0x0800c31c
 80017e4:	0800c338 	.word	0x0800c338
 80017e8:	0800c340 	.word	0x0800c340
 80017ec:	0800c348 	.word	0x0800c348
 80017f0:	0800c368 	.word	0x0800c368
 80017f4:	0800c388 	.word	0x0800c388
 80017f8:	0800c3ac 	.word	0x0800c3ac
 80017fc:	58024400 	.word	0x58024400
 8001800:	0800c3cc 	.word	0x0800c3cc
 8001804:	0800c3e4 	.word	0x0800c3e4
 8001808:	0800c3fc 	.word	0x0800c3fc
 800180c:	0800c414 	.word	0x0800c414
 8001810:	0800c42c 	.word	0x0800c42c
 8001814:	0800c444 	.word	0x0800c444
 8001818:	0800c45c 	.word	0x0800c45c

0800181c <Test_Alternative_SPI2_Pins>:

/**
 * @brief Test different possible SPI2 MISO pin configurations
 * STM32H7 supports multiple pin options for SPI2
 */
void Test_Alternative_SPI2_Pins(void) {
 800181c:	b5b0      	push	{r4, r5, r7, lr}
 800181e:	b09c      	sub	sp, #112	@ 0x70
 8001820:	af02      	add	r7, sp, #8
    printf("\n=== TESTING ALTERNATIVE SPI2 PIN MAPPINGS ===\n\r");
 8001822:	488f      	ldr	r0, [pc, #572]	@ (8001a60 <Test_Alternative_SPI2_Pins+0x244>)
 8001824:	f008 feba 	bl	800a59c <iprintf>
    
    // Store original SPI configuration
    printf("1. Testing current configuration (PA6 MISO)...\n\r");
 8001828:	488e      	ldr	r0, [pc, #568]	@ (8001a64 <Test_Alternative_SPI2_Pins+0x248>)
 800182a:	f008 feb7 	bl	800a59c <iprintf>
    uint8_t tx_data = 0xAA;
 800182e:	23aa      	movs	r3, #170	@ 0xaa
 8001830:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    uint8_t rx_data = 0x00;
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
    
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 800183a:	2200      	movs	r2, #0
 800183c:	2110      	movs	r1, #16
 800183e:	488a      	ldr	r0, [pc, #552]	@ (8001a68 <Test_Alternative_SPI2_Pins+0x24c>)
 8001840:	f003 ff6e 	bl	8005720 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi2, &tx_data, &rx_data, 1, 1000);
 8001844:	f107 0261 	add.w	r2, r7, #97	@ 0x61
 8001848:	f107 0162 	add.w	r1, r7, #98	@ 0x62
 800184c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	4885      	ldr	r0, [pc, #532]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 8001856:	f006 ff31 	bl	80086bc <HAL_SPI_TransmitReceive>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 8001860:	2201      	movs	r2, #1
 8001862:	2110      	movs	r1, #16
 8001864:	4880      	ldr	r0, [pc, #512]	@ (8001a68 <Test_Alternative_SPI2_Pins+0x24c>)
 8001866:	f003 ff5b 	bl	8005720 <HAL_GPIO_WritePin>
    
    printf("    Current PA6: TX=0x%02X -> RX=0x%02X, HAL=%d\n\r", tx_data, rx_data, status);
 800186a:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800186e:	4619      	mov	r1, r3
 8001870:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001874:	461a      	mov	r2, r3
 8001876:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800187a:	487d      	ldr	r0, [pc, #500]	@ (8001a70 <Test_Alternative_SPI2_Pins+0x254>)
 800187c:	f008 fe8e 	bl	800a59c <iprintf>
    
    // Test 2: Try PC2 as MISO (alternative SPI2 mapping)
    printf("\n2. Testing PC2 as SPI2_MISO...\n\r");
 8001880:	487c      	ldr	r0, [pc, #496]	@ (8001a74 <Test_Alternative_SPI2_Pins+0x258>)
 8001882:	f008 fe8b 	bl	800a59c <iprintf>
    
    // Disable SPI2 first
    __HAL_SPI_DISABLE(&hspi2);
 8001886:	4b79      	ldr	r3, [pc, #484]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b77      	ldr	r3, [pc, #476]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    
    // Reconfigure PA6 back to analog to disconnect it
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a6:	2340      	movs	r3, #64	@ 0x40
 80018a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018aa:	2303      	movs	r3, #3
 80018ac:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018b2:	4619      	mov	r1, r3
 80018b4:	4870      	ldr	r0, [pc, #448]	@ (8001a78 <Test_Alternative_SPI2_Pins+0x25c>)
 80018b6:	f003 fc61 	bl	800517c <HAL_GPIO_Init>
    
    // Enable GPIOC clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <Test_Alternative_SPI2_Pins+0x260>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a7c <Test_Alternative_SPI2_Pins+0x260>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ca:	4b6c      	ldr	r3, [pc, #432]	@ (8001a7c <Test_Alternative_SPI2_Pins+0x260>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
    
    // Configure PC2 as SPI2_MISO
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018d8:	2304      	movs	r3, #4
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e4:	2302      	movs	r3, #2
 80018e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e8:	2305      	movs	r3, #5
 80018ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4863      	ldr	r0, [pc, #396]	@ (8001a80 <Test_Alternative_SPI2_Pins+0x264>)
 80018f4:	f003 fc42 	bl	800517c <HAL_GPIO_Init>
    
    // Re-enable SPI2
    __HAL_SPI_ENABLE(&hspi2);
 80018f8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
    
    // Test with PC2
    rx_data = 0x00;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 800190e:	2200      	movs	r2, #0
 8001910:	2110      	movs	r1, #16
 8001912:	4855      	ldr	r0, [pc, #340]	@ (8001a68 <Test_Alternative_SPI2_Pins+0x24c>)
 8001914:	f003 ff04 	bl	8005720 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, &tx_data, &rx_data, 1, 1000);
 8001918:	f107 0261 	add.w	r2, r7, #97	@ 0x61
 800191c:	f107 0162 	add.w	r1, r7, #98	@ 0x62
 8001920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	4850      	ldr	r0, [pc, #320]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 800192a:	f006 fec7 	bl	80086bc <HAL_SPI_TransmitReceive>
 800192e:	4603      	mov	r3, r0
 8001930:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 8001934:	2201      	movs	r2, #1
 8001936:	2110      	movs	r1, #16
 8001938:	484b      	ldr	r0, [pc, #300]	@ (8001a68 <Test_Alternative_SPI2_Pins+0x24c>)
 800193a:	f003 fef1 	bl	8005720 <HAL_GPIO_WritePin>
    
    printf("    PC2 test: TX=0x%02X -> RX=0x%02X, HAL=%d\n\r", tx_data, rx_data, status);
 800193e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001942:	4619      	mov	r1, r3
 8001944:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001948:	461a      	mov	r2, r3
 800194a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800194e:	484d      	ldr	r0, [pc, #308]	@ (8001a84 <Test_Alternative_SPI2_Pins+0x268>)
 8001950:	f008 fe24 	bl	800a59c <iprintf>
    
    if (rx_data != 0x00) {
 8001954:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <Test_Alternative_SPI2_Pins+0x148>
        printf("    ✅ PC2 is working as MISO!\n\r");
 800195c:	484a      	ldr	r0, [pc, #296]	@ (8001a88 <Test_Alternative_SPI2_Pins+0x26c>)
 800195e:	f008 fe1d 	bl	800a59c <iprintf>
        return; // Keep PC2 configuration
 8001962:	e154      	b.n	8001c0e <Test_Alternative_SPI2_Pins+0x3f2>
    }
    
    // Test 3: Try PB14 as MISO (another alternative)
    printf("\n3. Testing PB14 as SPI2_MISO...\n\r");
 8001964:	4849      	ldr	r0, [pc, #292]	@ (8001a8c <Test_Alternative_SPI2_Pins+0x270>)
 8001966:	f008 fe19 	bl	800a59c <iprintf>
    
    // Disable SPI2
    __HAL_SPI_DISABLE(&hspi2);
 800196a:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
    
    // Disconnect PC2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800197a:	2304      	movs	r3, #4
 800197c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197e:	2303      	movs	r3, #3
 8001980:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001982:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001986:	4619      	mov	r1, r3
 8001988:	483d      	ldr	r0, [pc, #244]	@ (8001a80 <Test_Alternative_SPI2_Pins+0x264>)
 800198a:	f003 fbf7 	bl	800517c <HAL_GPIO_Init>
    
    // Configure PB14 as SPI2_MISO
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800198e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001992:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199c:	2302      	movs	r3, #2
 800199e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a0:	2305      	movs	r3, #5
 80019a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4839      	ldr	r0, [pc, #228]	@ (8001a90 <Test_Alternative_SPI2_Pins+0x274>)
 80019ac:	f003 fbe6 	bl	800517c <HAL_GPIO_Init>
    
    // Re-enable SPI2
    __HAL_SPI_ENABLE(&hspi2);
 80019b0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]
    
    // Test with PB14
    rx_data = 0x00;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 80019c6:	2200      	movs	r2, #0
 80019c8:	2110      	movs	r1, #16
 80019ca:	4827      	ldr	r0, [pc, #156]	@ (8001a68 <Test_Alternative_SPI2_Pins+0x24c>)
 80019cc:	f003 fea8 	bl	8005720 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, &tx_data, &rx_data, 1, 1000);
 80019d0:	f107 0261 	add.w	r2, r7, #97	@ 0x61
 80019d4:	f107 0162 	add.w	r1, r7, #98	@ 0x62
 80019d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	4822      	ldr	r0, [pc, #136]	@ (8001a6c <Test_Alternative_SPI2_Pins+0x250>)
 80019e2:	f006 fe6b 	bl	80086bc <HAL_SPI_TransmitReceive>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 80019ec:	2201      	movs	r2, #1
 80019ee:	2110      	movs	r1, #16
 80019f0:	481d      	ldr	r0, [pc, #116]	@ (8001a68 <Test_Alternative_SPI2_Pins+0x24c>)
 80019f2:	f003 fe95 	bl	8005720 <HAL_GPIO_WritePin>
    
    printf("    PB14 test: TX=0x%02X -> RX=0x%02X, HAL=%d\n\r", tx_data, rx_data, status);
 80019f6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80019fa:	4619      	mov	r1, r3
 80019fc:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001a00:	461a      	mov	r2, r3
 8001a02:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001a06:	4823      	ldr	r0, [pc, #140]	@ (8001a94 <Test_Alternative_SPI2_Pins+0x278>)
 8001a08:	f008 fdc8 	bl	800a59c <iprintf>
    
    if (rx_data != 0x00) {
 8001a0c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <Test_Alternative_SPI2_Pins+0x200>
        printf("    ✅ PB14 is working as MISO!\n\r");
 8001a14:	4820      	ldr	r0, [pc, #128]	@ (8001a98 <Test_Alternative_SPI2_Pins+0x27c>)
 8001a16:	f008 fdc1 	bl	800a59c <iprintf>
        return; // Keep PB14 configuration
 8001a1a:	e0f8      	b.n	8001c0e <Test_Alternative_SPI2_Pins+0x3f2>
    }
    
    // Test 4: Check if any pin can be used as MISO via scanning
    printf("\n4. SCANNING POTENTIAL MISO PINS...\n\r");
 8001a1c:	481f      	ldr	r0, [pc, #124]	@ (8001a9c <Test_Alternative_SPI2_Pins+0x280>)
 8001a1e:	f008 fdbd 	bl	800a59c <iprintf>
    printf("   Testing pins that could potentially be connected to CC1201 MISO:\n\r");
 8001a22:	481f      	ldr	r0, [pc, #124]	@ (8001aa0 <Test_Alternative_SPI2_Pins+0x284>)
 8001a24:	f008 fdba 	bl	800a59c <iprintf>
    
    // Test some common pins that might be wired to CC1201
    uint16_t test_pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9};
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <Test_Alternative_SPI2_Pins+0x288>)
 8001a2a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a30:	c407      	stmia	r4!, {r0, r1, r2}
 8001a32:	8023      	strh	r3, [r4, #0]
    GPIO_TypeDef* test_ports[] = {GPIOA, GPIOA, GPIOA, GPIOA, GPIOA, GPIOA, GPIOA};
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <Test_Alternative_SPI2_Pins+0x28c>)
 8001a36:	f107 0420 	add.w	r4, r7, #32
 8001a3a:	461d      	mov	r5, r3
 8001a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    const char* pin_names[] = {"PA0", "PA1", "PA4", "PA5", "PA7", "PA8", "PA9"};
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <Test_Alternative_SPI2_Pins+0x290>)
 8001a4a:	1d3c      	adds	r4, r7, #4
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    
    for (int i = 0; i < 7; i++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a5e:	e09e      	b.n	8001b9e <Test_Alternative_SPI2_Pins+0x382>
 8001a60:	0800c48c 	.word	0x0800c48c
 8001a64:	0800c4c0 	.word	0x0800c4c0
 8001a68:	58021000 	.word	0x58021000
 8001a6c:	240000b8 	.word	0x240000b8
 8001a70:	0800c4f4 	.word	0x0800c4f4
 8001a74:	0800c528 	.word	0x0800c528
 8001a78:	58020000 	.word	0x58020000
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	58020800 	.word	0x58020800
 8001a84:	0800c54c 	.word	0x0800c54c
 8001a88:	0800c57c 	.word	0x0800c57c
 8001a8c:	0800c5a0 	.word	0x0800c5a0
 8001a90:	58020400 	.word	0x58020400
 8001a94:	0800c5c4 	.word	0x0800c5c4
 8001a98:	0800c5f4 	.word	0x0800c5f4
 8001a9c:	0800c618 	.word	0x0800c618
 8001aa0:	0800c640 	.word	0x0800c640
 8001aa4:	0800c838 	.word	0x0800c838
 8001aa8:	0800c848 	.word	0x0800c848
 8001aac:	0800c880 	.word	0x0800c880
        // Disable SPI2
        __HAL_SPI_DISABLE(&hspi2);
 8001ab0:	4b58      	ldr	r3, [pc, #352]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b57      	ldr	r3, [pc, #348]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
        
        // Disconnect previous pin
        GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ac0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	653b      	str	r3, [r7, #80]	@ 0x50
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4851      	ldr	r0, [pc, #324]	@ (8001c18 <Test_Alternative_SPI2_Pins+0x3fc>)
 8001ad2:	f003 fb53 	bl	800517c <HAL_GPIO_Init>
        
        // Try current pin as MISO
        GPIO_InitStruct.Pin = test_pins[i];
 8001ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	3368      	adds	r3, #104	@ 0x68
 8001adc:	443b      	add	r3, r7
 8001ade:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	653b      	str	r3, [r7, #80]	@ 0x50
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	657b      	str	r3, [r7, #84]	@ 0x54
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aec:	2302      	movs	r3, #2
 8001aee:	65bb      	str	r3, [r7, #88]	@ 0x58
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af0:	2305      	movs	r3, #5
 8001af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        HAL_GPIO_Init(test_ports[i], &GPIO_InitStruct);
 8001af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	3368      	adds	r3, #104	@ 0x68
 8001afa:	443b      	add	r3, r7
 8001afc:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001b00:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fb38 	bl	800517c <HAL_GPIO_Init>
        
        // Re-enable SPI2
        __HAL_SPI_ENABLE(&hspi2);
 8001b0c:	4b41      	ldr	r3, [pc, #260]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b40      	ldr	r3, [pc, #256]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
        
        // Test
        rx_data = 0x00;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2110      	movs	r1, #16
 8001b26:	483d      	ldr	r0, [pc, #244]	@ (8001c1c <Test_Alternative_SPI2_Pins+0x400>)
 8001b28:	f003 fdfa 	bl	8005720 <HAL_GPIO_WritePin>
        status = HAL_SPI_TransmitReceive(&hspi2, &tx_data, &rx_data, 1, 1000);
 8001b2c:	f107 0261 	add.w	r2, r7, #97	@ 0x61
 8001b30:	f107 0162 	add.w	r1, r7, #98	@ 0x62
 8001b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4835      	ldr	r0, [pc, #212]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001b3e:	f006 fdbd 	bl	80086bc <HAL_SPI_TransmitReceive>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	4833      	ldr	r0, [pc, #204]	@ (8001c1c <Test_Alternative_SPI2_Pins+0x400>)
 8001b4e:	f003 fde7 	bl	8005720 <HAL_GPIO_WritePin>
        
        printf("   %s: TX=0x%02X -> RX=0x%02X", pin_names[i], tx_data, rx_data);
 8001b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	3368      	adds	r3, #104	@ 0x68
 8001b58:	443b      	add	r3, r7
 8001b5a:	f853 1c64 	ldr.w	r1, [r3, #-100]
 8001b5e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001b62:	461a      	mov	r2, r3
 8001b64:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001b68:	482d      	ldr	r0, [pc, #180]	@ (8001c20 <Test_Alternative_SPI2_Pins+0x404>)
 8001b6a:	f008 fd17 	bl	800a59c <iprintf>
        if (rx_data != 0x00) {
 8001b6e:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <Test_Alternative_SPI2_Pins+0x376>
            printf(" ✅ WORKING!\n\r");
 8001b76:	482b      	ldr	r0, [pc, #172]	@ (8001c24 <Test_Alternative_SPI2_Pins+0x408>)
 8001b78:	f008 fd10 	bl	800a59c <iprintf>
            printf("   🎯 FOUND: %s can receive SPI data!\n\r", pin_names[i]);
 8001b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	3368      	adds	r3, #104	@ 0x68
 8001b82:	443b      	add	r3, r7
 8001b84:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4827      	ldr	r0, [pc, #156]	@ (8001c28 <Test_Alternative_SPI2_Pins+0x40c>)
 8001b8c:	f008 fd06 	bl	800a59c <iprintf>
            return;
 8001b90:	e03d      	b.n	8001c0e <Test_Alternative_SPI2_Pins+0x3f2>
        } else {
            printf("\n\r");
 8001b92:	4826      	ldr	r0, [pc, #152]	@ (8001c2c <Test_Alternative_SPI2_Pins+0x410>)
 8001b94:	f008 fd02 	bl	800a59c <iprintf>
    for (int i = 0; i < 7; i++) {
 8001b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ba0:	2b06      	cmp	r3, #6
 8001ba2:	dd85      	ble.n	8001ab0 <Test_Alternative_SPI2_Pins+0x294>
        }
    }
    
    // If we get here, restore original PA6 configuration
    printf("\n5. RESTORING ORIGINAL PA6 CONFIGURATION...\n\r");
 8001ba4:	4822      	ldr	r0, [pc, #136]	@ (8001c30 <Test_Alternative_SPI2_Pins+0x414>)
 8001ba6:	f008 fcf9 	bl	800a59c <iprintf>
    __HAL_SPI_DISABLE(&hspi2);
 8001baa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
    
    // Restore PA6 as MISO
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bba:	2340      	movs	r3, #64	@ 0x40
 8001bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4817      	ldr	r0, [pc, #92]	@ (8001c34 <Test_Alternative_SPI2_Pins+0x418>)
 8001bd6:	f003 fad1 	bl	800517c <HAL_GPIO_Init>
    
    __HAL_SPI_ENABLE(&hspi2);
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <Test_Alternative_SPI2_Pins+0x3f8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    
    printf("=== ALTERNATIVE PIN TEST COMPLETE ===\n\r");
 8001bea:	4813      	ldr	r0, [pc, #76]	@ (8001c38 <Test_Alternative_SPI2_Pins+0x41c>)
 8001bec:	f008 fcd6 	bl	800a59c <iprintf>
    printf("CONCLUSION: No working MISO pin found. Possible issues:\n\r");
 8001bf0:	4812      	ldr	r0, [pc, #72]	@ (8001c3c <Test_Alternative_SPI2_Pins+0x420>)
 8001bf2:	f008 fcd3 	bl	800a59c <iprintf>
    printf("  • CC1201 not physically connected to any STM32 pin\n\r");
 8001bf6:	4812      	ldr	r0, [pc, #72]	@ (8001c40 <Test_Alternative_SPI2_Pins+0x424>)
 8001bf8:	f008 fcd0 	bl	800a59c <iprintf>
    printf("  • CC1201 MISO/SO pin not connected\n\r");
 8001bfc:	4811      	ldr	r0, [pc, #68]	@ (8001c44 <Test_Alternative_SPI2_Pins+0x428>)
 8001bfe:	f008 fccd 	bl	800a59c <iprintf>
    printf("  • CC1201 power supply issue\n\r");
 8001c02:	4811      	ldr	r0, [pc, #68]	@ (8001c48 <Test_Alternative_SPI2_Pins+0x42c>)
 8001c04:	f008 fcca 	bl	800a59c <iprintf>
    printf("  • Hardware fault in CC1201 or STM32 board\n\r");
 8001c08:	4810      	ldr	r0, [pc, #64]	@ (8001c4c <Test_Alternative_SPI2_Pins+0x430>)
 8001c0a:	f008 fcc7 	bl	800a59c <iprintf>
}
 8001c0e:	3768      	adds	r7, #104	@ 0x68
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	240000b8 	.word	0x240000b8
 8001c18:	58020400 	.word	0x58020400
 8001c1c:	58021000 	.word	0x58021000
 8001c20:	0800c688 	.word	0x0800c688
 8001c24:	0800c6a8 	.word	0x0800c6a8
 8001c28:	0800c6b8 	.word	0x0800c6b8
 8001c2c:	0800c6e4 	.word	0x0800c6e4
 8001c30:	0800c6e8 	.word	0x0800c6e8
 8001c34:	58020000 	.word	0x58020000
 8001c38:	0800c718 	.word	0x0800c718
 8001c3c:	0800c740 	.word	0x0800c740
 8001c40:	0800c77c 	.word	0x0800c77c
 8001c44:	0800c7b8 	.word	0x0800c7b8
 8001c48:	0800c7e4 	.word	0x0800c7e4
 8001c4c:	0800c808 	.word	0x0800c808

08001c50 <Hardware_Discovery_Scan>:

/**
 * @brief Scan all GPIO pins to find which ones are actually connected
 * This will help us identify the real CC1201 pin connections
 */
void Hardware_Discovery_Scan(void) {
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c56:	af02      	add	r7, sp, #8
    printf("\n🔍 HARDWARE DISCOVERY - FINDING ACTUAL CC1201 CONNECTIONS 🔍\n\r");
 8001c58:	4871      	ldr	r0, [pc, #452]	@ (8001e20 <Hardware_Discovery_Scan+0x1d0>)
 8001c5a:	f008 fc9f 	bl	800a59c <iprintf>
    printf("=================================================================\n\r");
 8001c5e:	4871      	ldr	r0, [pc, #452]	@ (8001e24 <Hardware_Discovery_Scan+0x1d4>)
 8001c60:	f008 fc9c 	bl	800a59c <iprintf>
    
    // Enable all GPIO clocks first
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b70      	ldr	r3, [pc, #448]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6a:	4a6f      	ldr	r2, [pc, #444]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c74:	4b6c      	ldr	r3, [pc, #432]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001c82:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001c8c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c90:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b65      	ldr	r3, [pc, #404]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c98:	4a63      	ldr	r2, [pc, #396]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca2:	4b61      	ldr	r3, [pc, #388]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	f003 0202 	and.w	r2, r3, #2
 8001cac:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001cb0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001cba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001cbe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc0:	4b59      	ldr	r3, [pc, #356]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc6:	4a58      	ldr	r2, [pc, #352]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd0:	4b55      	ldr	r3, [pc, #340]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd6:	f003 0204 	and.w	r2, r3, #4
 8001cda:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001cde:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001ce8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001cec:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	4b4e      	ldr	r3, [pc, #312]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d04:	f003 0208 	and.w	r2, r3, #8
 8001d08:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001d0c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001d16:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001d1a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1c:	4b42      	ldr	r3, [pc, #264]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d22:	4a41      	ldr	r2, [pc, #260]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d32:	f003 0210 	and.w	r2, r3, #16
 8001d36:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001d3a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001d44:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001d48:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4a:	4b37      	ldr	r3, [pc, #220]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d50:	4a35      	ldr	r2, [pc, #212]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5a:	4b33      	ldr	r3, [pc, #204]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d60:	f003 0220 	and.w	r2, r3, #32
 8001d64:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001d68:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001d72:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d76:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001d92:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001d96:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001da0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001da4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <Hardware_Discovery_Scan+0x1d8>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8001dc0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001dc4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001dce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001dd2:	681b      	ldr	r3, [r3, #0]
    
    printf("\n1. SCANNING ALL GPIO PINS FOR ACTIVITY...\n\r");
 8001dd4:	4815      	ldr	r0, [pc, #84]	@ (8001e2c <Hardware_Discovery_Scan+0x1dc>)
 8001dd6:	f008 fbe1 	bl	800a59c <iprintf>
    printf("   (Looking for pins that respond differently when toggled)\n\r");
 8001dda:	4815      	ldr	r0, [pc, #84]	@ (8001e30 <Hardware_Discovery_Scan+0x1e0>)
 8001ddc:	f008 fbde 	bl	800a59c <iprintf>
    
    // Arrays to store pin information
    GPIO_TypeDef* ports[] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <Hardware_Discovery_Scan+0x1e4>)
 8001de2:	f507 74d8 	add.w	r4, r7, #432	@ 0x1b0
 8001de6:	461d      	mov	r5, r3
 8001de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const char* port_names[] = {"PA", "PB", "PC", "PD", "PE", "PF", "PG", "PH"};
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <Hardware_Discovery_Scan+0x1e8>)
 8001df6:	f507 74c8 	add.w	r4, r7, #400	@ 0x190
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t active_count = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
    
    for (int port = 0; port < 8; port++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8001e14:	e0cd      	b.n	8001fb2 <Hardware_Discovery_Scan+0x362>
        for (int pin = 0; pin < 16; pin++) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001e1c:	e0bf      	b.n	8001f9e <Hardware_Discovery_Scan+0x34e>
 8001e1e:	bf00      	nop
 8001e20:	0800c89c 	.word	0x0800c89c
 8001e24:	0800c8e0 	.word	0x0800c8e0
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	0800c924 	.word	0x0800c924
 8001e30:	0800c954 	.word	0x0800c954
 8001e34:	0800cc9c 	.word	0x0800cc9c
 8001e38:	0800ccdc 	.word	0x0800ccdc
            uint16_t gpio_pin = (1 << pin);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	f8a7 31d4 	strh.w	r3, [r7, #468]	@ 0x1d4
            
            // Configure pin as output first
            GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001e4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e52:	461a      	mov	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	6053      	str	r3, [r2, #4]
 8001e5a:	6093      	str	r3, [r2, #8]
 8001e5c:	60d3      	str	r3, [r2, #12]
 8001e5e:	6113      	str	r3, [r2, #16]
            GPIO_InitStruct.Pin = gpio_pin;
 8001e60:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	@ 0x1d4
 8001e64:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001e68:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e6c:	601a      	str	r2, [r3, #0]
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001e72:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e76:	2201      	movs	r2, #1
 8001e78:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001e7e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001e8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
            HAL_GPIO_Init(ports[port], &GPIO_InitStruct);
 8001e92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001e9c:	443b      	add	r3, r7
 8001e9e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001ea2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 f967 	bl	800517c <HAL_GPIO_Init>
            
            // Test if pin can be controlled
            HAL_GPIO_WritePin(ports[port], gpio_pin, GPIO_PIN_SET);
 8001eae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001eb8:	443b      	add	r3, r7
 8001eba:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001ebe:	f8b7 11d4 	ldrh.w	r1, [r7, #468]	@ 0x1d4
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fc2b 	bl	8005720 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f002 fcc2 	bl	8004854 <HAL_Delay>
            GPIO_PinState state_high = HAL_GPIO_ReadPin(ports[port], gpio_pin);
 8001ed0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001eda:	443b      	add	r3, r7
 8001edc:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001ee0:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	@ 0x1d4
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 fc02 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3
            
            HAL_GPIO_WritePin(ports[port], gpio_pin, GPIO_PIN_RESET);
 8001ef2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001efc:	443b      	add	r3, r7
 8001efe:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001f02:	f8b7 11d4 	ldrh.w	r1, [r7, #468]	@ 0x1d4
 8001f06:	2200      	movs	r2, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fc09 	bl	8005720 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f002 fca0 	bl	8004854 <HAL_Delay>
            GPIO_PinState state_low = HAL_GPIO_ReadPin(ports[port], gpio_pin);
 8001f14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001f1e:	443b      	add	r3, r7
 8001f20:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001f24:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	@ 0x1d4
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fbe0 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f887 31d2 	strb.w	r3, [r7, #466]	@ 0x1d2
            
            // If pin responds to control, it might be connected
            if (state_high == GPIO_PIN_SET && state_low == GPIO_PIN_RESET) {
 8001f36:	f897 31d3 	ldrb.w	r3, [r7, #467]	@ 0x1d3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d116      	bne.n	8001f6c <Hardware_Discovery_Scan+0x31c>
 8001f3e:	f897 31d2 	ldrb.w	r3, [r7, #466]	@ 0x1d2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d112      	bne.n	8001f6c <Hardware_Discovery_Scan+0x31c>
                printf("   %s%d: Controllable ✓\n\r", port_names[port], pin);
 8001f46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001f50:	443b      	add	r3, r7
 8001f52:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001f56:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	48c1      	ldr	r0, [pc, #772]	@ (8002264 <Hardware_Discovery_Scan+0x614>)
 8001f5e:	f008 fb1d 	bl	800a59c <iprintf>
                active_count++;
 8001f62:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8001f66:	3301      	adds	r3, #1
 8001f68:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
            }
            
            // Return pin to analog mode to avoid interference
            GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001f70:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f74:	2203      	movs	r2, #3
 8001f76:	605a      	str	r2, [r3, #4]
            HAL_GPIO_Init(ports[port], &GPIO_InitStruct);
 8001f78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001f82:	443b      	add	r3, r7
 8001f84:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001f88:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f8f4 	bl	800517c <HAL_GPIO_Init>
        for (int pin = 0; pin < 16; pin++) {
 8001f94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001f9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	f77f af4a 	ble.w	8001e3c <Hardware_Discovery_Scan+0x1ec>
    for (int port = 0; port < 8; port++) {
 8001fa8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001fac:	3301      	adds	r3, #1
 8001fae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8001fb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001fb6:	2b07      	cmp	r3, #7
 8001fb8:	f77f af2d 	ble.w	8001e16 <Hardware_Discovery_Scan+0x1c6>
        }
    }
    
    printf("   Found %d controllable pins\n\r", active_count);
 8001fbc:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	48a9      	ldr	r0, [pc, #676]	@ (8002268 <Hardware_Discovery_Scan+0x618>)
 8001fc4:	f008 faea 	bl	800a59c <iprintf>
    
    printf("\n2. TESTING SPI COMMUNICATION ON DIFFERENT PIN COMBINATIONS...\n\r");
 8001fc8:	48a8      	ldr	r0, [pc, #672]	@ (800226c <Hardware_Discovery_Scan+0x61c>)
 8001fca:	f008 fae7 	bl	800a59c <iprintf>
        GPIO_TypeDef* sck_port;
        uint16_t sck_pin;
        const char* description;
    } spi_pin_combo_t;
    
    spi_pin_combo_t combos[] = {
 8001fce:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001fd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fd6:	4aa6      	ldr	r2, [pc, #664]	@ (8002270 <Hardware_Discovery_Scan+0x620>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4611      	mov	r1, r2
 8001fdc:	23c4      	movs	r3, #196	@ 0xc4
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f008 fc9f 	bl	800a922 <memcpy>
        {GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_10, GPIOB, GPIO_PIN_13, "Alt4: PA6/PA10/PB13"},
        {GPIOC, GPIO_PIN_2, GPIOC, GPIO_PIN_1, GPIOB, GPIO_PIN_10, "Alt5: PC2/PC1/PB10"},
        {GPIOB, GPIO_PIN_14, GPIOC, GPIO_PIN_3, GPIOB, GPIO_PIN_10, "Alt6: PB14/PC3/PB10"},
    };
    
    for (int combo = 0; combo < 7; combo++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001fea:	e1d1      	b.n	8002390 <Hardware_Discovery_Scan+0x740>
        printf("   Testing %s...\n\r", combos[combo].description);
 8001fec:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001ff0:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8001ff4:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3318      	adds	r3, #24
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	489a      	ldr	r0, [pc, #616]	@ (8002274 <Hardware_Discovery_Scan+0x624>)
 800200a:	f008 fac7 	bl	800a59c <iprintf>
        
        // Disable SPI2 first
        __HAL_SPI_DISABLE(&hspi2);
 800200e:	4b9a      	ldr	r3, [pc, #616]	@ (8002278 <Hardware_Discovery_Scan+0x628>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b98      	ldr	r3, [pc, #608]	@ (8002278 <Hardware_Discovery_Scan+0x628>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
        
        // Configure pins for this combination
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002022:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002026:	461a      	mov	r2, r3
 8002028:	2300      	movs	r3, #0
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	6053      	str	r3, [r2, #4]
 800202e:	6093      	str	r3, [r2, #8]
 8002030:	60d3      	str	r3, [r2, #12]
 8002032:	6113      	str	r3, [r2, #16]
        
        // MISO
        GPIO_InitStruct.Pin = combos[combo].miso_pin;
 8002034:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002038:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800203c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3304      	adds	r3, #4
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002054:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002058:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800205e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002062:	2202      	movs	r2, #2
 8002064:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800206a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002072:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002076:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800207a:	2202      	movs	r2, #2
 800207c:	60da      	str	r2, [r3, #12]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800207e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002082:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002086:	2205      	movs	r2, #5
 8002088:	611a      	str	r2, [r3, #16]
        HAL_GPIO_Init(combos[combo].miso_port, &GPIO_InitStruct);
 800208a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800208e:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002092:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f107 0220 	add.w	r2, r7, #32
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 f867 	bl	800517c <HAL_GPIO_Init>
        
        // MOSI
        GPIO_InitStruct.Pin = combos[combo].mosi_pin;
 80020ae:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80020b2:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80020b6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	330c      	adds	r3, #12
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80020ce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020d2:	601a      	str	r2, [r3, #0]
        HAL_GPIO_Init(combos[combo].mosi_port, &GPIO_InitStruct);
 80020d4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80020d8:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80020dc:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3308      	adds	r3, #8
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f107 0220 	add.w	r2, r7, #32
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 f841 	bl	800517c <HAL_GPIO_Init>
        
        // SCK
        GPIO_InitStruct.Pin = combos[combo].sck_pin;
 80020fa:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80020fe:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002102:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3314      	adds	r3, #20
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800211a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800211e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_Init(combos[combo].sck_port, &GPIO_InitStruct);
 8002120:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002124:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002128:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3310      	adds	r3, #16
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f107 0220 	add.w	r2, r7, #32
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f003 f81b 	bl	800517c <HAL_GPIO_Init>
        
        // Re-enable SPI2
        __HAL_SPI_ENABLE(&hspi2);
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <Hardware_Discovery_Scan+0x628>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b4a      	ldr	r3, [pc, #296]	@ (8002278 <Hardware_Discovery_Scan+0x628>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
        
        // Test this configuration
        uint8_t test_patterns[] = {0xAA, 0x55, 0xFF, 0x30}; // Include CC1201 RESET command
 8002156:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800215a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800215e:	4a47      	ldr	r2, [pc, #284]	@ (800227c <Hardware_Discovery_Scan+0x62c>)
 8002160:	601a      	str	r2, [r3, #0]
        uint8_t combo_working = 0; // Use 0/1 instead of bool
 8002162:	2300      	movs	r3, #0
 8002164:	f887 31e7 	strb.w	r3, [r7, #487]	@ 0x1e7
        
        for (int p = 0; p < 4; p++) {
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800216e:	e05b      	b.n	8002228 <Hardware_Discovery_Scan+0x5d8>
            uint8_t tx_data = test_patterns[p];
 8002170:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002174:	f5a3 72ee 	sub.w	r2, r3, #476	@ 0x1dc
 8002178:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800217c:	4413      	add	r3, r2
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002184:	f2a3 13dd 	subw	r3, r3, #477	@ 0x1dd
 8002188:	701a      	strb	r2, [r3, #0]
            uint8_t rx_data = 0x00;
 800218a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800218e:	f5a3 73ef 	sub.w	r3, r3, #478	@ 0x1de
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
            
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 8002196:	2200      	movs	r2, #0
 8002198:	2110      	movs	r1, #16
 800219a:	4839      	ldr	r0, [pc, #228]	@ (8002280 <Hardware_Discovery_Scan+0x630>)
 800219c:	f003 fac0 	bl	8005720 <HAL_GPIO_WritePin>
            HAL_SPI_TransmitReceive(&hspi2, &tx_data, &rx_data, 1, 1000);
 80021a0:	f107 021a 	add.w	r2, r7, #26
 80021a4:	f107 011b 	add.w	r1, r7, #27
 80021a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	4831      	ldr	r0, [pc, #196]	@ (8002278 <Hardware_Discovery_Scan+0x628>)
 80021b2:	f006 fa83 	bl	80086bc <HAL_SPI_TransmitReceive>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 80021b6:	2201      	movs	r2, #1
 80021b8:	2110      	movs	r1, #16
 80021ba:	4831      	ldr	r0, [pc, #196]	@ (8002280 <Hardware_Discovery_Scan+0x630>)
 80021bc:	f003 fab0 	bl	8005720 <HAL_GPIO_WritePin>
            
            printf("     Pattern 0x%02X: TX=0x%02X -> RX=0x%02X", test_patterns[p], tx_data, rx_data);
 80021c0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80021c4:	f5a3 72ee 	sub.w	r2, r3, #476	@ 0x1dc
 80021c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80021d6:	f2a3 13dd 	subw	r3, r3, #477	@ 0x1dd
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80021e2:	f5a3 73ef 	sub.w	r3, r3, #478	@ 0x1de
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4826      	ldr	r0, [pc, #152]	@ (8002284 <Hardware_Discovery_Scan+0x634>)
 80021ea:	f008 f9d7 	bl	800a59c <iprintf>
            
            if (rx_data != 0x00 && rx_data != 0xFF) {
 80021ee:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80021f2:	f5a3 73ef 	sub.w	r3, r3, #478	@ 0x1de
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <Hardware_Discovery_Scan+0x5c8>
 80021fc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002200:	f5a3 73ef 	sub.w	r3, r3, #478	@ 0x1de
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2bff      	cmp	r3, #255	@ 0xff
 8002208:	d006      	beq.n	8002218 <Hardware_Discovery_Scan+0x5c8>
                printf(" ✅ RESPONSE!\n\r");
 800220a:	481f      	ldr	r0, [pc, #124]	@ (8002288 <Hardware_Discovery_Scan+0x638>)
 800220c:	f008 f9c6 	bl	800a59c <iprintf>
                combo_working = 1;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 31e7 	strb.w	r3, [r7, #487]	@ 0x1e7
 8002216:	e002      	b.n	800221e <Hardware_Discovery_Scan+0x5ce>
            } else {
                printf("\n\r");
 8002218:	481c      	ldr	r0, [pc, #112]	@ (800228c <Hardware_Discovery_Scan+0x63c>)
 800221a:	f008 f9bf 	bl	800a59c <iprintf>
        for (int p = 0; p < 4; p++) {
 800221e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002228:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800222c:	2b03      	cmp	r3, #3
 800222e:	dd9f      	ble.n	8002170 <Hardware_Discovery_Scan+0x520>
            }
        }
        
        if (combo_working) {
 8002230:	f897 31e7 	ldrb.w	r3, [r7, #487]	@ 0x1e7
 8002234:	2b00      	cmp	r3, #0
 8002236:	d02f      	beq.n	8002298 <Hardware_Discovery_Scan+0x648>
            printf("   🎯 FOUND WORKING COMBINATION: %s\n\r", combos[combo].description);
 8002238:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800223c:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002240:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3318      	adds	r3, #24
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	480e      	ldr	r0, [pc, #56]	@ (8002290 <Hardware_Discovery_Scan+0x640>)
 8002256:	f008 f9a1 	bl	800a59c <iprintf>
            printf("   This appears to be the correct SPI pin mapping!\n\r");
 800225a:	480e      	ldr	r0, [pc, #56]	@ (8002294 <Hardware_Discovery_Scan+0x644>)
 800225c:	f008 f99e 	bl	800a59c <iprintf>
 8002260:	e1bb      	b.n	80025da <Hardware_Discovery_Scan+0x98a>
 8002262:	bf00      	nop
 8002264:	0800c994 	.word	0x0800c994
 8002268:	0800c9b0 	.word	0x0800c9b0
 800226c:	0800c9d0 	.word	0x0800c9d0
 8002270:	0800cd90 	.word	0x0800cd90
 8002274:	0800ca14 	.word	0x0800ca14
 8002278:	240000b8 	.word	0x240000b8
 800227c:	30ff55aa 	.word	0x30ff55aa
 8002280:	58021000 	.word	0x58021000
 8002284:	0800ca28 	.word	0x0800ca28
 8002288:	0800ca54 	.word	0x0800ca54
 800228c:	0800ca68 	.word	0x0800ca68
 8002290:	0800ca6c 	.word	0x0800ca6c
 8002294:	0800ca94 	.word	0x0800ca94
            return; // Keep this configuration
        }
        
        // Reset pins to analog if this combo didn't work
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002298:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800229c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022a0:	2203      	movs	r2, #3
 80022a2:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pin = combos[combo].miso_pin;
 80022a4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80022a8:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80022ac:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3304      	adds	r3, #4
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80022c4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022c8:	601a      	str	r2, [r3, #0]
        HAL_GPIO_Init(combos[combo].miso_port, &GPIO_InitStruct);
 80022ca:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80022ce:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80022d2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f107 0220 	add.w	r2, r7, #32
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 ff47 	bl	800517c <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = combos[combo].mosi_pin;
 80022ee:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80022f2:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80022f6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	330c      	adds	r3, #12
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800230e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002312:	601a      	str	r2, [r3, #0]
        HAL_GPIO_Init(combos[combo].mosi_port, &GPIO_InitStruct);
 8002314:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002318:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800231c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3308      	adds	r3, #8
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f107 0220 	add.w	r2, r7, #32
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f002 ff21 	bl	800517c <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = combos[combo].sck_pin;
 800233a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800233e:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002342:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3314      	adds	r3, #20
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800235a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800235e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_Init(combos[combo].sck_port, &GPIO_InitStruct);
 8002360:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002364:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002368:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3310      	adds	r3, #16
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f107 0220 	add.w	r2, r7, #32
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f002 fefb 	bl	800517c <HAL_GPIO_Init>
    for (int combo = 0; combo < 7; combo++) {
 8002386:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800238a:	3301      	adds	r3, #1
 800238c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002390:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002394:	2b06      	cmp	r3, #6
 8002396:	f77f ae29 	ble.w	8001fec <Hardware_Discovery_Scan+0x39c>
    }
    
    printf("\n3. DETAILED PIN ANALYSIS FOR POTENTIAL CC1201 CONNECTIONS...\n\r");
 800239a:	4892      	ldr	r0, [pc, #584]	@ (80025e4 <Hardware_Discovery_Scan+0x994>)
 800239c:	f008 f8fe 	bl	800a59c <iprintf>
    
    // Test common pins that might be connected to CC1201
    uint16_t test_pins[] = {
 80023a0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80023a4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80023a8:	4a8f      	ldr	r2, [pc, #572]	@ (80025e8 <Hardware_Discovery_Scan+0x998>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	4611      	mov	r1, r2
 80023ae:	234e      	movs	r3, #78	@ 0x4e
 80023b0:	461a      	mov	r2, r3
 80023b2:	f008 fab6 	bl	800a922 <memcpy>
        (3 << 8) | 0, (3 << 8) | 1, (3 << 8) | 2, (3 << 8) | 3,
        // Port E
        (4 << 8) | 0, (4 << 8) | 1, (4 << 8) | 2, (4 << 8) | 3, (4 << 8) | 4, (4 << 8) | 5
    };
    
    for (int i = 0; i < sizeof(test_pins)/sizeof(test_pins[0]); i++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80023bc:	e09a      	b.n	80024f4 <Hardware_Discovery_Scan+0x8a4>
        uint8_t port_idx = test_pins[i] >> 8;
 80023be:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80023c2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80023c6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80023ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f887 31db 	strb.w	r3, [r7, #475]	@ 0x1db
        uint8_t pin_idx = test_pins[i] & 0xFF;
 80023d6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80023da:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80023de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80023e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023e6:	f887 31da 	strb.w	r3, [r7, #474]	@ 0x1da
        uint16_t gpio_pin = (1 << pin_idx);
 80023ea:	f897 31da 	ldrb.w	r3, [r7, #474]	@ 0x1da
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	f8a7 31d8 	strh.w	r3, [r7, #472]	@ 0x1d8
        
        // Test as potential MISO (input from CC1201)
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80023fc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002400:	461a      	mov	r2, r3
 8002402:	2300      	movs	r3, #0
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	6053      	str	r3, [r2, #4]
 8002408:	6093      	str	r3, [r2, #8]
 800240a:	60d3      	str	r3, [r2, #12]
 800240c:	6113      	str	r3, [r2, #16]
        GPIO_InitStruct.Pin = gpio_pin;
 800240e:	f8b7 21d8 	ldrh.w	r2, [r7, #472]	@ 0x1d8
 8002412:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002416:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800241a:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002420:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002428:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800242c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002430:	2201      	movs	r2, #1
 8002432:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(ports[port_idx], &GPIO_InitStruct);
 8002434:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800243e:	443b      	add	r3, r7
 8002440:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002444:	1d3a      	adds	r2, r7, #4
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fe97 	bl	800517c <HAL_GPIO_Init>
        
        GPIO_PinState state_pullup = HAL_GPIO_ReadPin(ports[port_idx], gpio_pin);
 800244e:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002458:	443b      	add	r3, r7
 800245a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800245e:	f8b7 21d8 	ldrh.w	r2, [r7, #472]	@ 0x1d8
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f003 f943 	bl	80056f0 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
        
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002470:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002474:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002478:	2202      	movs	r2, #2
 800247a:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(ports[port_idx], &GPIO_InitStruct);
 800247c:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002486:	443b      	add	r3, r7
 8002488:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800248c:	1d3a      	adds	r2, r7, #4
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fe73 	bl	800517c <HAL_GPIO_Init>
        
        GPIO_PinState state_pulldown = HAL_GPIO_ReadPin(ports[port_idx], gpio_pin);
 8002496:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80024a0:	443b      	add	r3, r7
 80024a2:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80024a6:	f8b7 21d8 	ldrh.w	r2, [r7, #472]	@ 0x1d8
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 f91f 	bl	80056f0 <HAL_GPIO_ReadPin>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f887 31d6 	strb.w	r3, [r7, #470]	@ 0x1d6
        
        if (state_pullup != state_pulldown) {
 80024b8:	f897 21d7 	ldrb.w	r2, [r7, #471]	@ 0x1d7
 80024bc:	f897 31d6 	ldrb.w	r3, [r7, #470]	@ 0x1d6
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d012      	beq.n	80024ea <Hardware_Discovery_Scan+0x89a>
            printf("   %s%d: Pull-up=%d, Pull-down=%d - Potentially connected\n\r", 
 80024c4:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80024ce:	443b      	add	r3, r7
 80024d0:	f853 1c68 	ldr.w	r1, [r3, #-104]
 80024d4:	f897 21da 	ldrb.w	r2, [r7, #474]	@ 0x1da
 80024d8:	f897 01d7 	ldrb.w	r0, [r7, #471]	@ 0x1d7
 80024dc:	f897 31d6 	ldrb.w	r3, [r7, #470]	@ 0x1d6
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4603      	mov	r3, r0
 80024e4:	4841      	ldr	r0, [pc, #260]	@ (80025ec <Hardware_Discovery_Scan+0x99c>)
 80024e6:	f008 f859 	bl	800a59c <iprintf>
    for (int i = 0; i < sizeof(test_pins)/sizeof(test_pins[0]); i++) {
 80024ea:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80024ee:	3301      	adds	r3, #1
 80024f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80024f4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80024f8:	2b26      	cmp	r3, #38	@ 0x26
 80024fa:	f67f af60 	bls.w	80023be <Hardware_Discovery_Scan+0x76e>
                   port_names[port_idx], pin_idx, state_pullup, state_pulldown);
        }
    }
    
    printf("\n4. FINAL RECOMMENDATION...\n\r");
 80024fe:	483c      	ldr	r0, [pc, #240]	@ (80025f0 <Hardware_Discovery_Scan+0x9a0>)
 8002500:	f008 f84c 	bl	800a59c <iprintf>
    printf("   Based on the scan results above:\n\r");
 8002504:	483b      	ldr	r0, [pc, #236]	@ (80025f4 <Hardware_Discovery_Scan+0x9a4>)
 8002506:	f008 f849 	bl	800a59c <iprintf>
    printf("   - Look for pins that showed 'RESPONSE!' in SPI tests\n\r");
 800250a:	483b      	ldr	r0, [pc, #236]	@ (80025f8 <Hardware_Discovery_Scan+0x9a8>)
 800250c:	f008 f846 	bl	800a59c <iprintf>
    printf("   - Check pins that behave differently with pull-up/pull-down\n\r");
 8002510:	483a      	ldr	r0, [pc, #232]	@ (80025fc <Hardware_Discovery_Scan+0x9ac>)
 8002512:	f008 f843 	bl	800a59c <iprintf>
    printf("   - These are likely your actual CC1201 connections\n\r");
 8002516:	483a      	ldr	r0, [pc, #232]	@ (8002600 <Hardware_Discovery_Scan+0x9b0>)
 8002518:	f008 f840 	bl	800a59c <iprintf>
    
    // Restore original SPI configuration
    printf("\n5. RESTORING ORIGINAL CONFIGURATION...\n\r");
 800251c:	4839      	ldr	r0, [pc, #228]	@ (8002604 <Hardware_Discovery_Scan+0x9b4>)
 800251e:	f008 f83d 	bl	800a59c <iprintf>
    __HAL_SPI_DISABLE(&hspi2);
 8002522:	4b39      	ldr	r3, [pc, #228]	@ (8002608 <Hardware_Discovery_Scan+0x9b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <Hardware_Discovery_Scan+0x9b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002536:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800253a:	461a      	mov	r2, r3
 800253c:	2300      	movs	r3, #0
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	6053      	str	r3, [r2, #4]
 8002542:	6093      	str	r3, [r2, #8]
 8002544:	60d3      	str	r3, [r2, #12]
 8002546:	6113      	str	r3, [r2, #16]
    // Restore PA6 (MISO)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002548:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800254c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002550:	2240      	movs	r2, #64	@ 0x40
 8002552:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002558:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800255c:	2202      	movs	r2, #2
 800255e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002564:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800256c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002570:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002574:	2202      	movs	r2, #2
 8002576:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002578:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800257c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002580:	2205      	movs	r2, #5
 8002582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002588:	4619      	mov	r1, r3
 800258a:	4820      	ldr	r0, [pc, #128]	@ (800260c <Hardware_Discovery_Scan+0x9bc>)
 800258c:	f002 fdf6 	bl	800517c <HAL_GPIO_Init>
    
    // Restore PA10 (MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002590:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002594:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002598:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800259c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80025a2:	4619      	mov	r1, r3
 80025a4:	4819      	ldr	r0, [pc, #100]	@ (800260c <Hardware_Discovery_Scan+0x9bc>)
 80025a6:	f002 fde9 	bl	800517c <HAL_GPIO_Init>
    
    // Restore PB10 (SCK)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025aa:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80025ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025b6:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80025bc:	4619      	mov	r1, r3
 80025be:	4814      	ldr	r0, [pc, #80]	@ (8002610 <Hardware_Discovery_Scan+0x9c0>)
 80025c0:	f002 fddc 	bl	800517c <HAL_GPIO_Init>
    
    __HAL_SPI_ENABLE(&hspi2);
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <Hardware_Discovery_Scan+0x9b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <Hardware_Discovery_Scan+0x9b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
    
    printf("=== HARDWARE DISCOVERY COMPLETE ===\n\r");
 80025d4:	480f      	ldr	r0, [pc, #60]	@ (8002614 <Hardware_Discovery_Scan+0x9c4>)
 80025d6:	f007 ffe1 	bl	800a59c <iprintf>
}
 80025da:	f507 77fc 	add.w	r7, r7, #504	@ 0x1f8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0800cacc 	.word	0x0800cacc
 80025e8:	0800ce54 	.word	0x0800ce54
 80025ec:	0800cb0c 	.word	0x0800cb0c
 80025f0:	0800cb48 	.word	0x0800cb48
 80025f4:	0800cb68 	.word	0x0800cb68
 80025f8:	0800cb90 	.word	0x0800cb90
 80025fc:	0800cbcc 	.word	0x0800cbcc
 8002600:	0800cc10 	.word	0x0800cc10
 8002604:	0800cc48 	.word	0x0800cc48
 8002608:	240000b8 	.word	0x240000b8
 800260c:	58020000 	.word	0x58020000
 8002610:	58020400 	.word	0x58020400
 8002614:	0800cc74 	.word	0x0800cc74

08002618 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	4823      	ldr	r0, [pc, #140]	@ (80026c8 <print_cc1201_status+0xb0>)
 800263a:	f007 ffaf 	bl	800a59c <iprintf>
    switch(radio_state) {
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b07      	cmp	r3, #7
 8002642:	d833      	bhi.n	80026ac <print_cc1201_status+0x94>
 8002644:	a201      	add	r2, pc, #4	@ (adr r2, 800264c <print_cc1201_status+0x34>)
 8002646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264a:	bf00      	nop
 800264c:	0800266d 	.word	0x0800266d
 8002650:	08002675 	.word	0x08002675
 8002654:	0800267d 	.word	0x0800267d
 8002658:	08002685 	.word	0x08002685
 800265c:	0800268d 	.word	0x0800268d
 8002660:	08002695 	.word	0x08002695
 8002664:	0800269d 	.word	0x0800269d
 8002668:	080026a5 	.word	0x080026a5
        case 0x0: printf("(IDLE)"); break;
 800266c:	4817      	ldr	r0, [pc, #92]	@ (80026cc <print_cc1201_status+0xb4>)
 800266e:	f007 ff95 	bl	800a59c <iprintf>
 8002672:	e01f      	b.n	80026b4 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8002674:	4816      	ldr	r0, [pc, #88]	@ (80026d0 <print_cc1201_status+0xb8>)
 8002676:	f007 ff91 	bl	800a59c <iprintf>
 800267a:	e01b      	b.n	80026b4 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 800267c:	4815      	ldr	r0, [pc, #84]	@ (80026d4 <print_cc1201_status+0xbc>)
 800267e:	f007 ff8d 	bl	800a59c <iprintf>
 8002682:	e017      	b.n	80026b4 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8002684:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <print_cc1201_status+0xc0>)
 8002686:	f007 ff89 	bl	800a59c <iprintf>
 800268a:	e013      	b.n	80026b4 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 800268c:	4813      	ldr	r0, [pc, #76]	@ (80026dc <print_cc1201_status+0xc4>)
 800268e:	f007 ff85 	bl	800a59c <iprintf>
 8002692:	e00f      	b.n	80026b4 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8002694:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <print_cc1201_status+0xc8>)
 8002696:	f007 ff81 	bl	800a59c <iprintf>
 800269a:	e00b      	b.n	80026b4 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <print_cc1201_status+0xcc>)
 800269e:	f007 ff7d 	bl	800a59c <iprintf>
 80026a2:	e007      	b.n	80026b4 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 80026a4:	4810      	ldr	r0, [pc, #64]	@ (80026e8 <print_cc1201_status+0xd0>)
 80026a6:	f007 ff79 	bl	800a59c <iprintf>
 80026aa:	e003      	b.n	80026b4 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 80026ac:	480f      	ldr	r0, [pc, #60]	@ (80026ec <print_cc1201_status+0xd4>)
 80026ae:	f007 ff75 	bl	800a59c <iprintf>
 80026b2:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 80026b4:	7bbb      	ldrb	r3, [r7, #14]
 80026b6:	4619      	mov	r1, r3
 80026b8:	480d      	ldr	r0, [pc, #52]	@ (80026f0 <print_cc1201_status+0xd8>)
 80026ba:	f007 ff6f 	bl	800a59c <iprintf>
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	0800cea4 	.word	0x0800cea4
 80026cc:	0800cec4 	.word	0x0800cec4
 80026d0:	0800cecc 	.word	0x0800cecc
 80026d4:	0800ced4 	.word	0x0800ced4
 80026d8:	0800cedc 	.word	0x0800cedc
 80026dc:	0800cee8 	.word	0x0800cee8
 80026e0:	0800cef4 	.word	0x0800cef4
 80026e4:	0800cf00 	.word	0x0800cf00
 80026e8:	0800cf10 	.word	0x0800cf10
 80026ec:	0800cf20 	.word	0x0800cf20
 80026f0:	0800cf2c 	.word	0x0800cf2c

080026f4 <test_fifo_operations>:
    
    printf("=== CONFIGURATION TEST COMPLETE ===\n\r");
}

// Test FIFO operations (read/write buffer tests)
void test_fifo_operations(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	777b      	strb	r3, [r7, #29]
    
    printf("\n=== FIFO OPERATIONS TEST ===\n\r");
 80026fe:	489b      	ldr	r0, [pc, #620]	@ (800296c <test_fifo_operations+0x278>)
 8002700:	f007 ff4c 	bl	800a59c <iprintf>
    
    // First ensure we're in IDLE state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8002704:	f107 031d 	add.w	r3, r7, #29
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe f812 	bl	8000732 <CC1201_EnterIdleMode>
 800270e:	4603      	mov	r3, r0
 8002710:	77fb      	strb	r3, [r7, #31]
    if (hal_status != HAL_OK) {
 8002712:	7ffb      	ldrb	r3, [r7, #31]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <test_fifo_operations+0x2c>
        printf("  ✗ Failed to enter IDLE mode\n\r");
 8002718:	4895      	ldr	r0, [pc, #596]	@ (8002970 <test_fifo_operations+0x27c>)
 800271a:	f007 ff3f 	bl	800a59c <iprintf>
 800271e:	e121      	b.n	8002964 <test_fifo_operations+0x270>
        return;
    }
    print_cc1201_status(status_byte, "IDLE_FOR_FIFO");
 8002720:	7f7b      	ldrb	r3, [r7, #29]
 8002722:	4994      	ldr	r1, [pc, #592]	@ (8002974 <test_fifo_operations+0x280>)
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff77 	bl	8002618 <print_cc1201_status>
    
    // Test 1: Flush both FIFOs to start clean
    printf("1. Flushing FIFOs\n\r");
 800272a:	4893      	ldr	r0, [pc, #588]	@ (8002978 <test_fifo_operations+0x284>)
 800272c:	f007 ff36 	bl	800a59c <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8002730:	f107 031d 	add.w	r3, r7, #29
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe f816 	bl	8000766 <CC1201_FlushTxFifo>
 800273a:	4603      	mov	r3, r0
 800273c:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800273e:	7ffb      	ldrb	r3, [r7, #31]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d104      	bne.n	800274e <test_fifo_operations+0x5a>
        print_cc1201_status(status_byte, "FLUSH_TX");
 8002744:	7f7b      	ldrb	r3, [r7, #29]
 8002746:	498d      	ldr	r1, [pc, #564]	@ (800297c <test_fifo_operations+0x288>)
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff65 	bl	8002618 <print_cc1201_status>
    }
    
    hal_status = CC1201_FlushRxFifo(&status_byte);
 800274e:	f107 031d 	add.w	r3, r7, #29
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fffa 	bl	800074c <CC1201_FlushRxFifo>
 8002758:	4603      	mov	r3, r0
 800275a:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800275c:	7ffb      	ldrb	r3, [r7, #31]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <test_fifo_operations+0x78>
        print_cc1201_status(status_byte, "FLUSH_RX");
 8002762:	7f7b      	ldrb	r3, [r7, #29]
 8002764:	4986      	ldr	r1, [pc, #536]	@ (8002980 <test_fifo_operations+0x28c>)
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff56 	bl	8002618 <print_cc1201_status>
    }
    
    // Test 2: Check initial FIFO byte counts
    printf("2. Initial FIFO status\n\r");
 800276c:	4885      	ldr	r0, [pc, #532]	@ (8002984 <test_fifo_operations+0x290>)
 800276e:	f007 ff15 	bl	800a59c <iprintf>
    uint8_t tx_bytes = 0, rx_bytes = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	773b      	strb	r3, [r7, #28]
 8002776:	2300      	movs	r3, #0
 8002778:	76fb      	strb	r3, [r7, #27]
    
    hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe f884 	bl	800088c <CC1201_GetNumTXBytes>
 8002784:	4603      	mov	r3, r0
 8002786:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8002788:	7ffb      	ldrb	r3, [r7, #31]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <test_fifo_operations+0xa4>
        printf("  TX FIFO bytes: %d\n\r", tx_bytes);
 800278e:	7f3b      	ldrb	r3, [r7, #28]
 8002790:	4619      	mov	r1, r3
 8002792:	487d      	ldr	r0, [pc, #500]	@ (8002988 <test_fifo_operations+0x294>)
 8002794:	f007 ff02 	bl	800a59c <iprintf>
    }
    
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8002798:	f107 031b 	add.w	r3, r7, #27
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe f867 	bl	8000870 <CC1201_GetNumRXBytes>
 80027a2:	4603      	mov	r3, r0
 80027a4:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <test_fifo_operations+0xc2>
        printf("  RX FIFO bytes: %d\n\r", rx_bytes);
 80027ac:	7efb      	ldrb	r3, [r7, #27]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4876      	ldr	r0, [pc, #472]	@ (800298c <test_fifo_operations+0x298>)
 80027b2:	f007 fef3 	bl	800a59c <iprintf>
    }
    
    // Test 3: Write test data to TX FIFO
    printf("3. Writing test data to TX FIFO\n\r");
 80027b6:	4876      	ldr	r0, [pc, #472]	@ (8002990 <test_fifo_operations+0x29c>)
 80027b8:	f007 fef0 	bl	800a59c <iprintf>
    uint8_t test_data[] = {0xAA, 0x55, 0xCC, 0x33, 0xFF, 0x00, 0x11, 0x22};
 80027bc:	4a75      	ldr	r2, [pc, #468]	@ (8002994 <test_fifo_operations+0x2a0>)
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027c6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t test_data_length = sizeof(test_data);
 80027ca:	2308      	movs	r3, #8
 80027cc:	77bb      	strb	r3, [r7, #30]
    
    hal_status = CC1201_WriteTxFifo(test_data, test_data_length, &status_byte);
 80027ce:	f107 021d 	add.w	r2, r7, #29
 80027d2:	7fb9      	ldrb	r1, [r7, #30]
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe f865 	bl	80008a8 <CC1201_WriteTxFifo>
 80027de:	4603      	mov	r3, r0
 80027e0:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d126      	bne.n	8002836 <test_fifo_operations+0x142>
        printf("  ✓ Wrote %d bytes to TX FIFO\n\r", test_data_length);
 80027e8:	7fbb      	ldrb	r3, [r7, #30]
 80027ea:	4619      	mov	r1, r3
 80027ec:	486a      	ldr	r0, [pc, #424]	@ (8002998 <test_fifo_operations+0x2a4>)
 80027ee:	f007 fed5 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "TX_WRITE");
 80027f2:	7f7b      	ldrb	r3, [r7, #29]
 80027f4:	4969      	ldr	r1, [pc, #420]	@ (800299c <test_fifo_operations+0x2a8>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff0e 	bl	8002618 <print_cc1201_status>
        
        // Check TX FIFO count after write
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe f843 	bl	800088c <CC1201_GetNumTXBytes>
 8002806:	4603      	mov	r3, r0
 8002808:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 800280a:	7ffb      	ldrb	r3, [r7, #31]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d117      	bne.n	8002840 <test_fifo_operations+0x14c>
            printf("  TX FIFO bytes after write: %d (expected: %d)\n\r", tx_bytes, test_data_length);
 8002810:	7f3b      	ldrb	r3, [r7, #28]
 8002812:	4619      	mov	r1, r3
 8002814:	7fbb      	ldrb	r3, [r7, #30]
 8002816:	461a      	mov	r2, r3
 8002818:	4861      	ldr	r0, [pc, #388]	@ (80029a0 <test_fifo_operations+0x2ac>)
 800281a:	f007 febf 	bl	800a59c <iprintf>
            if (tx_bytes == test_data_length) {
 800281e:	7f3b      	ldrb	r3, [r7, #28]
 8002820:	7fba      	ldrb	r2, [r7, #30]
 8002822:	429a      	cmp	r2, r3
 8002824:	d103      	bne.n	800282e <test_fifo_operations+0x13a>
                printf("  ✓ TX FIFO count matches written data\n\r");
 8002826:	485f      	ldr	r0, [pc, #380]	@ (80029a4 <test_fifo_operations+0x2b0>)
 8002828:	f007 feb8 	bl	800a59c <iprintf>
 800282c:	e008      	b.n	8002840 <test_fifo_operations+0x14c>
            } else {
                printf("  ✗ TX FIFO count mismatch\n\r");
 800282e:	485e      	ldr	r0, [pc, #376]	@ (80029a8 <test_fifo_operations+0x2b4>)
 8002830:	f007 feb4 	bl	800a59c <iprintf>
 8002834:	e004      	b.n	8002840 <test_fifo_operations+0x14c>
            }
        }
    } else {
        printf("  ✗ TX FIFO write FAILED - HAL Error: %d\n\r", hal_status);
 8002836:	7ffb      	ldrb	r3, [r7, #31]
 8002838:	4619      	mov	r1, r3
 800283a:	485c      	ldr	r0, [pc, #368]	@ (80029ac <test_fifo_operations+0x2b8>)
 800283c:	f007 feae 	bl	800a59c <iprintf>
    }
    
    // Test 4: Write single byte to TX FIFO
    printf("4. Writing single byte to TX FIFO\n\r");
 8002840:	485b      	ldr	r0, [pc, #364]	@ (80029b0 <test_fifo_operations+0x2bc>)
 8002842:	f007 feab 	bl	800a59c <iprintf>
    hal_status = CC1201_WriteSingleTxFifo(0x42, &status_byte);
 8002846:	f107 031d 	add.w	r3, r7, #29
 800284a:	4619      	mov	r1, r3
 800284c:	2042      	movs	r0, #66	@ 0x42
 800284e:	f7fe f98f 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 8002852:	4603      	mov	r3, r0
 8002854:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8002856:	7ffb      	ldrb	r3, [r7, #31]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d117      	bne.n	800288c <test_fifo_operations+0x198>
        printf("  ✓ Wrote single byte (0x42) to TX FIFO\n\r");
 800285c:	4855      	ldr	r0, [pc, #340]	@ (80029b4 <test_fifo_operations+0x2c0>)
 800285e:	f007 fe9d 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "TX_SINGLE");
 8002862:	7f7b      	ldrb	r3, [r7, #29]
 8002864:	4954      	ldr	r1, [pc, #336]	@ (80029b8 <test_fifo_operations+0x2c4>)
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fed6 	bl	8002618 <print_cc1201_status>
        
        // Check updated count
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe f80b 	bl	800088c <CC1201_GetNumTXBytes>
 8002876:	4603      	mov	r3, r0
 8002878:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <test_fifo_operations+0x1a2>
            printf("  TX FIFO bytes after single write: %d\n\r", tx_bytes);
 8002880:	7f3b      	ldrb	r3, [r7, #28]
 8002882:	4619      	mov	r1, r3
 8002884:	484d      	ldr	r0, [pc, #308]	@ (80029bc <test_fifo_operations+0x2c8>)
 8002886:	f007 fe89 	bl	800a59c <iprintf>
 800288a:	e004      	b.n	8002896 <test_fifo_operations+0x1a2>
        }
    } else {
        printf("  ✗ Single TX write FAILED - HAL Error: %d\n\r", hal_status);
 800288c:	7ffb      	ldrb	r3, [r7, #31]
 800288e:	4619      	mov	r1, r3
 8002890:	484b      	ldr	r0, [pc, #300]	@ (80029c0 <test_fifo_operations+0x2cc>)
 8002892:	f007 fe83 	bl	800a59c <iprintf>
    }
    
    // Test 5: Attempt to read from RX FIFO (should be empty)
    printf("5. Reading from empty RX FIFO\n\r");
 8002896:	484b      	ldr	r0, [pc, #300]	@ (80029c4 <test_fifo_operations+0x2d0>)
 8002898:	f007 fe80 	bl	800a59c <iprintf>
    uint8_t read_buffer[10] = {0};
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	811a      	strh	r2, [r3, #8]
    hal_status = CC1201_ReadRxFifo(read_buffer, 1, &status_byte);
 80028a6:	f107 021d 	add.w	r2, r7, #29
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	2101      	movs	r1, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe f8a2 	bl	80009f8 <CC1201_ReadRxFifo>
 80028b4:	4603      	mov	r3, r0
 80028b6:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d119      	bne.n	80028f2 <test_fifo_operations+0x1fe>
        printf("  Read from RX FIFO: 0x%02X\n\r", read_buffer[0]);
 80028be:	793b      	ldrb	r3, [r7, #4]
 80028c0:	4619      	mov	r1, r3
 80028c2:	4841      	ldr	r0, [pc, #260]	@ (80029c8 <test_fifo_operations+0x2d4>)
 80028c4:	f007 fe6a 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "RX_READ_EMPTY");
 80028c8:	7f7b      	ldrb	r3, [r7, #29]
 80028ca:	4940      	ldr	r1, [pc, #256]	@ (80029cc <test_fifo_operations+0x2d8>)
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fea3 	bl	8002618 <print_cc1201_status>
        
        hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 80028d2:	f107 031b 	add.w	r3, r7, #27
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd ffca 	bl	8000870 <CC1201_GetNumRXBytes>
 80028dc:	4603      	mov	r3, r0
 80028de:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80028e0:	7ffb      	ldrb	r3, [r7, #31]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <test_fifo_operations+0x208>
            printf("  RX FIFO bytes after read: %d\n\r", rx_bytes);
 80028e6:	7efb      	ldrb	r3, [r7, #27]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4839      	ldr	r0, [pc, #228]	@ (80029d0 <test_fifo_operations+0x2dc>)
 80028ec:	f007 fe56 	bl	800a59c <iprintf>
 80028f0:	e004      	b.n	80028fc <test_fifo_operations+0x208>
        }
    } else {
        printf("  ✗ RX FIFO read FAILED - HAL Error: %d\n\r", hal_status);
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4837      	ldr	r0, [pc, #220]	@ (80029d4 <test_fifo_operations+0x2e0>)
 80028f8:	f007 fe50 	bl	800a59c <iprintf>
    }
    
    // Test 6: Flush TX FIFO and verify
    printf("6. Flushing TX FIFO and verifying\n\r");
 80028fc:	4836      	ldr	r0, [pc, #216]	@ (80029d8 <test_fifo_operations+0x2e4>)
 80028fe:	f007 fe4d 	bl	800a59c <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8002902:	f107 031d 	add.w	r3, r7, #29
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd ff2d 	bl	8000766 <CC1201_FlushTxFifo>
 800290c:	4603      	mov	r3, r0
 800290e:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8002910:	7ffb      	ldrb	r3, [r7, #31]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11e      	bne.n	8002954 <test_fifo_operations+0x260>
        print_cc1201_status(status_byte, "FINAL_FLUSH_TX");
 8002916:	7f7b      	ldrb	r3, [r7, #29]
 8002918:	4930      	ldr	r1, [pc, #192]	@ (80029dc <test_fifo_operations+0x2e8>)
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fe7c 	bl	8002618 <print_cc1201_status>
        
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd ffb1 	bl	800088c <CC1201_GetNumTXBytes>
 800292a:	4603      	mov	r3, r0
 800292c:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d114      	bne.n	800295e <test_fifo_operations+0x26a>
            printf("  TX FIFO bytes after flush: %d (expected: 0)\n\r", tx_bytes);
 8002934:	7f3b      	ldrb	r3, [r7, #28]
 8002936:	4619      	mov	r1, r3
 8002938:	4829      	ldr	r0, [pc, #164]	@ (80029e0 <test_fifo_operations+0x2ec>)
 800293a:	f007 fe2f 	bl	800a59c <iprintf>
            if (tx_bytes == 0) {
 800293e:	7f3b      	ldrb	r3, [r7, #28]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <test_fifo_operations+0x258>
                printf("  ✓ TX FIFO successfully flushed\n\r");
 8002944:	4827      	ldr	r0, [pc, #156]	@ (80029e4 <test_fifo_operations+0x2f0>)
 8002946:	f007 fe29 	bl	800a59c <iprintf>
 800294a:	e008      	b.n	800295e <test_fifo_operations+0x26a>
            } else {
                printf("  ✗ TX FIFO flush incomplete\n\r");
 800294c:	4826      	ldr	r0, [pc, #152]	@ (80029e8 <test_fifo_operations+0x2f4>)
 800294e:	f007 fe25 	bl	800a59c <iprintf>
 8002952:	e004      	b.n	800295e <test_fifo_operations+0x26a>
            }
        }
    } else {
        printf("  ✗ TX FIFO flush FAILED - HAL Error: %d\n\r", hal_status);
 8002954:	7ffb      	ldrb	r3, [r7, #31]
 8002956:	4619      	mov	r1, r3
 8002958:	4824      	ldr	r0, [pc, #144]	@ (80029ec <test_fifo_operations+0x2f8>)
 800295a:	f007 fe1f 	bl	800a59c <iprintf>
    }
    
    printf("=== FIFO OPERATIONS TEST COMPLETE ===\n\r");
 800295e:	4824      	ldr	r0, [pc, #144]	@ (80029f0 <test_fifo_operations+0x2fc>)
 8002960:	f007 fe1c 	bl	800a59c <iprintf>
}
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	0800d7d0 	.word	0x0800d7d0
 8002970:	0800d7f0 	.word	0x0800d7f0
 8002974:	0800d814 	.word	0x0800d814
 8002978:	0800d824 	.word	0x0800d824
 800297c:	0800d1ac 	.word	0x0800d1ac
 8002980:	0800d168 	.word	0x0800d168
 8002984:	0800d838 	.word	0x0800d838
 8002988:	0800d854 	.word	0x0800d854
 800298c:	0800d86c 	.word	0x0800d86c
 8002990:	0800d884 	.word	0x0800d884
 8002994:	0800dbe8 	.word	0x0800dbe8
 8002998:	0800d8a8 	.word	0x0800d8a8
 800299c:	0800d8cc 	.word	0x0800d8cc
 80029a0:	0800d8d8 	.word	0x0800d8d8
 80029a4:	0800d90c 	.word	0x0800d90c
 80029a8:	0800d938 	.word	0x0800d938
 80029ac:	0800d958 	.word	0x0800d958
 80029b0:	0800d988 	.word	0x0800d988
 80029b4:	0800d9ac 	.word	0x0800d9ac
 80029b8:	0800d9d8 	.word	0x0800d9d8
 80029bc:	0800d9e4 	.word	0x0800d9e4
 80029c0:	0800da10 	.word	0x0800da10
 80029c4:	0800da40 	.word	0x0800da40
 80029c8:	0800da60 	.word	0x0800da60
 80029cc:	0800da80 	.word	0x0800da80
 80029d0:	0800da90 	.word	0x0800da90
 80029d4:	0800dab4 	.word	0x0800dab4
 80029d8:	0800dae0 	.word	0x0800dae0
 80029dc:	0800db04 	.word	0x0800db04
 80029e0:	0800db14 	.word	0x0800db14
 80029e4:	0800db44 	.word	0x0800db44
 80029e8:	0800db6c 	.word	0x0800db6c
 80029ec:	0800db90 	.word	0x0800db90
 80029f0:	0800dbc0 	.word	0x0800dbc0

080029f4 <test_buffer_readwrite_verification>:

// New comprehensive buffer read/write with verification test
void test_buffer_readwrite_verification(void) {
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b094      	sub	sp, #80	@ 0x50
 80029f8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    
    printf("\n=== BUFFER READ/WRITE VERIFICATION TEST ===\n\r");
 8002a00:	48aa      	ldr	r0, [pc, #680]	@ (8002cac <test_buffer_readwrite_verification+0x2b8>)
 8002a02:	f007 fdcb 	bl	800a59c <iprintf>
    
    // This test demonstrates comprehensive buffer operations with full transparency
    
    // 1. Enter IDLE and clear FIFOs
    printf("1. INITIALIZING TEST STATE\n\r");
 8002a06:	48aa      	ldr	r0, [pc, #680]	@ (8002cb0 <test_buffer_readwrite_verification+0x2bc>)
 8002a08:	f007 fdc8 	bl	800a59c <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8002a0c:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fe8e 	bl	8000732 <CC1201_EnterIdleMode>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 8002a1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d131      	bne.n	8002a88 <test_buffer_readwrite_verification+0x94>
        print_cc1201_status(status_byte, "ENTER_IDLE");
 8002a24:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002a28:	49a2      	ldr	r1, [pc, #648]	@ (8002cb4 <test_buffer_readwrite_verification+0x2c0>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fdf4 	bl	8002618 <print_cc1201_status>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
        return;
    }
    
    // Clear FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8002a30:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fe96 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 8002a3a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002a3e:	499e      	ldr	r1, [pc, #632]	@ (8002cb8 <test_buffer_readwrite_verification+0x2c4>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fde9 	bl	8002618 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 8002a46:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fe7e 	bl	800074c <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 8002a50:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002a54:	4999      	ldr	r1, [pc, #612]	@ (8002cbc <test_buffer_readwrite_verification+0x2c8>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fdde 	bl	8002618 <print_cc1201_status>
    
    // 2. Test different data patterns
    printf("\n2. TESTING MULTIPLE DATA PATTERNS\n\r");
 8002a5c:	4898      	ldr	r0, [pc, #608]	@ (8002cc0 <test_buffer_readwrite_verification+0x2cc>)
 8002a5e:	f007 fd9d 	bl	800a59c <iprintf>
    
    uint8_t patterns[][8] = {
 8002a62:	4b98      	ldr	r3, [pc, #608]	@ (8002cc4 <test_buffer_readwrite_verification+0x2d0>)
 8002a64:	f107 0420 	add.w	r4, r7, #32
 8002a68:	461d      	mov	r5, r3
 8002a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55},  // Alternating
        {0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00},  // High/Low
        {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}   // Bit shifts
    };
    
    const char* pattern_names[] = {"SEQUENTIAL", "ALTERNATING", "HIGH_LOW", "BIT_SHIFT"};
 8002a76:	4b94      	ldr	r3, [pc, #592]	@ (8002cc8 <test_buffer_readwrite_verification+0x2d4>)
 8002a78:	f107 0410 	add.w	r4, r7, #16
 8002a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int p = 0; p < 4; p++) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a86:	e065      	b.n	8002b54 <test_buffer_readwrite_verification+0x160>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
 8002a88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	488f      	ldr	r0, [pc, #572]	@ (8002ccc <test_buffer_readwrite_verification+0x2d8>)
 8002a90:	f007 fd84 	bl	800a59c <iprintf>
 8002a94:	e106      	b.n	8002ca4 <test_buffer_readwrite_verification+0x2b0>
        printf("\n  Pattern %d: %s\n\r", p+1, pattern_names[p]);
 8002a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a98:	1c59      	adds	r1, r3, #1
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	3350      	adds	r3, #80	@ 0x50
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4889      	ldr	r0, [pc, #548]	@ (8002cd0 <test_buffer_readwrite_verification+0x2dc>)
 8002aaa:	f007 fd77 	bl	800a59c <iprintf>
        printf("  Data: ");
 8002aae:	4889      	ldr	r0, [pc, #548]	@ (8002cd4 <test_buffer_readwrite_verification+0x2e0>)
 8002ab0:	f007 fd74 	bl	800a59c <iprintf>
        for (int i = 0; i < 8; i++) {
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ab8:	e00e      	b.n	8002ad8 <test_buffer_readwrite_verification+0xe4>
            printf("0x%02X ", patterns[p][i]);
 8002aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	3350      	adds	r3, #80	@ 0x50
 8002ac0:	19da      	adds	r2, r3, r7
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3b30      	subs	r3, #48	@ 0x30
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4882      	ldr	r0, [pc, #520]	@ (8002cd8 <test_buffer_readwrite_verification+0x2e4>)
 8002ace:	f007 fd65 	bl	800a59c <iprintf>
        for (int i = 0; i < 8; i++) {
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ada:	2b07      	cmp	r3, #7
 8002adc:	dded      	ble.n	8002aba <test_buffer_readwrite_verification+0xc6>
        }
        printf("\n\r");
 8002ade:	487f      	ldr	r0, [pc, #508]	@ (8002cdc <test_buffer_readwrite_verification+0x2e8>)
 8002ae0:	f007 fd5c 	bl	800a59c <iprintf>
        
        // Write pattern to TX FIFO
        hal_status = CC1201_WriteTxFifo(patterns[p], 8, &status_byte);
 8002ae4:	f107 0220 	add.w	r2, r7, #32
 8002ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8002af2:	2108      	movs	r1, #8
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fed7 	bl	80008a8 <CC1201_WriteTxFifo>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 8002b00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11c      	bne.n	8002b42 <test_buffer_readwrite_verification+0x14e>
            printf("  ✓ Write SUCCESS ");
 8002b08:	4875      	ldr	r0, [pc, #468]	@ (8002ce0 <test_buffer_readwrite_verification+0x2ec>)
 8002b0a:	f007 fd47 	bl	800a59c <iprintf>
            print_cc1201_status(status_byte, "PATTERN_WRITE");
 8002b0e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002b12:	4974      	ldr	r1, [pc, #464]	@ (8002ce4 <test_buffer_readwrite_verification+0x2f0>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd7f 	bl	8002618 <print_cc1201_status>
            
            // Check FIFO count
            uint8_t fifo_count = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	717b      	strb	r3, [r7, #5]
            CC1201_GetNumTXBytes(&fifo_count);
 8002b1e:	1d7b      	adds	r3, r7, #5
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd feb3 	bl	800088c <CC1201_GetNumTXBytes>
            printf("  FIFO count: %d bytes\n\r", fifo_count);
 8002b26:	797b      	ldrb	r3, [r7, #5]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	486f      	ldr	r0, [pc, #444]	@ (8002ce8 <test_buffer_readwrite_verification+0x2f4>)
 8002b2c:	f007 fd36 	bl	800a59c <iprintf>
            
            // Clear FIFO for next test
            CC1201_FlushTxFifo(&status_byte);
 8002b30:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fe16 	bl	8000766 <CC1201_FlushTxFifo>
            printf("  Flushed for next test\n\r");
 8002b3a:	486c      	ldr	r0, [pc, #432]	@ (8002cec <test_buffer_readwrite_verification+0x2f8>)
 8002b3c:	f007 fd2e 	bl	800a59c <iprintf>
 8002b40:	e005      	b.n	8002b4e <test_buffer_readwrite_verification+0x15a>
        } else {
            printf("  ✗ Write FAILED - HAL: %d\n\r", hal_status);
 8002b42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002b46:	4619      	mov	r1, r3
 8002b48:	4869      	ldr	r0, [pc, #420]	@ (8002cf0 <test_buffer_readwrite_verification+0x2fc>)
 8002b4a:	f007 fd27 	bl	800a59c <iprintf>
    for (int p = 0; p < 4; p++) {
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b50:	3301      	adds	r3, #1
 8002b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	dd9d      	ble.n	8002a96 <test_buffer_readwrite_verification+0xa2>
        }
    }
    
    // 3. Test single byte operations with verification
    printf("\n3. SINGLE BYTE OPERATIONS TEST\n\r");
 8002b5a:	4866      	ldr	r0, [pc, #408]	@ (8002cf4 <test_buffer_readwrite_verification+0x300>)
 8002b5c:	f007 fd1e 	bl	800a59c <iprintf>
    uint8_t test_bytes[] = {0x42, 0x69, 0xA5, 0x3C, 0xF0};
 8002b60:	4a65      	ldr	r2, [pc, #404]	@ (8002cf8 <test_buffer_readwrite_verification+0x304>)
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b6a:	6018      	str	r0, [r3, #0]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	7019      	strb	r1, [r3, #0]
    
    for (int i = 0; i < 5; i++) {
 8002b70:	2300      	movs	r3, #0
 8002b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b74:	e02f      	b.n	8002bd6 <test_buffer_readwrite_verification+0x1e2>
        printf("  Writing byte %d: 0x%02X\n\r", i+1, test_bytes[i]);
 8002b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b78:	1c59      	adds	r1, r3, #1
 8002b7a:	f107 0208 	add.w	r2, r7, #8
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	485d      	ldr	r0, [pc, #372]	@ (8002cfc <test_buffer_readwrite_verification+0x308>)
 8002b88:	f007 fd08 	bl	800a59c <iprintf>
        hal_status = CC1201_WriteSingleTxFifo(test_bytes[i], &status_byte);
 8002b8c:	f107 0208 	add.w	r2, r7, #8
 8002b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd ffe7 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 8002ba8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <test_buffer_readwrite_verification+0x1d0>
            printf("    ✓ Single write SUCCESS ");
 8002bb0:	4853      	ldr	r0, [pc, #332]	@ (8002d00 <test_buffer_readwrite_verification+0x30c>)
 8002bb2:	f007 fcf3 	bl	800a59c <iprintf>
            print_cc1201_status(status_byte, "SINGLE_BYTE");
 8002bb6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002bba:	4952      	ldr	r1, [pc, #328]	@ (8002d04 <test_buffer_readwrite_verification+0x310>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fd2b 	bl	8002618 <print_cc1201_status>
 8002bc2:	e005      	b.n	8002bd0 <test_buffer_readwrite_verification+0x1dc>
        } else {
            printf("    ✗ Single write FAILED - HAL: %d\n\r", hal_status);
 8002bc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002bc8:	4619      	mov	r1, r3
 8002bca:	484f      	ldr	r0, [pc, #316]	@ (8002d08 <test_buffer_readwrite_verification+0x314>)
 8002bcc:	f007 fce6 	bl	800a59c <iprintf>
    for (int i = 0; i < 5; i++) {
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	ddcc      	ble.n	8002b76 <test_buffer_readwrite_verification+0x182>
        }
    }
    
    // Check final FIFO count
    uint8_t final_count = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	71fb      	strb	r3, [r7, #7]
    CC1201_GetNumTXBytes(&final_count);
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fe52 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO: %d bytes (expected: 5)\n\r", final_count);
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4847      	ldr	r0, [pc, #284]	@ (8002d0c <test_buffer_readwrite_verification+0x318>)
 8002bee:	f007 fcd5 	bl	800a59c <iprintf>
    
    // 4. Test state transitions with data
    printf("\n4. STATE TRANSITION WITH BUFFER DATA\n\r");
 8002bf2:	4847      	ldr	r0, [pc, #284]	@ (8002d10 <test_buffer_readwrite_verification+0x31c>)
 8002bf4:	f007 fcd2 	bl	800a59c <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 8002bf8:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fd8b 	bl	8000718 <CC1201_EnterTxMode>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 8002c08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d123      	bne.n	8002c58 <test_buffer_readwrite_verification+0x264>
        printf("  ✓ Entered TX mode with %d bytes in FIFO\n\r", final_count);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4619      	mov	r1, r3
 8002c14:	483f      	ldr	r0, [pc, #252]	@ (8002d14 <test_buffer_readwrite_verification+0x320>)
 8002c16:	f007 fcc1 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "TX_MODE_WITH_DATA");
 8002c1a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002c1e:	493e      	ldr	r1, [pc, #248]	@ (8002d18 <test_buffer_readwrite_verification+0x324>)
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fcf9 	bl	8002618 <print_cc1201_status>
        
        HAL_Delay(50); // Allow some time for potential transmission
 8002c26:	2032      	movs	r0, #50	@ 0x32
 8002c28:	f001 fe14 	bl	8004854 <HAL_Delay>
        
        // Check status after time in TX mode
        CC1201_Nop(&status_byte);
 8002c2c:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fda5 	bl	8000780 <CC1201_Nop>
        print_cc1201_status(status_byte, "TX_AFTER_DELAY");
 8002c36:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002c3a:	4938      	ldr	r1, [pc, #224]	@ (8002d1c <test_buffer_readwrite_verification+0x328>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fceb 	bl	8002618 <print_cc1201_status>
        
        // Return to IDLE
        CC1201_EnterIdleMode(&status_byte);
 8002c42:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fd73 	bl	8000732 <CC1201_EnterIdleMode>
        print_cc1201_status(status_byte, "RETURN_TO_IDLE");
 8002c4c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002c50:	4933      	ldr	r1, [pc, #204]	@ (8002d20 <test_buffer_readwrite_verification+0x32c>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fce0 	bl	8002618 <print_cc1201_status>
    }
    
    // 5. Final cleanup
    printf("\n5. FINAL CLEANUP AND VERIFICATION\n\r");
 8002c58:	4832      	ldr	r0, [pc, #200]	@ (8002d24 <test_buffer_readwrite_verification+0x330>)
 8002c5a:	f007 fc9f 	bl	800a59c <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 8002c5e:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fd7f 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FINAL_CLEANUP");
 8002c68:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002c6c:	492e      	ldr	r1, [pc, #184]	@ (8002d28 <test_buffer_readwrite_verification+0x334>)
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fcd2 	bl	8002618 <print_cc1201_status>
    
    uint8_t cleanup_count = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	71bb      	strb	r3, [r7, #6]
    CC1201_GetNumTXBytes(&cleanup_count);
 8002c78:	1dbb      	adds	r3, r7, #6
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fe06 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final FIFO count: %d (should be 0)\n\r", cleanup_count);
 8002c80:	79bb      	ldrb	r3, [r7, #6]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4829      	ldr	r0, [pc, #164]	@ (8002d2c <test_buffer_readwrite_verification+0x338>)
 8002c86:	f007 fc89 	bl	800a59c <iprintf>
    
    if (cleanup_count == 0) {
 8002c8a:	79bb      	ldrb	r3, [r7, #6]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <test_buffer_readwrite_verification+0x2a4>
        printf("  ✓ BUFFER TEST COMPLETED SUCCESSFULLY\n\r");
 8002c90:	4827      	ldr	r0, [pc, #156]	@ (8002d30 <test_buffer_readwrite_verification+0x33c>)
 8002c92:	f007 fc83 	bl	800a59c <iprintf>
 8002c96:	e002      	b.n	8002c9e <test_buffer_readwrite_verification+0x2aa>
    } else {
        printf("  ⚠ FIFO not completely empty after cleanup\n\r");
 8002c98:	4826      	ldr	r0, [pc, #152]	@ (8002d34 <test_buffer_readwrite_verification+0x340>)
 8002c9a:	f007 fc7f 	bl	800a59c <iprintf>
    }
    
    printf("=== BUFFER VERIFICATION TEST COMPLETE ===\n\r");
 8002c9e:	4826      	ldr	r0, [pc, #152]	@ (8002d38 <test_buffer_readwrite_verification+0x344>)
 8002ca0:	f007 fc7c 	bl	800a59c <iprintf>
}
 8002ca4:	3750      	adds	r7, #80	@ 0x50
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	0800dbf0 	.word	0x0800dbf0
 8002cb0:	0800dc20 	.word	0x0800dc20
 8002cb4:	0800dc40 	.word	0x0800dc40
 8002cb8:	0800d1ac 	.word	0x0800d1ac
 8002cbc:	0800d168 	.word	0x0800d168
 8002cc0:	0800dc74 	.word	0x0800dc74
 8002cc4:	0800df7c 	.word	0x0800df7c
 8002cc8:	0800dfcc 	.word	0x0800dfcc
 8002ccc:	0800dc4c 	.word	0x0800dc4c
 8002cd0:	0800dc9c 	.word	0x0800dc9c
 8002cd4:	0800dcb0 	.word	0x0800dcb0
 8002cd8:	0800dcbc 	.word	0x0800dcbc
 8002cdc:	0800dcc4 	.word	0x0800dcc4
 8002ce0:	0800dcc8 	.word	0x0800dcc8
 8002ce4:	0800dce0 	.word	0x0800dce0
 8002ce8:	0800dcf0 	.word	0x0800dcf0
 8002cec:	0800dd0c 	.word	0x0800dd0c
 8002cf0:	0800dd28 	.word	0x0800dd28
 8002cf4:	0800dd48 	.word	0x0800dd48
 8002cf8:	0800dfdc 	.word	0x0800dfdc
 8002cfc:	0800dd6c 	.word	0x0800dd6c
 8002d00:	0800dd88 	.word	0x0800dd88
 8002d04:	0800dda8 	.word	0x0800dda8
 8002d08:	0800ddb4 	.word	0x0800ddb4
 8002d0c:	0800dddc 	.word	0x0800dddc
 8002d10:	0800de08 	.word	0x0800de08
 8002d14:	0800de30 	.word	0x0800de30
 8002d18:	0800de60 	.word	0x0800de60
 8002d1c:	0800de74 	.word	0x0800de74
 8002d20:	0800de84 	.word	0x0800de84
 8002d24:	0800de94 	.word	0x0800de94
 8002d28:	0800debc 	.word	0x0800debc
 8002d2c:	0800decc 	.word	0x0800decc
 8002d30:	0800def4 	.word	0x0800def4
 8002d34:	0800df20 	.word	0x0800df20
 8002d38:	0800df50 	.word	0x0800df50

08002d3c <test_cc1201_communication_verification>:

// CC1201 Communication Verification Test
void test_cc1201_communication_verification(void) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	70bb      	strb	r3, [r7, #2]
    
    printf("\n=== CC1201 COMMUNICATION VERIFICATION TEST ===\n\r");
 8002d46:	487b      	ldr	r0, [pc, #492]	@ (8002f34 <test_cc1201_communication_verification+0x1f8>)
 8002d48:	f007 fc28 	bl	800a59c <iprintf>
    
    // 1. Test basic communication with different strobe commands
    printf("1. TESTING BASIC STROBE RESPONSES\n\r");
 8002d4c:	487a      	ldr	r0, [pc, #488]	@ (8002f38 <test_cc1201_communication_verification+0x1fc>)
 8002d4e:	f007 fc25 	bl	800a59c <iprintf>
    
    // Test NOP command multiple times to see if we get consistent responses
    for (int i = 0; i < 5; i++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	e01b      	b.n	8002d90 <test_cc1201_communication_verification+0x54>
        hal_status = CC1201_Nop(&status_byte);
 8002d58:	1cbb      	adds	r3, r7, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fd10 	bl	8000780 <CC1201_Nop>
 8002d60:	4603      	mov	r3, r0
 8002d62:	70fb      	strb	r3, [r7, #3]
        printf("  NOP %d: HAL=%d, Status=0x%02X ", i+1, hal_status, status_byte);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	1c59      	adds	r1, r3, #1
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	78bb      	ldrb	r3, [r7, #2]
 8002d6c:	4873      	ldr	r0, [pc, #460]	@ (8002f3c <test_cc1201_communication_verification+0x200>)
 8002d6e:	f007 fc15 	bl	800a59c <iprintf>
        if (hal_status == HAL_OK) {
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <test_cc1201_communication_verification+0x48>
            print_cc1201_status(status_byte, "NOP_TEST");
 8002d78:	78bb      	ldrb	r3, [r7, #2]
 8002d7a:	4971      	ldr	r1, [pc, #452]	@ (8002f40 <test_cc1201_communication_verification+0x204>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fc4b 	bl	8002618 <print_cc1201_status>
 8002d82:	e002      	b.n	8002d8a <test_cc1201_communication_verification+0x4e>
        } else {
            printf(" - COMMUNICATION FAILED\n\r");
 8002d84:	486f      	ldr	r0, [pc, #444]	@ (8002f44 <test_cc1201_communication_verification+0x208>)
 8002d86:	f007 fc09 	bl	800a59c <iprintf>
    for (int i = 0; i < 5; i++) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	dde0      	ble.n	8002d58 <test_cc1201_communication_verification+0x1c>
        }
    }
    
    // 2. Test soft reset to see if status changes
    printf("\n2. TESTING SOFT RESET RESPONSE\n\r");
 8002d96:	486c      	ldr	r0, [pc, #432]	@ (8002f48 <test_cc1201_communication_verification+0x20c>)
 8002d98:	f007 fc00 	bl	800a59c <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 8002d9c:	1cbb      	adds	r3, r7, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fc84 	bl	80006ac <CC1201_SoftReset>
 8002da4:	4603      	mov	r3, r0
 8002da6:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11c      	bne.n	8002de8 <test_cc1201_communication_verification+0xac>
        printf("  Soft Reset: ");
 8002dae:	4867      	ldr	r0, [pc, #412]	@ (8002f4c <test_cc1201_communication_verification+0x210>)
 8002db0:	f007 fbf4 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "RESET");
 8002db4:	78bb      	ldrb	r3, [r7, #2]
 8002db6:	4966      	ldr	r1, [pc, #408]	@ (8002f50 <test_cc1201_communication_verification+0x214>)
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fc2d 	bl	8002618 <print_cc1201_status>
        
        // Wait for reset to complete and test again
        HAL_Delay(100);
 8002dbe:	2064      	movs	r0, #100	@ 0x64
 8002dc0:	f001 fd48 	bl	8004854 <HAL_Delay>
        hal_status = CC1201_Nop(&status_byte);
 8002dc4:	1cbb      	adds	r3, r7, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fcda 	bl	8000780 <CC1201_Nop>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	70fb      	strb	r3, [r7, #3]
        if (hal_status == HAL_OK) {
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10d      	bne.n	8002df2 <test_cc1201_communication_verification+0xb6>
            printf("  After Reset: ");
 8002dd6:	485f      	ldr	r0, [pc, #380]	@ (8002f54 <test_cc1201_communication_verification+0x218>)
 8002dd8:	f007 fbe0 	bl	800a59c <iprintf>
            print_cc1201_status(status_byte, "POST_RESET");
 8002ddc:	78bb      	ldrb	r3, [r7, #2]
 8002dde:	495e      	ldr	r1, [pc, #376]	@ (8002f58 <test_cc1201_communication_verification+0x21c>)
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fc19 	bl	8002618 <print_cc1201_status>
 8002de6:	e004      	b.n	8002df2 <test_cc1201_communication_verification+0xb6>
        }
    } else {
        printf("  ✗ Soft Reset FAILED - HAL: %d\n\r", hal_status);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	4619      	mov	r1, r3
 8002dec:	485b      	ldr	r0, [pc, #364]	@ (8002f5c <test_cc1201_communication_verification+0x220>)
 8002dee:	f007 fbd5 	bl	800a59c <iprintf>
    }
    
    // 3. Test different states to see if we get different status responses
    printf("\n3. TESTING STATE TRANSITIONS\n\r");
 8002df2:	485b      	ldr	r0, [pc, #364]	@ (8002f60 <test_cc1201_communication_verification+0x224>)
 8002df4:	f007 fbd2 	bl	800a59c <iprintf>
    
    // Try to enter IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8002df8:	1cbb      	adds	r3, r7, #2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fc99 	bl	8000732 <CC1201_EnterIdleMode>
 8002e00:	4603      	mov	r3, r0
 8002e02:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d107      	bne.n	8002e1a <test_cc1201_communication_verification+0xde>
        printf("  IDLE Mode: ");
 8002e0a:	4856      	ldr	r0, [pc, #344]	@ (8002f64 <test_cc1201_communication_verification+0x228>)
 8002e0c:	f007 fbc6 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "IDLE_ENTRY");
 8002e10:	78bb      	ldrb	r3, [r7, #2]
 8002e12:	4955      	ldr	r1, [pc, #340]	@ (8002f68 <test_cc1201_communication_verification+0x22c>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fbff 	bl	8002618 <print_cc1201_status>
    }
    
    // Try calibration
    hal_status = CC1201_CalFreqSynth(&status_byte);
 8002e1a:	1cbb      	adds	r3, r7, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fc6e 	bl	80006fe <CC1201_CalFreqSynth>
 8002e22:	4603      	mov	r3, r0
 8002e24:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <test_cc1201_communication_verification+0x106>
        printf("  Calibrate: ");
 8002e2c:	484f      	ldr	r0, [pc, #316]	@ (8002f6c <test_cc1201_communication_verification+0x230>)
 8002e2e:	f007 fbb5 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "CALIBRATE");
 8002e32:	78bb      	ldrb	r3, [r7, #2]
 8002e34:	494e      	ldr	r1, [pc, #312]	@ (8002f70 <test_cc1201_communication_verification+0x234>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fbee 	bl	8002618 <print_cc1201_status>
        HAL_Delay(50); // Wait for calibration
 8002e3c:	2032      	movs	r0, #50	@ 0x32
 8002e3e:	f001 fd09 	bl	8004854 <HAL_Delay>
    }
    
    // Try fast TX on
    hal_status = CC1201_FastTxOn(&status_byte);
 8002e42:	1cbb      	adds	r3, r7, #2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fc4d 	bl	80006e4 <CC1201_FastTxOn>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <test_cc1201_communication_verification+0x128>
        printf("  Fast TX On: ");
 8002e54:	4847      	ldr	r0, [pc, #284]	@ (8002f74 <test_cc1201_communication_verification+0x238>)
 8002e56:	f007 fba1 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "FAST_TX_ON");
 8002e5a:	78bb      	ldrb	r3, [r7, #2]
 8002e5c:	4946      	ldr	r1, [pc, #280]	@ (8002f78 <test_cc1201_communication_verification+0x23c>)
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fbda 	bl	8002618 <print_cc1201_status>
    }
    
    // Return to IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8002e64:	1cbb      	adds	r3, r7, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fc63 	bl	8000732 <CC1201_EnterIdleMode>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <test_cc1201_communication_verification+0x14a>
        printf("  Return IDLE: ");
 8002e76:	4841      	ldr	r0, [pc, #260]	@ (8002f7c <test_cc1201_communication_verification+0x240>)
 8002e78:	f007 fb90 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "RETURN_IDLE");
 8002e7c:	78bb      	ldrb	r3, [r7, #2]
 8002e7e:	4940      	ldr	r1, [pc, #256]	@ (8002f80 <test_cc1201_communication_verification+0x244>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fbc9 	bl	8002618 <print_cc1201_status>
    }
    
    // 4. Test register read to verify communication
    printf("\n4. TESTING REGISTER READ OPERATIONS\n\r");
 8002e86:	483f      	ldr	r0, [pc, #252]	@ (8002f84 <test_cc1201_communication_verification+0x248>)
 8002e88:	f007 fb88 	bl	800a59c <iprintf>
    
    uint8_t chip_id = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	707b      	strb	r3, [r7, #1]
    hal_status = CC1201_ReadStatus(CC1201_MARCSTATE, &chip_id);
 8002e90:	1c7b      	adds	r3, r7, #1
 8002e92:	4619      	mov	r1, r3
 8002e94:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8002e98:	f7fd fc8e 	bl	80007b8 <CC1201_ReadStatus>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <test_cc1201_communication_verification+0x176>
        printf("  MARCSTATE: 0x%02X\n\r", chip_id);
 8002ea6:	787b      	ldrb	r3, [r7, #1]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4837      	ldr	r0, [pc, #220]	@ (8002f88 <test_cc1201_communication_verification+0x24c>)
 8002eac:	f007 fb76 	bl	800a59c <iprintf>
 8002eb0:	e004      	b.n	8002ebc <test_cc1201_communication_verification+0x180>
    } else {
        printf("  ✗ MARCSTATE read failed - HAL: %d\n\r", hal_status);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4835      	ldr	r0, [pc, #212]	@ (8002f8c <test_cc1201_communication_verification+0x250>)
 8002eb8:	f007 fb70 	bl	800a59c <iprintf>
    }
    
    uint8_t marc_state = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	703b      	strb	r3, [r7, #0]
    hal_status = CC1201_ReadMARCState(&marc_state);
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fcc6 	bl	8000854 <CC1201_ReadMARCState>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <test_cc1201_communication_verification+0x1a2>
        printf("  MARC_STATE: 0x%02X\n\r", marc_state);
 8002ed2:	783b      	ldrb	r3, [r7, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	482e      	ldr	r0, [pc, #184]	@ (8002f90 <test_cc1201_communication_verification+0x254>)
 8002ed8:	f007 fb60 	bl	800a59c <iprintf>
 8002edc:	e004      	b.n	8002ee8 <test_cc1201_communication_verification+0x1ac>
    } else {
        printf("  ✗ MARC_STATE read failed - HAL: %d\n\r", hal_status);
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	482c      	ldr	r0, [pc, #176]	@ (8002f94 <test_cc1201_communication_verification+0x258>)
 8002ee4:	f007 fb5a 	bl	800a59c <iprintf>
    }
    
    // 5. Analyze status byte patterns
    printf("\n5. STATUS BYTE ANALYSIS\n\r");
 8002ee8:	482b      	ldr	r0, [pc, #172]	@ (8002f98 <test_cc1201_communication_verification+0x25c>)
 8002eea:	f007 fb57 	bl	800a59c <iprintf>
    printf("  If all status bytes are 0x00, this suggests:\n\r");
 8002eee:	482b      	ldr	r0, [pc, #172]	@ (8002f9c <test_cc1201_communication_verification+0x260>)
 8002ef0:	f007 fb54 	bl	800a59c <iprintf>
    printf("  - CC1201 may not be responding (check power/connections)\n\r");
 8002ef4:	482a      	ldr	r0, [pc, #168]	@ (8002fa0 <test_cc1201_communication_verification+0x264>)
 8002ef6:	f007 fb51 	bl	800a59c <iprintf>
    printf("  - SPI communication issue (check MISO line)\n\r");
 8002efa:	482a      	ldr	r0, [pc, #168]	@ (8002fa4 <test_cc1201_communication_verification+0x268>)
 8002efc:	f007 fb4e 	bl	800a59c <iprintf>
    printf("  - CC1201 may be in reset or powered down\n\r");
 8002f00:	4829      	ldr	r0, [pc, #164]	@ (8002fa8 <test_cc1201_communication_verification+0x26c>)
 8002f02:	f007 fb4b 	bl	800a59c <iprintf>
    printf("  \n\r");
 8002f06:	4829      	ldr	r0, [pc, #164]	@ (8002fac <test_cc1201_communication_verification+0x270>)
 8002f08:	f007 fb48 	bl	800a59c <iprintf>
    printf("  Normal CC1201 status should show:\n\r");
 8002f0c:	4828      	ldr	r0, [pc, #160]	@ (8002fb0 <test_cc1201_communication_verification+0x274>)
 8002f0e:	f007 fb45 	bl	800a59c <iprintf>
    printf("  - Bits [7:4]: Current state (0=IDLE, 1=RX, 2=TX, etc.)\n\r");
 8002f12:	4828      	ldr	r0, [pc, #160]	@ (8002fb4 <test_cc1201_communication_verification+0x278>)
 8002f14:	f007 fb42 	bl	800a59c <iprintf>
    printf("  - Bits [3:0]: FIFO bytes or chip status info\n\r");
 8002f18:	4827      	ldr	r0, [pc, #156]	@ (8002fb8 <test_cc1201_communication_verification+0x27c>)
 8002f1a:	f007 fb3f 	bl	800a59c <iprintf>
    printf("  - A functioning CC1201 should rarely return exactly 0x00\n\r");
 8002f1e:	4827      	ldr	r0, [pc, #156]	@ (8002fbc <test_cc1201_communication_verification+0x280>)
 8002f20:	f007 fb3c 	bl	800a59c <iprintf>
    
    printf("=== COMMUNICATION VERIFICATION COMPLETE ===\n\r");
 8002f24:	4826      	ldr	r0, [pc, #152]	@ (8002fc0 <test_cc1201_communication_verification+0x284>)
 8002f26:	f007 fb39 	bl	800a59c <iprintf>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	0800dfe4 	.word	0x0800dfe4
 8002f38:	0800e018 	.word	0x0800e018
 8002f3c:	0800e03c 	.word	0x0800e03c
 8002f40:	0800e060 	.word	0x0800e060
 8002f44:	0800e06c 	.word	0x0800e06c
 8002f48:	0800e088 	.word	0x0800e088
 8002f4c:	0800e0ac 	.word	0x0800e0ac
 8002f50:	0800cfc4 	.word	0x0800cfc4
 8002f54:	0800e0bc 	.word	0x0800e0bc
 8002f58:	0800e0cc 	.word	0x0800e0cc
 8002f5c:	0800e0d8 	.word	0x0800e0d8
 8002f60:	0800e0fc 	.word	0x0800e0fc
 8002f64:	0800e11c 	.word	0x0800e11c
 8002f68:	0800e12c 	.word	0x0800e12c
 8002f6c:	0800e138 	.word	0x0800e138
 8002f70:	0800d058 	.word	0x0800d058
 8002f74:	0800e148 	.word	0x0800e148
 8002f78:	0800d0a0 	.word	0x0800d0a0
 8002f7c:	0800e158 	.word	0x0800e158
 8002f80:	0800e168 	.word	0x0800e168
 8002f84:	0800e174 	.word	0x0800e174
 8002f88:	0800e19c 	.word	0x0800e19c
 8002f8c:	0800e1b4 	.word	0x0800e1b4
 8002f90:	0800e1dc 	.word	0x0800e1dc
 8002f94:	0800e1f4 	.word	0x0800e1f4
 8002f98:	0800e220 	.word	0x0800e220
 8002f9c:	0800e23c 	.word	0x0800e23c
 8002fa0:	0800e270 	.word	0x0800e270
 8002fa4:	0800e2b0 	.word	0x0800e2b0
 8002fa8:	0800e2e0 	.word	0x0800e2e0
 8002fac:	0800e310 	.word	0x0800e310
 8002fb0:	0800e318 	.word	0x0800e318
 8002fb4:	0800e340 	.word	0x0800e340
 8002fb8:	0800e37c 	.word	0x0800e37c
 8002fbc:	0800e3b0 	.word	0x0800e3b0
 8002fc0:	0800e3f0 	.word	0x0800e3f0

08002fc4 <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 8002fca:	485c      	ldr	r0, [pc, #368]	@ (800313c <test_GPIO_pins+0x178>)
 8002fcc:	f007 fae6 	bl	800a59c <iprintf>
    
    // Test CS pin more thoroughly
    printf("CS Pin (PE4) Detailed Test:\n\r");
 8002fd0:	485b      	ldr	r0, [pc, #364]	@ (8003140 <test_GPIO_pins+0x17c>)
 8002fd2:	f007 fae3 	bl	800a59c <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8002fd6:	2110      	movs	r1, #16
 8002fd8:	485a      	ldr	r0, [pc, #360]	@ (8003144 <test_GPIO_pins+0x180>)
 8002fda:	f002 fb89 	bl	80056f0 <HAL_GPIO_ReadPin>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
    printf("  Initial state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <test_GPIO_pins+0x28>
 8002fe8:	4b57      	ldr	r3, [pc, #348]	@ (8003148 <test_GPIO_pins+0x184>)
 8002fea:	e000      	b.n	8002fee <test_GPIO_pins+0x2a>
 8002fec:	4b57      	ldr	r3, [pc, #348]	@ (800314c <test_GPIO_pins+0x188>)
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4857      	ldr	r0, [pc, #348]	@ (8003150 <test_GPIO_pins+0x18c>)
 8002ff2:	f007 fad3 	bl	800a59c <iprintf>
    
    // Force CS LOW and check multiple times
    printf("  Forcing CS LOW...\n\r");
 8002ff6:	4857      	ldr	r0, [pc, #348]	@ (8003154 <test_GPIO_pins+0x190>)
 8002ff8:	f007 fad0 	bl	800a59c <iprintf>
    for (int i = 0; i < 5; i++) {
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e01c      	b.n	800303c <test_GPIO_pins+0x78>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8003002:	2200      	movs	r2, #0
 8003004:	2110      	movs	r1, #16
 8003006:	484f      	ldr	r0, [pc, #316]	@ (8003144 <test_GPIO_pins+0x180>)
 8003008:	f002 fb8a 	bl	8005720 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800300c:	200a      	movs	r0, #10
 800300e:	f001 fc21 	bl	8004854 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8003012:	2110      	movs	r1, #16
 8003014:	484b      	ldr	r0, [pc, #300]	@ (8003144 <test_GPIO_pins+0x180>)
 8003016:	f002 fb6b 	bl	80056f0 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1c59      	adds	r1, r3, #1
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <test_GPIO_pins+0x68>
 8003028:	4b47      	ldr	r3, [pc, #284]	@ (8003148 <test_GPIO_pins+0x184>)
 800302a:	e000      	b.n	800302e <test_GPIO_pins+0x6a>
 800302c:	4b47      	ldr	r3, [pc, #284]	@ (800314c <test_GPIO_pins+0x188>)
 800302e:	461a      	mov	r2, r3
 8003030:	4849      	ldr	r0, [pc, #292]	@ (8003158 <test_GPIO_pins+0x194>)
 8003032:	f007 fab3 	bl	800a59c <iprintf>
    for (int i = 0; i < 5; i++) {
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3301      	adds	r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b04      	cmp	r3, #4
 8003040:	dddf      	ble.n	8003002 <test_GPIO_pins+0x3e>
    }
    
    // Force CS HIGH and check multiple times
    printf("  Forcing CS HIGH...\n\r");
 8003042:	4846      	ldr	r0, [pc, #280]	@ (800315c <test_GPIO_pins+0x198>)
 8003044:	f007 faaa 	bl	800a59c <iprintf>
    for (int i = 0; i < 5; i++) {
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	e01c      	b.n	8003088 <test_GPIO_pins+0xc4>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 800304e:	2201      	movs	r2, #1
 8003050:	2110      	movs	r1, #16
 8003052:	483c      	ldr	r0, [pc, #240]	@ (8003144 <test_GPIO_pins+0x180>)
 8003054:	f002 fb64 	bl	8005720 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8003058:	200a      	movs	r0, #10
 800305a:	f001 fbfb 	bl	8004854 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 800305e:	2110      	movs	r1, #16
 8003060:	4838      	ldr	r0, [pc, #224]	@ (8003144 <test_GPIO_pins+0x180>)
 8003062:	f002 fb45 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1c59      	adds	r1, r3, #1
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <test_GPIO_pins+0xb4>
 8003074:	4b34      	ldr	r3, [pc, #208]	@ (8003148 <test_GPIO_pins+0x184>)
 8003076:	e000      	b.n	800307a <test_GPIO_pins+0xb6>
 8003078:	4b34      	ldr	r3, [pc, #208]	@ (800314c <test_GPIO_pins+0x188>)
 800307a:	461a      	mov	r2, r3
 800307c:	4836      	ldr	r0, [pc, #216]	@ (8003158 <test_GPIO_pins+0x194>)
 800307e:	f007 fa8d 	bl	800a59c <iprintf>
    for (int i = 0; i < 5; i++) {
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3301      	adds	r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b04      	cmp	r3, #4
 800308c:	dddf      	ble.n	800304e <test_GPIO_pins+0x8a>
    }
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 800308e:	4834      	ldr	r0, [pc, #208]	@ (8003160 <test_GPIO_pins+0x19c>)
 8003090:	f007 fa84 	bl	800a59c <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8003094:	2110      	movs	r1, #16
 8003096:	4833      	ldr	r0, [pc, #204]	@ (8003164 <test_GPIO_pins+0x1a0>)
 8003098:	f002 fb2a 	bl	80056f0 <HAL_GPIO_ReadPin>
 800309c:	4603      	mov	r3, r0
 800309e:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80030a0:	79bb      	ldrb	r3, [r7, #6]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <test_GPIO_pins+0xe6>
 80030a6:	4b28      	ldr	r3, [pc, #160]	@ (8003148 <test_GPIO_pins+0x184>)
 80030a8:	e000      	b.n	80030ac <test_GPIO_pins+0xe8>
 80030aa:	4b28      	ldr	r3, [pc, #160]	@ (800314c <test_GPIO_pins+0x188>)
 80030ac:	4619      	mov	r1, r3
 80030ae:	482e      	ldr	r0, [pc, #184]	@ (8003168 <test_GPIO_pins+0x1a4>)
 80030b0:	f007 fa74 	bl	800a59c <iprintf>
    
    // Check SPI state
    printf("SPI2 State: ");
 80030b4:	482d      	ldr	r0, [pc, #180]	@ (800316c <test_GPIO_pins+0x1a8>)
 80030b6:	f007 fa71 	bl	800a59c <iprintf>
    if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_READY) {
 80030ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <test_GPIO_pins+0x1ac>)
 80030bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d103      	bne.n	80030ce <test_GPIO_pins+0x10a>
        printf("READY\n\r");
 80030c6:	482b      	ldr	r0, [pc, #172]	@ (8003174 <test_GPIO_pins+0x1b0>)
 80030c8:	f007 fa68 	bl	800a59c <iprintf>
 80030cc:	e02f      	b.n	800312e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY) {
 80030ce:	4b28      	ldr	r3, [pc, #160]	@ (8003170 <test_GPIO_pins+0x1ac>)
 80030d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d103      	bne.n	80030e2 <test_GPIO_pins+0x11e>
        printf("BUSY\n\r");
 80030da:	4827      	ldr	r0, [pc, #156]	@ (8003178 <test_GPIO_pins+0x1b4>)
 80030dc:	f007 fa5e 	bl	800a59c <iprintf>
 80030e0:	e025      	b.n	800312e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX) {
 80030e2:	4b23      	ldr	r3, [pc, #140]	@ (8003170 <test_GPIO_pins+0x1ac>)
 80030e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d103      	bne.n	80030f6 <test_GPIO_pins+0x132>
        printf("BUSY_TX\n\r");
 80030ee:	4823      	ldr	r0, [pc, #140]	@ (800317c <test_GPIO_pins+0x1b8>)
 80030f0:	f007 fa54 	bl	800a59c <iprintf>
 80030f4:	e01b      	b.n	800312e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_RX) {
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <test_GPIO_pins+0x1ac>)
 80030f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d103      	bne.n	800310a <test_GPIO_pins+0x146>
        printf("BUSY_RX\n\r");
 8003102:	481f      	ldr	r0, [pc, #124]	@ (8003180 <test_GPIO_pins+0x1bc>)
 8003104:	f007 fa4a 	bl	800a59c <iprintf>
 8003108:	e011      	b.n	800312e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX_RX) {
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <test_GPIO_pins+0x1ac>)
 800310c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b05      	cmp	r3, #5
 8003114:	d103      	bne.n	800311e <test_GPIO_pins+0x15a>
        printf("BUSY_TX_RX\n\r");
 8003116:	481b      	ldr	r0, [pc, #108]	@ (8003184 <test_GPIO_pins+0x1c0>)
 8003118:	f007 fa40 	bl	800a59c <iprintf>
 800311c:	e007      	b.n	800312e <test_GPIO_pins+0x16a>
    } else {
        printf("ERROR/RESET (%d)\n\r", CC1201_SPI_HANDLE.State);
 800311e:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <test_GPIO_pins+0x1ac>)
 8003120:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003124:	b2db      	uxtb	r3, r3
 8003126:	4619      	mov	r1, r3
 8003128:	4817      	ldr	r0, [pc, #92]	@ (8003188 <test_GPIO_pins+0x1c4>)
 800312a:	f007 fa37 	bl	800a59c <iprintf>
    }
    
    printf("===================\n\r");
 800312e:	4817      	ldr	r0, [pc, #92]	@ (800318c <test_GPIO_pins+0x1c8>)
 8003130:	f007 fa34 	bl	800a59c <iprintf>
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	0800e6bc 	.word	0x0800e6bc
 8003140:	0800e6d4 	.word	0x0800e6d4
 8003144:	58021000 	.word	0x58021000
 8003148:	0800e6f4 	.word	0x0800e6f4
 800314c:	0800e6fc 	.word	0x0800e6fc
 8003150:	0800e700 	.word	0x0800e700
 8003154:	0800e718 	.word	0x0800e718
 8003158:	0800e730 	.word	0x0800e730
 800315c:	0800e748 	.word	0x0800e748
 8003160:	0800e760 	.word	0x0800e760
 8003164:	58020c00 	.word	0x58020c00
 8003168:	0800e770 	.word	0x0800e770
 800316c:	0800e778 	.word	0x0800e778
 8003170:	240000b8 	.word	0x240000b8
 8003174:	0800e788 	.word	0x0800e788
 8003178:	0800e790 	.word	0x0800e790
 800317c:	0800e798 	.word	0x0800e798
 8003180:	0800e7a4 	.word	0x0800e7a4
 8003184:	0800e7b0 	.word	0x0800e7b0
 8003188:	0800e7c0 	.word	0x0800e7c0
 800318c:	0800e7d4 	.word	0x0800e7d4

08003190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003196:	f000 fc59 	bl	8003a4c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800319a:	f001 fac9 	bl	8004730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800319e:	f000 faf1 	bl	8003784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031a2:	f000 fbc3 	bl	800392c <MX_GPIO_Init>
  MX_SPI2_Init();
 80031a6:	f000 fb6b 	bl	8003880 <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f001 f86a 	bl	8004284 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80031b0:	2001      	movs	r0, #1
 80031b2:	f001 f867 	bl	8004284 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80031b6:	2002      	movs	r0, #2
 80031b8:	f001 f864 	bl	8004284 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80031bc:	2101      	movs	r1, #1
 80031be:	2000      	movs	r0, #0
 80031c0:	f001 f954 	bl	800446c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80031c4:	4ba6      	ldr	r3, [pc, #664]	@ (8003460 <main+0x2d0>)
 80031c6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031ca:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80031cc:	4ba4      	ldr	r3, [pc, #656]	@ (8003460 <main+0x2d0>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80031d2:	4ba3      	ldr	r3, [pc, #652]	@ (8003460 <main+0x2d0>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80031d8:	4ba1      	ldr	r3, [pc, #644]	@ (8003460 <main+0x2d0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80031de:	4ba0      	ldr	r3, [pc, #640]	@ (8003460 <main+0x2d0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80031e4:	499e      	ldr	r1, [pc, #632]	@ (8003460 <main+0x2d0>)
 80031e6:	2000      	movs	r0, #0
 80031e8:	f001 f9c4 	bl	8004574 <BSP_COM_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <main+0x66>
  {
    Error_Handler();
 80031f2:	f000 fc6b 	bl	8003acc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80031f6:	489b      	ldr	r0, [pc, #620]	@ (8003464 <main+0x2d4>)
 80031f8:	f007 f9d0 	bl	800a59c <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f001 f8b7 	bl	8004370 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8003202:	2001      	movs	r0, #1
 8003204:	f001 f8b4 	bl	8004370 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8003208:	2002      	movs	r0, #2
 800320a:	f001 f8b1 	bl	8004370 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 800320e:	4896      	ldr	r0, [pc, #600]	@ (8003468 <main+0x2d8>)
 8003210:	f007 f9c4 	bl	800a59c <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8003214:	f7ff fed6 	bl	8002fc4 <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 8003218:	4894      	ldr	r0, [pc, #592]	@ (800346c <main+0x2dc>)
 800321a:	f007 f9bf 	bl	800a59c <iprintf>
  
  // Quick pin configuration check
  printf("QUICK PIN CHECK:\n\r");
 800321e:	4894      	ldr	r0, [pc, #592]	@ (8003470 <main+0x2e0>)
 8003220:	f007 f9bc 	bl	800a59c <iprintf>
  printf("  PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
         (GPIOA->MODER >> 12) & 0x3,
 8003224:	4b93      	ldr	r3, [pc, #588]	@ (8003474 <main+0x2e4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0b1b      	lsrs	r3, r3, #12
  printf("  PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 800322a:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) ? "HIGH" : "LOW");
 800322e:	2140      	movs	r1, #64	@ 0x40
 8003230:	4890      	ldr	r0, [pc, #576]	@ (8003474 <main+0x2e4>)
 8003232:	f002 fa5d 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003236:	4603      	mov	r3, r0
  printf("  PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <main+0xb0>
 800323c:	4b8e      	ldr	r3, [pc, #568]	@ (8003478 <main+0x2e8>)
 800323e:	e000      	b.n	8003242 <main+0xb2>
 8003240:	4b8e      	ldr	r3, [pc, #568]	@ (800347c <main+0x2ec>)
 8003242:	461a      	mov	r2, r3
 8003244:	4621      	mov	r1, r4
 8003246:	488e      	ldr	r0, [pc, #568]	@ (8003480 <main+0x2f0>)
 8003248:	f007 f9a8 	bl	800a59c <iprintf>
  printf("  PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
         (GPIOA->MODER >> 20) & 0x3,
 800324c:	4b89      	ldr	r3, [pc, #548]	@ (8003474 <main+0x2e4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0d1b      	lsrs	r3, r3, #20
  printf("  PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8003252:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) ? "HIGH" : "LOW");
 8003256:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800325a:	4886      	ldr	r0, [pc, #536]	@ (8003474 <main+0x2e4>)
 800325c:	f002 fa48 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003260:	4603      	mov	r3, r0
  printf("  PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <main+0xda>
 8003266:	4b84      	ldr	r3, [pc, #528]	@ (8003478 <main+0x2e8>)
 8003268:	e000      	b.n	800326c <main+0xdc>
 800326a:	4b84      	ldr	r3, [pc, #528]	@ (800347c <main+0x2ec>)
 800326c:	461a      	mov	r2, r3
 800326e:	4621      	mov	r1, r4
 8003270:	4884      	ldr	r0, [pc, #528]	@ (8003484 <main+0x2f4>)
 8003272:	f007 f993 	bl	800a59c <iprintf>
  printf("  PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
         (GPIOB->MODER >> 20) & 0x3,
 8003276:	4b84      	ldr	r3, [pc, #528]	@ (8003488 <main+0x2f8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	0d1b      	lsrs	r3, r3, #20
  printf("  PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 800327c:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) ? "HIGH" : "LOW");
 8003280:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003284:	4880      	ldr	r0, [pc, #512]	@ (8003488 <main+0x2f8>)
 8003286:	f002 fa33 	bl	80056f0 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
  printf("  PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <main+0x104>
 8003290:	4b79      	ldr	r3, [pc, #484]	@ (8003478 <main+0x2e8>)
 8003292:	e000      	b.n	8003296 <main+0x106>
 8003294:	4b79      	ldr	r3, [pc, #484]	@ (800347c <main+0x2ec>)
 8003296:	461a      	mov	r2, r3
 8003298:	4621      	mov	r1, r4
 800329a:	487c      	ldr	r0, [pc, #496]	@ (800348c <main+0x2fc>)
 800329c:	f007 f97e 	bl	800a59c <iprintf>
  printf("  PE4 (CS): MODE=%lu, STATE=%s\n\r", 
         (GPIOE->MODER >> 8) & 0x3,
 80032a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003490 <main+0x300>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0a1b      	lsrs	r3, r3, #8
  printf("  PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 80032a6:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) ? "HIGH" : "LOW");
 80032aa:	2110      	movs	r1, #16
 80032ac:	4878      	ldr	r0, [pc, #480]	@ (8003490 <main+0x300>)
 80032ae:	f002 fa1f 	bl	80056f0 <HAL_GPIO_ReadPin>
 80032b2:	4603      	mov	r3, r0
  printf("  PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <main+0x12c>
 80032b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003478 <main+0x2e8>)
 80032ba:	e000      	b.n	80032be <main+0x12e>
 80032bc:	4b6f      	ldr	r3, [pc, #444]	@ (800347c <main+0x2ec>)
 80032be:	461a      	mov	r2, r3
 80032c0:	4621      	mov	r1, r4
 80032c2:	4874      	ldr	r0, [pc, #464]	@ (8003494 <main+0x304>)
 80032c4:	f007 f96a 	bl	800a59c <iprintf>
  
  // CRITICAL FIX: The pins are in ANALOG mode (3) instead of AF mode (2)
  // This means SPI2 is NOT connected to the pins!
  if (((GPIOA->MODER >> 12) & 0x3) == 3 || ((GPIOA->MODER >> 20) & 0x3) == 3 || ((GPIOB->MODER >> 20) & 0x3) == 3) {
 80032c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003474 <main+0x2e4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0b1b      	lsrs	r3, r3, #12
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d00d      	beq.n	80032f2 <main+0x162>
 80032d6:	4b67      	ldr	r3, [pc, #412]	@ (8003474 <main+0x2e4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0d1b      	lsrs	r3, r3, #20
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d006      	beq.n	80032f2 <main+0x162>
 80032e4:	4b68      	ldr	r3, [pc, #416]	@ (8003488 <main+0x2f8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0d1b      	lsrs	r3, r3, #20
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d105      	bne.n	80032fe <main+0x16e>
    printf("\n⚠️ CRITICAL: SPI pins in ANALOG mode - applying manual fix...\n\r");
 80032f2:	4869      	ldr	r0, [pc, #420]	@ (8003498 <main+0x308>)
 80032f4:	f007 f952 	bl	800a59c <iprintf>
    Manual_SPI2_Pin_Config();
 80032f8:	f000 fbee 	bl	8003ad8 <Manual_SPI2_Pin_Config>
 80032fc:	e002      	b.n	8003304 <main+0x174>
  } else {
    printf("\n✅ SPI pins already in correct AF mode\n\r");
 80032fe:	4867      	ldr	r0, [pc, #412]	@ (800349c <main+0x30c>)
 8003300:	f007 f94c 	bl	800a59c <iprintf>
  }
  
  HAL_Delay(100);
 8003304:	2064      	movs	r0, #100	@ 0x64
 8003306:	f001 faa5 	bl	8004854 <HAL_Delay>
  
  // First, test SPI2 peripheral directly
  printf("Testing SPI2 peripheral directly...\n\r");
 800330a:	4865      	ldr	r0, [pc, #404]	@ (80034a0 <main+0x310>)
 800330c:	f007 f946 	bl	800a59c <iprintf>
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
         CC1201_SPI_HANDLE.State, 
 8003310:	4b64      	ldr	r3, [pc, #400]	@ (80034a4 <main+0x314>)
 8003312:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003316:	b2db      	uxtb	r3, r3
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 8003318:	4618      	mov	r0, r3
 800331a:	4b62      	ldr	r3, [pc, #392]	@ (80034a4 <main+0x314>)
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4b61      	ldr	r3, [pc, #388]	@ (80034a4 <main+0x314>)
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <main+0x314>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	4601      	mov	r1, r0
 800332c:	485e      	ldr	r0, [pc, #376]	@ (80034a8 <main+0x318>)
 800332e:	f007 f935 	bl	800a59c <iprintf>
         CC1201_SPI_HANDLE.Init.Mode,
         CC1201_SPI_HANDLE.Init.DataSize,
         CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  
  // Try to fix SPI2 configuration
  printf("Attempting to reconfigure SPI2...\n\r");
 8003332:	485e      	ldr	r0, [pc, #376]	@ (80034ac <main+0x31c>)
 8003334:	f007 f932 	bl	800a59c <iprintf>
  
  // Deinitialize SPI2
  HAL_SPI_DeInit(&CC1201_SPI_HANDLE);
 8003338:	485a      	ldr	r0, [pc, #360]	@ (80034a4 <main+0x314>)
 800333a:	f005 f995 	bl	8008668 <HAL_SPI_DeInit>
  
  // Reconfigure SPI2 manually
  CC1201_SPI_HANDLE.Instance = SPI2;
 800333e:	4b59      	ldr	r3, [pc, #356]	@ (80034a4 <main+0x314>)
 8003340:	4a5b      	ldr	r2, [pc, #364]	@ (80034b0 <main+0x320>)
 8003342:	601a      	str	r2, [r3, #0]
  CC1201_SPI_HANDLE.Init.Mode = SPI_MODE_MASTER;
 8003344:	4b57      	ldr	r3, [pc, #348]	@ (80034a4 <main+0x314>)
 8003346:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800334a:	605a      	str	r2, [r3, #4]
  CC1201_SPI_HANDLE.Init.Direction = SPI_DIRECTION_2LINES;
 800334c:	4b55      	ldr	r3, [pc, #340]	@ (80034a4 <main+0x314>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  CC1201_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8003352:	4b54      	ldr	r3, [pc, #336]	@ (80034a4 <main+0x314>)
 8003354:	2207      	movs	r2, #7
 8003356:	60da      	str	r2, [r3, #12]
  CC1201_SPI_HANDLE.Init.CLKPolarity = SPI_POLARITY_LOW;    // CPOL = 0
 8003358:	4b52      	ldr	r3, [pc, #328]	@ (80034a4 <main+0x314>)
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]
  CC1201_SPI_HANDLE.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0
 800335e:	4b51      	ldr	r3, [pc, #324]	@ (80034a4 <main+0x314>)
 8003360:	2200      	movs	r2, #0
 8003362:	615a      	str	r2, [r3, #20]
  CC1201_SPI_HANDLE.Init.NSS = SPI_NSS_SOFT;
 8003364:	4b4f      	ldr	r3, [pc, #316]	@ (80034a4 <main+0x314>)
 8003366:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800336a:	619a      	str	r2, [r3, #24]
  CC1201_SPI_HANDLE.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // Slower speed
 800336c:	4b4d      	ldr	r3, [pc, #308]	@ (80034a4 <main+0x314>)
 800336e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003372:	61da      	str	r2, [r3, #28]
  CC1201_SPI_HANDLE.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003374:	4b4b      	ldr	r3, [pc, #300]	@ (80034a4 <main+0x314>)
 8003376:	2200      	movs	r2, #0
 8003378:	621a      	str	r2, [r3, #32]
  CC1201_SPI_HANDLE.Init.TIMode = SPI_TIMODE_DISABLE;
 800337a:	4b4a      	ldr	r3, [pc, #296]	@ (80034a4 <main+0x314>)
 800337c:	2200      	movs	r2, #0
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24
  CC1201_SPI_HANDLE.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003380:	4b48      	ldr	r3, [pc, #288]	@ (80034a4 <main+0x314>)
 8003382:	2200      	movs	r2, #0
 8003384:	629a      	str	r2, [r3, #40]	@ 0x28
  CC1201_SPI_HANDLE.Init.CRCPolynomial = 0x0;
 8003386:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <main+0x314>)
 8003388:	2200      	movs	r2, #0
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c
  CC1201_SPI_HANDLE.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800338c:	4b45      	ldr	r3, [pc, #276]	@ (80034a4 <main+0x314>)
 800338e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003392:	635a      	str	r2, [r3, #52]	@ 0x34
  CC1201_SPI_HANDLE.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003394:	4b43      	ldr	r3, [pc, #268]	@ (80034a4 <main+0x314>)
 8003396:	2200      	movs	r2, #0
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
  CC1201_SPI_HANDLE.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800339a:	4b42      	ldr	r3, [pc, #264]	@ (80034a4 <main+0x314>)
 800339c:	2200      	movs	r2, #0
 800339e:	63da      	str	r2, [r3, #60]	@ 0x3c
  CC1201_SPI_HANDLE.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80033a0:	4b40      	ldr	r3, [pc, #256]	@ (80034a4 <main+0x314>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40
  CC1201_SPI_HANDLE.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80033a6:	4b3f      	ldr	r3, [pc, #252]	@ (80034a4 <main+0x314>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	645a      	str	r2, [r3, #68]	@ 0x44
  CC1201_SPI_HANDLE.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80033ac:	4b3d      	ldr	r3, [pc, #244]	@ (80034a4 <main+0x314>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	649a      	str	r2, [r3, #72]	@ 0x48
  CC1201_SPI_HANDLE.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80033b2:	4b3c      	ldr	r3, [pc, #240]	@ (80034a4 <main+0x314>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  CC1201_SPI_HANDLE.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80033b8:	4b3a      	ldr	r3, [pc, #232]	@ (80034a4 <main+0x314>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	651a      	str	r2, [r3, #80]	@ 0x50
  CC1201_SPI_HANDLE.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80033be:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <main+0x314>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
  CC1201_SPI_HANDLE.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80033c4:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <main+0x314>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	659a      	str	r2, [r3, #88]	@ 0x58
  
  HAL_StatusTypeDef spi_init_result = HAL_SPI_Init(&CC1201_SPI_HANDLE);
 80033ca:	4836      	ldr	r0, [pc, #216]	@ (80034a4 <main+0x314>)
 80033cc:	f005 f828 	bl	8008420 <HAL_SPI_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73bb      	strb	r3, [r7, #14]
  printf("SPI2 reinitialization result: %d\n\r", spi_init_result);
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	4619      	mov	r1, r3
 80033d8:	4836      	ldr	r0, [pc, #216]	@ (80034b4 <main+0x324>)
 80033da:	f007 f8df 	bl	800a59c <iprintf>
  
  if (spi_init_result == HAL_OK) {
 80033de:	7bbb      	ldrb	r3, [r7, #14]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <main+0x278>
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
             CC1201_SPI_HANDLE.State, 
 80033e4:	4b2f      	ldr	r3, [pc, #188]	@ (80034a4 <main+0x314>)
 80033e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80033ea:	b2db      	uxtb	r3, r3
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 80033ec:	4618      	mov	r0, r3
 80033ee:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <main+0x314>)
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	4b2c      	ldr	r3, [pc, #176]	@ (80034a4 <main+0x314>)
 80033f4:	68d9      	ldr	r1, [r3, #12]
 80033f6:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <main+0x314>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	4601      	mov	r1, r0
 8003400:	482d      	ldr	r0, [pc, #180]	@ (80034b8 <main+0x328>)
 8003402:	f007 f8cb 	bl	800a59c <iprintf>
 8003406:	e002      	b.n	800340e <main+0x27e>
             CC1201_SPI_HANDLE.Init.Mode,
             CC1201_SPI_HANDLE.Init.DataSize,
             CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  } else {
      printf("SPI2 reconfiguration failed!\n\r");
 8003408:	482c      	ldr	r0, [pc, #176]	@ (80034bc <main+0x32c>)
 800340a:	f007 f8c7 	bl	800a59c <iprintf>
  }
  
  uint8_t spi_test_tx = 0xAA;
 800340e:	23aa      	movs	r3, #170	@ 0xaa
 8003410:	72bb      	strb	r3, [r7, #10]
  uint8_t spi_test_rx = 0x00;
 8003412:	2300      	movs	r3, #0
 8003414:	727b      	strb	r3, [r7, #9]
  
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // CS Low
 8003416:	2200      	movs	r2, #0
 8003418:	2110      	movs	r1, #16
 800341a:	481d      	ldr	r0, [pc, #116]	@ (8003490 <main+0x300>)
 800341c:	f002 f980 	bl	8005720 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef spi_test_result = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &spi_test_tx, &spi_test_rx, 1, 100);
 8003420:	f107 0209 	add.w	r2, r7, #9
 8003424:	f107 010a 	add.w	r1, r7, #10
 8003428:	2364      	movs	r3, #100	@ 0x64
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2301      	movs	r3, #1
 800342e:	481d      	ldr	r0, [pc, #116]	@ (80034a4 <main+0x314>)
 8003430:	f005 f944 	bl	80086bc <HAL_SPI_TransmitReceive>
 8003434:	4603      	mov	r3, r0
 8003436:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // CS High
 8003438:	2201      	movs	r2, #1
 800343a:	2110      	movs	r1, #16
 800343c:	4814      	ldr	r0, [pc, #80]	@ (8003490 <main+0x300>)
 800343e:	f002 f96f 	bl	8005720 <HAL_GPIO_WritePin>
  
  printf("Direct SPI test - HAL: %d, TX: 0x%02X, RX: 0x%02X\n\r", spi_test_result, spi_test_tx, spi_test_rx);
 8003442:	7b79      	ldrb	r1, [r7, #13]
 8003444:	7abb      	ldrb	r3, [r7, #10]
 8003446:	461a      	mov	r2, r3
 8003448:	7a7b      	ldrb	r3, [r7, #9]
 800344a:	481d      	ldr	r0, [pc, #116]	@ (80034c0 <main+0x330>)
 800344c:	f007 f8a6 	bl	800a59c <iprintf>
  
  if (spi_test_result == HAL_OK) {
 8003450:	7b7b      	ldrb	r3, [r7, #13]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d138      	bne.n	80034c8 <main+0x338>
      printf("SPI2 peripheral working!\n\r");
 8003456:	481b      	ldr	r0, [pc, #108]	@ (80034c4 <main+0x334>)
 8003458:	f007 f8a0 	bl	800a59c <iprintf>
 800345c:	e04b      	b.n	80034f6 <main+0x366>
 800345e:	bf00      	nop
 8003460:	240000a4 	.word	0x240000a4
 8003464:	0800ef38 	.word	0x0800ef38
 8003468:	0800ef54 	.word	0x0800ef54
 800346c:	0800ef84 	.word	0x0800ef84
 8003470:	0800efa8 	.word	0x0800efa8
 8003474:	58020000 	.word	0x58020000
 8003478:	0800e6f4 	.word	0x0800e6f4
 800347c:	0800e6fc 	.word	0x0800e6fc
 8003480:	0800efbc 	.word	0x0800efbc
 8003484:	0800efe0 	.word	0x0800efe0
 8003488:	58020400 	.word	0x58020400
 800348c:	0800f004 	.word	0x0800f004
 8003490:	58021000 	.word	0x58021000
 8003494:	0800f028 	.word	0x0800f028
 8003498:	0800f04c 	.word	0x0800f04c
 800349c:	0800f094 	.word	0x0800f094
 80034a0:	0800f0c0 	.word	0x0800f0c0
 80034a4:	240000b8 	.word	0x240000b8
 80034a8:	0800f0e8 	.word	0x0800f0e8
 80034ac:	0800f130 	.word	0x0800f130
 80034b0:	40003800 	.word	0x40003800
 80034b4:	0800f154 	.word	0x0800f154
 80034b8:	0800f178 	.word	0x0800f178
 80034bc:	0800f1c0 	.word	0x0800f1c0
 80034c0:	0800f1e0 	.word	0x0800f1e0
 80034c4:	0800f214 	.word	0x0800f214
  } else {
      printf("SPI2 peripheral failed! Error: %d\n\r", spi_test_result);
 80034c8:	7b7b      	ldrb	r3, [r7, #13]
 80034ca:	4619      	mov	r1, r3
 80034cc:	488f      	ldr	r0, [pc, #572]	@ (800370c <main+0x57c>)
 80034ce:	f007 f865 	bl	800a59c <iprintf>
      if (spi_test_result == HAL_TIMEOUT) printf("  -> SPI TIMEOUT\n\r");
 80034d2:	7b7b      	ldrb	r3, [r7, #13]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d102      	bne.n	80034de <main+0x34e>
 80034d8:	488d      	ldr	r0, [pc, #564]	@ (8003710 <main+0x580>)
 80034da:	f007 f85f 	bl	800a59c <iprintf>
      if (spi_test_result == HAL_ERROR) printf("  -> SPI ERROR\n\r");
 80034de:	7b7b      	ldrb	r3, [r7, #13]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d102      	bne.n	80034ea <main+0x35a>
 80034e4:	488b      	ldr	r0, [pc, #556]	@ (8003714 <main+0x584>)
 80034e6:	f007 f859 	bl	800a59c <iprintf>
      if (spi_test_result == HAL_BUSY) printf("  -> SPI BUSY\n\r");
 80034ea:	7b7b      	ldrb	r3, [r7, #13]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d102      	bne.n	80034f6 <main+0x366>
 80034f0:	4889      	ldr	r0, [pc, #548]	@ (8003718 <main+0x588>)
 80034f2:	f007 f853 	bl	800a59c <iprintf>
  }
  
  printf("Test 1: Creating status byte variable...\n\r");
 80034f6:	4889      	ldr	r0, [pc, #548]	@ (800371c <main+0x58c>)
 80034f8:	f007 f850 	bl	800a59c <iprintf>
  uint8_t test_status = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	723b      	strb	r3, [r7, #8]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 8003500:	4887      	ldr	r0, [pc, #540]	@ (8003720 <main+0x590>)
 8003502:	f007 f84b 	bl	800a59c <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd f938 	bl	8000780 <CC1201_Nop>
 8003510:	4603      	mov	r3, r0
 8003512:	733b      	strb	r3, [r7, #12]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8003514:	7b3b      	ldrb	r3, [r7, #12]
 8003516:	7a3a      	ldrb	r2, [r7, #8]
 8003518:	4619      	mov	r1, r3
 800351a:	4882      	ldr	r0, [pc, #520]	@ (8003724 <main+0x594>)
 800351c:	f007 f83e 	bl	800a59c <iprintf>
  
  if (nop_result == HAL_OK) {
 8003520:	7b3b      	ldrb	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <main+0x3aa>
      printf("Basic CC1201 communication working!\n\r");
 8003526:	4880      	ldr	r0, [pc, #512]	@ (8003728 <main+0x598>)
 8003528:	f007 f838 	bl	800a59c <iprintf>
      BSP_LED_Off(LED_RED);
 800352c:	2002      	movs	r0, #2
 800352e:	f000 ff49 	bl	80043c4 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8003532:	2000      	movs	r0, #0
 8003534:	f000 ff1c 	bl	8004370 <BSP_LED_On>
 8003538:	e008      	b.n	800354c <main+0x3bc>
  } else {
      printf("CC1201 communication failed!\n\r");
 800353a:	487c      	ldr	r0, [pc, #496]	@ (800372c <main+0x59c>)
 800353c:	f007 f82e 	bl	800a59c <iprintf>
      BSP_LED_Off(LED_GREEN);
 8003540:	2000      	movs	r0, #0
 8003542:	f000 ff3f 	bl	80043c4 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003546:	2002      	movs	r0, #2
 8003548:	f000 ff12 	bl	8004370 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  uint32_t test_counter = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  uint8_t hardware_discovery_done = 0; // Flag to run discovery once
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 8003558:	4875      	ldr	r0, [pc, #468]	@ (8003730 <main+0x5a0>)
 800355a:	f007 f81f 	bl	800a59c <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 800355e:	4b75      	ldr	r3, [pc, #468]	@ (8003734 <main+0x5a4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d12c      	bne.n	80035c0 <main+0x430>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8003566:	4b73      	ldr	r3, [pc, #460]	@ (8003734 <main+0x5a4>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 800356c:	2000      	movs	r0, #0
 800356e:	f000 ff53 	bl	8004418 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 ff50 	bl	8004418 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8003578:	2002      	movs	r0, #2
 800357a:	f000 ff4d 	bl	8004418 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] HARDWARE DISCOVERY MODE - Finding real CC1201 connections...\n\r");
 800357e:	486e      	ldr	r0, [pc, #440]	@ (8003738 <main+0x5a8>)
 8003580:	f007 f80c 	bl	800a59c <iprintf>
      
      // Step 1: Hardware Discovery (most important!)
      printf("\n🔍 STEP 1: SCANNING HARDWARE CONNECTIONS...\n\r");
 8003584:	486d      	ldr	r0, [pc, #436]	@ (800373c <main+0x5ac>)
 8003586:	f007 f809 	bl	800a59c <iprintf>
      Hardware_Discovery_Scan();
 800358a:	f7fe fb61 	bl	8001c50 <Hardware_Discovery_Scan>
      
      // Step 2: Standard diagnostics
      printf("\n🔧 STEP 2: STANDARD DIAGNOSTICS...\n\r");
 800358e:	486c      	ldr	r0, [pc, #432]	@ (8003740 <main+0x5b0>)
 8003590:	f007 f804 	bl	800a59c <iprintf>
      Manual_SPI2_Pin_Config();  // Fix pins first
 8003594:	f000 faa0 	bl	8003ad8 <Manual_SPI2_Pin_Config>
      CC1201_ChipDetectionTest();
 8003598:	f7fd fafc 	bl	8000b94 <CC1201_ChipDetectionTest>
      STM32_PinConfigDiagnostic();
 800359c:	f7fd fe30 	bl	8001200 <STM32_PinConfigDiagnostic>
      CC1201_HardwareDiagnostic();
 80035a0:	f7fd fc68 	bl	8000e74 <CC1201_HardwareDiagnostic>
      
      // Step 3: Alternative pin testing (if needed)
      printf("\n� STEP 3: ALTERNATIVE PIN TESTING...\n\r");
 80035a4:	4867      	ldr	r0, [pc, #412]	@ (8003744 <main+0x5b4>)
 80035a6:	f006 fff9 	bl	800a59c <iprintf>
      Test_Alternative_SPI2_Pins();
 80035aa:	f7fe f937 	bl	800181c <Test_Alternative_SPI2_Pins>
      
      // Step 4: Communication tests
      printf("\n📡 STEP 4: COMMUNICATION TESTS...\n\r");
 80035ae:	4866      	ldr	r0, [pc, #408]	@ (8003748 <main+0x5b8>)
 80035b0:	f006 fff4 	bl	800a59c <iprintf>
      test_cc1201_communication_verification();
 80035b4:	f7ff fbc2 	bl	8002d3c <test_cc1201_communication_verification>
      test_fifo_operations();
 80035b8:	f7ff f89c 	bl	80026f4 <test_fifo_operations>
      test_buffer_readwrite_verification();
 80035bc:	f7ff fa1a 	bl	80029f4 <test_buffer_readwrite_verification>
    }
    
    // AUTOMATIC HARDWARE DISCOVERY: Run after 3 failed tests
    if (!hardware_discovery_done && test_counter >= 3) {
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d12f      	bne.n	8003626 <main+0x496>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d92c      	bls.n	8003626 <main+0x496>
      printf("\n🚨 AUTOMATIC HARDWARE DISCOVERY TRIGGERED 🚨\n\r");
 80035cc:	485f      	ldr	r0, [pc, #380]	@ (800374c <main+0x5bc>)
 80035ce:	f006 ffe5 	bl	800a59c <iprintf>
      printf("After %lu tests with consistent 0x00 responses, running comprehensive scan...\n\r", test_counter);
 80035d2:	6939      	ldr	r1, [r7, #16]
 80035d4:	485e      	ldr	r0, [pc, #376]	@ (8003750 <main+0x5c0>)
 80035d6:	f006 ffe1 	bl	800a59c <iprintf>
      
      // Step 1: Hardware Discovery (most important!)
      printf("\n🔍 STEP 1: SCANNING HARDWARE CONNECTIONS...\n\r");
 80035da:	4858      	ldr	r0, [pc, #352]	@ (800373c <main+0x5ac>)
 80035dc:	f006 ffde 	bl	800a59c <iprintf>
      Hardware_Discovery_Scan();
 80035e0:	f7fe fb36 	bl	8001c50 <Hardware_Discovery_Scan>
      
      // Step 2: Standard diagnostics
      printf("\n🔧 STEP 2: STANDARD DIAGNOSTICS...\n\r");
 80035e4:	4856      	ldr	r0, [pc, #344]	@ (8003740 <main+0x5b0>)
 80035e6:	f006 ffd9 	bl	800a59c <iprintf>
      Manual_SPI2_Pin_Config();  // Fix pins first
 80035ea:	f000 fa75 	bl	8003ad8 <Manual_SPI2_Pin_Config>
      CC1201_ChipDetectionTest();
 80035ee:	f7fd fad1 	bl	8000b94 <CC1201_ChipDetectionTest>
      STM32_PinConfigDiagnostic();
 80035f2:	f7fd fe05 	bl	8001200 <STM32_PinConfigDiagnostic>
      CC1201_HardwareDiagnostic();
 80035f6:	f7fd fc3d 	bl	8000e74 <CC1201_HardwareDiagnostic>
      
      // Step 3: Alternative pin testing (if needed)
      printf("\n🔄 STEP 3: ALTERNATIVE PIN TESTING...\n\r");
 80035fa:	4856      	ldr	r0, [pc, #344]	@ (8003754 <main+0x5c4>)
 80035fc:	f006 ffce 	bl	800a59c <iprintf>
      Test_Alternative_SPI2_Pins();
 8003600:	f7fe f90c 	bl	800181c <Test_Alternative_SPI2_Pins>
      
      // Step 4: Communication tests
      printf("\n📡 STEP 4: COMMUNICATION TESTS...\n\r");
 8003604:	4850      	ldr	r0, [pc, #320]	@ (8003748 <main+0x5b8>)
 8003606:	f006 ffc9 	bl	800a59c <iprintf>
      test_cc1201_communication_verification();
 800360a:	f7ff fb97 	bl	8002d3c <test_cc1201_communication_verification>
      test_fifo_operations();
 800360e:	f7ff f871 	bl	80026f4 <test_fifo_operations>
      test_buffer_readwrite_verification();
 8003612:	f7ff f9ef 	bl	80029f4 <test_buffer_readwrite_verification>
      
      hardware_discovery_done = 1; // Only run once automatically
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      printf("\n✅ AUTOMATIC HARDWARE DISCOVERY COMPLETE\n\r");
 800361a:	484f      	ldr	r0, [pc, #316]	@ (8003758 <main+0x5c8>)
 800361c:	f006 ffbe 	bl	800a59c <iprintf>
      printf("Resuming normal testing...\n\r\n");
 8003620:	484e      	ldr	r0, [pc, #312]	@ (800375c <main+0x5cc>)
 8003622:	f007 f823 	bl	800a66c <puts>
    }
    
    // Simple periodic test every 5 seconds  
    if (HAL_GetTick() - last_test > 5000) {
 8003626:	f001 f909 	bl	800483c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d964      	bls.n	8003702 <main+0x572>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 8003638:	f001 f900 	bl	800483c <HAL_GetTick>
 800363c:	4601      	mov	r1, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	3301      	adds	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4846      	ldr	r0, [pc, #280]	@ (8003760 <main+0x5d0>)
 8003648:	f006 ffa8 	bl	800a59c <iprintf>
      
      uint8_t status_byte = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	71fb      	strb	r3, [r7, #7]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8003650:	1dfb      	adds	r3, r7, #7
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd f894 	bl	8000780 <CC1201_Nop>
 8003658:	4603      	mov	r3, r0
 800365a:	72fb      	strb	r3, [r7, #11]
      
      if (hal_status == HAL_OK) {
 800365c:	7afb      	ldrb	r3, [r7, #11]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d141      	bne.n	80036e6 <main+0x556>
        printf("OK ");
 8003662:	4840      	ldr	r0, [pc, #256]	@ (8003764 <main+0x5d4>)
 8003664:	f006 ff9a 	bl	800a59c <iprintf>
        print_cc1201_status(status_byte, "NOP_STATUS");
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	493f      	ldr	r1, [pc, #252]	@ (8003768 <main+0x5d8>)
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe ffd3 	bl	8002618 <print_cc1201_status>
        BSP_LED_On(LED_GREEN);
 8003672:	2000      	movs	r0, #0
 8003674:	f000 fe7c 	bl	8004370 <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 8003678:	2002      	movs	r0, #2
 800367a:	f000 fea3 	bl	80043c4 <BSP_LED_Off>
        
        // Every 10th test, run comprehensive buffer test
        if (test_counter % 10 == 0) {
 800367e:	6939      	ldr	r1, [r7, #16]
 8003680:	4b3a      	ldr	r3, [pc, #232]	@ (800376c <main+0x5dc>)
 8003682:	fba3 2301 	umull	r2, r3, r3, r1
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	1aca      	subs	r2, r1, r3
 8003692:	2a00      	cmp	r2, #0
 8003694:	d104      	bne.n	80036a0 <main+0x510>
          printf("\n[PERIODIC] Running comprehensive buffer test...\n\r");
 8003696:	4836      	ldr	r0, [pc, #216]	@ (8003770 <main+0x5e0>)
 8003698:	f006 ff80 	bl	800a59c <iprintf>
          test_fifo_operations();
 800369c:	f7ff f82a 	bl	80026f4 <test_fifo_operations>
        }
        
        // Every 20th test, run communication verification
        if (test_counter % 20 == 0) {
 80036a0:	6939      	ldr	r1, [r7, #16]
 80036a2:	4b32      	ldr	r3, [pc, #200]	@ (800376c <main+0x5dc>)
 80036a4:	fba3 2301 	umull	r2, r3, r3, r1
 80036a8:	091a      	lsrs	r2, r3, #4
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	1aca      	subs	r2, r1, r3
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	d104      	bne.n	80036c2 <main+0x532>
          printf("\n[PERIODIC] Running communication verification...\n\r");
 80036b8:	482e      	ldr	r0, [pc, #184]	@ (8003774 <main+0x5e4>)
 80036ba:	f006 ff6f 	bl	800a59c <iprintf>
          test_cc1201_communication_verification();
 80036be:	f7ff fb3d 	bl	8002d3c <test_cc1201_communication_verification>
        }
        
        // Every 30th test, run hardware diagnostic
        if (test_counter % 30 == 0) {
 80036c2:	6939      	ldr	r1, [r7, #16]
 80036c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003778 <main+0x5e8>)
 80036c6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ca:	091a      	lsrs	r2, r3, #4
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	1aca      	subs	r2, r1, r3
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	d110      	bne.n	80036fc <main+0x56c>
          printf("\n[PERIODIC] Running hardware diagnostic...\n\r");
 80036da:	4828      	ldr	r0, [pc, #160]	@ (800377c <main+0x5ec>)
 80036dc:	f006 ff5e 	bl	800a59c <iprintf>
          CC1201_HardwareDiagnostic();
 80036e0:	f7fd fbc8 	bl	8000e74 <CC1201_HardwareDiagnostic>
 80036e4:	e00a      	b.n	80036fc <main+0x56c>
        }
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 80036e6:	7afb      	ldrb	r3, [r7, #11]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4825      	ldr	r0, [pc, #148]	@ (8003780 <main+0x5f0>)
 80036ec:	f006 ff56 	bl	800a59c <iprintf>
        BSP_LED_Off(LED_GREEN);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f000 fe67 	bl	80043c4 <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 80036f6:	2002      	movs	r0, #2
 80036f8:	f000 fe3a 	bl	8004370 <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 80036fc:	f001 f89e 	bl	800483c <HAL_GetTick>
 8003700:	6178      	str	r0, [r7, #20]
    }
    
    HAL_Delay(100);
 8003702:	2064      	movs	r0, #100	@ 0x64
 8003704:	f001 f8a6 	bl	8004854 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8003708:	e729      	b.n	800355e <main+0x3ce>
 800370a:	bf00      	nop
 800370c:	0800f230 	.word	0x0800f230
 8003710:	0800f254 	.word	0x0800f254
 8003714:	0800f268 	.word	0x0800f268
 8003718:	0800f27c 	.word	0x0800f27c
 800371c:	0800f28c 	.word	0x0800f28c
 8003720:	0800f2b8 	.word	0x0800f2b8
 8003724:	0800f2e0 	.word	0x0800f2e0
 8003728:	0800f314 	.word	0x0800f314
 800372c:	0800f33c 	.word	0x0800f33c
 8003730:	0800f35c 	.word	0x0800f35c
 8003734:	240000b4 	.word	0x240000b4
 8003738:	0800f38c 	.word	0x0800f38c
 800373c:	0800f3d8 	.word	0x0800f3d8
 8003740:	0800f40c 	.word	0x0800f40c
 8003744:	0800f434 	.word	0x0800f434
 8003748:	0800f460 	.word	0x0800f460
 800374c:	0800f488 	.word	0x0800f488
 8003750:	0800f4bc 	.word	0x0800f4bc
 8003754:	0800f50c 	.word	0x0800f50c
 8003758:	0800f538 	.word	0x0800f538
 800375c:	0800f568 	.word	0x0800f568
 8003760:	0800f588 	.word	0x0800f588
 8003764:	0800f59c 	.word	0x0800f59c
 8003768:	0800f5a0 	.word	0x0800f5a0
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	0800f5ac 	.word	0x0800f5ac
 8003774:	0800f5e0 	.word	0x0800f5e0
 8003778:	88888889 	.word	0x88888889
 800377c:	0800f614 	.word	0x0800f614
 8003780:	0800f644 	.word	0x0800f644

08003784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b09c      	sub	sp, #112	@ 0x70
 8003788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800378a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378e:	224c      	movs	r2, #76	@ 0x4c
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f007 f84a 	bl	800a82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	2220      	movs	r2, #32
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f007 f844 	bl	800a82c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80037a4:	2002      	movs	r0, #2
 80037a6:	f001 ffef 	bl	8005788 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037aa:	2300      	movs	r3, #0
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4b32      	ldr	r3, [pc, #200]	@ (8003878 <SystemClock_Config+0xf4>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	4a31      	ldr	r2, [pc, #196]	@ (8003878 <SystemClock_Config+0xf4>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80037ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003878 <SystemClock_Config+0xf4>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <SystemClock_Config+0xf8>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80037cc:	4a2b      	ldr	r2, [pc, #172]	@ (800387c <SystemClock_Config+0xf8>)
 80037ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d2:	6193      	str	r3, [r2, #24]
 80037d4:	4b29      	ldr	r3, [pc, #164]	@ (800387c <SystemClock_Config+0xf8>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80037e0:	bf00      	nop
 80037e2:	4b26      	ldr	r3, [pc, #152]	@ (800387c <SystemClock_Config+0xf8>)
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ee:	d1f8      	bne.n	80037e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037f0:	2302      	movs	r3, #2
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037f8:	2340      	movs	r3, #64	@ 0x40
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037fc:	2302      	movs	r3, #2
 80037fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003800:	2300      	movs	r3, #0
 8003802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003804:	2304      	movs	r3, #4
 8003806:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003808:	230a      	movs	r3, #10
 800380a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800380c:	2302      	movs	r3, #2
 800380e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003810:	2302      	movs	r3, #2
 8003812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003814:	2302      	movs	r3, #2
 8003816:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003818:	230c      	movs	r3, #12
 800381a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800381c:	2302      	movs	r3, #2
 800381e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003828:	4618      	mov	r0, r3
 800382a:	f001 ffe7 	bl	80057fc <HAL_RCC_OscConfig>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003834:	f000 f94a 	bl	8003acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003838:	233f      	movs	r3, #63	@ 0x3f
 800383a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f002 fc26 	bl	80060b0 <HAL_RCC_ClockConfig>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800386a:	f000 f92f 	bl	8003acc <Error_Handler>
  }
}
 800386e:	bf00      	nop
 8003870:	3770      	adds	r7, #112	@ 0x70
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	58000400 	.word	0x58000400
 800387c:	58024800 	.word	0x58024800

08003880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003884:	4b27      	ldr	r3, [pc, #156]	@ (8003924 <MX_SPI2_Init+0xa4>)
 8003886:	4a28      	ldr	r2, [pc, #160]	@ (8003928 <MX_SPI2_Init+0xa8>)
 8003888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800388a:	4b26      	ldr	r3, [pc, #152]	@ (8003924 <MX_SPI2_Init+0xa4>)
 800388c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003892:	4b24      	ldr	r3, [pc, #144]	@ (8003924 <MX_SPI2_Init+0xa4>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003898:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <MX_SPI2_Init+0xa4>)
 800389a:	2203      	movs	r2, #3
 800389c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800389e:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80038aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80038b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038be:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c4:	4b17      	ldr	r3, [pc, #92]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80038ca:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038d0:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80038d8:	4b12      	ldr	r3, [pc, #72]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80038de:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80038ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80038fc:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <MX_SPI2_Init+0xa4>)
 80038fe:	2200      	movs	r2, #0
 8003900:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003902:	4b08      	ldr	r3, [pc, #32]	@ (8003924 <MX_SPI2_Init+0xa4>)
 8003904:	2200      	movs	r2, #0
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003908:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <MX_SPI2_Init+0xa4>)
 800390a:	2200      	movs	r2, #0
 800390c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800390e:	4805      	ldr	r0, [pc, #20]	@ (8003924 <MX_SPI2_Init+0xa4>)
 8003910:	f004 fd86 	bl	8008420 <HAL_SPI_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800391a:	f000 f8d7 	bl	8003acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	240000b8 	.word	0x240000b8
 8003928:	40003800 	.word	0x40003800

0800392c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003942:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003948:	4a3d      	ldr	r2, [pc, #244]	@ (8003a40 <MX_GPIO_Init+0x114>)
 800394a:	f043 0310 	orr.w	r3, r3, #16
 800394e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003960:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003966:	4a36      	ldr	r2, [pc, #216]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003970:	4b33      	ldr	r3, [pc, #204]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800397e:	4b30      	ldr	r3, [pc, #192]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003984:	4a2e      	ldr	r2, [pc, #184]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800398a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800398e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a40 <MX_GPIO_Init+0x114>)
 8003990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800399c:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <MX_GPIO_Init+0x114>)
 800399e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039a2:	4a27      	ldr	r2, [pc, #156]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039ac:	4b24      	ldr	r3, [pc, #144]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	4b21      	ldr	r3, [pc, #132]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039de:	4a18      	ldr	r2, [pc, #96]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039e0:	f043 0308 	orr.w	r3, r3, #8
 80039e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039e8:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <MX_GPIO_Init+0x114>)
 80039ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2110      	movs	r1, #16
 80039fa:	4812      	ldr	r0, [pc, #72]	@ (8003a44 <MX_GPIO_Init+0x118>)
 80039fc:	f001 fe90 	bl	8005720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a00:	2310      	movs	r3, #16
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a04:	2301      	movs	r3, #1
 8003a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	4619      	mov	r1, r3
 8003a16:	480b      	ldr	r0, [pc, #44]	@ (8003a44 <MX_GPIO_Init+0x118>)
 8003a18:	f001 fbb0 	bl	800517c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a2a:	f107 031c 	add.w	r3, r7, #28
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <MX_GPIO_Init+0x11c>)
 8003a32:	f001 fba3 	bl	800517c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a36:	bf00      	nop
 8003a38:	3730      	adds	r7, #48	@ 0x30
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	58024400 	.word	0x58024400
 8003a44:	58021000 	.word	0x58021000
 8003a48:	58020c00 	.word	0x58020c00

08003a4c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003a52:	463b      	mov	r3, r7
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003a5e:	f001 f86b 	bl	8004b38 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003a6e:	231f      	movs	r3, #31
 8003a70:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003a72:	2387      	movs	r3, #135	@ 0x87
 8003a74:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003a8e:	463b      	mov	r3, r7
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 f889 	bl	8004ba8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003a96:	2004      	movs	r0, #4
 8003a98:	f001 f866 	bl	8004b68 <HAL_MPU_Enable>

}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <BSP_PB_Callback+0x24>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
  }
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	240000b4 	.word	0x240000b4

08003acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad0:	b672      	cpsid	i
}
 8003ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <Error_Handler+0x8>

08003ad8 <Manual_SPI2_Pin_Config>:

/**
 * @brief Manually configure SPI2 pins with correct alternate function
 * This fixes the issue where pins are in ANALOG mode instead of AF mode
 */
void Manual_SPI2_Pin_Config(void) {
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b091      	sub	sp, #68	@ 0x44
 8003adc:	af00      	add	r7, sp, #0
    printf("\n=== MANUAL SPI2 PIN CONFIGURATION ===\n\r");
 8003ade:	488d      	ldr	r0, [pc, #564]	@ (8003d14 <Manual_SPI2_Pin_Config+0x23c>)
 8003ae0:	f006 fd5c 	bl	800a59c <iprintf>
    
    // Enable GPIO clocks (should already be enabled, but make sure)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aea:	4a8b      	ldr	r2, [pc, #556]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003af4:	4b88      	ldr	r3, [pc, #544]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b02:	4b85      	ldr	r3, [pc, #532]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b08:	4a83      	ldr	r2, [pc, #524]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003b0a:	f043 0302 	orr.w	r3, r3, #2
 8003b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b12:	4b81      	ldr	r3, [pc, #516]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b20:	4b7d      	ldr	r3, [pc, #500]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b26:	4a7c      	ldr	r2, [pc, #496]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003b28:	f043 0310 	orr.w	r3, r3, #16
 8003b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b30:	4b79      	ldr	r3, [pc, #484]	@ (8003d18 <Manual_SPI2_Pin_Config+0x240>)
 8003b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
    
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3e:	f107 0310 	add.w	r3, r7, #16
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	609a      	str	r2, [r3, #8]
 8003b4a:	60da      	str	r2, [r3, #12]
 8003b4c:	611a      	str	r2, [r3, #16]
    
    // 1. Configure PA6 as SPI2_MISO
    printf("1. Configuring PA6 (MISO) for SPI2_AF5...\n\r");
 8003b4e:	4873      	ldr	r0, [pc, #460]	@ (8003d1c <Manual_SPI2_Pin_Config+0x244>)
 8003b50:	f006 fd24 	bl	800a59c <iprintf>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b54:	2340      	movs	r3, #64	@ 0x40
 8003b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Alternate Function Push-Pull
 8003b58:	2302      	movs	r3, #2
 8003b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;              // No pull-up/down
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;    // High speed
 8003b60:	2302      	movs	r3, #2
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;       // AF5 = SPI2
 8003b64:	2305      	movs	r3, #5
 8003b66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	486c      	ldr	r0, [pc, #432]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003b70:	f001 fb04 	bl	800517c <HAL_GPIO_Init>
    
    // Verify PA6 configuration
    uint32_t pa6_mode = (GPIOA->MODER >> 12) & 0x3;
 8003b74:	4b6a      	ldr	r3, [pc, #424]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0b1b      	lsrs	r3, r3, #12
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t pa6_af = (GPIOA->AFR[0] >> 24) & 0xF;
 8003b80:	4b67      	ldr	r3, [pc, #412]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	0e1b      	lsrs	r3, r3, #24
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    printf("    PA6 after config: MODE=%lu (should be 2), AF=%lu (should be 5)\n\r", pa6_mode, pa6_af);
 8003b8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b90:	4864      	ldr	r0, [pc, #400]	@ (8003d24 <Manual_SPI2_Pin_Config+0x24c>)
 8003b92:	f006 fd03 	bl	800a59c <iprintf>
    
    // 2. Configure PA10 as SPI2_MOSI  
    printf("2. Configuring PA10 (MOSI) for SPI2_AF5...\n\r");
 8003b96:	4864      	ldr	r0, [pc, #400]	@ (8003d28 <Manual_SPI2_Pin_Config+0x250>)
 8003b98:	f006 fd00 	bl	800a59c <iprintf>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Alternate Function Push-Pull
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;              // No pull-up/down
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;    // High speed
 8003baa:	2302      	movs	r3, #2
 8003bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;       // AF5 = SPI2
 8003bae:	2305      	movs	r3, #5
 8003bb0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb2:	f107 0310 	add.w	r3, r7, #16
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4859      	ldr	r0, [pc, #356]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003bba:	f001 fadf 	bl	800517c <HAL_GPIO_Init>
    
    // Verify PA10 configuration
    uint32_t pa10_mode = (GPIOA->MODER >> 20) & 0x3;
 8003bbe:	4b58      	ldr	r3, [pc, #352]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	0d1b      	lsrs	r3, r3, #20
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t pa10_af = (GPIOA->AFR[1] >> 8) & 0xF;
 8003bca:	4b55      	ldr	r3, [pc, #340]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	633b      	str	r3, [r7, #48]	@ 0x30
    printf("    PA10 after config: MODE=%lu (should be 2), AF=%lu (should be 5)\n\r", pa10_mode, pa10_af);
 8003bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003bda:	4854      	ldr	r0, [pc, #336]	@ (8003d2c <Manual_SPI2_Pin_Config+0x254>)
 8003bdc:	f006 fcde 	bl	800a59c <iprintf>
    
    // 3. Configure PB10 as SPI2_SCK
    printf("3. Configuring PB10 (SCK) for SPI2_AF5...\n\r");
 8003be0:	4853      	ldr	r0, [pc, #332]	@ (8003d30 <Manual_SPI2_Pin_Config+0x258>)
 8003be2:	f006 fcdb 	bl	800a59c <iprintf>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Alternate Function Push-Pull
 8003bec:	2302      	movs	r3, #2
 8003bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;              // No pull-up/down
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;    // High speed
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;       // AF5 = SPI2
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfc:	f107 0310 	add.w	r3, r7, #16
 8003c00:	4619      	mov	r1, r3
 8003c02:	484c      	ldr	r0, [pc, #304]	@ (8003d34 <Manual_SPI2_Pin_Config+0x25c>)
 8003c04:	f001 faba 	bl	800517c <HAL_GPIO_Init>
    
    // Verify PB10 configuration
    uint32_t pb10_mode = (GPIOB->MODER >> 20) & 0x3;
 8003c08:	4b4a      	ldr	r3, [pc, #296]	@ (8003d34 <Manual_SPI2_Pin_Config+0x25c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0d1b      	lsrs	r3, r3, #20
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t pb10_af = (GPIOB->AFR[1] >> 8) & 0xF;
 8003c14:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <Manual_SPI2_Pin_Config+0x25c>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    printf("    PB10 after config: MODE=%lu (should be 2), AF=%lu (should be 5)\n\r", pb10_mode, pb10_af);
 8003c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c24:	4844      	ldr	r0, [pc, #272]	@ (8003d38 <Manual_SPI2_Pin_Config+0x260>)
 8003c26:	f006 fcb9 	bl	800a59c <iprintf>
    
    // 4. Verify PE4 (CS) is still correctly configured as GPIO output
    printf("4. Verifying PE4 (CS) configuration...\n\r");
 8003c2a:	4844      	ldr	r0, [pc, #272]	@ (8003d3c <Manual_SPI2_Pin_Config+0x264>)
 8003c2c:	f006 fcb6 	bl	800a59c <iprintf>
    uint32_t pe4_mode = (GPIOE->MODER >> 8) & 0x3;
 8003c30:	4b43      	ldr	r3, [pc, #268]	@ (8003d40 <Manual_SPI2_Pin_Config+0x268>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("    PE4 mode: %lu (should be 1 for GPIO output)\n\r", pe4_mode);
 8003c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c3e:	4841      	ldr	r0, [pc, #260]	@ (8003d44 <Manual_SPI2_Pin_Config+0x26c>)
 8003c40:	f006 fcac 	bl	800a59c <iprintf>
    
    // Make sure CS starts HIGH (inactive)
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8003c44:	2201      	movs	r2, #1
 8003c46:	2110      	movs	r1, #16
 8003c48:	483d      	ldr	r0, [pc, #244]	@ (8003d40 <Manual_SPI2_Pin_Config+0x268>)
 8003c4a:	f001 fd69 	bl	8005720 <HAL_GPIO_WritePin>
    printf("    PE4 set to HIGH (CS inactive)\n\r");
 8003c4e:	483e      	ldr	r0, [pc, #248]	@ (8003d48 <Manual_SPI2_Pin_Config+0x270>)
 8003c50:	f006 fca4 	bl	800a59c <iprintf>
    
    // 5. Final verification
    printf("\n5. FINAL PIN STATE VERIFICATION:\n\r");
 8003c54:	483d      	ldr	r0, [pc, #244]	@ (8003d4c <Manual_SPI2_Pin_Config+0x274>)
 8003c56:	f006 fca1 	bl	800a59c <iprintf>
    printf("    PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
           (GPIOA->MODER >> 12) & 0x3,
 8003c5a:	4b31      	ldr	r3, [pc, #196]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	0b1b      	lsrs	r3, r3, #12
    printf("    PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 8003c60:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) ? "HIGH" : "LOW");
 8003c64:	2140      	movs	r1, #64	@ 0x40
 8003c66:	482e      	ldr	r0, [pc, #184]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003c68:	f001 fd42 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003c6c:	4603      	mov	r3, r0
    printf("    PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <Manual_SPI2_Pin_Config+0x19e>
 8003c72:	4b37      	ldr	r3, [pc, #220]	@ (8003d50 <Manual_SPI2_Pin_Config+0x278>)
 8003c74:	e000      	b.n	8003c78 <Manual_SPI2_Pin_Config+0x1a0>
 8003c76:	4b37      	ldr	r3, [pc, #220]	@ (8003d54 <Manual_SPI2_Pin_Config+0x27c>)
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4836      	ldr	r0, [pc, #216]	@ (8003d58 <Manual_SPI2_Pin_Config+0x280>)
 8003c7e:	f006 fc8d 	bl	800a59c <iprintf>
    printf("    PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
           (GPIOA->MODER >> 20) & 0x3,
 8003c82:	4b27      	ldr	r3, [pc, #156]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	0d1b      	lsrs	r3, r3, #20
    printf("    PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8003c88:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) ? "HIGH" : "LOW");
 8003c8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c90:	4823      	ldr	r0, [pc, #140]	@ (8003d20 <Manual_SPI2_Pin_Config+0x248>)
 8003c92:	f001 fd2d 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003c96:	4603      	mov	r3, r0
    printf("    PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <Manual_SPI2_Pin_Config+0x1c8>
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d50 <Manual_SPI2_Pin_Config+0x278>)
 8003c9e:	e000      	b.n	8003ca2 <Manual_SPI2_Pin_Config+0x1ca>
 8003ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8003d54 <Manual_SPI2_Pin_Config+0x27c>)
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	482d      	ldr	r0, [pc, #180]	@ (8003d5c <Manual_SPI2_Pin_Config+0x284>)
 8003ca8:	f006 fc78 	bl	800a59c <iprintf>
    printf("    PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
           (GPIOB->MODER >> 20) & 0x3,
 8003cac:	4b21      	ldr	r3, [pc, #132]	@ (8003d34 <Manual_SPI2_Pin_Config+0x25c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0d1b      	lsrs	r3, r3, #20
    printf("    PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 8003cb2:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) ? "HIGH" : "LOW");
 8003cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003cba:	481e      	ldr	r0, [pc, #120]	@ (8003d34 <Manual_SPI2_Pin_Config+0x25c>)
 8003cbc:	f001 fd18 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003cc0:	4603      	mov	r3, r0
    printf("    PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <Manual_SPI2_Pin_Config+0x1f2>
 8003cc6:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <Manual_SPI2_Pin_Config+0x278>)
 8003cc8:	e000      	b.n	8003ccc <Manual_SPI2_Pin_Config+0x1f4>
 8003cca:	4b22      	ldr	r3, [pc, #136]	@ (8003d54 <Manual_SPI2_Pin_Config+0x27c>)
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4621      	mov	r1, r4
 8003cd0:	4823      	ldr	r0, [pc, #140]	@ (8003d60 <Manual_SPI2_Pin_Config+0x288>)
 8003cd2:	f006 fc63 	bl	800a59c <iprintf>
    printf("    PE4 (CS): MODE=%lu, STATE=%s\n\r", 
           (GPIOE->MODER >> 8) & 0x3,
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <Manual_SPI2_Pin_Config+0x268>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	0a1b      	lsrs	r3, r3, #8
    printf("    PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 8003cdc:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) ? "HIGH" : "LOW");
 8003ce0:	2110      	movs	r1, #16
 8003ce2:	4817      	ldr	r0, [pc, #92]	@ (8003d40 <Manual_SPI2_Pin_Config+0x268>)
 8003ce4:	f001 fd04 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003ce8:	4603      	mov	r3, r0
    printf("    PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <Manual_SPI2_Pin_Config+0x21a>
 8003cee:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <Manual_SPI2_Pin_Config+0x278>)
 8003cf0:	e000      	b.n	8003cf4 <Manual_SPI2_Pin_Config+0x21c>
 8003cf2:	4b18      	ldr	r3, [pc, #96]	@ (8003d54 <Manual_SPI2_Pin_Config+0x27c>)
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	481a      	ldr	r0, [pc, #104]	@ (8003d64 <Manual_SPI2_Pin_Config+0x28c>)
 8003cfa:	f006 fc4f 	bl	800a59c <iprintf>
    
    printf("=== MANUAL PIN CONFIGURATION COMPLETE ===\n\r");
 8003cfe:	481a      	ldr	r0, [pc, #104]	@ (8003d68 <Manual_SPI2_Pin_Config+0x290>)
 8003d00:	f006 fc4c 	bl	800a59c <iprintf>
    
    // Small delay to let pins settle
    HAL_Delay(10);
 8003d04:	200a      	movs	r0, #10
 8003d06:	f000 fda5 	bl	8004854 <HAL_Delay>
}
 8003d0a:	bf00      	nop
 8003d0c:	3744      	adds	r7, #68	@ 0x44
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	0800f6d8 	.word	0x0800f6d8
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	0800f704 	.word	0x0800f704
 8003d20:	58020000 	.word	0x58020000
 8003d24:	0800f730 	.word	0x0800f730
 8003d28:	0800f778 	.word	0x0800f778
 8003d2c:	0800f7a8 	.word	0x0800f7a8
 8003d30:	0800f7f0 	.word	0x0800f7f0
 8003d34:	58020400 	.word	0x58020400
 8003d38:	0800f81c 	.word	0x0800f81c
 8003d3c:	0800f864 	.word	0x0800f864
 8003d40:	58021000 	.word	0x58021000
 8003d44:	0800f890 	.word	0x0800f890
 8003d48:	0800f8c4 	.word	0x0800f8c4
 8003d4c:	0800f8e8 	.word	0x0800f8e8
 8003d50:	0800f90c 	.word	0x0800f90c
 8003d54:	0800f914 	.word	0x0800f914
 8003d58:	0800f918 	.word	0x0800f918
 8003d5c:	0800f940 	.word	0x0800f940
 8003d60:	0800f968 	.word	0x0800f968
 8003d64:	0800f990 	.word	0x0800f990
 8003d68:	0800f9b4 	.word	0x0800f9b4

08003d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_MspInit+0x30>)
 8003d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d78:	4a08      	ldr	r2, [pc, #32]	@ (8003d9c <HAL_MspInit+0x30>)
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_MspInit+0x30>)
 8003d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	58024400 	.word	0x58024400

08003da0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0ba      	sub	sp, #232	@ 0xe8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003db8:	f107 0310 	add.w	r3, r7, #16
 8003dbc:	22c0      	movs	r2, #192	@ 0xc0
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f006 fd33 	bl	800a82c <memset>
  if(hspi->Instance==SPI2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a35      	ldr	r2, [pc, #212]	@ (8003ea0 <HAL_SPI_MspInit+0x100>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d163      	bne.n	8003e98 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003dd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003de0:	f107 0310 	add.w	r3, r7, #16
 8003de4:	4618      	mov	r0, r3
 8003de6:	f002 fcef 	bl	80067c8 <HAL_RCCEx_PeriphCLKConfig>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003df0:	f7ff fe6c 	bl	8003acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003df4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea4 <HAL_SPI_MspInit+0x104>)
 8003df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea4 <HAL_SPI_MspInit+0x104>)
 8003dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e04:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <HAL_SPI_MspInit+0x104>)
 8003e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e12:	4b24      	ldr	r3, [pc, #144]	@ (8003ea4 <HAL_SPI_MspInit+0x104>)
 8003e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e18:	4a22      	ldr	r2, [pc, #136]	@ (8003ea4 <HAL_SPI_MspInit+0x104>)
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e22:	4b20      	ldr	r3, [pc, #128]	@ (8003ea4 <HAL_SPI_MspInit+0x104>)
 8003e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e4a:	2305      	movs	r3, #5
 8003e4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4814      	ldr	r0, [pc, #80]	@ (8003ea8 <HAL_SPI_MspInit+0x108>)
 8003e58:	f001 f990 	bl	800517c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e5c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e76:	2305      	movs	r3, #5
 8003e78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4809      	ldr	r0, [pc, #36]	@ (8003ea8 <HAL_SPI_MspInit+0x108>)
 8003e84:	f001 f97a 	bl	800517c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2024      	movs	r0, #36	@ 0x24
 8003e8e:	f000 fe10 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003e92:	2024      	movs	r0, #36	@ 0x24
 8003e94:	f000 fe27 	bl	8004ae6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003e98:	bf00      	nop
 8003e9a:	37e8      	adds	r7, #232	@ 0xe8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40003800 	.word	0x40003800
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	58020400 	.word	0x58020400

08003eac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee8 <HAL_SPI_MspDeInit+0x3c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10f      	bne.n	8003ede <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_SPI_MspDeInit+0x40>)
 8003ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ec4:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <HAL_SPI_MspDeInit+0x40>)
 8003ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003ece:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003ed2:	4807      	ldr	r0, [pc, #28]	@ (8003ef0 <HAL_SPI_MspDeInit+0x44>)
 8003ed4:	f001 fb02 	bl	80054dc <HAL_GPIO_DeInit>

    /* SPI2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8003ed8:	2024      	movs	r0, #36	@ 0x24
 8003eda:	f000 fe12 	bl	8004b02 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40003800 	.word	0x40003800
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	58020400 	.word	0x58020400

08003ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <NMI_Handler+0x4>

08003efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <HardFault_Handler+0x4>

08003f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <MemManage_Handler+0x4>

08003f0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <BusFault_Handler+0x4>

08003f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <UsageFault_Handler+0x4>

08003f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f4a:	f000 fc63 	bl	8004814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003f58:	4802      	ldr	r0, [pc, #8]	@ (8003f64 <SPI2_IRQHandler+0x10>)
 8003f5a:	f004 fee9 	bl	8008d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	240000b8 	.word	0x240000b8

08003f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f000 faef 	bl	8004550 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e00a      	b.n	8003f9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f88:	f3af 8000 	nop.w
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	60ba      	str	r2, [r7, #8]
 8003f94:	b2ca      	uxtb	r2, r1
 8003f96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	dbf0      	blt.n	8003f88 <_read+0x12>
  }

  return len;
 8003fa6:	687b      	ldr	r3, [r7, #4]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e009      	b.n	8003fd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	60ba      	str	r2, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb34 	bl	8004638 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	dbf1      	blt.n	8003fc2 <_write+0x12>
  }
  return len;
 8003fde:	687b      	ldr	r3, [r7, #4]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_close>:

int _close(int file)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004010:	605a      	str	r2, [r3, #4]
  return 0;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_isatty>:

int _isatty(int file)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004028:	2301      	movs	r3, #1
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004058:	4a14      	ldr	r2, [pc, #80]	@ (80040ac <_sbrk+0x5c>)
 800405a:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <_sbrk+0x60>)
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004064:	4b13      	ldr	r3, [pc, #76]	@ (80040b4 <_sbrk+0x64>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800406c:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <_sbrk+0x64>)
 800406e:	4a12      	ldr	r2, [pc, #72]	@ (80040b8 <_sbrk+0x68>)
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004072:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <_sbrk+0x64>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	429a      	cmp	r2, r3
 800407e:	d207      	bcs.n	8004090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004080:	f006 fc22 	bl	800a8c8 <__errno>
 8004084:	4603      	mov	r3, r0
 8004086:	220c      	movs	r2, #12
 8004088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	e009      	b.n	80040a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004090:	4b08      	ldr	r3, [pc, #32]	@ (80040b4 <_sbrk+0x64>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004096:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <_sbrk+0x64>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	4a05      	ldr	r2, [pc, #20]	@ (80040b4 <_sbrk+0x64>)
 80040a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	24080000 	.word	0x24080000
 80040b0:	00000400 	.word	0x00000400
 80040b4:	24000140 	.word	0x24000140
 80040b8:	24000338 	.word	0x24000338

080040bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040c0:	4b43      	ldr	r3, [pc, #268]	@ (80041d0 <SystemInit+0x114>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	4a42      	ldr	r2, [pc, #264]	@ (80041d0 <SystemInit+0x114>)
 80040c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80040d0:	4b40      	ldr	r3, [pc, #256]	@ (80041d4 <SystemInit+0x118>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d807      	bhi.n	80040ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80040dc:	4b3d      	ldr	r3, [pc, #244]	@ (80041d4 <SystemInit+0x118>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 030f 	bic.w	r3, r3, #15
 80040e4:	4a3b      	ldr	r2, [pc, #236]	@ (80041d4 <SystemInit+0x118>)
 80040e6:	f043 0307 	orr.w	r3, r3, #7
 80040ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80040ec:	4b3a      	ldr	r3, [pc, #232]	@ (80041d8 <SystemInit+0x11c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a39      	ldr	r2, [pc, #228]	@ (80041d8 <SystemInit+0x11c>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040f8:	4b37      	ldr	r3, [pc, #220]	@ (80041d8 <SystemInit+0x11c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80040fe:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <SystemInit+0x11c>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4935      	ldr	r1, [pc, #212]	@ (80041d8 <SystemInit+0x11c>)
 8004104:	4b35      	ldr	r3, [pc, #212]	@ (80041dc <SystemInit+0x120>)
 8004106:	4013      	ands	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800410a:	4b32      	ldr	r3, [pc, #200]	@ (80041d4 <SystemInit+0x118>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <SystemInit+0x118>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 030f 	bic.w	r3, r3, #15
 800411e:	4a2d      	ldr	r2, [pc, #180]	@ (80041d4 <SystemInit+0x118>)
 8004120:	f043 0307 	orr.w	r3, r3, #7
 8004124:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004126:	4b2c      	ldr	r3, [pc, #176]	@ (80041d8 <SystemInit+0x11c>)
 8004128:	2200      	movs	r2, #0
 800412a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800412c:	4b2a      	ldr	r3, [pc, #168]	@ (80041d8 <SystemInit+0x11c>)
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004132:	4b29      	ldr	r3, [pc, #164]	@ (80041d8 <SystemInit+0x11c>)
 8004134:	2200      	movs	r2, #0
 8004136:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004138:	4b27      	ldr	r3, [pc, #156]	@ (80041d8 <SystemInit+0x11c>)
 800413a:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <SystemInit+0x124>)
 800413c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800413e:	4b26      	ldr	r3, [pc, #152]	@ (80041d8 <SystemInit+0x11c>)
 8004140:	4a28      	ldr	r2, [pc, #160]	@ (80041e4 <SystemInit+0x128>)
 8004142:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004144:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <SystemInit+0x11c>)
 8004146:	4a28      	ldr	r2, [pc, #160]	@ (80041e8 <SystemInit+0x12c>)
 8004148:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800414a:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <SystemInit+0x11c>)
 800414c:	2200      	movs	r2, #0
 800414e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004150:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <SystemInit+0x11c>)
 8004152:	4a25      	ldr	r2, [pc, #148]	@ (80041e8 <SystemInit+0x12c>)
 8004154:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004156:	4b20      	ldr	r3, [pc, #128]	@ (80041d8 <SystemInit+0x11c>)
 8004158:	2200      	movs	r2, #0
 800415a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800415c:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <SystemInit+0x11c>)
 800415e:	4a22      	ldr	r2, [pc, #136]	@ (80041e8 <SystemInit+0x12c>)
 8004160:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004162:	4b1d      	ldr	r3, [pc, #116]	@ (80041d8 <SystemInit+0x11c>)
 8004164:	2200      	movs	r2, #0
 8004166:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <SystemInit+0x11c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <SystemInit+0x11c>)
 800416e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004172:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004174:	4b18      	ldr	r3, [pc, #96]	@ (80041d8 <SystemInit+0x11c>)
 8004176:	2200      	movs	r2, #0
 8004178:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800417a:	4b1c      	ldr	r3, [pc, #112]	@ (80041ec <SystemInit+0x130>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <SystemInit+0x134>)
 8004180:	4013      	ands	r3, r2
 8004182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004186:	d202      	bcs.n	800418e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004188:	4b1a      	ldr	r3, [pc, #104]	@ (80041f4 <SystemInit+0x138>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <SystemInit+0x11c>)
 8004190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <SystemInit+0x11c>)
 800419e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80041a2:	4a0d      	ldr	r2, [pc, #52]	@ (80041d8 <SystemInit+0x11c>)
 80041a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041a8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041ac:	4b12      	ldr	r3, [pc, #72]	@ (80041f8 <SystemInit+0x13c>)
 80041ae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80041b2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80041b4:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <SystemInit+0x11c>)
 80041b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80041ba:	4a07      	ldr	r2, [pc, #28]	@ (80041d8 <SystemInit+0x11c>)
 80041bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000ed00 	.word	0xe000ed00
 80041d4:	52002000 	.word	0x52002000
 80041d8:	58024400 	.word	0x58024400
 80041dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80041e0:	02020200 	.word	0x02020200
 80041e4:	01ff0000 	.word	0x01ff0000
 80041e8:	01010280 	.word	0x01010280
 80041ec:	5c001000 	.word	0x5c001000
 80041f0:	ffff0000 	.word	0xffff0000
 80041f4:	51008108 	.word	0x51008108
 80041f8:	52004000 	.word	0x52004000

080041fc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004200:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <ExitRun0Mode+0x2c>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <ExitRun0Mode+0x2c>)
 8004206:	f043 0302 	orr.w	r3, r3, #2
 800420a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800420c:	bf00      	nop
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <ExitRun0Mode+0x2c>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f9      	beq.n	800420e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	58024800 	.word	0x58024800

0800422c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800422c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8004268 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8004230:	f7ff ffe4 	bl	80041fc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004234:	f7ff ff42 	bl	80040bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004238:	480c      	ldr	r0, [pc, #48]	@ (800426c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800423a:	490d      	ldr	r1, [pc, #52]	@ (8004270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800423c:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800423e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004240:	e002      	b.n	8004248 <LoopCopyDataInit>

08004242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004246:	3304      	adds	r3, #4

08004248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800424a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800424c:	d3f9      	bcc.n	8004242 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004250:	4c0a      	ldr	r4, [pc, #40]	@ (800427c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004254:	e001      	b.n	800425a <LoopFillZerobss>

08004256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004258:	3204      	adds	r2, #4

0800425a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800425a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800425c:	d3fb      	bcc.n	8004256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800425e:	f006 fb39 	bl	800a8d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004262:	f7fe ff95 	bl	8003190 <main>
  bx  lr
 8004266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004268:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800426c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004270:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8004274:	0800fa58 	.word	0x0800fa58
  ldr r2, =_sbss
 8004278:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800427c:	24000334 	.word	0x24000334

08004280 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004280:	e7fe      	b.n	8004280 <ADC3_IRQHandler>
	...

08004284 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08c      	sub	sp, #48	@ 0x30
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800428e:	2300      	movs	r3, #0
 8004290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <BSP_LED_Init+0x28>
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d006      	beq.n	80042ac <BSP_LED_Init+0x28>
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d003      	beq.n	80042ac <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042a4:	f06f 0301 	mvn.w	r3, #1
 80042a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042aa:	e055      	b.n	8004358 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80042b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <BSP_LED_Init+0xe0>)
 80042b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004364 <BSP_LED_Init+0xe0>)
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042c2:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <BSP_LED_Init+0xe0>)
 80042c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	e021      	b.n	8004316 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d10f      	bne.n	80042f8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80042d8:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <BSP_LED_Init+0xe0>)
 80042da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042de:	4a21      	ldr	r2, [pc, #132]	@ (8004364 <BSP_LED_Init+0xe0>)
 80042e0:	f043 0310 	orr.w	r3, r3, #16
 80042e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004364 <BSP_LED_Init+0xe0>)
 80042ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	e00e      	b.n	8004316 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80042f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <BSP_LED_Init+0xe0>)
 80042fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042fe:	4a19      	ldr	r2, [pc, #100]	@ (8004364 <BSP_LED_Init+0xe0>)
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004308:	4b16      	ldr	r3, [pc, #88]	@ (8004364 <BSP_LED_Init+0xe0>)
 800430a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <BSP_LED_Init+0xe4>)
 800431a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800431e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004320:	2301      	movs	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004328:	2303      	movs	r3, #3
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	4a0f      	ldr	r2, [pc, #60]	@ (800436c <BSP_LED_Init+0xe8>)
 8004330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004334:	f107 0218 	add.w	r2, r7, #24
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff1e 	bl	800517c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <BSP_LED_Init+0xe8>)
 8004344:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	4a07      	ldr	r2, [pc, #28]	@ (8004368 <BSP_LED_Init+0xe4>)
 800434c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004350:	2200      	movs	r2, #0
 8004352:	4619      	mov	r1, r3
 8004354:	f001 f9e4 	bl	8005720 <HAL_GPIO_WritePin>
  }

  return ret;
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800435a:	4618      	mov	r0, r3
 800435c:	3730      	adds	r7, #48	@ 0x30
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
 8004368:	0800f9f0 	.word	0x0800f9f0
 800436c:	2400000c 	.word	0x2400000c

08004370 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <BSP_LED_On+0x28>
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d006      	beq.n	8004398 <BSP_LED_On+0x28>
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d003      	beq.n	8004398 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004390:	f06f 0301 	mvn.w	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e00b      	b.n	80043b0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	4a08      	ldr	r2, [pc, #32]	@ (80043bc <BSP_LED_On+0x4c>)
 800439c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	4a07      	ldr	r2, [pc, #28]	@ (80043c0 <BSP_LED_On+0x50>)
 80043a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a8:	2201      	movs	r2, #1
 80043aa:	4619      	mov	r1, r3
 80043ac:	f001 f9b8 	bl	8005720 <HAL_GPIO_WritePin>
  }

  return ret;
 80043b0:	68fb      	ldr	r3, [r7, #12]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	2400000c 	.word	0x2400000c
 80043c0:	0800f9f0 	.word	0x0800f9f0

080043c4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <BSP_LED_Off+0x28>
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d006      	beq.n	80043ec <BSP_LED_Off+0x28>
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d003      	beq.n	80043ec <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043e4:	f06f 0301 	mvn.w	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e00b      	b.n	8004404 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	4a08      	ldr	r2, [pc, #32]	@ (8004410 <BSP_LED_Off+0x4c>)
 80043f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	4a07      	ldr	r2, [pc, #28]	@ (8004414 <BSP_LED_Off+0x50>)
 80043f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043fc:	2200      	movs	r2, #0
 80043fe:	4619      	mov	r1, r3
 8004400:	f001 f98e 	bl	8005720 <HAL_GPIO_WritePin>
  }

  return ret;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	2400000c 	.word	0x2400000c
 8004414:	0800f9f0 	.word	0x0800f9f0

08004418 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <BSP_LED_Toggle+0x28>
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d006      	beq.n	8004440 <BSP_LED_Toggle+0x28>
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d003      	beq.n	8004440 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004438:	f06f 0301 	mvn.w	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e00b      	b.n	8004458 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <BSP_LED_Toggle+0x4c>)
 8004444:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	4907      	ldr	r1, [pc, #28]	@ (8004468 <BSP_LED_Toggle+0x50>)
 800444c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f001 f97d 	bl	8005752 <HAL_GPIO_TogglePin>
  }

  return ret;
 8004458:	68fb      	ldr	r3, [r7, #12]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	2400000c 	.word	0x2400000c
 8004468:	0800f9f0 	.word	0x0800f9f0

0800446c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	460a      	mov	r2, r1
 8004476:	71fb      	strb	r3, [r7, #7]
 8004478:	4613      	mov	r3, r2
 800447a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800447c:	4b2e      	ldr	r3, [pc, #184]	@ (8004538 <BSP_PB_Init+0xcc>)
 800447e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004482:	4a2d      	ldr	r2, [pc, #180]	@ (8004538 <BSP_PB_Init+0xcc>)
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800448c:	4b2a      	ldr	r3, [pc, #168]	@ (8004538 <BSP_PB_Init+0xcc>)
 800448e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800449a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800449e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80044a0:	2302      	movs	r3, #2
 80044a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80044a4:	2302      	movs	r3, #2
 80044a6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80044a8:	79bb      	ldrb	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <BSP_PB_Init+0xd0>)
 80044b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ba:	f107 020c 	add.w	r2, r7, #12
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fe5b 	bl	800517c <HAL_GPIO_Init>
 80044c6:	e031      	b.n	800452c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80044c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80044cc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	4a1a      	ldr	r2, [pc, #104]	@ (800453c <BSP_PB_Init+0xd0>)
 80044d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d6:	f107 020c 	add.w	r2, r7, #12
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fe4d 	bl	800517c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <BSP_PB_Init+0xd4>)
 80044e8:	441a      	add	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	4915      	ldr	r1, [pc, #84]	@ (8004544 <BSP_PB_Init+0xd8>)
 80044ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f000 fdfc 	bl	80050f2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <BSP_PB_Init+0xd4>)
 8004500:	1898      	adds	r0, r3, r2
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4a10      	ldr	r2, [pc, #64]	@ (8004548 <BSP_PB_Init+0xdc>)
 8004506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450a:	461a      	mov	r2, r3
 800450c:	2100      	movs	r1, #0
 800450e:	f000 fdd1 	bl	80050b4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004512:	2028      	movs	r0, #40	@ 0x28
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	4a0d      	ldr	r2, [pc, #52]	@ (800454c <BSP_PB_Init+0xe0>)
 8004518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451c:	2200      	movs	r2, #0
 800451e:	4619      	mov	r1, r3
 8004520:	f000 fac7 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004524:	2328      	movs	r3, #40	@ 0x28
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fadd 	bl	8004ae6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
 800453c:	24000018 	.word	0x24000018
 8004540:	24000144 	.word	0x24000144
 8004544:	0800f9f8 	.word	0x0800f9f8
 8004548:	2400001c 	.word	0x2400001c
 800454c:	24000020 	.word	0x24000020

08004550 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <BSP_PB_IRQHandler+0x20>)
 8004560:	4413      	add	r3, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fdda 	bl	800511c <HAL_EXTI_IRQHandler>
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	24000144 	.word	0x24000144

08004574 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800458a:	f06f 0301 	mvn.w	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e018      	b.n	80045c4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	2294      	movs	r2, #148	@ 0x94
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <BSP_COM_Init+0x5c>)
 800459c:	4413      	add	r3, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f86e 	bl	8004680 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	2294      	movs	r2, #148	@ 0x94
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	4a08      	ldr	r2, [pc, #32]	@ (80045d0 <BSP_COM_Init+0x5c>)
 80045ae:	4413      	add	r3, r2
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f80e 	bl	80045d4 <MX_USART3_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80045be:	f06f 0303 	mvn.w	r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80045c4:	68fb      	ldr	r3, [r7, #12]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2400014c 	.word	0x2400014c

080045d4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80045de:	4b15      	ldr	r3, [pc, #84]	@ (8004634 <MX_USART3_Init+0x60>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	220c      	movs	r2, #12
 80045f2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	895b      	ldrh	r3, [r3, #10]
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	891b      	ldrh	r3, [r3, #8]
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	899b      	ldrh	r3, [r3, #12]
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004620:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f004 fe87 	bl	8009336 <HAL_UART_Init>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	24000008 	.word	0x24000008

08004638 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004640:	4b09      	ldr	r3, [pc, #36]	@ (8004668 <__io_putchar+0x30>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	2394      	movs	r3, #148	@ 0x94
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	4a07      	ldr	r2, [pc, #28]	@ (800466c <__io_putchar+0x34>)
 800464e:	1898      	adds	r0, r3, r2
 8004650:	1d39      	adds	r1, r7, #4
 8004652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004656:	2201      	movs	r2, #1
 8004658:	f004 fec7 	bl	80093ea <HAL_UART_Transmit>
  return ch;
 800465c:	687b      	ldr	r3, [r7, #4]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	240001e0 	.word	0x240001e0
 800466c:	2400014c 	.word	0x2400014c

08004670 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004674:	2000      	movs	r0, #0
 8004676:	f7ff fa15 	bl	8003aa4 <BSP_PB_Callback>
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	@ 0x28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004688:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <COM1_MspInit+0xa8>)
 800468a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800468e:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <COM1_MspInit+0xa8>)
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004698:	4b23      	ldr	r3, [pc, #140]	@ (8004728 <COM1_MspInit+0xa8>)
 800469a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <COM1_MspInit+0xa8>)
 80046a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004728 <COM1_MspInit+0xa8>)
 80046ae:	f043 0308 	orr.w	r3, r3, #8
 80046b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004728 <COM1_MspInit+0xa8>)
 80046b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80046c4:	4b18      	ldr	r3, [pc, #96]	@ (8004728 <COM1_MspInit+0xa8>)
 80046c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046ca:	4a17      	ldr	r2, [pc, #92]	@ (8004728 <COM1_MspInit+0xa8>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046d4:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <COM1_MspInit+0xa8>)
 80046d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80046e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ec:	2302      	movs	r3, #2
 80046ee:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80046f0:	2301      	movs	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80046f4:	2307      	movs	r3, #7
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4619      	mov	r1, r3
 80046fe:	480b      	ldr	r0, [pc, #44]	@ (800472c <COM1_MspInit+0xac>)
 8004700:	f000 fd3c 	bl	800517c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8004704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004708:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800470a:	2302      	movs	r3, #2
 800470c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800470e:	2307      	movs	r3, #7
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	4619      	mov	r1, r3
 8004718:	4804      	ldr	r0, [pc, #16]	@ (800472c <COM1_MspInit+0xac>)
 800471a:	f000 fd2f 	bl	800517c <HAL_GPIO_Init>
}
 800471e:	bf00      	nop
 8004720:	3728      	adds	r7, #40	@ 0x28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	58024400 	.word	0x58024400
 800472c:	58020c00 	.word	0x58020c00

08004730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004736:	2003      	movs	r0, #3
 8004738:	f000 f9b0 	bl	8004a9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800473c:	f001 fe6e 	bl	800641c <HAL_RCC_GetSysClockFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <HAL_Init+0x68>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	4913      	ldr	r1, [pc, #76]	@ (800479c <HAL_Init+0x6c>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800475a:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_Init+0x68>)
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	4a0e      	ldr	r2, [pc, #56]	@ (800479c <HAL_Init+0x6c>)
 8004764:	5cd3      	ldrb	r3, [r2, r3]
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	4a0b      	ldr	r2, [pc, #44]	@ (80047a0 <HAL_Init+0x70>)
 8004772:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004774:	4a0b      	ldr	r2, [pc, #44]	@ (80047a4 <HAL_Init+0x74>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800477a:	2000      	movs	r0, #0
 800477c:	f000 f814 	bl	80047a8 <HAL_InitTick>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e002      	b.n	8004790 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800478a:	f7ff faef 	bl	8003d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	58024400 	.word	0x58024400
 800479c:	0800f9e0 	.word	0x0800f9e0
 80047a0:	24000004 	.word	0x24000004
 80047a4:	24000000 	.word	0x24000000

080047a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80047b0:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <HAL_InitTick+0x60>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e021      	b.n	8004800 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <HAL_InitTick+0x64>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <HAL_InitTick+0x60>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f9a3 	bl	8004b1e <HAL_SYSTICK_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e00e      	b.n	8004800 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b0f      	cmp	r3, #15
 80047e6:	d80a      	bhi.n	80047fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047e8:	2200      	movs	r2, #0
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	f000 f95f 	bl	8004ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047f4:	4a06      	ldr	r2, [pc, #24]	@ (8004810 <HAL_InitTick+0x68>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	24000028 	.word	0x24000028
 800480c:	24000000 	.word	0x24000000
 8004810:	24000024 	.word	0x24000024

08004814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004818:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_IncTick+0x20>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_IncTick+0x24>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4413      	add	r3, r2
 8004824:	4a04      	ldr	r2, [pc, #16]	@ (8004838 <HAL_IncTick+0x24>)
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	24000028 	.word	0x24000028
 8004838:	240001e4 	.word	0x240001e4

0800483c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return uwTick;
 8004840:	4b03      	ldr	r3, [pc, #12]	@ (8004850 <HAL_GetTick+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	240001e4 	.word	0x240001e4

08004854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7ff ffee 	bl	800483c <HAL_GetTick>
 8004860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d005      	beq.n	800487a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800486e:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <HAL_Delay+0x44>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800487a:	bf00      	nop
 800487c:	f7ff ffde 	bl	800483c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d8f7      	bhi.n	800487c <HAL_Delay+0x28>
  {
  }
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	24000028 	.word	0x24000028

0800489c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80048a0:	4b03      	ldr	r3, [pc, #12]	@ (80048b0 <HAL_GetREVID+0x14>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	0c1b      	lsrs	r3, r3, #16
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	5c001000 	.word	0x5c001000

080048b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <__NVIC_SetPriorityGrouping+0x40>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d0:	4013      	ands	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048e2:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <__NVIC_SetPriorityGrouping+0x40>)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	60d3      	str	r3, [r2, #12]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000ed00 	.word	0xe000ed00
 80048f8:	05fa0000 	.word	0x05fa0000

080048fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004900:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <__NVIC_GetPriorityGrouping+0x18>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 0307 	and.w	r3, r3, #7
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004926:	2b00      	cmp	r3, #0
 8004928:	db0b      	blt.n	8004942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	4907      	ldr	r1, [pc, #28]	@ (8004950 <__NVIC_EnableIRQ+0x38>)
 8004932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2001      	movs	r0, #1
 800493a:	fa00 f202 	lsl.w	r2, r0, r2
 800493e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e100 	.word	0xe000e100

08004954 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800495e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	db12      	blt.n	800498c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	f003 021f 	and.w	r2, r3, #31
 800496c:	490a      	ldr	r1, [pc, #40]	@ (8004998 <__NVIC_DisableIRQ+0x44>)
 800496e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2001      	movs	r0, #1
 8004976:	fa00 f202 	lsl.w	r2, r0, r2
 800497a:	3320      	adds	r3, #32
 800497c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004980:	f3bf 8f4f 	dsb	sy
}
 8004984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004986:	f3bf 8f6f 	isb	sy
}
 800498a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000e100 	.word	0xe000e100

0800499c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db0a      	blt.n	80049c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	490c      	ldr	r1, [pc, #48]	@ (80049e8 <__NVIC_SetPriority+0x4c>)
 80049b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ba:	0112      	lsls	r2, r2, #4
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	440b      	add	r3, r1
 80049c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049c4:	e00a      	b.n	80049dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4908      	ldr	r1, [pc, #32]	@ (80049ec <__NVIC_SetPriority+0x50>)
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	3b04      	subs	r3, #4
 80049d4:	0112      	lsls	r2, r2, #4
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	440b      	add	r3, r1
 80049da:	761a      	strb	r2, [r3, #24]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000e100 	.word	0xe000e100
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	@ 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f1c3 0307 	rsb	r3, r3, #7
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf28      	it	cs
 8004a0e:	2304      	movcs	r3, #4
 8004a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d902      	bls.n	8004a20 <NVIC_EncodePriority+0x30>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3b03      	subs	r3, #3
 8004a1e:	e000      	b.n	8004a22 <NVIC_EncodePriority+0x32>
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	401a      	ands	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a38:	f04f 31ff 	mov.w	r1, #4294967295
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	43d9      	mvns	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a48:	4313      	orrs	r3, r2
         );
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a68:	d301      	bcc.n	8004a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00f      	b.n	8004a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a98 <SysTick_Config+0x40>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a76:	210f      	movs	r1, #15
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f7ff ff8e 	bl	800499c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <SysTick_Config+0x40>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a86:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <SysTick_Config+0x40>)
 8004a88:	2207      	movs	r2, #7
 8004a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	e000e010 	.word	0xe000e010

08004a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff05 	bl	80048b4 <__NVIC_SetPriorityGrouping>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ac0:	f7ff ff1c 	bl	80048fc <__NVIC_GetPriorityGrouping>
 8004ac4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	6978      	ldr	r0, [r7, #20]
 8004acc:	f7ff ff90 	bl	80049f0 <NVIC_EncodePriority>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff ff5f 	bl	800499c <__NVIC_SetPriority>
}
 8004ade:	bf00      	nop
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	4603      	mov	r3, r0
 8004aee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff ff0f 	bl	8004918 <__NVIC_EnableIRQ>
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	4603      	mov	r3, r0
 8004b0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff1f 	bl	8004954 <__NVIC_DisableIRQ>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ff96 	bl	8004a58 <SysTick_Config>
 8004b2c:	4603      	mov	r3, r0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004b3c:	f3bf 8f5f 	dmb	sy
}
 8004b40:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b42:	4b07      	ldr	r3, [pc, #28]	@ (8004b60 <HAL_MPU_Disable+0x28>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	4a06      	ldr	r2, [pc, #24]	@ (8004b60 <HAL_MPU_Disable+0x28>)
 8004b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b4c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_MPU_Disable+0x2c>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	605a      	str	r2, [r3, #4]
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	e000ed00 	.word	0xe000ed00
 8004b64:	e000ed90 	.word	0xe000ed90

08004b68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b70:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba0 <HAL_MPU_Enable+0x38>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <HAL_MPU_Enable+0x3c>)
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ba4 <HAL_MPU_Enable+0x3c>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b84:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b86:	f3bf 8f4f 	dsb	sy
}
 8004b8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b8c:	f3bf 8f6f 	isb	sy
}
 8004b90:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000ed90 	.word	0xe000ed90
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	785a      	ldrb	r2, [r3, #1]
 8004bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c24 <HAL_MPU_ConfigRegion+0x7c>)
 8004bb6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c24 <HAL_MPU_ConfigRegion+0x7c>)
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	@ (8004c24 <HAL_MPU_ConfigRegion+0x7c>)
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004bc4:	4a17      	ldr	r2, [pc, #92]	@ (8004c24 <HAL_MPU_ConfigRegion+0x7c>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7b1b      	ldrb	r3, [r3, #12]
 8004bd0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	7adb      	ldrb	r3, [r3, #11]
 8004bd6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7a9b      	ldrb	r3, [r3, #10]
 8004bde:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004be0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	7b5b      	ldrb	r3, [r3, #13]
 8004be6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004be8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	7b9b      	ldrb	r3, [r3, #14]
 8004bee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	7bdb      	ldrb	r3, [r3, #15]
 8004bf6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	7a5b      	ldrb	r3, [r3, #9]
 8004bfe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	7a1b      	ldrb	r3, [r3, #8]
 8004c06:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c08:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c10:	4a04      	ldr	r2, [pc, #16]	@ (8004c24 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c12:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c14:	6113      	str	r3, [r2, #16]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000ed90 	.word	0xe000ed90

08004c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e237      	b.n	80050aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d004      	beq.n	8004c50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2280      	movs	r2, #128	@ 0x80
 8004c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e22c      	b.n	80050aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5c      	ldr	r2, [pc, #368]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1a0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d04a      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8004dcc <HAL_DMA_Abort_IT+0x1a4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d045      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a59      	ldr	r2, [pc, #356]	@ (8004dd0 <HAL_DMA_Abort_IT+0x1a8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d040      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a58      	ldr	r2, [pc, #352]	@ (8004dd4 <HAL_DMA_Abort_IT+0x1ac>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d03b      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a56      	ldr	r2, [pc, #344]	@ (8004dd8 <HAL_DMA_Abort_IT+0x1b0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d036      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a55      	ldr	r2, [pc, #340]	@ (8004ddc <HAL_DMA_Abort_IT+0x1b4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d031      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a53      	ldr	r2, [pc, #332]	@ (8004de0 <HAL_DMA_Abort_IT+0x1b8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d02c      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a52      	ldr	r2, [pc, #328]	@ (8004de4 <HAL_DMA_Abort_IT+0x1bc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d027      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a50      	ldr	r2, [pc, #320]	@ (8004de8 <HAL_DMA_Abort_IT+0x1c0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d022      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4f      	ldr	r2, [pc, #316]	@ (8004dec <HAL_DMA_Abort_IT+0x1c4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8004df0 <HAL_DMA_Abort_IT+0x1c8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8004df4 <HAL_DMA_Abort_IT+0x1cc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8004df8 <HAL_DMA_Abort_IT+0x1d0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a49      	ldr	r2, [pc, #292]	@ (8004dfc <HAL_DMA_Abort_IT+0x1d4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a47      	ldr	r2, [pc, #284]	@ (8004e00 <HAL_DMA_Abort_IT+0x1d8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xc8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a46      	ldr	r2, [pc, #280]	@ (8004e04 <HAL_DMA_Abort_IT+0x1dc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d101      	bne.n	8004cf4 <HAL_DMA_Abort_IT+0xcc>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <HAL_DMA_Abort_IT+0xce>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8086 	beq.w	8004e08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1a0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d04a      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2e      	ldr	r2, [pc, #184]	@ (8004dcc <HAL_DMA_Abort_IT+0x1a4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d045      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd0 <HAL_DMA_Abort_IT+0x1a8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d040      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd4 <HAL_DMA_Abort_IT+0x1ac>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d03b      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a29      	ldr	r2, [pc, #164]	@ (8004dd8 <HAL_DMA_Abort_IT+0x1b0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d036      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a28      	ldr	r2, [pc, #160]	@ (8004ddc <HAL_DMA_Abort_IT+0x1b4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d031      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a26      	ldr	r2, [pc, #152]	@ (8004de0 <HAL_DMA_Abort_IT+0x1b8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d02c      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a25      	ldr	r2, [pc, #148]	@ (8004de4 <HAL_DMA_Abort_IT+0x1bc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d027      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a23      	ldr	r2, [pc, #140]	@ (8004de8 <HAL_DMA_Abort_IT+0x1c0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a22      	ldr	r2, [pc, #136]	@ (8004dec <HAL_DMA_Abort_IT+0x1c4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a20      	ldr	r2, [pc, #128]	@ (8004df0 <HAL_DMA_Abort_IT+0x1c8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1f      	ldr	r2, [pc, #124]	@ (8004df4 <HAL_DMA_Abort_IT+0x1cc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1d      	ldr	r2, [pc, #116]	@ (8004df8 <HAL_DMA_Abort_IT+0x1d0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dfc <HAL_DMA_Abort_IT+0x1d4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1a      	ldr	r2, [pc, #104]	@ (8004e00 <HAL_DMA_Abort_IT+0x1d8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x17c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a19      	ldr	r2, [pc, #100]	@ (8004e04 <HAL_DMA_Abort_IT+0x1dc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <HAL_DMA_Abort_IT+0x18e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e178      	b.n	80050a8 <HAL_DMA_Abort_IT+0x480>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e16f      	b.n	80050a8 <HAL_DMA_Abort_IT+0x480>
 8004dc8:	40020010 	.word	0x40020010
 8004dcc:	40020028 	.word	0x40020028
 8004dd0:	40020040 	.word	0x40020040
 8004dd4:	40020058 	.word	0x40020058
 8004dd8:	40020070 	.word	0x40020070
 8004ddc:	40020088 	.word	0x40020088
 8004de0:	400200a0 	.word	0x400200a0
 8004de4:	400200b8 	.word	0x400200b8
 8004de8:	40020410 	.word	0x40020410
 8004dec:	40020428 	.word	0x40020428
 8004df0:	40020440 	.word	0x40020440
 8004df4:	40020458 	.word	0x40020458
 8004df8:	40020470 	.word	0x40020470
 8004dfc:	40020488 	.word	0x40020488
 8004e00:	400204a0 	.word	0x400204a0
 8004e04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 020e 	bic.w	r2, r2, #14
 8004e16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6c      	ldr	r2, [pc, #432]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3a8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d04a      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3ac>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d045      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a69      	ldr	r2, [pc, #420]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3b0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d040      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a68      	ldr	r2, [pc, #416]	@ (8004fdc <HAL_DMA_Abort_IT+0x3b4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d03b      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a66      	ldr	r2, [pc, #408]	@ (8004fe0 <HAL_DMA_Abort_IT+0x3b8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d036      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a65      	ldr	r2, [pc, #404]	@ (8004fe4 <HAL_DMA_Abort_IT+0x3bc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d031      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a63      	ldr	r2, [pc, #396]	@ (8004fe8 <HAL_DMA_Abort_IT+0x3c0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02c      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a62      	ldr	r2, [pc, #392]	@ (8004fec <HAL_DMA_Abort_IT+0x3c4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d027      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a60      	ldr	r2, [pc, #384]	@ (8004ff0 <HAL_DMA_Abort_IT+0x3c8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a5f      	ldr	r2, [pc, #380]	@ (8004ff4 <HAL_DMA_Abort_IT+0x3cc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a5d      	ldr	r2, [pc, #372]	@ (8004ff8 <HAL_DMA_Abort_IT+0x3d0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ffc <HAL_DMA_Abort_IT+0x3d4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a5a      	ldr	r2, [pc, #360]	@ (8005000 <HAL_DMA_Abort_IT+0x3d8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a59      	ldr	r2, [pc, #356]	@ (8005004 <HAL_DMA_Abort_IT+0x3dc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a57      	ldr	r2, [pc, #348]	@ (8005008 <HAL_DMA_Abort_IT+0x3e0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x290>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a56      	ldr	r2, [pc, #344]	@ (800500c <HAL_DMA_Abort_IT+0x3e4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <HAL_DMA_Abort_IT+0x2a2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e007      	b.n	8004eda <HAL_DMA_Abort_IT+0x2b2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a3c      	ldr	r2, [pc, #240]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3a8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d072      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3ac>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d06d      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a39      	ldr	r2, [pc, #228]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3b0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d068      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a37      	ldr	r2, [pc, #220]	@ (8004fdc <HAL_DMA_Abort_IT+0x3b4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d063      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a36      	ldr	r2, [pc, #216]	@ (8004fe0 <HAL_DMA_Abort_IT+0x3b8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d05e      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a34      	ldr	r2, [pc, #208]	@ (8004fe4 <HAL_DMA_Abort_IT+0x3bc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d059      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a33      	ldr	r2, [pc, #204]	@ (8004fe8 <HAL_DMA_Abort_IT+0x3c0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d054      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a31      	ldr	r2, [pc, #196]	@ (8004fec <HAL_DMA_Abort_IT+0x3c4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d04f      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a30      	ldr	r2, [pc, #192]	@ (8004ff0 <HAL_DMA_Abort_IT+0x3c8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d04a      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff4 <HAL_DMA_Abort_IT+0x3cc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d045      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff8 <HAL_DMA_Abort_IT+0x3d0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d040      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ffc <HAL_DMA_Abort_IT+0x3d4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d03b      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2a      	ldr	r2, [pc, #168]	@ (8005000 <HAL_DMA_Abort_IT+0x3d8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d036      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a28      	ldr	r2, [pc, #160]	@ (8005004 <HAL_DMA_Abort_IT+0x3dc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d031      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a27      	ldr	r2, [pc, #156]	@ (8005008 <HAL_DMA_Abort_IT+0x3e0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d02c      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a25      	ldr	r2, [pc, #148]	@ (800500c <HAL_DMA_Abort_IT+0x3e4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d027      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a24      	ldr	r2, [pc, #144]	@ (8005010 <HAL_DMA_Abort_IT+0x3e8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d022      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a22      	ldr	r2, [pc, #136]	@ (8005014 <HAL_DMA_Abort_IT+0x3ec>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01d      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a21      	ldr	r2, [pc, #132]	@ (8005018 <HAL_DMA_Abort_IT+0x3f0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d018      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800501c <HAL_DMA_Abort_IT+0x3f4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <HAL_DMA_Abort_IT+0x3f8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00e      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005024 <HAL_DMA_Abort_IT+0x3fc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1b      	ldr	r2, [pc, #108]	@ (8005028 <HAL_DMA_Abort_IT+0x400>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_DMA_Abort_IT+0x3a2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a19      	ldr	r2, [pc, #100]	@ (800502c <HAL_DMA_Abort_IT+0x404>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d132      	bne.n	8005030 <HAL_DMA_Abort_IT+0x408>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e031      	b.n	8005032 <HAL_DMA_Abort_IT+0x40a>
 8004fce:	bf00      	nop
 8004fd0:	40020010 	.word	0x40020010
 8004fd4:	40020028 	.word	0x40020028
 8004fd8:	40020040 	.word	0x40020040
 8004fdc:	40020058 	.word	0x40020058
 8004fe0:	40020070 	.word	0x40020070
 8004fe4:	40020088 	.word	0x40020088
 8004fe8:	400200a0 	.word	0x400200a0
 8004fec:	400200b8 	.word	0x400200b8
 8004ff0:	40020410 	.word	0x40020410
 8004ff4:	40020428 	.word	0x40020428
 8004ff8:	40020440 	.word	0x40020440
 8004ffc:	40020458 	.word	0x40020458
 8005000:	40020470 	.word	0x40020470
 8005004:	40020488 	.word	0x40020488
 8005008:	400204a0 	.word	0x400204a0
 800500c:	400204b8 	.word	0x400204b8
 8005010:	58025408 	.word	0x58025408
 8005014:	5802541c 	.word	0x5802541c
 8005018:	58025430 	.word	0x58025430
 800501c:	58025444 	.word	0x58025444
 8005020:	58025458 	.word	0x58025458
 8005024:	5802546c 	.word	0x5802546c
 8005028:	58025480 	.word	0x58025480
 800502c:	58025494 	.word	0x58025494
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d028      	beq.n	8005088 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005044:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005064:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800507c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005086:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop

080050b4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	460b      	mov	r3, r1
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e00a      	b.n	80050e6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80050d0:	7afb      	ldrb	r3, [r7, #11]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	605a      	str	r2, [r3, #4]
      break;
 80050dc:	e002      	b.n	80050e4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
      break;
 80050e2:	bf00      	nop
  }

  return status;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e003      	b.n	800510e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	2201      	movs	r2, #1
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	011a      	lsls	r2, r3, #4
 8005144:	4b0c      	ldr	r3, [pc, #48]	@ (8005178 <HAL_EXTI_IRQHandler+0x5c>)
 8005146:	4413      	add	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4013      	ands	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4798      	blx	r3
    }
  }
}
 800516e:	bf00      	nop
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	58000088 	.word	0x58000088

0800517c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	@ 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800518a:	4b89      	ldr	r3, [pc, #548]	@ (80053b0 <HAL_GPIO_Init+0x234>)
 800518c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800518e:	e194      	b.n	80054ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	2101      	movs	r1, #1
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	fa01 f303 	lsl.w	r3, r1, r3
 800519c:	4013      	ands	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8186 	beq.w	80054b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d005      	beq.n	80051c0 <HAL_GPIO_Init+0x44>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d130      	bne.n	8005222 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	2203      	movs	r2, #3
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051f6:	2201      	movs	r2, #1
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	f003 0201 	and.w	r2, r3, #1
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b03      	cmp	r3, #3
 800522c:	d017      	beq.n	800525e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2203      	movs	r2, #3
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d123      	bne.n	80052b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	08da      	lsrs	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3208      	adds	r2, #8
 8005272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	220f      	movs	r2, #15
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	43db      	mvns	r3, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4013      	ands	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	08da      	lsrs	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3208      	adds	r2, #8
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	2203      	movs	r2, #3
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	43db      	mvns	r3, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4013      	ands	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 0203 	and.w	r2, r3, #3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80e0 	beq.w	80054b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052f4:	4b2f      	ldr	r3, [pc, #188]	@ (80053b4 <HAL_GPIO_Init+0x238>)
 80052f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052fa:	4a2e      	ldr	r2, [pc, #184]	@ (80053b4 <HAL_GPIO_Init+0x238>)
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005304:	4b2b      	ldr	r3, [pc, #172]	@ (80053b4 <HAL_GPIO_Init+0x238>)
 8005306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005312:	4a29      	ldr	r2, [pc, #164]	@ (80053b8 <HAL_GPIO_Init+0x23c>)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	3302      	adds	r3, #2
 800531a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	220f      	movs	r2, #15
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4013      	ands	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a20      	ldr	r2, [pc, #128]	@ (80053bc <HAL_GPIO_Init+0x240>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d052      	beq.n	80053e4 <HAL_GPIO_Init+0x268>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1f      	ldr	r2, [pc, #124]	@ (80053c0 <HAL_GPIO_Init+0x244>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d031      	beq.n	80053aa <HAL_GPIO_Init+0x22e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1e      	ldr	r2, [pc, #120]	@ (80053c4 <HAL_GPIO_Init+0x248>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d02b      	beq.n	80053a6 <HAL_GPIO_Init+0x22a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <HAL_GPIO_Init+0x24c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d025      	beq.n	80053a2 <HAL_GPIO_Init+0x226>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1c      	ldr	r2, [pc, #112]	@ (80053cc <HAL_GPIO_Init+0x250>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01f      	beq.n	800539e <HAL_GPIO_Init+0x222>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <HAL_GPIO_Init+0x254>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d019      	beq.n	800539a <HAL_GPIO_Init+0x21e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1a      	ldr	r2, [pc, #104]	@ (80053d4 <HAL_GPIO_Init+0x258>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_GPIO_Init+0x21a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <HAL_GPIO_Init+0x25c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00d      	beq.n	8005392 <HAL_GPIO_Init+0x216>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a18      	ldr	r2, [pc, #96]	@ (80053dc <HAL_GPIO_Init+0x260>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d007      	beq.n	800538e <HAL_GPIO_Init+0x212>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a17      	ldr	r2, [pc, #92]	@ (80053e0 <HAL_GPIO_Init+0x264>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d101      	bne.n	800538a <HAL_GPIO_Init+0x20e>
 8005386:	2309      	movs	r3, #9
 8005388:	e02d      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 800538a:	230a      	movs	r3, #10
 800538c:	e02b      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 800538e:	2308      	movs	r3, #8
 8005390:	e029      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 8005392:	2307      	movs	r3, #7
 8005394:	e027      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 8005396:	2306      	movs	r3, #6
 8005398:	e025      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 800539a:	2305      	movs	r3, #5
 800539c:	e023      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 800539e:	2304      	movs	r3, #4
 80053a0:	e021      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 80053a2:	2303      	movs	r3, #3
 80053a4:	e01f      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e01d      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e01b      	b.n	80053e6 <HAL_GPIO_Init+0x26a>
 80053ae:	bf00      	nop
 80053b0:	58000080 	.word	0x58000080
 80053b4:	58024400 	.word	0x58024400
 80053b8:	58000400 	.word	0x58000400
 80053bc:	58020000 	.word	0x58020000
 80053c0:	58020400 	.word	0x58020400
 80053c4:	58020800 	.word	0x58020800
 80053c8:	58020c00 	.word	0x58020c00
 80053cc:	58021000 	.word	0x58021000
 80053d0:	58021400 	.word	0x58021400
 80053d4:	58021800 	.word	0x58021800
 80053d8:	58021c00 	.word	0x58021c00
 80053dc:	58022000 	.word	0x58022000
 80053e0:	58022400 	.word	0x58022400
 80053e4:	2300      	movs	r3, #0
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	f002 0203 	and.w	r2, r2, #3
 80053ec:	0092      	lsls	r2, r2, #2
 80053ee:	4093      	lsls	r3, r2
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053f6:	4938      	ldr	r1, [pc, #224]	@ (80054d8 <HAL_GPIO_Init+0x35c>)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	089b      	lsrs	r3, r3, #2
 80053fc:	3302      	adds	r3, #2
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800542a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	43db      	mvns	r3, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4013      	ands	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	43db      	mvns	r3, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f47f ae63 	bne.w	8005190 <HAL_GPIO_Init+0x14>
  }
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	3724      	adds	r7, #36	@ 0x24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	58000400 	.word	0x58000400

080054dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054ea:	4b75      	ldr	r3, [pc, #468]	@ (80056c0 <HAL_GPIO_DeInit+0x1e4>)
 80054ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80054ee:	e0d9      	b.n	80056a4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80054f0:	2201      	movs	r2, #1
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	4013      	ands	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80cc 	beq.w	800569e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005506:	4a6f      	ldr	r2, [pc, #444]	@ (80056c4 <HAL_GPIO_DeInit+0x1e8>)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	089b      	lsrs	r3, r3, #2
 800550c:	3302      	adds	r3, #2
 800550e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005512:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	220f      	movs	r2, #15
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a67      	ldr	r2, [pc, #412]	@ (80056c8 <HAL_GPIO_DeInit+0x1ec>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d037      	beq.n	80055a0 <HAL_GPIO_DeInit+0xc4>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a66      	ldr	r2, [pc, #408]	@ (80056cc <HAL_GPIO_DeInit+0x1f0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d031      	beq.n	800559c <HAL_GPIO_DeInit+0xc0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a65      	ldr	r2, [pc, #404]	@ (80056d0 <HAL_GPIO_DeInit+0x1f4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d02b      	beq.n	8005598 <HAL_GPIO_DeInit+0xbc>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a64      	ldr	r2, [pc, #400]	@ (80056d4 <HAL_GPIO_DeInit+0x1f8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d025      	beq.n	8005594 <HAL_GPIO_DeInit+0xb8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a63      	ldr	r2, [pc, #396]	@ (80056d8 <HAL_GPIO_DeInit+0x1fc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d01f      	beq.n	8005590 <HAL_GPIO_DeInit+0xb4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a62      	ldr	r2, [pc, #392]	@ (80056dc <HAL_GPIO_DeInit+0x200>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d019      	beq.n	800558c <HAL_GPIO_DeInit+0xb0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a61      	ldr	r2, [pc, #388]	@ (80056e0 <HAL_GPIO_DeInit+0x204>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <HAL_GPIO_DeInit+0xac>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a60      	ldr	r2, [pc, #384]	@ (80056e4 <HAL_GPIO_DeInit+0x208>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00d      	beq.n	8005584 <HAL_GPIO_DeInit+0xa8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a5f      	ldr	r2, [pc, #380]	@ (80056e8 <HAL_GPIO_DeInit+0x20c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d007      	beq.n	8005580 <HAL_GPIO_DeInit+0xa4>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a5e      	ldr	r2, [pc, #376]	@ (80056ec <HAL_GPIO_DeInit+0x210>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d101      	bne.n	800557c <HAL_GPIO_DeInit+0xa0>
 8005578:	2309      	movs	r3, #9
 800557a:	e012      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 800557c:	230a      	movs	r3, #10
 800557e:	e010      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 8005580:	2308      	movs	r3, #8
 8005582:	e00e      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 8005584:	2307      	movs	r3, #7
 8005586:	e00c      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 8005588:	2306      	movs	r3, #6
 800558a:	e00a      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 800558c:	2305      	movs	r3, #5
 800558e:	e008      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 8005590:	2304      	movs	r3, #4
 8005592:	e006      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 8005594:	2303      	movs	r3, #3
 8005596:	e004      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 8005598:	2302      	movs	r3, #2
 800559a:	e002      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <HAL_GPIO_DeInit+0xc6>
 80055a0:	2300      	movs	r3, #0
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	f002 0203 	and.w	r2, r2, #3
 80055a8:	0092      	lsls	r2, r2, #2
 80055aa:	4093      	lsls	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d136      	bne.n	8005620 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	43db      	mvns	r3, r3
 80055ba:	401a      	ands	r2, r3
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	401a      	ands	r2, r3
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80055ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055dc:	4013      	ands	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80055e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ee:	4013      	ands	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	220f      	movs	r2, #15
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005602:	4a30      	ldr	r2, [pc, #192]	@ (80056c4 <HAL_GPIO_DeInit+0x1e8>)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	089b      	lsrs	r3, r3, #2
 8005608:	3302      	adds	r3, #2
 800560a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	43da      	mvns	r2, r3
 8005612:	482c      	ldr	r0, [pc, #176]	@ (80056c4 <HAL_GPIO_DeInit+0x1e8>)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	400a      	ands	r2, r1
 800561a:	3302      	adds	r3, #2
 800561c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	2103      	movs	r1, #3
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	08da      	lsrs	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3208      	adds	r2, #8
 800563c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	220f      	movs	r2, #15
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	08d2      	lsrs	r2, r2, #3
 8005654:	4019      	ands	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3208      	adds	r2, #8
 800565a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2103      	movs	r1, #3
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	401a      	ands	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	2101      	movs	r1, #1
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	2103      	movs	r1, #3
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	401a      	ands	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3301      	adds	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f47f af1f 	bne.w	80054f0 <HAL_GPIO_DeInit+0x14>
  }
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	58000080 	.word	0x58000080
 80056c4:	58000400 	.word	0x58000400
 80056c8:	58020000 	.word	0x58020000
 80056cc:	58020400 	.word	0x58020400
 80056d0:	58020800 	.word	0x58020800
 80056d4:	58020c00 	.word	0x58020c00
 80056d8:	58021000 	.word	0x58021000
 80056dc:	58021400 	.word	0x58021400
 80056e0:	58021800 	.word	0x58021800
 80056e4:	58021c00 	.word	0x58021c00
 80056e8:	58022000 	.word	0x58022000
 80056ec:	58022400 	.word	0x58022400

080056f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
 800570c:	e001      	b.n	8005712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
 800572c:	4613      	mov	r3, r2
 800572e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005730:	787b      	ldrb	r3, [r7, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800573c:	e003      	b.n	8005746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	041a      	lsls	r2, r3, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005764:	887a      	ldrh	r2, [r7, #2]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4013      	ands	r3, r2
 800576a:	041a      	lsls	r2, r3, #16
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	43d9      	mvns	r1, r3
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	400b      	ands	r3, r1
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	619a      	str	r2, [r3, #24]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005790:	4b19      	ldr	r3, [pc, #100]	@ (80057f8 <HAL_PWREx_ConfigSupply+0x70>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b04      	cmp	r3, #4
 800579a:	d00a      	beq.n	80057b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800579c:	4b16      	ldr	r3, [pc, #88]	@ (80057f8 <HAL_PWREx_ConfigSupply+0x70>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e01f      	b.n	80057ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e01d      	b.n	80057ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057b2:	4b11      	ldr	r3, [pc, #68]	@ (80057f8 <HAL_PWREx_ConfigSupply+0x70>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f023 0207 	bic.w	r2, r3, #7
 80057ba:	490f      	ldr	r1, [pc, #60]	@ (80057f8 <HAL_PWREx_ConfigSupply+0x70>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80057c2:	f7ff f83b 	bl	800483c <HAL_GetTick>
 80057c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057c8:	e009      	b.n	80057de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057ca:	f7ff f837 	bl	800483c <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057d8:	d901      	bls.n	80057de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e007      	b.n	80057ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <HAL_PWREx_ConfigSupply+0x70>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ea:	d1ee      	bne.n	80057ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	58024800 	.word	0x58024800

080057fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	@ 0x30
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f000 bc48 	b.w	80060a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8088 	beq.w	800592e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581e:	4b99      	ldr	r3, [pc, #612]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005828:	4b96      	ldr	r3, [pc, #600]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800582e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005830:	2b10      	cmp	r3, #16
 8005832:	d007      	beq.n	8005844 <HAL_RCC_OscConfig+0x48>
 8005834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005836:	2b18      	cmp	r3, #24
 8005838:	d111      	bne.n	800585e <HAL_RCC_OscConfig+0x62>
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d10c      	bne.n	800585e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	4b8f      	ldr	r3, [pc, #572]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d06d      	beq.n	800592c <HAL_RCC_OscConfig+0x130>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d169      	bne.n	800592c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f000 bc21 	b.w	80060a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005866:	d106      	bne.n	8005876 <HAL_RCC_OscConfig+0x7a>
 8005868:	4b86      	ldr	r3, [pc, #536]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a85      	ldr	r2, [pc, #532]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 800586e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e02e      	b.n	80058d4 <HAL_RCC_OscConfig+0xd8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x9c>
 800587e:	4b81      	ldr	r3, [pc, #516]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a80      	ldr	r2, [pc, #512]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b7e      	ldr	r3, [pc, #504]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005890:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e01d      	b.n	80058d4 <HAL_RCC_OscConfig+0xd8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCC_OscConfig+0xc0>
 80058a2:	4b78      	ldr	r3, [pc, #480]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a77      	ldr	r2, [pc, #476]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4b75      	ldr	r3, [pc, #468]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a74      	ldr	r2, [pc, #464]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e00b      	b.n	80058d4 <HAL_RCC_OscConfig+0xd8>
 80058bc:	4b71      	ldr	r3, [pc, #452]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a70      	ldr	r2, [pc, #448]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	4b6e      	ldr	r3, [pc, #440]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a6d      	ldr	r2, [pc, #436]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d013      	beq.n	8005904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fe ffae 	bl	800483c <HAL_GetTick>
 80058e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e4:	f7fe ffaa 	bl	800483c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	@ 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e3d4      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058f6:	4b63      	ldr	r3, [pc, #396]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0xe8>
 8005902:	e014      	b.n	800592e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fe ff9a 	bl	800483c <HAL_GetTick>
 8005908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800590c:	f7fe ff96 	bl	800483c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	@ 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e3c0      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800591e:	4b59      	ldr	r3, [pc, #356]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x110>
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80ca 	beq.w	8005ad0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800593c:	4b51      	ldr	r3, [pc, #324]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005944:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005946:	4b4f      	ldr	r3, [pc, #316]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_RCC_OscConfig+0x166>
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	2b18      	cmp	r3, #24
 8005956:	d156      	bne.n	8005a06 <HAL_RCC_OscConfig+0x20a>
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d151      	bne.n	8005a06 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005962:	4b48      	ldr	r3, [pc, #288]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_RCC_OscConfig+0x17e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e392      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800597a:	4b42      	ldr	r3, [pc, #264]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 0219 	bic.w	r2, r3, #25
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	493f      	ldr	r1, [pc, #252]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fe ff56 	bl	800483c <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005994:	f7fe ff52 	bl	800483c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e37c      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a6:	4b37      	ldr	r3, [pc, #220]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	f7fe ff73 	bl	800489c <HAL_GetREVID>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059bc:	4293      	cmp	r3, r2
 80059be:	d817      	bhi.n	80059f0 <HAL_RCC_OscConfig+0x1f4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	d108      	bne.n	80059da <HAL_RCC_OscConfig+0x1de>
 80059c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80059d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d8:	e07a      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059da:	4b2a      	ldr	r3, [pc, #168]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	031b      	lsls	r3, r3, #12
 80059e8:	4926      	ldr	r1, [pc, #152]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059ee:	e06f      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f0:	4b24      	ldr	r3, [pc, #144]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	061b      	lsls	r3, r3, #24
 80059fe:	4921      	ldr	r1, [pc, #132]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a04:	e064      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d047      	beq.n	8005a9e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f023 0219 	bic.w	r2, r3, #25
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	491a      	ldr	r1, [pc, #104]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fe ff0c 	bl	800483c <HAL_GetTick>
 8005a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a28:	f7fe ff08 	bl	800483c <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e332      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a3a:	4b12      	ldr	r3, [pc, #72]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a46:	f7fe ff29 	bl	800489c <HAL_GetREVID>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d819      	bhi.n	8005a88 <HAL_RCC_OscConfig+0x28c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b40      	cmp	r3, #64	@ 0x40
 8005a5a:	d108      	bne.n	8005a6e <HAL_RCC_OscConfig+0x272>
 8005a5c:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005a64:	4a07      	ldr	r2, [pc, #28]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a6a:	6053      	str	r3, [r2, #4]
 8005a6c:	e030      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2d4>
 8005a6e:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	031b      	lsls	r3, r3, #12
 8005a7c:	4901      	ldr	r1, [pc, #4]	@ (8005a84 <HAL_RCC_OscConfig+0x288>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	604b      	str	r3, [r1, #4]
 8005a82:	e025      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2d4>
 8005a84:	58024400 	.word	0x58024400
 8005a88:	4b9a      	ldr	r3, [pc, #616]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	061b      	lsls	r3, r3, #24
 8005a96:	4997      	ldr	r1, [pc, #604]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	604b      	str	r3, [r1, #4]
 8005a9c:	e018      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9e:	4b95      	ldr	r3, [pc, #596]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a94      	ldr	r2, [pc, #592]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aaa:	f7fe fec7 	bl	800483c <HAL_GetTick>
 8005aae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab2:	f7fe fec3 	bl	800483c <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e2ed      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ac4:	4b8b      	ldr	r3, [pc, #556]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80a9 	beq.w	8005c30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ade:	4b85      	ldr	r3, [pc, #532]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ae6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae8:	4b82      	ldr	r3, [pc, #520]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d007      	beq.n	8005b04 <HAL_RCC_OscConfig+0x308>
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b18      	cmp	r3, #24
 8005af8:	d13a      	bne.n	8005b70 <HAL_RCC_OscConfig+0x374>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d135      	bne.n	8005b70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b04:	4b7b      	ldr	r3, [pc, #492]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_OscConfig+0x320>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	2b80      	cmp	r3, #128	@ 0x80
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e2c1      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b1c:	f7fe febe 	bl	800489c <HAL_GetREVID>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d817      	bhi.n	8005b5a <HAL_RCC_OscConfig+0x35e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d108      	bne.n	8005b44 <HAL_RCC_OscConfig+0x348>
 8005b32:	4b70      	ldr	r3, [pc, #448]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b40:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b42:	e075      	b.n	8005c30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b44:	4b6b      	ldr	r3, [pc, #428]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	069b      	lsls	r3, r3, #26
 8005b52:	4968      	ldr	r1, [pc, #416]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b58:	e06a      	b.n	8005c30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b5a:	4b66      	ldr	r3, [pc, #408]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	061b      	lsls	r3, r3, #24
 8005b68:	4962      	ldr	r1, [pc, #392]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b6e:	e05f      	b.n	8005c30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d042      	beq.n	8005bfe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b78:	4b5e      	ldr	r3, [pc, #376]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fe fe5a 	bl	800483c <HAL_GetTick>
 8005b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b8c:	f7fe fe56 	bl	800483c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e280      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b9e:	4b55      	ldr	r3, [pc, #340]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005baa:	f7fe fe77 	bl	800489c <HAL_GetREVID>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d817      	bhi.n	8005be8 <HAL_RCC_OscConfig+0x3ec>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d108      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x3d6>
 8005bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005bca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bce:	6053      	str	r3, [r2, #4]
 8005bd0:	e02e      	b.n	8005c30 <HAL_RCC_OscConfig+0x434>
 8005bd2:	4b48      	ldr	r3, [pc, #288]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	069b      	lsls	r3, r3, #26
 8005be0:	4944      	ldr	r1, [pc, #272]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	604b      	str	r3, [r1, #4]
 8005be6:	e023      	b.n	8005c30 <HAL_RCC_OscConfig+0x434>
 8005be8:	4b42      	ldr	r3, [pc, #264]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	061b      	lsls	r3, r3, #24
 8005bf6:	493f      	ldr	r1, [pc, #252]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60cb      	str	r3, [r1, #12]
 8005bfc:	e018      	b.n	8005c30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fe fe17 	bl	800483c <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c12:	f7fe fe13 	bl	800483c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e23d      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c24:	4b33      	ldr	r3, [pc, #204]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d036      	beq.n	8005caa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d019      	beq.n	8005c78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c44:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c48:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c50:	f7fe fdf4 	bl	800483c <HAL_GetTick>
 8005c54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c58:	f7fe fdf0 	bl	800483c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e21a      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c6a:	4b22      	ldr	r3, [pc, #136]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x45c>
 8005c76:	e018      	b.n	8005caa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c78:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005c7e:	f023 0301 	bic.w	r3, r3, #1
 8005c82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c84:	f7fe fdda 	bl	800483c <HAL_GetTick>
 8005c88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c8c:	f7fe fdd6 	bl	800483c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e200      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c9e:	4b15      	ldr	r3, [pc, #84]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d039      	beq.n	8005d2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01c      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005cc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cca:	f7fe fdb7 	bl	800483c <HAL_GetTick>
 8005cce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cd2:	f7fe fdb3 	bl	800483c <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e1dd      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ce4:	4b03      	ldr	r3, [pc, #12]	@ (8005cf4 <HAL_RCC_OscConfig+0x4f8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x4d6>
 8005cf0:	e01b      	b.n	8005d2a <HAL_RCC_OscConfig+0x52e>
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cf8:	4b9b      	ldr	r3, [pc, #620]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a9a      	ldr	r2, [pc, #616]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005cfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d04:	f7fe fd9a 	bl	800483c <HAL_GetTick>
 8005d08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d0c:	f7fe fd96 	bl	800483c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e1c0      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d1e:	4b92      	ldr	r3, [pc, #584]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8081 	beq.w	8005e3a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d38:	4b8c      	ldr	r3, [pc, #560]	@ (8005f6c <HAL_RCC_OscConfig+0x770>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a8b      	ldr	r2, [pc, #556]	@ (8005f6c <HAL_RCC_OscConfig+0x770>)
 8005d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d44:	f7fe fd7a 	bl	800483c <HAL_GetTick>
 8005d48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4c:	f7fe fd76 	bl	800483c <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b64      	cmp	r3, #100	@ 0x64
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e1a0      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d5e:	4b83      	ldr	r3, [pc, #524]	@ (8005f6c <HAL_RCC_OscConfig+0x770>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d106      	bne.n	8005d80 <HAL_RCC_OscConfig+0x584>
 8005d72:	4b7d      	ldr	r3, [pc, #500]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	4a7c      	ldr	r2, [pc, #496]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d7e:	e02d      	b.n	8005ddc <HAL_RCC_OscConfig+0x5e0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10c      	bne.n	8005da2 <HAL_RCC_OscConfig+0x5a6>
 8005d88:	4b77      	ldr	r3, [pc, #476]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8c:	4a76      	ldr	r2, [pc, #472]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005d8e:	f023 0301 	bic.w	r3, r3, #1
 8005d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d94:	4b74      	ldr	r3, [pc, #464]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d98:	4a73      	ldr	r2, [pc, #460]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005d9a:	f023 0304 	bic.w	r3, r3, #4
 8005d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005da0:	e01c      	b.n	8005ddc <HAL_RCC_OscConfig+0x5e0>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c8>
 8005daa:	4b6f      	ldr	r3, [pc, #444]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dae:	4a6e      	ldr	r2, [pc, #440]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db6:	4b6c      	ldr	r3, [pc, #432]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dba:	4a6b      	ldr	r2, [pc, #428]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	f043 0301 	orr.w	r3, r3, #1
 8005dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dc2:	e00b      	b.n	8005ddc <HAL_RCC_OscConfig+0x5e0>
 8005dc4:	4b68      	ldr	r3, [pc, #416]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc8:	4a67      	ldr	r2, [pc, #412]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dd0:	4b65      	ldr	r3, [pc, #404]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	4a64      	ldr	r2, [pc, #400]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005dd6:	f023 0304 	bic.w	r3, r3, #4
 8005dda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d015      	beq.n	8005e10 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de4:	f7fe fd2a 	bl	800483c <HAL_GetTick>
 8005de8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dea:	e00a      	b.n	8005e02 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dec:	f7fe fd26 	bl	800483c <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e14e      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e02:	4b59      	ldr	r3, [pc, #356]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0ee      	beq.n	8005dec <HAL_RCC_OscConfig+0x5f0>
 8005e0e:	e014      	b.n	8005e3a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e10:	f7fe fd14 	bl	800483c <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e16:	e00a      	b.n	8005e2e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e18:	f7fe fd10 	bl	800483c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e138      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ee      	bne.n	8005e18 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 812d 	beq.w	800609e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e44:	4b48      	ldr	r3, [pc, #288]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e4c:	2b18      	cmp	r3, #24
 8005e4e:	f000 80bd 	beq.w	8005fcc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	f040 809e 	bne.w	8005f98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5c:	4b42      	ldr	r3, [pc, #264]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a41      	ldr	r2, [pc, #260]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fe fce8 	bl	800483c <HAL_GetTick>
 8005e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fe fce4 	bl	800483c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e10e      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e82:	4b39      	ldr	r3, [pc, #228]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e8e:	4b36      	ldr	r3, [pc, #216]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e92:	4b37      	ldr	r3, [pc, #220]	@ (8005f70 <HAL_RCC_OscConfig+0x774>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e9e:	0112      	lsls	r2, r2, #4
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	4931      	ldr	r1, [pc, #196]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	3b01      	subs	r3, #1
 8005eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	025b      	lsls	r3, r3, #9
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005ed8:	4923      	ldr	r1, [pc, #140]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005ede:	4b22      	ldr	r3, [pc, #136]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	4a21      	ldr	r2, [pc, #132]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005eea:	4b1f      	ldr	r3, [pc, #124]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eee:	4b21      	ldr	r3, [pc, #132]	@ (8005f74 <HAL_RCC_OscConfig+0x778>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ef6:	00d2      	lsls	r2, r2, #3
 8005ef8:	491b      	ldr	r1, [pc, #108]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005efe:	4b1a      	ldr	r3, [pc, #104]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f02:	f023 020c 	bic.w	r2, r3, #12
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	4917      	ldr	r1, [pc, #92]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f10:	4b15      	ldr	r3, [pc, #84]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	f023 0202 	bic.w	r2, r3, #2
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1c:	4912      	ldr	r1, [pc, #72]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f22:	4b11      	ldr	r3, [pc, #68]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	4a10      	ldr	r2, [pc, #64]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f32:	4a0d      	ldr	r2, [pc, #52]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005f46:	4b08      	ldr	r3, [pc, #32]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	4a07      	ldr	r2, [pc, #28]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a04      	ldr	r2, [pc, #16]	@ (8005f68 <HAL_RCC_OscConfig+0x76c>)
 8005f58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fe fc6d 	bl	800483c <HAL_GetTick>
 8005f62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f64:	e011      	b.n	8005f8a <HAL_RCC_OscConfig+0x78e>
 8005f66:	bf00      	nop
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	58024800 	.word	0x58024800
 8005f70:	fffffc0c 	.word	0xfffffc0c
 8005f74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f78:	f7fe fc60 	bl	800483c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e08a      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f8a:	4b47      	ldr	r3, [pc, #284]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x77c>
 8005f96:	e082      	b.n	800609e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f98:	4b43      	ldr	r3, [pc, #268]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a42      	ldr	r2, [pc, #264]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8005f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fe fc4a 	bl	800483c <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fac:	f7fe fc46 	bl	800483c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e070      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0x7b0>
 8005fca:	e068      	b.n	800609e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005fcc:	4b36      	ldr	r3, [pc, #216]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005fd2:	4b35      	ldr	r3, [pc, #212]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d031      	beq.n	8006044 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f003 0203 	and.w	r2, r3, #3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d12a      	bne.n	8006044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d122      	bne.n	8006044 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006008:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800600a:	429a      	cmp	r2, r3
 800600c:	d11a      	bne.n	8006044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0a5b      	lsrs	r3, r3, #9
 8006012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d111      	bne.n	8006044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800602e:	429a      	cmp	r2, r3
 8006030:	d108      	bne.n	8006044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	0e1b      	lsrs	r3, r3, #24
 8006036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006040:	429a      	cmp	r2, r3
 8006042:	d001      	beq.n	8006048 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e02b      	b.n	80060a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006048:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 800604a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604c:	08db      	lsrs	r3, r3, #3
 800604e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006052:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	429a      	cmp	r2, r3
 800605c:	d01f      	beq.n	800609e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800605e:	4b12      	ldr	r3, [pc, #72]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	4a11      	ldr	r2, [pc, #68]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800606a:	f7fe fbe7 	bl	800483c <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006070:	bf00      	nop
 8006072:	f7fe fbe3 	bl	800483c <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	4293      	cmp	r3, r2
 800607c:	d0f9      	beq.n	8006072 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800607e:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8006080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006082:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <HAL_RCC_OscConfig+0x8b0>)
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800608a:	00d2      	lsls	r2, r2, #3
 800608c:	4906      	ldr	r1, [pc, #24]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 800608e:	4313      	orrs	r3, r2
 8006090:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006092:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	4a04      	ldr	r2, [pc, #16]	@ (80060a8 <HAL_RCC_OscConfig+0x8ac>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3730      	adds	r7, #48	@ 0x30
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	58024400 	.word	0x58024400
 80060ac:	ffff0007 	.word	0xffff0007

080060b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e19c      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c4:	4b8a      	ldr	r3, [pc, #552]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d910      	bls.n	80060f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d2:	4b87      	ldr	r3, [pc, #540]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 020f 	bic.w	r2, r3, #15
 80060da:	4985      	ldr	r1, [pc, #532]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4313      	orrs	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b83      	ldr	r3, [pc, #524]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e184      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d010      	beq.n	8006122 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	4b7b      	ldr	r3, [pc, #492]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800610c:	429a      	cmp	r2, r3
 800610e:	d908      	bls.n	8006122 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006110:	4b78      	ldr	r3, [pc, #480]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	4975      	ldr	r1, [pc, #468]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 800611e:	4313      	orrs	r3, r2
 8006120:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d010      	beq.n	8006150 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	4b70      	ldr	r3, [pc, #448]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800613a:	429a      	cmp	r2, r3
 800613c:	d908      	bls.n	8006150 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800613e:	4b6d      	ldr	r3, [pc, #436]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	496a      	ldr	r1, [pc, #424]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 800614c:	4313      	orrs	r3, r2
 800614e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	4b64      	ldr	r3, [pc, #400]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006168:	429a      	cmp	r2, r3
 800616a:	d908      	bls.n	800617e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800616c:	4b61      	ldr	r3, [pc, #388]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	495e      	ldr	r1, [pc, #376]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 800617a:	4313      	orrs	r3, r2
 800617c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d010      	beq.n	80061ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	4b59      	ldr	r3, [pc, #356]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006196:	429a      	cmp	r2, r3
 8006198:	d908      	bls.n	80061ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800619a:	4b56      	ldr	r3, [pc, #344]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	4953      	ldr	r1, [pc, #332]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d010      	beq.n	80061da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	4b4d      	ldr	r3, [pc, #308]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d908      	bls.n	80061da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c8:	4b4a      	ldr	r3, [pc, #296]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f023 020f 	bic.w	r2, r3, #15
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	4947      	ldr	r1, [pc, #284]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d055      	beq.n	8006292 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80061e6:	4b43      	ldr	r3, [pc, #268]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4940      	ldr	r1, [pc, #256]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d107      	bne.n	8006210 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006200:	4b3c      	ldr	r3, [pc, #240]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d121      	bne.n	8006250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0f6      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d107      	bne.n	8006228 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006218:	4b36      	ldr	r3, [pc, #216]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d115      	bne.n	8006250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0ea      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d107      	bne.n	8006240 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006230:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0de      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006240:	4b2c      	ldr	r3, [pc, #176]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0d6      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006250:	4b28      	ldr	r3, [pc, #160]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f023 0207 	bic.w	r2, r3, #7
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4925      	ldr	r1, [pc, #148]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 800625e:	4313      	orrs	r3, r2
 8006260:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006262:	f7fe faeb 	bl	800483c <HAL_GetTick>
 8006266:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006268:	e00a      	b.n	8006280 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800626a:	f7fe fae7 	bl	800483c <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006278:	4293      	cmp	r3, r2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e0be      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006280:	4b1c      	ldr	r3, [pc, #112]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	429a      	cmp	r2, r3
 8006290:	d1eb      	bne.n	800626a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	4b14      	ldr	r3, [pc, #80]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d208      	bcs.n	80062c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ae:	4b11      	ldr	r3, [pc, #68]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f023 020f 	bic.w	r2, r3, #15
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	490e      	ldr	r1, [pc, #56]	@ (80062f4 <HAL_RCC_ClockConfig+0x244>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062c0:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d214      	bcs.n	80062f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ce:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f023 020f 	bic.w	r2, r3, #15
 80062d6:	4906      	ldr	r1, [pc, #24]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	4313      	orrs	r3, r2
 80062dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062de:	4b04      	ldr	r3, [pc, #16]	@ (80062f0 <HAL_RCC_ClockConfig+0x240>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e086      	b.n	80063fe <HAL_RCC_ClockConfig+0x34e>
 80062f0:	52002000 	.word	0x52002000
 80062f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d010      	beq.n	8006326 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	4b3f      	ldr	r3, [pc, #252]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006310:	429a      	cmp	r2, r3
 8006312:	d208      	bcs.n	8006326 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006314:	4b3c      	ldr	r3, [pc, #240]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	4939      	ldr	r1, [pc, #228]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006322:	4313      	orrs	r3, r2
 8006324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d010      	beq.n	8006354 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695a      	ldr	r2, [r3, #20]
 8006336:	4b34      	ldr	r3, [pc, #208]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800633e:	429a      	cmp	r2, r3
 8006340:	d208      	bcs.n	8006354 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006342:	4b31      	ldr	r3, [pc, #196]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	492e      	ldr	r1, [pc, #184]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006350:	4313      	orrs	r3, r2
 8006352:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	4b28      	ldr	r3, [pc, #160]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800636c:	429a      	cmp	r2, r3
 800636e:	d208      	bcs.n	8006382 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006370:	4b25      	ldr	r3, [pc, #148]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	4922      	ldr	r1, [pc, #136]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 800637e:	4313      	orrs	r3, r2
 8006380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d010      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69da      	ldr	r2, [r3, #28]
 8006392:	4b1d      	ldr	r3, [pc, #116]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800639a:	429a      	cmp	r2, r3
 800639c:	d208      	bcs.n	80063b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800639e:	4b1a      	ldr	r3, [pc, #104]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	4917      	ldr	r1, [pc, #92]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063b0:	f000 f834 	bl	800641c <HAL_RCC_GetSysClockFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	4912      	ldr	r1, [pc, #72]	@ (800640c <HAL_RCC_ClockConfig+0x35c>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
 80063cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <HAL_RCC_ClockConfig+0x358>)
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	4a0d      	ldr	r2, [pc, #52]	@ (800640c <HAL_RCC_ClockConfig+0x35c>)
 80063d8:	5cd3      	ldrb	r3, [r2, r3]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
 80063e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006410 <HAL_RCC_ClockConfig+0x360>)
 80063e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006414 <HAL_RCC_ClockConfig+0x364>)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80063ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <HAL_RCC_ClockConfig+0x368>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe f9d8 	bl	80047a8 <HAL_InitTick>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	58024400 	.word	0x58024400
 800640c:	0800f9e0 	.word	0x0800f9e0
 8006410:	24000004 	.word	0x24000004
 8006414:	24000000 	.word	0x24000000
 8006418:	24000024 	.word	0x24000024

0800641c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800641c:	b480      	push	{r7}
 800641e:	b089      	sub	sp, #36	@ 0x24
 8006420:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006422:	4bb3      	ldr	r3, [pc, #716]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800642a:	2b18      	cmp	r3, #24
 800642c:	f200 8155 	bhi.w	80066da <HAL_RCC_GetSysClockFreq+0x2be>
 8006430:	a201      	add	r2, pc, #4	@ (adr r2, 8006438 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	0800649d 	.word	0x0800649d
 800643c:	080066db 	.word	0x080066db
 8006440:	080066db 	.word	0x080066db
 8006444:	080066db 	.word	0x080066db
 8006448:	080066db 	.word	0x080066db
 800644c:	080066db 	.word	0x080066db
 8006450:	080066db 	.word	0x080066db
 8006454:	080066db 	.word	0x080066db
 8006458:	080064c3 	.word	0x080064c3
 800645c:	080066db 	.word	0x080066db
 8006460:	080066db 	.word	0x080066db
 8006464:	080066db 	.word	0x080066db
 8006468:	080066db 	.word	0x080066db
 800646c:	080066db 	.word	0x080066db
 8006470:	080066db 	.word	0x080066db
 8006474:	080066db 	.word	0x080066db
 8006478:	080064c9 	.word	0x080064c9
 800647c:	080066db 	.word	0x080066db
 8006480:	080066db 	.word	0x080066db
 8006484:	080066db 	.word	0x080066db
 8006488:	080066db 	.word	0x080066db
 800648c:	080066db 	.word	0x080066db
 8006490:	080066db 	.word	0x080066db
 8006494:	080066db 	.word	0x080066db
 8006498:	080064cf 	.word	0x080064cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800649c:	4b94      	ldr	r3, [pc, #592]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064a8:	4b91      	ldr	r3, [pc, #580]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	08db      	lsrs	r3, r3, #3
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	4a90      	ldr	r2, [pc, #576]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80064ba:	e111      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80064bc:	4b8d      	ldr	r3, [pc, #564]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064be:	61bb      	str	r3, [r7, #24]
      break;
 80064c0:	e10e      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80064c2:	4b8d      	ldr	r3, [pc, #564]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064c4:	61bb      	str	r3, [r7, #24]
      break;
 80064c6:	e10b      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80064c8:	4b8c      	ldr	r3, [pc, #560]	@ (80066fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80064ca:	61bb      	str	r3, [r7, #24]
      break;
 80064cc:	e108      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064ce:	4b88      	ldr	r3, [pc, #544]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80064d8:	4b85      	ldr	r3, [pc, #532]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064e4:	4b82      	ldr	r3, [pc, #520]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064ee:	4b80      	ldr	r3, [pc, #512]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f2:	08db      	lsrs	r3, r3, #3
 80064f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	fb02 f303 	mul.w	r3, r2, r3
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006506:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80e1 	beq.w	80066d4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b02      	cmp	r3, #2
 8006516:	f000 8083 	beq.w	8006620 <HAL_RCC_GetSysClockFreq+0x204>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b02      	cmp	r3, #2
 800651e:	f200 80a1 	bhi.w	8006664 <HAL_RCC_GetSysClockFreq+0x248>
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_RCC_GetSysClockFreq+0x114>
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d056      	beq.n	80065dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800652e:	e099      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006530:	4b6f      	ldr	r3, [pc, #444]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d02d      	beq.n	8006598 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800653c:	4b6c      	ldr	r3, [pc, #432]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	08db      	lsrs	r3, r3, #3
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	4a6b      	ldr	r2, [pc, #428]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
 800654c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	ee07 3a90 	vmov	s15, r3
 8006554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006566:	4b62      	ldr	r3, [pc, #392]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006576:	ed97 6a02 	vldr	s12, [r7, #8]
 800657a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800657e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800658a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006592:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006596:	e087      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006704 <HAL_RCC_GetSysClockFreq+0x2e8>
 80065a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065aa:	4b51      	ldr	r3, [pc, #324]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80065be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006700 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065da:	e065      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006708 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ee:	4b40      	ldr	r3, [pc, #256]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006602:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006700 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800661e:	e043      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800670c <HAL_RCC_GetSysClockFreq+0x2f0>
 800662e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006632:	4b2f      	ldr	r3, [pc, #188]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006642:	ed97 6a02 	vldr	s12, [r7, #8]
 8006646:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800664a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006662:	e021      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006708 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006676:	4b1e      	ldr	r3, [pc, #120]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006686:	ed97 6a02 	vldr	s12, [r7, #8]
 800668a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800668e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800669a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	0a5b      	lsrs	r3, r3, #9
 80066ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066b2:	3301      	adds	r3, #1
 80066b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066cc:	ee17 3a90 	vmov	r3, s15
 80066d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80066d2:	e005      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
      break;
 80066d8:	e002      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80066da:	4b07      	ldr	r3, [pc, #28]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066dc:	61bb      	str	r3, [r7, #24]
      break;
 80066de:	bf00      	nop
  }

  return sysclockfreq;
 80066e0:	69bb      	ldr	r3, [r7, #24]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3724      	adds	r7, #36	@ 0x24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	58024400 	.word	0x58024400
 80066f4:	03d09000 	.word	0x03d09000
 80066f8:	003d0900 	.word	0x003d0900
 80066fc:	017d7840 	.word	0x017d7840
 8006700:	46000000 	.word	0x46000000
 8006704:	4c742400 	.word	0x4c742400
 8006708:	4a742400 	.word	0x4a742400
 800670c:	4bbebc20 	.word	0x4bbebc20

08006710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006716:	f7ff fe81 	bl	800641c <HAL_RCC_GetSysClockFreq>
 800671a:	4602      	mov	r2, r0
 800671c:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <HAL_RCC_GetHCLKFreq+0x50>)
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	0a1b      	lsrs	r3, r3, #8
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	490f      	ldr	r1, [pc, #60]	@ (8006764 <HAL_RCC_GetHCLKFreq+0x54>)
 8006728:	5ccb      	ldrb	r3, [r1, r3]
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	fa22 f303 	lsr.w	r3, r2, r3
 8006732:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006734:	4b0a      	ldr	r3, [pc, #40]	@ (8006760 <HAL_RCC_GetHCLKFreq+0x50>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	4a09      	ldr	r2, [pc, #36]	@ (8006764 <HAL_RCC_GetHCLKFreq+0x54>)
 800673e:	5cd3      	ldrb	r3, [r2, r3]
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	fa22 f303 	lsr.w	r3, r2, r3
 800674a:	4a07      	ldr	r2, [pc, #28]	@ (8006768 <HAL_RCC_GetHCLKFreq+0x58>)
 800674c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800674e:	4a07      	ldr	r2, [pc, #28]	@ (800676c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006754:	4b04      	ldr	r3, [pc, #16]	@ (8006768 <HAL_RCC_GetHCLKFreq+0x58>)
 8006756:	681b      	ldr	r3, [r3, #0]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	58024400 	.word	0x58024400
 8006764:	0800f9e0 	.word	0x0800f9e0
 8006768:	24000004 	.word	0x24000004
 800676c:	24000000 	.word	0x24000000

08006770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006774:	f7ff ffcc 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006778:	4602      	mov	r2, r0
 800677a:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	4904      	ldr	r1, [pc, #16]	@ (8006798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006786:	5ccb      	ldrb	r3, [r1, r3]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	58024400 	.word	0x58024400
 8006798:	0800f9e0 	.word	0x0800f9e0

0800679c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067a0:	f7ff ffb6 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	0a1b      	lsrs	r3, r3, #8
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4904      	ldr	r1, [pc, #16]	@ (80067c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80067bc:	4618      	mov	r0, r3
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	58024400 	.word	0x58024400
 80067c4:	0800f9e0 	.word	0x0800f9e0

080067c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067cc:	b0ca      	sub	sp, #296	@ 0x128
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067da:	2300      	movs	r3, #0
 80067dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80067ec:	2500      	movs	r5, #0
 80067ee:	ea54 0305 	orrs.w	r3, r4, r5
 80067f2:	d049      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80067f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067fe:	d02f      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006800:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006804:	d828      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800680a:	d01a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800680c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006810:	d822      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800681a:	d007      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800681c:	e01c      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681e:	4bb8      	ldr	r3, [pc, #736]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	4ab7      	ldr	r2, [pc, #732]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006828:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800682a:	e01a      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006830:	3308      	adds	r3, #8
 8006832:	2102      	movs	r1, #2
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fc8f 	bl	8008158 <RCCEx_PLL2_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006840:	e00f      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006846:	3328      	adds	r3, #40	@ 0x28
 8006848:	2102      	movs	r1, #2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fd36 	bl	80082bc <RCCEx_PLL3_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006856:	e004      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800685e:	e000      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800686a:	4ba5      	ldr	r3, [pc, #660]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800686c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800686e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006878:	4aa1      	ldr	r2, [pc, #644]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800687a:	430b      	orrs	r3, r1
 800687c:	6513      	str	r3, [r2, #80]	@ 0x50
 800687e:	e003      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006894:	f04f 0900 	mov.w	r9, #0
 8006898:	ea58 0309 	orrs.w	r3, r8, r9
 800689c:	d047      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d82a      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80068a8:	a201      	add	r2, pc, #4	@ (adr r2, 80068b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068c5 	.word	0x080068c5
 80068b4:	080068d3 	.word	0x080068d3
 80068b8:	080068e9 	.word	0x080068e9
 80068bc:	08006907 	.word	0x08006907
 80068c0:	08006907 	.word	0x08006907
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	4a8d      	ldr	r2, [pc, #564]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068d0:	e01a      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	3308      	adds	r3, #8
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 fc3c 	bl	8008158 <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068e6:	e00f      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ec:	3328      	adds	r3, #40	@ 0x28
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 fce3 	bl	80082bc <RCCEx_PLL3_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068fc:	e004      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006904:	e000      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006910:	4b7b      	ldr	r3, [pc, #492]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006914:	f023 0107 	bic.w	r1, r3, #7
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691e:	4a78      	ldr	r2, [pc, #480]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006920:	430b      	orrs	r3, r1
 8006922:	6513      	str	r3, [r2, #80]	@ 0x50
 8006924:	e003      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800693a:	f04f 0b00 	mov.w	fp, #0
 800693e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006942:	d04c      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800694e:	d030      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006954:	d829      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006956:	2bc0      	cmp	r3, #192	@ 0xc0
 8006958:	d02d      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800695a:	2bc0      	cmp	r3, #192	@ 0xc0
 800695c:	d825      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800695e:	2b80      	cmp	r3, #128	@ 0x80
 8006960:	d018      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006962:	2b80      	cmp	r3, #128	@ 0x80
 8006964:	d821      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800696a:	2b40      	cmp	r3, #64	@ 0x40
 800696c:	d007      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800696e:	e01c      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006970:	4b63      	ldr	r3, [pc, #396]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	4a62      	ldr	r2, [pc, #392]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800697c:	e01c      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	3308      	adds	r3, #8
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fbe6 	bl	8008158 <RCCEx_PLL2_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006992:	e011      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006998:	3328      	adds	r3, #40	@ 0x28
 800699a:	2100      	movs	r1, #0
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fc8d 	bl	80082bc <RCCEx_PLL3_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069a8:	e006      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069b0:	e002      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10a      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80069c0:	4b4f      	ldr	r3, [pc, #316]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80069d4:	e003      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80069ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80069f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80069f8:	460b      	mov	r3, r1
 80069fa:	4313      	orrs	r3, r2
 80069fc:	d053      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a0a:	d035      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a10:	d82e      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a16:	d031      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006a18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a1c:	d828      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a22:	d01a      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a28:	d822      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a32:	d007      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006a34:	e01c      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a36:	4b32      	ldr	r3, [pc, #200]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3a:	4a31      	ldr	r2, [pc, #196]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a42:	e01c      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a48:	3308      	adds	r3, #8
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 fb83 	bl	8008158 <RCCEx_PLL2_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a58:	e011      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5e:	3328      	adds	r3, #40	@ 0x28
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f001 fc2a 	bl	80082bc <RCCEx_PLL3_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a6e:	e006      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a76:	e002      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a78:	bf00      	nop
 8006a7a:	e000      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a86:	4b1e      	ldr	r3, [pc, #120]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a96:	4a1a      	ldr	r2, [pc, #104]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a9c:	e003      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006ab2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006abc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d056      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ad2:	d038      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006ad4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ad8:	d831      	bhi.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ada:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ade:	d034      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006ae0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ae4:	d82b      	bhi.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aea:	d01d      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006af0:	d825      	bhi.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d006      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006afa:	d00a      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006afc:	e01f      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006afe:	bf00      	nop
 8006b00:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b04:	4ba2      	ldr	r3, [pc, #648]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	4aa1      	ldr	r2, [pc, #644]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b10:	e01c      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	3308      	adds	r3, #8
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fb1c 	bl	8008158 <RCCEx_PLL2_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b26:	e011      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2c:	3328      	adds	r3, #40	@ 0x28
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 fbc3 	bl	80082bc <RCCEx_PLL3_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b3c:	e006      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b44:	e002      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b54:	4b8e      	ldr	r3, [pc, #568]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b64:	4a8a      	ldr	r2, [pc, #552]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b6a:	e003      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d03a      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9a:	2b30      	cmp	r3, #48	@ 0x30
 8006b9c:	d01f      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b9e:	2b30      	cmp	r3, #48	@ 0x30
 8006ba0:	d819      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d815      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d019      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d111      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb2:	4b77      	ldr	r3, [pc, #476]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb6:	4a76      	ldr	r2, [pc, #472]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006bbe:	e011      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fac5 	bl	8008158 <RCCEx_PLL2_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006bd4:	e006      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bdc:	e002      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006bde:	bf00      	nop
 8006be0:	e000      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006bec:	4b68      	ldr	r3, [pc, #416]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bfa:	4a65      	ldr	r2, [pc, #404]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c00:	e003      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4313      	orrs	r3, r2
 8006c28:	d051      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c34:	d035      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c3a:	d82e      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c40:	d031      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006c42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c46:	d828      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c4c:	d01a      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c52:	d822      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c5c:	d007      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006c5e:	e01c      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c60:	4b4b      	ldr	r3, [pc, #300]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	4a4a      	ldr	r2, [pc, #296]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c6c:	e01c      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c72:	3308      	adds	r3, #8
 8006c74:	2100      	movs	r1, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 fa6e 	bl	8008158 <RCCEx_PLL2_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c82:	e011      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c88:	3328      	adds	r3, #40	@ 0x28
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fb15 	bl	80082bc <RCCEx_PLL3_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c98:	e006      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca0:	e002      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ca2:	bf00      	nop
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cb0:	4b37      	ldr	r3, [pc, #220]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cbe:	4a34      	ldr	r2, [pc, #208]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cc4:	e003      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006cda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ce4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4313      	orrs	r3, r2
 8006cec:	d056      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf8:	d033      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cfe:	d82c      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d04:	d02f      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006d06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d0a:	d826      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d10:	d02b      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006d12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d16:	d820      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1c:	d012      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d22:	d81a      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d022      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2c:	d115      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d32:	3308      	adds	r3, #8
 8006d34:	2101      	movs	r1, #1
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 fa0e 	bl	8008158 <RCCEx_PLL2_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d42:	e015      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d48:	3328      	adds	r3, #40	@ 0x28
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 fab5 	bl	80082bc <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d58:	e00a      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d60:	e006      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d62:	bf00      	nop
 8006d64:	e004      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d78:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d86:	4a02      	ldr	r2, [pc, #8]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d8c:	e006      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dac:	2300      	movs	r3, #0
 8006dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006db2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4313      	orrs	r3, r2
 8006dba:	d055      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dc8:	d033      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dce:	d82c      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd4:	d02f      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dda:	d826      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ddc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006de0:	d02b      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006de2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006de6:	d820      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dec:	d012      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df2:	d81a      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d022      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dfc:	d115      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	3308      	adds	r3, #8
 8006e04:	2101      	movs	r1, #1
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 f9a6 	bl	8008158 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e12:	e015      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	3328      	adds	r3, #40	@ 0x28
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 fa4d 	bl	80082bc <RCCEx_PLL3_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e28:	e00a      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e30:	e006      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e32:	bf00      	nop
 8006e34:	e004      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e48:	4ba3      	ldr	r3, [pc, #652]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e58:	4a9f      	ldr	r2, [pc, #636]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e5e:	e003      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d037      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e92:	d00e      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e98:	d816      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d018      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea2:	d111      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea4:	4b8c      	ldr	r3, [pc, #560]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	4a8b      	ldr	r2, [pc, #556]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006eb0:	e00f      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 f94c 	bl	8008158 <RCCEx_PLL2_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ec6:	e004      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ece:	e000      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006eda:	4b7f      	ldr	r3, [pc, #508]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ede:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee8:	4a7b      	ldr	r2, [pc, #492]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eea:	430b      	orrs	r3, r1
 8006eec:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eee:	e003      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4313      	orrs	r3, r2
 8006f16:	d039      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d81c      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006f22:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f65 	.word	0x08006f65
 8006f2c:	08006f39 	.word	0x08006f39
 8006f30:	08006f47 	.word	0x08006f47
 8006f34:	08006f65 	.word	0x08006f65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f38:	4b67      	ldr	r3, [pc, #412]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3c:	4a66      	ldr	r2, [pc, #408]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f44:	e00f      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	2102      	movs	r1, #2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 f902 	bl	8008158 <RCCEx_PLL2_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f5a:	e004      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f72:	f023 0103 	bic.w	r1, r3, #3
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f7c:	4a56      	ldr	r2, [pc, #344]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f82:	e003      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fa2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f000 809f 	beq.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fae:	4b4b      	ldr	r3, [pc, #300]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fba:	f7fd fc3f 	bl	800483c <HAL_GetTick>
 8006fbe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc2:	e00b      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc4:	f7fd fc3a 	bl	800483c <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b64      	cmp	r3, #100	@ 0x64
 8006fd2:	d903      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fda:	e005      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0ed      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d179      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ff0:	4b39      	ldr	r3, [pc, #228]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ffc:	4053      	eors	r3, r2
 8006ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007002:	2b00      	cmp	r3, #0
 8007004:	d015      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007006:	4b34      	ldr	r3, [pc, #208]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800700e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007012:	4b31      	ldr	r3, [pc, #196]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007016:	4a30      	ldr	r2, [pc, #192]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800701c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800701e:	4b2e      	ldr	r3, [pc, #184]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007022:	4a2d      	ldr	r2, [pc, #180]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007028:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800702a:	4a2b      	ldr	r2, [pc, #172]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800702c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007030:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800703a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800703e:	d118      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fd fbfc 	bl	800483c <HAL_GetTick>
 8007044:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007048:	e00d      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800704a:	f7fd fbf7 	bl	800483c <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	f241 3388 	movw	r3, #5000	@ 0x1388
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007064:	e005      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007066:	4b1c      	ldr	r3, [pc, #112]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0eb      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007076:	2b00      	cmp	r3, #0
 8007078:	d129      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800708a:	d10e      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800708c:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007098:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800709c:	091a      	lsrs	r2, r3, #4
 800709e:	4b10      	ldr	r3, [pc, #64]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	4a0d      	ldr	r2, [pc, #52]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6113      	str	r3, [r2, #16]
 80070a8:	e005      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80070aa:	4b0b      	ldr	r3, [pc, #44]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	4a0a      	ldr	r2, [pc, #40]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070b4:	6113      	str	r3, [r2, #16]
 80070b6:	4b08      	ldr	r3, [pc, #32]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070c6:	4a04      	ldr	r2, [pc, #16]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80070cc:	e00e      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80070d6:	e009      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80070d8:	58024400 	.word	0x58024400
 80070dc:	58024800 	.word	0x58024800
 80070e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f002 0301 	and.w	r3, r2, #1
 80070f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070fc:	2300      	movs	r3, #0
 80070fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007102:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007106:	460b      	mov	r3, r1
 8007108:	4313      	orrs	r3, r2
 800710a:	f000 8089 	beq.w	8007220 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007114:	2b28      	cmp	r3, #40	@ 0x28
 8007116:	d86b      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007118:	a201      	add	r2, pc, #4	@ (adr r2, 8007120 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	080071f9 	.word	0x080071f9
 8007124:	080071f1 	.word	0x080071f1
 8007128:	080071f1 	.word	0x080071f1
 800712c:	080071f1 	.word	0x080071f1
 8007130:	080071f1 	.word	0x080071f1
 8007134:	080071f1 	.word	0x080071f1
 8007138:	080071f1 	.word	0x080071f1
 800713c:	080071f1 	.word	0x080071f1
 8007140:	080071c5 	.word	0x080071c5
 8007144:	080071f1 	.word	0x080071f1
 8007148:	080071f1 	.word	0x080071f1
 800714c:	080071f1 	.word	0x080071f1
 8007150:	080071f1 	.word	0x080071f1
 8007154:	080071f1 	.word	0x080071f1
 8007158:	080071f1 	.word	0x080071f1
 800715c:	080071f1 	.word	0x080071f1
 8007160:	080071db 	.word	0x080071db
 8007164:	080071f1 	.word	0x080071f1
 8007168:	080071f1 	.word	0x080071f1
 800716c:	080071f1 	.word	0x080071f1
 8007170:	080071f1 	.word	0x080071f1
 8007174:	080071f1 	.word	0x080071f1
 8007178:	080071f1 	.word	0x080071f1
 800717c:	080071f1 	.word	0x080071f1
 8007180:	080071f9 	.word	0x080071f9
 8007184:	080071f1 	.word	0x080071f1
 8007188:	080071f1 	.word	0x080071f1
 800718c:	080071f1 	.word	0x080071f1
 8007190:	080071f1 	.word	0x080071f1
 8007194:	080071f1 	.word	0x080071f1
 8007198:	080071f1 	.word	0x080071f1
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	080071f9 	.word	0x080071f9
 80071a4:	080071f1 	.word	0x080071f1
 80071a8:	080071f1 	.word	0x080071f1
 80071ac:	080071f1 	.word	0x080071f1
 80071b0:	080071f1 	.word	0x080071f1
 80071b4:	080071f1 	.word	0x080071f1
 80071b8:	080071f1 	.word	0x080071f1
 80071bc:	080071f1 	.word	0x080071f1
 80071c0:	080071f9 	.word	0x080071f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	3308      	adds	r3, #8
 80071ca:	2101      	movs	r1, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 ffc3 	bl	8008158 <RCCEx_PLL2_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071d8:	e00f      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071de:	3328      	adds	r3, #40	@ 0x28
 80071e0:	2101      	movs	r1, #1
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 f86a 	bl	80082bc <RCCEx_PLL3_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071ee:	e004      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071f6:	e000      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80071f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007202:	4bbf      	ldr	r3, [pc, #764]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007206:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007210:	4abb      	ldr	r2, [pc, #748]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007212:	430b      	orrs	r3, r1
 8007214:	6553      	str	r3, [r2, #84]	@ 0x54
 8007216:	e003      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800721c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f002 0302 	and.w	r3, r2, #2
 800722c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007230:	2300      	movs	r3, #0
 8007232:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007236:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800723a:	460b      	mov	r3, r1
 800723c:	4313      	orrs	r3, r2
 800723e:	d041      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007246:	2b05      	cmp	r3, #5
 8007248:	d824      	bhi.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800724a:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	0800729d 	.word	0x0800729d
 8007254:	08007269 	.word	0x08007269
 8007258:	0800727f 	.word	0x0800727f
 800725c:	0800729d 	.word	0x0800729d
 8007260:	0800729d 	.word	0x0800729d
 8007264:	0800729d 	.word	0x0800729d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726c:	3308      	adds	r3, #8
 800726e:	2101      	movs	r1, #1
 8007270:	4618      	mov	r0, r3
 8007272:	f000 ff71 	bl	8008158 <RCCEx_PLL2_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800727c:	e00f      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800727e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007282:	3328      	adds	r3, #40	@ 0x28
 8007284:	2101      	movs	r1, #1
 8007286:	4618      	mov	r0, r3
 8007288:	f001 f818 	bl	80082bc <RCCEx_PLL3_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007292:	e004      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800729a:	e000      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800729c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072a6:	4b96      	ldr	r3, [pc, #600]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072aa:	f023 0107 	bic.w	r1, r3, #7
 80072ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072b4:	4a92      	ldr	r2, [pc, #584]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072b6:	430b      	orrs	r3, r1
 80072b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80072ba:	e003      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f002 0304 	and.w	r3, r2, #4
 80072d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d044      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80072e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d825      	bhi.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80072f0:	a201      	add	r2, pc, #4	@ (adr r2, 80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	08007345 	.word	0x08007345
 80072fc:	08007311 	.word	0x08007311
 8007300:	08007327 	.word	0x08007327
 8007304:	08007345 	.word	0x08007345
 8007308:	08007345 	.word	0x08007345
 800730c:	08007345 	.word	0x08007345
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007314:	3308      	adds	r3, #8
 8007316:	2101      	movs	r1, #1
 8007318:	4618      	mov	r0, r3
 800731a:	f000 ff1d 	bl	8008158 <RCCEx_PLL2_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007324:	e00f      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732a:	3328      	adds	r3, #40	@ 0x28
 800732c:	2101      	movs	r1, #1
 800732e:	4618      	mov	r0, r3
 8007330:	f000 ffc4 	bl	80082bc <RCCEx_PLL3_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800733a:	e004      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007342:	e000      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10b      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800734e:	4b6c      	ldr	r3, [pc, #432]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007352:	f023 0107 	bic.w	r1, r3, #7
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800735e:	4a68      	ldr	r2, [pc, #416]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007360:	430b      	orrs	r3, r1
 8007362:	6593      	str	r3, [r2, #88]	@ 0x58
 8007364:	e003      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800736a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f002 0320 	and.w	r3, r2, #32
 800737a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800737e:	2300      	movs	r3, #0
 8007380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007388:	460b      	mov	r3, r1
 800738a:	4313      	orrs	r3, r2
 800738c:	d055      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800739a:	d033      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800739c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073a0:	d82c      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a6:	d02f      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ac:	d826      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073b2:	d02b      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80073b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073b8:	d820      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073be:	d012      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80073c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c4:	d81a      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d022      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80073ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ce:	d115      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d4:	3308      	adds	r3, #8
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 febd 	bl	8008158 <RCCEx_PLL2_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073e4:	e015      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	3328      	adds	r3, #40	@ 0x28
 80073ec:	2102      	movs	r1, #2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 ff64 	bl	80082bc <RCCEx_PLL3_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073fa:	e00a      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007402:	e006      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007404:	bf00      	nop
 8007406:	e004      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007408:	bf00      	nop
 800740a:	e002      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800740c:	bf00      	nop
 800740e:	e000      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800741a:	4b39      	ldr	r3, [pc, #228]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800741c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742a:	4a35      	ldr	r2, [pc, #212]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800742c:	430b      	orrs	r3, r1
 800742e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007430:	e003      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800744a:	2300      	movs	r3, #0
 800744c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007450:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007454:	460b      	mov	r3, r1
 8007456:	4313      	orrs	r3, r2
 8007458:	d058      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007462:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007466:	d033      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007468:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800746c:	d82c      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007472:	d02f      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007478:	d826      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800747a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800747e:	d02b      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007480:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007484:	d820      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007486:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748a:	d012      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800748c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007490:	d81a      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d022      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749a:	d115      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a0:	3308      	adds	r3, #8
 80074a2:	2100      	movs	r1, #0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fe57 	bl	8008158 <RCCEx_PLL2_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074b0:	e015      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	3328      	adds	r3, #40	@ 0x28
 80074b8:	2102      	movs	r1, #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fefe 	bl	80082bc <RCCEx_PLL3_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074c6:	e00a      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ce:	e006      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074d0:	bf00      	nop
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074d4:	bf00      	nop
 80074d6:	e002      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10e      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074e6:	4b06      	ldr	r3, [pc, #24]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074f6:	4a02      	ldr	r2, [pc, #8]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80074fc:	e006      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80074fe:	bf00      	nop
 8007500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800750c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800751c:	2300      	movs	r3, #0
 800751e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007522:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	d055      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007534:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007538:	d033      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800753a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800753e:	d82c      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007544:	d02f      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800754a:	d826      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800754c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007550:	d02b      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007552:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007556:	d820      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800755c:	d012      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800755e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007562:	d81a      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d022      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800756c:	d115      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007572:	3308      	adds	r3, #8
 8007574:	2100      	movs	r1, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fdee 	bl	8008158 <RCCEx_PLL2_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007582:	e015      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007588:	3328      	adds	r3, #40	@ 0x28
 800758a:	2102      	movs	r1, #2
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fe95 	bl	80082bc <RCCEx_PLL3_Config>
 8007592:	4603      	mov	r3, r0
 8007594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007598:	e00a      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075a0:	e006      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075a2:	bf00      	nop
 80075a4:	e004      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075a6:	bf00      	nop
 80075a8:	e002      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075aa:	bf00      	nop
 80075ac:	e000      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075b8:	4ba1      	ldr	r3, [pc, #644]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075c8:	4a9d      	ldr	r2, [pc, #628]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ca:	430b      	orrs	r3, r1
 80075cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ce:	e003      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80075d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f002 0308 	and.w	r3, r2, #8
 80075e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075e8:	2300      	movs	r3, #0
 80075ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80075f2:	460b      	mov	r3, r1
 80075f4:	4313      	orrs	r3, r2
 80075f6:	d01e      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007604:	d10c      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760a:	3328      	adds	r3, #40	@ 0x28
 800760c:	2102      	movs	r1, #2
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fe54 	bl	80082bc <RCCEx_PLL3_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007620:	4b87      	ldr	r3, [pc, #540]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007624:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007630:	4a83      	ldr	r2, [pc, #524]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007632:	430b      	orrs	r3, r1
 8007634:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f002 0310 	and.w	r3, r2, #16
 8007642:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007646:	2300      	movs	r3, #0
 8007648:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800764c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007650:	460b      	mov	r3, r1
 8007652:	4313      	orrs	r3, r2
 8007654:	d01e      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800765e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007662:	d10c      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007668:	3328      	adds	r3, #40	@ 0x28
 800766a:	2102      	movs	r1, #2
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fe25 	bl	80082bc <RCCEx_PLL3_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800767e:	4b70      	ldr	r3, [pc, #448]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800768e:	4a6c      	ldr	r2, [pc, #432]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007690:	430b      	orrs	r3, r1
 8007692:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80076a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80076ae:	460b      	mov	r3, r1
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d03e      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076c0:	d022      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80076c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076c6:	d81b      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d0:	d00b      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80076d2:	e015      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d8:	3308      	adds	r3, #8
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fd3b 	bl	8008158 <RCCEx_PLL2_Config>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076e8:	e00f      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ee:	3328      	adds	r3, #40	@ 0x28
 80076f0:	2102      	movs	r1, #2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fde2 	bl	80082bc <RCCEx_PLL3_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076fe:	e004      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007706:	e000      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10b      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007712:	4b4b      	ldr	r3, [pc, #300]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007716:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007722:	4a47      	ldr	r2, [pc, #284]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007724:	430b      	orrs	r3, r1
 8007726:	6593      	str	r3, [r2, #88]	@ 0x58
 8007728:	e003      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800773e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007740:	2300      	movs	r3, #0
 8007742:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007744:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007748:	460b      	mov	r3, r1
 800774a:	4313      	orrs	r3, r2
 800774c:	d03b      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800774e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007756:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800775a:	d01f      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800775c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007760:	d818      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007766:	d003      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800776c:	d007      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800776e:	e011      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007770:	4b33      	ldr	r3, [pc, #204]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	4a32      	ldr	r2, [pc, #200]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800777a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800777c:	e00f      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007782:	3328      	adds	r3, #40	@ 0x28
 8007784:	2101      	movs	r1, #1
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fd98 	bl	80082bc <RCCEx_PLL3_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007792:	e004      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800779a:	e000      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800779c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10b      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077a6:	4b26      	ldr	r3, [pc, #152]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b6:	4a22      	ldr	r2, [pc, #136]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077b8:	430b      	orrs	r3, r1
 80077ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80077bc:	e003      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80077d4:	2300      	movs	r3, #0
 80077d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80077d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80077dc:	460b      	mov	r3, r1
 80077de:	4313      	orrs	r3, r2
 80077e0:	d034      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80077ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f0:	d007      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80077f2:	e011      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f4:	4b12      	ldr	r3, [pc, #72]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	4a11      	ldr	r2, [pc, #68]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007800:	e00e      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007806:	3308      	adds	r3, #8
 8007808:	2102      	movs	r1, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fca4 	bl	8008158 <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007816:	e003      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800781e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10d      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007828:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800782a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007836:	4a02      	ldr	r2, [pc, #8]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007838:	430b      	orrs	r3, r1
 800783a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800783c:	e006      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800783e:	bf00      	nop
 8007840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800785a:	2300      	movs	r3, #0
 800785c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800785e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	d00c      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786c:	3328      	adds	r3, #40	@ 0x28
 800786e:	2102      	movs	r1, #2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fd23 	bl	80082bc <RCCEx_PLL3_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800788e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007890:	2300      	movs	r3, #0
 8007892:	667b      	str	r3, [r7, #100]	@ 0x64
 8007894:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007898:	460b      	mov	r3, r1
 800789a:	4313      	orrs	r3, r2
 800789c:	d038      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078aa:	d018      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80078ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b0:	d811      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b6:	d014      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80078b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078bc:	d80b      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80078c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c6:	d106      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c8:	4bc3      	ldr	r3, [pc, #780]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	4ac2      	ldr	r2, [pc, #776]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80078d4:	e008      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078dc:	e004      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078f0:	4bb9      	ldr	r3, [pc, #740]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007900:	4ab5      	ldr	r2, [pc, #724]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007902:	430b      	orrs	r3, r1
 8007904:	6553      	str	r3, [r2, #84]	@ 0x54
 8007906:	e003      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800790c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800791c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800791e:	2300      	movs	r3, #0
 8007920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007922:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	d009      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800792c:	4baa      	ldr	r3, [pc, #680]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007930:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793a:	4aa7      	ldr	r2, [pc, #668]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800793c:	430b      	orrs	r3, r1
 800793e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800794c:	653b      	str	r3, [r7, #80]	@ 0x50
 800794e:	2300      	movs	r3, #0
 8007950:	657b      	str	r3, [r7, #84]	@ 0x54
 8007952:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007956:	460b      	mov	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	d00a      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800795c:	4b9e      	ldr	r3, [pc, #632]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007968:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800796c:	4a9a      	ldr	r2, [pc, #616]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800796e:	430b      	orrs	r3, r1
 8007970:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800797e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007980:	2300      	movs	r3, #0
 8007982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007984:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007988:	460b      	mov	r3, r1
 800798a:	4313      	orrs	r3, r2
 800798c:	d009      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800798e:	4b92      	ldr	r3, [pc, #584]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007992:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800799c:	4a8e      	ldr	r2, [pc, #568]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800799e:	430b      	orrs	r3, r1
 80079a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80079ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80079b0:	2300      	movs	r3, #0
 80079b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d00e      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079be:	4b86      	ldr	r3, [pc, #536]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	4a85      	ldr	r2, [pc, #532]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079c8:	6113      	str	r3, [r2, #16]
 80079ca:	4b83      	ldr	r3, [pc, #524]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079cc:	6919      	ldr	r1, [r3, #16]
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079d6:	4a80      	ldr	r2, [pc, #512]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079d8:	430b      	orrs	r3, r1
 80079da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80079e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ea:	2300      	movs	r3, #0
 80079ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80079f2:	460b      	mov	r3, r1
 80079f4:	4313      	orrs	r3, r2
 80079f6:	d009      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079f8:	4b77      	ldr	r3, [pc, #476]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	4a74      	ldr	r2, [pc, #464]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a28:	4b6b      	ldr	r3, [pc, #428]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a38:	4a67      	ldr	r2, [pc, #412]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	2100      	movs	r1, #0
 8007a48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a54:	460b      	mov	r3, r1
 8007a56:	4313      	orrs	r3, r2
 8007a58:	d011      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5e:	3308      	adds	r3, #8
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fb78 	bl	8008158 <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	2100      	movs	r1, #0
 8007a88:	6239      	str	r1, [r7, #32]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a94:	460b      	mov	r3, r1
 8007a96:	4313      	orrs	r3, r2
 8007a98:	d011      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fb58 	bl	8008158 <RCCEx_PLL2_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	61b9      	str	r1, [r7, #24]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	d011      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ade:	3308      	adds	r3, #8
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fb38 	bl	8008158 <RCCEx_PLL2_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	2100      	movs	r1, #0
 8007b08:	6139      	str	r1, [r7, #16]
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b14:	460b      	mov	r3, r1
 8007b16:	4313      	orrs	r3, r2
 8007b18:	d011      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	3328      	adds	r3, #40	@ 0x28
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fbca 	bl	80082bc <RCCEx_PLL3_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	2100      	movs	r1, #0
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	f003 0310 	and.w	r3, r3, #16
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b54:	460b      	mov	r3, r1
 8007b56:	4313      	orrs	r3, r2
 8007b58:	d011      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5e:	3328      	adds	r3, #40	@ 0x28
 8007b60:	2101      	movs	r1, #1
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fbaa 	bl	80082bc <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	2100      	movs	r1, #0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b94:	460b      	mov	r3, r1
 8007b96:	4313      	orrs	r3, r2
 8007b98:	d011      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9e:	3328      	adds	r3, #40	@ 0x28
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb8a 	bl	80082bc <RCCEx_PLL3_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007bbe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	e000      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd8:	58024400 	.word	0x58024400

08007bdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007be0:	f7fe fd96 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8007be4:	4602      	mov	r2, r0
 8007be6:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	091b      	lsrs	r3, r3, #4
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	4904      	ldr	r1, [pc, #16]	@ (8007c04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bf2:	5ccb      	ldrb	r3, [r1, r3]
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	58024400 	.word	0x58024400
 8007c04:	0800f9e0 	.word	0x0800f9e0

08007c08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b089      	sub	sp, #36	@ 0x24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c10:	4ba1      	ldr	r3, [pc, #644]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c1a:	4b9f      	ldr	r3, [pc, #636]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	0b1b      	lsrs	r3, r3, #12
 8007c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c26:	4b9c      	ldr	r3, [pc, #624]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2a:	091b      	lsrs	r3, r3, #4
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c32:	4b99      	ldr	r3, [pc, #612]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c36:	08db      	lsrs	r3, r3, #3
 8007c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8111 	beq.w	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	f000 8083 	beq.w	8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	f200 80a1 	bhi.w	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d056      	beq.n	8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c72:	e099      	b.n	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c74:	4b88      	ldr	r3, [pc, #544]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d02d      	beq.n	8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c80:	4b85      	ldr	r3, [pc, #532]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	08db      	lsrs	r3, r3, #3
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	4a84      	ldr	r2, [pc, #528]	@ (8007e9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007caa:	4b7b      	ldr	r3, [pc, #492]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cda:	e087      	b.n	8007dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cee:	4b6a      	ldr	r3, [pc, #424]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d1e:	e065      	b.n	8007dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d32:	4b59      	ldr	r3, [pc, #356]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d62:	e043      	b.n	8007dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b48      	ldr	r3, [pc, #288]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da6:	e021      	b.n	8007dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dba:	4b37      	ldr	r3, [pc, #220]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007dec:	4b2a      	ldr	r3, [pc, #168]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	0a5b      	lsrs	r3, r3, #9
 8007df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e12:	ee17 2a90 	vmov	r2, s15
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e40:	ee17 2a90 	vmov	r2, s15
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e48:	4b13      	ldr	r3, [pc, #76]	@ (8007e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4c:	0e1b      	lsrs	r3, r3, #24
 8007e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6e:	ee17 2a90 	vmov	r2, s15
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e76:	e008      	b.n	8007e8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	609a      	str	r2, [r3, #8]
}
 8007e8a:	bf00      	nop
 8007e8c:	3724      	adds	r7, #36	@ 0x24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	03d09000 	.word	0x03d09000
 8007ea0:	46000000 	.word	0x46000000
 8007ea4:	4c742400 	.word	0x4c742400
 8007ea8:	4a742400 	.word	0x4a742400
 8007eac:	4bbebc20 	.word	0x4bbebc20

08007eb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b089      	sub	sp, #36	@ 0x24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eb8:	4ba1      	ldr	r3, [pc, #644]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	f003 0303 	and.w	r3, r3, #3
 8007ec0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007ec2:	4b9f      	ldr	r3, [pc, #636]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	0d1b      	lsrs	r3, r3, #20
 8007ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ecc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ece:	4b9c      	ldr	r3, [pc, #624]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed2:	0a1b      	lsrs	r3, r3, #8
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007eda:	4b99      	ldr	r3, [pc, #612]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ede:	08db      	lsrs	r3, r3, #3
 8007ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8111 	beq.w	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	f000 8083 	beq.w	800800c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	f200 80a1 	bhi.w	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d056      	beq.n	8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f1a:	e099      	b.n	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f1c:	4b88      	ldr	r3, [pc, #544]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d02d      	beq.n	8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f28:	4b85      	ldr	r3, [pc, #532]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	08db      	lsrs	r3, r3, #3
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	4a84      	ldr	r2, [pc, #528]	@ (8008144 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f52:	4b7b      	ldr	r3, [pc, #492]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f82:	e087      	b.n	8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800814c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f96:	4b6a      	ldr	r3, [pc, #424]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007faa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fc6:	e065      	b.n	8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b59      	ldr	r3, [pc, #356]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800a:	e043      	b.n	8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008016:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	4b48      	ldr	r3, [pc, #288]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008032:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800804e:	e021      	b.n	8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800805e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008062:	4b37      	ldr	r3, [pc, #220]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008072:	ed97 6a03 	vldr	s12, [r7, #12]
 8008076:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008092:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008094:	4b2a      	ldr	r3, [pc, #168]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008098:	0a5b      	lsrs	r3, r3, #9
 800809a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ba:	ee17 2a90 	vmov	r2, s15
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80080c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c6:	0c1b      	lsrs	r3, r3, #16
 80080c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e8:	ee17 2a90 	vmov	r2, s15
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80080f0:	4b13      	ldr	r3, [pc, #76]	@ (8008140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f4:	0e1b      	lsrs	r3, r3, #24
 80080f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800810a:	edd7 6a07 	vldr	s13, [r7, #28]
 800810e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008116:	ee17 2a90 	vmov	r2, s15
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800811e:	e008      	b.n	8008132 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	609a      	str	r2, [r3, #8]
}
 8008132:	bf00      	nop
 8008134:	3724      	adds	r7, #36	@ 0x24
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	58024400 	.word	0x58024400
 8008144:	03d09000 	.word	0x03d09000
 8008148:	46000000 	.word	0x46000000
 800814c:	4c742400 	.word	0x4c742400
 8008150:	4a742400 	.word	0x4a742400
 8008154:	4bbebc20 	.word	0x4bbebc20

08008158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008166:	4b53      	ldr	r3, [pc, #332]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	2b03      	cmp	r3, #3
 8008170:	d101      	bne.n	8008176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e099      	b.n	80082aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008176:	4b4f      	ldr	r3, [pc, #316]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a4e      	ldr	r2, [pc, #312]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800817c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008182:	f7fc fb5b 	bl	800483c <HAL_GetTick>
 8008186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008188:	e008      	b.n	800819c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800818a:	f7fc fb57 	bl	800483c <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e086      	b.n	80082aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800819c:	4b45      	ldr	r3, [pc, #276]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f0      	bne.n	800818a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081a8:	4b42      	ldr	r3, [pc, #264]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	031b      	lsls	r3, r3, #12
 80081b6:	493f      	ldr	r1, [pc, #252]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	025b      	lsls	r3, r3, #9
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	061b      	lsls	r3, r3, #24
 80081e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081ec:	4931      	ldr	r1, [pc, #196]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081f2:	4b30      	ldr	r3, [pc, #192]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	492d      	ldr	r1, [pc, #180]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008200:	4313      	orrs	r3, r2
 8008202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008204:	4b2b      	ldr	r3, [pc, #172]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	f023 0220 	bic.w	r2, r3, #32
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	4928      	ldr	r1, [pc, #160]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008212:	4313      	orrs	r3, r2
 8008214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008216:	4b27      	ldr	r3, [pc, #156]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	4a26      	ldr	r2, [pc, #152]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800821c:	f023 0310 	bic.w	r3, r3, #16
 8008220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008222:	4b24      	ldr	r3, [pc, #144]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008226:	4b24      	ldr	r3, [pc, #144]	@ (80082b8 <RCCEx_PLL2_Config+0x160>)
 8008228:	4013      	ands	r3, r2
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	69d2      	ldr	r2, [r2, #28]
 800822e:	00d2      	lsls	r2, r2, #3
 8008230:	4920      	ldr	r1, [pc, #128]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008232:	4313      	orrs	r3, r2
 8008234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008236:	4b1f      	ldr	r3, [pc, #124]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	4a1e      	ldr	r2, [pc, #120]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800823c:	f043 0310 	orr.w	r3, r3, #16
 8008240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008248:	4b1a      	ldr	r3, [pc, #104]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	4a19      	ldr	r2, [pc, #100]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800824e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008254:	e00f      	b.n	8008276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d106      	bne.n	800826a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800825c:	4b15      	ldr	r3, [pc, #84]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800825e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008260:	4a14      	ldr	r2, [pc, #80]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008268:	e005      	b.n	8008276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800826a:	4b12      	ldr	r3, [pc, #72]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800826c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826e:	4a11      	ldr	r2, [pc, #68]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008276:	4b0f      	ldr	r3, [pc, #60]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a0e      	ldr	r2, [pc, #56]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800827c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008282:	f7fc fadb 	bl	800483c <HAL_GetTick>
 8008286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008288:	e008      	b.n	800829c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800828a:	f7fc fad7 	bl	800483c <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d901      	bls.n	800829c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e006      	b.n	80082aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800829c:	4b05      	ldr	r3, [pc, #20]	@ (80082b4 <RCCEx_PLL2_Config+0x15c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d0f0      	beq.n	800828a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	58024400 	.word	0x58024400
 80082b8:	ffff0007 	.word	0xffff0007

080082bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ca:	4b53      	ldr	r3, [pc, #332]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80082cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d101      	bne.n	80082da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e099      	b.n	800840e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082da:	4b4f      	ldr	r3, [pc, #316]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a4e      	ldr	r2, [pc, #312]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80082e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082e6:	f7fc faa9 	bl	800483c <HAL_GetTick>
 80082ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082ec:	e008      	b.n	8008300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082ee:	f7fc faa5 	bl	800483c <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e086      	b.n	800840e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008300:	4b45      	ldr	r3, [pc, #276]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f0      	bne.n	80082ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800830c:	4b42      	ldr	r3, [pc, #264]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 800830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	493f      	ldr	r1, [pc, #252]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 800831c:	4313      	orrs	r3, r2
 800831e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	3b01      	subs	r3, #1
 8008326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	3b01      	subs	r3, #1
 8008330:	025b      	lsls	r3, r3, #9
 8008332:	b29b      	uxth	r3, r3
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	3b01      	subs	r3, #1
 800833c:	041b      	lsls	r3, r3, #16
 800833e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	3b01      	subs	r3, #1
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008350:	4931      	ldr	r1, [pc, #196]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008352:	4313      	orrs	r3, r2
 8008354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008356:	4b30      	ldr	r3, [pc, #192]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	492d      	ldr	r1, [pc, #180]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008364:	4313      	orrs	r3, r2
 8008366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008368:	4b2b      	ldr	r3, [pc, #172]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 800836a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	4928      	ldr	r1, [pc, #160]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008376:	4313      	orrs	r3, r2
 8008378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800837a:	4b27      	ldr	r3, [pc, #156]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 800837c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837e:	4a26      	ldr	r2, [pc, #152]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008386:	4b24      	ldr	r3, [pc, #144]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800838a:	4b24      	ldr	r3, [pc, #144]	@ (800841c <RCCEx_PLL3_Config+0x160>)
 800838c:	4013      	ands	r3, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	69d2      	ldr	r2, [r2, #28]
 8008392:	00d2      	lsls	r2, r2, #3
 8008394:	4920      	ldr	r1, [pc, #128]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800839a:	4b1f      	ldr	r3, [pc, #124]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	4a1e      	ldr	r2, [pc, #120]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d106      	bne.n	80083ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	4a19      	ldr	r2, [pc, #100]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083b8:	e00f      	b.n	80083da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d106      	bne.n	80083ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083c0:	4b15      	ldr	r3, [pc, #84]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	4a14      	ldr	r2, [pc, #80]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083cc:	e005      	b.n	80083da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083ce:	4b12      	ldr	r3, [pc, #72]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	4a11      	ldr	r2, [pc, #68]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083da:	4b0f      	ldr	r3, [pc, #60]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a0e      	ldr	r2, [pc, #56]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 80083e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083e6:	f7fc fa29 	bl	800483c <HAL_GetTick>
 80083ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083ec:	e008      	b.n	8008400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083ee:	f7fc fa25 	bl	800483c <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d901      	bls.n	8008400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e006      	b.n	800840e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <RCCEx_PLL3_Config+0x15c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0f0      	beq.n	80083ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	58024400 	.word	0x58024400
 800841c:	ffff0007 	.word	0xffff0007

08008420 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e10f      	b.n	8008652 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a87      	ldr	r2, [pc, #540]	@ (800865c <HAL_SPI_Init+0x23c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d00f      	beq.n	8008462 <HAL_SPI_Init+0x42>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a86      	ldr	r2, [pc, #536]	@ (8008660 <HAL_SPI_Init+0x240>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00a      	beq.n	8008462 <HAL_SPI_Init+0x42>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a84      	ldr	r2, [pc, #528]	@ (8008664 <HAL_SPI_Init+0x244>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d005      	beq.n	8008462 <HAL_SPI_Init+0x42>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	2b0f      	cmp	r3, #15
 800845c:	d901      	bls.n	8008462 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e0f7      	b.n	8008652 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 ff4c 	bl	8009300 <SPI_GetPacketSize>
 8008468:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a7b      	ldr	r2, [pc, #492]	@ (800865c <HAL_SPI_Init+0x23c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00c      	beq.n	800848e <HAL_SPI_Init+0x6e>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a79      	ldr	r2, [pc, #484]	@ (8008660 <HAL_SPI_Init+0x240>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d007      	beq.n	800848e <HAL_SPI_Init+0x6e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a78      	ldr	r2, [pc, #480]	@ (8008664 <HAL_SPI_Init+0x244>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d002      	beq.n	800848e <HAL_SPI_Init+0x6e>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b08      	cmp	r3, #8
 800848c:	d811      	bhi.n	80084b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008492:	4a72      	ldr	r2, [pc, #456]	@ (800865c <HAL_SPI_Init+0x23c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a70      	ldr	r2, [pc, #448]	@ (8008660 <HAL_SPI_Init+0x240>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d004      	beq.n	80084ac <HAL_SPI_Init+0x8c>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a6f      	ldr	r2, [pc, #444]	@ (8008664 <HAL_SPI_Init+0x244>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d104      	bne.n	80084b6 <HAL_SPI_Init+0x96>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d901      	bls.n	80084b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e0cd      	b.n	8008652 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7fb fc68 	bl	8003da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0201 	bic.w	r2, r2, #1
 80084e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80084f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084fc:	d119      	bne.n	8008532 <HAL_SPI_Init+0x112>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008506:	d103      	bne.n	8008510 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800850c:	2b00      	cmp	r3, #0
 800850e:	d008      	beq.n	8008522 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10c      	bne.n	8008532 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800851c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008520:	d107      	bne.n	8008532 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008530:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00f      	beq.n	800855e <HAL_SPI_Init+0x13e>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b06      	cmp	r3, #6
 8008544:	d90b      	bls.n	800855e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e007      	b.n	800856e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800856c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69da      	ldr	r2, [r3, #28]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	431a      	orrs	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008580:	ea42 0103 	orr.w	r1, r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	431a      	orrs	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ce:	ea42 0103 	orr.w	r1, r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d113      	bne.n	800860e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800860c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0201 	bic.w	r2, r2, #1
 800861c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40013000 	.word	0x40013000
 8008660:	40003800 	.word	0x40003800
 8008664:	40003c00 	.word	0x40003c00

08008668 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e01b      	b.n	80086b2 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 0201 	bic.w	r2, r2, #1
 8008690:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7fb fc0a 	bl	8003eac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08e      	sub	sp, #56	@ 0x38
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3320      	adds	r3, #32
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3330      	adds	r3, #48	@ 0x30
 80086d8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086de:	095b      	lsrs	r3, r3, #5
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3301      	adds	r3, #1
 80086e4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086e6:	f7fc f8a9 	bl	800483c <HAL_GetTick>
 80086ea:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80086ec:	887b      	ldrh	r3, [r7, #2]
 80086ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80086f0:	887b      	ldrh	r3, [r7, #2]
 80086f2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d001      	beq.n	8008704 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8008700:	2302      	movs	r3, #2
 8008702:	e310      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <HAL_SPI_TransmitReceive+0x5a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_SPI_TransmitReceive+0x5a>
 8008710:	887b      	ldrh	r3, [r7, #2]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e305      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x6c>
 8008724:	2302      	movs	r3, #2
 8008726:	e2fe      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x66a>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2205      	movs	r2, #5
 8008734:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	887a      	ldrh	r2, [r7, #2]
 800874a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	887a      	ldrh	r2, [r7, #2]
 8008752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	887a      	ldrh	r2, [r7, #2]
 8008760:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	887a      	ldrh	r2, [r7, #2]
 8008768:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008786:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a70      	ldr	r2, [pc, #448]	@ (8008950 <HAL_SPI_TransmitReceive+0x294>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d009      	beq.n	80087a6 <HAL_SPI_TransmitReceive+0xea>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a6f      	ldr	r2, [pc, #444]	@ (8008954 <HAL_SPI_TransmitReceive+0x298>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d004      	beq.n	80087a6 <HAL_SPI_TransmitReceive+0xea>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a6d      	ldr	r2, [pc, #436]	@ (8008958 <HAL_SPI_TransmitReceive+0x29c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d102      	bne.n	80087ac <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80087a6:	2310      	movs	r3, #16
 80087a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087aa:	e001      	b.n	80087b0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80087ac:	2308      	movs	r3, #8
 80087ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	4b69      	ldr	r3, [pc, #420]	@ (800895c <HAL_SPI_TransmitReceive+0x2a0>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	8879      	ldrh	r1, [r7, #2]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	6812      	ldr	r2, [r2, #0]
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0201 	orr.w	r2, r2, #1
 80087d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087dc:	d107      	bne.n	80087ee <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	2b0f      	cmp	r3, #15
 80087f4:	f240 80a2 	bls.w	800893c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	089b      	lsrs	r3, r3, #2
 80087fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087fe:	e094      	b.n	800892a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b02      	cmp	r3, #2
 800880c:	d120      	bne.n	8008850 <HAL_SPI_TransmitReceive+0x194>
 800880e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01d      	beq.n	8008850 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008814:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008816:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800881c:	429a      	cmp	r2, r3
 800881e:	d217      	bcs.n	8008850 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800884e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008858:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d065      	beq.n	800892a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	d118      	bne.n	800889e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008874:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008876:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800887c:	1d1a      	adds	r2, r3, #4
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800889a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800889c:	e045      	b.n	800892a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800889e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80088a0:	8bfb      	ldrh	r3, [r7, #30]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d21d      	bcs.n	80088e2 <HAL_SPI_TransmitReceive+0x226>
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d018      	beq.n	80088e2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80088ba:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80088e0:	e023      	b.n	800892a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e2:	f7fb ffab 	bl	800483c <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d803      	bhi.n	80088fa <HAL_SPI_TransmitReceive+0x23e>
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d102      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x244>
 80088fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d114      	bne.n	800892a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 fc2f 	bl	8009164 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800890c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e1fd      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800892a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800892c:	2b00      	cmp	r3, #0
 800892e:	f47f af67 	bne.w	8008800 <HAL_SPI_TransmitReceive+0x144>
 8008932:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af63 	bne.w	8008800 <HAL_SPI_TransmitReceive+0x144>
 800893a:	e1ce      	b.n	8008cda <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b07      	cmp	r3, #7
 8008942:	f240 81c2 	bls.w	8008cca <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8008946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800894c:	e0c9      	b.n	8008ae2 <HAL_SPI_TransmitReceive+0x426>
 800894e:	bf00      	nop
 8008950:	40013000 	.word	0x40013000
 8008954:	40003800 	.word	0x40003800
 8008958:	40003c00 	.word	0x40003c00
 800895c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b02      	cmp	r3, #2
 800896c:	d11f      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x2f2>
 800896e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01c      	beq.n	80089ae <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008974:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008976:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800897c:	429a      	cmp	r2, r3
 800897e:	d216      	bcs.n	80089ae <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008984:	881a      	ldrh	r2, [r3, #0]
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800898e:	1c9a      	adds	r2, r3, #2
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800899a:	b29b      	uxth	r3, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80089b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8092 	beq.w	8008ae2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d118      	bne.n	80089fe <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089d0:	6a3a      	ldr	r2, [r7, #32]
 80089d2:	8812      	ldrh	r2, [r2, #0]
 80089d4:	b292      	uxth	r2, r2
 80089d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089dc:	1c9a      	adds	r2, r3, #2
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80089fc:	e071      	b.n	8008ae2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80089fe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008a00:	8bfb      	ldrh	r3, [r7, #30]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d228      	bcs.n	8008a58 <HAL_SPI_TransmitReceive+0x39c>
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d023      	beq.n	8008a58 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a14:	6a3a      	ldr	r2, [r7, #32]
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	b292      	uxth	r2, r2
 8008a1a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a20:	1c9a      	adds	r2, r3, #2
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a2a:	6a3a      	ldr	r2, [r7, #32]
 8008a2c:	8812      	ldrh	r2, [r2, #0]
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a36:	1c9a      	adds	r2, r3, #2
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b02      	subs	r3, #2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a54:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008a56:	e044      	b.n	8008ae2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008a58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d11d      	bne.n	8008a9a <HAL_SPI_TransmitReceive+0x3de>
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d018      	beq.n	8008a9a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a6c:	6a3a      	ldr	r2, [r7, #32]
 8008a6e:	8812      	ldrh	r2, [r2, #0]
 8008a70:	b292      	uxth	r2, r2
 8008a72:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a78:	1c9a      	adds	r2, r3, #2
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a96:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008a98:	e023      	b.n	8008ae2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a9a:	f7fb fecf 	bl	800483c <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d803      	bhi.n	8008ab2 <HAL_SPI_TransmitReceive+0x3f6>
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d102      	bne.n	8008ab8 <HAL_SPI_TransmitReceive+0x3fc>
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d114      	bne.n	8008ae2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fb53 	bl	8009164 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ac4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e121      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ae2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f47f af3b 	bne.w	8008960 <HAL_SPI_TransmitReceive+0x2a4>
 8008aea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f47f af37 	bne.w	8008960 <HAL_SPI_TransmitReceive+0x2a4>
 8008af2:	e0f2      	b.n	8008cda <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d121      	bne.n	8008b46 <HAL_SPI_TransmitReceive+0x48a>
 8008b02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01e      	beq.n	8008b46 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008b08:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008b0a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8008b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d218      	bcs.n	8008b46 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3320      	adds	r3, #32
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b44:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008b4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 80ba 	beq.w	8008cca <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d11b      	bne.n	8008b9c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b98:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008b9a:	e096      	b.n	8008cca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008b9c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008b9e:	8bfb      	ldrh	r3, [r7, #30]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d24a      	bcs.n	8008c3a <HAL_SPI_TransmitReceive+0x57e>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d045      	beq.n	8008c3a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bba:	7812      	ldrb	r2, [r2, #0]
 8008bbc:	b2d2      	uxtb	r2, r2
 8008bbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd6:	7812      	ldrb	r2, [r2, #0]
 8008bd8:	b2d2      	uxtb	r2, r2
 8008bda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	b2d2      	uxtb	r2, r2
 8008c12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b04      	subs	r3, #4
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c36:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008c38:	e047      	b.n	8008cca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008c3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c3c:	2b03      	cmp	r3, #3
 8008c3e:	d820      	bhi.n	8008c82 <HAL_SPI_TransmitReceive+0x5c6>
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01b      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c56:	7812      	ldrb	r2, [r2, #0]
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008c80:	e023      	b.n	8008cca <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c82:	f7fb fddb 	bl	800483c <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d803      	bhi.n	8008c9a <HAL_SPI_TransmitReceive+0x5de>
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c98:	d102      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x5e4>
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d114      	bne.n	8008cca <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fa5f 	bl	8009164 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e02d      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008cca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f47f af11 	bne.w	8008af4 <HAL_SPI_TransmitReceive+0x438>
 8008cd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f47f af0d 	bne.w	8008af4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2108      	movs	r1, #8
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 fadd 	bl	80092a4 <SPI_WaitOnFlagUntilTimeout>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d007      	beq.n	8008d00 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cf6:	f043 0220 	orr.w	r2, r3, #32
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 fa2f 	bl	8009164 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008d24:	2300      	movs	r3, #0
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3730      	adds	r7, #48	@ 0x30
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop

08008d30 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	@ 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008d48:	6a3a      	ldr	r2, [r7, #32]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d62:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3330      	adds	r3, #48	@ 0x30
 8008d6a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d010      	beq.n	8008d98 <HAL_SPI_IRQHandler+0x68>
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d8e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f9c3 	bl	800911c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008d96:	e192      	b.n	80090be <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d113      	bne.n	8008dca <HAL_SPI_IRQHandler+0x9a>
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10e      	bne.n	8008dca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	4798      	blx	r3
    handled = 1UL;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10f      	bne.n	8008df4 <HAL_SPI_IRQHandler+0xc4>
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d105      	bne.n	8008df4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4798      	blx	r3
    handled = 1UL;
 8008df0:	2301      	movs	r3, #1
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10f      	bne.n	8008e1e <HAL_SPI_IRQHandler+0xee>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
    handled = 1UL;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f040 8147 	bne.w	80090b4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	f003 0308 	and.w	r3, r3, #8
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 808b 	beq.w	8008f48 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699a      	ldr	r2, [r3, #24]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0208 	orr.w	r2, r2, #8
 8008e40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699a      	ldr	r2, [r3, #24]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f042 0210 	orr.w	r2, r2, #16
 8008e50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	699a      	ldr	r2, [r3, #24]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e60:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	691a      	ldr	r2, [r3, #16]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0208 	bic.w	r2, r2, #8
 8008e70:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d13d      	bne.n	8008efc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008e80:	e036      	b.n	8008ef0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b0f      	cmp	r3, #15
 8008e88:	d90b      	bls.n	8008ea2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008e94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	665a      	str	r2, [r3, #100]	@ 0x64
 8008ea0:	e01d      	b.n	8008ede <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	2b07      	cmp	r3, #7
 8008ea8:	d90b      	bls.n	8008ec2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	8812      	ldrh	r2, [r2, #0]
 8008eb2:	b292      	uxth	r2, r2
 8008eb4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eba:	1c9a      	adds	r2, r3, #2
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	665a      	str	r2, [r3, #100]	@ 0x64
 8008ec0:	e00d      	b.n	8008ede <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ece:	7812      	ldrb	r2, [r2, #0]
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1c2      	bne.n	8008e82 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f931 	bl	8009164 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f8f7 	bl	8009108 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008f1a:	e0d0      	b.n	80090be <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008f1c:	7cfb      	ldrb	r3, [r7, #19]
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d103      	bne.n	8008f2a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f8e6 	bl	80090f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008f28:	e0c6      	b.n	80090b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008f2a:	7cfb      	ldrb	r3, [r7, #19]
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d103      	bne.n	8008f38 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f8d5 	bl	80090e0 <HAL_SPI_RxCpltCallback>
    return;
 8008f36:	e0bf      	b.n	80090b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008f38:	7cfb      	ldrb	r3, [r7, #19]
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	f040 80bc 	bne.w	80090b8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f8c3 	bl	80090cc <HAL_SPI_TxCpltCallback>
    return;
 8008f46:	e0b7      	b.n	80090b8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80b5 	beq.w	80090be <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00f      	beq.n	8008f7e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f64:	f043 0204 	orr.w	r2, r3, #4
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00f      	beq.n	8008fa8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699a      	ldr	r2, [r3, #24]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fa6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00f      	beq.n	8008fd2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fb8:	f043 0208 	orr.w	r2, r3, #8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	699a      	ldr	r2, [r3, #24]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00f      	beq.n	8008ffc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fe2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699a      	ldr	r2, [r3, #24]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0220 	orr.w	r2, r2, #32
 8008ffa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009002:	2b00      	cmp	r3, #0
 8009004:	d05a      	beq.n	80090bc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0201 	bic.w	r2, r2, #1
 8009014:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6919      	ldr	r1, [r3, #16]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	4b28      	ldr	r3, [pc, #160]	@ (80090c4 <HAL_SPI_IRQHandler+0x394>)
 8009022:	400b      	ands	r3, r1
 8009024:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800902c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009030:	d138      	bne.n	80090a4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009040:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d013      	beq.n	8009072 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800904e:	4a1e      	ldr	r2, [pc, #120]	@ (80090c8 <HAL_SPI_IRQHandler+0x398>)
 8009050:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009056:	4618      	mov	r0, r3
 8009058:	f7fb fde6 	bl	8004c28 <HAL_DMA_Abort_IT>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d007      	beq.n	8009072 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009068:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009076:	2b00      	cmp	r3, #0
 8009078:	d020      	beq.n	80090bc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800907e:	4a12      	ldr	r2, [pc, #72]	@ (80090c8 <HAL_SPI_IRQHandler+0x398>)
 8009080:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009086:	4618      	mov	r0, r3
 8009088:	f7fb fdce 	bl	8004c28 <HAL_DMA_Abort_IT>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d014      	beq.n	80090bc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009098:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80090a2:	e00b      	b.n	80090bc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f82b 	bl	8009108 <HAL_SPI_ErrorCallback>
    return;
 80090b2:	e003      	b.n	80090bc <HAL_SPI_IRQHandler+0x38c>
    return;
 80090b4:	bf00      	nop
 80090b6:	e002      	b.n	80090be <HAL_SPI_IRQHandler+0x38e>
    return;
 80090b8:	bf00      	nop
 80090ba:	e000      	b.n	80090be <HAL_SPI_IRQHandler+0x38e>
    return;
 80090bc:	bf00      	nop
  }
}
 80090be:	3728      	adds	r7, #40	@ 0x28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	fffffc94 	.word	0xfffffc94
 80090c8:	08009131 	.word	0x08009131

080090cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff ffd6 	bl	8009108 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0208 	orr.w	r2, r2, #8
 8009182:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699a      	ldr	r2, [r3, #24]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0210 	orr.w	r2, r2, #16
 8009192:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6919      	ldr	r1, [r3, #16]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4b3c      	ldr	r3, [pc, #240]	@ (80092a0 <SPI_CloseTransfer+0x13c>)
 80091b0:	400b      	ands	r3, r1
 80091b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80091c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d014      	beq.n	80091fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00f      	beq.n	80091fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f042 0220 	orr.w	r2, r2, #32
 80091f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b03      	cmp	r3, #3
 8009204:	d014      	beq.n	8009230 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00f      	beq.n	8009230 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009216:	f043 0204 	orr.w	r2, r3, #4
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699a      	ldr	r2, [r3, #24]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800922e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00f      	beq.n	800925a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009240:	f043 0201 	orr.w	r2, r3, #1
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009258:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00f      	beq.n	8009284 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800926a:	f043 0208 	orr.w	r2, r3, #8
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009282:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	fffffc90 	.word	0xfffffc90

080092a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80092b4:	e010      	b.n	80092d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092b6:	f7fb fac1 	bl	800483c <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d803      	bhi.n	80092ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092cc:	d102      	bne.n	80092d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e00f      	b.n	80092f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	695a      	ldr	r2, [r3, #20]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4013      	ands	r3, r2
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	bf0c      	ite	eq
 80092e8:	2301      	moveq	r3, #1
 80092ea:	2300      	movne	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	461a      	mov	r2, r3
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d0df      	beq.n	80092b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930c:	095b      	lsrs	r3, r3, #5
 800930e:	3301      	adds	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	3307      	adds	r3, #7
 800931e:	08db      	lsrs	r3, r3, #3
 8009320:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	fb02 f303 	mul.w	r3, r2, r3
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e042      	b.n	80093ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f83b 	bl	80093d6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2224      	movs	r2, #36	@ 0x24
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0201 	bic.w	r2, r2, #1
 8009376:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fe29 	bl	8009fd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f8be 	bl	8009508 <UART_SetConfig>
 800938c:	4603      	mov	r3, r0
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e01b      	b.n	80093ce <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0201 	orr.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fea8 	bl	800a11c <UART_CheckIdleState>
 80093cc:	4603      	mov	r3, r0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b08a      	sub	sp, #40	@ 0x28
 80093ee:	af02      	add	r7, sp, #8
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009400:	2b20      	cmp	r3, #32
 8009402:	d17b      	bne.n	80094fc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <HAL_UART_Transmit+0x26>
 800940a:	88fb      	ldrh	r3, [r7, #6]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e074      	b.n	80094fe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2221      	movs	r2, #33	@ 0x21
 8009420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009424:	f7fb fa0a 	bl	800483c <HAL_GetTick>
 8009428:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	88fa      	ldrh	r2, [r7, #6]
 800942e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	88fa      	ldrh	r2, [r7, #6]
 8009436:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009442:	d108      	bne.n	8009456 <HAL_UART_Transmit+0x6c>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d104      	bne.n	8009456 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800944c:	2300      	movs	r3, #0
 800944e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	e003      	b.n	800945e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800945a:	2300      	movs	r3, #0
 800945c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800945e:	e030      	b.n	80094c2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2200      	movs	r2, #0
 8009468:	2180      	movs	r1, #128	@ 0x80
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 ff00 	bl	800a270 <UART_WaitOnFlagUntilTimeout>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e03d      	b.n	80094fe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009496:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	3302      	adds	r3, #2
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	e007      	b.n	80094b0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	781a      	ldrb	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	3301      	adds	r3, #1
 80094ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1c8      	bne.n	8009460 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2200      	movs	r2, #0
 80094d6:	2140      	movs	r1, #64	@ 0x40
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fec9 	bl	800a270 <UART_WaitOnFlagUntilTimeout>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e006      	b.n	80094fe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	e000      	b.n	80094fe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80094fc:	2302      	movs	r3, #2
  }
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3720      	adds	r7, #32
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800950c:	b092      	sub	sp, #72	@ 0x48
 800950e:	af00      	add	r7, sp, #0
 8009510:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	431a      	orrs	r2, r3
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	431a      	orrs	r2, r3
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	4313      	orrs	r3, r2
 800952e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4bbe      	ldr	r3, [pc, #760]	@ (8009830 <UART_SetConfig+0x328>)
 8009538:	4013      	ands	r3, r2
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009540:	430b      	orrs	r3, r1
 8009542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4ab3      	ldr	r2, [pc, #716]	@ (8009834 <UART_SetConfig+0x32c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d004      	beq.n	8009574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009570:	4313      	orrs	r3, r2
 8009572:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	4baf      	ldr	r3, [pc, #700]	@ (8009838 <UART_SetConfig+0x330>)
 800957c:	4013      	ands	r3, r2
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	6812      	ldr	r2, [r2, #0]
 8009582:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009584:	430b      	orrs	r3, r1
 8009586:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958e:	f023 010f 	bic.w	r1, r3, #15
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4aa6      	ldr	r2, [pc, #664]	@ (800983c <UART_SetConfig+0x334>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d177      	bne.n	8009698 <UART_SetConfig+0x190>
 80095a8:	4ba5      	ldr	r3, [pc, #660]	@ (8009840 <UART_SetConfig+0x338>)
 80095aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095b0:	2b28      	cmp	r3, #40	@ 0x28
 80095b2:	d86d      	bhi.n	8009690 <UART_SetConfig+0x188>
 80095b4:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <UART_SetConfig+0xb4>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	08009661 	.word	0x08009661
 80095c0:	08009691 	.word	0x08009691
 80095c4:	08009691 	.word	0x08009691
 80095c8:	08009691 	.word	0x08009691
 80095cc:	08009691 	.word	0x08009691
 80095d0:	08009691 	.word	0x08009691
 80095d4:	08009691 	.word	0x08009691
 80095d8:	08009691 	.word	0x08009691
 80095dc:	08009669 	.word	0x08009669
 80095e0:	08009691 	.word	0x08009691
 80095e4:	08009691 	.word	0x08009691
 80095e8:	08009691 	.word	0x08009691
 80095ec:	08009691 	.word	0x08009691
 80095f0:	08009691 	.word	0x08009691
 80095f4:	08009691 	.word	0x08009691
 80095f8:	08009691 	.word	0x08009691
 80095fc:	08009671 	.word	0x08009671
 8009600:	08009691 	.word	0x08009691
 8009604:	08009691 	.word	0x08009691
 8009608:	08009691 	.word	0x08009691
 800960c:	08009691 	.word	0x08009691
 8009610:	08009691 	.word	0x08009691
 8009614:	08009691 	.word	0x08009691
 8009618:	08009691 	.word	0x08009691
 800961c:	08009679 	.word	0x08009679
 8009620:	08009691 	.word	0x08009691
 8009624:	08009691 	.word	0x08009691
 8009628:	08009691 	.word	0x08009691
 800962c:	08009691 	.word	0x08009691
 8009630:	08009691 	.word	0x08009691
 8009634:	08009691 	.word	0x08009691
 8009638:	08009691 	.word	0x08009691
 800963c:	08009681 	.word	0x08009681
 8009640:	08009691 	.word	0x08009691
 8009644:	08009691 	.word	0x08009691
 8009648:	08009691 	.word	0x08009691
 800964c:	08009691 	.word	0x08009691
 8009650:	08009691 	.word	0x08009691
 8009654:	08009691 	.word	0x08009691
 8009658:	08009691 	.word	0x08009691
 800965c:	08009689 	.word	0x08009689
 8009660:	2301      	movs	r3, #1
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e222      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009668:	2304      	movs	r3, #4
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e21e      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009670:	2308      	movs	r3, #8
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e21a      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009678:	2310      	movs	r3, #16
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e216      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009680:	2320      	movs	r3, #32
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e212      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009688:	2340      	movs	r3, #64	@ 0x40
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e20e      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009690:	2380      	movs	r3, #128	@ 0x80
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e20a      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a69      	ldr	r2, [pc, #420]	@ (8009844 <UART_SetConfig+0x33c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d130      	bne.n	8009704 <UART_SetConfig+0x1fc>
 80096a2:	4b67      	ldr	r3, [pc, #412]	@ (8009840 <UART_SetConfig+0x338>)
 80096a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b05      	cmp	r3, #5
 80096ac:	d826      	bhi.n	80096fc <UART_SetConfig+0x1f4>
 80096ae:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <UART_SetConfig+0x1ac>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096cd 	.word	0x080096cd
 80096b8:	080096d5 	.word	0x080096d5
 80096bc:	080096dd 	.word	0x080096dd
 80096c0:	080096e5 	.word	0x080096e5
 80096c4:	080096ed 	.word	0x080096ed
 80096c8:	080096f5 	.word	0x080096f5
 80096cc:	2300      	movs	r3, #0
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e1ec      	b.n	8009aae <UART_SetConfig+0x5a6>
 80096d4:	2304      	movs	r3, #4
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e1e8      	b.n	8009aae <UART_SetConfig+0x5a6>
 80096dc:	2308      	movs	r3, #8
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e1e4      	b.n	8009aae <UART_SetConfig+0x5a6>
 80096e4:	2310      	movs	r3, #16
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e1e0      	b.n	8009aae <UART_SetConfig+0x5a6>
 80096ec:	2320      	movs	r3, #32
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e1dc      	b.n	8009aae <UART_SetConfig+0x5a6>
 80096f4:	2340      	movs	r3, #64	@ 0x40
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e1d8      	b.n	8009aae <UART_SetConfig+0x5a6>
 80096fc:	2380      	movs	r3, #128	@ 0x80
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e1d4      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a4f      	ldr	r2, [pc, #316]	@ (8009848 <UART_SetConfig+0x340>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d130      	bne.n	8009770 <UART_SetConfig+0x268>
 800970e:	4b4c      	ldr	r3, [pc, #304]	@ (8009840 <UART_SetConfig+0x338>)
 8009710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009712:	f003 0307 	and.w	r3, r3, #7
 8009716:	2b05      	cmp	r3, #5
 8009718:	d826      	bhi.n	8009768 <UART_SetConfig+0x260>
 800971a:	a201      	add	r2, pc, #4	@ (adr r2, 8009720 <UART_SetConfig+0x218>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009739 	.word	0x08009739
 8009724:	08009741 	.word	0x08009741
 8009728:	08009749 	.word	0x08009749
 800972c:	08009751 	.word	0x08009751
 8009730:	08009759 	.word	0x08009759
 8009734:	08009761 	.word	0x08009761
 8009738:	2300      	movs	r3, #0
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e1b6      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009740:	2304      	movs	r3, #4
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e1b2      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009748:	2308      	movs	r3, #8
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e1ae      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009750:	2310      	movs	r3, #16
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e1aa      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009758:	2320      	movs	r3, #32
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e1a6      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009760:	2340      	movs	r3, #64	@ 0x40
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e1a2      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009768:	2380      	movs	r3, #128	@ 0x80
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e19e      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a35      	ldr	r2, [pc, #212]	@ (800984c <UART_SetConfig+0x344>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d130      	bne.n	80097dc <UART_SetConfig+0x2d4>
 800977a:	4b31      	ldr	r3, [pc, #196]	@ (8009840 <UART_SetConfig+0x338>)
 800977c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	2b05      	cmp	r3, #5
 8009784:	d826      	bhi.n	80097d4 <UART_SetConfig+0x2cc>
 8009786:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <UART_SetConfig+0x284>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	080097a5 	.word	0x080097a5
 8009790:	080097ad 	.word	0x080097ad
 8009794:	080097b5 	.word	0x080097b5
 8009798:	080097bd 	.word	0x080097bd
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097cd 	.word	0x080097cd
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e180      	b.n	8009aae <UART_SetConfig+0x5a6>
 80097ac:	2304      	movs	r3, #4
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e17c      	b.n	8009aae <UART_SetConfig+0x5a6>
 80097b4:	2308      	movs	r3, #8
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e178      	b.n	8009aae <UART_SetConfig+0x5a6>
 80097bc:	2310      	movs	r3, #16
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e174      	b.n	8009aae <UART_SetConfig+0x5a6>
 80097c4:	2320      	movs	r3, #32
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e170      	b.n	8009aae <UART_SetConfig+0x5a6>
 80097cc:	2340      	movs	r3, #64	@ 0x40
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e16c      	b.n	8009aae <UART_SetConfig+0x5a6>
 80097d4:	2380      	movs	r3, #128	@ 0x80
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e168      	b.n	8009aae <UART_SetConfig+0x5a6>
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009850 <UART_SetConfig+0x348>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d142      	bne.n	800986c <UART_SetConfig+0x364>
 80097e6:	4b16      	ldr	r3, [pc, #88]	@ (8009840 <UART_SetConfig+0x338>)
 80097e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	d838      	bhi.n	8009864 <UART_SetConfig+0x35c>
 80097f2:	a201      	add	r2, pc, #4	@ (adr r2, 80097f8 <UART_SetConfig+0x2f0>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009811 	.word	0x08009811
 80097fc:	08009819 	.word	0x08009819
 8009800:	08009821 	.word	0x08009821
 8009804:	08009829 	.word	0x08009829
 8009808:	08009855 	.word	0x08009855
 800980c:	0800985d 	.word	0x0800985d
 8009810:	2300      	movs	r3, #0
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e14a      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009818:	2304      	movs	r3, #4
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e146      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009820:	2308      	movs	r3, #8
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e142      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009828:	2310      	movs	r3, #16
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e13e      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009830:	cfff69f3 	.word	0xcfff69f3
 8009834:	58000c00 	.word	0x58000c00
 8009838:	11fff4ff 	.word	0x11fff4ff
 800983c:	40011000 	.word	0x40011000
 8009840:	58024400 	.word	0x58024400
 8009844:	40004400 	.word	0x40004400
 8009848:	40004800 	.word	0x40004800
 800984c:	40004c00 	.word	0x40004c00
 8009850:	40005000 	.word	0x40005000
 8009854:	2320      	movs	r3, #32
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e128      	b.n	8009aae <UART_SetConfig+0x5a6>
 800985c:	2340      	movs	r3, #64	@ 0x40
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e124      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009864:	2380      	movs	r3, #128	@ 0x80
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e120      	b.n	8009aae <UART_SetConfig+0x5a6>
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4acb      	ldr	r2, [pc, #812]	@ (8009ba0 <UART_SetConfig+0x698>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d176      	bne.n	8009964 <UART_SetConfig+0x45c>
 8009876:	4bcb      	ldr	r3, [pc, #812]	@ (8009ba4 <UART_SetConfig+0x69c>)
 8009878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800987e:	2b28      	cmp	r3, #40	@ 0x28
 8009880:	d86c      	bhi.n	800995c <UART_SetConfig+0x454>
 8009882:	a201      	add	r2, pc, #4	@ (adr r2, 8009888 <UART_SetConfig+0x380>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	0800992d 	.word	0x0800992d
 800988c:	0800995d 	.word	0x0800995d
 8009890:	0800995d 	.word	0x0800995d
 8009894:	0800995d 	.word	0x0800995d
 8009898:	0800995d 	.word	0x0800995d
 800989c:	0800995d 	.word	0x0800995d
 80098a0:	0800995d 	.word	0x0800995d
 80098a4:	0800995d 	.word	0x0800995d
 80098a8:	08009935 	.word	0x08009935
 80098ac:	0800995d 	.word	0x0800995d
 80098b0:	0800995d 	.word	0x0800995d
 80098b4:	0800995d 	.word	0x0800995d
 80098b8:	0800995d 	.word	0x0800995d
 80098bc:	0800995d 	.word	0x0800995d
 80098c0:	0800995d 	.word	0x0800995d
 80098c4:	0800995d 	.word	0x0800995d
 80098c8:	0800993d 	.word	0x0800993d
 80098cc:	0800995d 	.word	0x0800995d
 80098d0:	0800995d 	.word	0x0800995d
 80098d4:	0800995d 	.word	0x0800995d
 80098d8:	0800995d 	.word	0x0800995d
 80098dc:	0800995d 	.word	0x0800995d
 80098e0:	0800995d 	.word	0x0800995d
 80098e4:	0800995d 	.word	0x0800995d
 80098e8:	08009945 	.word	0x08009945
 80098ec:	0800995d 	.word	0x0800995d
 80098f0:	0800995d 	.word	0x0800995d
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	0800995d 	.word	0x0800995d
 80098fc:	0800995d 	.word	0x0800995d
 8009900:	0800995d 	.word	0x0800995d
 8009904:	0800995d 	.word	0x0800995d
 8009908:	0800994d 	.word	0x0800994d
 800990c:	0800995d 	.word	0x0800995d
 8009910:	0800995d 	.word	0x0800995d
 8009914:	0800995d 	.word	0x0800995d
 8009918:	0800995d 	.word	0x0800995d
 800991c:	0800995d 	.word	0x0800995d
 8009920:	0800995d 	.word	0x0800995d
 8009924:	0800995d 	.word	0x0800995d
 8009928:	08009955 	.word	0x08009955
 800992c:	2301      	movs	r3, #1
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e0bc      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009934:	2304      	movs	r3, #4
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e0b8      	b.n	8009aae <UART_SetConfig+0x5a6>
 800993c:	2308      	movs	r3, #8
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e0b4      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e0b0      	b.n	8009aae <UART_SetConfig+0x5a6>
 800994c:	2320      	movs	r3, #32
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e0ac      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009954:	2340      	movs	r3, #64	@ 0x40
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e0a8      	b.n	8009aae <UART_SetConfig+0x5a6>
 800995c:	2380      	movs	r3, #128	@ 0x80
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e0a4      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a8f      	ldr	r2, [pc, #572]	@ (8009ba8 <UART_SetConfig+0x6a0>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d130      	bne.n	80099d0 <UART_SetConfig+0x4c8>
 800996e:	4b8d      	ldr	r3, [pc, #564]	@ (8009ba4 <UART_SetConfig+0x69c>)
 8009970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	2b05      	cmp	r3, #5
 8009978:	d826      	bhi.n	80099c8 <UART_SetConfig+0x4c0>
 800997a:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <UART_SetConfig+0x478>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	08009999 	.word	0x08009999
 8009984:	080099a1 	.word	0x080099a1
 8009988:	080099a9 	.word	0x080099a9
 800998c:	080099b1 	.word	0x080099b1
 8009990:	080099b9 	.word	0x080099b9
 8009994:	080099c1 	.word	0x080099c1
 8009998:	2300      	movs	r3, #0
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e086      	b.n	8009aae <UART_SetConfig+0x5a6>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e082      	b.n	8009aae <UART_SetConfig+0x5a6>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e07e      	b.n	8009aae <UART_SetConfig+0x5a6>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e07a      	b.n	8009aae <UART_SetConfig+0x5a6>
 80099b8:	2320      	movs	r3, #32
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e076      	b.n	8009aae <UART_SetConfig+0x5a6>
 80099c0:	2340      	movs	r3, #64	@ 0x40
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c6:	e072      	b.n	8009aae <UART_SetConfig+0x5a6>
 80099c8:	2380      	movs	r3, #128	@ 0x80
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e06e      	b.n	8009aae <UART_SetConfig+0x5a6>
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a75      	ldr	r2, [pc, #468]	@ (8009bac <UART_SetConfig+0x6a4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d130      	bne.n	8009a3c <UART_SetConfig+0x534>
 80099da:	4b72      	ldr	r3, [pc, #456]	@ (8009ba4 <UART_SetConfig+0x69c>)
 80099dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d826      	bhi.n	8009a34 <UART_SetConfig+0x52c>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <UART_SetConfig+0x4e4>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a05 	.word	0x08009a05
 80099f0:	08009a0d 	.word	0x08009a0d
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a25 	.word	0x08009a25
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a0a:	e050      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a0c:	2304      	movs	r3, #4
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a12:	e04c      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a14:	2308      	movs	r3, #8
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a1a:	e048      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a22:	e044      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a24:	2320      	movs	r3, #32
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2a:	e040      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a2c:	2340      	movs	r3, #64	@ 0x40
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a32:	e03c      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a34:	2380      	movs	r3, #128	@ 0x80
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	e038      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a5b      	ldr	r2, [pc, #364]	@ (8009bb0 <UART_SetConfig+0x6a8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d130      	bne.n	8009aa8 <UART_SetConfig+0x5a0>
 8009a46:	4b57      	ldr	r3, [pc, #348]	@ (8009ba4 <UART_SetConfig+0x69c>)
 8009a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d826      	bhi.n	8009aa0 <UART_SetConfig+0x598>
 8009a52:	a201      	add	r2, pc, #4	@ (adr r2, 8009a58 <UART_SetConfig+0x550>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	08009a81 	.word	0x08009a81
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009a91 	.word	0x08009a91
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2302      	movs	r3, #2
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a76:	e01a      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7e:	e016      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a86:	e012      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e00e      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e00a      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009a98:	2340      	movs	r3, #64	@ 0x40
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e006      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009aa0:	2380      	movs	r3, #128	@ 0x80
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e002      	b.n	8009aae <UART_SetConfig+0x5a6>
 8009aa8:	2380      	movs	r3, #128	@ 0x80
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8009bb0 <UART_SetConfig+0x6a8>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	f040 80f8 	bne.w	8009caa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009aba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	dc46      	bgt.n	8009b50 <UART_SetConfig+0x648>
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	f2c0 8082 	blt.w	8009bcc <UART_SetConfig+0x6c4>
 8009ac8:	3b02      	subs	r3, #2
 8009aca:	2b1e      	cmp	r3, #30
 8009acc:	d87e      	bhi.n	8009bcc <UART_SetConfig+0x6c4>
 8009ace:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <UART_SetConfig+0x5cc>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009b57 	.word	0x08009b57
 8009ad8:	08009bcd 	.word	0x08009bcd
 8009adc:	08009b5f 	.word	0x08009b5f
 8009ae0:	08009bcd 	.word	0x08009bcd
 8009ae4:	08009bcd 	.word	0x08009bcd
 8009ae8:	08009bcd 	.word	0x08009bcd
 8009aec:	08009b6f 	.word	0x08009b6f
 8009af0:	08009bcd 	.word	0x08009bcd
 8009af4:	08009bcd 	.word	0x08009bcd
 8009af8:	08009bcd 	.word	0x08009bcd
 8009afc:	08009bcd 	.word	0x08009bcd
 8009b00:	08009bcd 	.word	0x08009bcd
 8009b04:	08009bcd 	.word	0x08009bcd
 8009b08:	08009bcd 	.word	0x08009bcd
 8009b0c:	08009b7f 	.word	0x08009b7f
 8009b10:	08009bcd 	.word	0x08009bcd
 8009b14:	08009bcd 	.word	0x08009bcd
 8009b18:	08009bcd 	.word	0x08009bcd
 8009b1c:	08009bcd 	.word	0x08009bcd
 8009b20:	08009bcd 	.word	0x08009bcd
 8009b24:	08009bcd 	.word	0x08009bcd
 8009b28:	08009bcd 	.word	0x08009bcd
 8009b2c:	08009bcd 	.word	0x08009bcd
 8009b30:	08009bcd 	.word	0x08009bcd
 8009b34:	08009bcd 	.word	0x08009bcd
 8009b38:	08009bcd 	.word	0x08009bcd
 8009b3c:	08009bcd 	.word	0x08009bcd
 8009b40:	08009bcd 	.word	0x08009bcd
 8009b44:	08009bcd 	.word	0x08009bcd
 8009b48:	08009bcd 	.word	0x08009bcd
 8009b4c:	08009bbf 	.word	0x08009bbf
 8009b50:	2b40      	cmp	r3, #64	@ 0x40
 8009b52:	d037      	beq.n	8009bc4 <UART_SetConfig+0x6bc>
 8009b54:	e03a      	b.n	8009bcc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b56:	f7fe f841 	bl	8007bdc <HAL_RCCEx_GetD3PCLK1Freq>
 8009b5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b5c:	e03c      	b.n	8009bd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe f850 	bl	8007c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b6c:	e034      	b.n	8009bd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b6e:	f107 0318 	add.w	r3, r7, #24
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe f99c 	bl	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b7c:	e02c      	b.n	8009bd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ba4 <UART_SetConfig+0x69c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d016      	beq.n	8009bb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b8a:	4b06      	ldr	r3, [pc, #24]	@ (8009ba4 <UART_SetConfig+0x69c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	08db      	lsrs	r3, r3, #3
 8009b90:	f003 0303 	and.w	r3, r3, #3
 8009b94:	4a07      	ldr	r2, [pc, #28]	@ (8009bb4 <UART_SetConfig+0x6ac>)
 8009b96:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b9c:	e01c      	b.n	8009bd8 <UART_SetConfig+0x6d0>
 8009b9e:	bf00      	nop
 8009ba0:	40011400 	.word	0x40011400
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	40007800 	.word	0x40007800
 8009bac:	40007c00 	.word	0x40007c00
 8009bb0:	58000c00 	.word	0x58000c00
 8009bb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009bb8:	4b9d      	ldr	r3, [pc, #628]	@ (8009e30 <UART_SetConfig+0x928>)
 8009bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bbc:	e00c      	b.n	8009bd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bbe:	4b9d      	ldr	r3, [pc, #628]	@ (8009e34 <UART_SetConfig+0x92c>)
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc2:	e009      	b.n	8009bd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bca:	e005      	b.n	8009bd8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009bd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 81de 	beq.w	8009f9c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be4:	4a94      	ldr	r2, [pc, #592]	@ (8009e38 <UART_SetConfig+0x930>)
 8009be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bf2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	005b      	lsls	r3, r3, #1
 8009bfc:	4413      	add	r3, r2
 8009bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d305      	bcc.n	8009c10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d903      	bls.n	8009c18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c16:	e1c1      	b.n	8009f9c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	60bb      	str	r3, [r7, #8]
 8009c1e:	60fa      	str	r2, [r7, #12]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c24:	4a84      	ldr	r2, [pc, #528]	@ (8009e38 <UART_SetConfig+0x930>)
 8009c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	607a      	str	r2, [r7, #4]
 8009c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c3a:	f7f6 fba1 	bl	8000380 <__aeabi_uldivmod>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4610      	mov	r0, r2
 8009c44:	4619      	mov	r1, r3
 8009c46:	f04f 0200 	mov.w	r2, #0
 8009c4a:	f04f 0300 	mov.w	r3, #0
 8009c4e:	020b      	lsls	r3, r1, #8
 8009c50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c54:	0202      	lsls	r2, r0, #8
 8009c56:	6979      	ldr	r1, [r7, #20]
 8009c58:	6849      	ldr	r1, [r1, #4]
 8009c5a:	0849      	lsrs	r1, r1, #1
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	4605      	mov	r5, r0
 8009c62:	eb12 0804 	adds.w	r8, r2, r4
 8009c66:	eb43 0905 	adc.w	r9, r3, r5
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	469a      	mov	sl, r3
 8009c72:	4693      	mov	fp, r2
 8009c74:	4652      	mov	r2, sl
 8009c76:	465b      	mov	r3, fp
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 fb80 	bl	8000380 <__aeabi_uldivmod>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4613      	mov	r3, r2
 8009c86:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c8e:	d308      	bcc.n	8009ca2 <UART_SetConfig+0x79a>
 8009c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c96:	d204      	bcs.n	8009ca2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c9e:	60da      	str	r2, [r3, #12]
 8009ca0:	e17c      	b.n	8009f9c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ca8:	e178      	b.n	8009f9c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cb2:	f040 80c5 	bne.w	8009e40 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009cb6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	dc48      	bgt.n	8009d50 <UART_SetConfig+0x848>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	db7b      	blt.n	8009dba <UART_SetConfig+0x8b2>
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d879      	bhi.n	8009dba <UART_SetConfig+0x8b2>
 8009cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ccc <UART_SetConfig+0x7c4>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009d57 	.word	0x08009d57
 8009cd0:	08009d5f 	.word	0x08009d5f
 8009cd4:	08009dbb 	.word	0x08009dbb
 8009cd8:	08009dbb 	.word	0x08009dbb
 8009cdc:	08009d67 	.word	0x08009d67
 8009ce0:	08009dbb 	.word	0x08009dbb
 8009ce4:	08009dbb 	.word	0x08009dbb
 8009ce8:	08009dbb 	.word	0x08009dbb
 8009cec:	08009d77 	.word	0x08009d77
 8009cf0:	08009dbb 	.word	0x08009dbb
 8009cf4:	08009dbb 	.word	0x08009dbb
 8009cf8:	08009dbb 	.word	0x08009dbb
 8009cfc:	08009dbb 	.word	0x08009dbb
 8009d00:	08009dbb 	.word	0x08009dbb
 8009d04:	08009dbb 	.word	0x08009dbb
 8009d08:	08009dbb 	.word	0x08009dbb
 8009d0c:	08009d87 	.word	0x08009d87
 8009d10:	08009dbb 	.word	0x08009dbb
 8009d14:	08009dbb 	.word	0x08009dbb
 8009d18:	08009dbb 	.word	0x08009dbb
 8009d1c:	08009dbb 	.word	0x08009dbb
 8009d20:	08009dbb 	.word	0x08009dbb
 8009d24:	08009dbb 	.word	0x08009dbb
 8009d28:	08009dbb 	.word	0x08009dbb
 8009d2c:	08009dbb 	.word	0x08009dbb
 8009d30:	08009dbb 	.word	0x08009dbb
 8009d34:	08009dbb 	.word	0x08009dbb
 8009d38:	08009dbb 	.word	0x08009dbb
 8009d3c:	08009dbb 	.word	0x08009dbb
 8009d40:	08009dbb 	.word	0x08009dbb
 8009d44:	08009dbb 	.word	0x08009dbb
 8009d48:	08009dbb 	.word	0x08009dbb
 8009d4c:	08009dad 	.word	0x08009dad
 8009d50:	2b40      	cmp	r3, #64	@ 0x40
 8009d52:	d02e      	beq.n	8009db2 <UART_SetConfig+0x8aa>
 8009d54:	e031      	b.n	8009dba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d56:	f7fc fd0b 	bl	8006770 <HAL_RCC_GetPCLK1Freq>
 8009d5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d5c:	e033      	b.n	8009dc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d5e:	f7fc fd1d 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 8009d62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d64:	e02f      	b.n	8009dc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fd ff4c 	bl	8007c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d74:	e027      	b.n	8009dc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d76:	f107 0318 	add.w	r3, r7, #24
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe f898 	bl	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d84:	e01f      	b.n	8009dc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d86:	4b2d      	ldr	r3, [pc, #180]	@ (8009e3c <UART_SetConfig+0x934>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0320 	and.w	r3, r3, #32
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d92:	4b2a      	ldr	r3, [pc, #168]	@ (8009e3c <UART_SetConfig+0x934>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	08db      	lsrs	r3, r3, #3
 8009d98:	f003 0303 	and.w	r3, r3, #3
 8009d9c:	4a24      	ldr	r2, [pc, #144]	@ (8009e30 <UART_SetConfig+0x928>)
 8009d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009da4:	e00f      	b.n	8009dc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009da6:	4b22      	ldr	r3, [pc, #136]	@ (8009e30 <UART_SetConfig+0x928>)
 8009da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009daa:	e00c      	b.n	8009dc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dac:	4b21      	ldr	r3, [pc, #132]	@ (8009e34 <UART_SetConfig+0x92c>)
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db0:	e009      	b.n	8009dc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db8:	e005      	b.n	8009dc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 80e7 	beq.w	8009f9c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd2:	4a19      	ldr	r2, [pc, #100]	@ (8009e38 <UART_SetConfig+0x930>)
 8009dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009de0:	005a      	lsls	r2, r3, #1
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	441a      	add	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df6:	2b0f      	cmp	r3, #15
 8009df8:	d916      	bls.n	8009e28 <UART_SetConfig+0x920>
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e00:	d212      	bcs.n	8009e28 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f023 030f 	bic.w	r3, r3, #15
 8009e0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e24:	60da      	str	r2, [r3, #12]
 8009e26:	e0b9      	b.n	8009f9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e2e:	e0b5      	b.n	8009f9c <UART_SetConfig+0xa94>
 8009e30:	03d09000 	.word	0x03d09000
 8009e34:	003d0900 	.word	0x003d0900
 8009e38:	0800f9fc 	.word	0x0800f9fc
 8009e3c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	dc49      	bgt.n	8009edc <UART_SetConfig+0x9d4>
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	db7c      	blt.n	8009f46 <UART_SetConfig+0xa3e>
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	d87a      	bhi.n	8009f46 <UART_SetConfig+0xa3e>
 8009e50:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <UART_SetConfig+0x950>)
 8009e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e56:	bf00      	nop
 8009e58:	08009ee3 	.word	0x08009ee3
 8009e5c:	08009eeb 	.word	0x08009eeb
 8009e60:	08009f47 	.word	0x08009f47
 8009e64:	08009f47 	.word	0x08009f47
 8009e68:	08009ef3 	.word	0x08009ef3
 8009e6c:	08009f47 	.word	0x08009f47
 8009e70:	08009f47 	.word	0x08009f47
 8009e74:	08009f47 	.word	0x08009f47
 8009e78:	08009f03 	.word	0x08009f03
 8009e7c:	08009f47 	.word	0x08009f47
 8009e80:	08009f47 	.word	0x08009f47
 8009e84:	08009f47 	.word	0x08009f47
 8009e88:	08009f47 	.word	0x08009f47
 8009e8c:	08009f47 	.word	0x08009f47
 8009e90:	08009f47 	.word	0x08009f47
 8009e94:	08009f47 	.word	0x08009f47
 8009e98:	08009f13 	.word	0x08009f13
 8009e9c:	08009f47 	.word	0x08009f47
 8009ea0:	08009f47 	.word	0x08009f47
 8009ea4:	08009f47 	.word	0x08009f47
 8009ea8:	08009f47 	.word	0x08009f47
 8009eac:	08009f47 	.word	0x08009f47
 8009eb0:	08009f47 	.word	0x08009f47
 8009eb4:	08009f47 	.word	0x08009f47
 8009eb8:	08009f47 	.word	0x08009f47
 8009ebc:	08009f47 	.word	0x08009f47
 8009ec0:	08009f47 	.word	0x08009f47
 8009ec4:	08009f47 	.word	0x08009f47
 8009ec8:	08009f47 	.word	0x08009f47
 8009ecc:	08009f47 	.word	0x08009f47
 8009ed0:	08009f47 	.word	0x08009f47
 8009ed4:	08009f47 	.word	0x08009f47
 8009ed8:	08009f39 	.word	0x08009f39
 8009edc:	2b40      	cmp	r3, #64	@ 0x40
 8009ede:	d02e      	beq.n	8009f3e <UART_SetConfig+0xa36>
 8009ee0:	e031      	b.n	8009f46 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ee2:	f7fc fc45 	bl	8006770 <HAL_RCC_GetPCLK1Freq>
 8009ee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ee8:	e033      	b.n	8009f52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eea:	f7fc fc57 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 8009eee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ef0:	e02f      	b.n	8009f52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fd fe86 	bl	8007c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f00:	e027      	b.n	8009f52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f02:	f107 0318 	add.w	r3, r7, #24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fd ffd2 	bl	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f10:	e01f      	b.n	8009f52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f12:	4b2d      	ldr	r3, [pc, #180]	@ (8009fc8 <UART_SetConfig+0xac0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc8 <UART_SetConfig+0xac0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	08db      	lsrs	r3, r3, #3
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	4a28      	ldr	r2, [pc, #160]	@ (8009fcc <UART_SetConfig+0xac4>)
 8009f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f30:	e00f      	b.n	8009f52 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009f32:	4b26      	ldr	r3, [pc, #152]	@ (8009fcc <UART_SetConfig+0xac4>)
 8009f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f36:	e00c      	b.n	8009f52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f38:	4b25      	ldr	r3, [pc, #148]	@ (8009fd0 <UART_SetConfig+0xac8>)
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e009      	b.n	8009f52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f44:	e005      	b.n	8009f52 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f50:	bf00      	nop
    }

    if (pclk != 0U)
 8009f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d021      	beq.n	8009f9c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd4 <UART_SetConfig+0xacc>)
 8009f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f62:	461a      	mov	r2, r3
 8009f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f66:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	085b      	lsrs	r3, r3, #1
 8009f70:	441a      	add	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7e:	2b0f      	cmp	r3, #15
 8009f80:	d909      	bls.n	8009f96 <UART_SetConfig+0xa8e>
 8009f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f88:	d205      	bcs.n	8009f96 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60da      	str	r2, [r3, #12]
 8009f94:	e002      	b.n	8009f9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009fb8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3748      	adds	r7, #72	@ 0x48
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fc6:	bf00      	nop
 8009fc8:	58024400 	.word	0x58024400
 8009fcc:	03d09000 	.word	0x03d09000
 8009fd0:	003d0900 	.word	0x003d0900
 8009fd4:	0800f9fc 	.word	0x0800f9fc

08009fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00a      	beq.n	800a046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00a      	beq.n	800a08a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08e:	f003 0320 	and.w	r3, r3, #32
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01a      	beq.n	800a0ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0d6:	d10a      	bne.n	800a0ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	605a      	str	r2, [r3, #4]
  }
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b098      	sub	sp, #96	@ 0x60
 800a120:	af02      	add	r7, sp, #8
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a12c:	f7fa fb86 	bl	800483c <HAL_GetTick>
 800a130:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d12f      	bne.n	800a1a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a140:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a148:	2200      	movs	r2, #0
 800a14a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f88e 	bl	800a270 <UART_WaitOnFlagUntilTimeout>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d022      	beq.n	800a1a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a16e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a178:	647b      	str	r3, [r7, #68]	@ 0x44
 800a17a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a17e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e6      	bne.n	800a15a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2220      	movs	r2, #32
 800a190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e063      	b.n	800a268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d149      	bne.n	800a242 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f857 	bl	800a270 <UART_WaitOnFlagUntilTimeout>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d03c      	beq.n	800a242 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e6      	bne.n	800a1c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	60fb      	str	r3, [r7, #12]
   return(result);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f023 0301 	bic.w	r3, r3, #1
 800a210:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3308      	adds	r3, #8
 800a218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a21a:	61fa      	str	r2, [r7, #28]
 800a21c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	69b9      	ldr	r1, [r7, #24]
 800a220:	69fa      	ldr	r2, [r7, #28]
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	617b      	str	r3, [r7, #20]
   return(result);
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e5      	bne.n	800a1fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e012      	b.n	800a268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2220      	movs	r2, #32
 800a246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2220      	movs	r2, #32
 800a24e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3758      	adds	r7, #88	@ 0x58
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	4613      	mov	r3, r2
 800a27e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a280:	e04f      	b.n	800a322 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a288:	d04b      	beq.n	800a322 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a28a:	f7fa fad7 	bl	800483c <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	429a      	cmp	r2, r3
 800a298:	d302      	bcc.n	800a2a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e04e      	b.n	800a342 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d037      	beq.n	800a322 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b80      	cmp	r3, #128	@ 0x80
 800a2b6:	d034      	beq.n	800a322 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b40      	cmp	r3, #64	@ 0x40
 800a2bc:	d031      	beq.n	800a322 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	f003 0308 	and.w	r3, r3, #8
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d110      	bne.n	800a2ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2208      	movs	r2, #8
 800a2d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f839 	bl	800a34c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2208      	movs	r2, #8
 800a2de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e029      	b.n	800a342 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2fc:	d111      	bne.n	800a322 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f81f 	bl	800a34c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e00f      	b.n	800a342 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69da      	ldr	r2, [r3, #28]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4013      	ands	r3, r2
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	429a      	cmp	r2, r3
 800a330:	bf0c      	ite	eq
 800a332:	2301      	moveq	r3, #1
 800a334:	2300      	movne	r3, #0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d0a0      	beq.n	800a282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b095      	sub	sp, #84	@ 0x54
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a372:	643b      	str	r3, [r7, #64]	@ 0x40
 800a374:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a37a:	e841 2300 	strex	r3, r2, [r1]
 800a37e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1e6      	bne.n	800a354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3308      	adds	r3, #8
 800a38c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	61fb      	str	r3, [r7, #28]
   return(result);
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	4b1e      	ldr	r3, [pc, #120]	@ (800a414 <UART_EndRxTransfer+0xc8>)
 800a39a:	4013      	ands	r3, r2
 800a39c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e5      	bne.n	800a386 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d118      	bne.n	800a3f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f023 0310 	bic.w	r3, r3, #16
 800a3d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e0:	61bb      	str	r3, [r7, #24]
 800a3e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6979      	ldr	r1, [r7, #20]
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e6      	bne.n	800a3c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a408:	bf00      	nop
 800a40a:	3754      	adds	r7, #84	@ 0x54
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	effffffe 	.word	0xeffffffe

0800a418 <std>:
 800a418:	2300      	movs	r3, #0
 800a41a:	b510      	push	{r4, lr}
 800a41c:	4604      	mov	r4, r0
 800a41e:	e9c0 3300 	strd	r3, r3, [r0]
 800a422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a426:	6083      	str	r3, [r0, #8]
 800a428:	8181      	strh	r1, [r0, #12]
 800a42a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a42c:	81c2      	strh	r2, [r0, #14]
 800a42e:	6183      	str	r3, [r0, #24]
 800a430:	4619      	mov	r1, r3
 800a432:	2208      	movs	r2, #8
 800a434:	305c      	adds	r0, #92	@ 0x5c
 800a436:	f000 f9f9 	bl	800a82c <memset>
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <std+0x58>)
 800a43c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a43e:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <std+0x5c>)
 800a440:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <std+0x60>)
 800a444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a446:	4b0d      	ldr	r3, [pc, #52]	@ (800a47c <std+0x64>)
 800a448:	6323      	str	r3, [r4, #48]	@ 0x30
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <std+0x68>)
 800a44c:	6224      	str	r4, [r4, #32]
 800a44e:	429c      	cmp	r4, r3
 800a450:	d006      	beq.n	800a460 <std+0x48>
 800a452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a456:	4294      	cmp	r4, r2
 800a458:	d002      	beq.n	800a460 <std+0x48>
 800a45a:	33d0      	adds	r3, #208	@ 0xd0
 800a45c:	429c      	cmp	r4, r3
 800a45e:	d105      	bne.n	800a46c <std+0x54>
 800a460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a468:	f000 ba58 	b.w	800a91c <__retarget_lock_init_recursive>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	bf00      	nop
 800a470:	0800a67d 	.word	0x0800a67d
 800a474:	0800a69f 	.word	0x0800a69f
 800a478:	0800a6d7 	.word	0x0800a6d7
 800a47c:	0800a6fb 	.word	0x0800a6fb
 800a480:	240001e8 	.word	0x240001e8

0800a484 <stdio_exit_handler>:
 800a484:	4a02      	ldr	r2, [pc, #8]	@ (800a490 <stdio_exit_handler+0xc>)
 800a486:	4903      	ldr	r1, [pc, #12]	@ (800a494 <stdio_exit_handler+0x10>)
 800a488:	4803      	ldr	r0, [pc, #12]	@ (800a498 <stdio_exit_handler+0x14>)
 800a48a:	f000 b869 	b.w	800a560 <_fwalk_sglue>
 800a48e:	bf00      	nop
 800a490:	2400002c 	.word	0x2400002c
 800a494:	0800b1d5 	.word	0x0800b1d5
 800a498:	2400003c 	.word	0x2400003c

0800a49c <cleanup_stdio>:
 800a49c:	6841      	ldr	r1, [r0, #4]
 800a49e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d0 <cleanup_stdio+0x34>)
 800a4a0:	4299      	cmp	r1, r3
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	d001      	beq.n	800a4ac <cleanup_stdio+0x10>
 800a4a8:	f000 fe94 	bl	800b1d4 <_fflush_r>
 800a4ac:	68a1      	ldr	r1, [r4, #8]
 800a4ae:	4b09      	ldr	r3, [pc, #36]	@ (800a4d4 <cleanup_stdio+0x38>)
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d002      	beq.n	800a4ba <cleanup_stdio+0x1e>
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 fe8d 	bl	800b1d4 <_fflush_r>
 800a4ba:	68e1      	ldr	r1, [r4, #12]
 800a4bc:	4b06      	ldr	r3, [pc, #24]	@ (800a4d8 <cleanup_stdio+0x3c>)
 800a4be:	4299      	cmp	r1, r3
 800a4c0:	d004      	beq.n	800a4cc <cleanup_stdio+0x30>
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c8:	f000 be84 	b.w	800b1d4 <_fflush_r>
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	bf00      	nop
 800a4d0:	240001e8 	.word	0x240001e8
 800a4d4:	24000250 	.word	0x24000250
 800a4d8:	240002b8 	.word	0x240002b8

0800a4dc <global_stdio_init.part.0>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	4b0b      	ldr	r3, [pc, #44]	@ (800a50c <global_stdio_init.part.0+0x30>)
 800a4e0:	4c0b      	ldr	r4, [pc, #44]	@ (800a510 <global_stdio_init.part.0+0x34>)
 800a4e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a514 <global_stdio_init.part.0+0x38>)
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2104      	movs	r1, #4
 800a4ec:	f7ff ff94 	bl	800a418 <std>
 800a4f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	2109      	movs	r1, #9
 800a4f8:	f7ff ff8e 	bl	800a418 <std>
 800a4fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a500:	2202      	movs	r2, #2
 800a502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a506:	2112      	movs	r1, #18
 800a508:	f7ff bf86 	b.w	800a418 <std>
 800a50c:	24000320 	.word	0x24000320
 800a510:	240001e8 	.word	0x240001e8
 800a514:	0800a485 	.word	0x0800a485

0800a518 <__sfp_lock_acquire>:
 800a518:	4801      	ldr	r0, [pc, #4]	@ (800a520 <__sfp_lock_acquire+0x8>)
 800a51a:	f000 ba00 	b.w	800a91e <__retarget_lock_acquire_recursive>
 800a51e:	bf00      	nop
 800a520:	24000329 	.word	0x24000329

0800a524 <__sfp_lock_release>:
 800a524:	4801      	ldr	r0, [pc, #4]	@ (800a52c <__sfp_lock_release+0x8>)
 800a526:	f000 b9fb 	b.w	800a920 <__retarget_lock_release_recursive>
 800a52a:	bf00      	nop
 800a52c:	24000329 	.word	0x24000329

0800a530 <__sinit>:
 800a530:	b510      	push	{r4, lr}
 800a532:	4604      	mov	r4, r0
 800a534:	f7ff fff0 	bl	800a518 <__sfp_lock_acquire>
 800a538:	6a23      	ldr	r3, [r4, #32]
 800a53a:	b11b      	cbz	r3, 800a544 <__sinit+0x14>
 800a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a540:	f7ff bff0 	b.w	800a524 <__sfp_lock_release>
 800a544:	4b04      	ldr	r3, [pc, #16]	@ (800a558 <__sinit+0x28>)
 800a546:	6223      	str	r3, [r4, #32]
 800a548:	4b04      	ldr	r3, [pc, #16]	@ (800a55c <__sinit+0x2c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1f5      	bne.n	800a53c <__sinit+0xc>
 800a550:	f7ff ffc4 	bl	800a4dc <global_stdio_init.part.0>
 800a554:	e7f2      	b.n	800a53c <__sinit+0xc>
 800a556:	bf00      	nop
 800a558:	0800a49d 	.word	0x0800a49d
 800a55c:	24000320 	.word	0x24000320

0800a560 <_fwalk_sglue>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	4607      	mov	r7, r0
 800a566:	4688      	mov	r8, r1
 800a568:	4614      	mov	r4, r2
 800a56a:	2600      	movs	r6, #0
 800a56c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a570:	f1b9 0901 	subs.w	r9, r9, #1
 800a574:	d505      	bpl.n	800a582 <_fwalk_sglue+0x22>
 800a576:	6824      	ldr	r4, [r4, #0]
 800a578:	2c00      	cmp	r4, #0
 800a57a:	d1f7      	bne.n	800a56c <_fwalk_sglue+0xc>
 800a57c:	4630      	mov	r0, r6
 800a57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d907      	bls.n	800a598 <_fwalk_sglue+0x38>
 800a588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a58c:	3301      	adds	r3, #1
 800a58e:	d003      	beq.n	800a598 <_fwalk_sglue+0x38>
 800a590:	4629      	mov	r1, r5
 800a592:	4638      	mov	r0, r7
 800a594:	47c0      	blx	r8
 800a596:	4306      	orrs	r6, r0
 800a598:	3568      	adds	r5, #104	@ 0x68
 800a59a:	e7e9      	b.n	800a570 <_fwalk_sglue+0x10>

0800a59c <iprintf>:
 800a59c:	b40f      	push	{r0, r1, r2, r3}
 800a59e:	b507      	push	{r0, r1, r2, lr}
 800a5a0:	4906      	ldr	r1, [pc, #24]	@ (800a5bc <iprintf+0x20>)
 800a5a2:	ab04      	add	r3, sp, #16
 800a5a4:	6808      	ldr	r0, [r1, #0]
 800a5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5aa:	6881      	ldr	r1, [r0, #8]
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	f000 fae9 	bl	800ab84 <_vfiprintf_r>
 800a5b2:	b003      	add	sp, #12
 800a5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b8:	b004      	add	sp, #16
 800a5ba:	4770      	bx	lr
 800a5bc:	24000038 	.word	0x24000038

0800a5c0 <_puts_r>:
 800a5c0:	6a03      	ldr	r3, [r0, #32]
 800a5c2:	b570      	push	{r4, r5, r6, lr}
 800a5c4:	6884      	ldr	r4, [r0, #8]
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	460e      	mov	r6, r1
 800a5ca:	b90b      	cbnz	r3, 800a5d0 <_puts_r+0x10>
 800a5cc:	f7ff ffb0 	bl	800a530 <__sinit>
 800a5d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5d2:	07db      	lsls	r3, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_puts_r+0x22>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	0598      	lsls	r0, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_puts_r+0x22>
 800a5dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5de:	f000 f99e 	bl	800a91e <__retarget_lock_acquire_recursive>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	0719      	lsls	r1, r3, #28
 800a5e6:	d502      	bpl.n	800a5ee <_puts_r+0x2e>
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d135      	bne.n	800a65a <_puts_r+0x9a>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f000 f8c5 	bl	800a780 <__swsetup_r>
 800a5f6:	b380      	cbz	r0, 800a65a <_puts_r+0x9a>
 800a5f8:	f04f 35ff 	mov.w	r5, #4294967295
 800a5fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5fe:	07da      	lsls	r2, r3, #31
 800a600:	d405      	bmi.n	800a60e <_puts_r+0x4e>
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	059b      	lsls	r3, r3, #22
 800a606:	d402      	bmi.n	800a60e <_puts_r+0x4e>
 800a608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a60a:	f000 f989 	bl	800a920 <__retarget_lock_release_recursive>
 800a60e:	4628      	mov	r0, r5
 800a610:	bd70      	pop	{r4, r5, r6, pc}
 800a612:	2b00      	cmp	r3, #0
 800a614:	da04      	bge.n	800a620 <_puts_r+0x60>
 800a616:	69a2      	ldr	r2, [r4, #24]
 800a618:	429a      	cmp	r2, r3
 800a61a:	dc17      	bgt.n	800a64c <_puts_r+0x8c>
 800a61c:	290a      	cmp	r1, #10
 800a61e:	d015      	beq.n	800a64c <_puts_r+0x8c>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	7019      	strb	r1, [r3, #0]
 800a628:	68a3      	ldr	r3, [r4, #8]
 800a62a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a62e:	3b01      	subs	r3, #1
 800a630:	60a3      	str	r3, [r4, #8]
 800a632:	2900      	cmp	r1, #0
 800a634:	d1ed      	bne.n	800a612 <_puts_r+0x52>
 800a636:	2b00      	cmp	r3, #0
 800a638:	da11      	bge.n	800a65e <_puts_r+0x9e>
 800a63a:	4622      	mov	r2, r4
 800a63c:	210a      	movs	r1, #10
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 f85f 	bl	800a702 <__swbuf_r>
 800a644:	3001      	adds	r0, #1
 800a646:	d0d7      	beq.n	800a5f8 <_puts_r+0x38>
 800a648:	250a      	movs	r5, #10
 800a64a:	e7d7      	b.n	800a5fc <_puts_r+0x3c>
 800a64c:	4622      	mov	r2, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 f857 	bl	800a702 <__swbuf_r>
 800a654:	3001      	adds	r0, #1
 800a656:	d1e7      	bne.n	800a628 <_puts_r+0x68>
 800a658:	e7ce      	b.n	800a5f8 <_puts_r+0x38>
 800a65a:	3e01      	subs	r6, #1
 800a65c:	e7e4      	b.n	800a628 <_puts_r+0x68>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	6022      	str	r2, [r4, #0]
 800a664:	220a      	movs	r2, #10
 800a666:	701a      	strb	r2, [r3, #0]
 800a668:	e7ee      	b.n	800a648 <_puts_r+0x88>
	...

0800a66c <puts>:
 800a66c:	4b02      	ldr	r3, [pc, #8]	@ (800a678 <puts+0xc>)
 800a66e:	4601      	mov	r1, r0
 800a670:	6818      	ldr	r0, [r3, #0]
 800a672:	f7ff bfa5 	b.w	800a5c0 <_puts_r>
 800a676:	bf00      	nop
 800a678:	24000038 	.word	0x24000038

0800a67c <__sread>:
 800a67c:	b510      	push	{r4, lr}
 800a67e:	460c      	mov	r4, r1
 800a680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a684:	f000 f8fc 	bl	800a880 <_read_r>
 800a688:	2800      	cmp	r0, #0
 800a68a:	bfab      	itete	ge
 800a68c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a68e:	89a3      	ldrhlt	r3, [r4, #12]
 800a690:	181b      	addge	r3, r3, r0
 800a692:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a696:	bfac      	ite	ge
 800a698:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a69a:	81a3      	strhlt	r3, [r4, #12]
 800a69c:	bd10      	pop	{r4, pc}

0800a69e <__swrite>:
 800a69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a2:	461f      	mov	r7, r3
 800a6a4:	898b      	ldrh	r3, [r1, #12]
 800a6a6:	05db      	lsls	r3, r3, #23
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	4616      	mov	r6, r2
 800a6ae:	d505      	bpl.n	800a6bc <__swrite+0x1e>
 800a6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f000 f8d0 	bl	800a85c <_lseek_r>
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	4632      	mov	r2, r6
 800a6ca:	463b      	mov	r3, r7
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d2:	f000 b8e7 	b.w	800a8a4 <_write_r>

0800a6d6 <__sseek>:
 800a6d6:	b510      	push	{r4, lr}
 800a6d8:	460c      	mov	r4, r1
 800a6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6de:	f000 f8bd 	bl	800a85c <_lseek_r>
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	bf15      	itete	ne
 800a6e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6f2:	81a3      	strheq	r3, [r4, #12]
 800a6f4:	bf18      	it	ne
 800a6f6:	81a3      	strhne	r3, [r4, #12]
 800a6f8:	bd10      	pop	{r4, pc}

0800a6fa <__sclose>:
 800a6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fe:	f000 b89d 	b.w	800a83c <_close_r>

0800a702 <__swbuf_r>:
 800a702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a704:	460e      	mov	r6, r1
 800a706:	4614      	mov	r4, r2
 800a708:	4605      	mov	r5, r0
 800a70a:	b118      	cbz	r0, 800a714 <__swbuf_r+0x12>
 800a70c:	6a03      	ldr	r3, [r0, #32]
 800a70e:	b90b      	cbnz	r3, 800a714 <__swbuf_r+0x12>
 800a710:	f7ff ff0e 	bl	800a530 <__sinit>
 800a714:	69a3      	ldr	r3, [r4, #24]
 800a716:	60a3      	str	r3, [r4, #8]
 800a718:	89a3      	ldrh	r3, [r4, #12]
 800a71a:	071a      	lsls	r2, r3, #28
 800a71c:	d501      	bpl.n	800a722 <__swbuf_r+0x20>
 800a71e:	6923      	ldr	r3, [r4, #16]
 800a720:	b943      	cbnz	r3, 800a734 <__swbuf_r+0x32>
 800a722:	4621      	mov	r1, r4
 800a724:	4628      	mov	r0, r5
 800a726:	f000 f82b 	bl	800a780 <__swsetup_r>
 800a72a:	b118      	cbz	r0, 800a734 <__swbuf_r+0x32>
 800a72c:	f04f 37ff 	mov.w	r7, #4294967295
 800a730:	4638      	mov	r0, r7
 800a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	6922      	ldr	r2, [r4, #16]
 800a738:	1a98      	subs	r0, r3, r2
 800a73a:	6963      	ldr	r3, [r4, #20]
 800a73c:	b2f6      	uxtb	r6, r6
 800a73e:	4283      	cmp	r3, r0
 800a740:	4637      	mov	r7, r6
 800a742:	dc05      	bgt.n	800a750 <__swbuf_r+0x4e>
 800a744:	4621      	mov	r1, r4
 800a746:	4628      	mov	r0, r5
 800a748:	f000 fd44 	bl	800b1d4 <_fflush_r>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d1ed      	bne.n	800a72c <__swbuf_r+0x2a>
 800a750:	68a3      	ldr	r3, [r4, #8]
 800a752:	3b01      	subs	r3, #1
 800a754:	60a3      	str	r3, [r4, #8]
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	6022      	str	r2, [r4, #0]
 800a75c:	701e      	strb	r6, [r3, #0]
 800a75e:	6962      	ldr	r2, [r4, #20]
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	429a      	cmp	r2, r3
 800a764:	d004      	beq.n	800a770 <__swbuf_r+0x6e>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	07db      	lsls	r3, r3, #31
 800a76a:	d5e1      	bpl.n	800a730 <__swbuf_r+0x2e>
 800a76c:	2e0a      	cmp	r6, #10
 800a76e:	d1df      	bne.n	800a730 <__swbuf_r+0x2e>
 800a770:	4621      	mov	r1, r4
 800a772:	4628      	mov	r0, r5
 800a774:	f000 fd2e 	bl	800b1d4 <_fflush_r>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d0d9      	beq.n	800a730 <__swbuf_r+0x2e>
 800a77c:	e7d6      	b.n	800a72c <__swbuf_r+0x2a>
	...

0800a780 <__swsetup_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4b29      	ldr	r3, [pc, #164]	@ (800a828 <__swsetup_r+0xa8>)
 800a784:	4605      	mov	r5, r0
 800a786:	6818      	ldr	r0, [r3, #0]
 800a788:	460c      	mov	r4, r1
 800a78a:	b118      	cbz	r0, 800a794 <__swsetup_r+0x14>
 800a78c:	6a03      	ldr	r3, [r0, #32]
 800a78e:	b90b      	cbnz	r3, 800a794 <__swsetup_r+0x14>
 800a790:	f7ff fece 	bl	800a530 <__sinit>
 800a794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a798:	0719      	lsls	r1, r3, #28
 800a79a:	d422      	bmi.n	800a7e2 <__swsetup_r+0x62>
 800a79c:	06da      	lsls	r2, r3, #27
 800a79e:	d407      	bmi.n	800a7b0 <__swsetup_r+0x30>
 800a7a0:	2209      	movs	r2, #9
 800a7a2:	602a      	str	r2, [r5, #0]
 800a7a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ae:	e033      	b.n	800a818 <__swsetup_r+0x98>
 800a7b0:	0758      	lsls	r0, r3, #29
 800a7b2:	d512      	bpl.n	800a7da <__swsetup_r+0x5a>
 800a7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7b6:	b141      	cbz	r1, 800a7ca <__swsetup_r+0x4a>
 800a7b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7bc:	4299      	cmp	r1, r3
 800a7be:	d002      	beq.n	800a7c6 <__swsetup_r+0x46>
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 f8bd 	bl	800a940 <_free_r>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	6063      	str	r3, [r4, #4]
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	f043 0308 	orr.w	r3, r3, #8
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	6923      	ldr	r3, [r4, #16]
 800a7e4:	b94b      	cbnz	r3, 800a7fa <__swsetup_r+0x7a>
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7f0:	d003      	beq.n	800a7fa <__swsetup_r+0x7a>
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 fd3b 	bl	800b270 <__smakebuf_r>
 800a7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fe:	f013 0201 	ands.w	r2, r3, #1
 800a802:	d00a      	beq.n	800a81a <__swsetup_r+0x9a>
 800a804:	2200      	movs	r2, #0
 800a806:	60a2      	str	r2, [r4, #8]
 800a808:	6962      	ldr	r2, [r4, #20]
 800a80a:	4252      	negs	r2, r2
 800a80c:	61a2      	str	r2, [r4, #24]
 800a80e:	6922      	ldr	r2, [r4, #16]
 800a810:	b942      	cbnz	r2, 800a824 <__swsetup_r+0xa4>
 800a812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a816:	d1c5      	bne.n	800a7a4 <__swsetup_r+0x24>
 800a818:	bd38      	pop	{r3, r4, r5, pc}
 800a81a:	0799      	lsls	r1, r3, #30
 800a81c:	bf58      	it	pl
 800a81e:	6962      	ldrpl	r2, [r4, #20]
 800a820:	60a2      	str	r2, [r4, #8]
 800a822:	e7f4      	b.n	800a80e <__swsetup_r+0x8e>
 800a824:	2000      	movs	r0, #0
 800a826:	e7f7      	b.n	800a818 <__swsetup_r+0x98>
 800a828:	24000038 	.word	0x24000038

0800a82c <memset>:
 800a82c:	4402      	add	r2, r0
 800a82e:	4603      	mov	r3, r0
 800a830:	4293      	cmp	r3, r2
 800a832:	d100      	bne.n	800a836 <memset+0xa>
 800a834:	4770      	bx	lr
 800a836:	f803 1b01 	strb.w	r1, [r3], #1
 800a83a:	e7f9      	b.n	800a830 <memset+0x4>

0800a83c <_close_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d06      	ldr	r5, [pc, #24]	@ (800a858 <_close_r+0x1c>)
 800a840:	2300      	movs	r3, #0
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f9 fbce 	bl	8003fe8 <_close>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_close_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_close_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	24000324 	.word	0x24000324

0800a85c <_lseek_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d07      	ldr	r5, [pc, #28]	@ (800a87c <_lseek_r+0x20>)
 800a860:	4604      	mov	r4, r0
 800a862:	4608      	mov	r0, r1
 800a864:	4611      	mov	r1, r2
 800a866:	2200      	movs	r2, #0
 800a868:	602a      	str	r2, [r5, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	f7f9 fbe3 	bl	8004036 <_lseek>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_lseek_r+0x1e>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_lseek_r+0x1e>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	24000324 	.word	0x24000324

0800a880 <_read_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d07      	ldr	r5, [pc, #28]	@ (800a8a0 <_read_r+0x20>)
 800a884:	4604      	mov	r4, r0
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	2200      	movs	r2, #0
 800a88c:	602a      	str	r2, [r5, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	f7f9 fb71 	bl	8003f76 <_read>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_read_r+0x1e>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_read_r+0x1e>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	24000324 	.word	0x24000324

0800a8a4 <_write_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d07      	ldr	r5, [pc, #28]	@ (800a8c4 <_write_r+0x20>)
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	4608      	mov	r0, r1
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	602a      	str	r2, [r5, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	f7f9 fb7c 	bl	8003fb0 <_write>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <_write_r+0x1e>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	b103      	cbz	r3, 800a8c2 <_write_r+0x1e>
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	24000324 	.word	0x24000324

0800a8c8 <__errno>:
 800a8c8:	4b01      	ldr	r3, [pc, #4]	@ (800a8d0 <__errno+0x8>)
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	24000038 	.word	0x24000038

0800a8d4 <__libc_init_array>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	4d0d      	ldr	r5, [pc, #52]	@ (800a90c <__libc_init_array+0x38>)
 800a8d8:	4c0d      	ldr	r4, [pc, #52]	@ (800a910 <__libc_init_array+0x3c>)
 800a8da:	1b64      	subs	r4, r4, r5
 800a8dc:	10a4      	asrs	r4, r4, #2
 800a8de:	2600      	movs	r6, #0
 800a8e0:	42a6      	cmp	r6, r4
 800a8e2:	d109      	bne.n	800a8f8 <__libc_init_array+0x24>
 800a8e4:	4d0b      	ldr	r5, [pc, #44]	@ (800a914 <__libc_init_array+0x40>)
 800a8e6:	4c0c      	ldr	r4, [pc, #48]	@ (800a918 <__libc_init_array+0x44>)
 800a8e8:	f000 fd30 	bl	800b34c <_init>
 800a8ec:	1b64      	subs	r4, r4, r5
 800a8ee:	10a4      	asrs	r4, r4, #2
 800a8f0:	2600      	movs	r6, #0
 800a8f2:	42a6      	cmp	r6, r4
 800a8f4:	d105      	bne.n	800a902 <__libc_init_array+0x2e>
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}
 800a8f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8fc:	4798      	blx	r3
 800a8fe:	3601      	adds	r6, #1
 800a900:	e7ee      	b.n	800a8e0 <__libc_init_array+0xc>
 800a902:	f855 3b04 	ldr.w	r3, [r5], #4
 800a906:	4798      	blx	r3
 800a908:	3601      	adds	r6, #1
 800a90a:	e7f2      	b.n	800a8f2 <__libc_init_array+0x1e>
 800a90c:	0800fa50 	.word	0x0800fa50
 800a910:	0800fa50 	.word	0x0800fa50
 800a914:	0800fa50 	.word	0x0800fa50
 800a918:	0800fa54 	.word	0x0800fa54

0800a91c <__retarget_lock_init_recursive>:
 800a91c:	4770      	bx	lr

0800a91e <__retarget_lock_acquire_recursive>:
 800a91e:	4770      	bx	lr

0800a920 <__retarget_lock_release_recursive>:
 800a920:	4770      	bx	lr

0800a922 <memcpy>:
 800a922:	440a      	add	r2, r1
 800a924:	4291      	cmp	r1, r2
 800a926:	f100 33ff 	add.w	r3, r0, #4294967295
 800a92a:	d100      	bne.n	800a92e <memcpy+0xc>
 800a92c:	4770      	bx	lr
 800a92e:	b510      	push	{r4, lr}
 800a930:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a934:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a938:	4291      	cmp	r1, r2
 800a93a:	d1f9      	bne.n	800a930 <memcpy+0xe>
 800a93c:	bd10      	pop	{r4, pc}
	...

0800a940 <_free_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4605      	mov	r5, r0
 800a944:	2900      	cmp	r1, #0
 800a946:	d041      	beq.n	800a9cc <_free_r+0x8c>
 800a948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a94c:	1f0c      	subs	r4, r1, #4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	bfb8      	it	lt
 800a952:	18e4      	addlt	r4, r4, r3
 800a954:	f000 f8e0 	bl	800ab18 <__malloc_lock>
 800a958:	4a1d      	ldr	r2, [pc, #116]	@ (800a9d0 <_free_r+0x90>)
 800a95a:	6813      	ldr	r3, [r2, #0]
 800a95c:	b933      	cbnz	r3, 800a96c <_free_r+0x2c>
 800a95e:	6063      	str	r3, [r4, #4]
 800a960:	6014      	str	r4, [r2, #0]
 800a962:	4628      	mov	r0, r5
 800a964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a968:	f000 b8dc 	b.w	800ab24 <__malloc_unlock>
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	d908      	bls.n	800a982 <_free_r+0x42>
 800a970:	6820      	ldr	r0, [r4, #0]
 800a972:	1821      	adds	r1, r4, r0
 800a974:	428b      	cmp	r3, r1
 800a976:	bf01      	itttt	eq
 800a978:	6819      	ldreq	r1, [r3, #0]
 800a97a:	685b      	ldreq	r3, [r3, #4]
 800a97c:	1809      	addeq	r1, r1, r0
 800a97e:	6021      	streq	r1, [r4, #0]
 800a980:	e7ed      	b.n	800a95e <_free_r+0x1e>
 800a982:	461a      	mov	r2, r3
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	b10b      	cbz	r3, 800a98c <_free_r+0x4c>
 800a988:	42a3      	cmp	r3, r4
 800a98a:	d9fa      	bls.n	800a982 <_free_r+0x42>
 800a98c:	6811      	ldr	r1, [r2, #0]
 800a98e:	1850      	adds	r0, r2, r1
 800a990:	42a0      	cmp	r0, r4
 800a992:	d10b      	bne.n	800a9ac <_free_r+0x6c>
 800a994:	6820      	ldr	r0, [r4, #0]
 800a996:	4401      	add	r1, r0
 800a998:	1850      	adds	r0, r2, r1
 800a99a:	4283      	cmp	r3, r0
 800a99c:	6011      	str	r1, [r2, #0]
 800a99e:	d1e0      	bne.n	800a962 <_free_r+0x22>
 800a9a0:	6818      	ldr	r0, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	6053      	str	r3, [r2, #4]
 800a9a6:	4408      	add	r0, r1
 800a9a8:	6010      	str	r0, [r2, #0]
 800a9aa:	e7da      	b.n	800a962 <_free_r+0x22>
 800a9ac:	d902      	bls.n	800a9b4 <_free_r+0x74>
 800a9ae:	230c      	movs	r3, #12
 800a9b0:	602b      	str	r3, [r5, #0]
 800a9b2:	e7d6      	b.n	800a962 <_free_r+0x22>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	1821      	adds	r1, r4, r0
 800a9b8:	428b      	cmp	r3, r1
 800a9ba:	bf04      	itt	eq
 800a9bc:	6819      	ldreq	r1, [r3, #0]
 800a9be:	685b      	ldreq	r3, [r3, #4]
 800a9c0:	6063      	str	r3, [r4, #4]
 800a9c2:	bf04      	itt	eq
 800a9c4:	1809      	addeq	r1, r1, r0
 800a9c6:	6021      	streq	r1, [r4, #0]
 800a9c8:	6054      	str	r4, [r2, #4]
 800a9ca:	e7ca      	b.n	800a962 <_free_r+0x22>
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	24000330 	.word	0x24000330

0800a9d4 <sbrk_aligned>:
 800a9d4:	b570      	push	{r4, r5, r6, lr}
 800a9d6:	4e0f      	ldr	r6, [pc, #60]	@ (800aa14 <sbrk_aligned+0x40>)
 800a9d8:	460c      	mov	r4, r1
 800a9da:	6831      	ldr	r1, [r6, #0]
 800a9dc:	4605      	mov	r5, r0
 800a9de:	b911      	cbnz	r1, 800a9e6 <sbrk_aligned+0x12>
 800a9e0:	f000 fca4 	bl	800b32c <_sbrk_r>
 800a9e4:	6030      	str	r0, [r6, #0]
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f000 fc9f 	bl	800b32c <_sbrk_r>
 800a9ee:	1c43      	adds	r3, r0, #1
 800a9f0:	d103      	bne.n	800a9fa <sbrk_aligned+0x26>
 800a9f2:	f04f 34ff 	mov.w	r4, #4294967295
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
 800a9fa:	1cc4      	adds	r4, r0, #3
 800a9fc:	f024 0403 	bic.w	r4, r4, #3
 800aa00:	42a0      	cmp	r0, r4
 800aa02:	d0f8      	beq.n	800a9f6 <sbrk_aligned+0x22>
 800aa04:	1a21      	subs	r1, r4, r0
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 fc90 	bl	800b32c <_sbrk_r>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d1f2      	bne.n	800a9f6 <sbrk_aligned+0x22>
 800aa10:	e7ef      	b.n	800a9f2 <sbrk_aligned+0x1e>
 800aa12:	bf00      	nop
 800aa14:	2400032c 	.word	0x2400032c

0800aa18 <_malloc_r>:
 800aa18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa1c:	1ccd      	adds	r5, r1, #3
 800aa1e:	f025 0503 	bic.w	r5, r5, #3
 800aa22:	3508      	adds	r5, #8
 800aa24:	2d0c      	cmp	r5, #12
 800aa26:	bf38      	it	cc
 800aa28:	250c      	movcc	r5, #12
 800aa2a:	2d00      	cmp	r5, #0
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	db01      	blt.n	800aa34 <_malloc_r+0x1c>
 800aa30:	42a9      	cmp	r1, r5
 800aa32:	d904      	bls.n	800aa3e <_malloc_r+0x26>
 800aa34:	230c      	movs	r3, #12
 800aa36:	6033      	str	r3, [r6, #0]
 800aa38:	2000      	movs	r0, #0
 800aa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab14 <_malloc_r+0xfc>
 800aa42:	f000 f869 	bl	800ab18 <__malloc_lock>
 800aa46:	f8d8 3000 	ldr.w	r3, [r8]
 800aa4a:	461c      	mov	r4, r3
 800aa4c:	bb44      	cbnz	r4, 800aaa0 <_malloc_r+0x88>
 800aa4e:	4629      	mov	r1, r5
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7ff ffbf 	bl	800a9d4 <sbrk_aligned>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	4604      	mov	r4, r0
 800aa5a:	d158      	bne.n	800ab0e <_malloc_r+0xf6>
 800aa5c:	f8d8 4000 	ldr.w	r4, [r8]
 800aa60:	4627      	mov	r7, r4
 800aa62:	2f00      	cmp	r7, #0
 800aa64:	d143      	bne.n	800aaee <_malloc_r+0xd6>
 800aa66:	2c00      	cmp	r4, #0
 800aa68:	d04b      	beq.n	800ab02 <_malloc_r+0xea>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	4630      	mov	r0, r6
 800aa70:	eb04 0903 	add.w	r9, r4, r3
 800aa74:	f000 fc5a 	bl	800b32c <_sbrk_r>
 800aa78:	4581      	cmp	r9, r0
 800aa7a:	d142      	bne.n	800ab02 <_malloc_r+0xea>
 800aa7c:	6821      	ldr	r1, [r4, #0]
 800aa7e:	1a6d      	subs	r5, r5, r1
 800aa80:	4629      	mov	r1, r5
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7ff ffa6 	bl	800a9d4 <sbrk_aligned>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d03a      	beq.n	800ab02 <_malloc_r+0xea>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	442b      	add	r3, r5
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	f8d8 3000 	ldr.w	r3, [r8]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	bb62      	cbnz	r2, 800aaf4 <_malloc_r+0xdc>
 800aa9a:	f8c8 7000 	str.w	r7, [r8]
 800aa9e:	e00f      	b.n	800aac0 <_malloc_r+0xa8>
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	1b52      	subs	r2, r2, r5
 800aaa4:	d420      	bmi.n	800aae8 <_malloc_r+0xd0>
 800aaa6:	2a0b      	cmp	r2, #11
 800aaa8:	d917      	bls.n	800aada <_malloc_r+0xc2>
 800aaaa:	1961      	adds	r1, r4, r5
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	6025      	str	r5, [r4, #0]
 800aab0:	bf18      	it	ne
 800aab2:	6059      	strne	r1, [r3, #4]
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	bf08      	it	eq
 800aab8:	f8c8 1000 	streq.w	r1, [r8]
 800aabc:	5162      	str	r2, [r4, r5]
 800aabe:	604b      	str	r3, [r1, #4]
 800aac0:	4630      	mov	r0, r6
 800aac2:	f000 f82f 	bl	800ab24 <__malloc_unlock>
 800aac6:	f104 000b 	add.w	r0, r4, #11
 800aaca:	1d23      	adds	r3, r4, #4
 800aacc:	f020 0007 	bic.w	r0, r0, #7
 800aad0:	1ac2      	subs	r2, r0, r3
 800aad2:	bf1c      	itt	ne
 800aad4:	1a1b      	subne	r3, r3, r0
 800aad6:	50a3      	strne	r3, [r4, r2]
 800aad8:	e7af      	b.n	800aa3a <_malloc_r+0x22>
 800aada:	6862      	ldr	r2, [r4, #4]
 800aadc:	42a3      	cmp	r3, r4
 800aade:	bf0c      	ite	eq
 800aae0:	f8c8 2000 	streq.w	r2, [r8]
 800aae4:	605a      	strne	r2, [r3, #4]
 800aae6:	e7eb      	b.n	800aac0 <_malloc_r+0xa8>
 800aae8:	4623      	mov	r3, r4
 800aaea:	6864      	ldr	r4, [r4, #4]
 800aaec:	e7ae      	b.n	800aa4c <_malloc_r+0x34>
 800aaee:	463c      	mov	r4, r7
 800aaf0:	687f      	ldr	r7, [r7, #4]
 800aaf2:	e7b6      	b.n	800aa62 <_malloc_r+0x4a>
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	d1fb      	bne.n	800aaf4 <_malloc_r+0xdc>
 800aafc:	2300      	movs	r3, #0
 800aafe:	6053      	str	r3, [r2, #4]
 800ab00:	e7de      	b.n	800aac0 <_malloc_r+0xa8>
 800ab02:	230c      	movs	r3, #12
 800ab04:	6033      	str	r3, [r6, #0]
 800ab06:	4630      	mov	r0, r6
 800ab08:	f000 f80c 	bl	800ab24 <__malloc_unlock>
 800ab0c:	e794      	b.n	800aa38 <_malloc_r+0x20>
 800ab0e:	6005      	str	r5, [r0, #0]
 800ab10:	e7d6      	b.n	800aac0 <_malloc_r+0xa8>
 800ab12:	bf00      	nop
 800ab14:	24000330 	.word	0x24000330

0800ab18 <__malloc_lock>:
 800ab18:	4801      	ldr	r0, [pc, #4]	@ (800ab20 <__malloc_lock+0x8>)
 800ab1a:	f7ff bf00 	b.w	800a91e <__retarget_lock_acquire_recursive>
 800ab1e:	bf00      	nop
 800ab20:	24000328 	.word	0x24000328

0800ab24 <__malloc_unlock>:
 800ab24:	4801      	ldr	r0, [pc, #4]	@ (800ab2c <__malloc_unlock+0x8>)
 800ab26:	f7ff befb 	b.w	800a920 <__retarget_lock_release_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	24000328 	.word	0x24000328

0800ab30 <__sfputc_r>:
 800ab30:	6893      	ldr	r3, [r2, #8]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	b410      	push	{r4}
 800ab38:	6093      	str	r3, [r2, #8]
 800ab3a:	da08      	bge.n	800ab4e <__sfputc_r+0x1e>
 800ab3c:	6994      	ldr	r4, [r2, #24]
 800ab3e:	42a3      	cmp	r3, r4
 800ab40:	db01      	blt.n	800ab46 <__sfputc_r+0x16>
 800ab42:	290a      	cmp	r1, #10
 800ab44:	d103      	bne.n	800ab4e <__sfputc_r+0x1e>
 800ab46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab4a:	f7ff bdda 	b.w	800a702 <__swbuf_r>
 800ab4e:	6813      	ldr	r3, [r2, #0]
 800ab50:	1c58      	adds	r0, r3, #1
 800ab52:	6010      	str	r0, [r2, #0]
 800ab54:	7019      	strb	r1, [r3, #0]
 800ab56:	4608      	mov	r0, r1
 800ab58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <__sfputs_r>:
 800ab5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab60:	4606      	mov	r6, r0
 800ab62:	460f      	mov	r7, r1
 800ab64:	4614      	mov	r4, r2
 800ab66:	18d5      	adds	r5, r2, r3
 800ab68:	42ac      	cmp	r4, r5
 800ab6a:	d101      	bne.n	800ab70 <__sfputs_r+0x12>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e007      	b.n	800ab80 <__sfputs_r+0x22>
 800ab70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab74:	463a      	mov	r2, r7
 800ab76:	4630      	mov	r0, r6
 800ab78:	f7ff ffda 	bl	800ab30 <__sfputc_r>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d1f3      	bne.n	800ab68 <__sfputs_r+0xa>
 800ab80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab84 <_vfiprintf_r>:
 800ab84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab88:	460d      	mov	r5, r1
 800ab8a:	b09d      	sub	sp, #116	@ 0x74
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	4698      	mov	r8, r3
 800ab90:	4606      	mov	r6, r0
 800ab92:	b118      	cbz	r0, 800ab9c <_vfiprintf_r+0x18>
 800ab94:	6a03      	ldr	r3, [r0, #32]
 800ab96:	b90b      	cbnz	r3, 800ab9c <_vfiprintf_r+0x18>
 800ab98:	f7ff fcca 	bl	800a530 <__sinit>
 800ab9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab9e:	07d9      	lsls	r1, r3, #31
 800aba0:	d405      	bmi.n	800abae <_vfiprintf_r+0x2a>
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	059a      	lsls	r2, r3, #22
 800aba6:	d402      	bmi.n	800abae <_vfiprintf_r+0x2a>
 800aba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abaa:	f7ff feb8 	bl	800a91e <__retarget_lock_acquire_recursive>
 800abae:	89ab      	ldrh	r3, [r5, #12]
 800abb0:	071b      	lsls	r3, r3, #28
 800abb2:	d501      	bpl.n	800abb8 <_vfiprintf_r+0x34>
 800abb4:	692b      	ldr	r3, [r5, #16]
 800abb6:	b99b      	cbnz	r3, 800abe0 <_vfiprintf_r+0x5c>
 800abb8:	4629      	mov	r1, r5
 800abba:	4630      	mov	r0, r6
 800abbc:	f7ff fde0 	bl	800a780 <__swsetup_r>
 800abc0:	b170      	cbz	r0, 800abe0 <_vfiprintf_r+0x5c>
 800abc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abc4:	07dc      	lsls	r4, r3, #31
 800abc6:	d504      	bpl.n	800abd2 <_vfiprintf_r+0x4e>
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295
 800abcc:	b01d      	add	sp, #116	@ 0x74
 800abce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd2:	89ab      	ldrh	r3, [r5, #12]
 800abd4:	0598      	lsls	r0, r3, #22
 800abd6:	d4f7      	bmi.n	800abc8 <_vfiprintf_r+0x44>
 800abd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abda:	f7ff fea1 	bl	800a920 <__retarget_lock_release_recursive>
 800abde:	e7f3      	b.n	800abc8 <_vfiprintf_r+0x44>
 800abe0:	2300      	movs	r3, #0
 800abe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800abe4:	2320      	movs	r3, #32
 800abe6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abea:	f8cd 800c 	str.w	r8, [sp, #12]
 800abee:	2330      	movs	r3, #48	@ 0x30
 800abf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ada0 <_vfiprintf_r+0x21c>
 800abf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abf8:	f04f 0901 	mov.w	r9, #1
 800abfc:	4623      	mov	r3, r4
 800abfe:	469a      	mov	sl, r3
 800ac00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac04:	b10a      	cbz	r2, 800ac0a <_vfiprintf_r+0x86>
 800ac06:	2a25      	cmp	r2, #37	@ 0x25
 800ac08:	d1f9      	bne.n	800abfe <_vfiprintf_r+0x7a>
 800ac0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac0e:	d00b      	beq.n	800ac28 <_vfiprintf_r+0xa4>
 800ac10:	465b      	mov	r3, fp
 800ac12:	4622      	mov	r2, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ffa1 	bl	800ab5e <__sfputs_r>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f000 80a7 	beq.w	800ad70 <_vfiprintf_r+0x1ec>
 800ac22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac24:	445a      	add	r2, fp
 800ac26:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac28:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 809f 	beq.w	800ad70 <_vfiprintf_r+0x1ec>
 800ac32:	2300      	movs	r3, #0
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295
 800ac38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac3c:	f10a 0a01 	add.w	sl, sl, #1
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	9307      	str	r3, [sp, #28]
 800ac44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac48:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac4a:	4654      	mov	r4, sl
 800ac4c:	2205      	movs	r2, #5
 800ac4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac52:	4853      	ldr	r0, [pc, #332]	@ (800ada0 <_vfiprintf_r+0x21c>)
 800ac54:	f7f5 fb44 	bl	80002e0 <memchr>
 800ac58:	9a04      	ldr	r2, [sp, #16]
 800ac5a:	b9d8      	cbnz	r0, 800ac94 <_vfiprintf_r+0x110>
 800ac5c:	06d1      	lsls	r1, r2, #27
 800ac5e:	bf44      	itt	mi
 800ac60:	2320      	movmi	r3, #32
 800ac62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac66:	0713      	lsls	r3, r2, #28
 800ac68:	bf44      	itt	mi
 800ac6a:	232b      	movmi	r3, #43	@ 0x2b
 800ac6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac70:	f89a 3000 	ldrb.w	r3, [sl]
 800ac74:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac76:	d015      	beq.n	800aca4 <_vfiprintf_r+0x120>
 800ac78:	9a07      	ldr	r2, [sp, #28]
 800ac7a:	4654      	mov	r4, sl
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f04f 0c0a 	mov.w	ip, #10
 800ac82:	4621      	mov	r1, r4
 800ac84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac88:	3b30      	subs	r3, #48	@ 0x30
 800ac8a:	2b09      	cmp	r3, #9
 800ac8c:	d94b      	bls.n	800ad26 <_vfiprintf_r+0x1a2>
 800ac8e:	b1b0      	cbz	r0, 800acbe <_vfiprintf_r+0x13a>
 800ac90:	9207      	str	r2, [sp, #28]
 800ac92:	e014      	b.n	800acbe <_vfiprintf_r+0x13a>
 800ac94:	eba0 0308 	sub.w	r3, r0, r8
 800ac98:	fa09 f303 	lsl.w	r3, r9, r3
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	46a2      	mov	sl, r4
 800aca2:	e7d2      	b.n	800ac4a <_vfiprintf_r+0xc6>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	1d19      	adds	r1, r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	9103      	str	r1, [sp, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	bfbb      	ittet	lt
 800acb0:	425b      	neglt	r3, r3
 800acb2:	f042 0202 	orrlt.w	r2, r2, #2
 800acb6:	9307      	strge	r3, [sp, #28]
 800acb8:	9307      	strlt	r3, [sp, #28]
 800acba:	bfb8      	it	lt
 800acbc:	9204      	strlt	r2, [sp, #16]
 800acbe:	7823      	ldrb	r3, [r4, #0]
 800acc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800acc2:	d10a      	bne.n	800acda <_vfiprintf_r+0x156>
 800acc4:	7863      	ldrb	r3, [r4, #1]
 800acc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800acc8:	d132      	bne.n	800ad30 <_vfiprintf_r+0x1ac>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	1d1a      	adds	r2, r3, #4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	9203      	str	r2, [sp, #12]
 800acd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acd6:	3402      	adds	r4, #2
 800acd8:	9305      	str	r3, [sp, #20]
 800acda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800adb0 <_vfiprintf_r+0x22c>
 800acde:	7821      	ldrb	r1, [r4, #0]
 800ace0:	2203      	movs	r2, #3
 800ace2:	4650      	mov	r0, sl
 800ace4:	f7f5 fafc 	bl	80002e0 <memchr>
 800ace8:	b138      	cbz	r0, 800acfa <_vfiprintf_r+0x176>
 800acea:	9b04      	ldr	r3, [sp, #16]
 800acec:	eba0 000a 	sub.w	r0, r0, sl
 800acf0:	2240      	movs	r2, #64	@ 0x40
 800acf2:	4082      	lsls	r2, r0
 800acf4:	4313      	orrs	r3, r2
 800acf6:	3401      	adds	r4, #1
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acfe:	4829      	ldr	r0, [pc, #164]	@ (800ada4 <_vfiprintf_r+0x220>)
 800ad00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad04:	2206      	movs	r2, #6
 800ad06:	f7f5 faeb 	bl	80002e0 <memchr>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d03f      	beq.n	800ad8e <_vfiprintf_r+0x20a>
 800ad0e:	4b26      	ldr	r3, [pc, #152]	@ (800ada8 <_vfiprintf_r+0x224>)
 800ad10:	bb1b      	cbnz	r3, 800ad5a <_vfiprintf_r+0x1d6>
 800ad12:	9b03      	ldr	r3, [sp, #12]
 800ad14:	3307      	adds	r3, #7
 800ad16:	f023 0307 	bic.w	r3, r3, #7
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	9303      	str	r3, [sp, #12]
 800ad1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad20:	443b      	add	r3, r7
 800ad22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad24:	e76a      	b.n	800abfc <_vfiprintf_r+0x78>
 800ad26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	e7a8      	b.n	800ac82 <_vfiprintf_r+0xfe>
 800ad30:	2300      	movs	r3, #0
 800ad32:	3401      	adds	r4, #1
 800ad34:	9305      	str	r3, [sp, #20]
 800ad36:	4619      	mov	r1, r3
 800ad38:	f04f 0c0a 	mov.w	ip, #10
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad42:	3a30      	subs	r2, #48	@ 0x30
 800ad44:	2a09      	cmp	r2, #9
 800ad46:	d903      	bls.n	800ad50 <_vfiprintf_r+0x1cc>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0c6      	beq.n	800acda <_vfiprintf_r+0x156>
 800ad4c:	9105      	str	r1, [sp, #20]
 800ad4e:	e7c4      	b.n	800acda <_vfiprintf_r+0x156>
 800ad50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad54:	4604      	mov	r4, r0
 800ad56:	2301      	movs	r3, #1
 800ad58:	e7f0      	b.n	800ad3c <_vfiprintf_r+0x1b8>
 800ad5a:	ab03      	add	r3, sp, #12
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	462a      	mov	r2, r5
 800ad60:	4b12      	ldr	r3, [pc, #72]	@ (800adac <_vfiprintf_r+0x228>)
 800ad62:	a904      	add	r1, sp, #16
 800ad64:	4630      	mov	r0, r6
 800ad66:	f3af 8000 	nop.w
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	1c78      	adds	r0, r7, #1
 800ad6e:	d1d6      	bne.n	800ad1e <_vfiprintf_r+0x19a>
 800ad70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d405      	bmi.n	800ad82 <_vfiprintf_r+0x1fe>
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	059a      	lsls	r2, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_vfiprintf_r+0x1fe>
 800ad7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7e:	f7ff fdcf 	bl	800a920 <__retarget_lock_release_recursive>
 800ad82:	89ab      	ldrh	r3, [r5, #12]
 800ad84:	065b      	lsls	r3, r3, #25
 800ad86:	f53f af1f 	bmi.w	800abc8 <_vfiprintf_r+0x44>
 800ad8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad8c:	e71e      	b.n	800abcc <_vfiprintf_r+0x48>
 800ad8e:	ab03      	add	r3, sp, #12
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	462a      	mov	r2, r5
 800ad94:	4b05      	ldr	r3, [pc, #20]	@ (800adac <_vfiprintf_r+0x228>)
 800ad96:	a904      	add	r1, sp, #16
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f000 f879 	bl	800ae90 <_printf_i>
 800ad9e:	e7e4      	b.n	800ad6a <_vfiprintf_r+0x1e6>
 800ada0:	0800fa14 	.word	0x0800fa14
 800ada4:	0800fa1e 	.word	0x0800fa1e
 800ada8:	00000000 	.word	0x00000000
 800adac:	0800ab5f 	.word	0x0800ab5f
 800adb0:	0800fa1a 	.word	0x0800fa1a

0800adb4 <_printf_common>:
 800adb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb8:	4616      	mov	r6, r2
 800adba:	4698      	mov	r8, r3
 800adbc:	688a      	ldr	r2, [r1, #8]
 800adbe:	690b      	ldr	r3, [r1, #16]
 800adc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800adc4:	4293      	cmp	r3, r2
 800adc6:	bfb8      	it	lt
 800adc8:	4613      	movlt	r3, r2
 800adca:	6033      	str	r3, [r6, #0]
 800adcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800add0:	4607      	mov	r7, r0
 800add2:	460c      	mov	r4, r1
 800add4:	b10a      	cbz	r2, 800adda <_printf_common+0x26>
 800add6:	3301      	adds	r3, #1
 800add8:	6033      	str	r3, [r6, #0]
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	0699      	lsls	r1, r3, #26
 800adde:	bf42      	ittt	mi
 800ade0:	6833      	ldrmi	r3, [r6, #0]
 800ade2:	3302      	addmi	r3, #2
 800ade4:	6033      	strmi	r3, [r6, #0]
 800ade6:	6825      	ldr	r5, [r4, #0]
 800ade8:	f015 0506 	ands.w	r5, r5, #6
 800adec:	d106      	bne.n	800adfc <_printf_common+0x48>
 800adee:	f104 0a19 	add.w	sl, r4, #25
 800adf2:	68e3      	ldr	r3, [r4, #12]
 800adf4:	6832      	ldr	r2, [r6, #0]
 800adf6:	1a9b      	subs	r3, r3, r2
 800adf8:	42ab      	cmp	r3, r5
 800adfa:	dc26      	bgt.n	800ae4a <_printf_common+0x96>
 800adfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae00:	6822      	ldr	r2, [r4, #0]
 800ae02:	3b00      	subs	r3, #0
 800ae04:	bf18      	it	ne
 800ae06:	2301      	movne	r3, #1
 800ae08:	0692      	lsls	r2, r2, #26
 800ae0a:	d42b      	bmi.n	800ae64 <_printf_common+0xb0>
 800ae0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae10:	4641      	mov	r1, r8
 800ae12:	4638      	mov	r0, r7
 800ae14:	47c8      	blx	r9
 800ae16:	3001      	adds	r0, #1
 800ae18:	d01e      	beq.n	800ae58 <_printf_common+0xa4>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	6922      	ldr	r2, [r4, #16]
 800ae1e:	f003 0306 	and.w	r3, r3, #6
 800ae22:	2b04      	cmp	r3, #4
 800ae24:	bf02      	ittt	eq
 800ae26:	68e5      	ldreq	r5, [r4, #12]
 800ae28:	6833      	ldreq	r3, [r6, #0]
 800ae2a:	1aed      	subeq	r5, r5, r3
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	bf0c      	ite	eq
 800ae30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae34:	2500      	movne	r5, #0
 800ae36:	4293      	cmp	r3, r2
 800ae38:	bfc4      	itt	gt
 800ae3a:	1a9b      	subgt	r3, r3, r2
 800ae3c:	18ed      	addgt	r5, r5, r3
 800ae3e:	2600      	movs	r6, #0
 800ae40:	341a      	adds	r4, #26
 800ae42:	42b5      	cmp	r5, r6
 800ae44:	d11a      	bne.n	800ae7c <_printf_common+0xc8>
 800ae46:	2000      	movs	r0, #0
 800ae48:	e008      	b.n	800ae5c <_printf_common+0xa8>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	4652      	mov	r2, sl
 800ae4e:	4641      	mov	r1, r8
 800ae50:	4638      	mov	r0, r7
 800ae52:	47c8      	blx	r9
 800ae54:	3001      	adds	r0, #1
 800ae56:	d103      	bne.n	800ae60 <_printf_common+0xac>
 800ae58:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae60:	3501      	adds	r5, #1
 800ae62:	e7c6      	b.n	800adf2 <_printf_common+0x3e>
 800ae64:	18e1      	adds	r1, r4, r3
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	2030      	movs	r0, #48	@ 0x30
 800ae6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae6e:	4422      	add	r2, r4
 800ae70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae78:	3302      	adds	r3, #2
 800ae7a:	e7c7      	b.n	800ae0c <_printf_common+0x58>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	4622      	mov	r2, r4
 800ae80:	4641      	mov	r1, r8
 800ae82:	4638      	mov	r0, r7
 800ae84:	47c8      	blx	r9
 800ae86:	3001      	adds	r0, #1
 800ae88:	d0e6      	beq.n	800ae58 <_printf_common+0xa4>
 800ae8a:	3601      	adds	r6, #1
 800ae8c:	e7d9      	b.n	800ae42 <_printf_common+0x8e>
	...

0800ae90 <_printf_i>:
 800ae90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	7e0f      	ldrb	r7, [r1, #24]
 800ae96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae98:	2f78      	cmp	r7, #120	@ 0x78
 800ae9a:	4691      	mov	r9, r2
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	469a      	mov	sl, r3
 800aea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aea6:	d807      	bhi.n	800aeb8 <_printf_i+0x28>
 800aea8:	2f62      	cmp	r7, #98	@ 0x62
 800aeaa:	d80a      	bhi.n	800aec2 <_printf_i+0x32>
 800aeac:	2f00      	cmp	r7, #0
 800aeae:	f000 80d1 	beq.w	800b054 <_printf_i+0x1c4>
 800aeb2:	2f58      	cmp	r7, #88	@ 0x58
 800aeb4:	f000 80b8 	beq.w	800b028 <_printf_i+0x198>
 800aeb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aec0:	e03a      	b.n	800af38 <_printf_i+0xa8>
 800aec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aec6:	2b15      	cmp	r3, #21
 800aec8:	d8f6      	bhi.n	800aeb8 <_printf_i+0x28>
 800aeca:	a101      	add	r1, pc, #4	@ (adr r1, 800aed0 <_printf_i+0x40>)
 800aecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aed0:	0800af29 	.word	0x0800af29
 800aed4:	0800af3d 	.word	0x0800af3d
 800aed8:	0800aeb9 	.word	0x0800aeb9
 800aedc:	0800aeb9 	.word	0x0800aeb9
 800aee0:	0800aeb9 	.word	0x0800aeb9
 800aee4:	0800aeb9 	.word	0x0800aeb9
 800aee8:	0800af3d 	.word	0x0800af3d
 800aeec:	0800aeb9 	.word	0x0800aeb9
 800aef0:	0800aeb9 	.word	0x0800aeb9
 800aef4:	0800aeb9 	.word	0x0800aeb9
 800aef8:	0800aeb9 	.word	0x0800aeb9
 800aefc:	0800b03b 	.word	0x0800b03b
 800af00:	0800af67 	.word	0x0800af67
 800af04:	0800aff5 	.word	0x0800aff5
 800af08:	0800aeb9 	.word	0x0800aeb9
 800af0c:	0800aeb9 	.word	0x0800aeb9
 800af10:	0800b05d 	.word	0x0800b05d
 800af14:	0800aeb9 	.word	0x0800aeb9
 800af18:	0800af67 	.word	0x0800af67
 800af1c:	0800aeb9 	.word	0x0800aeb9
 800af20:	0800aeb9 	.word	0x0800aeb9
 800af24:	0800affd 	.word	0x0800affd
 800af28:	6833      	ldr	r3, [r6, #0]
 800af2a:	1d1a      	adds	r2, r3, #4
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6032      	str	r2, [r6, #0]
 800af30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af38:	2301      	movs	r3, #1
 800af3a:	e09c      	b.n	800b076 <_printf_i+0x1e6>
 800af3c:	6833      	ldr	r3, [r6, #0]
 800af3e:	6820      	ldr	r0, [r4, #0]
 800af40:	1d19      	adds	r1, r3, #4
 800af42:	6031      	str	r1, [r6, #0]
 800af44:	0606      	lsls	r6, r0, #24
 800af46:	d501      	bpl.n	800af4c <_printf_i+0xbc>
 800af48:	681d      	ldr	r5, [r3, #0]
 800af4a:	e003      	b.n	800af54 <_printf_i+0xc4>
 800af4c:	0645      	lsls	r5, r0, #25
 800af4e:	d5fb      	bpl.n	800af48 <_printf_i+0xb8>
 800af50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af54:	2d00      	cmp	r5, #0
 800af56:	da03      	bge.n	800af60 <_printf_i+0xd0>
 800af58:	232d      	movs	r3, #45	@ 0x2d
 800af5a:	426d      	negs	r5, r5
 800af5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af60:	4858      	ldr	r0, [pc, #352]	@ (800b0c4 <_printf_i+0x234>)
 800af62:	230a      	movs	r3, #10
 800af64:	e011      	b.n	800af8a <_printf_i+0xfa>
 800af66:	6821      	ldr	r1, [r4, #0]
 800af68:	6833      	ldr	r3, [r6, #0]
 800af6a:	0608      	lsls	r0, r1, #24
 800af6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800af70:	d402      	bmi.n	800af78 <_printf_i+0xe8>
 800af72:	0649      	lsls	r1, r1, #25
 800af74:	bf48      	it	mi
 800af76:	b2ad      	uxthmi	r5, r5
 800af78:	2f6f      	cmp	r7, #111	@ 0x6f
 800af7a:	4852      	ldr	r0, [pc, #328]	@ (800b0c4 <_printf_i+0x234>)
 800af7c:	6033      	str	r3, [r6, #0]
 800af7e:	bf14      	ite	ne
 800af80:	230a      	movne	r3, #10
 800af82:	2308      	moveq	r3, #8
 800af84:	2100      	movs	r1, #0
 800af86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af8a:	6866      	ldr	r6, [r4, #4]
 800af8c:	60a6      	str	r6, [r4, #8]
 800af8e:	2e00      	cmp	r6, #0
 800af90:	db05      	blt.n	800af9e <_printf_i+0x10e>
 800af92:	6821      	ldr	r1, [r4, #0]
 800af94:	432e      	orrs	r6, r5
 800af96:	f021 0104 	bic.w	r1, r1, #4
 800af9a:	6021      	str	r1, [r4, #0]
 800af9c:	d04b      	beq.n	800b036 <_printf_i+0x1a6>
 800af9e:	4616      	mov	r6, r2
 800afa0:	fbb5 f1f3 	udiv	r1, r5, r3
 800afa4:	fb03 5711 	mls	r7, r3, r1, r5
 800afa8:	5dc7      	ldrb	r7, [r0, r7]
 800afaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afae:	462f      	mov	r7, r5
 800afb0:	42bb      	cmp	r3, r7
 800afb2:	460d      	mov	r5, r1
 800afb4:	d9f4      	bls.n	800afa0 <_printf_i+0x110>
 800afb6:	2b08      	cmp	r3, #8
 800afb8:	d10b      	bne.n	800afd2 <_printf_i+0x142>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	07df      	lsls	r7, r3, #31
 800afbe:	d508      	bpl.n	800afd2 <_printf_i+0x142>
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	6861      	ldr	r1, [r4, #4]
 800afc4:	4299      	cmp	r1, r3
 800afc6:	bfde      	ittt	le
 800afc8:	2330      	movle	r3, #48	@ 0x30
 800afca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afd2:	1b92      	subs	r2, r2, r6
 800afd4:	6122      	str	r2, [r4, #16]
 800afd6:	f8cd a000 	str.w	sl, [sp]
 800afda:	464b      	mov	r3, r9
 800afdc:	aa03      	add	r2, sp, #12
 800afde:	4621      	mov	r1, r4
 800afe0:	4640      	mov	r0, r8
 800afe2:	f7ff fee7 	bl	800adb4 <_printf_common>
 800afe6:	3001      	adds	r0, #1
 800afe8:	d14a      	bne.n	800b080 <_printf_i+0x1f0>
 800afea:	f04f 30ff 	mov.w	r0, #4294967295
 800afee:	b004      	add	sp, #16
 800aff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	f043 0320 	orr.w	r3, r3, #32
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	4832      	ldr	r0, [pc, #200]	@ (800b0c8 <_printf_i+0x238>)
 800affe:	2778      	movs	r7, #120	@ 0x78
 800b000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	6831      	ldr	r1, [r6, #0]
 800b008:	061f      	lsls	r7, r3, #24
 800b00a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b00e:	d402      	bmi.n	800b016 <_printf_i+0x186>
 800b010:	065f      	lsls	r7, r3, #25
 800b012:	bf48      	it	mi
 800b014:	b2ad      	uxthmi	r5, r5
 800b016:	6031      	str	r1, [r6, #0]
 800b018:	07d9      	lsls	r1, r3, #31
 800b01a:	bf44      	itt	mi
 800b01c:	f043 0320 	orrmi.w	r3, r3, #32
 800b020:	6023      	strmi	r3, [r4, #0]
 800b022:	b11d      	cbz	r5, 800b02c <_printf_i+0x19c>
 800b024:	2310      	movs	r3, #16
 800b026:	e7ad      	b.n	800af84 <_printf_i+0xf4>
 800b028:	4826      	ldr	r0, [pc, #152]	@ (800b0c4 <_printf_i+0x234>)
 800b02a:	e7e9      	b.n	800b000 <_printf_i+0x170>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	f023 0320 	bic.w	r3, r3, #32
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	e7f6      	b.n	800b024 <_printf_i+0x194>
 800b036:	4616      	mov	r6, r2
 800b038:	e7bd      	b.n	800afb6 <_printf_i+0x126>
 800b03a:	6833      	ldr	r3, [r6, #0]
 800b03c:	6825      	ldr	r5, [r4, #0]
 800b03e:	6961      	ldr	r1, [r4, #20]
 800b040:	1d18      	adds	r0, r3, #4
 800b042:	6030      	str	r0, [r6, #0]
 800b044:	062e      	lsls	r6, r5, #24
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	d501      	bpl.n	800b04e <_printf_i+0x1be>
 800b04a:	6019      	str	r1, [r3, #0]
 800b04c:	e002      	b.n	800b054 <_printf_i+0x1c4>
 800b04e:	0668      	lsls	r0, r5, #25
 800b050:	d5fb      	bpl.n	800b04a <_printf_i+0x1ba>
 800b052:	8019      	strh	r1, [r3, #0]
 800b054:	2300      	movs	r3, #0
 800b056:	6123      	str	r3, [r4, #16]
 800b058:	4616      	mov	r6, r2
 800b05a:	e7bc      	b.n	800afd6 <_printf_i+0x146>
 800b05c:	6833      	ldr	r3, [r6, #0]
 800b05e:	1d1a      	adds	r2, r3, #4
 800b060:	6032      	str	r2, [r6, #0]
 800b062:	681e      	ldr	r6, [r3, #0]
 800b064:	6862      	ldr	r2, [r4, #4]
 800b066:	2100      	movs	r1, #0
 800b068:	4630      	mov	r0, r6
 800b06a:	f7f5 f939 	bl	80002e0 <memchr>
 800b06e:	b108      	cbz	r0, 800b074 <_printf_i+0x1e4>
 800b070:	1b80      	subs	r0, r0, r6
 800b072:	6060      	str	r0, [r4, #4]
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	6123      	str	r3, [r4, #16]
 800b078:	2300      	movs	r3, #0
 800b07a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b07e:	e7aa      	b.n	800afd6 <_printf_i+0x146>
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	4632      	mov	r2, r6
 800b084:	4649      	mov	r1, r9
 800b086:	4640      	mov	r0, r8
 800b088:	47d0      	blx	sl
 800b08a:	3001      	adds	r0, #1
 800b08c:	d0ad      	beq.n	800afea <_printf_i+0x15a>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	079b      	lsls	r3, r3, #30
 800b092:	d413      	bmi.n	800b0bc <_printf_i+0x22c>
 800b094:	68e0      	ldr	r0, [r4, #12]
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	4298      	cmp	r0, r3
 800b09a:	bfb8      	it	lt
 800b09c:	4618      	movlt	r0, r3
 800b09e:	e7a6      	b.n	800afee <_printf_i+0x15e>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	47d0      	blx	sl
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	d09d      	beq.n	800afea <_printf_i+0x15a>
 800b0ae:	3501      	adds	r5, #1
 800b0b0:	68e3      	ldr	r3, [r4, #12]
 800b0b2:	9903      	ldr	r1, [sp, #12]
 800b0b4:	1a5b      	subs	r3, r3, r1
 800b0b6:	42ab      	cmp	r3, r5
 800b0b8:	dcf2      	bgt.n	800b0a0 <_printf_i+0x210>
 800b0ba:	e7eb      	b.n	800b094 <_printf_i+0x204>
 800b0bc:	2500      	movs	r5, #0
 800b0be:	f104 0619 	add.w	r6, r4, #25
 800b0c2:	e7f5      	b.n	800b0b0 <_printf_i+0x220>
 800b0c4:	0800fa25 	.word	0x0800fa25
 800b0c8:	0800fa36 	.word	0x0800fa36

0800b0cc <__sflush_r>:
 800b0cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d4:	0716      	lsls	r6, r2, #28
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	460c      	mov	r4, r1
 800b0da:	d454      	bmi.n	800b186 <__sflush_r+0xba>
 800b0dc:	684b      	ldr	r3, [r1, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dc02      	bgt.n	800b0e8 <__sflush_r+0x1c>
 800b0e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd48      	ble.n	800b17a <__sflush_r+0xae>
 800b0e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0ea:	2e00      	cmp	r6, #0
 800b0ec:	d045      	beq.n	800b17a <__sflush_r+0xae>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0f4:	682f      	ldr	r7, [r5, #0]
 800b0f6:	6a21      	ldr	r1, [r4, #32]
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	d030      	beq.n	800b15e <__sflush_r+0x92>
 800b0fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	0759      	lsls	r1, r3, #29
 800b102:	d505      	bpl.n	800b110 <__sflush_r+0x44>
 800b104:	6863      	ldr	r3, [r4, #4]
 800b106:	1ad2      	subs	r2, r2, r3
 800b108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b10a:	b10b      	cbz	r3, 800b110 <__sflush_r+0x44>
 800b10c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b10e:	1ad2      	subs	r2, r2, r3
 800b110:	2300      	movs	r3, #0
 800b112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b114:	6a21      	ldr	r1, [r4, #32]
 800b116:	4628      	mov	r0, r5
 800b118:	47b0      	blx	r6
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	d106      	bne.n	800b12e <__sflush_r+0x62>
 800b120:	6829      	ldr	r1, [r5, #0]
 800b122:	291d      	cmp	r1, #29
 800b124:	d82b      	bhi.n	800b17e <__sflush_r+0xb2>
 800b126:	4a2a      	ldr	r2, [pc, #168]	@ (800b1d0 <__sflush_r+0x104>)
 800b128:	40ca      	lsrs	r2, r1
 800b12a:	07d6      	lsls	r6, r2, #31
 800b12c:	d527      	bpl.n	800b17e <__sflush_r+0xb2>
 800b12e:	2200      	movs	r2, #0
 800b130:	6062      	str	r2, [r4, #4]
 800b132:	04d9      	lsls	r1, r3, #19
 800b134:	6922      	ldr	r2, [r4, #16]
 800b136:	6022      	str	r2, [r4, #0]
 800b138:	d504      	bpl.n	800b144 <__sflush_r+0x78>
 800b13a:	1c42      	adds	r2, r0, #1
 800b13c:	d101      	bne.n	800b142 <__sflush_r+0x76>
 800b13e:	682b      	ldr	r3, [r5, #0]
 800b140:	b903      	cbnz	r3, 800b144 <__sflush_r+0x78>
 800b142:	6560      	str	r0, [r4, #84]	@ 0x54
 800b144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b146:	602f      	str	r7, [r5, #0]
 800b148:	b1b9      	cbz	r1, 800b17a <__sflush_r+0xae>
 800b14a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b14e:	4299      	cmp	r1, r3
 800b150:	d002      	beq.n	800b158 <__sflush_r+0x8c>
 800b152:	4628      	mov	r0, r5
 800b154:	f7ff fbf4 	bl	800a940 <_free_r>
 800b158:	2300      	movs	r3, #0
 800b15a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b15c:	e00d      	b.n	800b17a <__sflush_r+0xae>
 800b15e:	2301      	movs	r3, #1
 800b160:	4628      	mov	r0, r5
 800b162:	47b0      	blx	r6
 800b164:	4602      	mov	r2, r0
 800b166:	1c50      	adds	r0, r2, #1
 800b168:	d1c9      	bne.n	800b0fe <__sflush_r+0x32>
 800b16a:	682b      	ldr	r3, [r5, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0c6      	beq.n	800b0fe <__sflush_r+0x32>
 800b170:	2b1d      	cmp	r3, #29
 800b172:	d001      	beq.n	800b178 <__sflush_r+0xac>
 800b174:	2b16      	cmp	r3, #22
 800b176:	d11e      	bne.n	800b1b6 <__sflush_r+0xea>
 800b178:	602f      	str	r7, [r5, #0]
 800b17a:	2000      	movs	r0, #0
 800b17c:	e022      	b.n	800b1c4 <__sflush_r+0xf8>
 800b17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b182:	b21b      	sxth	r3, r3
 800b184:	e01b      	b.n	800b1be <__sflush_r+0xf2>
 800b186:	690f      	ldr	r7, [r1, #16]
 800b188:	2f00      	cmp	r7, #0
 800b18a:	d0f6      	beq.n	800b17a <__sflush_r+0xae>
 800b18c:	0793      	lsls	r3, r2, #30
 800b18e:	680e      	ldr	r6, [r1, #0]
 800b190:	bf08      	it	eq
 800b192:	694b      	ldreq	r3, [r1, #20]
 800b194:	600f      	str	r7, [r1, #0]
 800b196:	bf18      	it	ne
 800b198:	2300      	movne	r3, #0
 800b19a:	eba6 0807 	sub.w	r8, r6, r7
 800b19e:	608b      	str	r3, [r1, #8]
 800b1a0:	f1b8 0f00 	cmp.w	r8, #0
 800b1a4:	dde9      	ble.n	800b17a <__sflush_r+0xae>
 800b1a6:	6a21      	ldr	r1, [r4, #32]
 800b1a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1aa:	4643      	mov	r3, r8
 800b1ac:	463a      	mov	r2, r7
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b0      	blx	r6
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	dc08      	bgt.n	800b1c8 <__sflush_r+0xfc>
 800b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1be:	81a3      	strh	r3, [r4, #12]
 800b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c8:	4407      	add	r7, r0
 800b1ca:	eba8 0800 	sub.w	r8, r8, r0
 800b1ce:	e7e7      	b.n	800b1a0 <__sflush_r+0xd4>
 800b1d0:	20400001 	.word	0x20400001

0800b1d4 <_fflush_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	690b      	ldr	r3, [r1, #16]
 800b1d8:	4605      	mov	r5, r0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	b913      	cbnz	r3, 800b1e4 <_fflush_r+0x10>
 800b1de:	2500      	movs	r5, #0
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	b118      	cbz	r0, 800b1ee <_fflush_r+0x1a>
 800b1e6:	6a03      	ldr	r3, [r0, #32]
 800b1e8:	b90b      	cbnz	r3, 800b1ee <_fflush_r+0x1a>
 800b1ea:	f7ff f9a1 	bl	800a530 <__sinit>
 800b1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0f3      	beq.n	800b1de <_fflush_r+0xa>
 800b1f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1f8:	07d0      	lsls	r0, r2, #31
 800b1fa:	d404      	bmi.n	800b206 <_fflush_r+0x32>
 800b1fc:	0599      	lsls	r1, r3, #22
 800b1fe:	d402      	bmi.n	800b206 <_fflush_r+0x32>
 800b200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b202:	f7ff fb8c 	bl	800a91e <__retarget_lock_acquire_recursive>
 800b206:	4628      	mov	r0, r5
 800b208:	4621      	mov	r1, r4
 800b20a:	f7ff ff5f 	bl	800b0cc <__sflush_r>
 800b20e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b210:	07da      	lsls	r2, r3, #31
 800b212:	4605      	mov	r5, r0
 800b214:	d4e4      	bmi.n	800b1e0 <_fflush_r+0xc>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	059b      	lsls	r3, r3, #22
 800b21a:	d4e1      	bmi.n	800b1e0 <_fflush_r+0xc>
 800b21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b21e:	f7ff fb7f 	bl	800a920 <__retarget_lock_release_recursive>
 800b222:	e7dd      	b.n	800b1e0 <_fflush_r+0xc>

0800b224 <__swhatbuf_r>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	460c      	mov	r4, r1
 800b228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b22c:	2900      	cmp	r1, #0
 800b22e:	b096      	sub	sp, #88	@ 0x58
 800b230:	4615      	mov	r5, r2
 800b232:	461e      	mov	r6, r3
 800b234:	da0d      	bge.n	800b252 <__swhatbuf_r+0x2e>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b23c:	f04f 0100 	mov.w	r1, #0
 800b240:	bf14      	ite	ne
 800b242:	2340      	movne	r3, #64	@ 0x40
 800b244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b248:	2000      	movs	r0, #0
 800b24a:	6031      	str	r1, [r6, #0]
 800b24c:	602b      	str	r3, [r5, #0]
 800b24e:	b016      	add	sp, #88	@ 0x58
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	466a      	mov	r2, sp
 800b254:	f000 f848 	bl	800b2e8 <_fstat_r>
 800b258:	2800      	cmp	r0, #0
 800b25a:	dbec      	blt.n	800b236 <__swhatbuf_r+0x12>
 800b25c:	9901      	ldr	r1, [sp, #4]
 800b25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b266:	4259      	negs	r1, r3
 800b268:	4159      	adcs	r1, r3
 800b26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b26e:	e7eb      	b.n	800b248 <__swhatbuf_r+0x24>

0800b270 <__smakebuf_r>:
 800b270:	898b      	ldrh	r3, [r1, #12]
 800b272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b274:	079d      	lsls	r5, r3, #30
 800b276:	4606      	mov	r6, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	d507      	bpl.n	800b28c <__smakebuf_r+0x1c>
 800b27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	6123      	str	r3, [r4, #16]
 800b284:	2301      	movs	r3, #1
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	b003      	add	sp, #12
 800b28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b28c:	ab01      	add	r3, sp, #4
 800b28e:	466a      	mov	r2, sp
 800b290:	f7ff ffc8 	bl	800b224 <__swhatbuf_r>
 800b294:	9f00      	ldr	r7, [sp, #0]
 800b296:	4605      	mov	r5, r0
 800b298:	4639      	mov	r1, r7
 800b29a:	4630      	mov	r0, r6
 800b29c:	f7ff fbbc 	bl	800aa18 <_malloc_r>
 800b2a0:	b948      	cbnz	r0, 800b2b6 <__smakebuf_r+0x46>
 800b2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a6:	059a      	lsls	r2, r3, #22
 800b2a8:	d4ee      	bmi.n	800b288 <__smakebuf_r+0x18>
 800b2aa:	f023 0303 	bic.w	r3, r3, #3
 800b2ae:	f043 0302 	orr.w	r3, r3, #2
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	e7e2      	b.n	800b27c <__smakebuf_r+0xc>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	6020      	str	r0, [r4, #0]
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2c6:	b15b      	cbz	r3, 800b2e0 <__smakebuf_r+0x70>
 800b2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f000 f81d 	bl	800b30c <_isatty_r>
 800b2d2:	b128      	cbz	r0, 800b2e0 <__smakebuf_r+0x70>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f023 0303 	bic.w	r3, r3, #3
 800b2da:	f043 0301 	orr.w	r3, r3, #1
 800b2de:	81a3      	strh	r3, [r4, #12]
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	431d      	orrs	r5, r3
 800b2e4:	81a5      	strh	r5, [r4, #12]
 800b2e6:	e7cf      	b.n	800b288 <__smakebuf_r+0x18>

0800b2e8 <_fstat_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d07      	ldr	r5, [pc, #28]	@ (800b308 <_fstat_r+0x20>)
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	f7f8 fe83 	bl	8004000 <_fstat>
 800b2fa:	1c43      	adds	r3, r0, #1
 800b2fc:	d102      	bne.n	800b304 <_fstat_r+0x1c>
 800b2fe:	682b      	ldr	r3, [r5, #0]
 800b300:	b103      	cbz	r3, 800b304 <_fstat_r+0x1c>
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	bf00      	nop
 800b308:	24000324 	.word	0x24000324

0800b30c <_isatty_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d06      	ldr	r5, [pc, #24]	@ (800b328 <_isatty_r+0x1c>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	602b      	str	r3, [r5, #0]
 800b318:	f7f8 fe82 	bl	8004020 <_isatty>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_isatty_r+0x1a>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_isatty_r+0x1a>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	24000324 	.word	0x24000324

0800b32c <_sbrk_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d06      	ldr	r5, [pc, #24]	@ (800b348 <_sbrk_r+0x1c>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	f7f8 fe8a 	bl	8004050 <_sbrk>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d102      	bne.n	800b346 <_sbrk_r+0x1a>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	b103      	cbz	r3, 800b346 <_sbrk_r+0x1a>
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	24000324 	.word	0x24000324

0800b34c <_init>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	bf00      	nop
 800b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b352:	bc08      	pop	{r3}
 800b354:	469e      	mov	lr, r3
 800b356:	4770      	bx	lr

0800b358 <_fini>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	bf00      	nop
 800b35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35e:	bc08      	pop	{r3}
 800b360:	469e      	mov	lr, r3
 800b362:	4770      	bx	lr
