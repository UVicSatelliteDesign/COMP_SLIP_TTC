
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b48  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  08007de8  08007de8  00008de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008584  08008584  00009584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800858c  0800858c  0000958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008590  08008590  00009590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08008594  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800861c  0000a088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800861c  0000a334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014110  00000000  00000000  0000a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028b2  00000000  00000000  0001e1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e08  00000000  00000000  00020a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000aae  00000000  00000000  00021880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000381e4  00000000  00000000  0002232e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001352f  00000000  00000000  0005a512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e4e4  00000000  00000000  0006da41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cbf25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000040e8  00000000  00000000  001cbf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d0050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007dd0 	.word	0x08007dd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08007dd0 	.word	0x08007dd0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2030      	movs	r0, #48	@ 0x30
 80006b8:	f000 f8ea 	bl	8000890 <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2033      	movs	r0, #51	@ 0x33
 80006d2:	f000 f8dd 	bl	8000890 <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2034      	movs	r0, #52	@ 0x34
 80006ec:	f000 f8d0 	bl	8000890 <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterIdleMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
}

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2036      	movs	r0, #54	@ 0x36
 8000706:	f000 f8c3 	bl	8000890 <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	203a      	movs	r0, #58	@ 0x3a
 8000720:	f000 f8b6 	bl	8000890 <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	203d      	movs	r0, #61	@ 0x3d
 800073a:	f000 f8a9 	bl	8000890 <CC1201_SendStrobe>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	2bff      	cmp	r3, #255	@ 0xff
 8000758:	d909      	bls.n	800076e <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 800075a:	232f      	movs	r3, #47	@ 0x2f
 800075c:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 8000764:	2300      	movs	r3, #0
 8000766:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000768:	2303      	movs	r3, #3
 800076a:	75fb      	strb	r3, [r7, #23]
 800076c:	e009      	b.n	8000782 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000776:	b2db      	uxtb	r3, r3
 8000778:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 800077a:	2300      	movs	r3, #0
 800077c:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	4815      	ldr	r0, [pc, #84]	@ (80007dc <CC1201_ReadStatus+0x94>)
 8000788:	f001 fdce 	bl	8002328 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	b29b      	uxth	r3, r3
 8000790:	f107 020c 	add.w	r2, r7, #12
 8000794:	f107 0110 	add.w	r1, r7, #16
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	9000      	str	r0, [sp, #0]
 800079e:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <CC1201_ReadStatus+0x98>)
 80007a0:	f004 ff54 	bl	800564c <HAL_SPI_TransmitReceive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <CC1201_ReadStatus+0x94>)
 80007ae:	f001 fdbb 	bl	8002328 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80007b2:	7dbb      	ldrb	r3, [r7, #22]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10c      	bne.n	80007d2 <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d009      	beq.n	80007d2 <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	2bff      	cmp	r3, #255	@ 0xff
 80007c2:	d903      	bls.n	80007cc <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 80007c4:	7bba      	ldrb	r2, [r7, #14]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	e002      	b.n	80007d2 <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 80007cc:	7b7a      	ldrb	r2, [r7, #13]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 80007d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58021000 	.word	0x58021000
 80007e0:	240000b8 	.word	0x240000b8

080007e4 <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	80fb      	strh	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	2bff      	cmp	r3, #255	@ 0xff
 80007f8:	d909      	bls.n	800080e <CC1201_WriteRegister+0x2a>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command  
 80007fa:	232f      	movs	r3, #47	@ 0x2f
 80007fc:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 8000804:	797b      	ldrb	r3, [r7, #5]
 8000806:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e006      	b.n	800081c <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 8000814:	797b      	ldrb	r3, [r7, #5]
 8000816:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 800081c:	2200      	movs	r2, #0
 800081e:	2110      	movs	r1, #16
 8000820:	480b      	ldr	r0, [pc, #44]	@ (8000850 <CC1201_WriteRegister+0x6c>)
 8000822:	f001 fd81 	bl	8002328 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	b29a      	uxth	r2, r3
 800082a:	f107 0108 	add.w	r1, r7, #8
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	4808      	ldr	r0, [pc, #32]	@ (8000854 <CC1201_WriteRegister+0x70>)
 8000834:	f004 fd1c 	bl	8005270 <HAL_SPI_Transmit>
 8000838:	4603      	mov	r3, r0
 800083a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	4803      	ldr	r0, [pc, #12]	@ (8000850 <CC1201_WriteRegister+0x6c>)
 8000842:	f001 fd71 	bl	8002328 <HAL_GPIO_WritePin>

    return status;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58021000 	.word	0x58021000
 8000854:	240000b8 	.word	0x240000b8

08000858 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8000866:	f7ff ff6f 	bl	8000748 <CC1201_ReadStatus>
 800086a:	4603      	mov	r3, r0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 8000882:	f7ff ff61 	bl	8000748 <CC1201_ReadStatus>
 8000886:	4603      	mov	r3, r0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af02      	add	r7, sp, #8
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <CC1201_SendStrobe+0x54>)
 80008a2:	f001 fd41 	bl	8002328 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, HAL_MAX_DELAY); // Transmit strobe command and receive status
 80008a6:	f107 020e 	add.w	r2, r7, #14
 80008aa:	1df9      	adds	r1, r7, #7
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2301      	movs	r3, #1
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <CC1201_SendStrobe+0x58>)
 80008b6:	f004 fec9 	bl	800564c <HAL_SPI_TransmitReceive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80008be:	2201      	movs	r2, #1
 80008c0:	2110      	movs	r1, #16
 80008c2:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <CC1201_SendStrobe+0x54>)
 80008c4:	f001 fd30 	bl	8002328 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d105      	bne.n	80008da <CC1201_SendStrobe+0x4a>
        if (status_byte != NULL) {
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <CC1201_SendStrobe+0x4a>
            *status_byte = rx_data;
 80008d4:	7bba      	ldrb	r2, [r7, #14]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	58021000 	.word	0x58021000
 80008e8:	240000b8 	.word	0x240000b8

080008ec <CC1201_WriteRegisterConfig>:
 * @param settings Array of register settings to write.
 * @param num_settings Number of settings in the array.
 * @return HAL_StatusTypeDef Status of the configuration (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegisterConfig(const registerSetting_t *settings, uint16_t num_settings)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
    
    for (uint16_t i = 0; i < num_settings; i++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	81bb      	strh	r3, [r7, #12]
 8000900:	e024      	b.n	800094c <CC1201_WriteRegisterConfig+0x60>
        if (settings[i].addr > 0xFF) {
 8000902:	89bb      	ldrh	r3, [r7, #12]
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	2bff      	cmp	r3, #255	@ 0xff
 800090e:	d819      	bhi.n	8000944 <CC1201_WriteRegisterConfig+0x58>
            // Extended register (requires burst access)
            // For now, skip extended registers in this simple implementation
            continue;
        }
        
        status = CC1201_WriteRegister((uint8_t)settings[i].addr, settings[i].data);
 8000910:	89bb      	ldrh	r3, [r7, #12]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4413      	add	r3, r2
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	89bb      	ldrh	r3, [r7, #12]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	4619      	mov	r1, r3
 800092a:	f7ff ff5b 	bl	80007e4 <CC1201_WriteRegister>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK) {
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <CC1201_WriteRegisterConfig+0x50>
            return status;
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	e00c      	b.n	8000956 <CC1201_WriteRegisterConfig+0x6a>
        }
        
        HAL_Delay(1); // Small delay between register writes
 800093c:	2001      	movs	r0, #1
 800093e:	f001 f927 	bl	8001b90 <HAL_Delay>
 8000942:	e000      	b.n	8000946 <CC1201_WriteRegisterConfig+0x5a>
            continue;
 8000944:	bf00      	nop
    for (uint16_t i = 0; i < num_settings; i++) {
 8000946:	89bb      	ldrh	r3, [r7, #12]
 8000948:	3301      	adds	r3, #1
 800094a:	81bb      	strh	r3, [r7, #12]
 800094c:	89ba      	ldrh	r2, [r7, #12]
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	429a      	cmp	r2, r3
 8000952:	d3d6      	bcc.n	8000902 <CC1201_WriteRegisterConfig+0x16>
    }
    
    return status;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <CC1201_GetNumPreferredSettings>:
 * @brief Gets the number of preferred settings.
 *
 * @return uint16_t Number of settings in the preferred settings array.
 */
uint16_t CC1201_GetNumPreferredSettings(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
    return sizeof(preferredSettings) / sizeof(registerSetting_t);
 8000962:	2331      	movs	r3, #49	@ 0x31
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <CC1201_GetPreferredSettings>:
 * @brief Gets a pointer to the preferred settings array.
 *
 * @return const registerSetting_t* Pointer to the preferred settings array.
 */
const registerSetting_t* CC1201_GetPreferredSettings(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
    return preferredSettings;
 8000974:	4b02      	ldr	r3, [pc, #8]	@ (8000980 <CC1201_GetPreferredSettings+0x10>)
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	08008458 	.word	0x08008458

08000984 <initialize_CC1201>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to initialize CC1201 with preferred settings
HAL_StatusTypeDef initialize_CC1201(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef hal_status;
    
    printf("Initializing CC1201...\n\r");
 800098e:	4827      	ldr	r0, [pc, #156]	@ (8000a2c <initialize_CC1201+0xa8>)
 8000990:	f006 fbb2 	bl	80070f8 <iprintf>
    
    // Step 1: Soft reset
    hal_status = CC1201_SoftReset(&status_byte);
 8000994:	1d7b      	adds	r3, r7, #5
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe88 	bl	80006ac <CC1201_SoftReset>
 800099c:	4603      	mov	r3, r0
 800099e:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <initialize_CC1201+0x2c>
        printf("CC1201 Reset Failed!\n\r");
 80009a6:	4822      	ldr	r0, [pc, #136]	@ (8000a30 <initialize_CC1201+0xac>)
 80009a8:	f006 fba6 	bl	80070f8 <iprintf>
        return hal_status;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	e039      	b.n	8000a24 <initialize_CC1201+0xa0>
    }
    printf("CC1201 Reset OK - Status: 0x%02X\n\r", status_byte);
 80009b0:	797b      	ldrb	r3, [r7, #5]
 80009b2:	4619      	mov	r1, r3
 80009b4:	481f      	ldr	r0, [pc, #124]	@ (8000a34 <initialize_CC1201+0xb0>)
 80009b6:	f006 fb9f 	bl	80070f8 <iprintf>
    
    HAL_Delay(100); // Wait for reset to complete
 80009ba:	2064      	movs	r0, #100	@ 0x64
 80009bc:	f001 f8e8 	bl	8001b90 <HAL_Delay>
    
    // Step 2: Write preferred settings (basic registers only)
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 80009c0:	f7ff ffd6 	bl	8000970 <CC1201_GetPreferredSettings>
 80009c4:	60b8      	str	r0, [r7, #8]
    uint16_t num_settings = CC1201_GetNumPreferredSettings();
 80009c6:	f7ff ffca 	bl	800095e <CC1201_GetNumPreferredSettings>
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
    
    printf("Writing %d configuration registers...\n\r", num_settings);
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4819      	ldr	r0, [pc, #100]	@ (8000a38 <initialize_CC1201+0xb4>)
 80009d4:	f006 fb90 	bl	80070f8 <iprintf>
    hal_status = CC1201_WriteRegisterConfig(settings, num_settings);
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4619      	mov	r1, r3
 80009dc:	68b8      	ldr	r0, [r7, #8]
 80009de:	f7ff ff85 	bl	80008ec <CC1201_WriteRegisterConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <initialize_CC1201+0x72>
        printf("Configuration write failed!\n\r");
 80009ec:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <initialize_CC1201+0xb8>)
 80009ee:	f006 fb83 	bl	80070f8 <iprintf>
        return hal_status;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	e016      	b.n	8000a24 <initialize_CC1201+0xa0>
    }
    printf("Configuration complete!\n\r");
 80009f6:	4812      	ldr	r0, [pc, #72]	@ (8000a40 <initialize_CC1201+0xbc>)
 80009f8:	f006 fb7e 	bl	80070f8 <iprintf>
    
    // Step 3: Enter idle mode
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80009fc:	1d7b      	adds	r3, r7, #5
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe7b 	bl	80006fa <CC1201_EnterIdleMode>
 8000a04:	4603      	mov	r3, r0
 8000a06:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <initialize_CC1201+0x94>
        printf("Enter Idle Failed!\n\r");
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <initialize_CC1201+0xc0>)
 8000a10:	f006 fb72 	bl	80070f8 <iprintf>
        return hal_status;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	e005      	b.n	8000a24 <initialize_CC1201+0xa0>
    }
    printf("Enter Idle OK - Status: 0x%02X\n\r", status_byte);
 8000a18:	797b      	ldrb	r3, [r7, #5]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	@ (8000a48 <initialize_CC1201+0xc4>)
 8000a1e:	f006 fb6b 	bl	80070f8 <iprintf>
    
    return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08007de8 	.word	0x08007de8
 8000a30:	08007e04 	.word	0x08007e04
 8000a34:	08007e1c 	.word	0x08007e1c
 8000a38:	08007e40 	.word	0x08007e40
 8000a3c:	08007e68 	.word	0x08007e68
 8000a40:	08007e88 	.word	0x08007e88
 8000a44:	08007ea4 	.word	0x08007ea4
 8000a48:	08007ebc 	.word	0x08007ebc

08000a4c <test_CC1201_strobe_commands>:

// Function to test CC1201 strobe commands
void test_CC1201_strobe_commands(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hal_status;
    
    printf("Starting CC1201 Strobe Command Tests...\n\r");
 8000a56:	4873      	ldr	r0, [pc, #460]	@ (8000c24 <test_CC1201_strobe_commands+0x1d8>)
 8000a58:	f006 fb4e 	bl	80070f8 <iprintf>
    
    // Test 1: NOP command (should always work)
    printf("Test 1: NOP Command\n\r");
 8000a5c:	4872      	ldr	r0, [pc, #456]	@ (8000c28 <test_CC1201_strobe_commands+0x1dc>)
 8000a5e:	f006 fb4b 	bl	80070f8 <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8000a62:	1dbb      	adds	r3, r7, #6
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe62 	bl	800072e <CC1201_Nop>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d105      	bne.n	8000a80 <test_CC1201_strobe_commands+0x34>
        printf("  NOP Success - Status: 0x%02X\n\r", status_byte);
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	4619      	mov	r1, r3
 8000a78:	486c      	ldr	r0, [pc, #432]	@ (8000c2c <test_CC1201_strobe_commands+0x1e0>)
 8000a7a:	f006 fb3d 	bl	80070f8 <iprintf>
 8000a7e:	e004      	b.n	8000a8a <test_CC1201_strobe_commands+0x3e>
    } else {
        printf("  NOP Failed - HAL Status: %d\n\r", hal_status);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4619      	mov	r1, r3
 8000a84:	486a      	ldr	r0, [pc, #424]	@ (8000c30 <test_CC1201_strobe_commands+0x1e4>)
 8000a86:	f006 fb37 	bl	80070f8 <iprintf>
    }
    
    // Test 2: Soft Reset
    printf("Test 2: Soft Reset\n\r");
 8000a8a:	486a      	ldr	r0, [pc, #424]	@ (8000c34 <test_CC1201_strobe_commands+0x1e8>)
 8000a8c:	f006 fb34 	bl	80070f8 <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 8000a90:	1dbb      	adds	r3, r7, #6
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe0a 	bl	80006ac <CC1201_SoftReset>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d105      	bne.n	8000aae <test_CC1201_strobe_commands+0x62>
        printf("  Soft Reset Success - Status: 0x%02X\n\r", status_byte);
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4864      	ldr	r0, [pc, #400]	@ (8000c38 <test_CC1201_strobe_commands+0x1ec>)
 8000aa8:	f006 fb26 	bl	80070f8 <iprintf>
 8000aac:	e004      	b.n	8000ab8 <test_CC1201_strobe_commands+0x6c>
    } else {
        printf("  Soft Reset Failed - HAL Status: %d\n\r", hal_status);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4862      	ldr	r0, [pc, #392]	@ (8000c3c <test_CC1201_strobe_commands+0x1f0>)
 8000ab4:	f006 fb20 	bl	80070f8 <iprintf>
    }
    
    HAL_Delay(100); // Wait after reset
 8000ab8:	2064      	movs	r0, #100	@ 0x64
 8000aba:	f001 f869 	bl	8001b90 <HAL_Delay>
    
    // Test 3: Enter Idle Mode
    printf("Test 3: Enter Idle Mode\n\r");
 8000abe:	4860      	ldr	r0, [pc, #384]	@ (8000c40 <test_CC1201_strobe_commands+0x1f4>)
 8000ac0:	f006 fb1a 	bl	80070f8 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000ac4:	1dbb      	adds	r3, r7, #6
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe17 	bl	80006fa <CC1201_EnterIdleMode>
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d105      	bne.n	8000ae2 <test_CC1201_strobe_commands+0x96>
        printf("  Enter Idle Success - Status: 0x%02X\n\r", status_byte);
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	485a      	ldr	r0, [pc, #360]	@ (8000c44 <test_CC1201_strobe_commands+0x1f8>)
 8000adc:	f006 fb0c 	bl	80070f8 <iprintf>
 8000ae0:	e004      	b.n	8000aec <test_CC1201_strobe_commands+0xa0>
    } else {
        printf("  Enter Idle Failed - HAL Status: %d\n\r", hal_status);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4858      	ldr	r0, [pc, #352]	@ (8000c48 <test_CC1201_strobe_commands+0x1fc>)
 8000ae8:	f006 fb06 	bl	80070f8 <iprintf>
    }
    
    // Test 4: Read MARC State
    printf("Test 4: Read MARC State\n\r");
 8000aec:	4857      	ldr	r0, [pc, #348]	@ (8000c4c <test_CC1201_strobe_commands+0x200>)
 8000aee:	f006 fb03 	bl	80070f8 <iprintf>
    uint8_t marc_state = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	717b      	strb	r3, [r7, #5]
    hal_status = CC1201_ReadMARCState(&marc_state);
 8000af6:	1d7b      	adds	r3, r7, #5
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fead 	bl	8000858 <CC1201_ReadMARCState>
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <test_CC1201_strobe_commands+0xc8>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000b08:	797b      	ldrb	r3, [r7, #5]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4850      	ldr	r0, [pc, #320]	@ (8000c50 <test_CC1201_strobe_commands+0x204>)
 8000b0e:	f006 faf3 	bl	80070f8 <iprintf>
 8000b12:	e004      	b.n	8000b1e <test_CC1201_strobe_commands+0xd2>
    } else {
        printf("  Read MARC State Failed - HAL Status: %d\n\r", hal_status);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4619      	mov	r1, r3
 8000b18:	484e      	ldr	r0, [pc, #312]	@ (8000c54 <test_CC1201_strobe_commands+0x208>)
 8000b1a:	f006 faed 	bl	80070f8 <iprintf>
    }
    
    // Test 5: Calibrate Frequency Synthesizer
    printf("Test 5: Calibrate Frequency Synthesizer\n\r");
 8000b1e:	484e      	ldr	r0, [pc, #312]	@ (8000c58 <test_CC1201_strobe_commands+0x20c>)
 8000b20:	f006 faea 	bl	80070f8 <iprintf>
    hal_status = CC1201_CalFreqSynth(&status_byte);
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fdcd 	bl	80006c6 <CC1201_CalFreqSynth>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d105      	bne.n	8000b42 <test_CC1201_strobe_commands+0xf6>
        printf("  Cal Freq Synth Success - Status: 0x%02X\n\r", status_byte);
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4848      	ldr	r0, [pc, #288]	@ (8000c5c <test_CC1201_strobe_commands+0x210>)
 8000b3c:	f006 fadc 	bl	80070f8 <iprintf>
 8000b40:	e004      	b.n	8000b4c <test_CC1201_strobe_commands+0x100>
    } else {
        printf("  Cal Freq Synth Failed - HAL Status: %d\n\r", hal_status);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4846      	ldr	r0, [pc, #280]	@ (8000c60 <test_CC1201_strobe_commands+0x214>)
 8000b48:	f006 fad6 	bl	80070f8 <iprintf>
    }
    
    // Test 6: Enter RX Mode
    printf("Test 6: Enter RX Mode\n\r");
 8000b4c:	4845      	ldr	r0, [pc, #276]	@ (8000c64 <test_CC1201_strobe_commands+0x218>)
 8000b4e:	f006 fad3 	bl	80070f8 <iprintf>
    hal_status = CC1201_EnterRxMode(&status_byte);
 8000b52:	1dbb      	adds	r3, r7, #6
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fdc3 	bl	80006e0 <CC1201_EnterRxMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d105      	bne.n	8000b70 <test_CC1201_strobe_commands+0x124>
        printf("  Enter RX Success - Status: 0x%02X\n\r", status_byte);
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	4619      	mov	r1, r3
 8000b68:	483f      	ldr	r0, [pc, #252]	@ (8000c68 <test_CC1201_strobe_commands+0x21c>)
 8000b6a:	f006 fac5 	bl	80070f8 <iprintf>
 8000b6e:	e004      	b.n	8000b7a <test_CC1201_strobe_commands+0x12e>
    } else {
        printf("  Enter RX Failed - HAL Status: %d\n\r", hal_status);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4619      	mov	r1, r3
 8000b74:	483d      	ldr	r0, [pc, #244]	@ (8000c6c <test_CC1201_strobe_commands+0x220>)
 8000b76:	f006 fabf 	bl	80070f8 <iprintf>
    }
    
    HAL_Delay(10);
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f001 f808 	bl	8001b90 <HAL_Delay>
    
    // Test 7: Read MARC State again
    printf("Test 7: Read MARC State (after RX)\n\r");
 8000b80:	483b      	ldr	r0, [pc, #236]	@ (8000c70 <test_CC1201_strobe_commands+0x224>)
 8000b82:	f006 fab9 	bl	80070f8 <iprintf>
    hal_status = CC1201_ReadMARCState(&marc_state);
 8000b86:	1d7b      	adds	r3, r7, #5
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fe65 	bl	8000858 <CC1201_ReadMARCState>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <test_CC1201_strobe_commands+0x158>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000b98:	797b      	ldrb	r3, [r7, #5]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <test_CC1201_strobe_commands+0x204>)
 8000b9e:	f006 faab 	bl	80070f8 <iprintf>
 8000ba2:	e004      	b.n	8000bae <test_CC1201_strobe_commands+0x162>
    } else {
        printf("  Read MARC State Failed - HAL Status: %d\n\r", hal_status);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	482a      	ldr	r0, [pc, #168]	@ (8000c54 <test_CC1201_strobe_commands+0x208>)
 8000baa:	f006 faa5 	bl	80070f8 <iprintf>
    }
    
    // Test 8: Flush RX FIFO
    printf("Test 8: Flush RX FIFO\n\r");
 8000bae:	4831      	ldr	r0, [pc, #196]	@ (8000c74 <test_CC1201_strobe_commands+0x228>)
 8000bb0:	f006 faa2 	bl	80070f8 <iprintf>
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8000bb4:	1dbb      	adds	r3, r7, #6
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fdac 	bl	8000714 <CC1201_FlushRxFifo>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d105      	bne.n	8000bd2 <test_CC1201_strobe_commands+0x186>
        printf("  Flush RX FIFO Success - Status: 0x%02X\n\r", status_byte);
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	482b      	ldr	r0, [pc, #172]	@ (8000c78 <test_CC1201_strobe_commands+0x22c>)
 8000bcc:	f006 fa94 	bl	80070f8 <iprintf>
 8000bd0:	e004      	b.n	8000bdc <test_CC1201_strobe_commands+0x190>
    } else {
        printf("  Flush RX FIFO Failed - HAL Status: %d\n\r", hal_status);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4829      	ldr	r0, [pc, #164]	@ (8000c7c <test_CC1201_strobe_commands+0x230>)
 8000bd8:	f006 fa8e 	bl	80070f8 <iprintf>
    }
    
    // Test 9: Check RX bytes
    printf("Test 9: Check RX Bytes\n\r");
 8000bdc:	4828      	ldr	r0, [pc, #160]	@ (8000c80 <test_CC1201_strobe_commands+0x234>)
 8000bde:	f006 fa8b 	bl	80070f8 <iprintf>
    uint8_t rx_bytes = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	713b      	strb	r3, [r7, #4]
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fe43 	bl	8000874 <CC1201_GetNumRXBytes>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <test_CC1201_strobe_commands+0x1b8>
        printf("  RX Bytes: %d\n\r", rx_bytes);
 8000bf8:	793b      	ldrb	r3, [r7, #4]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4821      	ldr	r0, [pc, #132]	@ (8000c84 <test_CC1201_strobe_commands+0x238>)
 8000bfe:	f006 fa7b 	bl	80070f8 <iprintf>
 8000c02:	e004      	b.n	8000c0e <test_CC1201_strobe_commands+0x1c2>
    } else {
        printf("  Get RX Bytes Failed - HAL Status: %d\n\r", hal_status);
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4619      	mov	r1, r3
 8000c08:	481f      	ldr	r0, [pc, #124]	@ (8000c88 <test_CC1201_strobe_commands+0x23c>)
 8000c0a:	f006 fa75 	bl	80070f8 <iprintf>
    }
    
    printf("CC1201 Strobe Command Tests Complete!\n\r");
 8000c0e:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <test_CC1201_strobe_commands+0x240>)
 8000c10:	f006 fa72 	bl	80070f8 <iprintf>
    printf("========================================\n\r");
 8000c14:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <test_CC1201_strobe_commands+0x244>)
 8000c16:	f006 fa6f 	bl	80070f8 <iprintf>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08007ee0 	.word	0x08007ee0
 8000c28:	08007f0c 	.word	0x08007f0c
 8000c2c:	08007f24 	.word	0x08007f24
 8000c30:	08007f48 	.word	0x08007f48
 8000c34:	08007f68 	.word	0x08007f68
 8000c38:	08007f80 	.word	0x08007f80
 8000c3c:	08007fa8 	.word	0x08007fa8
 8000c40:	08007fd0 	.word	0x08007fd0
 8000c44:	08007fec 	.word	0x08007fec
 8000c48:	08008014 	.word	0x08008014
 8000c4c:	0800803c 	.word	0x0800803c
 8000c50:	08008058 	.word	0x08008058
 8000c54:	08008070 	.word	0x08008070
 8000c58:	0800809c 	.word	0x0800809c
 8000c5c:	080080c8 	.word	0x080080c8
 8000c60:	080080f4 	.word	0x080080f4
 8000c64:	08008120 	.word	0x08008120
 8000c68:	08008138 	.word	0x08008138
 8000c6c:	08008160 	.word	0x08008160
 8000c70:	08008188 	.word	0x08008188
 8000c74:	080081b0 	.word	0x080081b0
 8000c78:	080081c8 	.word	0x080081c8
 8000c7c:	080081f4 	.word	0x080081f4
 8000c80:	08008220 	.word	0x08008220
 8000c84:	0800823c 	.word	0x0800823c
 8000c88:	08008250 	.word	0x08008250
 8000c8c:	0800827c 	.word	0x0800827c
 8000c90:	080082a4 	.word	0x080082a4

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c9a:	f000 f9f7 	bl	800108c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fee5 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f8a9 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f000 f969 	bl	8000f7c <MX_GPIO_Init>
  MX_SPI4_Init();
 8000caa:	f000 f911 	bl	8000ed0 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  
  // Initialize and test CC1201 communication
  printf("Starting CC1201 initialization...\n\r");
 8000cae:	4849      	ldr	r0, [pc, #292]	@ (8000dd4 <main+0x140>)
 8000cb0:	f006 fa22 	bl	80070f8 <iprintf>
  HAL_Delay(100); // Give CC1201 time to power up
 8000cb4:	2064      	movs	r0, #100	@ 0x64
 8000cb6:	f000 ff6b 	bl	8001b90 <HAL_Delay>
  
  if (initialize_CC1201() == HAL_OK) {
 8000cba:	f7ff fe63 	bl	8000984 <initialize_CC1201>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d106      	bne.n	8000cd2 <main+0x3e>
      printf("CC1201 initialization successful!\n\r");
 8000cc4:	4844      	ldr	r0, [pc, #272]	@ (8000dd8 <main+0x144>)
 8000cc6:	f006 fa17 	bl	80070f8 <iprintf>
      BSP_LED_On(LED_GREEN);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 fcee 	bl	80016ac <BSP_LED_On>
 8000cd0:	e005      	b.n	8000cde <main+0x4a>
  } else {
      printf("CC1201 initialization failed!\n\r");
 8000cd2:	4842      	ldr	r0, [pc, #264]	@ (8000ddc <main+0x148>)
 8000cd4:	f006 fa10 	bl	80070f8 <iprintf>
      BSP_LED_On(LED_RED);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f000 fce7 	bl	80016ac <BSP_LED_On>
  }
  
  // Run initial strobe command tests
  test_CC1201_strobe_commands();
 8000cde:	f7ff feb5 	bl	8000a4c <test_CC1201_strobe_commands>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 fc6c 	bl	80015c0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fc69 	bl	80015c0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f000 fc66 	bl	80015c0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 fd56 	bl	80017a8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000cfc:	4b38      	ldr	r3, [pc, #224]	@ (8000de0 <main+0x14c>)
 8000cfe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d02:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000d04:	4b36      	ldr	r3, [pc, #216]	@ (8000de0 <main+0x14c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <main+0x14c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000d10:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <main+0x14c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000d16:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <main+0x14c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000d1c:	4930      	ldr	r1, [pc, #192]	@ (8000de0 <main+0x14c>)
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fdc6 	bl	80018b0 <BSP_COM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <main+0x9a>
  {
    Error_Handler();
 8000d2a:	f000 f9ef 	bl	800110c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000d2e:	482d      	ldr	r0, [pc, #180]	@ (8000de4 <main+0x150>)
 8000d30:	f006 f9e2 	bl	80070f8 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 fcb9 	bl	80016ac <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 fcb6 	bl	80016ac <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 fcb3 	bl	80016ac <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test_time = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  const uint32_t test_interval = 5000; // Test every 5 seconds
 8000d4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d4e:	60bb      	str	r3, [r7, #8]
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000d50:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <main+0x154>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d110      	bne.n	8000d7a <main+0xe6>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000d58:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <main+0x154>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 fcf8 	bl	8001754 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 fcf5 	bl	8001754 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f000 fcf2 	bl	8001754 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Button pressed - Running CC1201 test...\n\r");
 8000d70:	481e      	ldr	r0, [pc, #120]	@ (8000dec <main+0x158>)
 8000d72:	f006 f9c1 	bl	80070f8 <iprintf>
      test_CC1201_strobe_commands();
 8000d76:	f7ff fe69 	bl	8000a4c <test_CC1201_strobe_commands>
    }
    
    // Periodic CC1201 communication test
    if (HAL_GetTick() - last_test_time > test_interval) {
 8000d7a:	f000 fefd 	bl	8001b78 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d2e2      	bcs.n	8000d50 <main+0xbc>
        last_test_time = HAL_GetTick();
 8000d8a:	f000 fef5 	bl	8001b78 <HAL_GetTick>
 8000d8e:	60f8      	str	r0, [r7, #12]
        
        // Simple NOP test to verify communication
        uint8_t status_byte = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	71bb      	strb	r3, [r7, #6]
        HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fcc9 	bl	800072e <CC1201_Nop>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
        
        if (hal_status == HAL_OK) {
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10b      	bne.n	8000dbe <main+0x12a>
            printf("Periodic test - CC1201 Status: 0x%02X\n\r", status_byte);
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <main+0x15c>)
 8000dac:	f006 f9a4 	bl	80070f8 <iprintf>
            BSP_LED_On(LED_GREEN);  // Communication OK
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 fc7b 	bl	80016ac <BSP_LED_On>
            BSP_LED_Off(LED_RED);
 8000db6:	2002      	movs	r0, #2
 8000db8:	f000 fca2 	bl	8001700 <BSP_LED_Off>
 8000dbc:	e7c8      	b.n	8000d50 <main+0xbc>
        } else {
            printf("Periodic test - CC1201 Communication Failed\n\r");
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <main+0x160>)
 8000dc0:	f006 f99a 	bl	80070f8 <iprintf>
            BSP_LED_Off(LED_GREEN);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 fc9b 	bl	8001700 <BSP_LED_Off>
            BSP_LED_On(LED_RED);   // Communication error
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f000 fc6e 	bl	80016ac <BSP_LED_On>
    if (BspButtonState == BUTTON_PRESSED)
 8000dd0:	e7be      	b.n	8000d50 <main+0xbc>
 8000dd2:	bf00      	nop
 8000dd4:	080082d0 	.word	0x080082d0
 8000dd8:	080082f4 	.word	0x080082f4
 8000ddc:	08008318 	.word	0x08008318
 8000de0:	240000a4 	.word	0x240000a4
 8000de4:	08008338 	.word	0x08008338
 8000de8:	240000b4 	.word	0x240000b4
 8000dec:	08008354 	.word	0x08008354
 8000df0:	08008380 	.word	0x08008380
 8000df4:	080083a8 	.word	0x080083a8

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b09c      	sub	sp, #112	@ 0x70
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	224c      	movs	r2, #76	@ 0x4c
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f006 f9cb 	bl	80071a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2220      	movs	r2, #32
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 f9c5 	bl	80071a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f001 fab9 	bl	8002390 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <SystemClock_Config+0xd0>)
 8000e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e26:	4a28      	ldr	r2, [pc, #160]	@ (8000ec8 <SystemClock_Config+0xd0>)
 8000e28:	f023 0301 	bic.w	r3, r3, #1
 8000e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <SystemClock_Config+0xd0>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e40:	4a22      	ldr	r2, [pc, #136]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e54:	bf00      	nop
 8000e56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e62:	d1f8      	bne.n	8000e56 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e64:	2302      	movs	r3, #2
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6c:	2340      	movs	r3, #64	@ 0x40
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fac3 	bl	8002404 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e84:	f000 f942 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	233f      	movs	r3, #63	@ 0x3f
 8000e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ea0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ea4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2101      	movs	r1, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 ff02 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eba:	f000 f927 	bl	800110c <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3770      	adds	r7, #112	@ 0x70
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	58000400 	.word	0x58000400
 8000ecc:	58024800 	.word	0x58024800

08000ed0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000ed6:	4a28      	ldr	r2, [pc, #160]	@ (8000f78 <MX_SPI4_Init+0xa8>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000edc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000eea:	2207      	movs	r2, #7
 8000eec:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000efc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f00:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f04:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000f08:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_SPI4_Init+0xa4>)
 8000f60:	f004 f862 	bl	8005028 <HAL_SPI_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000f6a:	f000 f8cf 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240000b8 	.word	0x240000b8
 8000f78:	40013400 	.word	0x40013400

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	4a39      	ldr	r2, [pc, #228]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa2:	4b37      	ldr	r3, [pc, #220]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b2c      	ldr	r3, [pc, #176]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fde:	4b28      	ldr	r3, [pc, #160]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	4a23      	ldr	r2, [pc, #140]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffc:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <MX_GPIO_Init+0x104>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <MX_GPIO_Init+0x104>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <MX_GPIO_Init+0x104>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_GPIO_Init+0x104>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level for CC1201 CS */
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2110      	movs	r1, #16
 800102c:	4815      	ldr	r0, [pc, #84]	@ (8001084 <MX_GPIO_Init+0x108>)
 800102e:	f001 f97b 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CC1201 CS Pin */
  GPIO_InitStruct.Pin = CC1201_CS_PIN;
 8001032:	2310      	movs	r3, #16
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC1201_CS_PORT, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	480e      	ldr	r0, [pc, #56]	@ (8001084 <MX_GPIO_Init+0x108>)
 800104a:	f000 ffbd 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CC1201 INT Pin (PD4) */
  GPIO_InitStruct.Pin = CC1201_INT_PIN;
 800104e:	2310      	movs	r3, #16
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CC1201_INT_PORT, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <MX_GPIO_Init+0x10c>)
 8001064:	f000 ffb0 	bl	8001fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	200a      	movs	r0, #10
 800106e:	f000 fe9a 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001072:	200a      	movs	r0, #10
 8001074:	f000 feb1 	bl	8001dda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001078:	bf00      	nop
 800107a:	3728      	adds	r7, #40	@ 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58024400 	.word	0x58024400
 8001084:	58021000 	.word	0x58021000
 8001088:	58020c00 	.word	0x58020c00

0800108c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800109e:	f000 feb7 	bl	8001e10 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010ae:	231f      	movs	r3, #31
 80010b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010b2:	2387      	movs	r3, #135	@ 0x87
 80010b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010ba:	2300      	movs	r3, #0
 80010bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010be:	2301      	movs	r3, #1
 80010c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ce:	463b      	mov	r3, r7
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fed5 	bl	8001e80 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010d6:	2004      	movs	r0, #4
 80010d8:	f000 feb2 	bl	8001e40 <HAL_MPU_Enable>

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <BSP_PB_Callback+0x24>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	240000b4 	.word	0x240000b4

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <Error_Handler+0x8>

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_MspInit+0x30>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001124:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <HAL_MspInit+0x30>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_MspInit+0x30>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ba      	sub	sp, #232	@ 0xe8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	22c0      	movs	r2, #192	@ 0xc0
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f006 f818 	bl	80071a2 <memset>
  if(hspi->Instance==SPI4)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a30      	ldr	r2, [pc, #192]	@ (8001238 <HAL_SPI_MspInit+0xec>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d159      	bne.n	8001230 <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800117c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001188:	2300      	movs	r3, #0
 800118a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4618      	mov	r0, r3
 8001192:	f002 f91d 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800119c:	f7ff ffb6 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <HAL_SPI_MspInit+0xf0>)
 80011a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011a6:	4a25      	ldr	r2, [pc, #148]	@ (800123c <HAL_SPI_MspInit+0xf0>)
 80011a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <HAL_SPI_MspInit+0xf0>)
 80011b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011be:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <HAL_SPI_MspInit+0xf0>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c4:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <HAL_SPI_MspInit+0xf0>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <HAL_SPI_MspInit+0xf0>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80011dc:	2364      	movs	r3, #100	@ 0x64
 80011de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011f4:	2305      	movs	r3, #5
 80011f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011fe:	4619      	mov	r1, r3
 8001200:	480f      	ldr	r0, [pc, #60]	@ (8001240 <HAL_SPI_MspInit+0xf4>)
 8001202:	f000 fee1 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001206:	2310      	movs	r3, #16
 8001208:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800121e:	2305      	movs	r3, #5
 8001220:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001224:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_SPI_MspInit+0xf4>)
 800122c:	f000 fecc 	bl	8001fc8 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001230:	bf00      	nop
 8001232:	37e8      	adds	r7, #232	@ 0xe8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40013400 	.word	0x40013400
 800123c:	58024400 	.word	0x58024400
 8001240:	58021000 	.word	0x58021000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129a:	f000 fc59 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 faf0 	bl	800188c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e00a      	b.n	80012d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c2:	f3af 8000 	nop.w
 80012c6:	4601      	mov	r1, r0
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	60ba      	str	r2, [r7, #8]
 80012ce:	b2ca      	uxtb	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dbf0      	blt.n	80012c2 <_read+0x12>
  }

  return len;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e009      	b.n	8001310 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	60ba      	str	r2, [r7, #8]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fb35 	bl	8001974 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf1      	blt.n	80012fc <_write+0x12>
  }
  return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_close>:

int _close(int file)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800134a:	605a      	str	r2, [r3, #4]
  return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_isatty>:

int _isatty(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f005 ff40 	bl	8007240 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	@ (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24080000 	.word	0x24080000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	24000140 	.word	0x24000140
 80013f4:	24000338 	.word	0x24000338

080013f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fc:	4b43      	ldr	r3, [pc, #268]	@ (800150c <SystemInit+0x114>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001402:	4a42      	ldr	r2, [pc, #264]	@ (800150c <SystemInit+0x114>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140c:	4b40      	ldr	r3, [pc, #256]	@ (8001510 <SystemInit+0x118>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	2b06      	cmp	r3, #6
 8001416:	d807      	bhi.n	8001428 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001418:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <SystemInit+0x118>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 030f 	bic.w	r3, r3, #15
 8001420:	4a3b      	ldr	r2, [pc, #236]	@ (8001510 <SystemInit+0x118>)
 8001422:	f043 0307 	orr.w	r3, r3, #7
 8001426:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001428:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <SystemInit+0x11c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a39      	ldr	r2, [pc, #228]	@ (8001514 <SystemInit+0x11c>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001434:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <SystemInit+0x11c>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <SystemInit+0x11c>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4935      	ldr	r1, [pc, #212]	@ (8001514 <SystemInit+0x11c>)
 8001440:	4b35      	ldr	r3, [pc, #212]	@ (8001518 <SystemInit+0x120>)
 8001442:	4013      	ands	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <SystemInit+0x118>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <SystemInit+0x118>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 030f 	bic.w	r3, r3, #15
 800145a:	4a2d      	ldr	r2, [pc, #180]	@ (8001510 <SystemInit+0x118>)
 800145c:	f043 0307 	orr.w	r3, r3, #7
 8001460:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001462:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <SystemInit+0x11c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <SystemInit+0x11c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <SystemInit+0x11c>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <SystemInit+0x11c>)
 8001476:	4a29      	ldr	r2, [pc, #164]	@ (800151c <SystemInit+0x124>)
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <SystemInit+0x11c>)
 800147c:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <SystemInit+0x128>)
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <SystemInit+0x11c>)
 8001482:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <SystemInit+0x12c>)
 8001484:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001486:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <SystemInit+0x11c>)
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <SystemInit+0x11c>)
 800148e:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <SystemInit+0x12c>)
 8001490:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <SystemInit+0x11c>)
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <SystemInit+0x11c>)
 800149a:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <SystemInit+0x12c>)
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <SystemInit+0x11c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <SystemInit+0x11c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <SystemInit+0x11c>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <SystemInit+0x11c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <SystemInit+0x130>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <SystemInit+0x134>)
 80014bc:	4013      	ands	r3, r2
 80014be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014c2:	d202      	bcs.n	80014ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <SystemInit+0x138>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <SystemInit+0x11c>)
 80014cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d113      	bne.n	8001500 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <SystemInit+0x11c>)
 80014da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014de:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <SystemInit+0x11c>)
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <SystemInit+0x13c>)
 80014ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <SystemInit+0x11c>)
 80014f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014f6:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <SystemInit+0x11c>)
 80014f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	52002000 	.word	0x52002000
 8001514:	58024400 	.word	0x58024400
 8001518:	eaf6ed7f 	.word	0xeaf6ed7f
 800151c:	02020200 	.word	0x02020200
 8001520:	01ff0000 	.word	0x01ff0000
 8001524:	01010280 	.word	0x01010280
 8001528:	5c001000 	.word	0x5c001000
 800152c:	ffff0000 	.word	0xffff0000
 8001530:	51008108 	.word	0x51008108
 8001534:	52004000 	.word	0x52004000

08001538 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <ExitRun0Mode+0x2c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <ExitRun0Mode+0x2c>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001548:	bf00      	nop
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <ExitRun0Mode+0x2c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f9      	beq.n	800154a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	58024800 	.word	0x58024800

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800156c:	f7ff ffe4 	bl	8001538 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001570:	f7ff ff42 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	@ (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	@ (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159a:	f005 fe57 	bl	800724c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff fb79 	bl	8000c94 <main>
  bx  lr
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015ac:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80015b0:	08008594 	.word	0x08008594
  ldr r2, =_sbss
 80015b4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80015b8:	24000334 	.word	0x24000334

080015bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC3_IRQHandler>
	...

080015c0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	@ 0x30
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <BSP_LED_Init+0x28>
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d006      	beq.n	80015e8 <BSP_LED_Init+0x28>
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d003      	beq.n	80015e8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015e0:	f06f 0301 	mvn.w	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015e6:	e055      	b.n	8001694 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80015ee:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <BSP_LED_Init+0xe0>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f4:	4a2a      	ldr	r2, [pc, #168]	@ (80016a0 <BSP_LED_Init+0xe0>)
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015fe:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <BSP_LED_Init+0xe0>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	e021      	b.n	8001652 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10f      	bne.n	8001634 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001614:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <BSP_LED_Init+0xe0>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <BSP_LED_Init+0xe0>)
 800161c:	f043 0310 	orr.w	r3, r3, #16
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <BSP_LED_Init+0xe0>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	e00e      	b.n	8001652 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <BSP_LED_Init+0xe0>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	4a19      	ldr	r2, [pc, #100]	@ (80016a0 <BSP_LED_Init+0xe0>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <BSP_LED_Init+0xe0>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <BSP_LED_Init+0xe4>)
 8001656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800165a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4a0f      	ldr	r2, [pc, #60]	@ (80016a8 <BSP_LED_Init+0xe8>)
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	f107 0218 	add.w	r2, r7, #24
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fca6 	bl	8001fc8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <BSP_LED_Init+0xe8>)
 8001680:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4a07      	ldr	r2, [pc, #28]	@ (80016a4 <BSP_LED_Init+0xe4>)
 8001688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	f000 fe4a 	bl	8002328 <HAL_GPIO_WritePin>
  }

  return ret;
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001696:	4618      	mov	r0, r3
 8001698:	3730      	adds	r7, #48	@ 0x30
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	58024400 	.word	0x58024400
 80016a4:	0800852c 	.word	0x0800852c
 80016a8:	2400000c 	.word	0x2400000c

080016ac <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <BSP_LED_On+0x28>
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d006      	beq.n	80016d4 <BSP_LED_On+0x28>
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d003      	beq.n	80016d4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016cc:	f06f 0301 	mvn.w	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e00b      	b.n	80016ec <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <BSP_LED_On+0x4c>)
 80016d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <BSP_LED_On+0x50>)
 80016e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	f000 fe1e 	bl	8002328 <HAL_GPIO_WritePin>
  }

  return ret;
 80016ec:	68fb      	ldr	r3, [r7, #12]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2400000c 	.word	0x2400000c
 80016fc:	0800852c 	.word	0x0800852c

08001700 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <BSP_LED_Off+0x28>
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d006      	beq.n	8001728 <BSP_LED_Off+0x28>
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d003      	beq.n	8001728 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001720:	f06f 0301 	mvn.w	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00b      	b.n	8001740 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <BSP_LED_Off+0x4c>)
 800172c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <BSP_LED_Off+0x50>)
 8001734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	f000 fdf4 	bl	8002328 <HAL_GPIO_WritePin>
  }

  return ret;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2400000c 	.word	0x2400000c
 8001750:	0800852c 	.word	0x0800852c

08001754 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <BSP_LED_Toggle+0x28>
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d006      	beq.n	800177c <BSP_LED_Toggle+0x28>
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d003      	beq.n	800177c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001774:	f06f 0301 	mvn.w	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e00b      	b.n	8001794 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <BSP_LED_Toggle+0x4c>)
 8001780:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4907      	ldr	r1, [pc, #28]	@ (80017a4 <BSP_LED_Toggle+0x50>)
 8001788:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f000 fde3 	bl	800235a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001794:	68fb      	ldr	r3, [r7, #12]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2400000c 	.word	0x2400000c
 80017a4:	0800852c 	.word	0x0800852c

080017a8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	460a      	mov	r2, r1
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80017b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001874 <BSP_PB_Init+0xcc>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	4a2d      	ldr	r2, [pc, #180]	@ (8001874 <BSP_PB_Init+0xcc>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <BSP_PB_Init+0xcc>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80017d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017da:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80017dc:	2302      	movs	r3, #2
 80017de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <BSP_PB_Init+0xd0>)
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	f107 020c 	add.w	r2, r7, #12
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fbe3 	bl	8001fc8 <HAL_GPIO_Init>
 8001802:	e031      	b.n	8001868 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001804:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001808:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4a1a      	ldr	r2, [pc, #104]	@ (8001878 <BSP_PB_Init+0xd0>)
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	f107 020c 	add.w	r2, r7, #12
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fbd5 	bl	8001fc8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4a16      	ldr	r2, [pc, #88]	@ (800187c <BSP_PB_Init+0xd4>)
 8001824:	441a      	add	r2, r3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4915      	ldr	r1, [pc, #84]	@ (8001880 <BSP_PB_Init+0xd8>)
 800182a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f000 fb84 	bl	8001f3e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4a10      	ldr	r2, [pc, #64]	@ (800187c <BSP_PB_Init+0xd4>)
 800183c:	1898      	adds	r0, r3, r2
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	4a10      	ldr	r2, [pc, #64]	@ (8001884 <BSP_PB_Init+0xdc>)
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	461a      	mov	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f000 fb59 	bl	8001f00 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800184e:	2028      	movs	r0, #40	@ 0x28
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <BSP_PB_Init+0xe0>)
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	f000 faa3 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001860:	2328      	movs	r3, #40	@ 0x28
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fab9 	bl	8001dda <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	58024400 	.word	0x58024400
 8001878:	24000018 	.word	0x24000018
 800187c:	24000144 	.word	0x24000144
 8001880:	08008534 	.word	0x08008534
 8001884:	2400001c 	.word	0x2400001c
 8001888:	24000020 	.word	0x24000020

0800188c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <BSP_PB_IRQHandler+0x20>)
 800189c:	4413      	add	r3, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fb62 	bl	8001f68 <HAL_EXTI_IRQHandler>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	24000144 	.word	0x24000144

080018b0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018c6:	f06f 0301 	mvn.w	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e018      	b.n	8001900 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2294      	movs	r2, #148	@ 0x94
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <BSP_COM_Init+0x5c>)
 80018d8:	4413      	add	r3, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f86e 	bl	80019bc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2294      	movs	r2, #148	@ 0x94
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	4a08      	ldr	r2, [pc, #32]	@ (800190c <BSP_COM_Init+0x5c>)
 80018ea:	4413      	add	r3, r2
 80018ec:	6839      	ldr	r1, [r7, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f80e 	bl	8001910 <MX_USART3_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018fa:	f06f 0303 	mvn.w	r3, #3
 80018fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001900:	68fb      	ldr	r3, [r7, #12]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2400014c 	.word	0x2400014c

08001910 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <MX_USART3_Init+0x60>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	220c      	movs	r2, #12
 800192e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	895b      	ldrh	r3, [r3, #10]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	891b      	ldrh	r3, [r3, #8]
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	899b      	ldrh	r3, [r3, #12]
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800195c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f004 fa97 	bl	8005e92 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	24000008 	.word	0x24000008

08001974 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <__io_putchar+0x30>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	2394      	movs	r3, #148	@ 0x94
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <__io_putchar+0x34>)
 800198a:	1898      	adds	r0, r3, r2
 800198c:	1d39      	adds	r1, r7, #4
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	2201      	movs	r2, #1
 8001994:	f004 fad7 	bl	8005f46 <HAL_UART_Transmit>
  return ch;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	240001e0 	.word	0x240001e0
 80019a8:	2400014c 	.word	0x2400014c

080019ac <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fb97 	bl	80010e4 <BSP_PB_Callback>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <COM1_MspInit+0xa8>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ca:	4a26      	ldr	r2, [pc, #152]	@ (8001a64 <COM1_MspInit+0xa8>)
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d4:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <COM1_MspInit+0xa8>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80019e2:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <COM1_MspInit+0xa8>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <COM1_MspInit+0xa8>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <COM1_MspInit+0xa8>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <COM1_MspInit+0xa8>)
 8001a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a06:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <COM1_MspInit+0xa8>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <COM1_MspInit+0xa8>)
 8001a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a22:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001a30:	2307      	movs	r3, #7
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480b      	ldr	r0, [pc, #44]	@ (8001a68 <COM1_MspInit+0xac>)
 8001a3c:	f000 fac4 	bl	8001fc8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a44:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <COM1_MspInit+0xac>)
 8001a56:	f000 fab7 	bl	8001fc8 <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	@ 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	58024400 	.word	0x58024400
 8001a68:	58020c00 	.word	0x58020c00

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a72:	2003      	movs	r0, #3
 8001a74:	f000 f98c 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a78:	f001 fad4 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_Init+0x68>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	4913      	ldr	r1, [pc, #76]	@ (8001ad8 <HAL_Init+0x6c>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_Init+0x68>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <HAL_Init+0x6c>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_Init+0x70>)
 8001aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_Init+0x74>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 f814 	bl	8001ae4 <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e002      	b.n	8001acc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac6:	f7ff fb27 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	0800851c 	.word	0x0800851c
 8001adc:	24000004 	.word	0x24000004
 8001ae0:	24000000 	.word	0x24000000

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001aec:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_InitTick+0x60>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e021      	b.n	8001b3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_InitTick+0x64>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_InitTick+0x60>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f971 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f93b 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	@ (8001b4c <HAL_InitTick+0x68>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	24000028 	.word	0x24000028
 8001b48:	24000000 	.word	0x24000000
 8001b4c:	24000024 	.word	0x24000024

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	24000028 	.word	0x24000028
 8001b74:	240001e4 	.word	0x240001e4

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	240001e4 	.word	0x240001e4

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	24000028 	.word	0x24000028

08001bd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_GetREVID+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0c1b      	lsrs	r3, r3, #16
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	5c001000 	.word	0x5c001000

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x40>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x40>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	05fa0000 	.word	0x05fa0000

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	@ (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	@ (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff40 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff33 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa4 	bl	8001d4c <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e14:	f3bf 8f5f 	dmb	sy
}
 8001e18:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <HAL_MPU_Disable+0x28>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <HAL_MPU_Disable+0x28>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e24:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_MPU_Disable+0x2c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00
 8001e3c:	e000ed90 	.word	0xe000ed90

08001e40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e48:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_MPU_Enable+0x38>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_MPU_Enable+0x3c>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_MPU_Enable+0x3c>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e5e:	f3bf 8f4f 	dsb	sy
}
 8001e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e64:	f3bf 8f6f 	isb	sy
}
 8001e68:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed90 	.word	0xe000ed90
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	785a      	ldrb	r2, [r3, #1]
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7b1b      	ldrb	r3, [r3, #12]
 8001ea8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7adb      	ldrb	r3, [r3, #11]
 8001eae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7a9b      	ldrb	r3, [r3, #10]
 8001eb6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7b5b      	ldrb	r3, [r3, #13]
 8001ebe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7b9b      	ldrb	r3, [r3, #14]
 8001ec6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7bdb      	ldrb	r3, [r3, #15]
 8001ece:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7a5b      	ldrb	r3, [r3, #9]
 8001ed6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7a1b      	ldrb	r3, [r3, #8]
 8001ede:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ee0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eec:	6113      	str	r3, [r2, #16]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed90 	.word	0xe000ed90

08001f00 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e00a      	b.n	8001f32 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	605a      	str	r2, [r3, #4]
      break;
 8001f28:	e002      	b.n	8001f30 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8001f2e:	bf00      	nop
  }

  return status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e003      	b.n	8001f5a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2201      	movs	r2, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	011a      	lsls	r2, r3, #4
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_EXTI_IRQHandler+0x5c>)
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4798      	blx	r3
    }
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	58000088 	.word	0x58000088

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fd6:	4b89      	ldr	r3, [pc, #548]	@ (80021fc <HAL_GPIO_Init+0x234>)
 8001fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fda:	e194      	b.n	8002306 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8186 	beq.w	8002300 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d005      	beq.n	800200c <HAL_GPIO_Init+0x44>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d130      	bne.n	800206e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002042:	2201      	movs	r2, #1
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f003 0201 	and.w	r2, r3, #1
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b03      	cmp	r3, #3
 8002078:	d017      	beq.n	80020aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d123      	bne.n	80020fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	08da      	lsrs	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3208      	adds	r2, #8
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0203 	and.w	r2, r3, #3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80e0 	beq.w	8002300 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002140:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <HAL_GPIO_Init+0x238>)
 8002142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002146:	4a2e      	ldr	r2, [pc, #184]	@ (8002200 <HAL_GPIO_Init+0x238>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002150:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <HAL_GPIO_Init+0x238>)
 8002152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	4a29      	ldr	r2, [pc, #164]	@ (8002204 <HAL_GPIO_Init+0x23c>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a20      	ldr	r2, [pc, #128]	@ (8002208 <HAL_GPIO_Init+0x240>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d052      	beq.n	8002230 <HAL_GPIO_Init+0x268>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1f      	ldr	r2, [pc, #124]	@ (800220c <HAL_GPIO_Init+0x244>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d031      	beq.n	80021f6 <HAL_GPIO_Init+0x22e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1e      	ldr	r2, [pc, #120]	@ (8002210 <HAL_GPIO_Init+0x248>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02b      	beq.n	80021f2 <HAL_GPIO_Init+0x22a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_GPIO_Init+0x24c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d025      	beq.n	80021ee <HAL_GPIO_Init+0x226>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <HAL_GPIO_Init+0x250>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <HAL_GPIO_Init+0x222>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <HAL_GPIO_Init+0x254>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x21e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002220 <HAL_GPIO_Init+0x258>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x21a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a19      	ldr	r2, [pc, #100]	@ (8002224 <HAL_GPIO_Init+0x25c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x216>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a18      	ldr	r2, [pc, #96]	@ (8002228 <HAL_GPIO_Init+0x260>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x212>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a17      	ldr	r2, [pc, #92]	@ (800222c <HAL_GPIO_Init+0x264>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x20e>
 80021d2:	2309      	movs	r3, #9
 80021d4:	e02d      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021d6:	230a      	movs	r3, #10
 80021d8:	e02b      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021da:	2308      	movs	r3, #8
 80021dc:	e029      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021de:	2307      	movs	r3, #7
 80021e0:	e027      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e025      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e023      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e021      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e01f      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e01d      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e01b      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021fa:	bf00      	nop
 80021fc:	58000080 	.word	0x58000080
 8002200:	58024400 	.word	0x58024400
 8002204:	58000400 	.word	0x58000400
 8002208:	58020000 	.word	0x58020000
 800220c:	58020400 	.word	0x58020400
 8002210:	58020800 	.word	0x58020800
 8002214:	58020c00 	.word	0x58020c00
 8002218:	58021000 	.word	0x58021000
 800221c:	58021400 	.word	0x58021400
 8002220:	58021800 	.word	0x58021800
 8002224:	58021c00 	.word	0x58021c00
 8002228:	58022000 	.word	0x58022000
 800222c:	58022400 	.word	0x58022400
 8002230:	2300      	movs	r3, #0
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002242:	4938      	ldr	r1, [pc, #224]	@ (8002324 <HAL_GPIO_Init+0x35c>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002276:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	f47f ae63 	bne.w	8001fdc <HAL_GPIO_Init+0x14>
  }
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3724      	adds	r7, #36	@ 0x24
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	58000400 	.word	0x58000400

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	041a      	lsls	r2, r3, #16
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43d9      	mvns	r1, r3
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	400b      	ands	r3, r1
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d00a      	beq.n	80023ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01f      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e01d      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	490f      	ldr	r1, [pc, #60]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023ca:	f7ff fbd5 	bl	8001b78 <HAL_GetTick>
 80023ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023d0:	e009      	b.n	80023e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023d2:	f7ff fbd1 	bl	8001b78 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e0:	d901      	bls.n	80023e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e007      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f2:	d1ee      	bne.n	80023d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	58024800 	.word	0x58024800

08002404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	@ 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	f000 bc48 	b.w	8002ca8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8088 	beq.w	8002536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002426:	4b99      	ldr	r3, [pc, #612]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002430:	4b96      	ldr	r3, [pc, #600]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002438:	2b10      	cmp	r3, #16
 800243a:	d007      	beq.n	800244c <HAL_RCC_OscConfig+0x48>
 800243c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243e:	2b18      	cmp	r3, #24
 8002440:	d111      	bne.n	8002466 <HAL_RCC_OscConfig+0x62>
 8002442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d10c      	bne.n	8002466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b8f      	ldr	r3, [pc, #572]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d06d      	beq.n	8002534 <HAL_RCC_OscConfig+0x130>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d169      	bne.n	8002534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f000 bc21 	b.w	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x7a>
 8002470:	4b86      	ldr	r3, [pc, #536]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a85      	ldr	r2, [pc, #532]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e02e      	b.n	80024dc <HAL_RCC_OscConfig+0xd8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x9c>
 8002486:	4b81      	ldr	r3, [pc, #516]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a80      	ldr	r2, [pc, #512]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b7e      	ldr	r3, [pc, #504]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7d      	ldr	r2, [pc, #500]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e01d      	b.n	80024dc <HAL_RCC_OscConfig+0xd8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0xc0>
 80024aa:	4b78      	ldr	r3, [pc, #480]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a77      	ldr	r2, [pc, #476]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b75      	ldr	r3, [pc, #468]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a74      	ldr	r2, [pc, #464]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0xd8>
 80024c4:	4b71      	ldr	r3, [pc, #452]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a70      	ldr	r2, [pc, #448]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b6e      	ldr	r3, [pc, #440]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6d      	ldr	r2, [pc, #436]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff fb48 	bl	8001b78 <HAL_GetTick>
 80024e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff fb44 	bl	8001b78 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	@ 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e3d4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fe:	4b63      	ldr	r3, [pc, #396]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0xe8>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff fb34 	bl	8001b78 <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff fb30 	bl	8001b78 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	@ 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e3c0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002526:	4b59      	ldr	r3, [pc, #356]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x110>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80ca 	beq.w	80026d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4b51      	ldr	r3, [pc, #324]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800254c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254e:	4b4f      	ldr	r3, [pc, #316]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_RCC_OscConfig+0x166>
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2b18      	cmp	r3, #24
 800255e:	d156      	bne.n	800260e <HAL_RCC_OscConfig+0x20a>
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d151      	bne.n	800260e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256a:	4b48      	ldr	r3, [pc, #288]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x17e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e392      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002582:	4b42      	ldr	r3, [pc, #264]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0219 	bic.w	r2, r3, #25
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	493f      	ldr	r1, [pc, #252]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff faf0 	bl	8001b78 <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7ff faec 	bl	8001b78 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e37c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ae:	4b37      	ldr	r3, [pc, #220]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	f7ff fb0d 	bl	8001bd8 <HAL_GetREVID>
 80025be:	4603      	mov	r3, r0
 80025c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d817      	bhi.n	80025f8 <HAL_RCC_OscConfig+0x1f4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b40      	cmp	r3, #64	@ 0x40
 80025ce:	d108      	bne.n	80025e2 <HAL_RCC_OscConfig+0x1de>
 80025d0:	4b2e      	ldr	r3, [pc, #184]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025d8:	4a2c      	ldr	r2, [pc, #176]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80025da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e0:	e07a      	b.n	80026d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	031b      	lsls	r3, r3, #12
 80025f0:	4926      	ldr	r1, [pc, #152]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f6:	e06f      	b.n	80026d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	4921      	ldr	r1, [pc, #132]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260c:	e064      	b.n	80026d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d047      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002616:	4b1d      	ldr	r3, [pc, #116]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0219 	bic.w	r2, r3, #25
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	491a      	ldr	r1, [pc, #104]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff faa6 	bl	8001b78 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002630:	f7ff faa2 	bl	8001b78 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e332      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002642:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	f7ff fac3 	bl	8001bd8 <HAL_GetREVID>
 8002652:	4603      	mov	r3, r0
 8002654:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002658:	4293      	cmp	r3, r2
 800265a:	d819      	bhi.n	8002690 <HAL_RCC_OscConfig+0x28c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b40      	cmp	r3, #64	@ 0x40
 8002662:	d108      	bne.n	8002676 <HAL_RCC_OscConfig+0x272>
 8002664:	4b09      	ldr	r3, [pc, #36]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800266c:	4a07      	ldr	r2, [pc, #28]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 800266e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002672:	6053      	str	r3, [r2, #4]
 8002674:	e030      	b.n	80026d8 <HAL_RCC_OscConfig+0x2d4>
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	031b      	lsls	r3, r3, #12
 8002684:	4901      	ldr	r1, [pc, #4]	@ (800268c <HAL_RCC_OscConfig+0x288>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
 800268a:	e025      	b.n	80026d8 <HAL_RCC_OscConfig+0x2d4>
 800268c:	58024400 	.word	0x58024400
 8002690:	4b9a      	ldr	r3, [pc, #616]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	4997      	ldr	r1, [pc, #604]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b95      	ldr	r3, [pc, #596]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a94      	ldr	r2, [pc, #592]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff fa61 	bl	8001b78 <HAL_GetTick>
 80026b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff fa5d 	bl	8001b78 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e2ed      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026cc:	4b8b      	ldr	r3, [pc, #556]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a9 	beq.w	8002838 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4b85      	ldr	r3, [pc, #532]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f0:	4b82      	ldr	r3, [pc, #520]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d007      	beq.n	800270c <HAL_RCC_OscConfig+0x308>
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b18      	cmp	r3, #24
 8002700:	d13a      	bne.n	8002778 <HAL_RCC_OscConfig+0x374>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d135      	bne.n	8002778 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270c:	4b7b      	ldr	r3, [pc, #492]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x320>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	2b80      	cmp	r3, #128	@ 0x80
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e2c1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002724:	f7ff fa58 	bl	8001bd8 <HAL_GetREVID>
 8002728:	4603      	mov	r3, r0
 800272a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800272e:	4293      	cmp	r3, r2
 8002730:	d817      	bhi.n	8002762 <HAL_RCC_OscConfig+0x35e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	2b20      	cmp	r3, #32
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x348>
 800273a:	4b70      	ldr	r3, [pc, #448]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002742:	4a6e      	ldr	r2, [pc, #440]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002744:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002748:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800274a:	e075      	b.n	8002838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274c:	4b6b      	ldr	r3, [pc, #428]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	069b      	lsls	r3, r3, #26
 800275a:	4968      	ldr	r1, [pc, #416]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002760:	e06a      	b.n	8002838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002762:	4b66      	ldr	r3, [pc, #408]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	061b      	lsls	r3, r3, #24
 8002770:	4962      	ldr	r1, [pc, #392]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002776:	e05f      	b.n	8002838 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d042      	beq.n	8002806 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002780:	4b5e      	ldr	r3, [pc, #376]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5d      	ldr	r2, [pc, #372]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff f9f4 	bl	8001b78 <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002794:	f7ff f9f0 	bl	8001b78 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e280      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027a6:	4b55      	ldr	r3, [pc, #340]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027b2:	f7ff fa11 	bl	8001bd8 <HAL_GetREVID>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027bc:	4293      	cmp	r3, r2
 80027be:	d817      	bhi.n	80027f0 <HAL_RCC_OscConfig+0x3ec>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d108      	bne.n	80027da <HAL_RCC_OscConfig+0x3d6>
 80027c8:	4b4c      	ldr	r3, [pc, #304]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027d0:	4a4a      	ldr	r2, [pc, #296]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80027d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027d6:	6053      	str	r3, [r2, #4]
 80027d8:	e02e      	b.n	8002838 <HAL_RCC_OscConfig+0x434>
 80027da:	4b48      	ldr	r3, [pc, #288]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	069b      	lsls	r3, r3, #26
 80027e8:	4944      	ldr	r1, [pc, #272]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
 80027ee:	e023      	b.n	8002838 <HAL_RCC_OscConfig+0x434>
 80027f0:	4b42      	ldr	r3, [pc, #264]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	493f      	ldr	r1, [pc, #252]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
 8002804:	e018      	b.n	8002838 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002806:	4b3d      	ldr	r3, [pc, #244]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a3c      	ldr	r2, [pc, #240]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 800280c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7ff f9b1 	bl	8001b78 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800281a:	f7ff f9ad 	bl	8001b78 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e23d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800282c:	4b33      	ldr	r3, [pc, #204]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d036      	beq.n	80028b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d019      	beq.n	8002880 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284c:	4b2b      	ldr	r3, [pc, #172]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	4a2a      	ldr	r2, [pc, #168]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7ff f98e 	bl	8001b78 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002860:	f7ff f98a 	bl	8001b78 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e21a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002872:	4b22      	ldr	r3, [pc, #136]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x45c>
 800287e:	e018      	b.n	80028b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002880:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	4a1d      	ldr	r2, [pc, #116]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7ff f974 	bl	8001b78 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002894:	f7ff f970 	bl	8001b78 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e200      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d039      	beq.n	8002932 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01c      	beq.n	8002900 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c6:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028d2:	f7ff f951 	bl	8001b78 <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028da:	f7ff f94d 	bl	8001b78 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1dd      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x4d6>
 80028f8:	e01b      	b.n	8002932 <HAL_RCC_OscConfig+0x52e>
 80028fa:	bf00      	nop
 80028fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002900:	4b9b      	ldr	r3, [pc, #620]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a9a      	ldr	r2, [pc, #616]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800290a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800290c:	f7ff f934 	bl	8001b78 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002914:	f7ff f930 	bl	8001b78 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1c0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002926:	4b92      	ldr	r3, [pc, #584]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8081 	beq.w	8002a42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002940:	4b8c      	ldr	r3, [pc, #560]	@ (8002b74 <HAL_RCC_OscConfig+0x770>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a8b      	ldr	r2, [pc, #556]	@ (8002b74 <HAL_RCC_OscConfig+0x770>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294c:	f7ff f914 	bl	8001b78 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7ff f910 	bl	8001b78 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e1a0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002966:	4b83      	ldr	r3, [pc, #524]	@ (8002b74 <HAL_RCC_OscConfig+0x770>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d106      	bne.n	8002988 <HAL_RCC_OscConfig+0x584>
 800297a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6713      	str	r3, [r2, #112]	@ 0x70
 8002986:	e02d      	b.n	80029e4 <HAL_RCC_OscConfig+0x5e0>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x5a6>
 8002990:	4b77      	ldr	r3, [pc, #476]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a76      	ldr	r2, [pc, #472]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
 800299c:	4b74      	ldr	r3, [pc, #464]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	4a73      	ldr	r2, [pc, #460]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x5e0>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x5c8>
 80029b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029be:	4b6c      	ldr	r3, [pc, #432]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0x5e0>
 80029cc:	4b68      	ldr	r3, [pc, #416]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	4a67      	ldr	r2, [pc, #412]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d8:	4b65      	ldr	r3, [pc, #404]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a64      	ldr	r2, [pc, #400]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7ff f8c4 	bl	8001b78 <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7ff f8c0 	bl	8001b78 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e14e      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a0a:	4b59      	ldr	r3, [pc, #356]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCC_OscConfig+0x5f0>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7ff f8ae 	bl	8001b78 <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7ff f8aa 	bl	8001b78 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e138      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a36:	4b4e      	ldr	r3, [pc, #312]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ee      	bne.n	8002a20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 812d 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a4c:	4b48      	ldr	r3, [pc, #288]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a54:	2b18      	cmp	r3, #24
 8002a56:	f000 80bd 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	f040 809e 	bne.w	8002ba0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a41      	ldr	r2, [pc, #260]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7ff f882 	bl	8001b78 <HAL_GetTick>
 8002a74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff f87e 	bl	8001b78 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e10e      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a8a:	4b39      	ldr	r3, [pc, #228]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a96:	4b36      	ldr	r3, [pc, #216]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a9a:	4b37      	ldr	r3, [pc, #220]	@ (8002b78 <HAL_RCC_OscConfig+0x774>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	4931      	ldr	r1, [pc, #196]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	025b      	lsls	r3, r3, #9
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ae0:	4923      	ldr	r1, [pc, #140]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ae6:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <HAL_RCC_OscConfig+0x778>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002afe:	00d2      	lsls	r2, r2, #3
 8002b00:	491b      	ldr	r1, [pc, #108]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	f023 020c 	bic.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	4917      	ldr	r1, [pc, #92]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b18:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	f023 0202 	bic.w	r2, r3, #2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	4912      	ldr	r1, [pc, #72]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	4a10      	ldr	r2, [pc, #64]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b36:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b42:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b4e:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	4a07      	ldr	r2, [pc, #28]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <HAL_RCC_OscConfig+0x76c>)
 8002b60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7ff f807 	bl	8001b78 <HAL_GetTick>
 8002b6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b6c:	e011      	b.n	8002b92 <HAL_RCC_OscConfig+0x78e>
 8002b6e:	bf00      	nop
 8002b70:	58024400 	.word	0x58024400
 8002b74:	58024800 	.word	0x58024800
 8002b78:	fffffc0c 	.word	0xfffffc0c
 8002b7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fffa 	bl	8001b78 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e08a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b92:	4b47      	ldr	r3, [pc, #284]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x77c>
 8002b9e:	e082      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a42      	ldr	r2, [pc, #264]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe ffe4 	bl	8001b78 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe ffe0 	bl	8001b78 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e070      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x7b0>
 8002bd2:	e068      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bd4:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bda:	4b35      	ldr	r3, [pc, #212]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d031      	beq.n	8002c4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d12a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d122      	bne.n	8002c4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0a5b      	lsrs	r3, r3, #9
 8002c1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0e1b      	lsrs	r3, r3, #24
 8002c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e02b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c50:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d01f      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c66:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	4a11      	ldr	r2, [pc, #68]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c72:	f7fe ff81 	bl	8001b78 <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c78:	bf00      	nop
 8002c7a:	f7fe ff7d 	bl	8001b78 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d0f9      	beq.n	8002c7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <HAL_RCC_OscConfig+0x8b0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c92:	00d2      	lsls	r2, r2, #3
 8002c94:	4906      	ldr	r1, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ac>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3730      	adds	r7, #48	@ 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	ffff0007 	.word	0xffff0007

08002cb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e19c      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b87      	ldr	r3, [pc, #540]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4985      	ldr	r1, [pc, #532]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b83      	ldr	r3, [pc, #524]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e184      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d908      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d18:	4b78      	ldr	r3, [pc, #480]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	4975      	ldr	r1, [pc, #468]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d010      	beq.n	8002d58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d908      	bls.n	8002d58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	496a      	ldr	r1, [pc, #424]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	4b64      	ldr	r3, [pc, #400]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d908      	bls.n	8002d86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d74:	4b61      	ldr	r3, [pc, #388]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	495e      	ldr	r1, [pc, #376]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d908      	bls.n	8002db4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002da2:	4b56      	ldr	r3, [pc, #344]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4953      	ldr	r1, [pc, #332]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d908      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f023 020f 	bic.w	r2, r3, #15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4947      	ldr	r1, [pc, #284]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d055      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dee:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4940      	ldr	r1, [pc, #256]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e08:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d121      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0f6      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e20:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d115      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0ea      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e38:	4b30      	ldr	r3, [pc, #192]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0de      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e48:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d6      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f023 0207 	bic.w	r2, r3, #7
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4925      	ldr	r1, [pc, #148]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fe85 	bl	8001b78 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e72:	f7fe fe81 	bl	8001b78 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0be      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e88:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1eb      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d208      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	490e      	ldr	r1, [pc, #56]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d214      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	4906      	ldr	r1, [pc, #24]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e086      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
 8002ef8:	52002000 	.word	0x52002000
 8002efc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	4b3f      	ldr	r3, [pc, #252]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d208      	bcs.n	8002f2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4939      	ldr	r1, [pc, #228]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d208      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	492e      	ldr	r1, [pc, #184]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d208      	bcs.n	8002f8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f78:	4b25      	ldr	r3, [pc, #148]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4922      	ldr	r1, [pc, #136]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d208      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4917      	ldr	r1, [pc, #92]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fb8:	f000 f834 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	4912      	ldr	r1, [pc, #72]	@ (8003014 <HAL_RCC_ClockConfig+0x35c>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	4a0d      	ldr	r2, [pc, #52]	@ (8003014 <HAL_RCC_ClockConfig+0x35c>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x360>)
 8002fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_RCC_ClockConfig+0x364>)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_RCC_ClockConfig+0x368>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fd72 	bl	8001ae4 <HAL_InitTick>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	58024400 	.word	0x58024400
 8003014:	0800851c 	.word	0x0800851c
 8003018:	24000004 	.word	0x24000004
 800301c:	24000000 	.word	0x24000000
 8003020:	24000024 	.word	0x24000024

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302a:	4bb3      	ldr	r3, [pc, #716]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003032:	2b18      	cmp	r3, #24
 8003034:	f200 8155 	bhi.w	80032e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003038:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <HAL_RCC_GetSysClockFreq+0x1c>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	080030a5 	.word	0x080030a5
 8003044:	080032e3 	.word	0x080032e3
 8003048:	080032e3 	.word	0x080032e3
 800304c:	080032e3 	.word	0x080032e3
 8003050:	080032e3 	.word	0x080032e3
 8003054:	080032e3 	.word	0x080032e3
 8003058:	080032e3 	.word	0x080032e3
 800305c:	080032e3 	.word	0x080032e3
 8003060:	080030cb 	.word	0x080030cb
 8003064:	080032e3 	.word	0x080032e3
 8003068:	080032e3 	.word	0x080032e3
 800306c:	080032e3 	.word	0x080032e3
 8003070:	080032e3 	.word	0x080032e3
 8003074:	080032e3 	.word	0x080032e3
 8003078:	080032e3 	.word	0x080032e3
 800307c:	080032e3 	.word	0x080032e3
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080032e3 	.word	0x080032e3
 8003088:	080032e3 	.word	0x080032e3
 800308c:	080032e3 	.word	0x080032e3
 8003090:	080032e3 	.word	0x080032e3
 8003094:	080032e3 	.word	0x080032e3
 8003098:	080032e3 	.word	0x080032e3
 800309c:	080032e3 	.word	0x080032e3
 80030a0:	080030d7 	.word	0x080030d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a4:	4b94      	ldr	r3, [pc, #592]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030b0:	4b91      	ldr	r3, [pc, #580]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	4a90      	ldr	r2, [pc, #576]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030c2:	e111      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030c4:	4b8d      	ldr	r3, [pc, #564]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c6:	61bb      	str	r3, [r7, #24]
      break;
 80030c8:	e10e      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030cc:	61bb      	str	r3, [r7, #24]
      break;
 80030ce:	e10b      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030d2:	61bb      	str	r3, [r7, #24]
      break;
 80030d4:	e108      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030d6:	4b88      	ldr	r3, [pc, #544]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030e0:	4b85      	ldr	r3, [pc, #532]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030ec:	4b82      	ldr	r3, [pc, #520]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030f6:	4b80      	ldr	r3, [pc, #512]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80e1 	beq.w	80032dc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b02      	cmp	r3, #2
 800311e:	f000 8083 	beq.w	8003228 <HAL_RCC_GetSysClockFreq+0x204>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b02      	cmp	r3, #2
 8003126:	f200 80a1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x248>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x114>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d056      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003136:	e099      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003138:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02d      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003144:	4b6c      	ldr	r3, [pc, #432]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	08db      	lsrs	r3, r3, #3
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	4a6b      	ldr	r2, [pc, #428]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
 8003154:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316e:	4b62      	ldr	r3, [pc, #392]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003182:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800319e:	e087      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2e8>
 80031ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b2:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031e2:	e065      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f6:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003206:	ed97 6a02 	vldr	s12, [r7, #8]
 800320a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800321a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003226:	e043      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003232:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003314 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323a:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324a:	ed97 6a02 	vldr	s12, [r7, #8]
 800324e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800325e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800326a:	e021      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2ec>
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	0a5b      	lsrs	r3, r3, #9
 80032b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ba:	3301      	adds	r3, #1
 80032bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80032cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d4:	ee17 3a90 	vmov	r3, s15
 80032d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032da:	e005      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
      break;
 80032e0:	e002      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032e4:	61bb      	str	r3, [r7, #24]
      break;
 80032e6:	bf00      	nop
  }

  return sysclockfreq;
 80032e8:	69bb      	ldr	r3, [r7, #24]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	@ 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	58024400 	.word	0x58024400
 80032fc:	03d09000 	.word	0x03d09000
 8003300:	003d0900 	.word	0x003d0900
 8003304:	017d7840 	.word	0x017d7840
 8003308:	46000000 	.word	0x46000000
 800330c:	4c742400 	.word	0x4c742400
 8003310:	4a742400 	.word	0x4a742400
 8003314:	4bbebc20 	.word	0x4bbebc20

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800331e:	f7ff fe81 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x50>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490f      	ldr	r1, [pc, #60]	@ (800336c <HAL_RCC_GetHCLKFreq+0x54>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800333c:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x50>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	4a09      	ldr	r2, [pc, #36]	@ (800336c <HAL_RCC_GetHCLKFreq+0x54>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a07      	ldr	r2, [pc, #28]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x58>)
 8003354:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003356:	4a07      	ldr	r2, [pc, #28]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800335c:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x58>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	58024400 	.word	0x58024400
 800336c:	0800851c 	.word	0x0800851c
 8003370:	24000004 	.word	0x24000004
 8003374:	24000000 	.word	0x24000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800337c:	f7ff ffcc 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4904      	ldr	r1, [pc, #16]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58024400 	.word	0x58024400
 80033a0:	0800851c 	.word	0x0800851c

080033a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033a8:	f7ff ffb6 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4904      	ldr	r1, [pc, #16]	@ (80033cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	58024400 	.word	0x58024400
 80033cc:	0800851c 	.word	0x0800851c

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d4:	b0ca      	sub	sp, #296	@ 0x128
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033f4:	2500      	movs	r5, #0
 80033f6:	ea54 0305 	orrs.w	r3, r4, r5
 80033fa:	d049      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003402:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003406:	d02f      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800340c:	d828      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800340e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003412:	d01a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003418:	d822      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800341e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003422:	d007      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003424:	e01c      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003426:	4bb8      	ldr	r3, [pc, #736]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	4ab7      	ldr	r2, [pc, #732]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800342c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003432:	e01a      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003438:	3308      	adds	r3, #8
 800343a:	2102      	movs	r1, #2
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fc8f 	bl	8004d60 <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003448:	e00f      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	3328      	adds	r3, #40	@ 0x28
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fd36 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003472:	4ba5      	ldr	r3, [pc, #660]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003480:	4aa1      	ldr	r2, [pc, #644]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003482:	430b      	orrs	r3, r1
 8003484:	6513      	str	r3, [r2, #80]	@ 0x50
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800349c:	f04f 0900 	mov.w	r9, #0
 80034a0:	ea58 0309 	orrs.w	r3, r8, r9
 80034a4:	d047      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d82a      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034b0:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034cd 	.word	0x080034cd
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034f1 	.word	0x080034f1
 80034c4:	0800350f 	.word	0x0800350f
 80034c8:	0800350f 	.word	0x0800350f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	4a8d      	ldr	r2, [pc, #564]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d8:	e01a      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	3308      	adds	r3, #8
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fc3c 	bl	8004d60 <RCCEx_PLL2_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ee:	e00f      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f4:	3328      	adds	r3, #40	@ 0x28
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fce3 	bl	8004ec4 <RCCEx_PLL3_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003504:	e004      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800350e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003518:	4b7b      	ldr	r3, [pc, #492]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351c:	f023 0107 	bic.w	r1, r3, #7
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	4a78      	ldr	r2, [pc, #480]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003528:	430b      	orrs	r3, r1
 800352a:	6513      	str	r3, [r2, #80]	@ 0x50
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003542:	f04f 0b00 	mov.w	fp, #0
 8003546:	ea5a 030b 	orrs.w	r3, sl, fp
 800354a:	d04c      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003556:	d030      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355c:	d829      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800355e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003560:	d02d      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003562:	2bc0      	cmp	r3, #192	@ 0xc0
 8003564:	d825      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003566:	2b80      	cmp	r3, #128	@ 0x80
 8003568:	d018      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800356a:	2b80      	cmp	r3, #128	@ 0x80
 800356c:	d821      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003572:	2b40      	cmp	r3, #64	@ 0x40
 8003574:	d007      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003576:	e01c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4b63      	ldr	r3, [pc, #396]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	4a62      	ldr	r2, [pc, #392]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003584:	e01c      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	3308      	adds	r3, #8
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fbe6 	bl	8004d60 <RCCEx_PLL2_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800359a:	e011      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	3328      	adds	r3, #40	@ 0x28
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fc8d 	bl	8004ec4 <RCCEx_PLL3_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b8:	e002      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d8:	430b      	orrs	r3, r1
 80035da:	6513      	str	r3, [r2, #80]	@ 0x50
 80035dc:	e003      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d053      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800360e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003612:	d035      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003614:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003618:	d82e      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800361a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800361e:	d031      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003620:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003624:	d828      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362a:	d01a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800362c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003630:	d822      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800363a:	d007      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800363c:	e01c      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363e:	4b32      	ldr	r3, [pc, #200]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	4a31      	ldr	r2, [pc, #196]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364a:	e01c      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	3308      	adds	r3, #8
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fb83 	bl	8004d60 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003660:	e011      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	3328      	adds	r3, #40	@ 0x28
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fc2a 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003676:	e006      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367e:	e002      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800368e:	4b1e      	ldr	r3, [pc, #120]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800369e:	4a1a      	ldr	r2, [pc, #104]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80036ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80036be:	2300      	movs	r3, #0
 80036c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d056      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036da:	d038      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e0:	d831      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036e6:	d034      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036ec:	d82b      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036f2:	d01d      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036f8:	d825      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003704:	e01f      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003706:	bf00      	nop
 8003708:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370c:	4ba2      	ldr	r3, [pc, #648]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003710:	4aa1      	ldr	r2, [pc, #644]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003718:	e01c      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371e:	3308      	adds	r3, #8
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f001 fb1c 	bl	8004d60 <RCCEx_PLL2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800372e:	e011      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	3328      	adds	r3, #40	@ 0x28
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fbc3 	bl	8004ec4 <RCCEx_PLL3_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800374c:	e002      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800375c:	4b8e      	ldr	r3, [pc, #568]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800376c:	4a8a      	ldr	r2, [pc, #552]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376e:	430b      	orrs	r3, r1
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
 8003772:	e003      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003792:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d03a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a2:	2b30      	cmp	r3, #48	@ 0x30
 80037a4:	d01f      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80037a6:	2b30      	cmp	r3, #48	@ 0x30
 80037a8:	d819      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d00c      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d815      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d019      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d111      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ba:	4b77      	ldr	r3, [pc, #476]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	4a76      	ldr	r2, [pc, #472]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037c6:	e011      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	3308      	adds	r3, #8
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fac5 	bl	8004d60 <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037dc:	e006      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e4:	e002      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037f4:	4b68      	ldr	r3, [pc, #416]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	4a65      	ldr	r2, [pc, #404]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003804:	430b      	orrs	r3, r1
 8003806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800381e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003828:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d051      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800383c:	d035      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800383e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003842:	d82e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003848:	d031      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800384a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800384e:	d828      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003854:	d01a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800385a:	d822      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003866:	e01c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4b4b      	ldr	r3, [pc, #300]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	4a4a      	ldr	r2, [pc, #296]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003874:	e01c      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	3308      	adds	r3, #8
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fa6e 	bl	8004d60 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800388a:	e011      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	3328      	adds	r3, #40	@ 0x28
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f001 fb15 	bl	8004ec4 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a8:	e002      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038b8:	4b37      	ldr	r3, [pc, #220]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	4a34      	ldr	r2, [pc, #208]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d056      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003900:	d033      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003902:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003906:	d82c      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003908:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800390c:	d02f      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800390e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003912:	d826      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003914:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003918:	d02b      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800391a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800391e:	d820      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003924:	d012      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800392a:	d81a      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003934:	d115      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393a:	3308      	adds	r3, #8
 800393c:	2101      	movs	r1, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f001 fa0e 	bl	8004d60 <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800394a:	e015      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	3328      	adds	r3, #40	@ 0x28
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fab5 	bl	8004ec4 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003968:	e006      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800396a:	bf00      	nop
 800396c:	e004      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10d      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003980:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003984:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800398e:	4a02      	ldr	r2, [pc, #8]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003990:	430b      	orrs	r3, r1
 8003992:	6513      	str	r3, [r2, #80]	@ 0x50
 8003994:	e006      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80039b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d055      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d0:	d033      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80039d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d6:	d82c      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039dc:	d02f      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e2:	d826      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039e8:	d02b      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039ee:	d820      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f4:	d012      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fa:	d81a      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d022      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a04:	d115      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 f9a6 	bl	8004d60 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e015      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	3328      	adds	r3, #40	@ 0x28
 8003a22:	2101      	movs	r1, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fa4d 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a30:	e00a      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a50:	4ba3      	ldr	r3, [pc, #652]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a54:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a60:	4a9f      	ldr	r2, [pc, #636]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d037      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a9a:	d00e      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa0:	d816      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aaa:	d111      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4b8c      	ldr	r3, [pc, #560]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	4a8b      	ldr	r2, [pc, #556]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ab8:	e00f      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	3308      	adds	r3, #8
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 f94c 	bl	8004d60 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ace:	e004      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d039      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d81c      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003b41 	.word	0x08003b41
 8003b38:	08003b4f 	.word	0x08003b4f
 8003b3c:	08003b6d 	.word	0x08003b6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b40:	4b67      	ldr	r3, [pc, #412]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b44:	4a66      	ldr	r2, [pc, #408]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b4c:	e00f      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	3308      	adds	r3, #8
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 f902 	bl	8004d60 <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b76:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	f023 0103 	bic.w	r1, r3, #3
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b84:	4a56      	ldr	r2, [pc, #344]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b86:	430b      	orrs	r3, r1
 8003b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8a:	e003      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003baa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f000 809f 	beq.w	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc2:	f7fd ffd9 	bl	8001b78 <HAL_GetTick>
 8003bc6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bca:	e00b      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bcc:	f7fd ffd4 	bl	8001b78 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	@ 0x64
 8003bda:	d903      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ed      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d179      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bf8:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c04:	4053      	eors	r3, r2
 8003c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d015      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0e:	4b34      	ldr	r3, [pc, #208]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	4a30      	ldr	r2, [pc, #192]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c46:	d118      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd ff96 	bl	8001b78 <HAL_GetTick>
 8003c4c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c50:	e00d      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd ff91 	bl	8001b78 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c5c:	1ad2      	subs	r2, r2, r3
 8003c5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d903      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c6c:	e005      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0eb      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d129      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c92:	d10e      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c94:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ca4:	091a      	lsrs	r2, r3, #4
 8003ca6:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6113      	str	r3, [r2, #16]
 8003cb0:	e005      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cbc:	6113      	str	r3, [r2, #16]
 8003cbe:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cce:	4a04      	ldr	r2, [pc, #16]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd4:	e00e      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003cde:	e009      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	58024800 	.word	0x58024800
 8003ce8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f002 0301 	and.w	r3, r2, #1
 8003d00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f000 8089 	beq.w	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d1c:	2b28      	cmp	r3, #40	@ 0x28
 8003d1e:	d86b      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d20:	a201      	add	r2, pc, #4	@ (adr r2, 8003d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003e01 	.word	0x08003e01
 8003d2c:	08003df9 	.word	0x08003df9
 8003d30:	08003df9 	.word	0x08003df9
 8003d34:	08003df9 	.word	0x08003df9
 8003d38:	08003df9 	.word	0x08003df9
 8003d3c:	08003df9 	.word	0x08003df9
 8003d40:	08003df9 	.word	0x08003df9
 8003d44:	08003df9 	.word	0x08003df9
 8003d48:	08003dcd 	.word	0x08003dcd
 8003d4c:	08003df9 	.word	0x08003df9
 8003d50:	08003df9 	.word	0x08003df9
 8003d54:	08003df9 	.word	0x08003df9
 8003d58:	08003df9 	.word	0x08003df9
 8003d5c:	08003df9 	.word	0x08003df9
 8003d60:	08003df9 	.word	0x08003df9
 8003d64:	08003df9 	.word	0x08003df9
 8003d68:	08003de3 	.word	0x08003de3
 8003d6c:	08003df9 	.word	0x08003df9
 8003d70:	08003df9 	.word	0x08003df9
 8003d74:	08003df9 	.word	0x08003df9
 8003d78:	08003df9 	.word	0x08003df9
 8003d7c:	08003df9 	.word	0x08003df9
 8003d80:	08003df9 	.word	0x08003df9
 8003d84:	08003df9 	.word	0x08003df9
 8003d88:	08003e01 	.word	0x08003e01
 8003d8c:	08003df9 	.word	0x08003df9
 8003d90:	08003df9 	.word	0x08003df9
 8003d94:	08003df9 	.word	0x08003df9
 8003d98:	08003df9 	.word	0x08003df9
 8003d9c:	08003df9 	.word	0x08003df9
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003df9 	.word	0x08003df9
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003df9 	.word	0x08003df9
 8003db0:	08003df9 	.word	0x08003df9
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003df9 	.word	0x08003df9
 8003dbc:	08003df9 	.word	0x08003df9
 8003dc0:	08003df9 	.word	0x08003df9
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003e01 	.word	0x08003e01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 ffc3 	bl	8004d60 <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003de0:	e00f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de6:	3328      	adds	r3, #40	@ 0x28
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 f86a 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e0a:	4bbf      	ldr	r3, [pc, #764]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e18:	4abb      	ldr	r2, [pc, #748]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e1e:	e003      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f002 0302 	and.w	r3, r2, #2
 8003e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e42:	460b      	mov	r3, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d041      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d824      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e52:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003ea5 	.word	0x08003ea5
 8003e5c:	08003e71 	.word	0x08003e71
 8003e60:	08003e87 	.word	0x08003e87
 8003e64:	08003ea5 	.word	0x08003ea5
 8003e68:	08003ea5 	.word	0x08003ea5
 8003e6c:	08003ea5 	.word	0x08003ea5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	3308      	adds	r3, #8
 8003e76:	2101      	movs	r1, #1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 ff71 	bl	8004d60 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e84:	e00f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	3328      	adds	r3, #40	@ 0x28
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f818 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eae:	4b96      	ldr	r3, [pc, #600]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	f023 0107 	bic.w	r1, r3, #7
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ebc:	4a92      	ldr	r2, [pc, #584]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f002 0304 	and.w	r3, r2, #4
 8003ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ee2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d044      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d825      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f19 	.word	0x08003f19
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f4d 	.word	0x08003f4d
 8003f10:	08003f4d 	.word	0x08003f4d
 8003f14:	08003f4d 	.word	0x08003f4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 ff1d 	bl	8004d60 <RCCEx_PLL2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	3328      	adds	r3, #40	@ 0x28
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 ffc4 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f56:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	f023 0107 	bic.w	r1, r3, #7
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f66:	4a68      	ldr	r2, [pc, #416]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f002 0320 	and.w	r3, r2, #32
 8003f82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f90:	460b      	mov	r3, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	d055      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa2:	d033      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa8:	d82c      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fae:	d02f      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb4:	d826      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fba:	d02b      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003fbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fc0:	d820      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc6:	d012      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fcc:	d81a      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d022      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd6:	d115      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	3308      	adds	r3, #8
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 febd 	bl	8004d60 <RCCEx_PLL2_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fec:	e015      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	3328      	adds	r3, #40	@ 0x28
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 ff64 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004002:	e00a      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800400a:	e006      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800400c:	bf00      	nop
 800400e:	e004      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004010:	bf00      	nop
 8004012:	e002      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004022:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	4a35      	ldr	r2, [pc, #212]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004034:	430b      	orrs	r3, r1
 8004036:	6553      	str	r3, [r2, #84]	@ 0x54
 8004038:	e003      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800403e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004058:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800405c:	460b      	mov	r3, r1
 800405e:	4313      	orrs	r3, r2
 8004060:	d058      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004066:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800406a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800406e:	d033      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004070:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004074:	d82c      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407a:	d02f      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d826      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004082:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004086:	d02b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004088:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800408c:	d820      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004092:	d012      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004098:	d81a      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d022      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a2:	d115      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	3308      	adds	r3, #8
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fe57 	bl	8004d60 <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040b8:	e015      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	3328      	adds	r3, #40	@ 0x28
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fefe 	bl	8004ec4 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040ce:	e00a      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d6:	e006      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040d8:	bf00      	nop
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040fe:	4a02      	ldr	r2, [pc, #8]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004100:	430b      	orrs	r3, r1
 8004102:	6593      	str	r3, [r2, #88]	@ 0x58
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004106:	bf00      	nop
 8004108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800412a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d055      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800413c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004140:	d033      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004142:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004146:	d82c      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414c:	d02f      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004152:	d826      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004154:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004158:	d02b      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800415a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800415e:	d820      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004160:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004164:	d012      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004166:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800416a:	d81a      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004174:	d115      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	3308      	adds	r3, #8
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fdee 	bl	8004d60 <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800418a:	e015      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	3328      	adds	r3, #40	@ 0x28
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fe95 	bl	8004ec4 <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041a0:	e00a      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041aa:	bf00      	nop
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041d0:	4a9d      	ldr	r2, [pc, #628]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d6:	e003      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f002 0308 	and.w	r3, r2, #8
 80041ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d01e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420c:	d10c      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	3328      	adds	r3, #40	@ 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fe54 	bl	8004ec4 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004228:	4b87      	ldr	r3, [pc, #540]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004238:	4a83      	ldr	r2, [pc, #524]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423a:	430b      	orrs	r3, r1
 800423c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f002 0310 	and.w	r3, r2, #16
 800424a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004254:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d01e      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004262:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	d10c      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	3328      	adds	r3, #40	@ 0x28
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fe25 	bl	8004ec4 <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004286:	4b70      	ldr	r3, [pc, #448]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004296:	4a6c      	ldr	r2, [pc, #432]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80042a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d03e      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c8:	d022      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80042ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042ce:	d81b      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d8:	d00b      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80042da:	e015      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e0:	3308      	adds	r3, #8
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fd3b 	bl	8004d60 <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042f0:	e00f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	3328      	adds	r3, #40	@ 0x28
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fde2 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800431a:	4b4b      	ldr	r3, [pc, #300]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800432a:	4a47      	ldr	r2, [pc, #284]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004346:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004348:	2300      	movs	r3, #0
 800434a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800434c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d03b      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004362:	d01f      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004364:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004368:	d818      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436e:	d003      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004370:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004374:	d007      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004376:	e011      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004378:	4b33      	ldr	r3, [pc, #204]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	4a32      	ldr	r2, [pc, #200]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004384:	e00f      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	3328      	adds	r3, #40	@ 0x28
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fd98 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800439a:	e004      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80043a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ae:	4b26      	ldr	r3, [pc, #152]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043be:	4a22      	ldr	r2, [pc, #136]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80043c4:	e003      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043da:	673b      	str	r3, [r7, #112]	@ 0x70
 80043dc:	2300      	movs	r3, #0
 80043de:	677b      	str	r3, [r7, #116]	@ 0x74
 80043e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043e4:	460b      	mov	r3, r1
 80043e6:	4313      	orrs	r3, r2
 80043e8:	d034      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f8:	d007      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043fa:	e011      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fc:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	4a11      	ldr	r2, [pc, #68]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004408:	e00e      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	3308      	adds	r3, #8
 8004410:	2102      	movs	r1, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fca4 	bl	8004d60 <RCCEx_PLL2_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10d      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004430:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004434:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443e:	4a02      	ldr	r2, [pc, #8]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004440:	430b      	orrs	r3, r1
 8004442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004462:	2300      	movs	r3, #0
 8004464:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004466:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800446a:	460b      	mov	r3, r1
 800446c:	4313      	orrs	r3, r2
 800446e:	d00c      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	3328      	adds	r3, #40	@ 0x28
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd23 	bl	8004ec4 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004496:	663b      	str	r3, [r7, #96]	@ 0x60
 8004498:	2300      	movs	r3, #0
 800449a:	667b      	str	r3, [r7, #100]	@ 0x64
 800449c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80044a0:	460b      	mov	r3, r1
 80044a2:	4313      	orrs	r3, r2
 80044a4:	d038      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b2:	d018      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80044b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b8:	d811      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044be:	d014      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80044c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c4:	d80b      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d011      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80044ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ce:	d106      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d0:	4bc3      	ldr	r3, [pc, #780]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	4ac2      	ldr	r2, [pc, #776]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044dc:	e008      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044e4:	e004      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044e6:	bf00      	nop
 80044e8:	e002      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ea:	bf00      	nop
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10b      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f8:	4bb9      	ldr	r3, [pc, #740]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004508:	4ab5      	ldr	r2, [pc, #724]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450a:	430b      	orrs	r3, r1
 800450c:	6553      	str	r3, [r2, #84]	@ 0x54
 800450e:	e003      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004524:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004526:	2300      	movs	r3, #0
 8004528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800452a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004534:	4baa      	ldr	r3, [pc, #680]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004538:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004542:	4aa7      	ldr	r2, [pc, #668]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004544:	430b      	orrs	r3, r1
 8004546:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004554:	653b      	str	r3, [r7, #80]	@ 0x50
 8004556:	2300      	movs	r3, #0
 8004558:	657b      	str	r3, [r7, #84]	@ 0x54
 800455a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004564:	4b9e      	ldr	r3, [pc, #632]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004570:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004574:	4a9a      	ldr	r2, [pc, #616]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004576:	430b      	orrs	r3, r1
 8004578:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004588:	2300      	movs	r3, #0
 800458a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800458c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004596:	4b92      	ldr	r3, [pc, #584]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a4:	4a8e      	ldr	r2, [pc, #568]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80045b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b8:	2300      	movs	r3, #0
 80045ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80045bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c6:	4b86      	ldr	r3, [pc, #536]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	4a85      	ldr	r2, [pc, #532]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045d0:	6113      	str	r3, [r2, #16]
 80045d2:	4b83      	ldr	r3, [pc, #524]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d4:	6919      	ldr	r1, [r3, #16]
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045de:	4a80      	ldr	r2, [pc, #512]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045f2:	2300      	movs	r3, #0
 80045f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045fa:	460b      	mov	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004600:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004604:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	4a74      	ldr	r2, [pc, #464]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004610:	430b      	orrs	r3, r1
 8004612:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004620:	633b      	str	r3, [r7, #48]	@ 0x30
 8004622:	2300      	movs	r3, #0
 8004624:	637b      	str	r3, [r7, #52]	@ 0x34
 8004626:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004630:	4b6b      	ldr	r3, [pc, #428]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004634:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004640:	4a67      	ldr	r2, [pc, #412]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004642:	430b      	orrs	r3, r1
 8004644:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	2100      	movs	r1, #0
 8004650:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004658:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800465c:	460b      	mov	r3, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	d011      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004666:	3308      	adds	r3, #8
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fb78 	bl	8004d60 <RCCEx_PLL2_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	2100      	movs	r1, #0
 8004690:	6239      	str	r1, [r7, #32]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
 8004698:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800469c:	460b      	mov	r3, r1
 800469e:	4313      	orrs	r3, r2
 80046a0:	d011      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a6:	3308      	adds	r3, #8
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fb58 	bl	8004d60 <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	2100      	movs	r1, #0
 80046d0:	61b9      	str	r1, [r7, #24]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046dc:	460b      	mov	r3, r1
 80046de:	4313      	orrs	r3, r2
 80046e0:	d011      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	3308      	adds	r3, #8
 80046e8:	2102      	movs	r1, #2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fb38 	bl	8004d60 <RCCEx_PLL2_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	2100      	movs	r1, #0
 8004710:	6139      	str	r1, [r7, #16]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d011      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	3328      	adds	r3, #40	@ 0x28
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fbca 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	2100      	movs	r1, #0
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d011      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3328      	adds	r3, #40	@ 0x28
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fbaa 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	2100      	movs	r1, #0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	e9d7 1200 	ldrd	r1, r2, [r7]
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d011      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	3328      	adds	r3, #40	@ 0x28
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fb8a 	bl	8004ec4 <RCCEx_PLL3_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80047c6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e0:	58024400 	.word	0x58024400

080047e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047e8:	f7fe fd96 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4904      	ldr	r1, [pc, #16]	@ (800480c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	58024400 	.word	0x58024400
 800480c:	0800851c 	.word	0x0800851c

08004810 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	@ 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004818:	4ba1      	ldr	r3, [pc, #644]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004822:	4b9f      	ldr	r3, [pc, #636]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	0b1b      	lsrs	r3, r3, #12
 8004828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800482c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800482e:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800483a:	4b99      	ldr	r3, [pc, #612]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	08db      	lsrs	r3, r3, #3
 8004840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8111 	beq.w	8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f000 8083 	beq.w	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	f200 80a1 	bhi.w	80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d056      	beq.n	8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800487a:	e099      	b.n	80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487c:	4b88      	ldr	r3, [pc, #544]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02d      	beq.n	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004888:	4b85      	ldr	r3, [pc, #532]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	4a84      	ldr	r2, [pc, #528]	@ (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b7b      	ldr	r3, [pc, #492]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048e2:	e087      	b.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	e065      	b.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b59      	ldr	r3, [pc, #356]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	e043      	b.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497e:	4b48      	ldr	r3, [pc, #288]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ae:	e021      	b.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b37      	ldr	r3, [pc, #220]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049f4:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f8:	0a5b      	lsrs	r3, r3, #9
 80049fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1a:	ee17 2a90 	vmov	r2, s15
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a22:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 2a90 	vmov	r2, s15
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a50:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a76:	ee17 2a90 	vmov	r2, s15
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
}
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	@ 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	03d09000 	.word	0x03d09000
 8004aa8:	46000000 	.word	0x46000000
 8004aac:	4c742400 	.word	0x4c742400
 8004ab0:	4a742400 	.word	0x4a742400
 8004ab4:	4bbebc20 	.word	0x4bbebc20

08004ab8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	@ 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004aca:	4b9f      	ldr	r3, [pc, #636]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ace:	0d1b      	lsrs	r3, r3, #20
 8004ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ad6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ae2:	4b99      	ldr	r3, [pc, #612]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	08db      	lsrs	r3, r3, #3
 8004ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8111 	beq.w	8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	f000 8083 	beq.w	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	f200 80a1 	bhi.w	8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d056      	beq.n	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b22:	e099      	b.n	8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b24:	4b88      	ldr	r3, [pc, #544]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02d      	beq.n	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b30:	4b85      	ldr	r3, [pc, #532]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	08db      	lsrs	r3, r3, #3
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	4a84      	ldr	r2, [pc, #528]	@ (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b8a:	e087      	b.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bce:	e065      	b.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be2:	4b59      	ldr	r3, [pc, #356]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c12:	e043      	b.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c26:	4b48      	ldr	r3, [pc, #288]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c56:	e021      	b.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6a:	4b37      	ldr	r3, [pc, #220]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	0a5b      	lsrs	r3, r3, #9
 8004ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc2:	ee17 2a90 	vmov	r2, s15
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cca:	4b1f      	ldr	r3, [pc, #124]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	0c1b      	lsrs	r3, r3, #16
 8004cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf0:	ee17 2a90 	vmov	r2, s15
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cf8:	4b13      	ldr	r3, [pc, #76]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	0e1b      	lsrs	r3, r3, #24
 8004cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1e:	ee17 2a90 	vmov	r2, s15
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d26:	e008      	b.n	8004d3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
}
 8004d3a:	bf00      	nop
 8004d3c:	3724      	adds	r7, #36	@ 0x24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	58024400 	.word	0x58024400
 8004d4c:	03d09000 	.word	0x03d09000
 8004d50:	46000000 	.word	0x46000000
 8004d54:	4c742400 	.word	0x4c742400
 8004d58:	4a742400 	.word	0x4a742400
 8004d5c:	4bbebc20 	.word	0x4bbebc20

08004d60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d6e:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d101      	bne.n	8004d7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e099      	b.n	8004eb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a4e      	ldr	r2, [pc, #312]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004d84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8a:	f7fc fef5 	bl	8001b78 <HAL_GetTick>
 8004d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d92:	f7fc fef1 	bl	8001b78 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e086      	b.n	8004eb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004da4:	4b45      	ldr	r3, [pc, #276]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004db0:	4b42      	ldr	r3, [pc, #264]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	031b      	lsls	r3, r3, #12
 8004dbe:	493f      	ldr	r1, [pc, #252]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	025b      	lsls	r3, r3, #9
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004df4:	4931      	ldr	r1, [pc, #196]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dfa:	4b30      	ldr	r3, [pc, #192]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	492d      	ldr	r1, [pc, #180]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	f023 0220 	bic.w	r2, r3, #32
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	4928      	ldr	r1, [pc, #160]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e1e:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e24:	f023 0310 	bic.w	r3, r3, #16
 8004e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <RCCEx_PLL2_Config+0x160>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	69d2      	ldr	r2, [r2, #28]
 8004e36:	00d2      	lsls	r2, r2, #3
 8004e38:	4920      	ldr	r1, [pc, #128]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4a1e      	ldr	r2, [pc, #120]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e44:	f043 0310 	orr.w	r3, r3, #16
 8004e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e50:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e5c:	e00f      	b.n	8004e7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e64:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4a14      	ldr	r2, [pc, #80]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e70:	e005      	b.n	8004e7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	4a11      	ldr	r2, [pc, #68]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a0e      	ldr	r2, [pc, #56]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fe75 	bl	8001b78 <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e92:	f7fc fe71 	bl	8001b78 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e006      	b.n	8004eb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	ffff0007 	.word	0xffff0007

08004ec4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ed2:	4b53      	ldr	r3, [pc, #332]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d101      	bne.n	8004ee2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e099      	b.n	8005016 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eee:	f7fc fe43 	bl	8001b78 <HAL_GetTick>
 8004ef2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ef4:	e008      	b.n	8004f08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ef6:	f7fc fe3f 	bl	8001b78 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e086      	b.n	8005016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f08:	4b45      	ldr	r3, [pc, #276]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f14:	4b42      	ldr	r3, [pc, #264]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	051b      	lsls	r3, r3, #20
 8004f22:	493f      	ldr	r1, [pc, #252]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	025b      	lsls	r3, r3, #9
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f58:	4931      	ldr	r1, [pc, #196]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f5e:	4b30      	ldr	r3, [pc, #192]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	492d      	ldr	r1, [pc, #180]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f70:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	4928      	ldr	r1, [pc, #160]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f82:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a26      	ldr	r2, [pc, #152]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f92:	4b24      	ldr	r3, [pc, #144]	@ (8005024 <RCCEx_PLL3_Config+0x160>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	69d2      	ldr	r2, [r2, #28]
 8004f9a:	00d2      	lsls	r2, r2, #3
 8004f9c:	4920      	ldr	r1, [pc, #128]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fc0:	e00f      	b.n	8004fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d106      	bne.n	8004fd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fc8:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4a14      	ldr	r2, [pc, #80]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd4:	e005      	b.n	8004fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	4a11      	ldr	r2, [pc, #68]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fee:	f7fc fdc3 	bl	8001b78 <HAL_GetTick>
 8004ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ff4:	e008      	b.n	8005008 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ff6:	f7fc fdbf 	bl	8001b78 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e006      	b.n	8005016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400
 8005024:	ffff0007 	.word	0xffff0007

08005028 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e10f      	b.n	800525a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a87      	ldr	r2, [pc, #540]	@ (8005264 <HAL_SPI_Init+0x23c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00f      	beq.n	800506a <HAL_SPI_Init+0x42>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a86      	ldr	r2, [pc, #536]	@ (8005268 <HAL_SPI_Init+0x240>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00a      	beq.n	800506a <HAL_SPI_Init+0x42>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a84      	ldr	r2, [pc, #528]	@ (800526c <HAL_SPI_Init+0x244>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d005      	beq.n	800506a <HAL_SPI_Init+0x42>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d901      	bls.n	800506a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0f7      	b.n	800525a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fef6 	bl	8005e5c <SPI_GetPacketSize>
 8005070:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7b      	ldr	r2, [pc, #492]	@ (8005264 <HAL_SPI_Init+0x23c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00c      	beq.n	8005096 <HAL_SPI_Init+0x6e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a79      	ldr	r2, [pc, #484]	@ (8005268 <HAL_SPI_Init+0x240>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <HAL_SPI_Init+0x6e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a78      	ldr	r2, [pc, #480]	@ (800526c <HAL_SPI_Init+0x244>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d002      	beq.n	8005096 <HAL_SPI_Init+0x6e>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d811      	bhi.n	80050ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800509a:	4a72      	ldr	r2, [pc, #456]	@ (8005264 <HAL_SPI_Init+0x23c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a70      	ldr	r2, [pc, #448]	@ (8005268 <HAL_SPI_Init+0x240>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_SPI_Init+0x8c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a6f      	ldr	r2, [pc, #444]	@ (800526c <HAL_SPI_Init+0x244>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d104      	bne.n	80050be <HAL_SPI_Init+0x96>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d901      	bls.n	80050be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e0cd      	b.n	800525a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fc f83a 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80050fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005104:	d119      	bne.n	800513a <HAL_SPI_Init+0x112>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510e:	d103      	bne.n	8005118 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10c      	bne.n	800513a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005128:	d107      	bne.n	800513a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005138:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00f      	beq.n	8005166 <HAL_SPI_Init+0x13e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d90b      	bls.n	8005166 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005174:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	431a      	orrs	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005188:	ea42 0103 	orr.w	r1, r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d6:	ea42 0103 	orr.w	r1, r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d113      	bne.n	8005216 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005200:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005214:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40013000 	.word	0x40013000
 8005268:	40003800 	.word	0x40003800
 800526c:	40003c00 	.word	0x40003c00

08005270 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3320      	adds	r3, #32
 8005286:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005288:	f7fc fc76 	bl	8001b78 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b01      	cmp	r3, #1
 8005298:	d001      	beq.n	800529e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
 800529c:	e1d1      	b.n	8005642 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_Transmit+0x3a>
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e1c9      	b.n	8005642 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_SPI_Transmit+0x4c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e1c2      	b.n	8005642 <HAL_SPI_Transmit+0x3d2>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2203      	movs	r2, #3
 80052c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	88fa      	ldrh	r2, [r7, #6]
 80052e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005314:	d108      	bne.n	8005328 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e009      	b.n	800533c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800533a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4b96      	ldr	r3, [pc, #600]	@ (800559c <HAL_SPI_Transmit+0x32c>)
 8005344:	4013      	ands	r3, r2
 8005346:	88f9      	ldrh	r1, [r7, #6]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	430b      	orrs	r3, r1
 800534e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005368:	d107      	bne.n	800537a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b0f      	cmp	r3, #15
 8005380:	d947      	bls.n	8005412 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005382:	e03f      	b.n	8005404 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d114      	bne.n	80053bc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80053ba:	e023      	b.n	8005404 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053bc:	f7fc fbdc 	bl	8001b78 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d803      	bhi.n	80053d4 <HAL_SPI_Transmit+0x164>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Transmit+0x16a>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d114      	bne.n	8005404 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fc70 	bl	8005cc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e11e      	b.n	8005642 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1b9      	bne.n	8005384 <HAL_SPI_Transmit+0x114>
 8005410:	e0f1      	b.n	80055f6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b07      	cmp	r3, #7
 8005418:	f240 80e6 	bls.w	80055e8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800541c:	e05d      	b.n	80054da <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b02      	cmp	r3, #2
 800542a:	d132      	bne.n	8005492 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d918      	bls.n	800546a <HAL_SPI_Transmit+0x1fa>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d014      	beq.n	800546a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b02      	subs	r3, #2
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005468:	e037      	b.n	80054da <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005490:	e023      	b.n	80054da <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005492:	f7fc fb71 	bl	8001b78 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d803      	bhi.n	80054aa <HAL_SPI_Transmit+0x23a>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d102      	bne.n	80054b0 <HAL_SPI_Transmit+0x240>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d114      	bne.n	80054da <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fc05 	bl	8005cc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0b3      	b.n	8005642 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d19b      	bne.n	800541e <HAL_SPI_Transmit+0x1ae>
 80054e6:	e086      	b.n	80055f6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d154      	bne.n	80055a0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d918      	bls.n	8005534 <HAL_SPI_Transmit+0x2c4>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d914      	bls.n	8005534 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b04      	subs	r3, #4
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005532:	e059      	b.n	80055e8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d917      	bls.n	8005570 <HAL_SPI_Transmit+0x300>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b02      	subs	r3, #2
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800556e:	e03b      	b.n	80055e8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3320      	adds	r3, #32
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800559a:	e025      	b.n	80055e8 <HAL_SPI_Transmit+0x378>
 800559c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055a0:	f7fc faea 	bl	8001b78 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d803      	bhi.n	80055b8 <HAL_SPI_Transmit+0x348>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d102      	bne.n	80055be <HAL_SPI_Transmit+0x34e>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d114      	bne.n	80055e8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fb7e 	bl	8005cc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e02c      	b.n	8005642 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f47f af79 	bne.w	80054e8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2200      	movs	r2, #0
 80055fe:	2108      	movs	r1, #8
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 fbfd 	bl	8005e00 <SPI_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb4f 	bl	8005cc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005640:	2300      	movs	r3, #0
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop

0800564c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08e      	sub	sp, #56	@ 0x38
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3320      	adds	r3, #32
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3330      	adds	r3, #48	@ 0x30
 8005668:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	b29b      	uxth	r3, r3
 8005672:	3301      	adds	r3, #1
 8005674:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005676:	f7fc fa7f 	bl	8001b78 <HAL_GetTick>
 800567a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800567c:	887b      	ldrh	r3, [r7, #2]
 800567e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005680:	887b      	ldrh	r3, [r7, #2]
 8005682:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d001      	beq.n	8005694 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
 8005692:	e310      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x5a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x5a>
 80056a0:	887b      	ldrh	r3, [r7, #2]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e305      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x6c>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e2fe      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x66a>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2205      	movs	r2, #5
 80056c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	887a      	ldrh	r2, [r7, #2]
 80056da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	887a      	ldrh	r2, [r7, #2]
 80056e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	887a      	ldrh	r2, [r7, #2]
 80056f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	887a      	ldrh	r2, [r7, #2]
 80056f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005716:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a70      	ldr	r2, [pc, #448]	@ (80058e0 <HAL_SPI_TransmitReceive+0x294>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_SPI_TransmitReceive+0xea>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a6f      	ldr	r2, [pc, #444]	@ (80058e4 <HAL_SPI_TransmitReceive+0x298>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_SPI_TransmitReceive+0xea>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a6d      	ldr	r2, [pc, #436]	@ (80058e8 <HAL_SPI_TransmitReceive+0x29c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d102      	bne.n	800573c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005736:	2310      	movs	r3, #16
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573a:	e001      	b.n	8005740 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800573c:	2308      	movs	r3, #8
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	4b69      	ldr	r3, [pc, #420]	@ (80058ec <HAL_SPI_TransmitReceive+0x2a0>)
 8005748:	4013      	ands	r3, r2
 800574a:	8879      	ldrh	r1, [r7, #2]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	430b      	orrs	r3, r1
 8005752:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800576c:	d107      	bne.n	800577e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800577c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	f240 80a2 	bls.w	80058cc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578a:	089b      	lsrs	r3, r3, #2
 800578c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800578e:	e094      	b.n	80058ba <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d120      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x194>
 800579e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01d      	beq.n	80057e0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80057a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057a6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80057a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d217      	bcs.n	80057e0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057de:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80057e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d065      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d118      	bne.n	800582e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005804:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005806:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800580c:	1d1a      	adds	r2, r3, #4
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800582a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800582c:	e045      	b.n	80058ba <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800582e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005830:	8bfb      	ldrh	r3, [r7, #30]
 8005832:	429a      	cmp	r2, r3
 8005834:	d21d      	bcs.n	8005872 <HAL_SPI_TransmitReceive+0x226>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d018      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005848:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800584a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800586e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005870:	e023      	b.n	80058ba <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005872:	f7fc f981 	bl	8001b78 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800587e:	429a      	cmp	r2, r3
 8005880:	d803      	bhi.n	800588a <HAL_SPI_TransmitReceive+0x23e>
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d102      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x244>
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d114      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fa15 	bl	8005cc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800589c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e1fd      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f af67 	bne.w	8005790 <HAL_SPI_TransmitReceive+0x144>
 80058c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f af63 	bne.w	8005790 <HAL_SPI_TransmitReceive+0x144>
 80058ca:	e1ce      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b07      	cmp	r3, #7
 80058d2:	f240 81c2 	bls.w	8005c5a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80058d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058dc:	e0c9      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x426>
 80058de:	bf00      	nop
 80058e0:	40013000 	.word	0x40013000
 80058e4:	40003800 	.word	0x40003800
 80058e8:	40003c00 	.word	0x40003c00
 80058ec:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d11f      	bne.n	800593e <HAL_SPI_TransmitReceive+0x2f2>
 80058fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01c      	beq.n	800593e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005904:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005906:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800590c:	429a      	cmp	r2, r3
 800590e:	d216      	bcs.n	800593e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591e:	1c9a      	adds	r2, r3, #2
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800593c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005946:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8092 	beq.w	8005a72 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d118      	bne.n	800598e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	b292      	uxth	r2, r2
 8005966:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800596c:	1c9a      	adds	r2, r3, #2
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800598a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800598c:	e071      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800598e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005990:	8bfb      	ldrh	r3, [r7, #30]
 8005992:	429a      	cmp	r2, r3
 8005994:	d228      	bcs.n	80059e8 <HAL_SPI_TransmitReceive+0x39c>
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d023      	beq.n	80059e8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	b292      	uxth	r2, r2
 80059aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	8812      	ldrh	r2, [r2, #0]
 80059be:	b292      	uxth	r2, r2
 80059c0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b02      	subs	r3, #2
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059e4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059e6:	e044      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80059e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d11d      	bne.n	8005a2a <HAL_SPI_TransmitReceive+0x3de>
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d018      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	8812      	ldrh	r2, [r2, #0]
 8005a00:	b292      	uxth	r2, r2
 8005a02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a28:	e023      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2a:	f7fc f8a5 	bl	8001b78 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d803      	bhi.n	8005a42 <HAL_SPI_TransmitReceive+0x3f6>
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d102      	bne.n	8005a48 <HAL_SPI_TransmitReceive+0x3fc>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d114      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f939 	bl	8005cc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e121      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f47f af3b 	bne.w	80058f0 <HAL_SPI_TransmitReceive+0x2a4>
 8005a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f47f af37 	bne.w	80058f0 <HAL_SPI_TransmitReceive+0x2a4>
 8005a82:	e0f2      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d121      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x48a>
 8005a92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01e      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005a98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a9a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d218      	bcs.n	8005ad6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3320      	adds	r3, #32
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ad4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005ade:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80ba 	beq.w	8005c5a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d11b      	bne.n	8005b2c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b28:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b2a:	e096      	b.n	8005c5a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005b2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b2e:	8bfb      	ldrh	r3, [r7, #30]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d24a      	bcs.n	8005bca <HAL_SPI_TransmitReceive+0x57e>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d045      	beq.n	8005bca <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b4a:	7812      	ldrb	r2, [r2, #0]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b04      	subs	r3, #4
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005bc8:	e047      	b.n	8005c5a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005bca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d820      	bhi.n	8005c12 <HAL_SPI_TransmitReceive+0x5c6>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01b      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c10:	e023      	b.n	8005c5a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c12:	f7fb ffb1 	bl	8001b78 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d803      	bhi.n	8005c2a <HAL_SPI_TransmitReceive+0x5de>
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d102      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x5e4>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d114      	bne.n	8005c5a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f845 	bl	8005cc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e02d      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f47f af11 	bne.w	8005a84 <HAL_SPI_TransmitReceive+0x438>
 8005c62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f47f af0d 	bne.w	8005a84 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	2200      	movs	r2, #0
 8005c72:	2108      	movs	r1, #8
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f8c3 	bl	8005e00 <SPI_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f815 	bl	8005cc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3730      	adds	r7, #48	@ 0x30
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0208 	orr.w	r2, r2, #8
 8005cde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0210 	orr.w	r2, r2, #16
 8005cee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6919      	ldr	r1, [r3, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005dfc <SPI_CloseTransfer+0x13c>)
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005d1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d014      	beq.n	8005d56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00f      	beq.n	8005d56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0220 	orr.w	r2, r2, #32
 8005d54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d014      	beq.n	8005d8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00f      	beq.n	8005d8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d72:	f043 0204 	orr.w	r2, r3, #4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00f      	beq.n	8005db6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d9c:	f043 0201 	orr.w	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dc6:	f043 0208 	orr.w	r2, r3, #8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dde:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	fffffc90 	.word	0xfffffc90

08005e00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005e10:	e010      	b.n	8005e34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e12:	f7fb feb1 	bl	8001b78 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d803      	bhi.n	8005e2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d102      	bne.n	8005e30 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e00f      	b.n	8005e54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d0df      	beq.n	8005e12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	3307      	adds	r3, #7
 8005e7a:	08db      	lsrs	r3, r3, #3
 8005e7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e042      	b.n	8005f2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f83b 	bl	8005f32 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	@ 0x24
 8005ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fe29 	bl	8006b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f8be 	bl	8006064 <UART_SetConfig>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e01b      	b.n	8005f2a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fea8 	bl	8006c78 <UART_CheckIdleState>
 8005f28:	4603      	mov	r3, r0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b08a      	sub	sp, #40	@ 0x28
 8005f4a:	af02      	add	r7, sp, #8
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d17b      	bne.n	8006058 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_UART_Transmit+0x26>
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e074      	b.n	800605a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2221      	movs	r2, #33	@ 0x21
 8005f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f80:	f7fb fdfa 	bl	8001b78 <HAL_GetTick>
 8005f84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9e:	d108      	bne.n	8005fb2 <HAL_UART_Transmit+0x6c>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	e003      	b.n	8005fba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fba:	e030      	b.n	800601e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2180      	movs	r1, #128	@ 0x80
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 ff00 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d005      	beq.n	8005fde <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e03d      	b.n	800605a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10b      	bne.n	8005ffc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e007      	b.n	800600c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	3301      	adds	r3, #1
 800600a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1c8      	bne.n	8005fbc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	2140      	movs	r1, #64	@ 0x40
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fec9 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e006      	b.n	800605a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006068:	b092      	sub	sp, #72	@ 0x48
 800606a:	af00      	add	r7, sp, #0
 800606c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	431a      	orrs	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	431a      	orrs	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4313      	orrs	r3, r2
 800608a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4bbe      	ldr	r3, [pc, #760]	@ (800638c <UART_SetConfig+0x328>)
 8006094:	4013      	ands	r3, r2
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800609c:	430b      	orrs	r3, r1
 800609e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4ab3      	ldr	r2, [pc, #716]	@ (8006390 <UART_SetConfig+0x32c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060cc:	4313      	orrs	r3, r2
 80060ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	4baf      	ldr	r3, [pc, #700]	@ (8006394 <UART_SetConfig+0x330>)
 80060d8:	4013      	ands	r3, r2
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060e0:	430b      	orrs	r3, r1
 80060e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	f023 010f 	bic.w	r1, r3, #15
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4aa6      	ldr	r2, [pc, #664]	@ (8006398 <UART_SetConfig+0x334>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d177      	bne.n	80061f4 <UART_SetConfig+0x190>
 8006104:	4ba5      	ldr	r3, [pc, #660]	@ (800639c <UART_SetConfig+0x338>)
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800610c:	2b28      	cmp	r3, #40	@ 0x28
 800610e:	d86d      	bhi.n	80061ec <UART_SetConfig+0x188>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0xb4>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	080061bd 	.word	0x080061bd
 800611c:	080061ed 	.word	0x080061ed
 8006120:	080061ed 	.word	0x080061ed
 8006124:	080061ed 	.word	0x080061ed
 8006128:	080061ed 	.word	0x080061ed
 800612c:	080061ed 	.word	0x080061ed
 8006130:	080061ed 	.word	0x080061ed
 8006134:	080061ed 	.word	0x080061ed
 8006138:	080061c5 	.word	0x080061c5
 800613c:	080061ed 	.word	0x080061ed
 8006140:	080061ed 	.word	0x080061ed
 8006144:	080061ed 	.word	0x080061ed
 8006148:	080061ed 	.word	0x080061ed
 800614c:	080061ed 	.word	0x080061ed
 8006150:	080061ed 	.word	0x080061ed
 8006154:	080061ed 	.word	0x080061ed
 8006158:	080061cd 	.word	0x080061cd
 800615c:	080061ed 	.word	0x080061ed
 8006160:	080061ed 	.word	0x080061ed
 8006164:	080061ed 	.word	0x080061ed
 8006168:	080061ed 	.word	0x080061ed
 800616c:	080061ed 	.word	0x080061ed
 8006170:	080061ed 	.word	0x080061ed
 8006174:	080061ed 	.word	0x080061ed
 8006178:	080061d5 	.word	0x080061d5
 800617c:	080061ed 	.word	0x080061ed
 8006180:	080061ed 	.word	0x080061ed
 8006184:	080061ed 	.word	0x080061ed
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080061ed 	.word	0x080061ed
 8006190:	080061ed 	.word	0x080061ed
 8006194:	080061ed 	.word	0x080061ed
 8006198:	080061dd 	.word	0x080061dd
 800619c:	080061ed 	.word	0x080061ed
 80061a0:	080061ed 	.word	0x080061ed
 80061a4:	080061ed 	.word	0x080061ed
 80061a8:	080061ed 	.word	0x080061ed
 80061ac:	080061ed 	.word	0x080061ed
 80061b0:	080061ed 	.word	0x080061ed
 80061b4:	080061ed 	.word	0x080061ed
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e222      	b.n	800660a <UART_SetConfig+0x5a6>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e21e      	b.n	800660a <UART_SetConfig+0x5a6>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e21a      	b.n	800660a <UART_SetConfig+0x5a6>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e216      	b.n	800660a <UART_SetConfig+0x5a6>
 80061dc:	2320      	movs	r3, #32
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e212      	b.n	800660a <UART_SetConfig+0x5a6>
 80061e4:	2340      	movs	r3, #64	@ 0x40
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e20e      	b.n	800660a <UART_SetConfig+0x5a6>
 80061ec:	2380      	movs	r3, #128	@ 0x80
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e20a      	b.n	800660a <UART_SetConfig+0x5a6>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a69      	ldr	r2, [pc, #420]	@ (80063a0 <UART_SetConfig+0x33c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d130      	bne.n	8006260 <UART_SetConfig+0x1fc>
 80061fe:	4b67      	ldr	r3, [pc, #412]	@ (800639c <UART_SetConfig+0x338>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b05      	cmp	r3, #5
 8006208:	d826      	bhi.n	8006258 <UART_SetConfig+0x1f4>
 800620a:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <UART_SetConfig+0x1ac>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006229 	.word	0x08006229
 8006214:	08006231 	.word	0x08006231
 8006218:	08006239 	.word	0x08006239
 800621c:	08006241 	.word	0x08006241
 8006220:	08006249 	.word	0x08006249
 8006224:	08006251 	.word	0x08006251
 8006228:	2300      	movs	r3, #0
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e1ec      	b.n	800660a <UART_SetConfig+0x5a6>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e1e8      	b.n	800660a <UART_SetConfig+0x5a6>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e1e4      	b.n	800660a <UART_SetConfig+0x5a6>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e1e0      	b.n	800660a <UART_SetConfig+0x5a6>
 8006248:	2320      	movs	r3, #32
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e1dc      	b.n	800660a <UART_SetConfig+0x5a6>
 8006250:	2340      	movs	r3, #64	@ 0x40
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e1d8      	b.n	800660a <UART_SetConfig+0x5a6>
 8006258:	2380      	movs	r3, #128	@ 0x80
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e1d4      	b.n	800660a <UART_SetConfig+0x5a6>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a4f      	ldr	r2, [pc, #316]	@ (80063a4 <UART_SetConfig+0x340>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d130      	bne.n	80062cc <UART_SetConfig+0x268>
 800626a:	4b4c      	ldr	r3, [pc, #304]	@ (800639c <UART_SetConfig+0x338>)
 800626c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	2b05      	cmp	r3, #5
 8006274:	d826      	bhi.n	80062c4 <UART_SetConfig+0x260>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0x218>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	08006295 	.word	0x08006295
 8006280:	0800629d 	.word	0x0800629d
 8006284:	080062a5 	.word	0x080062a5
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062bd 	.word	0x080062bd
 8006294:	2300      	movs	r3, #0
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e1b6      	b.n	800660a <UART_SetConfig+0x5a6>
 800629c:	2304      	movs	r3, #4
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e1b2      	b.n	800660a <UART_SetConfig+0x5a6>
 80062a4:	2308      	movs	r3, #8
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e1ae      	b.n	800660a <UART_SetConfig+0x5a6>
 80062ac:	2310      	movs	r3, #16
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e1aa      	b.n	800660a <UART_SetConfig+0x5a6>
 80062b4:	2320      	movs	r3, #32
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e1a6      	b.n	800660a <UART_SetConfig+0x5a6>
 80062bc:	2340      	movs	r3, #64	@ 0x40
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e1a2      	b.n	800660a <UART_SetConfig+0x5a6>
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e19e      	b.n	800660a <UART_SetConfig+0x5a6>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a35      	ldr	r2, [pc, #212]	@ (80063a8 <UART_SetConfig+0x344>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d130      	bne.n	8006338 <UART_SetConfig+0x2d4>
 80062d6:	4b31      	ldr	r3, [pc, #196]	@ (800639c <UART_SetConfig+0x338>)
 80062d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d826      	bhi.n	8006330 <UART_SetConfig+0x2cc>
 80062e2:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <UART_SetConfig+0x284>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	08006301 	.word	0x08006301
 80062ec:	08006309 	.word	0x08006309
 80062f0:	08006311 	.word	0x08006311
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	2300      	movs	r3, #0
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e180      	b.n	800660a <UART_SetConfig+0x5a6>
 8006308:	2304      	movs	r3, #4
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630e:	e17c      	b.n	800660a <UART_SetConfig+0x5a6>
 8006310:	2308      	movs	r3, #8
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006316:	e178      	b.n	800660a <UART_SetConfig+0x5a6>
 8006318:	2310      	movs	r3, #16
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e174      	b.n	800660a <UART_SetConfig+0x5a6>
 8006320:	2320      	movs	r3, #32
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e170      	b.n	800660a <UART_SetConfig+0x5a6>
 8006328:	2340      	movs	r3, #64	@ 0x40
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e16c      	b.n	800660a <UART_SetConfig+0x5a6>
 8006330:	2380      	movs	r3, #128	@ 0x80
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e168      	b.n	800660a <UART_SetConfig+0x5a6>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1b      	ldr	r2, [pc, #108]	@ (80063ac <UART_SetConfig+0x348>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d142      	bne.n	80063c8 <UART_SetConfig+0x364>
 8006342:	4b16      	ldr	r3, [pc, #88]	@ (800639c <UART_SetConfig+0x338>)
 8006344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b05      	cmp	r3, #5
 800634c:	d838      	bhi.n	80063c0 <UART_SetConfig+0x35c>
 800634e:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <UART_SetConfig+0x2f0>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	0800636d 	.word	0x0800636d
 8006358:	08006375 	.word	0x08006375
 800635c:	0800637d 	.word	0x0800637d
 8006360:	08006385 	.word	0x08006385
 8006364:	080063b1 	.word	0x080063b1
 8006368:	080063b9 	.word	0x080063b9
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006372:	e14a      	b.n	800660a <UART_SetConfig+0x5a6>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800637a:	e146      	b.n	800660a <UART_SetConfig+0x5a6>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006382:	e142      	b.n	800660a <UART_SetConfig+0x5a6>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638a:	e13e      	b.n	800660a <UART_SetConfig+0x5a6>
 800638c:	cfff69f3 	.word	0xcfff69f3
 8006390:	58000c00 	.word	0x58000c00
 8006394:	11fff4ff 	.word	0x11fff4ff
 8006398:	40011000 	.word	0x40011000
 800639c:	58024400 	.word	0x58024400
 80063a0:	40004400 	.word	0x40004400
 80063a4:	40004800 	.word	0x40004800
 80063a8:	40004c00 	.word	0x40004c00
 80063ac:	40005000 	.word	0x40005000
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b6:	e128      	b.n	800660a <UART_SetConfig+0x5a6>
 80063b8:	2340      	movs	r3, #64	@ 0x40
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063be:	e124      	b.n	800660a <UART_SetConfig+0x5a6>
 80063c0:	2380      	movs	r3, #128	@ 0x80
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c6:	e120      	b.n	800660a <UART_SetConfig+0x5a6>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4acb      	ldr	r2, [pc, #812]	@ (80066fc <UART_SetConfig+0x698>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d176      	bne.n	80064c0 <UART_SetConfig+0x45c>
 80063d2:	4bcb      	ldr	r3, [pc, #812]	@ (8006700 <UART_SetConfig+0x69c>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063da:	2b28      	cmp	r3, #40	@ 0x28
 80063dc:	d86c      	bhi.n	80064b8 <UART_SetConfig+0x454>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <UART_SetConfig+0x380>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006489 	.word	0x08006489
 80063e8:	080064b9 	.word	0x080064b9
 80063ec:	080064b9 	.word	0x080064b9
 80063f0:	080064b9 	.word	0x080064b9
 80063f4:	080064b9 	.word	0x080064b9
 80063f8:	080064b9 	.word	0x080064b9
 80063fc:	080064b9 	.word	0x080064b9
 8006400:	080064b9 	.word	0x080064b9
 8006404:	08006491 	.word	0x08006491
 8006408:	080064b9 	.word	0x080064b9
 800640c:	080064b9 	.word	0x080064b9
 8006410:	080064b9 	.word	0x080064b9
 8006414:	080064b9 	.word	0x080064b9
 8006418:	080064b9 	.word	0x080064b9
 800641c:	080064b9 	.word	0x080064b9
 8006420:	080064b9 	.word	0x080064b9
 8006424:	08006499 	.word	0x08006499
 8006428:	080064b9 	.word	0x080064b9
 800642c:	080064b9 	.word	0x080064b9
 8006430:	080064b9 	.word	0x080064b9
 8006434:	080064b9 	.word	0x080064b9
 8006438:	080064b9 	.word	0x080064b9
 800643c:	080064b9 	.word	0x080064b9
 8006440:	080064b9 	.word	0x080064b9
 8006444:	080064a1 	.word	0x080064a1
 8006448:	080064b9 	.word	0x080064b9
 800644c:	080064b9 	.word	0x080064b9
 8006450:	080064b9 	.word	0x080064b9
 8006454:	080064b9 	.word	0x080064b9
 8006458:	080064b9 	.word	0x080064b9
 800645c:	080064b9 	.word	0x080064b9
 8006460:	080064b9 	.word	0x080064b9
 8006464:	080064a9 	.word	0x080064a9
 8006468:	080064b9 	.word	0x080064b9
 800646c:	080064b9 	.word	0x080064b9
 8006470:	080064b9 	.word	0x080064b9
 8006474:	080064b9 	.word	0x080064b9
 8006478:	080064b9 	.word	0x080064b9
 800647c:	080064b9 	.word	0x080064b9
 8006480:	080064b9 	.word	0x080064b9
 8006484:	080064b1 	.word	0x080064b1
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e0bc      	b.n	800660a <UART_SetConfig+0x5a6>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e0b8      	b.n	800660a <UART_SetConfig+0x5a6>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649e:	e0b4      	b.n	800660a <UART_SetConfig+0x5a6>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a6:	e0b0      	b.n	800660a <UART_SetConfig+0x5a6>
 80064a8:	2320      	movs	r3, #32
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ae:	e0ac      	b.n	800660a <UART_SetConfig+0x5a6>
 80064b0:	2340      	movs	r3, #64	@ 0x40
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b6:	e0a8      	b.n	800660a <UART_SetConfig+0x5a6>
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064be:	e0a4      	b.n	800660a <UART_SetConfig+0x5a6>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a8f      	ldr	r2, [pc, #572]	@ (8006704 <UART_SetConfig+0x6a0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d130      	bne.n	800652c <UART_SetConfig+0x4c8>
 80064ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006700 <UART_SetConfig+0x69c>)
 80064cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	d826      	bhi.n	8006524 <UART_SetConfig+0x4c0>
 80064d6:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <UART_SetConfig+0x478>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064f5 	.word	0x080064f5
 80064e0:	080064fd 	.word	0x080064fd
 80064e4:	08006505 	.word	0x08006505
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e086      	b.n	800660a <UART_SetConfig+0x5a6>
 80064fc:	2304      	movs	r3, #4
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e082      	b.n	800660a <UART_SetConfig+0x5a6>
 8006504:	2308      	movs	r3, #8
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e07e      	b.n	800660a <UART_SetConfig+0x5a6>
 800650c:	2310      	movs	r3, #16
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e07a      	b.n	800660a <UART_SetConfig+0x5a6>
 8006514:	2320      	movs	r3, #32
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e076      	b.n	800660a <UART_SetConfig+0x5a6>
 800651c:	2340      	movs	r3, #64	@ 0x40
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e072      	b.n	800660a <UART_SetConfig+0x5a6>
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e06e      	b.n	800660a <UART_SetConfig+0x5a6>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a75      	ldr	r2, [pc, #468]	@ (8006708 <UART_SetConfig+0x6a4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d130      	bne.n	8006598 <UART_SetConfig+0x534>
 8006536:	4b72      	ldr	r3, [pc, #456]	@ (8006700 <UART_SetConfig+0x69c>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b05      	cmp	r3, #5
 8006540:	d826      	bhi.n	8006590 <UART_SetConfig+0x52c>
 8006542:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0x4e4>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006561 	.word	0x08006561
 800654c:	08006569 	.word	0x08006569
 8006550:	08006571 	.word	0x08006571
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e050      	b.n	800660a <UART_SetConfig+0x5a6>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e04c      	b.n	800660a <UART_SetConfig+0x5a6>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006576:	e048      	b.n	800660a <UART_SetConfig+0x5a6>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657e:	e044      	b.n	800660a <UART_SetConfig+0x5a6>
 8006580:	2320      	movs	r3, #32
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e040      	b.n	800660a <UART_SetConfig+0x5a6>
 8006588:	2340      	movs	r3, #64	@ 0x40
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e03c      	b.n	800660a <UART_SetConfig+0x5a6>
 8006590:	2380      	movs	r3, #128	@ 0x80
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e038      	b.n	800660a <UART_SetConfig+0x5a6>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a5b      	ldr	r2, [pc, #364]	@ (800670c <UART_SetConfig+0x6a8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d130      	bne.n	8006604 <UART_SetConfig+0x5a0>
 80065a2:	4b57      	ldr	r3, [pc, #348]	@ (8006700 <UART_SetConfig+0x69c>)
 80065a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d826      	bhi.n	80065fc <UART_SetConfig+0x598>
 80065ae:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <UART_SetConfig+0x550>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	080065ed 	.word	0x080065ed
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	2302      	movs	r3, #2
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e01a      	b.n	800660a <UART_SetConfig+0x5a6>
 80065d4:	2304      	movs	r3, #4
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065da:	e016      	b.n	800660a <UART_SetConfig+0x5a6>
 80065dc:	2308      	movs	r3, #8
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e2:	e012      	b.n	800660a <UART_SetConfig+0x5a6>
 80065e4:	2310      	movs	r3, #16
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e00e      	b.n	800660a <UART_SetConfig+0x5a6>
 80065ec:	2320      	movs	r3, #32
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e00a      	b.n	800660a <UART_SetConfig+0x5a6>
 80065f4:	2340      	movs	r3, #64	@ 0x40
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e006      	b.n	800660a <UART_SetConfig+0x5a6>
 80065fc:	2380      	movs	r3, #128	@ 0x80
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e002      	b.n	800660a <UART_SetConfig+0x5a6>
 8006604:	2380      	movs	r3, #128	@ 0x80
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3f      	ldr	r2, [pc, #252]	@ (800670c <UART_SetConfig+0x6a8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	f040 80f8 	bne.w	8006806 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006616:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800661a:	2b20      	cmp	r3, #32
 800661c:	dc46      	bgt.n	80066ac <UART_SetConfig+0x648>
 800661e:	2b02      	cmp	r3, #2
 8006620:	f2c0 8082 	blt.w	8006728 <UART_SetConfig+0x6c4>
 8006624:	3b02      	subs	r3, #2
 8006626:	2b1e      	cmp	r3, #30
 8006628:	d87e      	bhi.n	8006728 <UART_SetConfig+0x6c4>
 800662a:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <UART_SetConfig+0x5cc>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	080066b3 	.word	0x080066b3
 8006634:	08006729 	.word	0x08006729
 8006638:	080066bb 	.word	0x080066bb
 800663c:	08006729 	.word	0x08006729
 8006640:	08006729 	.word	0x08006729
 8006644:	08006729 	.word	0x08006729
 8006648:	080066cb 	.word	0x080066cb
 800664c:	08006729 	.word	0x08006729
 8006650:	08006729 	.word	0x08006729
 8006654:	08006729 	.word	0x08006729
 8006658:	08006729 	.word	0x08006729
 800665c:	08006729 	.word	0x08006729
 8006660:	08006729 	.word	0x08006729
 8006664:	08006729 	.word	0x08006729
 8006668:	080066db 	.word	0x080066db
 800666c:	08006729 	.word	0x08006729
 8006670:	08006729 	.word	0x08006729
 8006674:	08006729 	.word	0x08006729
 8006678:	08006729 	.word	0x08006729
 800667c:	08006729 	.word	0x08006729
 8006680:	08006729 	.word	0x08006729
 8006684:	08006729 	.word	0x08006729
 8006688:	08006729 	.word	0x08006729
 800668c:	08006729 	.word	0x08006729
 8006690:	08006729 	.word	0x08006729
 8006694:	08006729 	.word	0x08006729
 8006698:	08006729 	.word	0x08006729
 800669c:	08006729 	.word	0x08006729
 80066a0:	08006729 	.word	0x08006729
 80066a4:	08006729 	.word	0x08006729
 80066a8:	0800671b 	.word	0x0800671b
 80066ac:	2b40      	cmp	r3, #64	@ 0x40
 80066ae:	d037      	beq.n	8006720 <UART_SetConfig+0x6bc>
 80066b0:	e03a      	b.n	8006728 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80066b2:	f7fe f897 	bl	80047e4 <HAL_RCCEx_GetD3PCLK1Freq>
 80066b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066b8:	e03c      	b.n	8006734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe f8a6 	bl	8004810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c8:	e034      	b.n	8006734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ca:	f107 0318 	add.w	r3, r7, #24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe f9f2 	bl	8004ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d8:	e02c      	b.n	8006734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066da:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <UART_SetConfig+0x69c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066e6:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <UART_SetConfig+0x69c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	4a07      	ldr	r2, [pc, #28]	@ (8006710 <UART_SetConfig+0x6ac>)
 80066f2:	fa22 f303 	lsr.w	r3, r2, r3
 80066f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066f8:	e01c      	b.n	8006734 <UART_SetConfig+0x6d0>
 80066fa:	bf00      	nop
 80066fc:	40011400 	.word	0x40011400
 8006700:	58024400 	.word	0x58024400
 8006704:	40007800 	.word	0x40007800
 8006708:	40007c00 	.word	0x40007c00
 800670c:	58000c00 	.word	0x58000c00
 8006710:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006714:	4b9d      	ldr	r3, [pc, #628]	@ (800698c <UART_SetConfig+0x928>)
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006718:	e00c      	b.n	8006734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800671a:	4b9d      	ldr	r3, [pc, #628]	@ (8006990 <UART_SetConfig+0x92c>)
 800671c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671e:	e009      	b.n	8006734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006726:	e005      	b.n	8006734 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006732:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 81de 	beq.w	8006af8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	4a94      	ldr	r2, [pc, #592]	@ (8006994 <UART_SetConfig+0x930>)
 8006742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006746:	461a      	mov	r2, r3
 8006748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800674a:	fbb3 f3f2 	udiv	r3, r3, r2
 800674e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4413      	add	r3, r2
 800675a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800675c:	429a      	cmp	r2, r3
 800675e:	d305      	bcc.n	800676c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006768:	429a      	cmp	r2, r3
 800676a:	d903      	bls.n	8006774 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006772:	e1c1      	b.n	8006af8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006776:	2200      	movs	r2, #0
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	60fa      	str	r2, [r7, #12]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006780:	4a84      	ldr	r2, [pc, #528]	@ (8006994 <UART_SetConfig+0x930>)
 8006782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006786:	b29b      	uxth	r3, r3
 8006788:	2200      	movs	r2, #0
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006796:	f7f9 fdf3 	bl	8000380 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4610      	mov	r0, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	020b      	lsls	r3, r1, #8
 80067ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067b0:	0202      	lsls	r2, r0, #8
 80067b2:	6979      	ldr	r1, [r7, #20]
 80067b4:	6849      	ldr	r1, [r1, #4]
 80067b6:	0849      	lsrs	r1, r1, #1
 80067b8:	2000      	movs	r0, #0
 80067ba:	460c      	mov	r4, r1
 80067bc:	4605      	mov	r5, r0
 80067be:	eb12 0804 	adds.w	r8, r2, r4
 80067c2:	eb43 0905 	adc.w	r9, r3, r5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	469a      	mov	sl, r3
 80067ce:	4693      	mov	fp, r2
 80067d0:	4652      	mov	r2, sl
 80067d2:	465b      	mov	r3, fp
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	f7f9 fdd2 	bl	8000380 <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4613      	mov	r3, r2
 80067e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ea:	d308      	bcc.n	80067fe <UART_SetConfig+0x79a>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067f2:	d204      	bcs.n	80067fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067fa:	60da      	str	r2, [r3, #12]
 80067fc:	e17c      	b.n	8006af8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006804:	e178      	b.n	8006af8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800680e:	f040 80c5 	bne.w	800699c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006812:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006816:	2b20      	cmp	r3, #32
 8006818:	dc48      	bgt.n	80068ac <UART_SetConfig+0x848>
 800681a:	2b00      	cmp	r3, #0
 800681c:	db7b      	blt.n	8006916 <UART_SetConfig+0x8b2>
 800681e:	2b20      	cmp	r3, #32
 8006820:	d879      	bhi.n	8006916 <UART_SetConfig+0x8b2>
 8006822:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <UART_SetConfig+0x7c4>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	080068b3 	.word	0x080068b3
 800682c:	080068bb 	.word	0x080068bb
 8006830:	08006917 	.word	0x08006917
 8006834:	08006917 	.word	0x08006917
 8006838:	080068c3 	.word	0x080068c3
 800683c:	08006917 	.word	0x08006917
 8006840:	08006917 	.word	0x08006917
 8006844:	08006917 	.word	0x08006917
 8006848:	080068d3 	.word	0x080068d3
 800684c:	08006917 	.word	0x08006917
 8006850:	08006917 	.word	0x08006917
 8006854:	08006917 	.word	0x08006917
 8006858:	08006917 	.word	0x08006917
 800685c:	08006917 	.word	0x08006917
 8006860:	08006917 	.word	0x08006917
 8006864:	08006917 	.word	0x08006917
 8006868:	080068e3 	.word	0x080068e3
 800686c:	08006917 	.word	0x08006917
 8006870:	08006917 	.word	0x08006917
 8006874:	08006917 	.word	0x08006917
 8006878:	08006917 	.word	0x08006917
 800687c:	08006917 	.word	0x08006917
 8006880:	08006917 	.word	0x08006917
 8006884:	08006917 	.word	0x08006917
 8006888:	08006917 	.word	0x08006917
 800688c:	08006917 	.word	0x08006917
 8006890:	08006917 	.word	0x08006917
 8006894:	08006917 	.word	0x08006917
 8006898:	08006917 	.word	0x08006917
 800689c:	08006917 	.word	0x08006917
 80068a0:	08006917 	.word	0x08006917
 80068a4:	08006917 	.word	0x08006917
 80068a8:	08006909 	.word	0x08006909
 80068ac:	2b40      	cmp	r3, #64	@ 0x40
 80068ae:	d02e      	beq.n	800690e <UART_SetConfig+0x8aa>
 80068b0:	e031      	b.n	8006916 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b2:	f7fc fd61 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 80068b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068b8:	e033      	b.n	8006922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ba:	f7fc fd73 	bl	80033a4 <HAL_RCC_GetPCLK2Freq>
 80068be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068c0:	e02f      	b.n	8006922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd ffa2 	bl	8004810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068d0:	e027      	b.n	8006922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d2:	f107 0318 	add.w	r3, r7, #24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe f8ee 	bl	8004ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e0:	e01f      	b.n	8006922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006998 <UART_SetConfig+0x934>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006998 <UART_SetConfig+0x934>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	08db      	lsrs	r3, r3, #3
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	4a24      	ldr	r2, [pc, #144]	@ (800698c <UART_SetConfig+0x928>)
 80068fa:	fa22 f303 	lsr.w	r3, r2, r3
 80068fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006900:	e00f      	b.n	8006922 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006902:	4b22      	ldr	r3, [pc, #136]	@ (800698c <UART_SetConfig+0x928>)
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006906:	e00c      	b.n	8006922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006908:	4b21      	ldr	r3, [pc, #132]	@ (8006990 <UART_SetConfig+0x92c>)
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690c:	e009      	b.n	8006922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006914:	e005      	b.n	8006922 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80e7 	beq.w	8006af8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692e:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <UART_SetConfig+0x930>)
 8006930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006934:	461a      	mov	r2, r3
 8006936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006938:	fbb3 f3f2 	udiv	r3, r3, r2
 800693c:	005a      	lsls	r2, r3, #1
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	441a      	add	r2, r3
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	2b0f      	cmp	r3, #15
 8006954:	d916      	bls.n	8006984 <UART_SetConfig+0x920>
 8006956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800695c:	d212      	bcs.n	8006984 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	b29b      	uxth	r3, r3
 8006962:	f023 030f 	bic.w	r3, r3, #15
 8006966:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	b29a      	uxth	r2, r3
 8006974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006976:	4313      	orrs	r3, r2
 8006978:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006980:	60da      	str	r2, [r3, #12]
 8006982:	e0b9      	b.n	8006af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800698a:	e0b5      	b.n	8006af8 <UART_SetConfig+0xa94>
 800698c:	03d09000 	.word	0x03d09000
 8006990:	003d0900 	.word	0x003d0900
 8006994:	08008538 	.word	0x08008538
 8006998:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800699c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	dc49      	bgt.n	8006a38 <UART_SetConfig+0x9d4>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	db7c      	blt.n	8006aa2 <UART_SetConfig+0xa3e>
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d87a      	bhi.n	8006aa2 <UART_SetConfig+0xa3e>
 80069ac:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <UART_SetConfig+0x950>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	08006a3f 	.word	0x08006a3f
 80069b8:	08006a47 	.word	0x08006a47
 80069bc:	08006aa3 	.word	0x08006aa3
 80069c0:	08006aa3 	.word	0x08006aa3
 80069c4:	08006a4f 	.word	0x08006a4f
 80069c8:	08006aa3 	.word	0x08006aa3
 80069cc:	08006aa3 	.word	0x08006aa3
 80069d0:	08006aa3 	.word	0x08006aa3
 80069d4:	08006a5f 	.word	0x08006a5f
 80069d8:	08006aa3 	.word	0x08006aa3
 80069dc:	08006aa3 	.word	0x08006aa3
 80069e0:	08006aa3 	.word	0x08006aa3
 80069e4:	08006aa3 	.word	0x08006aa3
 80069e8:	08006aa3 	.word	0x08006aa3
 80069ec:	08006aa3 	.word	0x08006aa3
 80069f0:	08006aa3 	.word	0x08006aa3
 80069f4:	08006a6f 	.word	0x08006a6f
 80069f8:	08006aa3 	.word	0x08006aa3
 80069fc:	08006aa3 	.word	0x08006aa3
 8006a00:	08006aa3 	.word	0x08006aa3
 8006a04:	08006aa3 	.word	0x08006aa3
 8006a08:	08006aa3 	.word	0x08006aa3
 8006a0c:	08006aa3 	.word	0x08006aa3
 8006a10:	08006aa3 	.word	0x08006aa3
 8006a14:	08006aa3 	.word	0x08006aa3
 8006a18:	08006aa3 	.word	0x08006aa3
 8006a1c:	08006aa3 	.word	0x08006aa3
 8006a20:	08006aa3 	.word	0x08006aa3
 8006a24:	08006aa3 	.word	0x08006aa3
 8006a28:	08006aa3 	.word	0x08006aa3
 8006a2c:	08006aa3 	.word	0x08006aa3
 8006a30:	08006aa3 	.word	0x08006aa3
 8006a34:	08006a95 	.word	0x08006a95
 8006a38:	2b40      	cmp	r3, #64	@ 0x40
 8006a3a:	d02e      	beq.n	8006a9a <UART_SetConfig+0xa36>
 8006a3c:	e031      	b.n	8006aa2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a3e:	f7fc fc9b 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8006a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a44:	e033      	b.n	8006aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a46:	f7fc fcad 	bl	80033a4 <HAL_RCC_GetPCLK2Freq>
 8006a4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a4c:	e02f      	b.n	8006aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fd fedc 	bl	8004810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5c:	e027      	b.n	8006aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a5e:	f107 0318 	add.w	r3, r7, #24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe f828 	bl	8004ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a6c:	e01f      	b.n	8006aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006b24 <UART_SetConfig+0xac0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006b24 <UART_SetConfig+0xac0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	08db      	lsrs	r3, r3, #3
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	4a28      	ldr	r2, [pc, #160]	@ (8006b28 <UART_SetConfig+0xac4>)
 8006a86:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a8c:	e00f      	b.n	8006aae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006a8e:	4b26      	ldr	r3, [pc, #152]	@ (8006b28 <UART_SetConfig+0xac4>)
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a92:	e00c      	b.n	8006aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a94:	4b25      	ldr	r3, [pc, #148]	@ (8006b2c <UART_SetConfig+0xac8>)
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa0:	e005      	b.n	8006aae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006aac:	bf00      	nop
    }

    if (pclk != 0U)
 8006aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d021      	beq.n	8006af8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b30 <UART_SetConfig+0xacc>)
 8006aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	441a      	add	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	2b0f      	cmp	r3, #15
 8006adc:	d909      	bls.n	8006af2 <UART_SetConfig+0xa8e>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae4:	d205      	bcs.n	8006af2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60da      	str	r2, [r3, #12]
 8006af0:	e002      	b.n	8006af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2200      	movs	r2, #0
 8006b12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b14:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3748      	adds	r7, #72	@ 0x48
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b22:	bf00      	nop
 8006b24:	58024400 	.word	0x58024400
 8006b28:	03d09000 	.word	0x03d09000
 8006b2c:	003d0900 	.word	0x003d0900
 8006b30:	08008538 	.word	0x08008538

08006b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c32:	d10a      	bne.n	8006c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b098      	sub	sp, #96	@ 0x60
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c88:	f7fa ff76 	bl	8001b78 <HAL_GetTick>
 8006c8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d12f      	bne.n	8006cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f88e 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d022      	beq.n	8006cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e063      	b.n	8006dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d149      	bne.n	8006d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d12:	2200      	movs	r2, #0
 8006d14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f857 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d03c      	beq.n	8006d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	623b      	str	r3, [r7, #32]
   return(result);
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e6      	bne.n	8006d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d76:	61fa      	str	r2, [r7, #28]
 8006d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	69b9      	ldr	r1, [r7, #24]
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	617b      	str	r3, [r7, #20]
   return(result);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e012      	b.n	8006dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3758      	adds	r7, #88	@ 0x58
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ddc:	e04f      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d04b      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de6:	f7fa fec7 	bl	8001b78 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e04e      	b.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d037      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b80      	cmp	r3, #128	@ 0x80
 8006e12:	d034      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b40      	cmp	r3, #64	@ 0x40
 8006e18:	d031      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d110      	bne.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f839 	bl	8006ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e029      	b.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e58:	d111      	bne.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f81f 	bl	8006ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e00f      	b.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4013      	ands	r3, r2
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	bf0c      	ite	eq
 8006e8e:	2301      	moveq	r3, #1
 8006e90:	2300      	movne	r3, #0
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d0a0      	beq.n	8006dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b095      	sub	sp, #84	@ 0x54
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e6      	bne.n	8006eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8006f70 <UART_EndRxTransfer+0xc8>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3308      	adds	r3, #8
 8006f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e5      	bne.n	8006ee2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d118      	bne.n	8006f50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f023 0310 	bic.w	r3, r3, #16
 8006f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6979      	ldr	r1, [r7, #20]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	613b      	str	r3, [r7, #16]
   return(result);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e6      	bne.n	8006f1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f64:	bf00      	nop
 8006f66:	3754      	adds	r7, #84	@ 0x54
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	effffffe 	.word	0xeffffffe

08006f74 <std>:
 8006f74:	2300      	movs	r3, #0
 8006f76:	b510      	push	{r4, lr}
 8006f78:	4604      	mov	r4, r0
 8006f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f82:	6083      	str	r3, [r0, #8]
 8006f84:	8181      	strh	r1, [r0, #12]
 8006f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f88:	81c2      	strh	r2, [r0, #14]
 8006f8a:	6183      	str	r3, [r0, #24]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	2208      	movs	r2, #8
 8006f90:	305c      	adds	r0, #92	@ 0x5c
 8006f92:	f000 f906 	bl	80071a2 <memset>
 8006f96:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <std+0x58>)
 8006f98:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <std+0x5c>)
 8006f9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd4 <std+0x60>)
 8006fa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd8 <std+0x64>)
 8006fa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fdc <std+0x68>)
 8006fa8:	6224      	str	r4, [r4, #32]
 8006faa:	429c      	cmp	r4, r3
 8006fac:	d006      	beq.n	8006fbc <std+0x48>
 8006fae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fb2:	4294      	cmp	r4, r2
 8006fb4:	d002      	beq.n	8006fbc <std+0x48>
 8006fb6:	33d0      	adds	r3, #208	@ 0xd0
 8006fb8:	429c      	cmp	r4, r3
 8006fba:	d105      	bne.n	8006fc8 <std+0x54>
 8006fbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc4:	f000 b966 	b.w	8007294 <__retarget_lock_init_recursive>
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	bf00      	nop
 8006fcc:	0800711d 	.word	0x0800711d
 8006fd0:	0800713f 	.word	0x0800713f
 8006fd4:	08007177 	.word	0x08007177
 8006fd8:	0800719b 	.word	0x0800719b
 8006fdc:	240001e8 	.word	0x240001e8

08006fe0 <stdio_exit_handler>:
 8006fe0:	4a02      	ldr	r2, [pc, #8]	@ (8006fec <stdio_exit_handler+0xc>)
 8006fe2:	4903      	ldr	r1, [pc, #12]	@ (8006ff0 <stdio_exit_handler+0x10>)
 8006fe4:	4803      	ldr	r0, [pc, #12]	@ (8006ff4 <stdio_exit_handler+0x14>)
 8006fe6:	f000 b869 	b.w	80070bc <_fwalk_sglue>
 8006fea:	bf00      	nop
 8006fec:	2400002c 	.word	0x2400002c
 8006ff0:	08007b31 	.word	0x08007b31
 8006ff4:	2400003c 	.word	0x2400003c

08006ff8 <cleanup_stdio>:
 8006ff8:	6841      	ldr	r1, [r0, #4]
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800702c <cleanup_stdio+0x34>)
 8006ffc:	4299      	cmp	r1, r3
 8006ffe:	b510      	push	{r4, lr}
 8007000:	4604      	mov	r4, r0
 8007002:	d001      	beq.n	8007008 <cleanup_stdio+0x10>
 8007004:	f000 fd94 	bl	8007b30 <_fflush_r>
 8007008:	68a1      	ldr	r1, [r4, #8]
 800700a:	4b09      	ldr	r3, [pc, #36]	@ (8007030 <cleanup_stdio+0x38>)
 800700c:	4299      	cmp	r1, r3
 800700e:	d002      	beq.n	8007016 <cleanup_stdio+0x1e>
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fd8d 	bl	8007b30 <_fflush_r>
 8007016:	68e1      	ldr	r1, [r4, #12]
 8007018:	4b06      	ldr	r3, [pc, #24]	@ (8007034 <cleanup_stdio+0x3c>)
 800701a:	4299      	cmp	r1, r3
 800701c:	d004      	beq.n	8007028 <cleanup_stdio+0x30>
 800701e:	4620      	mov	r0, r4
 8007020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007024:	f000 bd84 	b.w	8007b30 <_fflush_r>
 8007028:	bd10      	pop	{r4, pc}
 800702a:	bf00      	nop
 800702c:	240001e8 	.word	0x240001e8
 8007030:	24000250 	.word	0x24000250
 8007034:	240002b8 	.word	0x240002b8

08007038 <global_stdio_init.part.0>:
 8007038:	b510      	push	{r4, lr}
 800703a:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <global_stdio_init.part.0+0x30>)
 800703c:	4c0b      	ldr	r4, [pc, #44]	@ (800706c <global_stdio_init.part.0+0x34>)
 800703e:	4a0c      	ldr	r2, [pc, #48]	@ (8007070 <global_stdio_init.part.0+0x38>)
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	4620      	mov	r0, r4
 8007044:	2200      	movs	r2, #0
 8007046:	2104      	movs	r1, #4
 8007048:	f7ff ff94 	bl	8006f74 <std>
 800704c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007050:	2201      	movs	r2, #1
 8007052:	2109      	movs	r1, #9
 8007054:	f7ff ff8e 	bl	8006f74 <std>
 8007058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800705c:	2202      	movs	r2, #2
 800705e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007062:	2112      	movs	r1, #18
 8007064:	f7ff bf86 	b.w	8006f74 <std>
 8007068:	24000320 	.word	0x24000320
 800706c:	240001e8 	.word	0x240001e8
 8007070:	08006fe1 	.word	0x08006fe1

08007074 <__sfp_lock_acquire>:
 8007074:	4801      	ldr	r0, [pc, #4]	@ (800707c <__sfp_lock_acquire+0x8>)
 8007076:	f000 b90e 	b.w	8007296 <__retarget_lock_acquire_recursive>
 800707a:	bf00      	nop
 800707c:	24000329 	.word	0x24000329

08007080 <__sfp_lock_release>:
 8007080:	4801      	ldr	r0, [pc, #4]	@ (8007088 <__sfp_lock_release+0x8>)
 8007082:	f000 b909 	b.w	8007298 <__retarget_lock_release_recursive>
 8007086:	bf00      	nop
 8007088:	24000329 	.word	0x24000329

0800708c <__sinit>:
 800708c:	b510      	push	{r4, lr}
 800708e:	4604      	mov	r4, r0
 8007090:	f7ff fff0 	bl	8007074 <__sfp_lock_acquire>
 8007094:	6a23      	ldr	r3, [r4, #32]
 8007096:	b11b      	cbz	r3, 80070a0 <__sinit+0x14>
 8007098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800709c:	f7ff bff0 	b.w	8007080 <__sfp_lock_release>
 80070a0:	4b04      	ldr	r3, [pc, #16]	@ (80070b4 <__sinit+0x28>)
 80070a2:	6223      	str	r3, [r4, #32]
 80070a4:	4b04      	ldr	r3, [pc, #16]	@ (80070b8 <__sinit+0x2c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f5      	bne.n	8007098 <__sinit+0xc>
 80070ac:	f7ff ffc4 	bl	8007038 <global_stdio_init.part.0>
 80070b0:	e7f2      	b.n	8007098 <__sinit+0xc>
 80070b2:	bf00      	nop
 80070b4:	08006ff9 	.word	0x08006ff9
 80070b8:	24000320 	.word	0x24000320

080070bc <_fwalk_sglue>:
 80070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c0:	4607      	mov	r7, r0
 80070c2:	4688      	mov	r8, r1
 80070c4:	4614      	mov	r4, r2
 80070c6:	2600      	movs	r6, #0
 80070c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070cc:	f1b9 0901 	subs.w	r9, r9, #1
 80070d0:	d505      	bpl.n	80070de <_fwalk_sglue+0x22>
 80070d2:	6824      	ldr	r4, [r4, #0]
 80070d4:	2c00      	cmp	r4, #0
 80070d6:	d1f7      	bne.n	80070c8 <_fwalk_sglue+0xc>
 80070d8:	4630      	mov	r0, r6
 80070da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d907      	bls.n	80070f4 <_fwalk_sglue+0x38>
 80070e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070e8:	3301      	adds	r3, #1
 80070ea:	d003      	beq.n	80070f4 <_fwalk_sglue+0x38>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4638      	mov	r0, r7
 80070f0:	47c0      	blx	r8
 80070f2:	4306      	orrs	r6, r0
 80070f4:	3568      	adds	r5, #104	@ 0x68
 80070f6:	e7e9      	b.n	80070cc <_fwalk_sglue+0x10>

080070f8 <iprintf>:
 80070f8:	b40f      	push	{r0, r1, r2, r3}
 80070fa:	b507      	push	{r0, r1, r2, lr}
 80070fc:	4906      	ldr	r1, [pc, #24]	@ (8007118 <iprintf+0x20>)
 80070fe:	ab04      	add	r3, sp, #16
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	f853 2b04 	ldr.w	r2, [r3], #4
 8007106:	6881      	ldr	r1, [r0, #8]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	f000 f9e9 	bl	80074e0 <_vfiprintf_r>
 800710e:	b003      	add	sp, #12
 8007110:	f85d eb04 	ldr.w	lr, [sp], #4
 8007114:	b004      	add	sp, #16
 8007116:	4770      	bx	lr
 8007118:	24000038 	.word	0x24000038

0800711c <__sread>:
 800711c:	b510      	push	{r4, lr}
 800711e:	460c      	mov	r4, r1
 8007120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007124:	f000 f868 	bl	80071f8 <_read_r>
 8007128:	2800      	cmp	r0, #0
 800712a:	bfab      	itete	ge
 800712c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800712e:	89a3      	ldrhlt	r3, [r4, #12]
 8007130:	181b      	addge	r3, r3, r0
 8007132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007136:	bfac      	ite	ge
 8007138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800713a:	81a3      	strhlt	r3, [r4, #12]
 800713c:	bd10      	pop	{r4, pc}

0800713e <__swrite>:
 800713e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007142:	461f      	mov	r7, r3
 8007144:	898b      	ldrh	r3, [r1, #12]
 8007146:	05db      	lsls	r3, r3, #23
 8007148:	4605      	mov	r5, r0
 800714a:	460c      	mov	r4, r1
 800714c:	4616      	mov	r6, r2
 800714e:	d505      	bpl.n	800715c <__swrite+0x1e>
 8007150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007154:	2302      	movs	r3, #2
 8007156:	2200      	movs	r2, #0
 8007158:	f000 f83c 	bl	80071d4 <_lseek_r>
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	4632      	mov	r2, r6
 800716a:	463b      	mov	r3, r7
 800716c:	4628      	mov	r0, r5
 800716e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007172:	f000 b853 	b.w	800721c <_write_r>

08007176 <__sseek>:
 8007176:	b510      	push	{r4, lr}
 8007178:	460c      	mov	r4, r1
 800717a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717e:	f000 f829 	bl	80071d4 <_lseek_r>
 8007182:	1c43      	adds	r3, r0, #1
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	bf15      	itete	ne
 8007188:	6560      	strne	r0, [r4, #84]	@ 0x54
 800718a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800718e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007192:	81a3      	strheq	r3, [r4, #12]
 8007194:	bf18      	it	ne
 8007196:	81a3      	strhne	r3, [r4, #12]
 8007198:	bd10      	pop	{r4, pc}

0800719a <__sclose>:
 800719a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719e:	f000 b809 	b.w	80071b4 <_close_r>

080071a2 <memset>:
 80071a2:	4402      	add	r2, r0
 80071a4:	4603      	mov	r3, r0
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d100      	bne.n	80071ac <memset+0xa>
 80071aa:	4770      	bx	lr
 80071ac:	f803 1b01 	strb.w	r1, [r3], #1
 80071b0:	e7f9      	b.n	80071a6 <memset+0x4>
	...

080071b4 <_close_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d06      	ldr	r5, [pc, #24]	@ (80071d0 <_close_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7fa f8af 	bl	8001322 <_close>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_close_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_close_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	24000324 	.word	0x24000324

080071d4 <_lseek_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4d07      	ldr	r5, [pc, #28]	@ (80071f4 <_lseek_r+0x20>)
 80071d8:	4604      	mov	r4, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	602a      	str	r2, [r5, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7fa f8c4 	bl	8001370 <_lseek>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_lseek_r+0x1e>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_lseek_r+0x1e>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	24000324 	.word	0x24000324

080071f8 <_read_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	@ (8007218 <_read_r+0x20>)
 80071fc:	4604      	mov	r4, r0
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	2200      	movs	r2, #0
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fa f852 	bl	80012b0 <_read>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_read_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_read_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	24000324 	.word	0x24000324

0800721c <_write_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d07      	ldr	r5, [pc, #28]	@ (800723c <_write_r+0x20>)
 8007220:	4604      	mov	r4, r0
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7fa f85d 	bl	80012ea <_write>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_write_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_write_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	24000324 	.word	0x24000324

08007240 <__errno>:
 8007240:	4b01      	ldr	r3, [pc, #4]	@ (8007248 <__errno+0x8>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	24000038 	.word	0x24000038

0800724c <__libc_init_array>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	4d0d      	ldr	r5, [pc, #52]	@ (8007284 <__libc_init_array+0x38>)
 8007250:	4c0d      	ldr	r4, [pc, #52]	@ (8007288 <__libc_init_array+0x3c>)
 8007252:	1b64      	subs	r4, r4, r5
 8007254:	10a4      	asrs	r4, r4, #2
 8007256:	2600      	movs	r6, #0
 8007258:	42a6      	cmp	r6, r4
 800725a:	d109      	bne.n	8007270 <__libc_init_array+0x24>
 800725c:	4d0b      	ldr	r5, [pc, #44]	@ (800728c <__libc_init_array+0x40>)
 800725e:	4c0c      	ldr	r4, [pc, #48]	@ (8007290 <__libc_init_array+0x44>)
 8007260:	f000 fdb6 	bl	8007dd0 <_init>
 8007264:	1b64      	subs	r4, r4, r5
 8007266:	10a4      	asrs	r4, r4, #2
 8007268:	2600      	movs	r6, #0
 800726a:	42a6      	cmp	r6, r4
 800726c:	d105      	bne.n	800727a <__libc_init_array+0x2e>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	f855 3b04 	ldr.w	r3, [r5], #4
 8007274:	4798      	blx	r3
 8007276:	3601      	adds	r6, #1
 8007278:	e7ee      	b.n	8007258 <__libc_init_array+0xc>
 800727a:	f855 3b04 	ldr.w	r3, [r5], #4
 800727e:	4798      	blx	r3
 8007280:	3601      	adds	r6, #1
 8007282:	e7f2      	b.n	800726a <__libc_init_array+0x1e>
 8007284:	0800858c 	.word	0x0800858c
 8007288:	0800858c 	.word	0x0800858c
 800728c:	0800858c 	.word	0x0800858c
 8007290:	08008590 	.word	0x08008590

08007294 <__retarget_lock_init_recursive>:
 8007294:	4770      	bx	lr

08007296 <__retarget_lock_acquire_recursive>:
 8007296:	4770      	bx	lr

08007298 <__retarget_lock_release_recursive>:
 8007298:	4770      	bx	lr
	...

0800729c <_free_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4605      	mov	r5, r0
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d041      	beq.n	8007328 <_free_r+0x8c>
 80072a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a8:	1f0c      	subs	r4, r1, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfb8      	it	lt
 80072ae:	18e4      	addlt	r4, r4, r3
 80072b0:	f000 f8e0 	bl	8007474 <__malloc_lock>
 80072b4:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <_free_r+0x90>)
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	b933      	cbnz	r3, 80072c8 <_free_r+0x2c>
 80072ba:	6063      	str	r3, [r4, #4]
 80072bc:	6014      	str	r4, [r2, #0]
 80072be:	4628      	mov	r0, r5
 80072c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c4:	f000 b8dc 	b.w	8007480 <__malloc_unlock>
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	d908      	bls.n	80072de <_free_r+0x42>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	1821      	adds	r1, r4, r0
 80072d0:	428b      	cmp	r3, r1
 80072d2:	bf01      	itttt	eq
 80072d4:	6819      	ldreq	r1, [r3, #0]
 80072d6:	685b      	ldreq	r3, [r3, #4]
 80072d8:	1809      	addeq	r1, r1, r0
 80072da:	6021      	streq	r1, [r4, #0]
 80072dc:	e7ed      	b.n	80072ba <_free_r+0x1e>
 80072de:	461a      	mov	r2, r3
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	b10b      	cbz	r3, 80072e8 <_free_r+0x4c>
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d9fa      	bls.n	80072de <_free_r+0x42>
 80072e8:	6811      	ldr	r1, [r2, #0]
 80072ea:	1850      	adds	r0, r2, r1
 80072ec:	42a0      	cmp	r0, r4
 80072ee:	d10b      	bne.n	8007308 <_free_r+0x6c>
 80072f0:	6820      	ldr	r0, [r4, #0]
 80072f2:	4401      	add	r1, r0
 80072f4:	1850      	adds	r0, r2, r1
 80072f6:	4283      	cmp	r3, r0
 80072f8:	6011      	str	r1, [r2, #0]
 80072fa:	d1e0      	bne.n	80072be <_free_r+0x22>
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	6053      	str	r3, [r2, #4]
 8007302:	4408      	add	r0, r1
 8007304:	6010      	str	r0, [r2, #0]
 8007306:	e7da      	b.n	80072be <_free_r+0x22>
 8007308:	d902      	bls.n	8007310 <_free_r+0x74>
 800730a:	230c      	movs	r3, #12
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	e7d6      	b.n	80072be <_free_r+0x22>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	1821      	adds	r1, r4, r0
 8007314:	428b      	cmp	r3, r1
 8007316:	bf04      	itt	eq
 8007318:	6819      	ldreq	r1, [r3, #0]
 800731a:	685b      	ldreq	r3, [r3, #4]
 800731c:	6063      	str	r3, [r4, #4]
 800731e:	bf04      	itt	eq
 8007320:	1809      	addeq	r1, r1, r0
 8007322:	6021      	streq	r1, [r4, #0]
 8007324:	6054      	str	r4, [r2, #4]
 8007326:	e7ca      	b.n	80072be <_free_r+0x22>
 8007328:	bd38      	pop	{r3, r4, r5, pc}
 800732a:	bf00      	nop
 800732c:	24000330 	.word	0x24000330

08007330 <sbrk_aligned>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	4e0f      	ldr	r6, [pc, #60]	@ (8007370 <sbrk_aligned+0x40>)
 8007334:	460c      	mov	r4, r1
 8007336:	6831      	ldr	r1, [r6, #0]
 8007338:	4605      	mov	r5, r0
 800733a:	b911      	cbnz	r1, 8007342 <sbrk_aligned+0x12>
 800733c:	f000 fcb4 	bl	8007ca8 <_sbrk_r>
 8007340:	6030      	str	r0, [r6, #0]
 8007342:	4621      	mov	r1, r4
 8007344:	4628      	mov	r0, r5
 8007346:	f000 fcaf 	bl	8007ca8 <_sbrk_r>
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d103      	bne.n	8007356 <sbrk_aligned+0x26>
 800734e:	f04f 34ff 	mov.w	r4, #4294967295
 8007352:	4620      	mov	r0, r4
 8007354:	bd70      	pop	{r4, r5, r6, pc}
 8007356:	1cc4      	adds	r4, r0, #3
 8007358:	f024 0403 	bic.w	r4, r4, #3
 800735c:	42a0      	cmp	r0, r4
 800735e:	d0f8      	beq.n	8007352 <sbrk_aligned+0x22>
 8007360:	1a21      	subs	r1, r4, r0
 8007362:	4628      	mov	r0, r5
 8007364:	f000 fca0 	bl	8007ca8 <_sbrk_r>
 8007368:	3001      	adds	r0, #1
 800736a:	d1f2      	bne.n	8007352 <sbrk_aligned+0x22>
 800736c:	e7ef      	b.n	800734e <sbrk_aligned+0x1e>
 800736e:	bf00      	nop
 8007370:	2400032c 	.word	0x2400032c

08007374 <_malloc_r>:
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	1ccd      	adds	r5, r1, #3
 800737a:	f025 0503 	bic.w	r5, r5, #3
 800737e:	3508      	adds	r5, #8
 8007380:	2d0c      	cmp	r5, #12
 8007382:	bf38      	it	cc
 8007384:	250c      	movcc	r5, #12
 8007386:	2d00      	cmp	r5, #0
 8007388:	4606      	mov	r6, r0
 800738a:	db01      	blt.n	8007390 <_malloc_r+0x1c>
 800738c:	42a9      	cmp	r1, r5
 800738e:	d904      	bls.n	800739a <_malloc_r+0x26>
 8007390:	230c      	movs	r3, #12
 8007392:	6033      	str	r3, [r6, #0]
 8007394:	2000      	movs	r0, #0
 8007396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007470 <_malloc_r+0xfc>
 800739e:	f000 f869 	bl	8007474 <__malloc_lock>
 80073a2:	f8d8 3000 	ldr.w	r3, [r8]
 80073a6:	461c      	mov	r4, r3
 80073a8:	bb44      	cbnz	r4, 80073fc <_malloc_r+0x88>
 80073aa:	4629      	mov	r1, r5
 80073ac:	4630      	mov	r0, r6
 80073ae:	f7ff ffbf 	bl	8007330 <sbrk_aligned>
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	4604      	mov	r4, r0
 80073b6:	d158      	bne.n	800746a <_malloc_r+0xf6>
 80073b8:	f8d8 4000 	ldr.w	r4, [r8]
 80073bc:	4627      	mov	r7, r4
 80073be:	2f00      	cmp	r7, #0
 80073c0:	d143      	bne.n	800744a <_malloc_r+0xd6>
 80073c2:	2c00      	cmp	r4, #0
 80073c4:	d04b      	beq.n	800745e <_malloc_r+0xea>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	4639      	mov	r1, r7
 80073ca:	4630      	mov	r0, r6
 80073cc:	eb04 0903 	add.w	r9, r4, r3
 80073d0:	f000 fc6a 	bl	8007ca8 <_sbrk_r>
 80073d4:	4581      	cmp	r9, r0
 80073d6:	d142      	bne.n	800745e <_malloc_r+0xea>
 80073d8:	6821      	ldr	r1, [r4, #0]
 80073da:	1a6d      	subs	r5, r5, r1
 80073dc:	4629      	mov	r1, r5
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff ffa6 	bl	8007330 <sbrk_aligned>
 80073e4:	3001      	adds	r0, #1
 80073e6:	d03a      	beq.n	800745e <_malloc_r+0xea>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	442b      	add	r3, r5
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	f8d8 3000 	ldr.w	r3, [r8]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	bb62      	cbnz	r2, 8007450 <_malloc_r+0xdc>
 80073f6:	f8c8 7000 	str.w	r7, [r8]
 80073fa:	e00f      	b.n	800741c <_malloc_r+0xa8>
 80073fc:	6822      	ldr	r2, [r4, #0]
 80073fe:	1b52      	subs	r2, r2, r5
 8007400:	d420      	bmi.n	8007444 <_malloc_r+0xd0>
 8007402:	2a0b      	cmp	r2, #11
 8007404:	d917      	bls.n	8007436 <_malloc_r+0xc2>
 8007406:	1961      	adds	r1, r4, r5
 8007408:	42a3      	cmp	r3, r4
 800740a:	6025      	str	r5, [r4, #0]
 800740c:	bf18      	it	ne
 800740e:	6059      	strne	r1, [r3, #4]
 8007410:	6863      	ldr	r3, [r4, #4]
 8007412:	bf08      	it	eq
 8007414:	f8c8 1000 	streq.w	r1, [r8]
 8007418:	5162      	str	r2, [r4, r5]
 800741a:	604b      	str	r3, [r1, #4]
 800741c:	4630      	mov	r0, r6
 800741e:	f000 f82f 	bl	8007480 <__malloc_unlock>
 8007422:	f104 000b 	add.w	r0, r4, #11
 8007426:	1d23      	adds	r3, r4, #4
 8007428:	f020 0007 	bic.w	r0, r0, #7
 800742c:	1ac2      	subs	r2, r0, r3
 800742e:	bf1c      	itt	ne
 8007430:	1a1b      	subne	r3, r3, r0
 8007432:	50a3      	strne	r3, [r4, r2]
 8007434:	e7af      	b.n	8007396 <_malloc_r+0x22>
 8007436:	6862      	ldr	r2, [r4, #4]
 8007438:	42a3      	cmp	r3, r4
 800743a:	bf0c      	ite	eq
 800743c:	f8c8 2000 	streq.w	r2, [r8]
 8007440:	605a      	strne	r2, [r3, #4]
 8007442:	e7eb      	b.n	800741c <_malloc_r+0xa8>
 8007444:	4623      	mov	r3, r4
 8007446:	6864      	ldr	r4, [r4, #4]
 8007448:	e7ae      	b.n	80073a8 <_malloc_r+0x34>
 800744a:	463c      	mov	r4, r7
 800744c:	687f      	ldr	r7, [r7, #4]
 800744e:	e7b6      	b.n	80073be <_malloc_r+0x4a>
 8007450:	461a      	mov	r2, r3
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	42a3      	cmp	r3, r4
 8007456:	d1fb      	bne.n	8007450 <_malloc_r+0xdc>
 8007458:	2300      	movs	r3, #0
 800745a:	6053      	str	r3, [r2, #4]
 800745c:	e7de      	b.n	800741c <_malloc_r+0xa8>
 800745e:	230c      	movs	r3, #12
 8007460:	6033      	str	r3, [r6, #0]
 8007462:	4630      	mov	r0, r6
 8007464:	f000 f80c 	bl	8007480 <__malloc_unlock>
 8007468:	e794      	b.n	8007394 <_malloc_r+0x20>
 800746a:	6005      	str	r5, [r0, #0]
 800746c:	e7d6      	b.n	800741c <_malloc_r+0xa8>
 800746e:	bf00      	nop
 8007470:	24000330 	.word	0x24000330

08007474 <__malloc_lock>:
 8007474:	4801      	ldr	r0, [pc, #4]	@ (800747c <__malloc_lock+0x8>)
 8007476:	f7ff bf0e 	b.w	8007296 <__retarget_lock_acquire_recursive>
 800747a:	bf00      	nop
 800747c:	24000328 	.word	0x24000328

08007480 <__malloc_unlock>:
 8007480:	4801      	ldr	r0, [pc, #4]	@ (8007488 <__malloc_unlock+0x8>)
 8007482:	f7ff bf09 	b.w	8007298 <__retarget_lock_release_recursive>
 8007486:	bf00      	nop
 8007488:	24000328 	.word	0x24000328

0800748c <__sfputc_r>:
 800748c:	6893      	ldr	r3, [r2, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	b410      	push	{r4}
 8007494:	6093      	str	r3, [r2, #8]
 8007496:	da08      	bge.n	80074aa <__sfputc_r+0x1e>
 8007498:	6994      	ldr	r4, [r2, #24]
 800749a:	42a3      	cmp	r3, r4
 800749c:	db01      	blt.n	80074a2 <__sfputc_r+0x16>
 800749e:	290a      	cmp	r1, #10
 80074a0:	d103      	bne.n	80074aa <__sfputc_r+0x1e>
 80074a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a6:	f000 bb6b 	b.w	8007b80 <__swbuf_r>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	1c58      	adds	r0, r3, #1
 80074ae:	6010      	str	r0, [r2, #0]
 80074b0:	7019      	strb	r1, [r3, #0]
 80074b2:	4608      	mov	r0, r1
 80074b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <__sfputs_r>:
 80074ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074bc:	4606      	mov	r6, r0
 80074be:	460f      	mov	r7, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	18d5      	adds	r5, r2, r3
 80074c4:	42ac      	cmp	r4, r5
 80074c6:	d101      	bne.n	80074cc <__sfputs_r+0x12>
 80074c8:	2000      	movs	r0, #0
 80074ca:	e007      	b.n	80074dc <__sfputs_r+0x22>
 80074cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d0:	463a      	mov	r2, r7
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ffda 	bl	800748c <__sfputc_r>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d1f3      	bne.n	80074c4 <__sfputs_r+0xa>
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074e0 <_vfiprintf_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	460d      	mov	r5, r1
 80074e6:	b09d      	sub	sp, #116	@ 0x74
 80074e8:	4614      	mov	r4, r2
 80074ea:	4698      	mov	r8, r3
 80074ec:	4606      	mov	r6, r0
 80074ee:	b118      	cbz	r0, 80074f8 <_vfiprintf_r+0x18>
 80074f0:	6a03      	ldr	r3, [r0, #32]
 80074f2:	b90b      	cbnz	r3, 80074f8 <_vfiprintf_r+0x18>
 80074f4:	f7ff fdca 	bl	800708c <__sinit>
 80074f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	d405      	bmi.n	800750a <_vfiprintf_r+0x2a>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	059a      	lsls	r2, r3, #22
 8007502:	d402      	bmi.n	800750a <_vfiprintf_r+0x2a>
 8007504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007506:	f7ff fec6 	bl	8007296 <__retarget_lock_acquire_recursive>
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	d501      	bpl.n	8007514 <_vfiprintf_r+0x34>
 8007510:	692b      	ldr	r3, [r5, #16]
 8007512:	b99b      	cbnz	r3, 800753c <_vfiprintf_r+0x5c>
 8007514:	4629      	mov	r1, r5
 8007516:	4630      	mov	r0, r6
 8007518:	f000 fb70 	bl	8007bfc <__swsetup_r>
 800751c:	b170      	cbz	r0, 800753c <_vfiprintf_r+0x5c>
 800751e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007520:	07dc      	lsls	r4, r3, #31
 8007522:	d504      	bpl.n	800752e <_vfiprintf_r+0x4e>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b01d      	add	sp, #116	@ 0x74
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	0598      	lsls	r0, r3, #22
 8007532:	d4f7      	bmi.n	8007524 <_vfiprintf_r+0x44>
 8007534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007536:	f7ff feaf 	bl	8007298 <__retarget_lock_release_recursive>
 800753a:	e7f3      	b.n	8007524 <_vfiprintf_r+0x44>
 800753c:	2300      	movs	r3, #0
 800753e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007540:	2320      	movs	r3, #32
 8007542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007546:	f8cd 800c 	str.w	r8, [sp, #12]
 800754a:	2330      	movs	r3, #48	@ 0x30
 800754c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076fc <_vfiprintf_r+0x21c>
 8007550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007554:	f04f 0901 	mov.w	r9, #1
 8007558:	4623      	mov	r3, r4
 800755a:	469a      	mov	sl, r3
 800755c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007560:	b10a      	cbz	r2, 8007566 <_vfiprintf_r+0x86>
 8007562:	2a25      	cmp	r2, #37	@ 0x25
 8007564:	d1f9      	bne.n	800755a <_vfiprintf_r+0x7a>
 8007566:	ebba 0b04 	subs.w	fp, sl, r4
 800756a:	d00b      	beq.n	8007584 <_vfiprintf_r+0xa4>
 800756c:	465b      	mov	r3, fp
 800756e:	4622      	mov	r2, r4
 8007570:	4629      	mov	r1, r5
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ffa1 	bl	80074ba <__sfputs_r>
 8007578:	3001      	adds	r0, #1
 800757a:	f000 80a7 	beq.w	80076cc <_vfiprintf_r+0x1ec>
 800757e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007580:	445a      	add	r2, fp
 8007582:	9209      	str	r2, [sp, #36]	@ 0x24
 8007584:	f89a 3000 	ldrb.w	r3, [sl]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 809f 	beq.w	80076cc <_vfiprintf_r+0x1ec>
 800758e:	2300      	movs	r3, #0
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007598:	f10a 0a01 	add.w	sl, sl, #1
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075a6:	4654      	mov	r4, sl
 80075a8:	2205      	movs	r2, #5
 80075aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ae:	4853      	ldr	r0, [pc, #332]	@ (80076fc <_vfiprintf_r+0x21c>)
 80075b0:	f7f8 fe96 	bl	80002e0 <memchr>
 80075b4:	9a04      	ldr	r2, [sp, #16]
 80075b6:	b9d8      	cbnz	r0, 80075f0 <_vfiprintf_r+0x110>
 80075b8:	06d1      	lsls	r1, r2, #27
 80075ba:	bf44      	itt	mi
 80075bc:	2320      	movmi	r3, #32
 80075be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075c2:	0713      	lsls	r3, r2, #28
 80075c4:	bf44      	itt	mi
 80075c6:	232b      	movmi	r3, #43	@ 0x2b
 80075c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075cc:	f89a 3000 	ldrb.w	r3, [sl]
 80075d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075d2:	d015      	beq.n	8007600 <_vfiprintf_r+0x120>
 80075d4:	9a07      	ldr	r2, [sp, #28]
 80075d6:	4654      	mov	r4, sl
 80075d8:	2000      	movs	r0, #0
 80075da:	f04f 0c0a 	mov.w	ip, #10
 80075de:	4621      	mov	r1, r4
 80075e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e4:	3b30      	subs	r3, #48	@ 0x30
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d94b      	bls.n	8007682 <_vfiprintf_r+0x1a2>
 80075ea:	b1b0      	cbz	r0, 800761a <_vfiprintf_r+0x13a>
 80075ec:	9207      	str	r2, [sp, #28]
 80075ee:	e014      	b.n	800761a <_vfiprintf_r+0x13a>
 80075f0:	eba0 0308 	sub.w	r3, r0, r8
 80075f4:	fa09 f303 	lsl.w	r3, r9, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	46a2      	mov	sl, r4
 80075fe:	e7d2      	b.n	80075a6 <_vfiprintf_r+0xc6>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d19      	adds	r1, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9103      	str	r1, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfbb      	ittet	lt
 800760c:	425b      	neglt	r3, r3
 800760e:	f042 0202 	orrlt.w	r2, r2, #2
 8007612:	9307      	strge	r3, [sp, #28]
 8007614:	9307      	strlt	r3, [sp, #28]
 8007616:	bfb8      	it	lt
 8007618:	9204      	strlt	r2, [sp, #16]
 800761a:	7823      	ldrb	r3, [r4, #0]
 800761c:	2b2e      	cmp	r3, #46	@ 0x2e
 800761e:	d10a      	bne.n	8007636 <_vfiprintf_r+0x156>
 8007620:	7863      	ldrb	r3, [r4, #1]
 8007622:	2b2a      	cmp	r3, #42	@ 0x2a
 8007624:	d132      	bne.n	800768c <_vfiprintf_r+0x1ac>
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	9203      	str	r2, [sp, #12]
 800762e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007632:	3402      	adds	r4, #2
 8007634:	9305      	str	r3, [sp, #20]
 8007636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800770c <_vfiprintf_r+0x22c>
 800763a:	7821      	ldrb	r1, [r4, #0]
 800763c:	2203      	movs	r2, #3
 800763e:	4650      	mov	r0, sl
 8007640:	f7f8 fe4e 	bl	80002e0 <memchr>
 8007644:	b138      	cbz	r0, 8007656 <_vfiprintf_r+0x176>
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	eba0 000a 	sub.w	r0, r0, sl
 800764c:	2240      	movs	r2, #64	@ 0x40
 800764e:	4082      	lsls	r2, r0
 8007650:	4313      	orrs	r3, r2
 8007652:	3401      	adds	r4, #1
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765a:	4829      	ldr	r0, [pc, #164]	@ (8007700 <_vfiprintf_r+0x220>)
 800765c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007660:	2206      	movs	r2, #6
 8007662:	f7f8 fe3d 	bl	80002e0 <memchr>
 8007666:	2800      	cmp	r0, #0
 8007668:	d03f      	beq.n	80076ea <_vfiprintf_r+0x20a>
 800766a:	4b26      	ldr	r3, [pc, #152]	@ (8007704 <_vfiprintf_r+0x224>)
 800766c:	bb1b      	cbnz	r3, 80076b6 <_vfiprintf_r+0x1d6>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	3307      	adds	r3, #7
 8007672:	f023 0307 	bic.w	r3, r3, #7
 8007676:	3308      	adds	r3, #8
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767c:	443b      	add	r3, r7
 800767e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007680:	e76a      	b.n	8007558 <_vfiprintf_r+0x78>
 8007682:	fb0c 3202 	mla	r2, ip, r2, r3
 8007686:	460c      	mov	r4, r1
 8007688:	2001      	movs	r0, #1
 800768a:	e7a8      	b.n	80075de <_vfiprintf_r+0xfe>
 800768c:	2300      	movs	r3, #0
 800768e:	3401      	adds	r4, #1
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	4619      	mov	r1, r3
 8007694:	f04f 0c0a 	mov.w	ip, #10
 8007698:	4620      	mov	r0, r4
 800769a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769e:	3a30      	subs	r2, #48	@ 0x30
 80076a0:	2a09      	cmp	r2, #9
 80076a2:	d903      	bls.n	80076ac <_vfiprintf_r+0x1cc>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0c6      	beq.n	8007636 <_vfiprintf_r+0x156>
 80076a8:	9105      	str	r1, [sp, #20]
 80076aa:	e7c4      	b.n	8007636 <_vfiprintf_r+0x156>
 80076ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80076b0:	4604      	mov	r4, r0
 80076b2:	2301      	movs	r3, #1
 80076b4:	e7f0      	b.n	8007698 <_vfiprintf_r+0x1b8>
 80076b6:	ab03      	add	r3, sp, #12
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	462a      	mov	r2, r5
 80076bc:	4b12      	ldr	r3, [pc, #72]	@ (8007708 <_vfiprintf_r+0x228>)
 80076be:	a904      	add	r1, sp, #16
 80076c0:	4630      	mov	r0, r6
 80076c2:	f3af 8000 	nop.w
 80076c6:	4607      	mov	r7, r0
 80076c8:	1c78      	adds	r0, r7, #1
 80076ca:	d1d6      	bne.n	800767a <_vfiprintf_r+0x19a>
 80076cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ce:	07d9      	lsls	r1, r3, #31
 80076d0:	d405      	bmi.n	80076de <_vfiprintf_r+0x1fe>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d402      	bmi.n	80076de <_vfiprintf_r+0x1fe>
 80076d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076da:	f7ff fddd 	bl	8007298 <__retarget_lock_release_recursive>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	065b      	lsls	r3, r3, #25
 80076e2:	f53f af1f 	bmi.w	8007524 <_vfiprintf_r+0x44>
 80076e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e8:	e71e      	b.n	8007528 <_vfiprintf_r+0x48>
 80076ea:	ab03      	add	r3, sp, #12
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	462a      	mov	r2, r5
 80076f0:	4b05      	ldr	r3, [pc, #20]	@ (8007708 <_vfiprintf_r+0x228>)
 80076f2:	a904      	add	r1, sp, #16
 80076f4:	4630      	mov	r0, r6
 80076f6:	f000 f879 	bl	80077ec <_printf_i>
 80076fa:	e7e4      	b.n	80076c6 <_vfiprintf_r+0x1e6>
 80076fc:	08008550 	.word	0x08008550
 8007700:	0800855a 	.word	0x0800855a
 8007704:	00000000 	.word	0x00000000
 8007708:	080074bb 	.word	0x080074bb
 800770c:	08008556 	.word	0x08008556

08007710 <_printf_common>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	4616      	mov	r6, r2
 8007716:	4698      	mov	r8, r3
 8007718:	688a      	ldr	r2, [r1, #8]
 800771a:	690b      	ldr	r3, [r1, #16]
 800771c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007720:	4293      	cmp	r3, r2
 8007722:	bfb8      	it	lt
 8007724:	4613      	movlt	r3, r2
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800772c:	4607      	mov	r7, r0
 800772e:	460c      	mov	r4, r1
 8007730:	b10a      	cbz	r2, 8007736 <_printf_common+0x26>
 8007732:	3301      	adds	r3, #1
 8007734:	6033      	str	r3, [r6, #0]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	0699      	lsls	r1, r3, #26
 800773a:	bf42      	ittt	mi
 800773c:	6833      	ldrmi	r3, [r6, #0]
 800773e:	3302      	addmi	r3, #2
 8007740:	6033      	strmi	r3, [r6, #0]
 8007742:	6825      	ldr	r5, [r4, #0]
 8007744:	f015 0506 	ands.w	r5, r5, #6
 8007748:	d106      	bne.n	8007758 <_printf_common+0x48>
 800774a:	f104 0a19 	add.w	sl, r4, #25
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	6832      	ldr	r2, [r6, #0]
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	42ab      	cmp	r3, r5
 8007756:	dc26      	bgt.n	80077a6 <_printf_common+0x96>
 8007758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800775c:	6822      	ldr	r2, [r4, #0]
 800775e:	3b00      	subs	r3, #0
 8007760:	bf18      	it	ne
 8007762:	2301      	movne	r3, #1
 8007764:	0692      	lsls	r2, r2, #26
 8007766:	d42b      	bmi.n	80077c0 <_printf_common+0xb0>
 8007768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800776c:	4641      	mov	r1, r8
 800776e:	4638      	mov	r0, r7
 8007770:	47c8      	blx	r9
 8007772:	3001      	adds	r0, #1
 8007774:	d01e      	beq.n	80077b4 <_printf_common+0xa4>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	6922      	ldr	r2, [r4, #16]
 800777a:	f003 0306 	and.w	r3, r3, #6
 800777e:	2b04      	cmp	r3, #4
 8007780:	bf02      	ittt	eq
 8007782:	68e5      	ldreq	r5, [r4, #12]
 8007784:	6833      	ldreq	r3, [r6, #0]
 8007786:	1aed      	subeq	r5, r5, r3
 8007788:	68a3      	ldr	r3, [r4, #8]
 800778a:	bf0c      	ite	eq
 800778c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007790:	2500      	movne	r5, #0
 8007792:	4293      	cmp	r3, r2
 8007794:	bfc4      	itt	gt
 8007796:	1a9b      	subgt	r3, r3, r2
 8007798:	18ed      	addgt	r5, r5, r3
 800779a:	2600      	movs	r6, #0
 800779c:	341a      	adds	r4, #26
 800779e:	42b5      	cmp	r5, r6
 80077a0:	d11a      	bne.n	80077d8 <_printf_common+0xc8>
 80077a2:	2000      	movs	r0, #0
 80077a4:	e008      	b.n	80077b8 <_printf_common+0xa8>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4652      	mov	r2, sl
 80077aa:	4641      	mov	r1, r8
 80077ac:	4638      	mov	r0, r7
 80077ae:	47c8      	blx	r9
 80077b0:	3001      	adds	r0, #1
 80077b2:	d103      	bne.n	80077bc <_printf_common+0xac>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077bc:	3501      	adds	r5, #1
 80077be:	e7c6      	b.n	800774e <_printf_common+0x3e>
 80077c0:	18e1      	adds	r1, r4, r3
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	2030      	movs	r0, #48	@ 0x30
 80077c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077ca:	4422      	add	r2, r4
 80077cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077d4:	3302      	adds	r3, #2
 80077d6:	e7c7      	b.n	8007768 <_printf_common+0x58>
 80077d8:	2301      	movs	r3, #1
 80077da:	4622      	mov	r2, r4
 80077dc:	4641      	mov	r1, r8
 80077de:	4638      	mov	r0, r7
 80077e0:	47c8      	blx	r9
 80077e2:	3001      	adds	r0, #1
 80077e4:	d0e6      	beq.n	80077b4 <_printf_common+0xa4>
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7d9      	b.n	800779e <_printf_common+0x8e>
	...

080077ec <_printf_i>:
 80077ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	7e0f      	ldrb	r7, [r1, #24]
 80077f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077f4:	2f78      	cmp	r7, #120	@ 0x78
 80077f6:	4691      	mov	r9, r2
 80077f8:	4680      	mov	r8, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	469a      	mov	sl, r3
 80077fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007802:	d807      	bhi.n	8007814 <_printf_i+0x28>
 8007804:	2f62      	cmp	r7, #98	@ 0x62
 8007806:	d80a      	bhi.n	800781e <_printf_i+0x32>
 8007808:	2f00      	cmp	r7, #0
 800780a:	f000 80d1 	beq.w	80079b0 <_printf_i+0x1c4>
 800780e:	2f58      	cmp	r7, #88	@ 0x58
 8007810:	f000 80b8 	beq.w	8007984 <_printf_i+0x198>
 8007814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800781c:	e03a      	b.n	8007894 <_printf_i+0xa8>
 800781e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007822:	2b15      	cmp	r3, #21
 8007824:	d8f6      	bhi.n	8007814 <_printf_i+0x28>
 8007826:	a101      	add	r1, pc, #4	@ (adr r1, 800782c <_printf_i+0x40>)
 8007828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800782c:	08007885 	.word	0x08007885
 8007830:	08007899 	.word	0x08007899
 8007834:	08007815 	.word	0x08007815
 8007838:	08007815 	.word	0x08007815
 800783c:	08007815 	.word	0x08007815
 8007840:	08007815 	.word	0x08007815
 8007844:	08007899 	.word	0x08007899
 8007848:	08007815 	.word	0x08007815
 800784c:	08007815 	.word	0x08007815
 8007850:	08007815 	.word	0x08007815
 8007854:	08007815 	.word	0x08007815
 8007858:	08007997 	.word	0x08007997
 800785c:	080078c3 	.word	0x080078c3
 8007860:	08007951 	.word	0x08007951
 8007864:	08007815 	.word	0x08007815
 8007868:	08007815 	.word	0x08007815
 800786c:	080079b9 	.word	0x080079b9
 8007870:	08007815 	.word	0x08007815
 8007874:	080078c3 	.word	0x080078c3
 8007878:	08007815 	.word	0x08007815
 800787c:	08007815 	.word	0x08007815
 8007880:	08007959 	.word	0x08007959
 8007884:	6833      	ldr	r3, [r6, #0]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6032      	str	r2, [r6, #0]
 800788c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007894:	2301      	movs	r3, #1
 8007896:	e09c      	b.n	80079d2 <_printf_i+0x1e6>
 8007898:	6833      	ldr	r3, [r6, #0]
 800789a:	6820      	ldr	r0, [r4, #0]
 800789c:	1d19      	adds	r1, r3, #4
 800789e:	6031      	str	r1, [r6, #0]
 80078a0:	0606      	lsls	r6, r0, #24
 80078a2:	d501      	bpl.n	80078a8 <_printf_i+0xbc>
 80078a4:	681d      	ldr	r5, [r3, #0]
 80078a6:	e003      	b.n	80078b0 <_printf_i+0xc4>
 80078a8:	0645      	lsls	r5, r0, #25
 80078aa:	d5fb      	bpl.n	80078a4 <_printf_i+0xb8>
 80078ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078b0:	2d00      	cmp	r5, #0
 80078b2:	da03      	bge.n	80078bc <_printf_i+0xd0>
 80078b4:	232d      	movs	r3, #45	@ 0x2d
 80078b6:	426d      	negs	r5, r5
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078bc:	4858      	ldr	r0, [pc, #352]	@ (8007a20 <_printf_i+0x234>)
 80078be:	230a      	movs	r3, #10
 80078c0:	e011      	b.n	80078e6 <_printf_i+0xfa>
 80078c2:	6821      	ldr	r1, [r4, #0]
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	0608      	lsls	r0, r1, #24
 80078c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078cc:	d402      	bmi.n	80078d4 <_printf_i+0xe8>
 80078ce:	0649      	lsls	r1, r1, #25
 80078d0:	bf48      	it	mi
 80078d2:	b2ad      	uxthmi	r5, r5
 80078d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078d6:	4852      	ldr	r0, [pc, #328]	@ (8007a20 <_printf_i+0x234>)
 80078d8:	6033      	str	r3, [r6, #0]
 80078da:	bf14      	ite	ne
 80078dc:	230a      	movne	r3, #10
 80078de:	2308      	moveq	r3, #8
 80078e0:	2100      	movs	r1, #0
 80078e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078e6:	6866      	ldr	r6, [r4, #4]
 80078e8:	60a6      	str	r6, [r4, #8]
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	db05      	blt.n	80078fa <_printf_i+0x10e>
 80078ee:	6821      	ldr	r1, [r4, #0]
 80078f0:	432e      	orrs	r6, r5
 80078f2:	f021 0104 	bic.w	r1, r1, #4
 80078f6:	6021      	str	r1, [r4, #0]
 80078f8:	d04b      	beq.n	8007992 <_printf_i+0x1a6>
 80078fa:	4616      	mov	r6, r2
 80078fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007900:	fb03 5711 	mls	r7, r3, r1, r5
 8007904:	5dc7      	ldrb	r7, [r0, r7]
 8007906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800790a:	462f      	mov	r7, r5
 800790c:	42bb      	cmp	r3, r7
 800790e:	460d      	mov	r5, r1
 8007910:	d9f4      	bls.n	80078fc <_printf_i+0x110>
 8007912:	2b08      	cmp	r3, #8
 8007914:	d10b      	bne.n	800792e <_printf_i+0x142>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	07df      	lsls	r7, r3, #31
 800791a:	d508      	bpl.n	800792e <_printf_i+0x142>
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	6861      	ldr	r1, [r4, #4]
 8007920:	4299      	cmp	r1, r3
 8007922:	bfde      	ittt	le
 8007924:	2330      	movle	r3, #48	@ 0x30
 8007926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800792a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800792e:	1b92      	subs	r2, r2, r6
 8007930:	6122      	str	r2, [r4, #16]
 8007932:	f8cd a000 	str.w	sl, [sp]
 8007936:	464b      	mov	r3, r9
 8007938:	aa03      	add	r2, sp, #12
 800793a:	4621      	mov	r1, r4
 800793c:	4640      	mov	r0, r8
 800793e:	f7ff fee7 	bl	8007710 <_printf_common>
 8007942:	3001      	adds	r0, #1
 8007944:	d14a      	bne.n	80079dc <_printf_i+0x1f0>
 8007946:	f04f 30ff 	mov.w	r0, #4294967295
 800794a:	b004      	add	sp, #16
 800794c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	f043 0320 	orr.w	r3, r3, #32
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	4832      	ldr	r0, [pc, #200]	@ (8007a24 <_printf_i+0x238>)
 800795a:	2778      	movs	r7, #120	@ 0x78
 800795c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	6831      	ldr	r1, [r6, #0]
 8007964:	061f      	lsls	r7, r3, #24
 8007966:	f851 5b04 	ldr.w	r5, [r1], #4
 800796a:	d402      	bmi.n	8007972 <_printf_i+0x186>
 800796c:	065f      	lsls	r7, r3, #25
 800796e:	bf48      	it	mi
 8007970:	b2ad      	uxthmi	r5, r5
 8007972:	6031      	str	r1, [r6, #0]
 8007974:	07d9      	lsls	r1, r3, #31
 8007976:	bf44      	itt	mi
 8007978:	f043 0320 	orrmi.w	r3, r3, #32
 800797c:	6023      	strmi	r3, [r4, #0]
 800797e:	b11d      	cbz	r5, 8007988 <_printf_i+0x19c>
 8007980:	2310      	movs	r3, #16
 8007982:	e7ad      	b.n	80078e0 <_printf_i+0xf4>
 8007984:	4826      	ldr	r0, [pc, #152]	@ (8007a20 <_printf_i+0x234>)
 8007986:	e7e9      	b.n	800795c <_printf_i+0x170>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	f023 0320 	bic.w	r3, r3, #32
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	e7f6      	b.n	8007980 <_printf_i+0x194>
 8007992:	4616      	mov	r6, r2
 8007994:	e7bd      	b.n	8007912 <_printf_i+0x126>
 8007996:	6833      	ldr	r3, [r6, #0]
 8007998:	6825      	ldr	r5, [r4, #0]
 800799a:	6961      	ldr	r1, [r4, #20]
 800799c:	1d18      	adds	r0, r3, #4
 800799e:	6030      	str	r0, [r6, #0]
 80079a0:	062e      	lsls	r6, r5, #24
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	d501      	bpl.n	80079aa <_printf_i+0x1be>
 80079a6:	6019      	str	r1, [r3, #0]
 80079a8:	e002      	b.n	80079b0 <_printf_i+0x1c4>
 80079aa:	0668      	lsls	r0, r5, #25
 80079ac:	d5fb      	bpl.n	80079a6 <_printf_i+0x1ba>
 80079ae:	8019      	strh	r1, [r3, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	4616      	mov	r6, r2
 80079b6:	e7bc      	b.n	8007932 <_printf_i+0x146>
 80079b8:	6833      	ldr	r3, [r6, #0]
 80079ba:	1d1a      	adds	r2, r3, #4
 80079bc:	6032      	str	r2, [r6, #0]
 80079be:	681e      	ldr	r6, [r3, #0]
 80079c0:	6862      	ldr	r2, [r4, #4]
 80079c2:	2100      	movs	r1, #0
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7f8 fc8b 	bl	80002e0 <memchr>
 80079ca:	b108      	cbz	r0, 80079d0 <_printf_i+0x1e4>
 80079cc:	1b80      	subs	r0, r0, r6
 80079ce:	6060      	str	r0, [r4, #4]
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	2300      	movs	r3, #0
 80079d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079da:	e7aa      	b.n	8007932 <_printf_i+0x146>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	4632      	mov	r2, r6
 80079e0:	4649      	mov	r1, r9
 80079e2:	4640      	mov	r0, r8
 80079e4:	47d0      	blx	sl
 80079e6:	3001      	adds	r0, #1
 80079e8:	d0ad      	beq.n	8007946 <_printf_i+0x15a>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	079b      	lsls	r3, r3, #30
 80079ee:	d413      	bmi.n	8007a18 <_printf_i+0x22c>
 80079f0:	68e0      	ldr	r0, [r4, #12]
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	4298      	cmp	r0, r3
 80079f6:	bfb8      	it	lt
 80079f8:	4618      	movlt	r0, r3
 80079fa:	e7a6      	b.n	800794a <_printf_i+0x15e>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4632      	mov	r2, r6
 8007a00:	4649      	mov	r1, r9
 8007a02:	4640      	mov	r0, r8
 8007a04:	47d0      	blx	sl
 8007a06:	3001      	adds	r0, #1
 8007a08:	d09d      	beq.n	8007946 <_printf_i+0x15a>
 8007a0a:	3501      	adds	r5, #1
 8007a0c:	68e3      	ldr	r3, [r4, #12]
 8007a0e:	9903      	ldr	r1, [sp, #12]
 8007a10:	1a5b      	subs	r3, r3, r1
 8007a12:	42ab      	cmp	r3, r5
 8007a14:	dcf2      	bgt.n	80079fc <_printf_i+0x210>
 8007a16:	e7eb      	b.n	80079f0 <_printf_i+0x204>
 8007a18:	2500      	movs	r5, #0
 8007a1a:	f104 0619 	add.w	r6, r4, #25
 8007a1e:	e7f5      	b.n	8007a0c <_printf_i+0x220>
 8007a20:	08008561 	.word	0x08008561
 8007a24:	08008572 	.word	0x08008572

08007a28 <__sflush_r>:
 8007a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a30:	0716      	lsls	r6, r2, #28
 8007a32:	4605      	mov	r5, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	d454      	bmi.n	8007ae2 <__sflush_r+0xba>
 8007a38:	684b      	ldr	r3, [r1, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dc02      	bgt.n	8007a44 <__sflush_r+0x1c>
 8007a3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dd48      	ble.n	8007ad6 <__sflush_r+0xae>
 8007a44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	d045      	beq.n	8007ad6 <__sflush_r+0xae>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a50:	682f      	ldr	r7, [r5, #0]
 8007a52:	6a21      	ldr	r1, [r4, #32]
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	d030      	beq.n	8007aba <__sflush_r+0x92>
 8007a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	0759      	lsls	r1, r3, #29
 8007a5e:	d505      	bpl.n	8007a6c <__sflush_r+0x44>
 8007a60:	6863      	ldr	r3, [r4, #4]
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a66:	b10b      	cbz	r3, 8007a6c <__sflush_r+0x44>
 8007a68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b0      	blx	r6
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	d106      	bne.n	8007a8a <__sflush_r+0x62>
 8007a7c:	6829      	ldr	r1, [r5, #0]
 8007a7e:	291d      	cmp	r1, #29
 8007a80:	d82b      	bhi.n	8007ada <__sflush_r+0xb2>
 8007a82:	4a2a      	ldr	r2, [pc, #168]	@ (8007b2c <__sflush_r+0x104>)
 8007a84:	40ca      	lsrs	r2, r1
 8007a86:	07d6      	lsls	r6, r2, #31
 8007a88:	d527      	bpl.n	8007ada <__sflush_r+0xb2>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	6062      	str	r2, [r4, #4]
 8007a8e:	04d9      	lsls	r1, r3, #19
 8007a90:	6922      	ldr	r2, [r4, #16]
 8007a92:	6022      	str	r2, [r4, #0]
 8007a94:	d504      	bpl.n	8007aa0 <__sflush_r+0x78>
 8007a96:	1c42      	adds	r2, r0, #1
 8007a98:	d101      	bne.n	8007a9e <__sflush_r+0x76>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	b903      	cbnz	r3, 8007aa0 <__sflush_r+0x78>
 8007a9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa2:	602f      	str	r7, [r5, #0]
 8007aa4:	b1b9      	cbz	r1, 8007ad6 <__sflush_r+0xae>
 8007aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d002      	beq.n	8007ab4 <__sflush_r+0x8c>
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7ff fbf4 	bl	800729c <_free_r>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ab8:	e00d      	b.n	8007ad6 <__sflush_r+0xae>
 8007aba:	2301      	movs	r3, #1
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b0      	blx	r6
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	1c50      	adds	r0, r2, #1
 8007ac4:	d1c9      	bne.n	8007a5a <__sflush_r+0x32>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0c6      	beq.n	8007a5a <__sflush_r+0x32>
 8007acc:	2b1d      	cmp	r3, #29
 8007ace:	d001      	beq.n	8007ad4 <__sflush_r+0xac>
 8007ad0:	2b16      	cmp	r3, #22
 8007ad2:	d11e      	bne.n	8007b12 <__sflush_r+0xea>
 8007ad4:	602f      	str	r7, [r5, #0]
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e022      	b.n	8007b20 <__sflush_r+0xf8>
 8007ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ade:	b21b      	sxth	r3, r3
 8007ae0:	e01b      	b.n	8007b1a <__sflush_r+0xf2>
 8007ae2:	690f      	ldr	r7, [r1, #16]
 8007ae4:	2f00      	cmp	r7, #0
 8007ae6:	d0f6      	beq.n	8007ad6 <__sflush_r+0xae>
 8007ae8:	0793      	lsls	r3, r2, #30
 8007aea:	680e      	ldr	r6, [r1, #0]
 8007aec:	bf08      	it	eq
 8007aee:	694b      	ldreq	r3, [r1, #20]
 8007af0:	600f      	str	r7, [r1, #0]
 8007af2:	bf18      	it	ne
 8007af4:	2300      	movne	r3, #0
 8007af6:	eba6 0807 	sub.w	r8, r6, r7
 8007afa:	608b      	str	r3, [r1, #8]
 8007afc:	f1b8 0f00 	cmp.w	r8, #0
 8007b00:	dde9      	ble.n	8007ad6 <__sflush_r+0xae>
 8007b02:	6a21      	ldr	r1, [r4, #32]
 8007b04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b06:	4643      	mov	r3, r8
 8007b08:	463a      	mov	r2, r7
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b0      	blx	r6
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	dc08      	bgt.n	8007b24 <__sflush_r+0xfc>
 8007b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b24:	4407      	add	r7, r0
 8007b26:	eba8 0800 	sub.w	r8, r8, r0
 8007b2a:	e7e7      	b.n	8007afc <__sflush_r+0xd4>
 8007b2c:	20400001 	.word	0x20400001

08007b30 <_fflush_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	690b      	ldr	r3, [r1, #16]
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b913      	cbnz	r3, 8007b40 <_fflush_r+0x10>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	b118      	cbz	r0, 8007b4a <_fflush_r+0x1a>
 8007b42:	6a03      	ldr	r3, [r0, #32]
 8007b44:	b90b      	cbnz	r3, 8007b4a <_fflush_r+0x1a>
 8007b46:	f7ff faa1 	bl	800708c <__sinit>
 8007b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f3      	beq.n	8007b3a <_fflush_r+0xa>
 8007b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b54:	07d0      	lsls	r0, r2, #31
 8007b56:	d404      	bmi.n	8007b62 <_fflush_r+0x32>
 8007b58:	0599      	lsls	r1, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_fflush_r+0x32>
 8007b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b5e:	f7ff fb9a 	bl	8007296 <__retarget_lock_acquire_recursive>
 8007b62:	4628      	mov	r0, r5
 8007b64:	4621      	mov	r1, r4
 8007b66:	f7ff ff5f 	bl	8007a28 <__sflush_r>
 8007b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b6c:	07da      	lsls	r2, r3, #31
 8007b6e:	4605      	mov	r5, r0
 8007b70:	d4e4      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	059b      	lsls	r3, r3, #22
 8007b76:	d4e1      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b7a:	f7ff fb8d 	bl	8007298 <__retarget_lock_release_recursive>
 8007b7e:	e7dd      	b.n	8007b3c <_fflush_r+0xc>

08007b80 <__swbuf_r>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	460e      	mov	r6, r1
 8007b84:	4614      	mov	r4, r2
 8007b86:	4605      	mov	r5, r0
 8007b88:	b118      	cbz	r0, 8007b92 <__swbuf_r+0x12>
 8007b8a:	6a03      	ldr	r3, [r0, #32]
 8007b8c:	b90b      	cbnz	r3, 8007b92 <__swbuf_r+0x12>
 8007b8e:	f7ff fa7d 	bl	800708c <__sinit>
 8007b92:	69a3      	ldr	r3, [r4, #24]
 8007b94:	60a3      	str	r3, [r4, #8]
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	071a      	lsls	r2, r3, #28
 8007b9a:	d501      	bpl.n	8007ba0 <__swbuf_r+0x20>
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	b943      	cbnz	r3, 8007bb2 <__swbuf_r+0x32>
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f82a 	bl	8007bfc <__swsetup_r>
 8007ba8:	b118      	cbz	r0, 8007bb2 <__swbuf_r+0x32>
 8007baa:	f04f 37ff 	mov.w	r7, #4294967295
 8007bae:	4638      	mov	r0, r7
 8007bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	6922      	ldr	r2, [r4, #16]
 8007bb6:	1a98      	subs	r0, r3, r2
 8007bb8:	6963      	ldr	r3, [r4, #20]
 8007bba:	b2f6      	uxtb	r6, r6
 8007bbc:	4283      	cmp	r3, r0
 8007bbe:	4637      	mov	r7, r6
 8007bc0:	dc05      	bgt.n	8007bce <__swbuf_r+0x4e>
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	f7ff ffb3 	bl	8007b30 <_fflush_r>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1ed      	bne.n	8007baa <__swbuf_r+0x2a>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	60a3      	str	r3, [r4, #8]
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	701e      	strb	r6, [r3, #0]
 8007bdc:	6962      	ldr	r2, [r4, #20]
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d004      	beq.n	8007bee <__swbuf_r+0x6e>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	07db      	lsls	r3, r3, #31
 8007be8:	d5e1      	bpl.n	8007bae <__swbuf_r+0x2e>
 8007bea:	2e0a      	cmp	r6, #10
 8007bec:	d1df      	bne.n	8007bae <__swbuf_r+0x2e>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f7ff ff9d 	bl	8007b30 <_fflush_r>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d0d9      	beq.n	8007bae <__swbuf_r+0x2e>
 8007bfa:	e7d6      	b.n	8007baa <__swbuf_r+0x2a>

08007bfc <__swsetup_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4b29      	ldr	r3, [pc, #164]	@ (8007ca4 <__swsetup_r+0xa8>)
 8007c00:	4605      	mov	r5, r0
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	460c      	mov	r4, r1
 8007c06:	b118      	cbz	r0, 8007c10 <__swsetup_r+0x14>
 8007c08:	6a03      	ldr	r3, [r0, #32]
 8007c0a:	b90b      	cbnz	r3, 8007c10 <__swsetup_r+0x14>
 8007c0c:	f7ff fa3e 	bl	800708c <__sinit>
 8007c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c14:	0719      	lsls	r1, r3, #28
 8007c16:	d422      	bmi.n	8007c5e <__swsetup_r+0x62>
 8007c18:	06da      	lsls	r2, r3, #27
 8007c1a:	d407      	bmi.n	8007c2c <__swsetup_r+0x30>
 8007c1c:	2209      	movs	r2, #9
 8007c1e:	602a      	str	r2, [r5, #0]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2a:	e033      	b.n	8007c94 <__swsetup_r+0x98>
 8007c2c:	0758      	lsls	r0, r3, #29
 8007c2e:	d512      	bpl.n	8007c56 <__swsetup_r+0x5a>
 8007c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c32:	b141      	cbz	r1, 8007c46 <__swsetup_r+0x4a>
 8007c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d002      	beq.n	8007c42 <__swsetup_r+0x46>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7ff fb2d 	bl	800729c <_free_r>
 8007c42:	2300      	movs	r3, #0
 8007c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	f043 0308 	orr.w	r3, r3, #8
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	b94b      	cbnz	r3, 8007c76 <__swsetup_r+0x7a>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6c:	d003      	beq.n	8007c76 <__swsetup_r+0x7a>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 f84f 	bl	8007d14 <__smakebuf_r>
 8007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7a:	f013 0201 	ands.w	r2, r3, #1
 8007c7e:	d00a      	beq.n	8007c96 <__swsetup_r+0x9a>
 8007c80:	2200      	movs	r2, #0
 8007c82:	60a2      	str	r2, [r4, #8]
 8007c84:	6962      	ldr	r2, [r4, #20]
 8007c86:	4252      	negs	r2, r2
 8007c88:	61a2      	str	r2, [r4, #24]
 8007c8a:	6922      	ldr	r2, [r4, #16]
 8007c8c:	b942      	cbnz	r2, 8007ca0 <__swsetup_r+0xa4>
 8007c8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c92:	d1c5      	bne.n	8007c20 <__swsetup_r+0x24>
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	0799      	lsls	r1, r3, #30
 8007c98:	bf58      	it	pl
 8007c9a:	6962      	ldrpl	r2, [r4, #20]
 8007c9c:	60a2      	str	r2, [r4, #8]
 8007c9e:	e7f4      	b.n	8007c8a <__swsetup_r+0x8e>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7f7      	b.n	8007c94 <__swsetup_r+0x98>
 8007ca4:	24000038 	.word	0x24000038

08007ca8 <_sbrk_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d06      	ldr	r5, [pc, #24]	@ (8007cc4 <_sbrk_r+0x1c>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	f7f9 fb6a 	bl	800138c <_sbrk>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_sbrk_r+0x1a>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_sbrk_r+0x1a>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	24000324 	.word	0x24000324

08007cc8 <__swhatbuf_r>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	460c      	mov	r4, r1
 8007ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	b096      	sub	sp, #88	@ 0x58
 8007cd4:	4615      	mov	r5, r2
 8007cd6:	461e      	mov	r6, r3
 8007cd8:	da0d      	bge.n	8007cf6 <__swhatbuf_r+0x2e>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ce0:	f04f 0100 	mov.w	r1, #0
 8007ce4:	bf14      	ite	ne
 8007ce6:	2340      	movne	r3, #64	@ 0x40
 8007ce8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007cec:	2000      	movs	r0, #0
 8007cee:	6031      	str	r1, [r6, #0]
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	b016      	add	sp, #88	@ 0x58
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	466a      	mov	r2, sp
 8007cf8:	f000 f848 	bl	8007d8c <_fstat_r>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	dbec      	blt.n	8007cda <__swhatbuf_r+0x12>
 8007d00:	9901      	ldr	r1, [sp, #4]
 8007d02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d0a:	4259      	negs	r1, r3
 8007d0c:	4159      	adcs	r1, r3
 8007d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d12:	e7eb      	b.n	8007cec <__swhatbuf_r+0x24>

08007d14 <__smakebuf_r>:
 8007d14:	898b      	ldrh	r3, [r1, #12]
 8007d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d18:	079d      	lsls	r5, r3, #30
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	d507      	bpl.n	8007d30 <__smakebuf_r+0x1c>
 8007d20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	2301      	movs	r3, #1
 8007d2a:	6163      	str	r3, [r4, #20]
 8007d2c:	b003      	add	sp, #12
 8007d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d30:	ab01      	add	r3, sp, #4
 8007d32:	466a      	mov	r2, sp
 8007d34:	f7ff ffc8 	bl	8007cc8 <__swhatbuf_r>
 8007d38:	9f00      	ldr	r7, [sp, #0]
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff fb18 	bl	8007374 <_malloc_r>
 8007d44:	b948      	cbnz	r0, 8007d5a <__smakebuf_r+0x46>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	059a      	lsls	r2, r3, #22
 8007d4c:	d4ee      	bmi.n	8007d2c <__smakebuf_r+0x18>
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	f043 0302 	orr.w	r3, r3, #2
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	e7e2      	b.n	8007d20 <__smakebuf_r+0xc>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	6020      	str	r0, [r4, #0]
 8007d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	9b01      	ldr	r3, [sp, #4]
 8007d66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d6a:	b15b      	cbz	r3, 8007d84 <__smakebuf_r+0x70>
 8007d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d70:	4630      	mov	r0, r6
 8007d72:	f000 f81d 	bl	8007db0 <_isatty_r>
 8007d76:	b128      	cbz	r0, 8007d84 <__smakebuf_r+0x70>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	431d      	orrs	r5, r3
 8007d88:	81a5      	strh	r5, [r4, #12]
 8007d8a:	e7cf      	b.n	8007d2c <__smakebuf_r+0x18>

08007d8c <_fstat_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d07      	ldr	r5, [pc, #28]	@ (8007dac <_fstat_r+0x20>)
 8007d90:	2300      	movs	r3, #0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	4611      	mov	r1, r2
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	f7f9 face 	bl	800133a <_fstat>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	d102      	bne.n	8007da8 <_fstat_r+0x1c>
 8007da2:	682b      	ldr	r3, [r5, #0]
 8007da4:	b103      	cbz	r3, 8007da8 <_fstat_r+0x1c>
 8007da6:	6023      	str	r3, [r4, #0]
 8007da8:	bd38      	pop	{r3, r4, r5, pc}
 8007daa:	bf00      	nop
 8007dac:	24000324 	.word	0x24000324

08007db0 <_isatty_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d06      	ldr	r5, [pc, #24]	@ (8007dcc <_isatty_r+0x1c>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	f7f9 facd 	bl	800135a <_isatty>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d102      	bne.n	8007dca <_isatty_r+0x1a>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	b103      	cbz	r3, 8007dca <_isatty_r+0x1a>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	24000324 	.word	0x24000324

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
