
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009524  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a58  080097c4  080097c4  0000a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b21c  0800b21c  0000c21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b224  0800b224  0000c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b228  0800b228  0000c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800b22c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800b2b4  0000d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800b2b4  0000d334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b88  00000000  00000000  0000d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cb0  00000000  00000000  00022c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f08  00000000  00000000  000258f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b7f  00000000  00000000  000267f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384f5  00000000  00000000  00027377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001631a  00000000  00000000  0005f86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ef6d  00000000  00000000  00075b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4af3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004564  00000000  00000000  001d4b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001d909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080097ac 	.word	0x080097ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080097ac 	.word	0x080097ac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f008 fa0d 	bl	8008ad4 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 fab9 	bl	8000c34 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f008 fa02 	bl	8008ad4 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	080097c4 	.word	0x080097c4
 80006e0:	080097f0 	.word	0x080097f0

080006e4 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f000 faa0 	bl	8000c34 <CC1201_SendStrobe>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2033      	movs	r0, #51	@ 0x33
 800070a:	f000 fa93 	bl	8000c34 <CC1201_SendStrobe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2034      	movs	r0, #52	@ 0x34
 8000724:	f000 fa86 	bl	8000c34 <CC1201_SendStrobe>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2035      	movs	r0, #53	@ 0x35
 800073e:	f000 fa79 	bl	8000c34 <CC1201_SendStrobe>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	2036      	movs	r0, #54	@ 0x36
 8000758:	f000 fa6c 	bl	8000c34 <CC1201_SendStrobe>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	203a      	movs	r0, #58	@ 0x3a
 8000772:	f000 fa5f 	bl	8000c34 <CC1201_SendStrobe>
 8000776:	4603      	mov	r3, r0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	203b      	movs	r0, #59	@ 0x3b
 800078c:	f000 fa52 	bl	8000c34 <CC1201_SendStrobe>
 8000790:	4603      	mov	r3, r0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 80007a4:	4809      	ldr	r0, [pc, #36]	@ (80007cc <CC1201_Nop+0x30>)
 80007a6:	f008 f995 	bl	8008ad4 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	203d      	movs	r0, #61	@ 0x3d
 80007ae:	f000 fa41 	bl	8000c34 <CC1201_SendStrobe>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <CC1201_Nop+0x34>)
 80007bc:	f008 f98a 	bl	8008ad4 <iprintf>
    return result;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	08009820 	.word	0x08009820
 80007d0:	08009848 	.word	0x08009848

080007d4 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af02      	add	r7, sp, #8
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d909      	bls.n	80007fa <CC1201_ReadStatus+0x26>
        // Extended register single read: first byte is 0x2F with R/W bit set
        tx_buffer[0] = 0x2F | CC1201_READ_BIT; // Extended register READ command
 80007e6:	23af      	movs	r3, #175	@ 0xaf
 80007e8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 80007f0:	2300      	movs	r3, #0
 80007f2:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007f4:	2303      	movs	r3, #3
 80007f6:	75fb      	strb	r3, [r7, #23]
 80007f8:	e009      	b.n	800080e <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000802:	b2db      	uxtb	r3, r3
 8000804:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 8000806:	2300      	movs	r3, #0
 8000808:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000814:	4815      	ldr	r0, [pc, #84]	@ (800086c <CC1201_ReadStatus+0x98>)
 8000816:	f003 f833 	bl	8003880 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	b29b      	uxth	r3, r3
 800081e:	f107 020c 	add.w	r2, r7, #12
 8000822:	f107 0110 	add.w	r1, r7, #16
 8000826:	f04f 30ff 	mov.w	r0, #4294967295
 800082a:	9000      	str	r0, [sp, #0]
 800082c:	4810      	ldr	r0, [pc, #64]	@ (8000870 <CC1201_ReadStatus+0x9c>)
 800082e:	f006 f9d3 	bl	8006bd8 <HAL_SPI_TransmitReceive>
 8000832:	4603      	mov	r3, r0
 8000834:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800083c:	480b      	ldr	r0, [pc, #44]	@ (800086c <CC1201_ReadStatus+0x98>)
 800083e:	f003 f81f 	bl	8003880 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000842:	7dbb      	ldrb	r3, [r7, #22]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10c      	bne.n	8000862 <CC1201_ReadStatus+0x8e>
        if (read_data != NULL) {
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d009      	beq.n	8000862 <CC1201_ReadStatus+0x8e>
            if (reg_addr > 0xFF) {
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	2bff      	cmp	r3, #255	@ 0xff
 8000852:	d903      	bls.n	800085c <CC1201_ReadStatus+0x88>
                *read_data = rx_buffer[2]; // Extended register data
 8000854:	7bba      	ldrb	r2, [r7, #14]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e002      	b.n	8000862 <CC1201_ReadStatus+0x8e>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 800085c:	7b7a      	ldrb	r2, [r7, #13]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 8000862:	7dbb      	ldrb	r3, [r7, #22]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58021000 	.word	0x58021000
 8000870:	240000b8 	.word	0x240000b8

08000874 <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	2bff      	cmp	r3, #255	@ 0xff
 8000888:	d909      	bls.n	800089e <CC1201_WriteRegister+0x2a>
        // Extended register single write: first byte is 0x2F with WRITE (no read bit)
        tx_buffer[0] = 0x2F; // Extended register WRITE command
 800088a:	232f      	movs	r3, #47	@ 0x2f
 800088c:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 8000894:	797b      	ldrb	r3, [r7, #5]
 8000896:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 8000898:	2303      	movs	r3, #3
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e006      	b.n	80008ac <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b2:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <CC1201_WriteRegister+0x70>)
 80008b4:	f002 ffe4 	bl	8003880 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	f107 0108 	add.w	r1, r7, #8
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <CC1201_WriteRegister+0x74>)
 80008c6:	f005 ff99 	bl	80067fc <HAL_SPI_Transmit>
 80008ca:	4603      	mov	r3, r0
 80008cc:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <CC1201_WriteRegister+0x70>)
 80008d6:	f002 ffd3 	bl	8003880 <HAL_GPIO_WritePin>

    return status;
 80008da:	7bbb      	ldrb	r3, [r7, #14]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	58021000 	.word	0x58021000
 80008e8:	240000b8 	.word	0x240000b8

080008ec <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	f642 7073 	movw	r0, #12147	@ 0x2f73
 80008fa:	f7ff ff6b 	bl	80007d4 <CC1201_ReadStatus>
 80008fe:	4603      	mov	r3, r0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 8000916:	f7ff ff5d 	bl	80007d4 <CC1201_ReadStatus>
 800091a:	4603      	mov	r3, r0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 8000932:	f7ff ff4f 	bl	80007d4 <CC1201_ReadStatus>
 8000936:	4603      	mov	r3, r0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000944:	b08f      	sub	sp, #60	@ 0x3c
 8000946:	af02      	add	r7, sp, #8
 8000948:	6178      	str	r0, [r7, #20]
 800094a:	460b      	mov	r3, r1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	74fb      	strb	r3, [r7, #19]
 8000950:	466b      	mov	r3, sp
 8000952:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d005      	beq.n	8000966 <CC1201_WriteTxFifo+0x26>
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <CC1201_WriteTxFifo+0x26>
 8000960:	7cfb      	ldrb	r3, [r7, #19]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e08a      	b.n	8000a80 <CC1201_WriteTxFifo+0x140>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800096a:	7cfb      	ldrb	r3, [r7, #19]
 800096c:	1c99      	adds	r1, r3, #2
 800096e:	1e4b      	subs	r3, r1, #1
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000972:	460a      	mov	r2, r1
 8000974:	2300      	movs	r3, #0
 8000976:	603a      	str	r2, [r7, #0]
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	00c3      	lsls	r3, r0, #3
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	00c2      	lsls	r2, r0, #3
 8000990:	460a      	mov	r2, r1
 8000992:	2300      	movs	r3, #0
 8000994:	4692      	mov	sl, r2
 8000996:	469b      	mov	fp, r3
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	f04f 0300 	mov.w	r3, #0
 80009a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80009a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80009a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80009ac:	460b      	mov	r3, r1
 80009ae:	3307      	adds	r3, #7
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	ebad 0d03 	sub.w	sp, sp, r3
 80009b8:	ab02      	add	r3, sp, #8
 80009ba:	3300      	adds	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 80009be:	7cfb      	ldrb	r3, [r7, #19]
 80009c0:	1c99      	adds	r1, r3, #2
 80009c2:	1e4b      	subs	r3, r1, #1
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	460a      	mov	r2, r1
 80009c8:	2300      	movs	r3, #0
 80009ca:	4690      	mov	r8, r2
 80009cc:	4699      	mov	r9, r3
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009e2:	460a      	mov	r2, r1
 80009e4:	2300      	movs	r3, #0
 80009e6:	4614      	mov	r4, r2
 80009e8:	461d      	mov	r5, r3
 80009ea:	f04f 0200 	mov.w	r2, #0
 80009ee:	f04f 0300 	mov.w	r3, #0
 80009f2:	00eb      	lsls	r3, r5, #3
 80009f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009f8:	00e2      	lsls	r2, r4, #3
 80009fa:	460b      	mov	r3, r1
 80009fc:	3307      	adds	r3, #7
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	ebad 0d03 	sub.w	sp, sp, r3
 8000a06:	ab02      	add	r3, sp, #8
 8000a08:	3300      	adds	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	227f      	movs	r2, #127	@ 0x7f
 8000a10:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a18:	e00e      	b.n	8000a38 <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	441a      	add	r2, r3
 8000a22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a26:	3301      	adds	r3, #1
 8000a28:	7811      	ldrb	r1, [r2, #0]
 8000a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a2c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a32:	3301      	adds	r3, #1
 8000a34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a38:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a3c:	7cfb      	ldrb	r3, [r7, #19]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d3eb      	bcc.n	8000a1a <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a48:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <CC1201_WriteTxFifo+0x14c>)
 8000a4a:	f002 ff19 	bl	8003880 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000a4e:	7cfb      	ldrb	r3, [r7, #19]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5a:	9200      	str	r2, [sp, #0]
 8000a5c:	69fa      	ldr	r2, [r7, #28]
 8000a5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a60:	480b      	ldr	r0, [pc, #44]	@ (8000a90 <CC1201_WriteTxFifo+0x150>)
 8000a62:	f006 f8b9 	bl	8006bd8 <HAL_SPI_TransmitReceive>
 8000a66:	4603      	mov	r3, r0
 8000a68:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a70:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <CC1201_WriteTxFifo+0x14c>)
 8000a72:	f002 ff05 	bl	8003880 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000a7e:	7efb      	ldrb	r3, [r7, #27]
 8000a80:	46b5      	mov	sp, r6
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3734      	adds	r7, #52	@ 0x34
 8000a86:	46bd      	mov	sp, r7
 8000a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a8c:	58021000 	.word	0x58021000
 8000a90:	240000b8 	.word	0x240000b8

08000a94 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	b08f      	sub	sp, #60	@ 0x3c
 8000a9a:	af02      	add	r7, sp, #8
 8000a9c:	6178      	str	r0, [r7, #20]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	60fa      	str	r2, [r7, #12]
 8000aa2:	74fb      	strb	r3, [r7, #19]
 8000aa4:	466b      	mov	r3, sp
 8000aa6:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d005      	beq.n	8000aba <CC1201_ReadRxFifo+0x26>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <CC1201_ReadRxFifo+0x26>
 8000ab4:	7cfb      	ldrb	r3, [r7, #19]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e09d      	b.n	8000bfa <CC1201_ReadRxFifo+0x166>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000abe:	7cfb      	ldrb	r3, [r7, #19]
 8000ac0:	1c59      	adds	r1, r3, #1
 8000ac2:	1e4b      	subs	r3, r1, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603a      	str	r2, [r7, #0]
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	00c3      	lsls	r3, r0, #3
 8000ada:	6838      	ldr	r0, [r7, #0]
 8000adc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ae0:	6838      	ldr	r0, [r7, #0]
 8000ae2:	00c2      	lsls	r2, r0, #3
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	4692      	mov	sl, r2
 8000aea:	469b      	mov	fp, r3
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b00:	460b      	mov	r3, r1
 8000b02:	3307      	adds	r3, #7
 8000b04:	08db      	lsrs	r3, r3, #3
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	ebad 0d03 	sub.w	sp, sp, r3
 8000b0c:	ab02      	add	r3, sp, #8
 8000b0e:	3300      	adds	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000b12:	7cfb      	ldrb	r3, [r7, #19]
 8000b14:	1c59      	adds	r1, r3, #1
 8000b16:	1e4b      	subs	r3, r1, #1
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4690      	mov	r8, r2
 8000b20:	4699      	mov	r9, r3
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b36:	460a      	mov	r2, r1
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4614      	mov	r4, r2
 8000b3c:	461d      	mov	r5, r3
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	f04f 0300 	mov.w	r3, #0
 8000b46:	00eb      	lsls	r3, r5, #3
 8000b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b4c:	00e2      	lsls	r2, r4, #3
 8000b4e:	460b      	mov	r3, r1
 8000b50:	3307      	adds	r3, #7
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	ebad 0d03 	sub.w	sp, sp, r3
 8000b5a:	ab02      	add	r3, sp, #8
 8000b5c:	3300      	adds	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000b66:	2301      	movs	r3, #1
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b6c:	e009      	b.n	8000b82 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b74:	2100      	movs	r1, #0
 8000b76:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b82:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000b86:	7cfb      	ldrb	r3, [r7, #19]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d9f0      	bls.n	8000b6e <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b92:	481d      	ldr	r0, [pc, #116]	@ (8000c08 <CC1201_ReadRxFifo+0x174>)
 8000b94:	f002 fe74 	bl	8003880 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	9200      	str	r2, [sp, #0]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000baa:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <CC1201_ReadRxFifo+0x178>)
 8000bac:	f006 f814 	bl	8006bd8 <HAL_SPI_TransmitReceive>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bba:	4813      	ldr	r0, [pc, #76]	@ (8000c08 <CC1201_ReadRxFifo+0x174>)
 8000bbc:	f002 fe60 	bl	8003880 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bce:	e00e      	b.n	8000bee <CC1201_ReadRxFifo+0x15a>
        data[i] = rx_buffer[1 + i];
 8000bd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bda:	6979      	ldr	r1, [r7, #20]
 8000bdc:	440b      	add	r3, r1
 8000bde:	69f9      	ldr	r1, [r7, #28]
 8000be0:	5c8a      	ldrb	r2, [r1, r2]
 8000be2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000be4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000be8:	3301      	adds	r3, #1
 8000bea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bee:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000bf2:	7cfb      	ldrb	r3, [r7, #19]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3eb      	bcc.n	8000bd0 <CC1201_ReadRxFifo+0x13c>
    }
    
    return status;
 8000bf8:	7efb      	ldrb	r3, [r7, #27]
 8000bfa:	46b5      	mov	sp, r6
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3734      	adds	r7, #52	@ 0x34
 8000c00:	46bd      	mov	sp, r7
 8000c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c06:	bf00      	nop
 8000c08:	58021000 	.word	0x58021000
 8000c0c:	240000b8 	.word	0x240000b8

08000c10 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe8c 	bl	8000940 <CC1201_WriteTxFifo>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    // Early readiness check to avoid blocking if SPI not initialized yet
    HAL_SPI_StateTypeDef spi_state = HAL_SPI_GetState(&CC1201_SPI_HANDLE);
 8000c40:	4832      	ldr	r0, [pc, #200]	@ (8000d0c <CC1201_SendStrobe+0xd8>)
 8000c42:	f006 fd03 	bl	800764c <HAL_SPI_GetState>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] Enter CC1201_SendStrobe cmd=0x%02X, SPI state=%d\n\r", strobe_command, (int)spi_state);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	461a      	mov	r2, r3
 8000c52:	482f      	ldr	r0, [pc, #188]	@ (8000d10 <CC1201_SendStrobe+0xdc>)
 8000c54:	f007 ff3e 	bl	8008ad4 <iprintf>
    if (spi_state != HAL_SPI_STATE_READY) {
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d00a      	beq.n	8000c74 <CC1201_SendStrobe+0x40>
        printf("[DEBUG] SPI not ready, skipping strobe\n\r");
 8000c5e:	482d      	ldr	r0, [pc, #180]	@ (8000d14 <CC1201_SendStrobe+0xe0>)
 8000c60:	f007 ff38 	bl	8008ad4 <iprintf>
        if (status_byte) { *status_byte = 0x00; }
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <CC1201_SendStrobe+0x3c>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
        return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e046      	b.n	8000d02 <CC1201_SendStrobe+0xce>
    }

    // Ensure SPI is ready and CS is toggled with brief gaps
    printf("[DEBUG] SPI state before CS low: %d\n\r", (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000c74:	4825      	ldr	r0, [pc, #148]	@ (8000d0c <CC1201_SendStrobe+0xd8>)
 8000c76:	f006 fce9 	bl	800764c <HAL_SPI_GetState>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4826      	ldr	r0, [pc, #152]	@ (8000d18 <CC1201_SendStrobe+0xe4>)
 8000c80:	f007 ff28 	bl	8008ad4 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c8a:	4824      	ldr	r0, [pc, #144]	@ (8000d1c <CC1201_SendStrobe+0xe8>)
 8000c8c:	f002 fdf8 	bl	8003880 <HAL_GPIO_WritePin>
    
    // Small CS setup delay without relying on SysTick (avoid HAL_Delay hang if tick not running)
    for (volatile uint32_t i = 0; i < 300; ++i) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e003      	b.n	8000c9e <CC1201_SendStrobe+0x6a>
        __NOP();
 8000c96:	bf00      	nop
    for (volatile uint32_t i = 0; i < 300; ++i) {
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000ca4:	d3f7      	bcc.n	8000c96 <CC1201_SendStrobe+0x62>
    }

    // Perform SPI transaction
    printf("[DEBUG] About to SPI strobe 0x%02X (SPI state=%d)\n\r", strobe_command, (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	461c      	mov	r4, r3
 8000caa:	4818      	ldr	r0, [pc, #96]	@ (8000d0c <CC1201_SendStrobe+0xd8>)
 8000cac:	f006 fcce 	bl	800764c <HAL_SPI_GetState>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	481a      	ldr	r0, [pc, #104]	@ (8000d20 <CC1201_SendStrobe+0xec>)
 8000cb8:	f007 ff0c 	bl	8008ad4 <iprintf>
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000cbc:	f107 020d 	add.w	r2, r7, #13
 8000cc0:	1df9      	adds	r1, r7, #7
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4810      	ldr	r0, [pc, #64]	@ (8000d0c <CC1201_SendStrobe+0xd8>)
 8000ccc:	f005 ff84 	bl	8006bd8 <HAL_SPI_TransmitReceive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73bb      	strb	r3, [r7, #14]
    printf("[DEBUG] CC1201_SendStrobe 0x%02X -> HAL=%d, statusByte=0x%02X\n\r", strobe_command, status, rx_data);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	7bba      	ldrb	r2, [r7, #14]
 8000cda:	7b7b      	ldrb	r3, [r7, #13]
 8000cdc:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <CC1201_SendStrobe+0xf0>)
 8000cde:	f007 fef9 	bl	8008ad4 <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <CC1201_SendStrobe+0xe8>)
 8000cea:	f002 fdc9 	bl	8003880 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <CC1201_SendStrobe+0xcc>
        if (status_byte != NULL) {
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <CC1201_SendStrobe+0xcc>
            *status_byte = rx_data;
 8000cfa:	7b7a      	ldrb	r2, [r7, #13]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	240000b8 	.word	0x240000b8
 8000d10:	08009874 	.word	0x08009874
 8000d14:	080098b0 	.word	0x080098b0
 8000d18:	080098dc 	.word	0x080098dc
 8000d1c:	58021000 	.word	0x58021000
 8000d20:	08009904 	.word	0x08009904
 8000d24:	08009938 	.word	0x08009938

08000d28 <CC1201_WriteRegisterConfig>:
 * @param settings Array of register settings to write.
 * @param num_settings Number of settings in the array.
 * @return HAL_StatusTypeDef Status of the configuration (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegisterConfig(const registerSetting_t *settings, uint16_t num_settings)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
    
    for (uint16_t i = 0; i < num_settings; i++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	81bb      	strh	r3, [r7, #12]
 8000d3c:	e019      	b.n	8000d72 <CC1201_WriteRegisterConfig+0x4a>
        // Handle both standard and extended addresses via common API
        status = CC1201_WriteRegister(settings[i].addr, settings[i].data);
 8000d3e:	89bb      	ldrh	r3, [r7, #12]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	8818      	ldrh	r0, [r3, #0]
 8000d48:	89bb      	ldrh	r3, [r7, #12]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fd8e 	bl	8000874 <CC1201_WriteRegister>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK) {
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <CC1201_WriteRegisterConfig+0x3e>
            return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	e00a      	b.n	8000d7c <CC1201_WriteRegisterConfig+0x54>
        }
        
        HAL_Delay(1); // Small delay between register writes
 8000d66:	2001      	movs	r0, #1
 8000d68:	f001 ff60 	bl	8002c2c <HAL_Delay>
    for (uint16_t i = 0; i < num_settings; i++) {
 8000d6c:	89bb      	ldrh	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	81bb      	strh	r3, [r7, #12]
 8000d72:	89ba      	ldrh	r2, [r7, #12]
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3e1      	bcc.n	8000d3e <CC1201_WriteRegisterConfig+0x16>
    }
    
    return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <CC1201_GetNumPreferredSettings>:
 * @brief Gets the number of preferred settings.
 *
 * @return uint16_t Number of settings in the preferred settings array.
 */
uint16_t CC1201_GetNumPreferredSettings(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
    return sizeof(preferredSettings) / sizeof(registerSetting_t);
 8000d88:	2331      	movs	r3, #49	@ 0x31
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <CC1201_GetPreferredSettings>:
 * @brief Gets a pointer to the preferred settings array.
 *
 * @return const registerSetting_t* Pointer to the preferred settings array.
 */
const registerSetting_t* CC1201_GetPreferredSettings(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
    return preferredSettings;
 8000d98:	4b02      	ldr	r3, [pc, #8]	@ (8000da4 <CC1201_GetPreferredSettings+0x10>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	0800b0f0 	.word	0x0800b0f0

08000da8 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	4823      	ldr	r0, [pc, #140]	@ (8000e58 <print_cc1201_status+0xb0>)
 8000dca:	f007 fe83 	bl	8008ad4 <iprintf>
    switch(radio_state) {
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	d833      	bhi.n	8000e3c <print_cc1201_status+0x94>
 8000dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ddc <print_cc1201_status+0x34>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000dfd 	.word	0x08000dfd
 8000de0:	08000e05 	.word	0x08000e05
 8000de4:	08000e0d 	.word	0x08000e0d
 8000de8:	08000e15 	.word	0x08000e15
 8000dec:	08000e1d 	.word	0x08000e1d
 8000df0:	08000e25 	.word	0x08000e25
 8000df4:	08000e2d 	.word	0x08000e2d
 8000df8:	08000e35 	.word	0x08000e35
        case 0x0: printf("(IDLE)"); break;
 8000dfc:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <print_cc1201_status+0xb4>)
 8000dfe:	f007 fe69 	bl	8008ad4 <iprintf>
 8000e02:	e01f      	b.n	8000e44 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000e04:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <print_cc1201_status+0xb8>)
 8000e06:	f007 fe65 	bl	8008ad4 <iprintf>
 8000e0a:	e01b      	b.n	8000e44 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000e0c:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <print_cc1201_status+0xbc>)
 8000e0e:	f007 fe61 	bl	8008ad4 <iprintf>
 8000e12:	e017      	b.n	8000e44 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000e14:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <print_cc1201_status+0xc0>)
 8000e16:	f007 fe5d 	bl	8008ad4 <iprintf>
 8000e1a:	e013      	b.n	8000e44 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000e1c:	4813      	ldr	r0, [pc, #76]	@ (8000e6c <print_cc1201_status+0xc4>)
 8000e1e:	f007 fe59 	bl	8008ad4 <iprintf>
 8000e22:	e00f      	b.n	8000e44 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000e24:	4812      	ldr	r0, [pc, #72]	@ (8000e70 <print_cc1201_status+0xc8>)
 8000e26:	f007 fe55 	bl	8008ad4 <iprintf>
 8000e2a:	e00b      	b.n	8000e44 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000e2c:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <print_cc1201_status+0xcc>)
 8000e2e:	f007 fe51 	bl	8008ad4 <iprintf>
 8000e32:	e007      	b.n	8000e44 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000e34:	4810      	ldr	r0, [pc, #64]	@ (8000e78 <print_cc1201_status+0xd0>)
 8000e36:	f007 fe4d 	bl	8008ad4 <iprintf>
 8000e3a:	e003      	b.n	8000e44 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000e3c:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <print_cc1201_status+0xd4>)
 8000e3e:	f007 fe49 	bl	8008ad4 <iprintf>
 8000e42:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	4619      	mov	r1, r3
 8000e48:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <print_cc1201_status+0xd8>)
 8000e4a:	f007 fe43 	bl	8008ad4 <iprintf>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08009978 	.word	0x08009978
 8000e5c:	08009998 	.word	0x08009998
 8000e60:	080099a0 	.word	0x080099a0
 8000e64:	080099a8 	.word	0x080099a8
 8000e68:	080099b0 	.word	0x080099b0
 8000e6c:	080099bc 	.word	0x080099bc
 8000e70:	080099c8 	.word	0x080099c8
 8000e74:	080099d4 	.word	0x080099d4
 8000e78:	080099e4 	.word	0x080099e4
 8000e7c:	080099f4 	.word	0x080099f4
 8000e80:	08009a00 	.word	0x08009a00

08000e84 <cc1201_hardware_reset>:

// Hardware Reset Function
void cc1201_hardware_reset(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    printf("  Performing hardware reset...\n\r");
 8000e88:	480b      	ldr	r0, [pc, #44]	@ (8000eb8 <cc1201_hardware_reset+0x34>)
 8000e8a:	f007 fe23 	bl	8008ad4 <iprintf>
    
    // Pull reset pin LOW (active reset)
    HAL_GPIO_WritePin(CC1201_RESET_PORT, CC1201_RESET_PIN, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <cc1201_hardware_reset+0x38>)
 8000e94:	f002 fcf4 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Hold reset for 10ms
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f001 fec7 	bl	8002c2c <HAL_Delay>
    
    // Release reset pin HIGH (inactive)
    HAL_GPIO_WritePin(CC1201_RESET_PORT, CC1201_RESET_PIN, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <cc1201_hardware_reset+0x38>)
 8000ea4:	f002 fcec 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(50); // Wait for reset to complete
 8000ea8:	2032      	movs	r0, #50	@ 0x32
 8000eaa:	f001 febf 	bl	8002c2c <HAL_Delay>
    
    printf("  Hardware reset complete\n\r");
 8000eae:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <cc1201_hardware_reset+0x3c>)
 8000eb0:	f007 fe10 	bl	8008ad4 <iprintf>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	08009a0c 	.word	0x08009a0c
 8000ebc:	58020c00 	.word	0x58020c00
 8000ec0:	08009a30 	.word	0x08009a30

08000ec4 <cc1201_power_up_sequence>:

// CC1201 Power-up and Reset Sequence  
void cc1201_power_up_sequence(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
    printf("\n=== CC1201 POWER-UP SEQUENCE ===\n\r");
 8000eca:	4838      	ldr	r0, [pc, #224]	@ (8000fac <cc1201_power_up_sequence+0xe8>)
 8000ecc:	f007 fe02 	bl	8008ad4 <iprintf>
    
    // 1. Ensure CS is high (inactive)
    printf("1. Setting CS HIGH (inactive)...\n\r");
 8000ed0:	4837      	ldr	r0, [pc, #220]	@ (8000fb0 <cc1201_power_up_sequence+0xec>)
 8000ed2:	f007 fdff 	bl	8008ad4 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000edc:	4835      	ldr	r0, [pc, #212]	@ (8000fb4 <cc1201_power_up_sequence+0xf0>)
 8000ede:	f002 fccf 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f001 fea2 	bl	8002c2c <HAL_Delay>
    
    // 2. Hardware reset sequence
    printf("2. Hardware reset sequence...\n\r");
 8000ee8:	4833      	ldr	r0, [pc, #204]	@ (8000fb8 <cc1201_power_up_sequence+0xf4>)
 8000eea:	f007 fdf3 	bl	8008ad4 <iprintf>
    cc1201_hardware_reset();
 8000eee:	f7ff ffc9 	bl	8000e84 <cc1201_hardware_reset>
    
    // 3. Power-up delay (let voltages stabilize)
    printf("3. Power stabilization delay (100ms)...\n\r");
 8000ef2:	4832      	ldr	r0, [pc, #200]	@ (8000fbc <cc1201_power_up_sequence+0xf8>)
 8000ef4:	f007 fdee 	bl	8008ad4 <iprintf>
    HAL_Delay(100);
 8000ef8:	2064      	movs	r0, #100	@ 0x64
 8000efa:	f001 fe97 	bl	8002c2c <HAL_Delay>
    
    // 4. Crystal oscillator startup time
    printf("4. Crystal oscillator startup delay (10ms)...\n\r");
 8000efe:	4830      	ldr	r0, [pc, #192]	@ (8000fc0 <cc1201_power_up_sequence+0xfc>)
 8000f00:	f007 fde8 	bl	8008ad4 <iprintf>
    HAL_Delay(10);
 8000f04:	200a      	movs	r0, #10
 8000f06:	f001 fe91 	bl	8002c2c <HAL_Delay>
    
    // 5. Test basic communication after hardware reset
    printf("5. Testing communication after hardware reset...\n\r");
 8000f0a:	482e      	ldr	r0, [pc, #184]	@ (8000fc4 <cc1201_power_up_sequence+0x100>)
 8000f0c:	f007 fde2 	bl	8008ad4 <iprintf>
    uint8_t post_hw_reset_status = 0xFF;
 8000f10:	23ff      	movs	r3, #255	@ 0xff
 8000f12:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef post_hw_reset_result = CC1201_Nop(&post_hw_reset_status);
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fc40 	bl	800079c <CC1201_Nop>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
    printf("  Post-HW-reset NOP: HAL=%d, Status=0x%02X\n\r", post_hw_reset_result, post_hw_reset_status);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	793a      	ldrb	r2, [r7, #4]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4828      	ldr	r0, [pc, #160]	@ (8000fc8 <cc1201_power_up_sequence+0x104>)
 8000f28:	f007 fdd4 	bl	8008ad4 <iprintf>
    
    // 6. Try software reset sequence (if hardware reset helped)
    if (post_hw_reset_status != 0xFF) {
 8000f2c:	793b      	ldrb	r3, [r7, #4]
 8000f2e:	2bff      	cmp	r3, #255	@ 0xff
 8000f30:	d02f      	beq.n	8000f92 <cc1201_power_up_sequence+0xce>
        printf("6. Attempting software reset...\n\r");
 8000f32:	4826      	ldr	r0, [pc, #152]	@ (8000fcc <cc1201_power_up_sequence+0x108>)
 8000f34:	f007 fdce 	bl	8008ad4 <iprintf>
        uint8_t reset_status = 0xFF;
 8000f38:	23ff      	movs	r3, #255	@ 0xff
 8000f3a:	70fb      	strb	r3, [r7, #3]
        HAL_StatusTypeDef reset_result = CC1201_SoftReset(&reset_status);
 8000f3c:	1cfb      	adds	r3, r7, #3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbb4 	bl	80006ac <CC1201_SoftReset>
 8000f44:	4603      	mov	r3, r0
 8000f46:	71bb      	strb	r3, [r7, #6]
        printf("  Software reset: HAL=%d, Status=0x%02X\n\r", reset_result, reset_status);
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	78fa      	ldrb	r2, [r7, #3]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4820      	ldr	r0, [pc, #128]	@ (8000fd0 <cc1201_power_up_sequence+0x10c>)
 8000f50:	f007 fdc0 	bl	8008ad4 <iprintf>
        
        // Wait for reset to complete
        HAL_Delay(50);
 8000f54:	2032      	movs	r0, #50	@ 0x32
 8000f56:	f001 fe69 	bl	8002c2c <HAL_Delay>
        
        // Test again after software reset
        uint8_t post_reset_status = 0xFF;
 8000f5a:	23ff      	movs	r3, #255	@ 0xff
 8000f5c:	70bb      	strb	r3, [r7, #2]
        HAL_StatusTypeDef post_reset_result = CC1201_Nop(&post_reset_status);
 8000f5e:	1cbb      	adds	r3, r7, #2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fc1b 	bl	800079c <CC1201_Nop>
 8000f66:	4603      	mov	r3, r0
 8000f68:	717b      	strb	r3, [r7, #5]
        printf("  Post-SW-reset NOP: HAL=%d, Status=0x%02X\n\r", post_reset_result, post_reset_status);
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	78ba      	ldrb	r2, [r7, #2]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <cc1201_power_up_sequence+0x110>)
 8000f72:	f007 fdaf 	bl	8008ad4 <iprintf>
        
        if (post_reset_status != 0xFF && post_reset_status != 0x00) {
 8000f76:	78bb      	ldrb	r3, [r7, #2]
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d006      	beq.n	8000f8a <cc1201_power_up_sequence+0xc6>
 8000f7c:	78bb      	ldrb	r3, [r7, #2]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <cc1201_power_up_sequence+0xc6>
            printf("  ✓ CC1201 responding after complete reset sequence!\n\r");
 8000f82:	4815      	ldr	r0, [pc, #84]	@ (8000fd8 <cc1201_power_up_sequence+0x114>)
 8000f84:	f007 fda6 	bl	8008ad4 <iprintf>
 8000f88:	e009      	b.n	8000f9e <cc1201_power_up_sequence+0xda>
        } else {
            printf("  ✗ CC1201 still not responding after software reset\n\r");
 8000f8a:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <cc1201_power_up_sequence+0x118>)
 8000f8c:	f007 fda2 	bl	8008ad4 <iprintf>
 8000f90:	e005      	b.n	8000f9e <cc1201_power_up_sequence+0xda>
        }
    } else {
        printf("6. Skipping software reset - hardware reset didn't help\n\r");
 8000f92:	4813      	ldr	r0, [pc, #76]	@ (8000fe0 <cc1201_power_up_sequence+0x11c>)
 8000f94:	f007 fd9e 	bl	8008ad4 <iprintf>
        printf("  ✗ CC1201 not responding - likely hardware issue\n\r");
 8000f98:	4812      	ldr	r0, [pc, #72]	@ (8000fe4 <cc1201_power_up_sequence+0x120>)
 8000f9a:	f007 fd9b 	bl	8008ad4 <iprintf>
    }
    
    printf("=== POWER-UP SEQUENCE COMPLETE ===\n\r");
 8000f9e:	4812      	ldr	r0, [pc, #72]	@ (8000fe8 <cc1201_power_up_sequence+0x124>)
 8000fa0:	f007 fd98 	bl	8008ad4 <iprintf>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08009a4c 	.word	0x08009a4c
 8000fb0:	08009a70 	.word	0x08009a70
 8000fb4:	58021000 	.word	0x58021000
 8000fb8:	08009a94 	.word	0x08009a94
 8000fbc:	08009ab4 	.word	0x08009ab4
 8000fc0:	08009ae0 	.word	0x08009ae0
 8000fc4:	08009b10 	.word	0x08009b10
 8000fc8:	08009b44 	.word	0x08009b44
 8000fcc:	08009b74 	.word	0x08009b74
 8000fd0:	08009b98 	.word	0x08009b98
 8000fd4:	08009bc4 	.word	0x08009bc4
 8000fd8:	08009bf4 	.word	0x08009bf4
 8000fdc:	08009c30 	.word	0x08009c30
 8000fe0:	08009c6c 	.word	0x08009c6c
 8000fe4:	08009ca8 	.word	0x08009ca8
 8000fe8:	08009ce0 	.word	0x08009ce0

08000fec <comprehensive_cc1201_diagnostic>:

// Comprehensive CC1201 Hardware Diagnostic
void comprehensive_cc1201_diagnostic(void) {
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b08c      	sub	sp, #48	@ 0x30
 8000ff0:	af02      	add	r7, sp, #8
    printf("\n=== COMPREHENSIVE CC1201 HARDWARE DIAGNOSTIC ===\n\r");
 8000ff2:	48ad      	ldr	r0, [pc, #692]	@ (80012a8 <comprehensive_cc1201_diagnostic+0x2bc>)
 8000ff4:	f007 fd6e 	bl	8008ad4 <iprintf>
    
    // 1. Check pin states BEFORE any SPI communication
    printf("1. INITIAL PIN STATE CHECK:\n\r");
 8000ff8:	48ac      	ldr	r0, [pc, #688]	@ (80012ac <comprehensive_cc1201_diagnostic+0x2c0>)
 8000ffa:	f007 fd6b 	bl	8008ad4 <iprintf>
    printf("  CS Pin (PE11): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8000ffe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001002:	48ab      	ldr	r0, [pc, #684]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001004:	f002 fc24 	bl	8003850 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <comprehensive_cc1201_diagnostic+0x26>
 800100e:	4ba9      	ldr	r3, [pc, #676]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 8001010:	e000      	b.n	8001014 <comprehensive_cc1201_diagnostic+0x28>
 8001012:	4ba9      	ldr	r3, [pc, #676]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001014:	4619      	mov	r1, r3
 8001016:	48a9      	ldr	r0, [pc, #676]	@ (80012bc <comprehensive_cc1201_diagnostic+0x2d0>)
 8001018:	f007 fd5c 	bl	8008ad4 <iprintf>
    printf("  SCK Pin (PE12): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) ? "HIGH" : "LOW");
 800101c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001020:	48a3      	ldr	r0, [pc, #652]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001022:	f002 fc15 	bl	8003850 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <comprehensive_cc1201_diagnostic+0x44>
 800102c:	4ba1      	ldr	r3, [pc, #644]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 800102e:	e000      	b.n	8001032 <comprehensive_cc1201_diagnostic+0x46>
 8001030:	4ba1      	ldr	r3, [pc, #644]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001032:	4619      	mov	r1, r3
 8001034:	48a2      	ldr	r0, [pc, #648]	@ (80012c0 <comprehensive_cc1201_diagnostic+0x2d4>)
 8001036:	f007 fd4d 	bl	8008ad4 <iprintf>
    printf("  MISO Pin (PE13): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 800103a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800103e:	489c      	ldr	r0, [pc, #624]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001040:	f002 fc06 	bl	8003850 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <comprehensive_cc1201_diagnostic+0x62>
 800104a:	4b9a      	ldr	r3, [pc, #616]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 800104c:	e000      	b.n	8001050 <comprehensive_cc1201_diagnostic+0x64>
 800104e:	4b9a      	ldr	r3, [pc, #616]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001050:	4619      	mov	r1, r3
 8001052:	489c      	ldr	r0, [pc, #624]	@ (80012c4 <comprehensive_cc1201_diagnostic+0x2d8>)
 8001054:	f007 fd3e 	bl	8008ad4 <iprintf>
    printf("  MOSI Pin (PE14): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) ? "HIGH" : "LOW");
 8001058:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800105c:	4894      	ldr	r0, [pc, #592]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 800105e:	f002 fbf7 	bl	8003850 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <comprehensive_cc1201_diagnostic+0x80>
 8001068:	4b92      	ldr	r3, [pc, #584]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 800106a:	e000      	b.n	800106e <comprehensive_cc1201_diagnostic+0x82>
 800106c:	4b92      	ldr	r3, [pc, #584]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 800106e:	4619      	mov	r1, r3
 8001070:	4895      	ldr	r0, [pc, #596]	@ (80012c8 <comprehensive_cc1201_diagnostic+0x2dc>)
 8001072:	f007 fd2f 	bl	8008ad4 <iprintf>
    printf("  RESET Pin (PD4): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8001076:	2110      	movs	r1, #16
 8001078:	4894      	ldr	r0, [pc, #592]	@ (80012cc <comprehensive_cc1201_diagnostic+0x2e0>)
 800107a:	f002 fbe9 	bl	8003850 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <comprehensive_cc1201_diagnostic+0x9c>
 8001084:	4b8b      	ldr	r3, [pc, #556]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 8001086:	e000      	b.n	800108a <comprehensive_cc1201_diagnostic+0x9e>
 8001088:	4b8b      	ldr	r3, [pc, #556]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 800108a:	4619      	mov	r1, r3
 800108c:	4890      	ldr	r0, [pc, #576]	@ (80012d0 <comprehensive_cc1201_diagnostic+0x2e4>)
 800108e:	f007 fd21 	bl	8008ad4 <iprintf>
    printf("  INT Pin (PD5): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) ? "HIGH" : "LOW");
 8001092:	2120      	movs	r1, #32
 8001094:	488d      	ldr	r0, [pc, #564]	@ (80012cc <comprehensive_cc1201_diagnostic+0x2e0>)
 8001096:	f002 fbdb 	bl	8003850 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <comprehensive_cc1201_diagnostic+0xb8>
 80010a0:	4b84      	ldr	r3, [pc, #528]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 80010a2:	e000      	b.n	80010a6 <comprehensive_cc1201_diagnostic+0xba>
 80010a4:	4b84      	ldr	r3, [pc, #528]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 80010a6:	4619      	mov	r1, r3
 80010a8:	488a      	ldr	r0, [pc, #552]	@ (80012d4 <comprehensive_cc1201_diagnostic+0x2e8>)
 80010aa:	f007 fd13 	bl	8008ad4 <iprintf>
    
    // 2. Manual CS control test
    printf("\n2. MANUAL CS CONTROL TEST:\n\r");
 80010ae:	488a      	ldr	r0, [pc, #552]	@ (80012d8 <comprehensive_cc1201_diagnostic+0x2ec>)
 80010b0:	f007 fd10 	bl	8008ad4 <iprintf>
    printf("  Setting CS LOW...\n\r");
 80010b4:	4889      	ldr	r0, [pc, #548]	@ (80012dc <comprehensive_cc1201_diagnostic+0x2f0>)
 80010b6:	f007 fd0d 	bl	8008ad4 <iprintf>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010c0:	487b      	ldr	r0, [pc, #492]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 80010c2:	f002 fbdd 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f001 fdb0 	bl	8002c2c <HAL_Delay>
    printf("  CS Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 80010cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d0:	4877      	ldr	r0, [pc, #476]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 80010d2:	f002 fbbd 	bl	8003850 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <comprehensive_cc1201_diagnostic+0xf4>
 80010dc:	4b75      	ldr	r3, [pc, #468]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 80010de:	e000      	b.n	80010e2 <comprehensive_cc1201_diagnostic+0xf6>
 80010e0:	4b75      	ldr	r3, [pc, #468]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	487e      	ldr	r0, [pc, #504]	@ (80012e0 <comprehensive_cc1201_diagnostic+0x2f4>)
 80010e6:	f007 fcf5 	bl	8008ad4 <iprintf>
    printf("  MISO Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 80010ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ee:	4870      	ldr	r0, [pc, #448]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 80010f0:	f002 fbae 	bl	8003850 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <comprehensive_cc1201_diagnostic+0x112>
 80010fa:	4b6e      	ldr	r3, [pc, #440]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 80010fc:	e000      	b.n	8001100 <comprehensive_cc1201_diagnostic+0x114>
 80010fe:	4b6e      	ldr	r3, [pc, #440]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001100:	4619      	mov	r1, r3
 8001102:	4878      	ldr	r0, [pc, #480]	@ (80012e4 <comprehensive_cc1201_diagnostic+0x2f8>)
 8001104:	f007 fce6 	bl	8008ad4 <iprintf>
    
    printf("  Setting CS HIGH...\n\r");
 8001108:	4877      	ldr	r0, [pc, #476]	@ (80012e8 <comprehensive_cc1201_diagnostic+0x2fc>)
 800110a:	f007 fce3 	bl	8008ad4 <iprintf>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001114:	4866      	ldr	r0, [pc, #408]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001116:	f002 fbb3 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f001 fd86 	bl	8002c2c <HAL_Delay>
    printf("  CS Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8001120:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001124:	4862      	ldr	r0, [pc, #392]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001126:	f002 fb93 	bl	8003850 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <comprehensive_cc1201_diagnostic+0x148>
 8001130:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 8001132:	e000      	b.n	8001136 <comprehensive_cc1201_diagnostic+0x14a>
 8001134:	4b60      	ldr	r3, [pc, #384]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001136:	4619      	mov	r1, r3
 8001138:	4869      	ldr	r0, [pc, #420]	@ (80012e0 <comprehensive_cc1201_diagnostic+0x2f4>)
 800113a:	f007 fccb 	bl	8008ad4 <iprintf>
    printf("  MISO Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	485b      	ldr	r0, [pc, #364]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001144:	f002 fb84 	bl	8003850 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <comprehensive_cc1201_diagnostic+0x166>
 800114e:	4b59      	ldr	r3, [pc, #356]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 8001150:	e000      	b.n	8001154 <comprehensive_cc1201_diagnostic+0x168>
 8001152:	4b59      	ldr	r3, [pc, #356]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001154:	4619      	mov	r1, r3
 8001156:	4863      	ldr	r0, [pc, #396]	@ (80012e4 <comprehensive_cc1201_diagnostic+0x2f8>)
 8001158:	f007 fcbc 	bl	8008ad4 <iprintf>
    
    // 3. Test different SPI byte patterns with CS control
    printf("\n3. RAW SPI BYTE PATTERN TEST:\n\r");
 800115c:	4863      	ldr	r0, [pc, #396]	@ (80012ec <comprehensive_cc1201_diagnostic+0x300>)
 800115e:	f007 fcb9 	bl	8008ad4 <iprintf>
    uint8_t test_patterns[] = {0x00, 0xFF, 0x55, 0xAA, 0x3D}; // Last one is NOP command
 8001162:	4a63      	ldr	r2, [pc, #396]	@ (80012f0 <comprehensive_cc1201_diagnostic+0x304>)
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116c:	6018      	str	r0, [r3, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	7019      	strb	r1, [r3, #0]
    const char* pattern_names[] = {"0x00", "0xFF", "0x55", "0xAA", "NOP(0x3D)"};
 8001172:	4b60      	ldr	r3, [pc, #384]	@ (80012f4 <comprehensive_cc1201_diagnostic+0x308>)
 8001174:	f107 0408 	add.w	r4, r7, #8
 8001178:	461d      	mov	r5, r3
 800117a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	6023      	str	r3, [r4, #0]
    
    for (int i = 0; i < 5; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
 8001186:	e052      	b.n	800122e <comprehensive_cc1201_diagnostic+0x242>
        uint8_t tx_data = test_patterns[i];
 8001188:	f107 021c 	add.w	r2, r7, #28
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	717b      	strb	r3, [r7, #5]
        uint8_t rx_data = 0x00; // Initialize to 0 this time
 8001194:	2300      	movs	r3, #0
 8001196:	713b      	strb	r3, [r7, #4]
        
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // CS LOW
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800119e:	4844      	ldr	r0, [pc, #272]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 80011a0:	f002 fb6e 	bl	8003880 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f001 fd41 	bl	8002c2c <HAL_Delay>
        HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&hspi4, &tx_data, &rx_data, 1, 1000);
 80011aa:	1d3a      	adds	r2, r7, #4
 80011ac:	1d79      	adds	r1, r7, #5
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	4850      	ldr	r0, [pc, #320]	@ (80012f8 <comprehensive_cc1201_diagnostic+0x30c>)
 80011b8:	f005 fd0e 	bl	8006bd8 <HAL_SPI_TransmitReceive>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);   // CS HIGH
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c8:	4839      	ldr	r0, [pc, #228]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 80011ca:	f002 fb59 	bl	8003880 <HAL_GPIO_WritePin>
        
        printf("  %s: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", 
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	3328      	adds	r3, #40	@ 0x28
 80011d4:	443b      	add	r3, r7
 80011d6:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	461a      	mov	r2, r3
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4603      	mov	r3, r0
 80011ea:	4844      	ldr	r0, [pc, #272]	@ (80012fc <comprehensive_cc1201_diagnostic+0x310>)
 80011ec:	f007 fc72 	bl	8008ad4 <iprintf>
               pattern_names[i], tx_data, rx_data, spi_status);
        
        if (rx_data == tx_data) {
 80011f0:	793a      	ldrb	r2, [r7, #4]
 80011f2:	797b      	ldrb	r3, [r7, #5]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d103      	bne.n	8001200 <comprehensive_cc1201_diagnostic+0x214>
            printf("    ⚠ Echo detected - MISO may be shorted to MOSI\n\r");
 80011f8:	4841      	ldr	r0, [pc, #260]	@ (8001300 <comprehensive_cc1201_diagnostic+0x314>)
 80011fa:	f007 fc6b 	bl	8008ad4 <iprintf>
 80011fe:	e010      	b.n	8001222 <comprehensive_cc1201_diagnostic+0x236>
        } else if (rx_data == 0xFF) {
 8001200:	793b      	ldrb	r3, [r7, #4]
 8001202:	2bff      	cmp	r3, #255	@ 0xff
 8001204:	d103      	bne.n	800120e <comprehensive_cc1201_diagnostic+0x222>
            printf("    ⚠ MISO stuck HIGH - check power/connections\n\r");
 8001206:	483f      	ldr	r0, [pc, #252]	@ (8001304 <comprehensive_cc1201_diagnostic+0x318>)
 8001208:	f007 fc64 	bl	8008ad4 <iprintf>
 800120c:	e009      	b.n	8001222 <comprehensive_cc1201_diagnostic+0x236>
        } else if (rx_data == 0x00) {
 800120e:	793b      	ldrb	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <comprehensive_cc1201_diagnostic+0x230>
            printf("    ⚠ MISO stuck LOW - check power/connections\n\r");
 8001214:	483c      	ldr	r0, [pc, #240]	@ (8001308 <comprehensive_cc1201_diagnostic+0x31c>)
 8001216:	f007 fc5d 	bl	8008ad4 <iprintf>
 800121a:	e002      	b.n	8001222 <comprehensive_cc1201_diagnostic+0x236>
        } else {
            printf("    ✓ Different response - potential communication\n\r");
 800121c:	483b      	ldr	r0, [pc, #236]	@ (800130c <comprehensive_cc1201_diagnostic+0x320>)
 800121e:	f007 fc59 	bl	8008ad4 <iprintf>
        }
        HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f001 fd02 	bl	8002c2c <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	3301      	adds	r3, #1
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	2b04      	cmp	r3, #4
 8001232:	dda9      	ble.n	8001188 <comprehensive_cc1201_diagnostic+0x19c>
    }
    
    // 4. Hardware reset test
    printf("\n4. HARDWARE RESET TEST:\n\r");
 8001234:	4836      	ldr	r0, [pc, #216]	@ (8001310 <comprehensive_cc1201_diagnostic+0x324>)
 8001236:	f007 fc4d 	bl	8008ad4 <iprintf>
    printf("  ✓ Hardware RESET pin configured on PD4\n\r");
 800123a:	4836      	ldr	r0, [pc, #216]	@ (8001314 <comprehensive_cc1201_diagnostic+0x328>)
 800123c:	f007 fc4a 	bl	8008ad4 <iprintf>
    printf("  Testing hardware reset sequence...\n\r");
 8001240:	4835      	ldr	r0, [pc, #212]	@ (8001318 <comprehensive_cc1201_diagnostic+0x32c>)
 8001242:	f007 fc47 	bl	8008ad4 <iprintf>
    
    // Test reset pin control
    printf("  Current RESET pin state: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8001246:	2110      	movs	r1, #16
 8001248:	4820      	ldr	r0, [pc, #128]	@ (80012cc <comprehensive_cc1201_diagnostic+0x2e0>)
 800124a:	f002 fb01 	bl	8003850 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <comprehensive_cc1201_diagnostic+0x26c>
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 8001256:	e000      	b.n	800125a <comprehensive_cc1201_diagnostic+0x26e>
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 800125a:	4619      	mov	r1, r3
 800125c:	482f      	ldr	r0, [pc, #188]	@ (800131c <comprehensive_cc1201_diagnostic+0x330>)
 800125e:	f007 fc39 	bl	8008ad4 <iprintf>
    printf("  Performing reset pulse...\n\r");
 8001262:	482f      	ldr	r0, [pc, #188]	@ (8001320 <comprehensive_cc1201_diagnostic+0x334>)
 8001264:	f007 fc36 	bl	8008ad4 <iprintf>
    
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // Assert reset
 8001268:	2200      	movs	r2, #0
 800126a:	2110      	movs	r1, #16
 800126c:	4817      	ldr	r0, [pc, #92]	@ (80012cc <comprehensive_cc1201_diagnostic+0x2e0>)
 800126e:	f002 fb07 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f001 fcda 	bl	8002c2c <HAL_Delay>
    printf("  RESET pin during reset: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8001278:	2110      	movs	r1, #16
 800127a:	4814      	ldr	r0, [pc, #80]	@ (80012cc <comprehensive_cc1201_diagnostic+0x2e0>)
 800127c:	f002 fae8 	bl	8003850 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <comprehensive_cc1201_diagnostic+0x29e>
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 8001288:	e000      	b.n	800128c <comprehensive_cc1201_diagnostic+0x2a0>
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <comprehensive_cc1201_diagnostic+0x2cc>)
 800128c:	4619      	mov	r1, r3
 800128e:	4825      	ldr	r0, [pc, #148]	@ (8001324 <comprehensive_cc1201_diagnostic+0x338>)
 8001290:	f007 fc20 	bl	8008ad4 <iprintf>
    printf("  MISO pin during reset: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001294:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <comprehensive_cc1201_diagnostic+0x2c4>)
 800129a:	f002 fad9 	bl	8003850 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d041      	beq.n	8001328 <comprehensive_cc1201_diagnostic+0x33c>
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <comprehensive_cc1201_diagnostic+0x2c8>)
 80012a6:	e040      	b.n	800132a <comprehensive_cc1201_diagnostic+0x33e>
 80012a8:	08009d08 	.word	0x08009d08
 80012ac:	08009d3c 	.word	0x08009d3c
 80012b0:	58021000 	.word	0x58021000
 80012b4:	08009d5c 	.word	0x08009d5c
 80012b8:	08009d64 	.word	0x08009d64
 80012bc:	08009d68 	.word	0x08009d68
 80012c0:	08009d80 	.word	0x08009d80
 80012c4:	08009d98 	.word	0x08009d98
 80012c8:	08009db0 	.word	0x08009db0
 80012cc:	58020c00 	.word	0x58020c00
 80012d0:	08009dc8 	.word	0x08009dc8
 80012d4:	08009de0 	.word	0x08009de0
 80012d8:	08009df8 	.word	0x08009df8
 80012dc:	08009e18 	.word	0x08009e18
 80012e0:	08009e30 	.word	0x08009e30
 80012e4:	08009e40 	.word	0x08009e40
 80012e8:	08009e54 	.word	0x08009e54
 80012ec:	08009e6c 	.word	0x08009e6c
 80012f0:	0800a40c 	.word	0x0800a40c
 80012f4:	0800a440 	.word	0x0800a440
 80012f8:	240000b8 	.word	0x240000b8
 80012fc:	08009e90 	.word	0x08009e90
 8001300:	08009eb8 	.word	0x08009eb8
 8001304:	08009ef0 	.word	0x08009ef0
 8001308:	08009f24 	.word	0x08009f24
 800130c:	08009f58 	.word	0x08009f58
 8001310:	08009f90 	.word	0x08009f90
 8001314:	08009fac 	.word	0x08009fac
 8001318:	08009fdc 	.word	0x08009fdc
 800131c:	0800a004 	.word	0x0800a004
 8001320:	0800a024 	.word	0x0800a024
 8001324:	0800a044 	.word	0x0800a044
 8001328:	4b76      	ldr	r3, [pc, #472]	@ (8001504 <comprehensive_cc1201_diagnostic+0x518>)
 800132a:	4619      	mov	r1, r3
 800132c:	4876      	ldr	r0, [pc, #472]	@ (8001508 <comprehensive_cc1201_diagnostic+0x51c>)
 800132e:	f007 fbd1 	bl	8008ad4 <iprintf>
    
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);   // Release reset
 8001332:	2201      	movs	r2, #1
 8001334:	2110      	movs	r1, #16
 8001336:	4875      	ldr	r0, [pc, #468]	@ (800150c <comprehensive_cc1201_diagnostic+0x520>)
 8001338:	f002 faa2 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800133c:	2032      	movs	r0, #50	@ 0x32
 800133e:	f001 fc75 	bl	8002c2c <HAL_Delay>
    printf("  RESET pin after reset: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8001342:	2110      	movs	r1, #16
 8001344:	4871      	ldr	r0, [pc, #452]	@ (800150c <comprehensive_cc1201_diagnostic+0x520>)
 8001346:	f002 fa83 	bl	8003850 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <comprehensive_cc1201_diagnostic+0x368>
 8001350:	4b6f      	ldr	r3, [pc, #444]	@ (8001510 <comprehensive_cc1201_diagnostic+0x524>)
 8001352:	e000      	b.n	8001356 <comprehensive_cc1201_diagnostic+0x36a>
 8001354:	4b6b      	ldr	r3, [pc, #428]	@ (8001504 <comprehensive_cc1201_diagnostic+0x518>)
 8001356:	4619      	mov	r1, r3
 8001358:	486e      	ldr	r0, [pc, #440]	@ (8001514 <comprehensive_cc1201_diagnostic+0x528>)
 800135a:	f007 fbbb 	bl	8008ad4 <iprintf>
    printf("  MISO pin after reset: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 800135e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001362:	486d      	ldr	r0, [pc, #436]	@ (8001518 <comprehensive_cc1201_diagnostic+0x52c>)
 8001364:	f002 fa74 	bl	8003850 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <comprehensive_cc1201_diagnostic+0x386>
 800136e:	4b68      	ldr	r3, [pc, #416]	@ (8001510 <comprehensive_cc1201_diagnostic+0x524>)
 8001370:	e000      	b.n	8001374 <comprehensive_cc1201_diagnostic+0x388>
 8001372:	4b64      	ldr	r3, [pc, #400]	@ (8001504 <comprehensive_cc1201_diagnostic+0x518>)
 8001374:	4619      	mov	r1, r3
 8001376:	4869      	ldr	r0, [pc, #420]	@ (800151c <comprehensive_cc1201_diagnostic+0x530>)
 8001378:	f007 fbac 	bl	8008ad4 <iprintf>
    
    // Test communication after reset
    uint8_t reset_test_tx = 0x3D, reset_test_rx = 0x00;
 800137c:	233d      	movs	r3, #61	@ 0x3d
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	2300      	movs	r3, #0
 8001382:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800138a:	4863      	ldr	r0, [pc, #396]	@ (8001518 <comprehensive_cc1201_diagnostic+0x52c>)
 800138c:	f002 fa78 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f001 fc4b 	bl	8002c2c <HAL_Delay>
    HAL_StatusTypeDef reset_comm_status = HAL_SPI_TransmitReceive(&hspi4, &reset_test_tx, &reset_test_rx, 1, 1000);
 8001396:	1dba      	adds	r2, r7, #6
 8001398:	1df9      	adds	r1, r7, #7
 800139a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	485f      	ldr	r0, [pc, #380]	@ (8001520 <comprehensive_cc1201_diagnostic+0x534>)
 80013a4:	f005 fc18 	bl	8006bd8 <HAL_SPI_TransmitReceive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013b4:	4858      	ldr	r0, [pc, #352]	@ (8001518 <comprehensive_cc1201_diagnostic+0x52c>)
 80013b6:	f002 fa63 	bl	8003880 <HAL_GPIO_WritePin>
    printf("  Post-reset communication: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", 
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4619      	mov	r1, r3
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	461a      	mov	r2, r3
 80013c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013c6:	4857      	ldr	r0, [pc, #348]	@ (8001524 <comprehensive_cc1201_diagnostic+0x538>)
 80013c8:	f007 fb84 	bl	8008ad4 <iprintf>
           reset_test_tx, reset_test_rx, reset_comm_status);
    
    printf("\n5. POWER CONSIDERATIONS:\n\r");
 80013cc:	4856      	ldr	r0, [pc, #344]	@ (8001528 <comprehensive_cc1201_diagnostic+0x53c>)
 80013ce:	f007 fb81 	bl	8008ad4 <iprintf>
    printf("  ⚠ No power enable pin defined in current configuration\n\r");
 80013d2:	4856      	ldr	r0, [pc, #344]	@ (800152c <comprehensive_cc1201_diagnostic+0x540>)
 80013d4:	f007 fb7e 	bl	8008ad4 <iprintf>
    printf("  → Check if CC1201 has separate VDD supply\n\r");
 80013d8:	4855      	ldr	r0, [pc, #340]	@ (8001530 <comprehensive_cc1201_diagnostic+0x544>)
 80013da:	f007 fb7b 	bl	8008ad4 <iprintf>
    printf("  → Verify CC1201 crystal oscillator is working\n\r");
 80013de:	4855      	ldr	r0, [pc, #340]	@ (8001534 <comprehensive_cc1201_diagnostic+0x548>)
 80013e0:	f007 fb78 	bl	8008ad4 <iprintf>
    
    // 6. Try different SPI clock speeds
    printf("\n6. SPI CLOCK SPEED TEST:\n\r");
 80013e4:	4854      	ldr	r0, [pc, #336]	@ (8001538 <comprehensive_cc1201_diagnostic+0x54c>)
 80013e6:	f007 fb75 	bl	8008ad4 <iprintf>
    printf("  Current SPI prescaler: %lu\n\r", (unsigned long)hspi4.Init.BaudRatePrescaler);
 80013ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001520 <comprehensive_cc1201_diagnostic+0x534>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4852      	ldr	r0, [pc, #328]	@ (800153c <comprehensive_cc1201_diagnostic+0x550>)
 80013f2:	f007 fb6f 	bl	8008ad4 <iprintf>
    
    // Test with slower clock
    printf("  Testing with slower clock (prescaler 32)...\n\r");
 80013f6:	4852      	ldr	r0, [pc, #328]	@ (8001540 <comprehensive_cc1201_diagnostic+0x554>)
 80013f8:	f007 fb6c 	bl	8008ad4 <iprintf>
    hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013fc:	4b48      	ldr	r3, [pc, #288]	@ (8001520 <comprehensive_cc1201_diagnostic+0x534>)
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001402:	61da      	str	r2, [r3, #28]
    if (HAL_SPI_Init(&hspi4) == HAL_OK) {
 8001404:	4846      	ldr	r0, [pc, #280]	@ (8001520 <comprehensive_cc1201_diagnostic+0x534>)
 8001406:	f005 f8d5 	bl	80065b4 <HAL_SPI_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d12d      	bne.n	800146c <comprehensive_cc1201_diagnostic+0x480>
        uint8_t tx_slow = 0x3D, rx_slow = 0;
 8001410:	233d      	movs	r3, #61	@ 0x3d
 8001412:	70fb      	strb	r3, [r7, #3]
 8001414:	2300      	movs	r3, #0
 8001416:	70bb      	strb	r3, [r7, #2]
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800141e:	483e      	ldr	r0, [pc, #248]	@ (8001518 <comprehensive_cc1201_diagnostic+0x52c>)
 8001420:	f002 fa2e 	bl	8003880 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f001 fc01 	bl	8002c2c <HAL_Delay>
        HAL_StatusTypeDef slow_status = HAL_SPI_TransmitReceive(&hspi4, &tx_slow, &rx_slow, 1, 1000);
 800142a:	1cba      	adds	r2, r7, #2
 800142c:	1cf9      	adds	r1, r7, #3
 800142e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	483a      	ldr	r0, [pc, #232]	@ (8001520 <comprehensive_cc1201_diagnostic+0x534>)
 8001438:	f005 fbce 	bl	8006bd8 <HAL_SPI_TransmitReceive>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001448:	4833      	ldr	r0, [pc, #204]	@ (8001518 <comprehensive_cc1201_diagnostic+0x52c>)
 800144a:	f002 fa19 	bl	8003880 <HAL_GPIO_WritePin>
        printf("    Slow NOP: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", tx_slow, rx_slow, slow_status);
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	4619      	mov	r1, r3
 8001452:	78bb      	ldrb	r3, [r7, #2]
 8001454:	461a      	mov	r2, r3
 8001456:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800145a:	483a      	ldr	r0, [pc, #232]	@ (8001544 <comprehensive_cc1201_diagnostic+0x558>)
 800145c:	f007 fb3a 	bl	8008ad4 <iprintf>
        
        // Restore original speed
        hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <comprehensive_cc1201_diagnostic+0x534>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi4);
 8001466:	482e      	ldr	r0, [pc, #184]	@ (8001520 <comprehensive_cc1201_diagnostic+0x534>)
 8001468:	f005 f8a4 	bl	80065b4 <HAL_SPI_Init>
    }
    
    // 7. Final pin state check
    printf("\n7. FINAL PIN STATE CHECK:\n\r");
 800146c:	4836      	ldr	r0, [pc, #216]	@ (8001548 <comprehensive_cc1201_diagnostic+0x55c>)
 800146e:	f007 fb31 	bl	8008ad4 <iprintf>
    printf("  CS Pin (PE11): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8001472:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001476:	4828      	ldr	r0, [pc, #160]	@ (8001518 <comprehensive_cc1201_diagnostic+0x52c>)
 8001478:	f002 f9ea 	bl	8003850 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <comprehensive_cc1201_diagnostic+0x49a>
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <comprehensive_cc1201_diagnostic+0x524>)
 8001484:	e000      	b.n	8001488 <comprehensive_cc1201_diagnostic+0x49c>
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <comprehensive_cc1201_diagnostic+0x518>)
 8001488:	4619      	mov	r1, r3
 800148a:	4830      	ldr	r0, [pc, #192]	@ (800154c <comprehensive_cc1201_diagnostic+0x560>)
 800148c:	f007 fb22 	bl	8008ad4 <iprintf>
    printf("  MISO Pin (PE13): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001490:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001494:	4820      	ldr	r0, [pc, #128]	@ (8001518 <comprehensive_cc1201_diagnostic+0x52c>)
 8001496:	f002 f9db 	bl	8003850 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <comprehensive_cc1201_diagnostic+0x4b8>
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <comprehensive_cc1201_diagnostic+0x524>)
 80014a2:	e000      	b.n	80014a6 <comprehensive_cc1201_diagnostic+0x4ba>
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <comprehensive_cc1201_diagnostic+0x518>)
 80014a6:	4619      	mov	r1, r3
 80014a8:	4829      	ldr	r0, [pc, #164]	@ (8001550 <comprehensive_cc1201_diagnostic+0x564>)
 80014aa:	f007 fb13 	bl	8008ad4 <iprintf>
    printf("  INT Pin (PD5): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) ? "HIGH" : "LOW");
 80014ae:	2120      	movs	r1, #32
 80014b0:	4816      	ldr	r0, [pc, #88]	@ (800150c <comprehensive_cc1201_diagnostic+0x520>)
 80014b2:	f002 f9cd 	bl	8003850 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <comprehensive_cc1201_diagnostic+0x4d4>
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <comprehensive_cc1201_diagnostic+0x524>)
 80014be:	e000      	b.n	80014c2 <comprehensive_cc1201_diagnostic+0x4d6>
 80014c0:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <comprehensive_cc1201_diagnostic+0x518>)
 80014c2:	4619      	mov	r1, r3
 80014c4:	4823      	ldr	r0, [pc, #140]	@ (8001554 <comprehensive_cc1201_diagnostic+0x568>)
 80014c6:	f007 fb05 	bl	8008ad4 <iprintf>
    
    printf("=== HARDWARE DIAGNOSTIC COMPLETE ===\n\r");
 80014ca:	4823      	ldr	r0, [pc, #140]	@ (8001558 <comprehensive_cc1201_diagnostic+0x56c>)
 80014cc:	f007 fb02 	bl	8008ad4 <iprintf>
    printf("\nRECOMMENDATIONS:\n\r");
 80014d0:	4822      	ldr	r0, [pc, #136]	@ (800155c <comprehensive_cc1201_diagnostic+0x570>)
 80014d2:	f007 faff 	bl	8008ad4 <iprintf>
    printf("→ If MISO is stuck HIGH: Check CC1201 power supply\n\r");
 80014d6:	4822      	ldr	r0, [pc, #136]	@ (8001560 <comprehensive_cc1201_diagnostic+0x574>)
 80014d8:	f007 fafc 	bl	8008ad4 <iprintf>
    printf("→ If MISO is stuck LOW: Check ground connections\n\r");
 80014dc:	4821      	ldr	r0, [pc, #132]	@ (8001564 <comprehensive_cc1201_diagnostic+0x578>)
 80014de:	f007 faf9 	bl	8008ad4 <iprintf>
    printf("→ If echoing MOSI: Check for short circuits\n\r");
 80014e2:	4821      	ldr	r0, [pc, #132]	@ (8001568 <comprehensive_cc1201_diagnostic+0x57c>)
 80014e4:	f007 faf6 	bl	8008ad4 <iprintf>
    printf("→ Consider adding hardware reset pin control\n\r");
 80014e8:	4820      	ldr	r0, [pc, #128]	@ (800156c <comprehensive_cc1201_diagnostic+0x580>)
 80014ea:	f007 faf3 	bl	8008ad4 <iprintf>
    printf("→ Verify CC1201 crystal oscillator is populated and working\n\r");
 80014ee:	4820      	ldr	r0, [pc, #128]	@ (8001570 <comprehensive_cc1201_diagnostic+0x584>)
 80014f0:	f007 faf0 	bl	8008ad4 <iprintf>
    printf("→ Check CC1201 datasheet for proper power-up sequence\n\r");
 80014f4:	481f      	ldr	r0, [pc, #124]	@ (8001574 <comprehensive_cc1201_diagnostic+0x588>)
 80014f6:	f007 faed 	bl	8008ad4 <iprintf>
}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	@ 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdb0      	pop	{r4, r5, r7, pc}
 8001502:	bf00      	nop
 8001504:	08009d64 	.word	0x08009d64
 8001508:	0800a064 	.word	0x0800a064
 800150c:	58020c00 	.word	0x58020c00
 8001510:	08009d5c 	.word	0x08009d5c
 8001514:	0800a084 	.word	0x0800a084
 8001518:	58021000 	.word	0x58021000
 800151c:	0800a0a4 	.word	0x0800a0a4
 8001520:	240000b8 	.word	0x240000b8
 8001524:	0800a0c4 	.word	0x0800a0c4
 8001528:	0800a104 	.word	0x0800a104
 800152c:	0800a120 	.word	0x0800a120
 8001530:	0800a160 	.word	0x0800a160
 8001534:	0800a190 	.word	0x0800a190
 8001538:	0800a1c4 	.word	0x0800a1c4
 800153c:	0800a1e0 	.word	0x0800a1e0
 8001540:	0800a200 	.word	0x0800a200
 8001544:	0800a230 	.word	0x0800a230
 8001548:	0800a260 	.word	0x0800a260
 800154c:	08009d68 	.word	0x08009d68
 8001550:	08009d98 	.word	0x08009d98
 8001554:	08009de0 	.word	0x08009de0
 8001558:	0800a280 	.word	0x0800a280
 800155c:	0800a2a8 	.word	0x0800a2a8
 8001560:	0800a2bc 	.word	0x0800a2bc
 8001564:	0800a2f4 	.word	0x0800a2f4
 8001568:	0800a32c 	.word	0x0800a32c
 800156c:	0800a35c 	.word	0x0800a35c
 8001570:	0800a390 	.word	0x0800a390
 8001574:	0800a3d0 	.word	0x0800a3d0

08001578 <test_buffer_operations>:

// Test 1: Buffer Read/Write Operations
void test_buffer_operations(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
    printf("\n=== TEST 1: BUFFER READ/WRITE OPERATIONS ===\n\r");
 800157e:	4864      	ldr	r0, [pc, #400]	@ (8001710 <test_buffer_operations+0x198>)
 8001580:	f007 faa8 	bl	8008ad4 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	75bb      	strb	r3, [r7, #22]
    
    // First, ensure we're in IDLE state and flush FIFOs
    printf("1. Preparing for buffer tests...\n\r");
 8001588:	4862      	ldr	r0, [pc, #392]	@ (8001714 <test_buffer_operations+0x19c>)
 800158a:	f007 faa3 	bl	8008ad4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 800158e:	f107 0316 	add.w	r3, r7, #22
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f8da 	bl	800074c <CC1201_EnterIdleMode>
 8001598:	4603      	mov	r3, r0
 800159a:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d104      	bne.n	80015ac <test_buffer_operations+0x34>
        print_cc1201_status(status_byte, "IDLE_MODE");
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	495c      	ldr	r1, [pc, #368]	@ (8001718 <test_buffer_operations+0x1a0>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fbfe 	bl	8000da8 <print_cc1201_status>
    }
    
    // Flush both FIFOs
    CC1201_FlushTxFifo(&status_byte);
 80015ac:	f107 0316 	add.w	r3, r7, #22
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f8e5 	bl	8000780 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 80015b6:	7dbb      	ldrb	r3, [r7, #22]
 80015b8:	4958      	ldr	r1, [pc, #352]	@ (800171c <test_buffer_operations+0x1a4>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fbf4 	bl	8000da8 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 80015c0:	f107 0316 	add.w	r3, r7, #22
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f8ce 	bl	8000766 <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 80015ca:	7dbb      	ldrb	r3, [r7, #22]
 80015cc:	4954      	ldr	r1, [pc, #336]	@ (8001720 <test_buffer_operations+0x1a8>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fbea 	bl	8000da8 <print_cc1201_status>
    
    // Test TX FIFO write operations
    printf("\n2. Testing TX FIFO Write Operations:\n\r");
 80015d4:	4853      	ldr	r0, [pc, #332]	@ (8001724 <test_buffer_operations+0x1ac>)
 80015d6:	f007 fa7d 	bl	8008ad4 <iprintf>
    
    // Test pattern 1: Sequential bytes
    uint8_t test_data_1[] = {0x01, 0x02, 0x03, 0x04, 0x05};
 80015da:	4a53      	ldr	r2, [pc, #332]	@ (8001728 <test_buffer_operations+0x1b0>)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e4:	6018      	str	r0, [r3, #0]
 80015e6:	3304      	adds	r3, #4
 80015e8:	7019      	strb	r1, [r3, #0]
    status = CC1201_WriteTxFifo(test_data_1, sizeof(test_data_1), &status_byte);
 80015ea:	f107 0216 	add.w	r2, r7, #22
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2105      	movs	r1, #5
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff f9a3 	bl	8000940 <CC1201_WriteTxFifo>
 80015fa:	4603      	mov	r3, r0
 80015fc:	75fb      	strb	r3, [r7, #23]
    printf("  Write 5 bytes [01,02,03,04,05]: HAL=%d ", status);
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	4619      	mov	r1, r3
 8001602:	484a      	ldr	r0, [pc, #296]	@ (800172c <test_buffer_operations+0x1b4>)
 8001604:	f007 fa66 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <test_buffer_operations+0xb6>
        print_cc1201_status(status_byte, "TX_WRITE");
 800160e:	7dbb      	ldrb	r3, [r7, #22]
 8001610:	4947      	ldr	r1, [pc, #284]	@ (8001730 <test_buffer_operations+0x1b8>)
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fbc8 	bl	8000da8 <print_cc1201_status>
        
        // Check TX FIFO count
        uint8_t tx_count = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	70bb      	strb	r3, [r7, #2]
        CC1201_GetNumTXBytes(&tx_count);
 800161c:	1cbb      	adds	r3, r7, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f980 	bl	8000924 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count: %d bytes\n\r", tx_count);
 8001624:	78bb      	ldrb	r3, [r7, #2]
 8001626:	4619      	mov	r1, r3
 8001628:	4842      	ldr	r0, [pc, #264]	@ (8001734 <test_buffer_operations+0x1bc>)
 800162a:	f007 fa53 	bl	8008ad4 <iprintf>
    }
    
    // Test single byte write
    printf("\n3. Testing Single Byte Write:\n\r");
 800162e:	4842      	ldr	r0, [pc, #264]	@ (8001738 <test_buffer_operations+0x1c0>)
 8001630:	f007 fa50 	bl	8008ad4 <iprintf>
    status = CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 8001634:	f107 0316 	add.w	r3, r7, #22
 8001638:	4619      	mov	r1, r3
 800163a:	20aa      	movs	r0, #170	@ 0xaa
 800163c:	f7ff fae8 	bl	8000c10 <CC1201_WriteSingleTxFifo>
 8001640:	4603      	mov	r3, r0
 8001642:	75fb      	strb	r3, [r7, #23]
    printf("  Write single byte [AA]: HAL=%d ", status);
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	4619      	mov	r1, r3
 8001648:	483c      	ldr	r0, [pc, #240]	@ (800173c <test_buffer_operations+0x1c4>)
 800164a:	f007 fa43 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10f      	bne.n	8001674 <test_buffer_operations+0xfc>
        print_cc1201_status(status_byte, "SINGLE_WRITE");
 8001654:	7dbb      	ldrb	r3, [r7, #22]
 8001656:	493a      	ldr	r1, [pc, #232]	@ (8001740 <test_buffer_operations+0x1c8>)
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fba5 	bl	8000da8 <print_cc1201_status>
        
        uint8_t tx_count = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	707b      	strb	r3, [r7, #1]
        CC1201_GetNumTXBytes(&tx_count);
 8001662:	1c7b      	adds	r3, r7, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff f95d 	bl	8000924 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count after single write: %d bytes\n\r", tx_count);
 800166a:	787b      	ldrb	r3, [r7, #1]
 800166c:	4619      	mov	r1, r3
 800166e:	4835      	ldr	r0, [pc, #212]	@ (8001744 <test_buffer_operations+0x1cc>)
 8001670:	f007 fa30 	bl	8008ad4 <iprintf>
    }
    
    // Test RX FIFO read (should be empty)
    printf("\n4. Testing RX FIFO Read (should be empty):\n\r");
 8001674:	4834      	ldr	r0, [pc, #208]	@ (8001748 <test_buffer_operations+0x1d0>)
 8001676:	f007 fa2d 	bl	8008ad4 <iprintf>
    uint8_t rx_buffer[10] = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	811a      	strh	r2, [r3, #8]
    status = CC1201_ReadRxFifo(rx_buffer, 1, &status_byte);
 8001684:	f107 0216 	add.w	r2, r7, #22
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2101      	movs	r1, #1
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa01 	bl	8000a94 <CC1201_ReadRxFifo>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]
    printf("  Read 1 byte from RX FIFO: HAL=%d ", status);
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	4619      	mov	r1, r3
 800169a:	482c      	ldr	r0, [pc, #176]	@ (800174c <test_buffer_operations+0x1d4>)
 800169c:	f007 fa1a 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d114      	bne.n	80016d0 <test_buffer_operations+0x158>
        print_cc1201_status(status_byte, "RX_READ");
 80016a6:	7dbb      	ldrb	r3, [r7, #22]
 80016a8:	4929      	ldr	r1, [pc, #164]	@ (8001750 <test_buffer_operations+0x1d8>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fb7c 	bl	8000da8 <print_cc1201_status>
        printf("  Read data: 0x%02X\n\r", rx_buffer[0]);
 80016b0:	793b      	ldrb	r3, [r7, #4]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4827      	ldr	r0, [pc, #156]	@ (8001754 <test_buffer_operations+0x1dc>)
 80016b6:	f007 fa0d 	bl	8008ad4 <iprintf>
        
        uint8_t rx_count = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	703b      	strb	r3, [r7, #0]
        CC1201_GetNumRXBytes(&rx_count);
 80016be:	463b      	mov	r3, r7
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f921 	bl	8000908 <CC1201_GetNumRXBytes>
        printf("  RX FIFO count: %d bytes\n\r", rx_count);
 80016c6:	783b      	ldrb	r3, [r7, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4823      	ldr	r0, [pc, #140]	@ (8001758 <test_buffer_operations+0x1e0>)
 80016cc:	f007 fa02 	bl	8008ad4 <iprintf>
    }
    
    // Clean up - flush TX FIFO
    printf("\n5. Cleanup - Flushing TX FIFO:\n\r");
 80016d0:	4822      	ldr	r0, [pc, #136]	@ (800175c <test_buffer_operations+0x1e4>)
 80016d2:	f007 f9ff 	bl	8008ad4 <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 80016d6:	f107 0316 	add.w	r3, r7, #22
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f850 	bl	8000780 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "CLEANUP_FLUSH");
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	491f      	ldr	r1, [pc, #124]	@ (8001760 <test_buffer_operations+0x1e8>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb5f 	bl	8000da8 <print_cc1201_status>
    
    uint8_t final_tx_count = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	70fb      	strb	r3, [r7, #3]
    CC1201_GetNumTXBytes(&final_tx_count);
 80016ee:	1cfb      	adds	r3, r7, #3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f917 	bl	8000924 <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO count: %d bytes\n\r", final_tx_count);
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	4619      	mov	r1, r3
 80016fa:	481a      	ldr	r0, [pc, #104]	@ (8001764 <test_buffer_operations+0x1ec>)
 80016fc:	f007 f9ea 	bl	8008ad4 <iprintf>
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
 8001700:	4819      	ldr	r0, [pc, #100]	@ (8001768 <test_buffer_operations+0x1f0>)
 8001702:	f007 f9e7 	bl	8008ad4 <iprintf>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800a454 	.word	0x0800a454
 8001714:	0800a484 	.word	0x0800a484
 8001718:	0800a4a8 	.word	0x0800a4a8
 800171c:	0800a4b4 	.word	0x0800a4b4
 8001720:	0800a4c0 	.word	0x0800a4c0
 8001724:	0800a4cc 	.word	0x0800a4cc
 8001728:	0800a6d8 	.word	0x0800a6d8
 800172c:	0800a4f4 	.word	0x0800a4f4
 8001730:	0800a520 	.word	0x0800a520
 8001734:	0800a52c 	.word	0x0800a52c
 8001738:	0800a548 	.word	0x0800a548
 800173c:	0800a56c 	.word	0x0800a56c
 8001740:	0800a590 	.word	0x0800a590
 8001744:	0800a5a0 	.word	0x0800a5a0
 8001748:	0800a5d0 	.word	0x0800a5d0
 800174c:	0800a600 	.word	0x0800a600
 8001750:	0800a624 	.word	0x0800a624
 8001754:	0800a62c 	.word	0x0800a62c
 8001758:	0800a644 	.word	0x0800a644
 800175c:	0800a660 	.word	0x0800a660
 8001760:	0800a684 	.word	0x0800a684
 8001764:	0800a694 	.word	0x0800a694
 8001768:	0800a6b8 	.word	0x0800a6b8

0800176c <test_state_changes>:

// Test 2: State Change Operations
void test_state_changes(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 8001772:	488d      	ldr	r0, [pc, #564]	@ (80019a8 <test_state_changes+0x23c>)
 8001774:	f007 f9ae 	bl	8008ad4 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	723b      	strb	r3, [r7, #8]
    uint8_t marc_state = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	71fb      	strb	r3, [r7, #7]
    
    // Apply preferred radio configuration and calibrate PLL before state changes
    printf("Applying radio configuration...\n\r");
 8001780:	488a      	ldr	r0, [pc, #552]	@ (80019ac <test_state_changes+0x240>)
 8001782:	f007 f9a7 	bl	8008ad4 <iprintf>
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 8001786:	f7ff fb05 	bl	8000d94 <CC1201_GetPreferredSettings>
 800178a:	60f8      	str	r0, [r7, #12]
    uint16_t num = CC1201_GetNumPreferredSettings();
 800178c:	f7ff fafa 	bl	8000d84 <CC1201_GetNumPreferredSettings>
 8001790:	4603      	mov	r3, r0
 8001792:	817b      	strh	r3, [r7, #10]
    status = CC1201_WriteRegisterConfig(settings, num);
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	4619      	mov	r1, r3
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff fac5 	bl	8000d28 <CC1201_WriteRegisterConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	727b      	strb	r3, [r7, #9]
    printf("  Config write: HAL=%d\n\r", status);
 80017a2:	7a7b      	ldrb	r3, [r7, #9]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4882      	ldr	r0, [pc, #520]	@ (80019b0 <test_state_changes+0x244>)
 80017a8:	f007 f994 	bl	8008ad4 <iprintf>
    
    printf("Calibrating frequency synthesizer (SCAL)...\n\r");
 80017ac:	4881      	ldr	r0, [pc, #516]	@ (80019b4 <test_state_changes+0x248>)
 80017ae:	f007 f991 	bl	8008ad4 <iprintf>
    status = CC1201_CalFreqSynth(&status_byte);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe ffa1 	bl	80006fe <CC1201_CalFreqSynth>
 80017bc:	4603      	mov	r3, r0
 80017be:	727b      	strb	r3, [r7, #9]
    printf("  SCAL strobe: HAL=%d ", status);
 80017c0:	7a7b      	ldrb	r3, [r7, #9]
 80017c2:	4619      	mov	r1, r3
 80017c4:	487c      	ldr	r0, [pc, #496]	@ (80019b8 <test_state_changes+0x24c>)
 80017c6:	f007 f985 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) { print_cc1201_status(status_byte, "SCAL"); }
 80017ca:	7a7b      	ldrb	r3, [r7, #9]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d104      	bne.n	80017da <test_state_changes+0x6e>
 80017d0:	7a3b      	ldrb	r3, [r7, #8]
 80017d2:	497a      	ldr	r1, [pc, #488]	@ (80019bc <test_state_changes+0x250>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fae7 	bl	8000da8 <print_cc1201_status>
    HAL_Delay(10);
 80017da:	200a      	movs	r0, #10
 80017dc:	f001 fa26 	bl	8002c2c <HAL_Delay>
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 80017e0:	4877      	ldr	r0, [pc, #476]	@ (80019c0 <test_state_changes+0x254>)
 80017e2:	f007 f977 	bl	8008ad4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe ffae 	bl	800074c <CC1201_EnterIdleMode>
 80017f0:	4603      	mov	r3, r0
 80017f2:	727b      	strb	r3, [r7, #9]
    printf("  Enter IDLE: HAL=%d ", status);
 80017f4:	7a7b      	ldrb	r3, [r7, #9]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4872      	ldr	r0, [pc, #456]	@ (80019c4 <test_state_changes+0x258>)
 80017fa:	f007 f96b 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 80017fe:	7a7b      	ldrb	r3, [r7, #9]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10d      	bne.n	8001820 <test_state_changes+0xb4>
        print_cc1201_status(status_byte, "IDLE");
 8001804:	7a3b      	ldrb	r3, [r7, #8]
 8001806:	4970      	ldr	r1, [pc, #448]	@ (80019c8 <test_state_changes+0x25c>)
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff facd 	bl	8000da8 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f86b 	bl	80008ec <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4619      	mov	r1, r3
 800181a:	486c      	ldr	r0, [pc, #432]	@ (80019cc <test_state_changes+0x260>)
 800181c:	f007 f95a 	bl	8008ad4 <iprintf>
    }
    HAL_Delay(50);
 8001820:	2032      	movs	r0, #50	@ 0x32
 8001822:	f001 fa03 	bl	8002c2c <HAL_Delay>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 8001826:	486a      	ldr	r0, [pc, #424]	@ (80019d0 <test_state_changes+0x264>)
 8001828:	f007 f954 	bl	8008ad4 <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe ff71 	bl	8000718 <CC1201_EnterRxMode>
 8001836:	4603      	mov	r3, r0
 8001838:	727b      	strb	r3, [r7, #9]
    printf("  Enter RX: HAL=%d ", status);
 800183a:	7a7b      	ldrb	r3, [r7, #9]
 800183c:	4619      	mov	r1, r3
 800183e:	4865      	ldr	r0, [pc, #404]	@ (80019d4 <test_state_changes+0x268>)
 8001840:	f007 f948 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001844:	7a7b      	ldrb	r3, [r7, #9]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d110      	bne.n	800186c <test_state_changes+0x100>
        print_cc1201_status(status_byte, "RX");
 800184a:	7a3b      	ldrb	r3, [r7, #8]
 800184c:	4962      	ldr	r1, [pc, #392]	@ (80019d8 <test_state_changes+0x26c>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff faaa 	bl	8000da8 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 8001854:	2064      	movs	r0, #100	@ 0x64
 8001856:	f001 f9e9 	bl	8002c2c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f845 	bl	80008ec <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	4619      	mov	r1, r3
 8001866:	485d      	ldr	r0, [pc, #372]	@ (80019dc <test_state_changes+0x270>)
 8001868:	f007 f934 	bl	8008ad4 <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 800186c:	485c      	ldr	r0, [pc, #368]	@ (80019e0 <test_state_changes+0x274>)
 800186e:	f007 f931 	bl	8008ad4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe ff68 	bl	800074c <CC1201_EnterIdleMode>
 800187c:	4603      	mov	r3, r0
 800187e:	727b      	strb	r3, [r7, #9]
    printf("  RX->IDLE: HAL=%d ", status);
 8001880:	7a7b      	ldrb	r3, [r7, #9]
 8001882:	4619      	mov	r1, r3
 8001884:	4857      	ldr	r0, [pc, #348]	@ (80019e4 <test_state_changes+0x278>)
 8001886:	f007 f925 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 800188a:	7a7b      	ldrb	r3, [r7, #9]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <test_state_changes+0x12e>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8001890:	7a3b      	ldrb	r3, [r7, #8]
 8001892:	4955      	ldr	r1, [pc, #340]	@ (80019e8 <test_state_changes+0x27c>)
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa87 	bl	8000da8 <print_cc1201_status>
    }
    HAL_Delay(50);
 800189a:	2032      	movs	r0, #50	@ 0x32
 800189c:	f001 f9c6 	bl	8002c2c <HAL_Delay>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 80018a0:	4852      	ldr	r0, [pc, #328]	@ (80019ec <test_state_changes+0x280>)
 80018a2:	f007 f917 	bl	8008ad4 <iprintf>
    // Ensure at least one byte is present in TX FIFO to avoid immediate underflow
    CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	20aa      	movs	r0, #170	@ 0xaa
 80018ae:	f7ff f9af 	bl	8000c10 <CC1201_WriteSingleTxFifo>
    print_cc1201_status(status_byte, "TX_FIFO_PRIME");
 80018b2:	7a3b      	ldrb	r3, [r7, #8]
 80018b4:	494e      	ldr	r1, [pc, #312]	@ (80019f0 <test_state_changes+0x284>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa76 	bl	8000da8 <print_cc1201_status>
    status = CC1201_EnterTxMode(&status_byte);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe ff36 	bl	8000732 <CC1201_EnterTxMode>
 80018c6:	4603      	mov	r3, r0
 80018c8:	727b      	strb	r3, [r7, #9]
    printf("  Enter TX: HAL=%d ", status);
 80018ca:	7a7b      	ldrb	r3, [r7, #9]
 80018cc:	4619      	mov	r1, r3
 80018ce:	4849      	ldr	r0, [pc, #292]	@ (80019f4 <test_state_changes+0x288>)
 80018d0:	f007 f900 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 80018d4:	7a7b      	ldrb	r3, [r7, #9]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d110      	bne.n	80018fc <test_state_changes+0x190>
        print_cc1201_status(status_byte, "TX");
 80018da:	7a3b      	ldrb	r3, [r7, #8]
 80018dc:	4946      	ldr	r1, [pc, #280]	@ (80019f8 <test_state_changes+0x28c>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fa62 	bl	8000da8 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 80018e4:	2032      	movs	r0, #50	@ 0x32
 80018e6:	f001 f9a1 	bl	8002c2c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fffd 	bl	80008ec <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4841      	ldr	r0, [pc, #260]	@ (80019fc <test_state_changes+0x290>)
 80018f8:	f007 f8ec 	bl	8008ad4 <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 80018fc:	4840      	ldr	r0, [pc, #256]	@ (8001a00 <test_state_changes+0x294>)
 80018fe:	f007 f8e9 	bl	8008ad4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe ff20 	bl	800074c <CC1201_EnterIdleMode>
 800190c:	4603      	mov	r3, r0
 800190e:	727b      	strb	r3, [r7, #9]
    printf("  TX->IDLE: HAL=%d ", status);
 8001910:	7a7b      	ldrb	r3, [r7, #9]
 8001912:	4619      	mov	r1, r3
 8001914:	483b      	ldr	r0, [pc, #236]	@ (8001a04 <test_state_changes+0x298>)
 8001916:	f007 f8dd 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 800191a:	7a7b      	ldrb	r3, [r7, #9]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d104      	bne.n	800192a <test_state_changes+0x1be>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 8001920:	7a3b      	ldrb	r3, [r7, #8]
 8001922:	4939      	ldr	r1, [pc, #228]	@ (8001a08 <test_state_changes+0x29c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fa3f 	bl	8000da8 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 800192a:	4838      	ldr	r0, [pc, #224]	@ (8001a0c <test_state_changes+0x2a0>)
 800192c:	f007 f8d2 	bl	8008ad4 <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fed5 	bl	80006e4 <CC1201_FastTxOn>
 800193a:	4603      	mov	r3, r0
 800193c:	727b      	strb	r3, [r7, #9]
    printf("  Fast TX On: HAL=%d ", status);
 800193e:	7a7b      	ldrb	r3, [r7, #9]
 8001940:	4619      	mov	r1, r3
 8001942:	4833      	ldr	r0, [pc, #204]	@ (8001a10 <test_state_changes+0x2a4>)
 8001944:	f007 f8c6 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001948:	7a7b      	ldrb	r3, [r7, #9]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10d      	bne.n	800196a <test_state_changes+0x1fe>
        print_cc1201_status(status_byte, "FSTXON");
 800194e:	7a3b      	ldrb	r3, [r7, #8]
 8001950:	4930      	ldr	r1, [pc, #192]	@ (8001a14 <test_state_changes+0x2a8>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fa28 	bl	8000da8 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe ffc6 	bl	80008ec <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4619      	mov	r1, r3
 8001964:	482c      	ldr	r0, [pc, #176]	@ (8001a18 <test_state_changes+0x2ac>)
 8001966:	f007 f8b5 	bl	8008ad4 <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 800196a:	482c      	ldr	r0, [pc, #176]	@ (8001a1c <test_state_changes+0x2b0>)
 800196c:	f007 f8b2 	bl	8008ad4 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fee9 	bl	800074c <CC1201_EnterIdleMode>
 800197a:	4603      	mov	r3, r0
 800197c:	727b      	strb	r3, [r7, #9]
    printf("  Final IDLE: HAL=%d ", status);
 800197e:	7a7b      	ldrb	r3, [r7, #9]
 8001980:	4619      	mov	r1, r3
 8001982:	4827      	ldr	r0, [pc, #156]	@ (8001a20 <test_state_changes+0x2b4>)
 8001984:	f007 f8a6 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001988:	7a7b      	ldrb	r3, [r7, #9]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d104      	bne.n	8001998 <test_state_changes+0x22c>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	4924      	ldr	r1, [pc, #144]	@ (8001a24 <test_state_changes+0x2b8>)
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fa08 	bl	8000da8 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 8001998:	4823      	ldr	r0, [pc, #140]	@ (8001a28 <test_state_changes+0x2bc>)
 800199a:	f007 f89b 	bl	8008ad4 <iprintf>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0800a6e0 	.word	0x0800a6e0
 80019ac:	0800a70c 	.word	0x0800a70c
 80019b0:	0800a730 	.word	0x0800a730
 80019b4:	0800a74c 	.word	0x0800a74c
 80019b8:	0800a77c 	.word	0x0800a77c
 80019bc:	0800a794 	.word	0x0800a794
 80019c0:	0800a79c 	.word	0x0800a79c
 80019c4:	0800a7b8 	.word	0x0800a7b8
 80019c8:	0800a7d0 	.word	0x0800a7d0
 80019cc:	0800a7d8 	.word	0x0800a7d8
 80019d0:	0800a7f0 	.word	0x0800a7f0
 80019d4:	0800a808 	.word	0x0800a808
 80019d8:	0800a81c 	.word	0x0800a81c
 80019dc:	0800a820 	.word	0x0800a820
 80019e0:	0800a844 	.word	0x0800a844
 80019e4:	0800a860 	.word	0x0800a860
 80019e8:	0800a874 	.word	0x0800a874
 80019ec:	0800a880 	.word	0x0800a880
 80019f0:	0800a898 	.word	0x0800a898
 80019f4:	0800a8a8 	.word	0x0800a8a8
 80019f8:	0800a8bc 	.word	0x0800a8bc
 80019fc:	0800a8c0 	.word	0x0800a8c0
 8001a00:	0800a8e0 	.word	0x0800a8e0
 8001a04:	0800a8fc 	.word	0x0800a8fc
 8001a08:	0800a910 	.word	0x0800a910
 8001a0c:	0800a91c 	.word	0x0800a91c
 8001a10:	0800a940 	.word	0x0800a940
 8001a14:	0800a958 	.word	0x0800a958
 8001a18:	0800a960 	.word	0x0800a960
 8001a1c:	0800a984 	.word	0x0800a984
 8001a20:	0800a9a0 	.word	0x0800a9a0
 8001a24:	0800a9b8 	.word	0x0800a9b8
 8001a28:	0800a9c4 	.word	0x0800a9c4

08001a2c <test_individual_functions>:

// Test 3: Individual Function Tests
void test_individual_functions(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
    printf("\n=== TEST 3: INDIVIDUAL FUNCTION TESTS ===\n\r");
 8001a32:	486b      	ldr	r0, [pc, #428]	@ (8001be0 <test_individual_functions+0x1b4>)
 8001a34:	f007 f84e 	bl	8008ad4 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t data = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	713b      	strb	r3, [r7, #4]
    uint8_t status_byte = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	70fb      	strb	r3, [r7, #3]
    
    // Test CC1201_ReadStatus (using a safe register like IOCFG2)
    printf("1. Testing CC1201_ReadStatus():\n\r");
 8001a40:	4868      	ldr	r0, [pc, #416]	@ (8001be4 <test_individual_functions+0x1b8>)
 8001a42:	f007 f847 	bl	8008ad4 <iprintf>
    status = CC1201_ReadStatus(0x01, &data); // IOCFG2 register
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7fe fec2 	bl	80007d4 <CC1201_ReadStatus>
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
    printf("  Read IOCFG2 (0x01): HAL=%d, Data=0x%02X\n\r", status, data);
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	793a      	ldrb	r2, [r7, #4]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4863      	ldr	r0, [pc, #396]	@ (8001be8 <test_individual_functions+0x1bc>)
 8001a5c:	f007 f83a 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <test_individual_functions+0x42>
        printf("  ✓ CC1201_ReadStatus() WORKING\n\r");
 8001a66:	4861      	ldr	r0, [pc, #388]	@ (8001bec <test_individual_functions+0x1c0>)
 8001a68:	f007 f834 	bl	8008ad4 <iprintf>
 8001a6c:	e002      	b.n	8001a74 <test_individual_functions+0x48>
    } else {
        printf("  ✗ CC1201_ReadStatus() FAILED\n\r");
 8001a6e:	4860      	ldr	r0, [pc, #384]	@ (8001bf0 <test_individual_functions+0x1c4>)
 8001a70:	f007 f830 	bl	8008ad4 <iprintf>
    }
    
    // Test CC1201_WriteRegister and verify with read
    printf("\n2. Testing CC1201_WriteRegister():\n\r");
 8001a74:	485f      	ldr	r0, [pc, #380]	@ (8001bf4 <test_individual_functions+0x1c8>)
 8001a76:	f007 f82d 	bl	8008ad4 <iprintf>
    uint8_t original_value = data; // Store original value
 8001a7a:	793b      	ldrb	r3, [r7, #4]
 8001a7c:	71bb      	strb	r3, [r7, #6]
    uint8_t test_value = 0x55; // Test pattern
 8001a7e:	2355      	movs	r3, #85	@ 0x55
 8001a80:	717b      	strb	r3, [r7, #5]
    
    status = CC1201_WriteRegister(0x01, test_value);
 8001a82:	797b      	ldrb	r3, [r7, #5]
 8001a84:	4619      	mov	r1, r3
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7fe fef4 	bl	8000874 <CC1201_WriteRegister>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
    printf("  Write IOCFG2 (0x55): HAL=%d\n\r", status);
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4858      	ldr	r0, [pc, #352]	@ (8001bf8 <test_individual_functions+0x1cc>)
 8001a96:	f007 f81d 	bl	8008ad4 <iprintf>
    
    if (status == HAL_OK) {
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d125      	bne.n	8001aec <test_individual_functions+0xc0>
        // Read back to verify
        status = CC1201_ReadStatus(0x01, &data);
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7fe fe95 	bl	80007d4 <CC1201_ReadStatus>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
        printf("  Read back: HAL=%d, Data=0x%02X\n\r", status, data);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	793a      	ldrb	r2, [r7, #4]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4851      	ldr	r0, [pc, #324]	@ (8001bfc <test_individual_functions+0x1d0>)
 8001ab6:	f007 f80d 	bl	8008ad4 <iprintf>
        
        if (status == HAL_OK && data == test_value) {
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d107      	bne.n	8001ad0 <test_individual_functions+0xa4>
 8001ac0:	793b      	ldrb	r3, [r7, #4]
 8001ac2:	797a      	ldrb	r2, [r7, #5]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d103      	bne.n	8001ad0 <test_individual_functions+0xa4>
            printf("  ✓ CC1201_WriteRegister() WORKING (Write/Read verified)\n\r");
 8001ac8:	484d      	ldr	r0, [pc, #308]	@ (8001c00 <test_individual_functions+0x1d4>)
 8001aca:	f007 f803 	bl	8008ad4 <iprintf>
 8001ace:	e002      	b.n	8001ad6 <test_individual_functions+0xaa>
        } else {
            printf("  ✗ CC1201_WriteRegister() FAILED (Data mismatch)\n\r");
 8001ad0:	484c      	ldr	r0, [pc, #304]	@ (8001c04 <test_individual_functions+0x1d8>)
 8001ad2:	f006 ffff 	bl	8008ad4 <iprintf>
        }
        
        // Restore original value
        CC1201_WriteRegister(0x01, original_value);
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7fe feca 	bl	8000874 <CC1201_WriteRegister>
        printf("  Restored original value: 0x%02X\n\r", original_value);
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4848      	ldr	r0, [pc, #288]	@ (8001c08 <test_individual_functions+0x1dc>)
 8001ae6:	f006 fff5 	bl	8008ad4 <iprintf>
 8001aea:	e002      	b.n	8001af2 <test_individual_functions+0xc6>
    } else {
        printf("  ✗ CC1201_WriteRegister() FAILED\n\r");
 8001aec:	4847      	ldr	r0, [pc, #284]	@ (8001c0c <test_individual_functions+0x1e0>)
 8001aee:	f006 fff1 	bl	8008ad4 <iprintf>
    }
    
    // Test CC1201_SendStrobe (using NOP)
    printf("\n3. Testing CC1201_SendStrobe():\n\r");
 8001af2:	4847      	ldr	r0, [pc, #284]	@ (8001c10 <test_individual_functions+0x1e4>)
 8001af4:	f006 ffee 	bl	8008ad4 <iprintf>
    status = CC1201_SendStrobe(0x3D, &status_byte); // NOP strobe
 8001af8:	1cfb      	adds	r3, r7, #3
 8001afa:	4619      	mov	r1, r3
 8001afc:	203d      	movs	r0, #61	@ 0x3d
 8001afe:	f7ff f899 	bl	8000c34 <CC1201_SendStrobe>
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
    printf("  Send NOP strobe: HAL=%d ", status);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4842      	ldr	r0, [pc, #264]	@ (8001c14 <test_individual_functions+0x1e8>)
 8001b0c:	f006 ffe2 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d108      	bne.n	8001b28 <test_individual_functions+0xfc>
        print_cc1201_status(status_byte, "STROBE_NOP");
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	493f      	ldr	r1, [pc, #252]	@ (8001c18 <test_individual_functions+0x1ec>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f944 	bl	8000da8 <print_cc1201_status>
        printf("  ✓ CC1201_SendStrobe() WORKING\n\r");
 8001b20:	483e      	ldr	r0, [pc, #248]	@ (8001c1c <test_individual_functions+0x1f0>)
 8001b22:	f006 ffd7 	bl	8008ad4 <iprintf>
 8001b26:	e002      	b.n	8001b2e <test_individual_functions+0x102>
    } else {
        printf("  ✗ CC1201_SendStrobe() FAILED\n\r");
 8001b28:	483d      	ldr	r0, [pc, #244]	@ (8001c20 <test_individual_functions+0x1f4>)
 8001b2a:	f006 ffd3 	bl	8008ad4 <iprintf>
    }
    
    // Test CC1201_ReadMARCState
    printf("\n4. Testing CC1201_ReadMARCState():\n\r");
 8001b2e:	483d      	ldr	r0, [pc, #244]	@ (8001c24 <test_individual_functions+0x1f8>)
 8001b30:	f006 ffd0 	bl	8008ad4 <iprintf>
    uint8_t marc_state = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	70bb      	strb	r3, [r7, #2]
    status = CC1201_ReadMARCState(&marc_state);
 8001b38:	1cbb      	adds	r3, r7, #2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fed6 	bl	80008ec <CC1201_ReadMARCState>
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
    printf("  Read MARC State: HAL=%d, State=0x%02X\n\r", status, marc_state);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	78ba      	ldrb	r2, [r7, #2]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4837      	ldr	r0, [pc, #220]	@ (8001c28 <test_individual_functions+0x1fc>)
 8001b4c:	f006 ffc2 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <test_individual_functions+0x132>
        printf("  ✓ CC1201_ReadMARCState() WORKING\n\r");
 8001b56:	4835      	ldr	r0, [pc, #212]	@ (8001c2c <test_individual_functions+0x200>)
 8001b58:	f006 ffbc 	bl	8008ad4 <iprintf>
 8001b5c:	e002      	b.n	8001b64 <test_individual_functions+0x138>
    } else {
        printf("  ✗ CC1201_ReadMARCState() FAILED\n\r");
 8001b5e:	4834      	ldr	r0, [pc, #208]	@ (8001c30 <test_individual_functions+0x204>)
 8001b60:	f006 ffb8 	bl	8008ad4 <iprintf>
    }
    
    // Test CC1201_GetNumRXBytes
    printf("\n5. Testing CC1201_GetNumRXBytes():\n\r");
 8001b64:	4833      	ldr	r0, [pc, #204]	@ (8001c34 <test_individual_functions+0x208>)
 8001b66:	f006 ffb5 	bl	8008ad4 <iprintf>
    uint8_t rx_bytes = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	707b      	strb	r3, [r7, #1]
    status = CC1201_GetNumRXBytes(&rx_bytes);
 8001b6e:	1c7b      	adds	r3, r7, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fec9 	bl	8000908 <CC1201_GetNumRXBytes>
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
    printf("  Get RX Bytes: HAL=%d, Count=%d\n\r", status, rx_bytes);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	787a      	ldrb	r2, [r7, #1]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	482d      	ldr	r0, [pc, #180]	@ (8001c38 <test_individual_functions+0x20c>)
 8001b82:	f006 ffa7 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <test_individual_functions+0x168>
        printf("  ✓ CC1201_GetNumRXBytes() WORKING\n\r");
 8001b8c:	482b      	ldr	r0, [pc, #172]	@ (8001c3c <test_individual_functions+0x210>)
 8001b8e:	f006 ffa1 	bl	8008ad4 <iprintf>
 8001b92:	e002      	b.n	8001b9a <test_individual_functions+0x16e>
    } else {
        printf("  ✗ CC1201_GetNumRXBytes() FAILED\n\r");
 8001b94:	482a      	ldr	r0, [pc, #168]	@ (8001c40 <test_individual_functions+0x214>)
 8001b96:	f006 ff9d 	bl	8008ad4 <iprintf>
    }
    
    // Test CC1201_GetNumTXBytes
    printf("\n6. Testing CC1201_GetNumTXBytes():\n\r");
 8001b9a:	482a      	ldr	r0, [pc, #168]	@ (8001c44 <test_individual_functions+0x218>)
 8001b9c:	f006 ff9a 	bl	8008ad4 <iprintf>
    uint8_t tx_bytes = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	703b      	strb	r3, [r7, #0]
    status = CC1201_GetNumTXBytes(&tx_bytes);
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe febc 	bl	8000924 <CC1201_GetNumTXBytes>
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
    printf("  Get TX Bytes: HAL=%d, Count=%d\n\r", status, tx_bytes);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	783a      	ldrb	r2, [r7, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4824      	ldr	r0, [pc, #144]	@ (8001c48 <test_individual_functions+0x21c>)
 8001bb8:	f006 ff8c 	bl	8008ad4 <iprintf>
    if (status == HAL_OK) {
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <test_individual_functions+0x19e>
        printf("  ✓ CC1201_GetNumTXBytes() WORKING\n\r");
 8001bc2:	4822      	ldr	r0, [pc, #136]	@ (8001c4c <test_individual_functions+0x220>)
 8001bc4:	f006 ff86 	bl	8008ad4 <iprintf>
 8001bc8:	e002      	b.n	8001bd0 <test_individual_functions+0x1a4>
    } else {
        printf("  ✗ CC1201_GetNumTXBytes() FAILED\n\r");
 8001bca:	4821      	ldr	r0, [pc, #132]	@ (8001c50 <test_individual_functions+0x224>)
 8001bcc:	f006 ff82 	bl	8008ad4 <iprintf>
    }
    
    printf("=== INDIVIDUAL FUNCTION TEST COMPLETE ===\n\r");
 8001bd0:	4820      	ldr	r0, [pc, #128]	@ (8001c54 <test_individual_functions+0x228>)
 8001bd2:	f006 ff7f 	bl	8008ad4 <iprintf>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	0800a9ec 	.word	0x0800a9ec
 8001be4:	0800aa1c 	.word	0x0800aa1c
 8001be8:	0800aa40 	.word	0x0800aa40
 8001bec:	0800aa6c 	.word	0x0800aa6c
 8001bf0:	0800aa90 	.word	0x0800aa90
 8001bf4:	0800aab4 	.word	0x0800aab4
 8001bf8:	0800aadc 	.word	0x0800aadc
 8001bfc:	0800aafc 	.word	0x0800aafc
 8001c00:	0800ab20 	.word	0x0800ab20
 8001c04:	0800ab60 	.word	0x0800ab60
 8001c08:	0800ab98 	.word	0x0800ab98
 8001c0c:	0800abbc 	.word	0x0800abbc
 8001c10:	0800abe4 	.word	0x0800abe4
 8001c14:	0800ac08 	.word	0x0800ac08
 8001c18:	0800ac24 	.word	0x0800ac24
 8001c1c:	0800ac30 	.word	0x0800ac30
 8001c20:	0800ac54 	.word	0x0800ac54
 8001c24:	0800ac78 	.word	0x0800ac78
 8001c28:	0800aca0 	.word	0x0800aca0
 8001c2c:	0800accc 	.word	0x0800accc
 8001c30:	0800acf4 	.word	0x0800acf4
 8001c34:	0800ad1c 	.word	0x0800ad1c
 8001c38:	0800ad44 	.word	0x0800ad44
 8001c3c:	0800ad68 	.word	0x0800ad68
 8001c40:	0800ad90 	.word	0x0800ad90
 8001c44:	0800adb8 	.word	0x0800adb8
 8001c48:	0800ade0 	.word	0x0800ade0
 8001c4c:	0800ae04 	.word	0x0800ae04
 8001c50:	0800ae2c 	.word	0x0800ae2c
 8001c54:	0800ae54 	.word	0x0800ae54

08001c58 <run_comprehensive_cc1201_tests>:

// Main test runner
void run_comprehensive_cc1201_tests(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
    printf("\n STARTING COMPREHENSIVE CC1201 TEST SUITE \n\r");
 8001c5e:	4816      	ldr	r0, [pc, #88]	@ (8001cb8 <run_comprehensive_cc1201_tests+0x60>)
 8001c60:	f006 ff38 	bl	8008ad4 <iprintf>
    printf("================================================\n\r");
 8001c64:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <run_comprehensive_cc1201_tests+0x64>)
 8001c66:	f006 ff35 	bl	8008ad4 <iprintf>
    
    // Run all tests
    test_buffer_operations();
 8001c6a:	f7ff fc85 	bl	8001578 <test_buffer_operations>
    HAL_Delay(500);
 8001c6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c72:	f000 ffdb 	bl	8002c2c <HAL_Delay>
    
    test_state_changes();
 8001c76:	f7ff fd79 	bl	800176c <test_state_changes>
    HAL_Delay(500);
 8001c7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c7e:	f000 ffd5 	bl	8002c2c <HAL_Delay>
    
    test_individual_functions();
 8001c82:	f7ff fed3 	bl	8001a2c <test_individual_functions>
    HAL_Delay(500);
 8001c86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c8a:	f000 ffcf 	bl	8002c2c <HAL_Delay>
    
    printf("\n COMPREHENSIVE TEST SUITE COMPLETE! \n\r");
 8001c8e:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <run_comprehensive_cc1201_tests+0x68>)
 8001c90:	f006 ff20 	bl	8008ad4 <iprintf>
    printf("=============================================\n\r");
 8001c94:	480b      	ldr	r0, [pc, #44]	@ (8001cc4 <run_comprehensive_cc1201_tests+0x6c>)
 8001c96:	f006 ff1d 	bl	8008ad4 <iprintf>
    
    // Final status check
    uint8_t final_status = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    CC1201_Nop(&final_status);
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fd7b 	bl	800079c <CC1201_Nop>
    print_cc1201_status(final_status, "FINAL_STATUS");
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	4907      	ldr	r1, [pc, #28]	@ (8001cc8 <run_comprehensive_cc1201_tests+0x70>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f87c 	bl	8000da8 <print_cc1201_status>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	0800ae80 	.word	0x0800ae80
 8001cbc:	0800aeb0 	.word	0x0800aeb0
 8001cc0:	0800aee4 	.word	0x0800aee4
 8001cc4:	0800af0c 	.word	0x0800af0c
 8001cc8:	0800af3c 	.word	0x0800af3c

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001cd2:	f000 fa09 	bl	80020e8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd6:	f000 ff17 	bl	8002b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cda:	f000 f887 	bl	8001dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cde:	f000 f947 	bl	8001f70 <MX_GPIO_Init>
  MX_SPI4_Init();
 8001ce2:	f000 f8ef 	bl	8001ec4 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 fcb8 	bl	800265c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f000 fcb5 	bl	800265c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f000 fcb2 	bl	800265c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 fda2 	bl	8002844 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001d00:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <main+0x100>)
 8001d02:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d06:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001d08:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <main+0x100>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <main+0x100>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <main+0x100>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dcc <main+0x100>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001d20:	492a      	ldr	r1, [pc, #168]	@ (8001dcc <main+0x100>)
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 fe12 	bl	800294c <BSP_COM_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <main+0x66>
  {
    Error_Handler();
 8001d2e:	f000 fa1b 	bl	8002168 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8001d32:	4827      	ldr	r0, [pc, #156]	@ (8001dd0 <main+0x104>)
 8001d34:	f006 fece 	bl	8008ad4 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 fd05 	bl	8002748 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8001d3e:	4825      	ldr	r0, [pc, #148]	@ (8001dd4 <main+0x108>)
 8001d40:	f006 fec8 	bl	8008ad4 <iprintf>

  uint8_t test_status = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fd26 	bl	800079c <CC1201_Nop>
 8001d50:	4603      	mov	r3, r0
 8001d52:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	79ba      	ldrb	r2, [r7, #6]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	481f      	ldr	r0, [pc, #124]	@ (8001dd8 <main+0x10c>)
 8001d5c:	f006 feba 	bl	8008ad4 <iprintf>
  
  if (nop_result == HAL_OK) {
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <main+0xae>
      printf("Basic CC1201 communication working!\n\r");
 8001d66:	481d      	ldr	r0, [pc, #116]	@ (8001ddc <main+0x110>)
 8001d68:	f006 feb4 	bl	8008ad4 <iprintf>
      BSP_LED_Off(LED_RED);
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f000 fd15 	bl	800279c <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 fce8 	bl	8002748 <BSP_LED_On>
 8001d78:	e008      	b.n	8001d8c <main+0xc0>
  } else {
      printf("CC1201 communication failed!\n\r");
 8001d7a:	4819      	ldr	r0, [pc, #100]	@ (8001de0 <main+0x114>)
 8001d7c:	f006 feaa 	bl	8008ad4 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 fd0b 	bl	800279c <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8001d86:	2002      	movs	r0, #2
 8001d88:	f000 fcde 	bl	8002748 <BSP_LED_On>
  }
  
  // Try proper power-up sequence first
  HAL_Delay(1000);
 8001d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d90:	f000 ff4c 	bl	8002c2c <HAL_Delay>
  cc1201_power_up_sequence();
 8001d94:	f7ff f896 	bl	8000ec4 <cc1201_power_up_sequence>
  
  // Run comprehensive hardware diagnostic
  HAL_Delay(500);
 8001d98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d9c:	f000 ff46 	bl	8002c2c <HAL_Delay>
  comprehensive_cc1201_diagnostic();
 8001da0:	f7ff f924 	bl	8000fec <comprehensive_cc1201_diagnostic>
  
  // Run functional tests when SPI comms respond (even if initial status byte is 0xFF)
  if (nop_result == HAL_OK) {
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <main+0xec>
      HAL_Delay(1000);
 8001daa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dae:	f000 ff3d 	bl	8002c2c <HAL_Delay>
      run_comprehensive_cc1201_tests();
 8001db2:	f7ff ff51 	bl	8001c58 <run_comprehensive_cc1201_tests>
 8001db6:	e006      	b.n	8001dc6 <main+0xfa>
  } else {
      printf("\nSkipping functional tests due to communication issues.\n\r");
 8001db8:	480a      	ldr	r0, [pc, #40]	@ (8001de4 <main+0x118>)
 8001dba:	f006 fe8b 	bl	8008ad4 <iprintf>
      printf("Please resolve hardware issues first.\n\r");
 8001dbe:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <main+0x11c>)
 8001dc0:	f006 fe88 	bl	8008ad4 <iprintf>
  }

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	e7fd      	b.n	8001dc6 <main+0xfa>
 8001dca:	bf00      	nop
 8001dcc:	240000a4 	.word	0x240000a4
 8001dd0:	0800af4c 	.word	0x0800af4c
 8001dd4:	0800af68 	.word	0x0800af68
 8001dd8:	0800af98 	.word	0x0800af98
 8001ddc:	0800afc4 	.word	0x0800afc4
 8001de0:	0800afec 	.word	0x0800afec
 8001de4:	0800b00c 	.word	0x0800b00c
 8001de8:	0800b048 	.word	0x0800b048

08001dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09c      	sub	sp, #112	@ 0x70
 8001df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df6:	224c      	movs	r2, #76	@ 0x4c
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f006 febf 	bl	8008b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2220      	movs	r2, #32
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f006 feb9 	bl	8008b7e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f001 fd85 	bl	800391c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <SystemClock_Config+0xd0>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	4a28      	ldr	r2, [pc, #160]	@ (8001ebc <SystemClock_Config+0xd0>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001e22:	4b26      	ldr	r3, [pc, #152]	@ (8001ebc <SystemClock_Config+0xd0>)
 8001e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <SystemClock_Config+0xd4>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e34:	4a22      	ldr	r2, [pc, #136]	@ (8001ec0 <SystemClock_Config+0xd4>)
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <SystemClock_Config+0xd4>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e48:	bf00      	nop
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <SystemClock_Config+0xd4>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e56:	d1f8      	bne.n	8001e4a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e60:	2340      	movs	r3, #64	@ 0x40
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 fd8f 	bl	8003990 <HAL_RCC_OscConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e78:	f000 f976 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7c:	233f      	movs	r3, #63	@ 0x3f
 8001e7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 f9ce 	bl	8004244 <HAL_RCC_ClockConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001eae:	f000 f95b 	bl	8002168 <Error_Handler>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3770      	adds	r7, #112	@ 0x70
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	58000400 	.word	0x58000400
 8001ec0:	58024800 	.word	0x58024800

08001ec4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001ec8:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001eca:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <MX_SPI4_Init+0xa8>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001ed0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ed4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001ede:	2207      	movs	r2, #7
 8001ee0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001ef0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ef4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_SPI4_Init+0xa4>)
 8001f54:	f004 fb2e 	bl	80065b4 <HAL_SPI_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001f5e:	f000 f903 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	240000b8 	.word	0x240000b8
 8001f6c:	40013400 	.word	0x40013400

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b37      	ldr	r3, [pc, #220]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8c:	4a35      	ldr	r2, [pc, #212]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f96:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001faa:	4a2e      	ldr	r2, [pc, #184]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc8:	4a26      	ldr	r2, [pc, #152]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffe:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8002000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002004:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <MX_GPIO_Init+0xf4>)
 8002010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 (CC1201 Interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800201c:	2320      	movs	r3, #32
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002020:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	480d      	ldr	r0, [pc, #52]	@ (8002068 <MX_GPIO_Init+0xf8>)
 8002032:	f001 fa5d 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 (CC1201 Reset) */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002036:	2310      	movs	r3, #16
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4806      	ldr	r0, [pc, #24]	@ (8002068 <MX_GPIO_Init+0xf8>)
 800204e:	f001 fa4f 	bl	80034f0 <HAL_GPIO_Init>
  
  // Set reset pin HIGH (inactive) by default
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	2110      	movs	r1, #16
 8002056:	4804      	ldr	r0, [pc, #16]	@ (8002068 <MX_GPIO_Init+0xf8>)
 8002058:	f001 fc12 	bl	8003880 <HAL_GPIO_WritePin>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	@ 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	58024400 	.word	0x58024400
 8002068:	58020c00 	.word	0x58020c00

0800206c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	2b20      	cmp	r3, #32
 800207a:	d129      	bne.n	80020d0 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 800207c:	4816      	ldr	r0, [pc, #88]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 800207e:	f006 fd29 	bl	8008ad4 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 8002086:	f107 030f 	add.w	r3, r7, #15
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fc2e 	bl	80008ec <CC1201_ReadMARCState>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	4619      	mov	r1, r3
 800209a:	4810      	ldr	r0, [pc, #64]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x70>)
 800209c:	f006 fd1a 	bl	8008ad4 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 80020a4:	f107 030e 	add.w	r3, r7, #14
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fc2d 	bl	8000908 <CC1201_GetNumRXBytes>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4809      	ldr	r0, [pc, #36]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x74>)
 80020ba:	f006 fd0b 	bl	8008ad4 <iprintf>
            if (rx_bytes > 0) {
 80020be:	7bbb      	ldrb	r3, [r7, #14]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 80020c4:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x78>)
 80020c6:	f006 fd05 	bl	8008ad4 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 fb90 	bl	80027f0 <BSP_LED_Toggle>
    }
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	0800b070 	.word	0x0800b070
 80020dc:	0800b090 	.word	0x0800b090
 80020e0:	0800b0b8 	.word	0x0800b0b8
 80020e4:	0800b0d4 	.word	0x0800b0d4

080020e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020ee:	463b      	mov	r3, r7
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020fa:	f000 fed7 	bl	8002eac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002102:	2300      	movs	r3, #0
 8002104:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800210a:	231f      	movs	r3, #31
 800210c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800210e:	2387      	movs	r3, #135	@ 0x87
 8002110:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002112:	2300      	movs	r3, #0
 8002114:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002116:	2300      	movs	r3, #0
 8002118:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800211a:	2301      	movs	r3, #1
 800211c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800211e:	2301      	movs	r3, #1
 8002120:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800212a:	463b      	mov	r3, r7
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fef5 	bl	8002f1c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002132:	2004      	movs	r0, #4
 8002134:	f000 fed2 	bl	8002edc <HAL_MPU_Enable>

}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <BSP_PB_Callback+0x24>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	240000b4 	.word	0x240000b4

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <Error_Handler+0x8>

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_MspInit+0x30>)
 800217c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_MspInit+0x30>)
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_MspInit+0x30>)
 800218c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	58024400 	.word	0x58024400

080021a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0ba      	sub	sp, #232	@ 0xe8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	22c0      	movs	r2, #192	@ 0xc0
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f006 fcd8 	bl	8008b7e <memset>
  if(hspi->Instance==SPI4)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a37      	ldr	r2, [pc, #220]	@ (80022b0 <HAL_SPI_MspInit+0x108>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d166      	bne.n	80022a6 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80021d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4618      	mov	r0, r3
 80021ee:	f002 fbb5 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80021f8:	f7ff ffb6 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80021fc:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <HAL_SPI_MspInit+0x10c>)
 80021fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002202:	4a2c      	ldr	r2, [pc, #176]	@ (80022b4 <HAL_SPI_MspInit+0x10c>)
 8002204:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002208:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800220c:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <HAL_SPI_MspInit+0x10c>)
 800220e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800221a:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <HAL_SPI_MspInit+0x10c>)
 800221c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002220:	4a24      	ldr	r2, [pc, #144]	@ (80022b4 <HAL_SPI_MspInit+0x10c>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800222a:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <HAL_SPI_MspInit+0x10c>)
 800222c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    
    // Configure SPI pins (SCK, MISO, MOSI) 
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002238:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800223c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Increased speed
 800224c:	2302      	movs	r3, #2
 800224e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002252:	2305      	movs	r3, #5
 8002254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002258:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800225c:	4619      	mov	r1, r3
 800225e:	4816      	ldr	r0, [pc, #88]	@ (80022b8 <HAL_SPI_MspInit+0x110>)
 8002260:	f001 f946 	bl	80034f0 <HAL_GPIO_Init>
    
    // Configure PE11 as manual CS (GPIO output)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002264:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800227e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002282:	4619      	mov	r1, r3
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <HAL_SPI_MspInit+0x110>)
 8002286:	f001 f933 	bl	80034f0 <HAL_GPIO_Init>
    
    // Set CS high (inactive) by default
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002290:	4809      	ldr	r0, [pc, #36]	@ (80022b8 <HAL_SPI_MspInit+0x110>)
 8002292:	f001 faf5 	bl	8003880 <HAL_GPIO_WritePin>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	2054      	movs	r0, #84	@ 0x54
 800229c:	f000 fdd1 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80022a0:	2054      	movs	r0, #84	@ 0x54
 80022a2:	f000 fde8 	bl	8002e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 80022a6:	bf00      	nop
 80022a8:	37e8      	adds	r7, #232	@ 0xe8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40013400 	.word	0x40013400
 80022b4:	58024400 	.word	0x58024400
 80022b8:	58021000 	.word	0x58021000

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <NMI_Handler+0x4>

080022c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <MemManage_Handler+0x4>

080022d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002312:	f000 fc6b 	bl	8002bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}

0800231a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 fb02 	bl	8002928 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800232c:	2020      	movs	r0, #32
 800232e:	f001 fada 	bl	80038e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <SPI4_IRQHandler+0x10>)
 800233e:	f004 ff85 	bl	800724c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	240000b8 	.word	0x240000b8

0800234c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
  }

  return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fb35 	bl	8002a10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf1      	blt.n	8002398 <_write+0x12>
  }
  return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_close>:

int _close(int file)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e6:	605a      	str	r2, [r3, #4]
  return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_isatty>:

int _isatty(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f006 fbe0 	bl	8008c1c <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	24080000 	.word	0x24080000
 8002488:	00000400 	.word	0x00000400
 800248c:	24000140 	.word	0x24000140
 8002490:	24000338 	.word	0x24000338

08002494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002498:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <SystemInit+0x114>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	4a42      	ldr	r2, [pc, #264]	@ (80025a8 <SystemInit+0x114>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024a8:	4b40      	ldr	r3, [pc, #256]	@ (80025ac <SystemInit+0x118>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d807      	bhi.n	80024c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024b4:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <SystemInit+0x118>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 030f 	bic.w	r3, r3, #15
 80024bc:	4a3b      	ldr	r2, [pc, #236]	@ (80025ac <SystemInit+0x118>)
 80024be:	f043 0307 	orr.w	r3, r3, #7
 80024c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024c4:	4b3a      	ldr	r3, [pc, #232]	@ (80025b0 <SystemInit+0x11c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a39      	ldr	r2, [pc, #228]	@ (80025b0 <SystemInit+0x11c>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024d0:	4b37      	ldr	r3, [pc, #220]	@ (80025b0 <SystemInit+0x11c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024d6:	4b36      	ldr	r3, [pc, #216]	@ (80025b0 <SystemInit+0x11c>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4935      	ldr	r1, [pc, #212]	@ (80025b0 <SystemInit+0x11c>)
 80024dc:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <SystemInit+0x120>)
 80024de:	4013      	ands	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <SystemInit+0x118>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024ee:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <SystemInit+0x118>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 030f 	bic.w	r3, r3, #15
 80024f6:	4a2d      	ldr	r2, [pc, #180]	@ (80025ac <SystemInit+0x118>)
 80024f8:	f043 0307 	orr.w	r3, r3, #7
 80024fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024fe:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <SystemInit+0x11c>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002504:	4b2a      	ldr	r3, [pc, #168]	@ (80025b0 <SystemInit+0x11c>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800250a:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <SystemInit+0x11c>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002510:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <SystemInit+0x11c>)
 8002512:	4a29      	ldr	r2, [pc, #164]	@ (80025b8 <SystemInit+0x124>)
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002516:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <SystemInit+0x11c>)
 8002518:	4a28      	ldr	r2, [pc, #160]	@ (80025bc <SystemInit+0x128>)
 800251a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800251c:	4b24      	ldr	r3, [pc, #144]	@ (80025b0 <SystemInit+0x11c>)
 800251e:	4a28      	ldr	r2, [pc, #160]	@ (80025c0 <SystemInit+0x12c>)
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002522:	4b23      	ldr	r3, [pc, #140]	@ (80025b0 <SystemInit+0x11c>)
 8002524:	2200      	movs	r2, #0
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002528:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <SystemInit+0x11c>)
 800252a:	4a25      	ldr	r2, [pc, #148]	@ (80025c0 <SystemInit+0x12c>)
 800252c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <SystemInit+0x11c>)
 8002530:	2200      	movs	r2, #0
 8002532:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002534:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <SystemInit+0x11c>)
 8002536:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <SystemInit+0x12c>)
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800253a:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <SystemInit+0x11c>)
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002540:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <SystemInit+0x11c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1a      	ldr	r2, [pc, #104]	@ (80025b0 <SystemInit+0x11c>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800254c:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <SystemInit+0x11c>)
 800254e:	2200      	movs	r2, #0
 8002550:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002552:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <SystemInit+0x130>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <SystemInit+0x134>)
 8002558:	4013      	ands	r3, r2
 800255a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800255e:	d202      	bcs.n	8002566 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002560:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <SystemInit+0x138>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002566:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <SystemInit+0x11c>)
 8002568:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800256c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d113      	bne.n	800259c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002574:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <SystemInit+0x11c>)
 8002576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800257a:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <SystemInit+0x11c>)
 800257c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002580:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <SystemInit+0x13c>)
 8002586:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800258a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <SystemInit+0x11c>)
 800258e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002592:	4a07      	ldr	r2, [pc, #28]	@ (80025b0 <SystemInit+0x11c>)
 8002594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002598:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00
 80025ac:	52002000 	.word	0x52002000
 80025b0:	58024400 	.word	0x58024400
 80025b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80025b8:	02020200 	.word	0x02020200
 80025bc:	01ff0000 	.word	0x01ff0000
 80025c0:	01010280 	.word	0x01010280
 80025c4:	5c001000 	.word	0x5c001000
 80025c8:	ffff0000 	.word	0xffff0000
 80025cc:	51008108 	.word	0x51008108
 80025d0:	52004000 	.word	0x52004000

080025d4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <ExitRun0Mode+0x2c>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a08      	ldr	r2, [pc, #32]	@ (8002600 <ExitRun0Mode+0x2c>)
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80025e4:	bf00      	nop
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <ExitRun0Mode+0x2c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f9      	beq.n	80025e6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	58024800 	.word	0x58024800

08002604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002604:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002640 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002608:	f7ff ffe4 	bl	80025d4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800260c:	f7ff ff42 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002612:	490d      	ldr	r1, [pc, #52]	@ (8002648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002614:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002628:	4c0a      	ldr	r4, [pc, #40]	@ (8002654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002636:	f006 faf7 	bl	8008c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7ff fb47 	bl	8001ccc <main>
  bx  lr
 800263e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002640:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002644:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002648:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800264c:	0800b22c 	.word	0x0800b22c
  ldr r2, =_sbss
 8002650:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002654:	24000334 	.word	0x24000334

08002658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC3_IRQHandler>
	...

0800265c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <BSP_LED_Init+0x28>
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d006      	beq.n	8002684 <BSP_LED_Init+0x28>
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d003      	beq.n	8002684 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800267c:	f06f 0301 	mvn.w	r3, #1
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002682:	e055      	b.n	8002730 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800268a:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <BSP_LED_Init+0xe0>)
 800268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002690:	4a2a      	ldr	r2, [pc, #168]	@ (800273c <BSP_LED_Init+0xe0>)
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800269a:	4b28      	ldr	r3, [pc, #160]	@ (800273c <BSP_LED_Init+0xe0>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	e021      	b.n	80026ee <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10f      	bne.n	80026d0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80026b0:	4b22      	ldr	r3, [pc, #136]	@ (800273c <BSP_LED_Init+0xe0>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b6:	4a21      	ldr	r2, [pc, #132]	@ (800273c <BSP_LED_Init+0xe0>)
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c0:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <BSP_LED_Init+0xe0>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	e00e      	b.n	80026ee <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <BSP_LED_Init+0xe0>)
 80026d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d6:	4a19      	ldr	r2, [pc, #100]	@ (800273c <BSP_LED_Init+0xe0>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <BSP_LED_Init+0xe0>)
 80026e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4a13      	ldr	r2, [pc, #76]	@ (8002740 <BSP_LED_Init+0xe4>)
 80026f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026f6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80026f8:	2301      	movs	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	4a0f      	ldr	r2, [pc, #60]	@ (8002744 <BSP_LED_Init+0xe8>)
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	f107 0218 	add.w	r2, r7, #24
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 feec 	bl	80034f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <BSP_LED_Init+0xe8>)
 800271c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4a07      	ldr	r2, [pc, #28]	@ (8002740 <BSP_LED_Init+0xe4>)
 8002724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002728:	2200      	movs	r2, #0
 800272a:	4619      	mov	r1, r3
 800272c:	f001 f8a8 	bl	8003880 <HAL_GPIO_WritePin>
  }

  return ret;
 8002730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002732:	4618      	mov	r0, r3
 8002734:	3730      	adds	r7, #48	@ 0x30
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	58024400 	.word	0x58024400
 8002740:	0800b1c4 	.word	0x0800b1c4
 8002744:	2400000c 	.word	0x2400000c

08002748 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <BSP_LED_On+0x28>
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d006      	beq.n	8002770 <BSP_LED_On+0x28>
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d003      	beq.n	8002770 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002768:	f06f 0301 	mvn.w	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e00b      	b.n	8002788 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <BSP_LED_On+0x4c>)
 8002774:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <BSP_LED_On+0x50>)
 800277c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002780:	2201      	movs	r2, #1
 8002782:	4619      	mov	r1, r3
 8002784:	f001 f87c 	bl	8003880 <HAL_GPIO_WritePin>
  }

  return ret;
 8002788:	68fb      	ldr	r3, [r7, #12]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2400000c 	.word	0x2400000c
 8002798:	0800b1c4 	.word	0x0800b1c4

0800279c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <BSP_LED_Off+0x28>
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d006      	beq.n	80027c4 <BSP_LED_Off+0x28>
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d003      	beq.n	80027c4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027bc:	f06f 0301 	mvn.w	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e00b      	b.n	80027dc <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <BSP_LED_Off+0x4c>)
 80027c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <BSP_LED_Off+0x50>)
 80027d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027d4:	2200      	movs	r2, #0
 80027d6:	4619      	mov	r1, r3
 80027d8:	f001 f852 	bl	8003880 <HAL_GPIO_WritePin>
  }

  return ret;
 80027dc:	68fb      	ldr	r3, [r7, #12]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2400000c 	.word	0x2400000c
 80027ec:	0800b1c4 	.word	0x0800b1c4

080027f0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <BSP_LED_Toggle+0x28>
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d006      	beq.n	8002818 <BSP_LED_Toggle+0x28>
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d003      	beq.n	8002818 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002810:	f06f 0301 	mvn.w	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e00b      	b.n	8002830 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	4a08      	ldr	r2, [pc, #32]	@ (800283c <BSP_LED_Toggle+0x4c>)
 800281c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4907      	ldr	r1, [pc, #28]	@ (8002840 <BSP_LED_Toggle+0x50>)
 8002824:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f001 f841 	bl	80038b2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2400000c 	.word	0x2400000c
 8002840:	0800b1c4 	.word	0x0800b1c4

08002844 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	460a      	mov	r2, r1
 800284e:	71fb      	strb	r3, [r7, #7]
 8002850:	4613      	mov	r3, r2
 8002852:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002854:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <BSP_PB_Init+0xcc>)
 8002856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800285a:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <BSP_PB_Init+0xcc>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002864:	4b2a      	ldr	r3, [pc, #168]	@ (8002910 <BSP_PB_Init+0xcc>)
 8002866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002876:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002878:	2302      	movs	r3, #2
 800287a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4a21      	ldr	r2, [pc, #132]	@ (8002914 <BSP_PB_Init+0xd0>)
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	f107 020c 	add.w	r2, r7, #12
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fe29 	bl	80034f0 <HAL_GPIO_Init>
 800289e:	e031      	b.n	8002904 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80028a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028a4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <BSP_PB_Init+0xd0>)
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	f107 020c 	add.w	r2, r7, #12
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fe1b 	bl	80034f0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4a16      	ldr	r2, [pc, #88]	@ (8002918 <BSP_PB_Init+0xd4>)
 80028c0:	441a      	add	r2, r3
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	4915      	ldr	r1, [pc, #84]	@ (800291c <BSP_PB_Init+0xd8>)
 80028c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f000 fdca 	bl	8003466 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <BSP_PB_Init+0xd4>)
 80028d8:	1898      	adds	r0, r3, r2
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4a10      	ldr	r2, [pc, #64]	@ (8002920 <BSP_PB_Init+0xdc>)
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	461a      	mov	r2, r3
 80028e4:	2100      	movs	r1, #0
 80028e6:	f000 fd9f 	bl	8003428 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80028ea:	2028      	movs	r0, #40	@ 0x28
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <BSP_PB_Init+0xe0>)
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	2200      	movs	r2, #0
 80028f6:	4619      	mov	r1, r3
 80028f8:	f000 faa3 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80028fc:	2328      	movs	r3, #40	@ 0x28
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fab9 	bl	8002e76 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
 8002914:	24000018 	.word	0x24000018
 8002918:	24000144 	.word	0x24000144
 800291c:	0800b1cc 	.word	0x0800b1cc
 8002920:	2400001c 	.word	0x2400001c
 8002924:	24000020 	.word	0x24000020

08002928 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <BSP_PB_IRQHandler+0x20>)
 8002938:	4413      	add	r3, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fda8 	bl	8003490 <HAL_EXTI_IRQHandler>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	24000144 	.word	0x24000144

0800294c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002962:	f06f 0301 	mvn.w	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e018      	b.n	800299c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2294      	movs	r2, #148	@ 0x94
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <BSP_COM_Init+0x5c>)
 8002974:	4413      	add	r3, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f86e 	bl	8002a58 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	2294      	movs	r2, #148	@ 0x94
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <BSP_COM_Init+0x5c>)
 8002986:	4413      	add	r3, r2
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f80e 	bl	80029ac <MX_USART3_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002996:	f06f 0303 	mvn.w	r3, #3
 800299a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800299c:	68fb      	ldr	r3, [r7, #12]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2400014c 	.word	0x2400014c

080029ac <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <MX_USART3_Init+0x60>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	220c      	movs	r2, #12
 80029ca:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	895b      	ldrh	r3, [r3, #10]
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	891b      	ldrh	r3, [r3, #8]
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	899b      	ldrh	r3, [r3, #12]
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029f8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f004 ff37 	bl	800786e <HAL_UART_Init>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	24000008 	.word	0x24000008

08002a10 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <__io_putchar+0x30>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2394      	movs	r3, #148	@ 0x94
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	4a07      	ldr	r2, [pc, #28]	@ (8002a44 <__io_putchar+0x34>)
 8002a26:	1898      	adds	r0, r3, r2
 8002a28:	1d39      	adds	r1, r7, #4
 8002a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f004 ff77 	bl	8007922 <HAL_UART_Transmit>
  return ch;
 8002a34:	687b      	ldr	r3, [r7, #4]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	240001e0 	.word	0x240001e0
 8002a44:	2400014c 	.word	0x2400014c

08002a48 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff fb77 	bl	8002140 <BSP_PB_Callback>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	@ 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a66:	4a26      	ldr	r2, [pc, #152]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a70:	4b23      	ldr	r3, [pc, #140]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a84:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002a9c:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002aa2:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002aac:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <COM1_MspInit+0xa8>)
 8002aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002abe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002acc:	2307      	movs	r3, #7
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480b      	ldr	r0, [pc, #44]	@ (8002b04 <COM1_MspInit+0xac>)
 8002ad8:	f000 fd0a 	bl	80034f0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ae0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4804      	ldr	r0, [pc, #16]	@ (8002b04 <COM1_MspInit+0xac>)
 8002af2:	f000 fcfd 	bl	80034f0 <HAL_GPIO_Init>
}
 8002af6:	bf00      	nop
 8002af8:	3728      	adds	r7, #40	@ 0x28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	58024400 	.word	0x58024400
 8002b04:	58020c00 	.word	0x58020c00

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f000 f98c 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b14:	f001 fd4c 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_Init+0x68>)
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	4913      	ldr	r1, [pc, #76]	@ (8002b74 <HAL_Init+0x6c>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b32:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <HAL_Init+0x68>)
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <HAL_Init+0x6c>)
 8002b3c:	5cd3      	ldrb	r3, [r2, r3]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	4a0b      	ldr	r2, [pc, #44]	@ (8002b78 <HAL_Init+0x70>)
 8002b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <HAL_Init+0x74>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 f814 	bl	8002b80 <HAL_InitTick>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e002      	b.n	8002b68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b62:	f7ff fb07 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	58024400 	.word	0x58024400
 8002b74:	0800b1b4 	.word	0x0800b1b4
 8002b78:	24000004 	.word	0x24000004
 8002b7c:	24000000 	.word	0x24000000

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b88:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_InitTick+0x60>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e021      	b.n	8002bd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b94:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <HAL_InitTick+0x64>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_InitTick+0x60>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f971 	bl	8002e92 <HAL_SYSTICK_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00e      	b.n	8002bd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b0f      	cmp	r3, #15
 8002bbe:	d80a      	bhi.n	8002bd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f000 f93b 	bl	8002e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bcc:	4a06      	ldr	r2, [pc, #24]	@ (8002be8 <HAL_InitTick+0x68>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	24000028 	.word	0x24000028
 8002be4:	24000000 	.word	0x24000000
 8002be8:	24000024 	.word	0x24000024

08002bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_IncTick+0x20>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_IncTick+0x24>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <HAL_IncTick+0x24>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	24000028 	.word	0x24000028
 8002c10:	240001e4 	.word	0x240001e4

08002c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return uwTick;
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <HAL_GetTick+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	240001e4 	.word	0x240001e4

08002c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff ffee 	bl	8002c14 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d005      	beq.n	8002c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_Delay+0x44>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c52:	bf00      	nop
 8002c54:	f7ff ffde 	bl	8002c14 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d8f7      	bhi.n	8002c54 <HAL_Delay+0x28>
  {
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24000028 	.word	0x24000028

08002c74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <HAL_GetREVID+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	5c001000 	.word	0x5c001000

08002c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cba:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60d3      	str	r3, [r2, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00
 8002cd0:	05fa0000 	.word	0x05fa0000

08002cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	@ (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	@ (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	@ (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	@ 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df8:	d301      	bcc.n	8002dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002e28 <SysTick_Config+0x40>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e06:	210f      	movs	r1, #15
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f7ff ff8e 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <SysTick_Config+0x40>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <SysTick_Config+0x40>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff29 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e50:	f7ff ff40 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff90 	bl	8002d80 <NVIC_EncodePriority>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff5f 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff33 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ffa4 	bl	8002de8 <SysTick_Config>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002eb0:	f3bf 8f5f 	dmb	sy
}
 8002eb4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <HAL_MPU_Disable+0x28>)
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	4a06      	ldr	r2, [pc, #24]	@ (8002ed4 <HAL_MPU_Disable+0x28>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_MPU_Disable+0x2c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000ed00 	.word	0xe000ed00
 8002ed8:	e000ed90 	.word	0xe000ed90

08002edc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <HAL_MPU_Enable+0x38>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_MPU_Enable+0x3c>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	4a09      	ldr	r2, [pc, #36]	@ (8002f18 <HAL_MPU_Enable+0x3c>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002efa:	f3bf 8f4f 	dsb	sy
}
 8002efe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f00:	f3bf 8f6f 	isb	sy
}
 8002f04:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed90 	.word	0xe000ed90
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	785a      	ldrb	r2, [r3, #1]
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_MPU_ConfigRegion+0x7c>)
 8002f2a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f98 <HAL_MPU_ConfigRegion+0x7c>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	4a19      	ldr	r2, [pc, #100]	@ (8002f98 <HAL_MPU_ConfigRegion+0x7c>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <HAL_MPU_ConfigRegion+0x7c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7b1b      	ldrb	r3, [r3, #12]
 8002f44:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7adb      	ldrb	r3, [r3, #11]
 8002f4a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7a9b      	ldrb	r3, [r3, #10]
 8002f52:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7b5b      	ldrb	r3, [r3, #13]
 8002f5a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7b9b      	ldrb	r3, [r3, #14]
 8002f62:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7bdb      	ldrb	r3, [r3, #15]
 8002f6a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7a5b      	ldrb	r3, [r3, #9]
 8002f72:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7a1b      	ldrb	r3, [r3, #8]
 8002f7a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f7c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f86:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f88:	6113      	str	r3, [r2, #16]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed90 	.word	0xe000ed90

08002f9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e237      	b.n	800341e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2280      	movs	r2, #128	@ 0x80
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e22c      	b.n	800341e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800313c <HAL_DMA_Abort_IT+0x1a0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d04a      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003140 <HAL_DMA_Abort_IT+0x1a4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d045      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a59      	ldr	r2, [pc, #356]	@ (8003144 <HAL_DMA_Abort_IT+0x1a8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d040      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a58      	ldr	r2, [pc, #352]	@ (8003148 <HAL_DMA_Abort_IT+0x1ac>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d03b      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_DMA_Abort_IT+0x1b0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d036      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a55      	ldr	r2, [pc, #340]	@ (8003150 <HAL_DMA_Abort_IT+0x1b4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d031      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a53      	ldr	r2, [pc, #332]	@ (8003154 <HAL_DMA_Abort_IT+0x1b8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d02c      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a52      	ldr	r2, [pc, #328]	@ (8003158 <HAL_DMA_Abort_IT+0x1bc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d027      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a50      	ldr	r2, [pc, #320]	@ (800315c <HAL_DMA_Abort_IT+0x1c0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d022      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4f      	ldr	r2, [pc, #316]	@ (8003160 <HAL_DMA_Abort_IT+0x1c4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d01d      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a4d      	ldr	r2, [pc, #308]	@ (8003164 <HAL_DMA_Abort_IT+0x1c8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4c      	ldr	r2, [pc, #304]	@ (8003168 <HAL_DMA_Abort_IT+0x1cc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a4a      	ldr	r2, [pc, #296]	@ (800316c <HAL_DMA_Abort_IT+0x1d0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a49      	ldr	r2, [pc, #292]	@ (8003170 <HAL_DMA_Abort_IT+0x1d4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a47      	ldr	r2, [pc, #284]	@ (8003174 <HAL_DMA_Abort_IT+0x1d8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_DMA_Abort_IT+0xc8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a46      	ldr	r2, [pc, #280]	@ (8003178 <HAL_DMA_Abort_IT+0x1dc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Abort_IT+0xcc>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_DMA_Abort_IT+0xce>
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8086 	beq.w	800317c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2204      	movs	r2, #4
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2f      	ldr	r2, [pc, #188]	@ (800313c <HAL_DMA_Abort_IT+0x1a0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d04a      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2e      	ldr	r2, [pc, #184]	@ (8003140 <HAL_DMA_Abort_IT+0x1a4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d045      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <HAL_DMA_Abort_IT+0x1a8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d040      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2b      	ldr	r2, [pc, #172]	@ (8003148 <HAL_DMA_Abort_IT+0x1ac>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d03b      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a29      	ldr	r2, [pc, #164]	@ (800314c <HAL_DMA_Abort_IT+0x1b0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d036      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a28      	ldr	r2, [pc, #160]	@ (8003150 <HAL_DMA_Abort_IT+0x1b4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d031      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a26      	ldr	r2, [pc, #152]	@ (8003154 <HAL_DMA_Abort_IT+0x1b8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02c      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a25      	ldr	r2, [pc, #148]	@ (8003158 <HAL_DMA_Abort_IT+0x1bc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d027      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a23      	ldr	r2, [pc, #140]	@ (800315c <HAL_DMA_Abort_IT+0x1c0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d022      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a22      	ldr	r2, [pc, #136]	@ (8003160 <HAL_DMA_Abort_IT+0x1c4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d01d      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a20      	ldr	r2, [pc, #128]	@ (8003164 <HAL_DMA_Abort_IT+0x1c8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d018      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003168 <HAL_DMA_Abort_IT+0x1cc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <HAL_DMA_Abort_IT+0x1d0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003170 <HAL_DMA_Abort_IT+0x1d4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d009      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1a      	ldr	r2, [pc, #104]	@ (8003174 <HAL_DMA_Abort_IT+0x1d8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_DMA_Abort_IT+0x17c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a19      	ldr	r2, [pc, #100]	@ (8003178 <HAL_DMA_Abort_IT+0x1dc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <HAL_DMA_Abort_IT+0x18e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e178      	b.n	800341c <HAL_DMA_Abort_IT+0x480>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e16f      	b.n	800341c <HAL_DMA_Abort_IT+0x480>
 800313c:	40020010 	.word	0x40020010
 8003140:	40020028 	.word	0x40020028
 8003144:	40020040 	.word	0x40020040
 8003148:	40020058 	.word	0x40020058
 800314c:	40020070 	.word	0x40020070
 8003150:	40020088 	.word	0x40020088
 8003154:	400200a0 	.word	0x400200a0
 8003158:	400200b8 	.word	0x400200b8
 800315c:	40020410 	.word	0x40020410
 8003160:	40020428 	.word	0x40020428
 8003164:	40020440 	.word	0x40020440
 8003168:	40020458 	.word	0x40020458
 800316c:	40020470 	.word	0x40020470
 8003170:	40020488 	.word	0x40020488
 8003174:	400204a0 	.word	0x400204a0
 8003178:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 020e 	bic.w	r2, r2, #14
 800318a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6c      	ldr	r2, [pc, #432]	@ (8003344 <HAL_DMA_Abort_IT+0x3a8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a6b      	ldr	r2, [pc, #428]	@ (8003348 <HAL_DMA_Abort_IT+0x3ac>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a69      	ldr	r2, [pc, #420]	@ (800334c <HAL_DMA_Abort_IT+0x3b0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a68      	ldr	r2, [pc, #416]	@ (8003350 <HAL_DMA_Abort_IT+0x3b4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a66      	ldr	r2, [pc, #408]	@ (8003354 <HAL_DMA_Abort_IT+0x3b8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a65      	ldr	r2, [pc, #404]	@ (8003358 <HAL_DMA_Abort_IT+0x3bc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a63      	ldr	r2, [pc, #396]	@ (800335c <HAL_DMA_Abort_IT+0x3c0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a62      	ldr	r2, [pc, #392]	@ (8003360 <HAL_DMA_Abort_IT+0x3c4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a60      	ldr	r2, [pc, #384]	@ (8003364 <HAL_DMA_Abort_IT+0x3c8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003368 <HAL_DMA_Abort_IT+0x3cc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	@ (800336c <HAL_DMA_Abort_IT+0x3d0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003370 <HAL_DMA_Abort_IT+0x3d4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5a      	ldr	r2, [pc, #360]	@ (8003374 <HAL_DMA_Abort_IT+0x3d8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a59      	ldr	r2, [pc, #356]	@ (8003378 <HAL_DMA_Abort_IT+0x3dc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a57      	ldr	r2, [pc, #348]	@ (800337c <HAL_DMA_Abort_IT+0x3e0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_Abort_IT+0x290>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a56      	ldr	r2, [pc, #344]	@ (8003380 <HAL_DMA_Abort_IT+0x3e4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <HAL_DMA_Abort_IT+0x2a2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e007      	b.n	800324e <HAL_DMA_Abort_IT+0x2b2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a3c      	ldr	r2, [pc, #240]	@ (8003344 <HAL_DMA_Abort_IT+0x3a8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d072      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a3a      	ldr	r2, [pc, #232]	@ (8003348 <HAL_DMA_Abort_IT+0x3ac>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d06d      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a39      	ldr	r2, [pc, #228]	@ (800334c <HAL_DMA_Abort_IT+0x3b0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d068      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a37      	ldr	r2, [pc, #220]	@ (8003350 <HAL_DMA_Abort_IT+0x3b4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d063      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a36      	ldr	r2, [pc, #216]	@ (8003354 <HAL_DMA_Abort_IT+0x3b8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d05e      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a34      	ldr	r2, [pc, #208]	@ (8003358 <HAL_DMA_Abort_IT+0x3bc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d059      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a33      	ldr	r2, [pc, #204]	@ (800335c <HAL_DMA_Abort_IT+0x3c0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d054      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a31      	ldr	r2, [pc, #196]	@ (8003360 <HAL_DMA_Abort_IT+0x3c4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d04f      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_DMA_Abort_IT+0x3c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d04a      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003368 <HAL_DMA_Abort_IT+0x3cc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d045      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	@ (800336c <HAL_DMA_Abort_IT+0x3d0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d040      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003370 <HAL_DMA_Abort_IT+0x3d4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d03b      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003374 <HAL_DMA_Abort_IT+0x3d8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d036      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <HAL_DMA_Abort_IT+0x3dc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d031      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a27      	ldr	r2, [pc, #156]	@ (800337c <HAL_DMA_Abort_IT+0x3e0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d02c      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <HAL_DMA_Abort_IT+0x3e4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d027      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a24      	ldr	r2, [pc, #144]	@ (8003384 <HAL_DMA_Abort_IT+0x3e8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	@ (8003388 <HAL_DMA_Abort_IT+0x3ec>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01d      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a21      	ldr	r2, [pc, #132]	@ (800338c <HAL_DMA_Abort_IT+0x3f0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_DMA_Abort_IT+0x3f4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1e      	ldr	r2, [pc, #120]	@ (8003394 <HAL_DMA_Abort_IT+0x3f8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1c      	ldr	r2, [pc, #112]	@ (8003398 <HAL_DMA_Abort_IT+0x3fc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <HAL_DMA_Abort_IT+0x400>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_DMA_Abort_IT+0x3a2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a19      	ldr	r2, [pc, #100]	@ (80033a0 <HAL_DMA_Abort_IT+0x404>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d132      	bne.n	80033a4 <HAL_DMA_Abort_IT+0x408>
 800333e:	2301      	movs	r3, #1
 8003340:	e031      	b.n	80033a6 <HAL_DMA_Abort_IT+0x40a>
 8003342:	bf00      	nop
 8003344:	40020010 	.word	0x40020010
 8003348:	40020028 	.word	0x40020028
 800334c:	40020040 	.word	0x40020040
 8003350:	40020058 	.word	0x40020058
 8003354:	40020070 	.word	0x40020070
 8003358:	40020088 	.word	0x40020088
 800335c:	400200a0 	.word	0x400200a0
 8003360:	400200b8 	.word	0x400200b8
 8003364:	40020410 	.word	0x40020410
 8003368:	40020428 	.word	0x40020428
 800336c:	40020440 	.word	0x40020440
 8003370:	40020458 	.word	0x40020458
 8003374:	40020470 	.word	0x40020470
 8003378:	40020488 	.word	0x40020488
 800337c:	400204a0 	.word	0x400204a0
 8003380:	400204b8 	.word	0x400204b8
 8003384:	58025408 	.word	0x58025408
 8003388:	5802541c 	.word	0x5802541c
 800338c:	58025430 	.word	0x58025430
 8003390:	58025444 	.word	0x58025444
 8003394:	58025458 	.word	0x58025458
 8003398:	5802546c 	.word	0x5802546c
 800339c:	58025480 	.word	0x58025480
 80033a0:	58025494 	.word	0x58025494
 80033a4:	2300      	movs	r3, #0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d028      	beq.n	80033fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop

08003428 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	460b      	mov	r3, r1
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e00a      	b.n	800345a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003444:	7afb      	ldrb	r3, [r7, #11]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]
      break;
 8003450:	e002      	b.n	8003458 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
      break;
 8003456:	bf00      	nop
  }

  return status;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
}
 800345a:	4618      	mov	r0, r3
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e003      	b.n	8003482 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2201      	movs	r2, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	011a      	lsls	r2, r3, #4
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <HAL_EXTI_IRQHandler+0x5c>)
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4798      	blx	r3
    }
  }
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	58000088 	.word	0x58000088

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	@ 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034fe:	4b89      	ldr	r3, [pc, #548]	@ (8003724 <HAL_GPIO_Init+0x234>)
 8003500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003502:	e194      	b.n	800382e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8186 	beq.w	8003828 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d005      	beq.n	8003534 <HAL_GPIO_Init+0x44>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d130      	bne.n	8003596 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356a:	2201      	movs	r2, #1
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0201 	and.w	r2, r3, #1
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d017      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	2203      	movs	r2, #3
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d123      	bne.n	8003626 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3208      	adds	r2, #8
 80035e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80e0 	beq.w	8003828 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003668:	4b2f      	ldr	r3, [pc, #188]	@ (8003728 <HAL_GPIO_Init+0x238>)
 800366a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800366e:	4a2e      	ldr	r2, [pc, #184]	@ (8003728 <HAL_GPIO_Init+0x238>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003678:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <HAL_GPIO_Init+0x238>)
 800367a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003686:	4a29      	ldr	r2, [pc, #164]	@ (800372c <HAL_GPIO_Init+0x23c>)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	3302      	adds	r3, #2
 800368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a20      	ldr	r2, [pc, #128]	@ (8003730 <HAL_GPIO_Init+0x240>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d052      	beq.n	8003758 <HAL_GPIO_Init+0x268>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003734 <HAL_GPIO_Init+0x244>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_GPIO_Init+0x22e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003738 <HAL_GPIO_Init+0x248>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <HAL_GPIO_Init+0x22a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	@ (800373c <HAL_GPIO_Init+0x24c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d025      	beq.n	8003716 <HAL_GPIO_Init+0x226>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_GPIO_Init+0x250>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <HAL_GPIO_Init+0x222>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <HAL_GPIO_Init+0x254>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_Init+0x21e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003748 <HAL_GPIO_Init+0x258>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0x21a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a19      	ldr	r2, [pc, #100]	@ (800374c <HAL_GPIO_Init+0x25c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_Init+0x216>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a18      	ldr	r2, [pc, #96]	@ (8003750 <HAL_GPIO_Init+0x260>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x212>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_GPIO_Init+0x264>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_Init+0x20e>
 80036fa:	2309      	movs	r3, #9
 80036fc:	e02d      	b.n	800375a <HAL_GPIO_Init+0x26a>
 80036fe:	230a      	movs	r3, #10
 8003700:	e02b      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003702:	2308      	movs	r3, #8
 8003704:	e029      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003706:	2307      	movs	r3, #7
 8003708:	e027      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800370a:	2306      	movs	r3, #6
 800370c:	e025      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800370e:	2305      	movs	r3, #5
 8003710:	e023      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003712:	2304      	movs	r3, #4
 8003714:	e021      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003716:	2303      	movs	r3, #3
 8003718:	e01f      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800371a:	2302      	movs	r3, #2
 800371c:	e01d      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800371e:	2301      	movs	r3, #1
 8003720:	e01b      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003722:	bf00      	nop
 8003724:	58000080 	.word	0x58000080
 8003728:	58024400 	.word	0x58024400
 800372c:	58000400 	.word	0x58000400
 8003730:	58020000 	.word	0x58020000
 8003734:	58020400 	.word	0x58020400
 8003738:	58020800 	.word	0x58020800
 800373c:	58020c00 	.word	0x58020c00
 8003740:	58021000 	.word	0x58021000
 8003744:	58021400 	.word	0x58021400
 8003748:	58021800 	.word	0x58021800
 800374c:	58021c00 	.word	0x58021c00
 8003750:	58022000 	.word	0x58022000
 8003754:	58022400 	.word	0x58022400
 8003758:	2300      	movs	r3, #0
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	f002 0203 	and.w	r2, r2, #3
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	4093      	lsls	r3, r2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376a:	4938      	ldr	r1, [pc, #224]	@ (800384c <HAL_GPIO_Init+0x35c>)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800379e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3301      	adds	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f ae63 	bne.w	8003504 <HAL_GPIO_Init+0x14>
  }
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	3724      	adds	r7, #36	@ 0x24
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	58000400 	.word	0x58000400

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	041a      	lsls	r2, r3, #16
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	400b      	ands	r3, r1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fbad 	bl	800206c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003924:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_PWREx_ConfigSupply+0x70>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d00a      	beq.n	8003946 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003930:	4b16      	ldr	r3, [pc, #88]	@ (800398c <HAL_PWREx_ConfigSupply+0x70>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d001      	beq.n	8003942 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e01f      	b.n	8003982 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e01d      	b.n	8003982 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003946:	4b11      	ldr	r3, [pc, #68]	@ (800398c <HAL_PWREx_ConfigSupply+0x70>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 0207 	bic.w	r2, r3, #7
 800394e:	490f      	ldr	r1, [pc, #60]	@ (800398c <HAL_PWREx_ConfigSupply+0x70>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4313      	orrs	r3, r2
 8003954:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003956:	f7ff f95d 	bl	8002c14 <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800395c:	e009      	b.n	8003972 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800395e:	f7ff f959 	bl	8002c14 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800396c:	d901      	bls.n	8003972 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e007      	b.n	8003982 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_PWREx_ConfigSupply+0x70>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800397e:	d1ee      	bne.n	800395e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	58024800 	.word	0x58024800

08003990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	@ 0x30
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f000 bc48 	b.w	8004234 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8088 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b2:	4b99      	ldr	r3, [pc, #612]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039bc:	4b96      	ldr	r3, [pc, #600]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d007      	beq.n	80039d8 <HAL_RCC_OscConfig+0x48>
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	2b18      	cmp	r3, #24
 80039cc:	d111      	bne.n	80039f2 <HAL_RCC_OscConfig+0x62>
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d06d      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x130>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d169      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f000 bc21 	b.w	8004234 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x7a>
 80039fc:	4b86      	ldr	r3, [pc, #536]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a85      	ldr	r2, [pc, #532]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e02e      	b.n	8003a68 <HAL_RCC_OscConfig+0xd8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x9c>
 8003a12:	4b81      	ldr	r3, [pc, #516]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a80      	ldr	r2, [pc, #512]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b7e      	ldr	r3, [pc, #504]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7d      	ldr	r2, [pc, #500]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xd8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0xc0>
 8003a36:	4b78      	ldr	r3, [pc, #480]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a77      	ldr	r2, [pc, #476]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b75      	ldr	r3, [pc, #468]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a74      	ldr	r2, [pc, #464]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xd8>
 8003a50:	4b71      	ldr	r3, [pc, #452]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a70      	ldr	r2, [pc, #448]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b6e      	ldr	r3, [pc, #440]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6d      	ldr	r2, [pc, #436]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7ff f8d0 	bl	8002c14 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7ff f8cc 	bl	8002c14 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	@ 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e3d4      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xe8>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7ff f8bc 	bl	8002c14 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7ff f8b8 	bl	8002c14 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e3c0      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ab2:	4b59      	ldr	r3, [pc, #356]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x110>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80ca 	beq.w	8003c64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad0:	4b51      	ldr	r3, [pc, #324]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ad8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ada:	4b4f      	ldr	r3, [pc, #316]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_RCC_OscConfig+0x166>
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	2b18      	cmp	r3, #24
 8003aea:	d156      	bne.n	8003b9a <HAL_RCC_OscConfig+0x20a>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d151      	bne.n	8003b9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af6:	4b48      	ldr	r3, [pc, #288]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x17e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e392      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b0e:	4b42      	ldr	r3, [pc, #264]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 0219 	bic.w	r2, r3, #25
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	493f      	ldr	r1, [pc, #252]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7ff f878 	bl	8002c14 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b28:	f7ff f874 	bl	8002c14 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e37c      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b3a:	4b37      	ldr	r3, [pc, #220]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b46:	f7ff f895 	bl	8002c74 <HAL_GetREVID>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d817      	bhi.n	8003b84 <HAL_RCC_OscConfig+0x1f4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b40      	cmp	r3, #64	@ 0x40
 8003b5a:	d108      	bne.n	8003b6e <HAL_RCC_OscConfig+0x1de>
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b64:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6c:	e07a      	b.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	031b      	lsls	r3, r3, #12
 8003b7c:	4926      	ldr	r1, [pc, #152]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b82:	e06f      	b.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	4921      	ldr	r1, [pc, #132]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b98:	e064      	b.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d047      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0219 	bic.w	r2, r3, #25
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	491a      	ldr	r1, [pc, #104]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7ff f82e 	bl	8002c14 <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbc:	f7ff f82a 	bl	8002c14 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e332      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bce:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	f7ff f84b 	bl	8002c74 <HAL_GetREVID>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d819      	bhi.n	8003c1c <HAL_RCC_OscConfig+0x28c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d108      	bne.n	8003c02 <HAL_RCC_OscConfig+0x272>
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003bf8:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfe:	6053      	str	r3, [r2, #4]
 8003c00:	e030      	b.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
 8003c02:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	4901      	ldr	r1, [pc, #4]	@ (8003c18 <HAL_RCC_OscConfig+0x288>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
 8003c16:	e025      	b.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	4b9a      	ldr	r3, [pc, #616]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4997      	ldr	r1, [pc, #604]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
 8003c30:	e018      	b.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c32:	4b95      	ldr	r3, [pc, #596]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a94      	ldr	r2, [pc, #592]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe ffe9 	bl	8002c14 <HAL_GetTick>
 8003c42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c46:	f7fe ffe5 	bl	8002c14 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e2ed      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c58:	4b8b      	ldr	r3, [pc, #556]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a9 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c72:	4b85      	ldr	r3, [pc, #532]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c7c:	4b82      	ldr	r3, [pc, #520]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d007      	beq.n	8003c98 <HAL_RCC_OscConfig+0x308>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b18      	cmp	r3, #24
 8003c8c:	d13a      	bne.n	8003d04 <HAL_RCC_OscConfig+0x374>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d135      	bne.n	8003d04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c98:	4b7b      	ldr	r3, [pc, #492]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x320>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	2b80      	cmp	r3, #128	@ 0x80
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e2c1      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cb0:	f7fe ffe0 	bl	8002c74 <HAL_GetREVID>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d817      	bhi.n	8003cee <HAL_RCC_OscConfig+0x35e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d108      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x348>
 8003cc6:	4b70      	ldr	r3, [pc, #448]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003cce:	4a6e      	ldr	r2, [pc, #440]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003cd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cd4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cd6:	e075      	b.n	8003dc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	069b      	lsls	r3, r3, #26
 8003ce6:	4968      	ldr	r1, [pc, #416]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cec:	e06a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cee:	4b66      	ldr	r3, [pc, #408]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	4962      	ldr	r1, [pc, #392]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d02:	e05f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d042      	beq.n	8003d92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5d      	ldr	r2, [pc, #372]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe ff7c 	bl	8002c14 <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d20:	f7fe ff78 	bl	8002c14 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e280      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d32:	4b55      	ldr	r3, [pc, #340]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d3e:	f7fe ff99 	bl	8002c74 <HAL_GetREVID>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d817      	bhi.n	8003d7c <HAL_RCC_OscConfig+0x3ec>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d108      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3d6>
 8003d54:	4b4c      	ldr	r3, [pc, #304]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d62:	6053      	str	r3, [r2, #4]
 8003d64:	e02e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x434>
 8003d66:	4b48      	ldr	r3, [pc, #288]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	069b      	lsls	r3, r3, #26
 8003d74:	4944      	ldr	r1, [pc, #272]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
 8003d7a:	e023      	b.n	8003dc4 <HAL_RCC_OscConfig+0x434>
 8003d7c:	4b42      	ldr	r3, [pc, #264]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	493f      	ldr	r1, [pc, #252]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60cb      	str	r3, [r1, #12]
 8003d90:	e018      	b.n	8003dc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d92:	4b3d      	ldr	r3, [pc, #244]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3c      	ldr	r2, [pc, #240]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe ff39 	bl	8002c14 <HAL_GetTick>
 8003da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003da6:	f7fe ff35 	bl	8002c14 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e23d      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003db8:	4b33      	ldr	r3, [pc, #204]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d036      	beq.n	8003e3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d019      	beq.n	8003e0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fe ff16 	bl	8002c14 <HAL_GetTick>
 8003de8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dec:	f7fe ff12 	bl	8002c14 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e21a      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dfe:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x45c>
 8003e0a:	e018      	b.n	8003e3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e10:	4a1d      	ldr	r2, [pc, #116]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fe fefc 	bl	8002c14 <HAL_GetTick>
 8003e1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e20:	f7fe fef8 	bl	8002c14 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e200      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e32:	4b15      	ldr	r3, [pc, #84]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d039      	beq.n	8003ebe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01c      	beq.n	8003e8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a0c      	ldr	r2, [pc, #48]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003e58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fed9 	bl	8002c14 <HAL_GetTick>
 8003e62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e66:	f7fe fed5 	bl	8002c14 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1dd      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e78:	4b03      	ldr	r3, [pc, #12]	@ (8003e88 <HAL_RCC_OscConfig+0x4f8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x4d6>
 8003e84:	e01b      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
 8003e86:	bf00      	nop
 8003e88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e8c:	4b9b      	ldr	r3, [pc, #620]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a9a      	ldr	r2, [pc, #616]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003e92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e98:	f7fe febc 	bl	8002c14 <HAL_GetTick>
 8003e9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea0:	f7fe feb8 	bl	8002c14 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1c0      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003eb2:	4b92      	ldr	r3, [pc, #584]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8081 	beq.w	8003fce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ecc:	4b8c      	ldr	r3, [pc, #560]	@ (8004100 <HAL_RCC_OscConfig+0x770>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a8b      	ldr	r2, [pc, #556]	@ (8004100 <HAL_RCC_OscConfig+0x770>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed8:	f7fe fe9c 	bl	8002c14 <HAL_GetTick>
 8003edc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fe fe98 	bl	8002c14 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	@ 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e1a0      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef2:	4b83      	ldr	r3, [pc, #524]	@ (8004100 <HAL_RCC_OscConfig+0x770>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x584>
 8003f06:	4b7d      	ldr	r3, [pc, #500]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f12:	e02d      	b.n	8003f70 <HAL_RCC_OscConfig+0x5e0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5a6>
 8003f1c:	4b77      	ldr	r3, [pc, #476]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f20:	4a76      	ldr	r2, [pc, #472]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f28:	4b74      	ldr	r3, [pc, #464]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	4a73      	ldr	r2, [pc, #460]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f34:	e01c      	b.n	8003f70 <HAL_RCC_OscConfig+0x5e0>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c8>
 8003f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a6e      	ldr	r2, [pc, #440]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0x5e0>
 8003f58:	4b68      	ldr	r3, [pc, #416]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a67      	ldr	r2, [pc, #412]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	4b65      	ldr	r3, [pc, #404]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f68:	4a64      	ldr	r2, [pc, #400]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f6a:	f023 0304 	bic.w	r3, r3, #4
 8003f6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fe4c 	bl	8002c14 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fe48 	bl	8002c14 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e14e      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f96:	4b59      	ldr	r3, [pc, #356]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ee      	beq.n	8003f80 <HAL_RCC_OscConfig+0x5f0>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fe36 	bl	8002c14 <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fe fe32 	bl	8002c14 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e138      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ee      	bne.n	8003fac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 812d 	beq.w	8004232 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fd8:	4b48      	ldr	r3, [pc, #288]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fe0:	2b18      	cmp	r3, #24
 8003fe2:	f000 80bd 	beq.w	8004160 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	f040 809e 	bne.w	800412c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b42      	ldr	r3, [pc, #264]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a41      	ldr	r2, [pc, #260]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8003ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fe0a 	bl	8002c14 <HAL_GetTick>
 8004000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe fe06 	bl	8002c14 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e10e      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004016:	4b39      	ldr	r3, [pc, #228]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004022:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8004024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004026:	4b37      	ldr	r3, [pc, #220]	@ (8004104 <HAL_RCC_OscConfig+0x774>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	430a      	orrs	r2, r1
 8004036:	4931      	ldr	r1, [pc, #196]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8004038:	4313      	orrs	r3, r2
 800403a:	628b      	str	r3, [r1, #40]	@ 0x28
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	3b01      	subs	r3, #1
 8004042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	3b01      	subs	r3, #1
 800404c:	025b      	lsls	r3, r3, #9
 800404e:	b29b      	uxth	r3, r3
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004056:	3b01      	subs	r3, #1
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	3b01      	subs	r3, #1
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800406c:	4923      	ldr	r1, [pc, #140]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004072:	4b22      	ldr	r3, [pc, #136]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	4a21      	ldr	r2, [pc, #132]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800407e:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8004080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004082:	4b21      	ldr	r3, [pc, #132]	@ (8004108 <HAL_RCC_OscConfig+0x778>)
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800408a:	00d2      	lsls	r2, r2, #3
 800408c:	491b      	ldr	r1, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004092:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	f023 020c 	bic.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4917      	ldr	r1, [pc, #92]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	f023 0202 	bic.w	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b0:	4912      	ldr	r1, [pc, #72]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040b6:	4b11      	ldr	r3, [pc, #68]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	4a10      	ldr	r2, [pc, #64]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c2:	4b0e      	ldr	r3, [pc, #56]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	4a0d      	ldr	r2, [pc, #52]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040ce:	4b0b      	ldr	r3, [pc, #44]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	4a0a      	ldr	r2, [pc, #40]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80040da:	4b08      	ldr	r3, [pc, #32]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	4a07      	ldr	r2, [pc, #28]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e6:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <HAL_RCC_OscConfig+0x76c>)
 80040ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe fd8f 	bl	8002c14 <HAL_GetTick>
 80040f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f8:	e011      	b.n	800411e <HAL_RCC_OscConfig+0x78e>
 80040fa:	bf00      	nop
 80040fc:	58024400 	.word	0x58024400
 8004100:	58024800 	.word	0x58024800
 8004104:	fffffc0c 	.word	0xfffffc0c
 8004108:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fe fd82 	bl	8002c14 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e08a      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x77c>
 800412a:	e082      	b.n	8004232 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b43      	ldr	r3, [pc, #268]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe fd6c 	bl	8002c14 <HAL_GetTick>
 800413c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe fd68 	bl	8002c14 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e070      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004152:	4b3a      	ldr	r3, [pc, #232]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x7b0>
 800415e:	e068      	b.n	8004232 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004160:	4b36      	ldr	r3, [pc, #216]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004166:	4b35      	ldr	r3, [pc, #212]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	2b01      	cmp	r3, #1
 8004172:	d031      	beq.n	80041d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f003 0203 	and.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d12a      	bne.n	80041d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d122      	bne.n	80041d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d11a      	bne.n	80041d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	0a5b      	lsrs	r3, r3, #9
 80041a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d111      	bne.n	80041d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0c1b      	lsrs	r3, r3, #16
 80041b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d108      	bne.n	80041d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0e1b      	lsrs	r3, r3, #24
 80041ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e02b      	b.n	8004234 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80041dc:	4b17      	ldr	r3, [pc, #92]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 80041de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e0:	08db      	lsrs	r3, r3, #3
 80041e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d01f      	beq.n	8004232 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80041f2:	4b12      	ldr	r3, [pc, #72]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	4a11      	ldr	r2, [pc, #68]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041fe:	f7fe fd09 	bl	8002c14 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004204:	bf00      	nop
 8004206:	f7fe fd05 	bl	8002c14 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	4293      	cmp	r3, r2
 8004210:	d0f9      	beq.n	8004206 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004212:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004216:	4b0a      	ldr	r3, [pc, #40]	@ (8004240 <HAL_RCC_OscConfig+0x8b0>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800421e:	00d2      	lsls	r2, r2, #3
 8004220:	4906      	ldr	r1, [pc, #24]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004222:	4313      	orrs	r3, r2
 8004224:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	4a04      	ldr	r2, [pc, #16]	@ (800423c <HAL_RCC_OscConfig+0x8ac>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3730      	adds	r7, #48	@ 0x30
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	58024400 	.word	0x58024400
 8004240:	ffff0007 	.word	0xffff0007

08004244 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e19c      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b8a      	ldr	r3, [pc, #552]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d910      	bls.n	8004288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b87      	ldr	r3, [pc, #540]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 020f 	bic.w	r2, r3, #15
 800426e:	4985      	ldr	r1, [pc, #532]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b83      	ldr	r3, [pc, #524]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e184      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d010      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	4b7b      	ldr	r3, [pc, #492]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d908      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042a4:	4b78      	ldr	r3, [pc, #480]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4975      	ldr	r1, [pc, #468]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	4b70      	ldr	r3, [pc, #448]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d908      	bls.n	80042e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	496a      	ldr	r1, [pc, #424]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d010      	beq.n	8004312 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	4b64      	ldr	r3, [pc, #400]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d908      	bls.n	8004312 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004300:	4b61      	ldr	r3, [pc, #388]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	495e      	ldr	r1, [pc, #376]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 800430e:	4313      	orrs	r3, r2
 8004310:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	4b59      	ldr	r3, [pc, #356]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800432a:	429a      	cmp	r2, r3
 800432c:	d908      	bls.n	8004340 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800432e:	4b56      	ldr	r3, [pc, #344]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4953      	ldr	r1, [pc, #332]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 800433c:	4313      	orrs	r3, r2
 800433e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d010      	beq.n	800436e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	4b4d      	ldr	r3, [pc, #308]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	429a      	cmp	r2, r3
 800435a:	d908      	bls.n	800436e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800435c:	4b4a      	ldr	r3, [pc, #296]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f023 020f 	bic.w	r2, r3, #15
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4947      	ldr	r1, [pc, #284]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 800436a:	4313      	orrs	r3, r2
 800436c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d055      	beq.n	8004426 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800437a:	4b43      	ldr	r3, [pc, #268]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4940      	ldr	r1, [pc, #256]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004388:	4313      	orrs	r3, r2
 800438a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004394:	4b3c      	ldr	r3, [pc, #240]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d121      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0f6      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ac:	4b36      	ldr	r3, [pc, #216]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d115      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0ea      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043c4:	4b30      	ldr	r3, [pc, #192]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0de      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0d6      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f023 0207 	bic.w	r2, r3, #7
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4925      	ldr	r1, [pc, #148]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f6:	f7fe fc0d 	bl	8002c14 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fe:	f7fe fc09 	bl	8002c14 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0be      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004414:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	429a      	cmp	r2, r3
 8004424:	d1eb      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	429a      	cmp	r2, r3
 8004440:	d208      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004442:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f023 020f 	bic.w	r2, r3, #15
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	490e      	ldr	r1, [pc, #56]	@ (8004488 <HAL_RCC_ClockConfig+0x244>)
 8004450:	4313      	orrs	r3, r2
 8004452:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d214      	bcs.n	800448c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 020f 	bic.w	r2, r3, #15
 800446a:	4906      	ldr	r1, [pc, #24]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b04      	ldr	r3, [pc, #16]	@ (8004484 <HAL_RCC_ClockConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e086      	b.n	8004592 <HAL_RCC_ClockConfig+0x34e>
 8004484:	52002000 	.word	0x52002000
 8004488:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d010      	beq.n	80044ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	4b3f      	ldr	r3, [pc, #252]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d208      	bcs.n	80044ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044a8:	4b3c      	ldr	r3, [pc, #240]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	4939      	ldr	r1, [pc, #228]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	4b34      	ldr	r3, [pc, #208]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d208      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044d6:	4b31      	ldr	r3, [pc, #196]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	492e      	ldr	r1, [pc, #184]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	4b28      	ldr	r3, [pc, #160]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004500:	429a      	cmp	r2, r3
 8004502:	d208      	bcs.n	8004516 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004504:	4b25      	ldr	r3, [pc, #148]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	4922      	ldr	r1, [pc, #136]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 8004512:	4313      	orrs	r3, r2
 8004514:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	4b1d      	ldr	r3, [pc, #116]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800452e:	429a      	cmp	r2, r3
 8004530:	d208      	bcs.n	8004544 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004532:	4b1a      	ldr	r3, [pc, #104]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4917      	ldr	r1, [pc, #92]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 8004540:	4313      	orrs	r3, r2
 8004542:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004544:	f000 f834 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b14      	ldr	r3, [pc, #80]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	4912      	ldr	r1, [pc, #72]	@ (80045a0 <HAL_RCC_ClockConfig+0x35c>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004562:	4b0e      	ldr	r3, [pc, #56]	@ (800459c <HAL_RCC_ClockConfig+0x358>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	4a0d      	ldr	r2, [pc, #52]	@ (80045a0 <HAL_RCC_ClockConfig+0x35c>)
 800456c:	5cd3      	ldrb	r3, [r2, r3]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	4a0a      	ldr	r2, [pc, #40]	@ (80045a4 <HAL_RCC_ClockConfig+0x360>)
 800457a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800457c:	4a0a      	ldr	r2, [pc, #40]	@ (80045a8 <HAL_RCC_ClockConfig+0x364>)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <HAL_RCC_ClockConfig+0x368>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fafa 	bl	8002b80 <HAL_InitTick>
 800458c:	4603      	mov	r3, r0
 800458e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	58024400 	.word	0x58024400
 80045a0:	0800b1b4 	.word	0x0800b1b4
 80045a4:	24000004 	.word	0x24000004
 80045a8:	24000000 	.word	0x24000000
 80045ac:	24000024 	.word	0x24000024

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	@ 0x24
 80045b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b6:	4bb3      	ldr	r3, [pc, #716]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045be:	2b18      	cmp	r3, #24
 80045c0:	f200 8155 	bhi.w	800486e <HAL_RCC_GetSysClockFreq+0x2be>
 80045c4:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	08004631 	.word	0x08004631
 80045d0:	0800486f 	.word	0x0800486f
 80045d4:	0800486f 	.word	0x0800486f
 80045d8:	0800486f 	.word	0x0800486f
 80045dc:	0800486f 	.word	0x0800486f
 80045e0:	0800486f 	.word	0x0800486f
 80045e4:	0800486f 	.word	0x0800486f
 80045e8:	0800486f 	.word	0x0800486f
 80045ec:	08004657 	.word	0x08004657
 80045f0:	0800486f 	.word	0x0800486f
 80045f4:	0800486f 	.word	0x0800486f
 80045f8:	0800486f 	.word	0x0800486f
 80045fc:	0800486f 	.word	0x0800486f
 8004600:	0800486f 	.word	0x0800486f
 8004604:	0800486f 	.word	0x0800486f
 8004608:	0800486f 	.word	0x0800486f
 800460c:	0800465d 	.word	0x0800465d
 8004610:	0800486f 	.word	0x0800486f
 8004614:	0800486f 	.word	0x0800486f
 8004618:	0800486f 	.word	0x0800486f
 800461c:	0800486f 	.word	0x0800486f
 8004620:	0800486f 	.word	0x0800486f
 8004624:	0800486f 	.word	0x0800486f
 8004628:	0800486f 	.word	0x0800486f
 800462c:	08004663 	.word	0x08004663
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004630:	4b94      	ldr	r3, [pc, #592]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800463c:	4b91      	ldr	r3, [pc, #580]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	08db      	lsrs	r3, r3, #3
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	4a90      	ldr	r2, [pc, #576]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800464e:	e111      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004650:	4b8d      	ldr	r3, [pc, #564]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004652:	61bb      	str	r3, [r7, #24]
      break;
 8004654:	e10e      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004656:	4b8d      	ldr	r3, [pc, #564]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004658:	61bb      	str	r3, [r7, #24]
      break;
 800465a:	e10b      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800465c:	4b8c      	ldr	r3, [pc, #560]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800465e:	61bb      	str	r3, [r7, #24]
      break;
 8004660:	e108      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004662:	4b88      	ldr	r3, [pc, #544]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800466c:	4b85      	ldr	r3, [pc, #532]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004676:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004678:	4b82      	ldr	r3, [pc, #520]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004682:	4b80      	ldr	r3, [pc, #512]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004686:	08db      	lsrs	r3, r3, #3
 8004688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80e1 	beq.w	8004868 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f000 8083 	beq.w	80047b4 <HAL_RCC_GetSysClockFreq+0x204>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	f200 80a1 	bhi.w	80047f8 <HAL_RCC_GetSysClockFreq+0x248>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x114>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d056      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046c2:	e099      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02d      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	4a6b      	ldr	r2, [pc, #428]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fa:	4b62      	ldr	r3, [pc, #392]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a02 	vldr	s12, [r7, #8]
 800470e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800472a:	e087      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004736:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004898 <HAL_RCC_GetSysClockFreq+0x2e8>
 800473a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473e:	4b51      	ldr	r3, [pc, #324]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004752:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800476e:	e065      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800489c <HAL_RCC_GetSysClockFreq+0x2ec>
 800477e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004782:	4b40      	ldr	r3, [pc, #256]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	ed97 6a02 	vldr	s12, [r7, #8]
 8004796:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004894 <HAL_RCC_GetSysClockFreq+0x2e4>
 800479a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047b2:	e043      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80048a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004894 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047f6:	e021      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800489c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480a:	4b1e      	ldr	r3, [pc, #120]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a02 	vldr	s12, [r7, #8]
 800481e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800483a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800483c:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004840:	0a5b      	lsrs	r3, r3, #9
 8004842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004846:	3301      	adds	r3, #1
 8004848:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004854:	edd7 6a07 	vldr	s13, [r7, #28]
 8004858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004860:	ee17 3a90 	vmov	r3, s15
 8004864:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004866:	e005      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
      break;
 800486c:	e002      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800486e:	4b07      	ldr	r3, [pc, #28]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004870:	61bb      	str	r3, [r7, #24]
      break;
 8004872:	bf00      	nop
  }

  return sysclockfreq;
 8004874:	69bb      	ldr	r3, [r7, #24]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3724      	adds	r7, #36	@ 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
 8004888:	03d09000 	.word	0x03d09000
 800488c:	003d0900 	.word	0x003d0900
 8004890:	017d7840 	.word	0x017d7840
 8004894:	46000000 	.word	0x46000000
 8004898:	4c742400 	.word	0x4c742400
 800489c:	4a742400 	.word	0x4a742400
 80048a0:	4bbebc20 	.word	0x4bbebc20

080048a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048aa:	f7ff fe81 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	490f      	ldr	r1, [pc, #60]	@ (80048f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048c8:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	4a07      	ldr	r2, [pc, #28]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x58>)
 80048e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048e2:	4a07      	ldr	r2, [pc, #28]	@ (8004900 <HAL_RCC_GetHCLKFreq+0x5c>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048e8:	4b04      	ldr	r3, [pc, #16]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x58>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	58024400 	.word	0x58024400
 80048f8:	0800b1b4 	.word	0x0800b1b4
 80048fc:	24000004 	.word	0x24000004
 8004900:	24000000 	.word	0x24000000

08004904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004908:	f7ff ffcc 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 800490c:	4602      	mov	r2, r0
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	4904      	ldr	r1, [pc, #16]	@ (800492c <HAL_RCC_GetPCLK1Freq+0x28>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	58024400 	.word	0x58024400
 800492c:	0800b1b4 	.word	0x0800b1b4

08004930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004934:	f7ff ffb6 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4904      	ldr	r1, [pc, #16]	@ (8004958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}
 8004954:	58024400 	.word	0x58024400
 8004958:	0800b1b4 	.word	0x0800b1b4

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b0ca      	sub	sp, #296	@ 0x128
 8004962:	af00      	add	r7, sp, #0
 8004964:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800496e:	2300      	movs	r3, #0
 8004970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004980:	2500      	movs	r5, #0
 8004982:	ea54 0305 	orrs.w	r3, r4, r5
 8004986:	d049      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800498e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004992:	d02f      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004994:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004998:	d828      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800499a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800499e:	d01a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049a4:	d822      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ae:	d007      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049b0:	e01c      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b2:	4bb8      	ldr	r3, [pc, #736]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	4ab7      	ldr	r2, [pc, #732]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049be:	e01a      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	3308      	adds	r3, #8
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fc8f 	bl	80062ec <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049d4:	e00f      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	3328      	adds	r3, #40	@ 0x28
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 fd36 	bl	8006450 <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049ea:	e004      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049fe:	4ba5      	ldr	r3, [pc, #660]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a0c:	4aa1      	ldr	r2, [pc, #644]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a12:	e003      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004a28:	f04f 0900 	mov.w	r9, #0
 8004a2c:	ea58 0309 	orrs.w	r3, r8, r9
 8004a30:	d047      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d82a      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a59 	.word	0x08004a59
 8004a48:	08004a67 	.word	0x08004a67
 8004a4c:	08004a7d 	.word	0x08004a7d
 8004a50:	08004a9b 	.word	0x08004a9b
 8004a54:	08004a9b 	.word	0x08004a9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a58:	4b8e      	ldr	r3, [pc, #568]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	4a8d      	ldr	r2, [pc, #564]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a64:	e01a      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 fc3c 	bl	80062ec <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a7a:	e00f      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	3328      	adds	r3, #40	@ 0x28
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fce3 	bl	8006450 <RCCEx_PLL3_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a90:	e004      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a98:	e000      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa8:	f023 0107 	bic.w	r1, r3, #7
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	4a78      	ldr	r2, [pc, #480]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ab8:	e003      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004ace:	f04f 0b00 	mov.w	fp, #0
 8004ad2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ad6:	d04c      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae2:	d030      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae8:	d829      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aec:	d02d      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af0:	d825      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	d018      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d821      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004afe:	2b40      	cmp	r3, #64	@ 0x40
 8004b00:	d007      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004b02:	e01c      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b04:	4b63      	ldr	r3, [pc, #396]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	4a62      	ldr	r2, [pc, #392]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b10:	e01c      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b16:	3308      	adds	r3, #8
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 fbe6 	bl	80062ec <RCCEx_PLL2_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b26:	e011      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2c:	3328      	adds	r3, #40	@ 0x28
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 fc8d 	bl	8006450 <RCCEx_PLL3_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b3c:	e006      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b44:	e002      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b54:	4b4f      	ldr	r3, [pc, #316]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b62:	4a4c      	ldr	r2, [pc, #304]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b82:	2300      	movs	r3, #0
 8004b84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	d053      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b9e:	d035      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ba0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ba4:	d82e      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ba6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004baa:	d031      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004bac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004bb0:	d828      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bb6:	d01a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bbc:	d822      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004bc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc6:	d007      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004bc8:	e01c      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bca:	4b32      	ldr	r3, [pc, #200]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	4a31      	ldr	r2, [pc, #196]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bd6:	e01c      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bdc:	3308      	adds	r3, #8
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 fb83 	bl	80062ec <RCCEx_PLL2_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bec:	e011      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	3328      	adds	r3, #40	@ 0x28
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 fc2a 	bl	8006450 <RCCEx_PLL3_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c02:	e006      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c30:	e003      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004c46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c54:	460b      	mov	r3, r1
 8004c56:	4313      	orrs	r3, r2
 8004c58:	d056      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c66:	d038      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c6c:	d831      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c72:	d034      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004c74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c78:	d82b      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c7e:	d01d      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c84:	d825      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d006      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004c8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c90:	e01f      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c92:	bf00      	nop
 8004c94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c98:	4ba2      	ldr	r3, [pc, #648]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	4aa1      	ldr	r2, [pc, #644]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004caa:	3308      	adds	r3, #8
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f001 fb1c 	bl	80062ec <RCCEx_PLL2_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cba:	e011      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc0:	3328      	adds	r3, #40	@ 0x28
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fbc3 	bl	8006450 <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cd8:	e002      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ce8:	4b8e      	ldr	r3, [pc, #568]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004cf8:	4a8a      	ldr	r2, [pc, #552]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cfe:	e003      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004d14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004d1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004d22:	460b      	mov	r3, r1
 8004d24:	4313      	orrs	r3, r2
 8004d26:	d03a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2e:	2b30      	cmp	r3, #48	@ 0x30
 8004d30:	d01f      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004d32:	2b30      	cmp	r3, #48	@ 0x30
 8004d34:	d819      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d00c      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d815      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d019      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d111      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d46:	4b77      	ldr	r3, [pc, #476]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	4a76      	ldr	r2, [pc, #472]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d52:	e011      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	3308      	adds	r3, #8
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fac5 	bl	80062ec <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d68:	e006      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d80:	4b68      	ldr	r3, [pc, #416]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8e:	4a65      	ldr	r2, [pc, #404]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d94:	e003      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004daa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004db4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d051      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc8:	d035      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004dca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dce:	d82e      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004dd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd4:	d031      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004dd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dda:	d828      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de0:	d01a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de6:	d822      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df0:	d007      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004df2:	e01c      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	4a4a      	ldr	r2, [pc, #296]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e00:	e01c      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e06:	3308      	adds	r3, #8
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 fa6e 	bl	80062ec <RCCEx_PLL2_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e16:	e011      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1c:	3328      	adds	r3, #40	@ 0x28
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fb15 	bl	8006450 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e2c:	e006      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e34:	e002      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e44:	4b37      	ldr	r3, [pc, #220]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e52:	4a34      	ldr	r2, [pc, #208]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e58:	e003      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e72:	2300      	movs	r3, #0
 8004e74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	d056      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e8c:	d033      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004e8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e92:	d82c      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e98:	d02f      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004e9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e9e:	d826      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ea4:	d02b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ea6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eaa:	d820      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004eac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eb0:	d012      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eb6:	d81a      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d022      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec0:	d115      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f001 fa0e 	bl	80062ec <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ed6:	e015      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004edc:	3328      	adds	r3, #40	@ 0x28
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 fab5 	bl	8006450 <RCCEx_PLL3_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004eec:	e00a      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ef4:	e006      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f0c:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f1a:	4a02      	ldr	r2, [pc, #8]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f20:	e006      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	d055      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f5c:	d033      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f62:	d82c      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f68:	d02f      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6e:	d826      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f74:	d02b      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004f76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f7a:	d820      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f80:	d012      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f86:	d81a      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d022      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f90:	d115      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f96:	3308      	adds	r3, #8
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 f9a6 	bl	80062ec <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fa6:	e015      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fac:	3328      	adds	r3, #40	@ 0x28
 8004fae:	2101      	movs	r1, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 fa4d 	bl	8006450 <RCCEx_PLL3_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fc4:	e006      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fc6:	bf00      	nop
 8004fc8:	e004      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fca:	bf00      	nop
 8004fcc:	e002      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fdc:	4ba3      	ldr	r3, [pc, #652]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fec:	4a9f      	ldr	r2, [pc, #636]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff2:	e003      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d037      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005026:	d00e      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800502c:	d816      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005036:	d111      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005038:	4b8c      	ldr	r3, [pc, #560]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4a8b      	ldr	r2, [pc, #556]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800503e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005044:	e00f      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504a:	3308      	adds	r3, #8
 800504c:	2101      	movs	r1, #1
 800504e:	4618      	mov	r0, r3
 8005050:	f001 f94c 	bl	80062ec <RCCEx_PLL2_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800506e:	4b7f      	ldr	r3, [pc, #508]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005072:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	4a7b      	ldr	r2, [pc, #492]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800507e:	430b      	orrs	r3, r1
 8005080:	6513      	str	r3, [r2, #80]	@ 0x50
 8005082:	e003      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800509c:	2300      	movs	r3, #0
 800509e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80050a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4313      	orrs	r3, r2
 80050aa:	d039      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d81c      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80050b6:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050f9 	.word	0x080050f9
 80050c0:	080050cd 	.word	0x080050cd
 80050c4:	080050db 	.word	0x080050db
 80050c8:	080050f9 	.word	0x080050f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050cc:	4b67      	ldr	r3, [pc, #412]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	4a66      	ldr	r2, [pc, #408]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050d8:	e00f      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050de:	3308      	adds	r3, #8
 80050e0:	2102      	movs	r1, #2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 f902 	bl	80062ec <RCCEx_PLL2_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050ee:	e004      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050f6:	e000      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80050f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005102:	4b5a      	ldr	r3, [pc, #360]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005106:	f023 0103 	bic.w	r1, r3, #3
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005110:	4a56      	ldr	r2, [pc, #344]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005112:	430b      	orrs	r3, r1
 8005114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005116:	e003      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800512c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005136:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	f000 809f 	beq.w	8005280 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005142:	4b4b      	ldr	r3, [pc, #300]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4a      	ldr	r2, [pc, #296]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800514c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800514e:	f7fd fd61 	bl	8002c14 <HAL_GetTick>
 8005152:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005156:	e00b      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005158:	f7fd fd5c 	bl	8002c14 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b64      	cmp	r3, #100	@ 0x64
 8005166:	d903      	bls.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800516e:	e005      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005170:	4b3f      	ldr	r3, [pc, #252]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0ed      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800517c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005180:	2b00      	cmp	r3, #0
 8005182:	d179      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005184:	4b39      	ldr	r3, [pc, #228]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005186:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005190:	4053      	eors	r3, r2
 8005192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d015      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800519a:	4b34      	ldr	r3, [pc, #208]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051a6:	4b31      	ldr	r3, [pc, #196]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051aa:	4a30      	ldr	r2, [pc, #192]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051b2:	4b2e      	ldr	r3, [pc, #184]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b6:	4a2d      	ldr	r2, [pc, #180]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051be:	4a2b      	ldr	r2, [pc, #172]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d2:	d118      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fd fd1e 	bl	8002c14 <HAL_GetTick>
 80051d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051dc:	e00d      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fd fd19 	bl	8002c14 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051e8:	1ad2      	subs	r2, r2, r3
 80051ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d903      	bls.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80051f8:	e005      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051fa:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0eb      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800520a:	2b00      	cmp	r3, #0
 800520c:	d129      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800521e:	d10e      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005220:	4b12      	ldr	r3, [pc, #72]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005230:	091a      	lsrs	r2, r3, #4
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005234:	4013      	ands	r3, r2
 8005236:	4a0d      	ldr	r2, [pc, #52]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005238:	430b      	orrs	r3, r1
 800523a:	6113      	str	r3, [r2, #16]
 800523c:	e005      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800523e:	4b0b      	ldr	r3, [pc, #44]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	4a0a      	ldr	r2, [pc, #40]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005244:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005248:	6113      	str	r3, [r2, #16]
 800524a:	4b08      	ldr	r3, [pc, #32]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800524c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525a:	4a04      	ldr	r2, [pc, #16]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525c:	430b      	orrs	r3, r1
 800525e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005260:	e00e      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800526a:	e009      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800526c:	58024400 	.word	0x58024400
 8005270:	58024800 	.word	0x58024800
 8005274:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800527c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f002 0301 	and.w	r3, r2, #1
 800528c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005296:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800529a:	460b      	mov	r3, r1
 800529c:	4313      	orrs	r3, r2
 800529e:	f000 8089 	beq.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052a8:	2b28      	cmp	r3, #40	@ 0x28
 80052aa:	d86b      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	0800538d 	.word	0x0800538d
 80052b8:	08005385 	.word	0x08005385
 80052bc:	08005385 	.word	0x08005385
 80052c0:	08005385 	.word	0x08005385
 80052c4:	08005385 	.word	0x08005385
 80052c8:	08005385 	.word	0x08005385
 80052cc:	08005385 	.word	0x08005385
 80052d0:	08005385 	.word	0x08005385
 80052d4:	08005359 	.word	0x08005359
 80052d8:	08005385 	.word	0x08005385
 80052dc:	08005385 	.word	0x08005385
 80052e0:	08005385 	.word	0x08005385
 80052e4:	08005385 	.word	0x08005385
 80052e8:	08005385 	.word	0x08005385
 80052ec:	08005385 	.word	0x08005385
 80052f0:	08005385 	.word	0x08005385
 80052f4:	0800536f 	.word	0x0800536f
 80052f8:	08005385 	.word	0x08005385
 80052fc:	08005385 	.word	0x08005385
 8005300:	08005385 	.word	0x08005385
 8005304:	08005385 	.word	0x08005385
 8005308:	08005385 	.word	0x08005385
 800530c:	08005385 	.word	0x08005385
 8005310:	08005385 	.word	0x08005385
 8005314:	0800538d 	.word	0x0800538d
 8005318:	08005385 	.word	0x08005385
 800531c:	08005385 	.word	0x08005385
 8005320:	08005385 	.word	0x08005385
 8005324:	08005385 	.word	0x08005385
 8005328:	08005385 	.word	0x08005385
 800532c:	08005385 	.word	0x08005385
 8005330:	08005385 	.word	0x08005385
 8005334:	0800538d 	.word	0x0800538d
 8005338:	08005385 	.word	0x08005385
 800533c:	08005385 	.word	0x08005385
 8005340:	08005385 	.word	0x08005385
 8005344:	08005385 	.word	0x08005385
 8005348:	08005385 	.word	0x08005385
 800534c:	08005385 	.word	0x08005385
 8005350:	08005385 	.word	0x08005385
 8005354:	0800538d 	.word	0x0800538d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535c:	3308      	adds	r3, #8
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f000 ffc3 	bl	80062ec <RCCEx_PLL2_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800536c:	e00f      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005372:	3328      	adds	r3, #40	@ 0x28
 8005374:	2101      	movs	r1, #1
 8005376:	4618      	mov	r0, r3
 8005378:	f001 f86a 	bl	8006450 <RCCEx_PLL3_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005382:	e004      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800538c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005396:	4bbf      	ldr	r3, [pc, #764]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800539e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053a4:	4abb      	ldr	r2, [pc, #748]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a6:	430b      	orrs	r3, r1
 80053a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80053aa:	e003      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f002 0302 	and.w	r3, r2, #2
 80053c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053c4:	2300      	movs	r3, #0
 80053c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80053ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80053ce:	460b      	mov	r3, r1
 80053d0:	4313      	orrs	r3, r2
 80053d2:	d041      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d824      	bhi.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005431 	.word	0x08005431
 80053e8:	080053fd 	.word	0x080053fd
 80053ec:	08005413 	.word	0x08005413
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005431 	.word	0x08005431
 80053f8:	08005431 	.word	0x08005431
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	3308      	adds	r3, #8
 8005402:	2101      	movs	r1, #1
 8005404:	4618      	mov	r0, r3
 8005406:	f000 ff71 	bl	80062ec <RCCEx_PLL2_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005410:	e00f      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	3328      	adds	r3, #40	@ 0x28
 8005418:	2101      	movs	r1, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f001 f818 	bl	8006450 <RCCEx_PLL3_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005426:	e004      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800542e:	e000      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800543a:	4b96      	ldr	r3, [pc, #600]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800543c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543e:	f023 0107 	bic.w	r1, r3, #7
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005448:	4a92      	ldr	r2, [pc, #584]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800544a:	430b      	orrs	r3, r1
 800544c:	6553      	str	r3, [r2, #84]	@ 0x54
 800544e:	e003      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f002 0304 	and.w	r3, r2, #4
 8005464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800546e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005472:	460b      	mov	r3, r1
 8005474:	4313      	orrs	r3, r2
 8005476:	d044      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005480:	2b05      	cmp	r3, #5
 8005482:	d825      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005484:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	080054d9 	.word	0x080054d9
 8005490:	080054a5 	.word	0x080054a5
 8005494:	080054bb 	.word	0x080054bb
 8005498:	080054d9 	.word	0x080054d9
 800549c:	080054d9 	.word	0x080054d9
 80054a0:	080054d9 	.word	0x080054d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	3308      	adds	r3, #8
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 ff1d 	bl	80062ec <RCCEx_PLL2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054b8:	e00f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 ffc4 	bl	8006450 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	f023 0107 	bic.w	r1, r3, #7
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f2:	4a68      	ldr	r2, [pc, #416]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f002 0320 	and.w	r3, r2, #32
 800550e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005512:	2300      	movs	r3, #0
 8005514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800551c:	460b      	mov	r3, r1
 800551e:	4313      	orrs	r3, r2
 8005520:	d055      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800552e:	d033      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005534:	d82c      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553a:	d02f      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005540:	d826      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005542:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005546:	d02b      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005548:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800554c:	d820      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800554e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005552:	d012      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005558:	d81a      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d022      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800555e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005562:	d115      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	3308      	adds	r3, #8
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f000 febd 	bl	80062ec <RCCEx_PLL2_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005578:	e015      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557e:	3328      	adds	r3, #40	@ 0x28
 8005580:	2102      	movs	r1, #2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 ff64 	bl	8006450 <RCCEx_PLL3_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800558e:	e00a      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005596:	e006      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005598:	bf00      	nop
 800559a:	e004      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800559c:	bf00      	nop
 800559e:	e002      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055a0:	bf00      	nop
 80055a2:	e000      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ae:	4b39      	ldr	r3, [pc, #228]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	4a35      	ldr	r2, [pc, #212]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80055c4:	e003      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80055da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055de:	2300      	movs	r3, #0
 80055e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80055e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4313      	orrs	r3, r2
 80055ec:	d058      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055fa:	d033      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80055fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005600:	d82c      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005606:	d02f      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560c:	d826      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800560e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005612:	d02b      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005614:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005618:	d820      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800561a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800561e:	d012      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005624:	d81a      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d022      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800562e:	d115      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	3308      	adds	r3, #8
 8005636:	2100      	movs	r1, #0
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fe57 	bl	80062ec <RCCEx_PLL2_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005644:	e015      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	3328      	adds	r3, #40	@ 0x28
 800564c:	2102      	movs	r1, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fefe 	bl	8006450 <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800565a:	e00a      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005662:	e006      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005664:	bf00      	nop
 8005666:	e004      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005668:	bf00      	nop
 800566a:	e002      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10e      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800567a:	4b06      	ldr	r3, [pc, #24]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800568a:	4a02      	ldr	r2, [pc, #8]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800568c:	430b      	orrs	r3, r1
 800568e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005692:	bf00      	nop
 8005694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80056ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b0:	2300      	movs	r3, #0
 80056b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80056ba:	460b      	mov	r3, r1
 80056bc:	4313      	orrs	r3, r2
 80056be:	d055      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056cc:	d033      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80056ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056d2:	d82c      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d8:	d02f      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80056da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056de:	d826      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056e4:	d02b      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80056e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056ea:	d820      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f0:	d012      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80056f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f6:	d81a      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d022      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80056fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005700:	d115      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005706:	3308      	adds	r3, #8
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fdee 	bl	80062ec <RCCEx_PLL2_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005716:	e015      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571c:	3328      	adds	r3, #40	@ 0x28
 800571e:	2102      	movs	r1, #2
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fe95 	bl	8006450 <RCCEx_PLL3_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800572c:	e00a      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005734:	e006      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005736:	bf00      	nop
 8005738:	e004      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800573a:	bf00      	nop
 800573c:	e002      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800573e:	bf00      	nop
 8005740:	e000      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800574c:	4ba1      	ldr	r3, [pc, #644]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800574e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005750:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800575c:	4a9d      	ldr	r2, [pc, #628]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800575e:	430b      	orrs	r3, r1
 8005760:	6593      	str	r3, [r2, #88]	@ 0x58
 8005762:	e003      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f002 0308 	and.w	r3, r2, #8
 8005778:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800577c:	2300      	movs	r3, #0
 800577e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005782:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005786:	460b      	mov	r3, r1
 8005788:	4313      	orrs	r3, r2
 800578a:	d01e      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579e:	3328      	adds	r3, #40	@ 0x28
 80057a0:	2102      	movs	r1, #2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fe54 	bl	8006450 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057b4:	4b87      	ldr	r3, [pc, #540]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c4:	4a83      	ldr	r2, [pc, #524]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c6:	430b      	orrs	r3, r1
 80057c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	f002 0310 	and.w	r3, r2, #16
 80057d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80057e4:	460b      	mov	r3, r1
 80057e6:	4313      	orrs	r3, r2
 80057e8:	d01e      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f6:	d10c      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	3328      	adds	r3, #40	@ 0x28
 80057fe:	2102      	movs	r1, #2
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fe25 	bl	8006450 <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005812:	4b70      	ldr	r3, [pc, #448]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005816:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005822:	4a6c      	ldr	r2, [pc, #432]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005824:	430b      	orrs	r3, r1
 8005826:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005838:	2300      	movs	r3, #0
 800583a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800583e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	d03e      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005854:	d022      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800585a:	d81b      	bhi.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005864:	d00b      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005866:	e015      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586c:	3308      	adds	r3, #8
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fd3b 	bl	80062ec <RCCEx_PLL2_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800587c:	e00f      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	3328      	adds	r3, #40	@ 0x28
 8005884:	2102      	movs	r1, #2
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fde2 	bl	8006450 <RCCEx_PLL3_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005892:	e004      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800589a:	e000      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800589c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a6:	4b4b      	ldr	r3, [pc, #300]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058b6:	4a47      	ldr	r2, [pc, #284]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80058bc:	e003      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80058d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058d4:	2300      	movs	r3, #0
 80058d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80058dc:	460b      	mov	r3, r1
 80058de:	4313      	orrs	r3, r2
 80058e0:	d03b      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ee:	d01f      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80058f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058f4:	d818      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80058f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80058fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005900:	d007      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005902:	e011      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b33      	ldr	r3, [pc, #204]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	4a32      	ldr	r2, [pc, #200]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005910:	e00f      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	3328      	adds	r3, #40	@ 0x28
 8005918:	2101      	movs	r1, #1
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fd98 	bl	8006450 <RCCEx_PLL3_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005926:	e004      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800592e:	e000      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800593a:	4b26      	ldr	r3, [pc, #152]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	4a22      	ldr	r2, [pc, #136]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005950:	e003      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005966:	673b      	str	r3, [r7, #112]	@ 0x70
 8005968:	2300      	movs	r3, #0
 800596a:	677b      	str	r3, [r7, #116]	@ 0x74
 800596c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005970:	460b      	mov	r3, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	d034      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005984:	d007      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005986:	e011      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005988:	4b12      	ldr	r3, [pc, #72]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	4a11      	ldr	r2, [pc, #68]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800598e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005994:	e00e      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	3308      	adds	r3, #8
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fca4 	bl	80062ec <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059aa:	e003      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10d      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059bc:	4b05      	ldr	r3, [pc, #20]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ca:	4a02      	ldr	r2, [pc, #8]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059d0:	e006      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80059d2:	bf00      	nop
 80059d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ee:	2300      	movs	r3, #0
 80059f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d00c      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a00:	3328      	adds	r3, #40	@ 0x28
 8005a02:	2102      	movs	r1, #2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fd23 	bl	8006450 <RCCEx_PLL3_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a22:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a24:	2300      	movs	r3, #0
 8005a26:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d038      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a3e:	d018      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005a40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a44:	d811      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a4a:	d014      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a50:	d80b      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d011      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5c:	4bc3      	ldr	r3, [pc, #780]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	4ac2      	ldr	r2, [pc, #776]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a68:	e008      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a70:	e004      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a84:	4bb9      	ldr	r3, [pc, #740]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a94:	4ab5      	ldr	r2, [pc, #724]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a96:	430b      	orrs	r3, r1
 8005a98:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ab6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005aba:	460b      	mov	r3, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ac0:	4baa      	ldr	r3, [pc, #680]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ace:	4aa7      	ldr	r2, [pc, #668]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ae0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ae6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005af0:	4b9e      	ldr	r3, [pc, #632]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b00:	4a9a      	ldr	r2, [pc, #616]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b02:	430b      	orrs	r3, r1
 8005b04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b14:	2300      	movs	r3, #0
 8005b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b22:	4b92      	ldr	r3, [pc, #584]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b26:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b30:	4a8e      	ldr	r2, [pc, #568]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005b42:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b44:	2300      	movs	r3, #0
 8005b46:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	d00e      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b52:	4b86      	ldr	r3, [pc, #536]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	4a85      	ldr	r2, [pc, #532]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b5c:	6113      	str	r3, [r2, #16]
 8005b5e:	4b83      	ldr	r3, [pc, #524]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b60:	6919      	ldr	r1, [r3, #16]
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b6a:	4a80      	ldr	r2, [pc, #512]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b7e:	2300      	movs	r3, #0
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b86:	460b      	mov	r3, r1
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b8c:	4b77      	ldr	r3, [pc, #476]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b90:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9a:	4a74      	ldr	r2, [pc, #464]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bbc:	4b6b      	ldr	r3, [pc, #428]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bcc:	4a67      	ldr	r2, [pc, #412]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005be8:	460b      	mov	r3, r1
 8005bea:	4313      	orrs	r3, r2
 8005bec:	d011      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fb78 	bl	80062ec <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	6239      	str	r1, [r7, #32]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	d011      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c32:	3308      	adds	r3, #8
 8005c34:	2101      	movs	r1, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fb58 	bl	80062ec <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	61b9      	str	r1, [r7, #24]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	d011      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	3308      	adds	r3, #8
 8005c74:	2102      	movs	r1, #2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fb38 	bl	80062ec <RCCEx_PLL2_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	6139      	str	r1, [r7, #16]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4313      	orrs	r3, r2
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	3328      	adds	r3, #40	@ 0x28
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fbca 	bl	8006450 <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	2100      	movs	r1, #0
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4313      	orrs	r3, r2
 8005cec:	d011      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf2:	3328      	adds	r3, #40	@ 0x28
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fbaa 	bl	8006450 <RCCEx_PLL3_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	d011      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d32:	3328      	adds	r3, #40	@ 0x28
 8005d34:	2102      	movs	r1, #2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fb8a 	bl	8006450 <RCCEx_PLL3_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005d52:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005d66:	46bd      	mov	sp, r7
 8005d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6c:	58024400 	.word	0x58024400

08005d70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d74:	f7fe fd96 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	091b      	lsrs	r3, r3, #4
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4904      	ldr	r1, [pc, #16]	@ (8005d98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	58024400 	.word	0x58024400
 8005d98:	0800b1b4 	.word	0x0800b1b4

08005d9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	@ 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005da4:	4ba1      	ldr	r3, [pc, #644]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005dae:	4b9f      	ldr	r3, [pc, #636]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db2:	0b1b      	lsrs	r3, r3, #12
 8005db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005db8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dba:	4b9c      	ldr	r3, [pc, #624]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	091b      	lsrs	r3, r3, #4
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005dc6:	4b99      	ldr	r3, [pc, #612]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dca:	08db      	lsrs	r3, r3, #3
 8005dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	fb02 f303 	mul.w	r3, r2, r3
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8111 	beq.w	800600c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	f000 8083 	beq.w	8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	f200 80a1 	bhi.w	8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d056      	beq.n	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e06:	e099      	b.n	8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e08:	4b88      	ldr	r3, [pc, #544]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02d      	beq.n	8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e14:	4b85      	ldr	r3, [pc, #532]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	08db      	lsrs	r3, r3, #3
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	4a84      	ldr	r2, [pc, #528]	@ (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e6e:	e087      	b.n	8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e82:	4b6a      	ldr	r3, [pc, #424]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eb2:	e065      	b.n	8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec6:	4b59      	ldr	r3, [pc, #356]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ef6:	e043      	b.n	8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0a:	4b48      	ldr	r3, [pc, #288]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f3a:	e021      	b.n	8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b37      	ldr	r3, [pc, #220]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f80:	4b2a      	ldr	r3, [pc, #168]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	0a5b      	lsrs	r3, r3, #9
 8005f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa6:	ee17 2a90 	vmov	r2, s15
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005fae:	4b1f      	ldr	r3, [pc, #124]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd4:	ee17 2a90 	vmov	r2, s15
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005fdc:	4b13      	ldr	r3, [pc, #76]	@ (800602c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	0e1b      	lsrs	r3, r3, #24
 8005fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006002:	ee17 2a90 	vmov	r2, s15
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800600a:	e008      	b.n	800601e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	609a      	str	r2, [r3, #8]
}
 800601e:	bf00      	nop
 8006020:	3724      	adds	r7, #36	@ 0x24
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
 8006030:	03d09000 	.word	0x03d09000
 8006034:	46000000 	.word	0x46000000
 8006038:	4c742400 	.word	0x4c742400
 800603c:	4a742400 	.word	0x4a742400
 8006040:	4bbebc20 	.word	0x4bbebc20

08006044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006044:	b480      	push	{r7}
 8006046:	b089      	sub	sp, #36	@ 0x24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800604c:	4ba1      	ldr	r3, [pc, #644]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006056:	4b9f      	ldr	r3, [pc, #636]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605a:	0d1b      	lsrs	r3, r3, #20
 800605c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006062:	4b9c      	ldr	r3, [pc, #624]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800606e:	4b99      	ldr	r3, [pc, #612]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006072:	08db      	lsrs	r3, r3, #3
 8006074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	fb02 f303 	mul.w	r3, r2, r3
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8111 	beq.w	80062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b02      	cmp	r3, #2
 8006096:	f000 8083 	beq.w	80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b02      	cmp	r3, #2
 800609e:	f200 80a1 	bhi.w	80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d056      	beq.n	800615c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060ae:	e099      	b.n	80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060b0:	4b88      	ldr	r3, [pc, #544]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d02d      	beq.n	8006118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060bc:	4b85      	ldr	r3, [pc, #532]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	08db      	lsrs	r3, r3, #3
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	4a84      	ldr	r2, [pc, #528]	@ (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
 80060cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e6:	4b7b      	ldr	r3, [pc, #492]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800610a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006112:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006116:	e087      	b.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b6a      	ldr	r3, [pc, #424]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	ed97 6a03 	vldr	s12, [r7, #12]
 800613e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615a:	e065      	b.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616e:	4b59      	ldr	r3, [pc, #356]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006182:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619e:	e043      	b.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b48      	ldr	r3, [pc, #288]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e2:	e021      	b.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f6:	4b37      	ldr	r3, [pc, #220]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006206:	ed97 6a03 	vldr	s12, [r7, #12]
 800620a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006228:	4b2a      	ldr	r3, [pc, #168]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800622a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622c:	0a5b      	lsrs	r3, r3, #9
 800622e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800623e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006242:	edd7 6a07 	vldr	s13, [r7, #28]
 8006246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624e:	ee17 2a90 	vmov	r2, s15
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006256:	4b1f      	ldr	r3, [pc, #124]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800626c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006270:	edd7 6a07 	vldr	s13, [r7, #28]
 8006274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627c:	ee17 2a90 	vmov	r2, s15
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006284:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	0e1b      	lsrs	r3, r3, #24
 800628a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800629a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800629e:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062aa:	ee17 2a90 	vmov	r2, s15
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062b2:	e008      	b.n	80062c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	609a      	str	r2, [r3, #8]
}
 80062c6:	bf00      	nop
 80062c8:	3724      	adds	r7, #36	@ 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	58024400 	.word	0x58024400
 80062d8:	03d09000 	.word	0x03d09000
 80062dc:	46000000 	.word	0x46000000
 80062e0:	4c742400 	.word	0x4c742400
 80062e4:	4a742400 	.word	0x4a742400
 80062e8:	4bbebc20 	.word	0x4bbebc20

080062ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062fa:	4b53      	ldr	r3, [pc, #332]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d101      	bne.n	800630a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e099      	b.n	800643e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800630a:	4b4f      	ldr	r3, [pc, #316]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4e      	ldr	r2, [pc, #312]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006310:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006316:	f7fc fc7d 	bl	8002c14 <HAL_GetTick>
 800631a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800631c:	e008      	b.n	8006330 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800631e:	f7fc fc79 	bl	8002c14 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e086      	b.n	800643e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006330:	4b45      	ldr	r3, [pc, #276]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f0      	bne.n	800631e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800633c:	4b42      	ldr	r3, [pc, #264]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 800633e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006340:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	493f      	ldr	r1, [pc, #252]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 800634c:	4313      	orrs	r3, r2
 800634e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	3b01      	subs	r3, #1
 8006356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	3b01      	subs	r3, #1
 8006360:	025b      	lsls	r3, r3, #9
 8006362:	b29b      	uxth	r3, r3
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	3b01      	subs	r3, #1
 800636c:	041b      	lsls	r3, r3, #16
 800636e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	3b01      	subs	r3, #1
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006380:	4931      	ldr	r1, [pc, #196]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006386:	4b30      	ldr	r3, [pc, #192]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	492d      	ldr	r1, [pc, #180]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006394:	4313      	orrs	r3, r2
 8006396:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006398:	4b2b      	ldr	r3, [pc, #172]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	f023 0220 	bic.w	r2, r3, #32
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	4928      	ldr	r1, [pc, #160]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063aa:	4b27      	ldr	r3, [pc, #156]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	4a26      	ldr	r2, [pc, #152]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063b0:	f023 0310 	bic.w	r3, r3, #16
 80063b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063b6:	4b24      	ldr	r3, [pc, #144]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063ba:	4b24      	ldr	r3, [pc, #144]	@ (800644c <RCCEx_PLL2_Config+0x160>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	69d2      	ldr	r2, [r2, #28]
 80063c2:	00d2      	lsls	r2, r2, #3
 80063c4:	4920      	ldr	r1, [pc, #128]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063d0:	f043 0310 	orr.w	r3, r3, #16
 80063d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063e8:	e00f      	b.n	800640a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d106      	bne.n	80063fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063f0:	4b15      	ldr	r3, [pc, #84]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f4:	4a14      	ldr	r2, [pc, #80]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 80063f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063fc:	e005      	b.n	800640a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063fe:	4b12      	ldr	r3, [pc, #72]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	4a11      	ldr	r2, [pc, #68]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006404:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006408:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800640a:	4b0f      	ldr	r3, [pc, #60]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a0e      	ldr	r2, [pc, #56]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006416:	f7fc fbfd 	bl	8002c14 <HAL_GetTick>
 800641a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800641c:	e008      	b.n	8006430 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800641e:	f7fc fbf9 	bl	8002c14 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e006      	b.n	800643e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006430:	4b05      	ldr	r3, [pc, #20]	@ (8006448 <RCCEx_PLL2_Config+0x15c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
 800644c:	ffff0007 	.word	0xffff0007

08006450 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800645e:	4b53      	ldr	r3, [pc, #332]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d101      	bne.n	800646e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e099      	b.n	80065a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800646e:	4b4f      	ldr	r3, [pc, #316]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4e      	ldr	r2, [pc, #312]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647a:	f7fc fbcb 	bl	8002c14 <HAL_GetTick>
 800647e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006480:	e008      	b.n	8006494 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006482:	f7fc fbc7 	bl	8002c14 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e086      	b.n	80065a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006494:	4b45      	ldr	r3, [pc, #276]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1f0      	bne.n	8006482 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064a0:	4b42      	ldr	r3, [pc, #264]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	051b      	lsls	r3, r3, #20
 80064ae:	493f      	ldr	r1, [pc, #252]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	025b      	lsls	r3, r3, #9
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	3b01      	subs	r3, #1
 80064de:	061b      	lsls	r3, r3, #24
 80064e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80064e4:	4931      	ldr	r1, [pc, #196]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064ea:	4b30      	ldr	r3, [pc, #192]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	492d      	ldr	r1, [pc, #180]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064fc:	4b2b      	ldr	r3, [pc, #172]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	4928      	ldr	r1, [pc, #160]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800650e:	4b27      	ldr	r3, [pc, #156]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	4a26      	ldr	r2, [pc, #152]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006518:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800651a:	4b24      	ldr	r3, [pc, #144]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 800651c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800651e:	4b24      	ldr	r3, [pc, #144]	@ (80065b0 <RCCEx_PLL3_Config+0x160>)
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	69d2      	ldr	r2, [r2, #28]
 8006526:	00d2      	lsls	r2, r2, #3
 8006528:	4920      	ldr	r1, [pc, #128]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800652e:	4b1f      	ldr	r3, [pc, #124]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	4a1e      	ldr	r2, [pc, #120]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006540:	4b1a      	ldr	r3, [pc, #104]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	4a19      	ldr	r2, [pc, #100]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006546:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800654a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800654c:	e00f      	b.n	800656e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d106      	bne.n	8006562 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006554:	4b15      	ldr	r3, [pc, #84]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 800655a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800655e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006560:	e005      	b.n	800656e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006566:	4a11      	ldr	r2, [pc, #68]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006568:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800656c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800656e:	4b0f      	ldr	r3, [pc, #60]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a0e      	ldr	r2, [pc, #56]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657a:	f7fc fb4b 	bl	8002c14 <HAL_GetTick>
 800657e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006580:	e008      	b.n	8006594 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006582:	f7fc fb47 	bl	8002c14 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e006      	b.n	80065a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <RCCEx_PLL3_Config+0x15c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	58024400 	.word	0x58024400
 80065b0:	ffff0007 	.word	0xffff0007

080065b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e10f      	b.n	80067e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a87      	ldr	r2, [pc, #540]	@ (80067f0 <HAL_SPI_Init+0x23c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <HAL_SPI_Init+0x42>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a86      	ldr	r2, [pc, #536]	@ (80067f4 <HAL_SPI_Init+0x240>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00a      	beq.n	80065f6 <HAL_SPI_Init+0x42>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a84      	ldr	r2, [pc, #528]	@ (80067f8 <HAL_SPI_Init+0x244>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d005      	beq.n	80065f6 <HAL_SPI_Init+0x42>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d901      	bls.n	80065f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0f7      	b.n	80067e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 f91e 	bl	8007838 <SPI_GetPacketSize>
 80065fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a7b      	ldr	r2, [pc, #492]	@ (80067f0 <HAL_SPI_Init+0x23c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00c      	beq.n	8006622 <HAL_SPI_Init+0x6e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a79      	ldr	r2, [pc, #484]	@ (80067f4 <HAL_SPI_Init+0x240>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <HAL_SPI_Init+0x6e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a78      	ldr	r2, [pc, #480]	@ (80067f8 <HAL_SPI_Init+0x244>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d002      	beq.n	8006622 <HAL_SPI_Init+0x6e>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b08      	cmp	r3, #8
 8006620:	d811      	bhi.n	8006646 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006626:	4a72      	ldr	r2, [pc, #456]	@ (80067f0 <HAL_SPI_Init+0x23c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d009      	beq.n	8006640 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a70      	ldr	r2, [pc, #448]	@ (80067f4 <HAL_SPI_Init+0x240>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <HAL_SPI_Init+0x8c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6f      	ldr	r2, [pc, #444]	@ (80067f8 <HAL_SPI_Init+0x244>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d104      	bne.n	800664a <HAL_SPI_Init+0x96>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b10      	cmp	r3, #16
 8006644:	d901      	bls.n	800664a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e0cd      	b.n	80067e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fb fda2 	bl	80021a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0201 	bic.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006686:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006690:	d119      	bne.n	80066c6 <HAL_SPI_Init+0x112>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800669a:	d103      	bne.n	80066a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10c      	bne.n	80066c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b4:	d107      	bne.n	80066c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <HAL_SPI_Init+0x13e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b06      	cmp	r3, #6
 80066d8:	d90b      	bls.n	80066f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e007      	b.n	8006702 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006700:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	431a      	orrs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006714:	ea42 0103 	orr.w	r1, r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006762:	ea42 0103 	orr.w	r1, r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d113      	bne.n	80067a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40013000 	.word	0x40013000
 80067f4:	40003800 	.word	0x40003800
 80067f8:	40003c00 	.word	0x40003c00

080067fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af02      	add	r7, sp, #8
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3320      	adds	r3, #32
 8006812:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006814:	f7fc f9fe 	bl	8002c14 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b01      	cmp	r3, #1
 8006824:	d001      	beq.n	800682a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006826:	2302      	movs	r3, #2
 8006828:	e1d1      	b.n	8006bce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_SPI_Transmit+0x3a>
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e1c9      	b.n	8006bce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_SPI_Transmit+0x4c>
 8006844:	2302      	movs	r3, #2
 8006846:	e1c2      	b.n	8006bce <HAL_SPI_Transmit+0x3d2>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2203      	movs	r2, #3
 8006854:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80068a0:	d108      	bne.n	80068b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e009      	b.n	80068c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80068c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	4b96      	ldr	r3, [pc, #600]	@ (8006b28 <HAL_SPI_Transmit+0x32c>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	88f9      	ldrh	r1, [r7, #6]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	430b      	orrs	r3, r1
 80068da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068f4:	d107      	bne.n	8006906 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b0f      	cmp	r3, #15
 800690c:	d947      	bls.n	800699e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800690e:	e03f      	b.n	8006990 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d114      	bne.n	8006948 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692e:	1d1a      	adds	r2, r3, #4
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006946:	e023      	b.n	8006990 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006948:	f7fc f964 	bl	8002c14 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d803      	bhi.n	8006960 <HAL_SPI_Transmit+0x164>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d102      	bne.n	8006966 <HAL_SPI_Transmit+0x16a>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d114      	bne.n	8006990 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fe98 	bl	800769c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006972:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e11e      	b.n	8006bce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1b9      	bne.n	8006910 <HAL_SPI_Transmit+0x114>
 800699c:	e0f1      	b.n	8006b82 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b07      	cmp	r3, #7
 80069a4:	f240 80e6 	bls.w	8006b74 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80069a8:	e05d      	b.n	8006a66 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d132      	bne.n	8006a1e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d918      	bls.n	80069f6 <HAL_SPI_Transmit+0x1fa>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d014      	beq.n	80069f6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069dc:	1d1a      	adds	r2, r3, #4
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b02      	subs	r3, #2
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069f4:	e037      	b.n	8006a66 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fa:	881a      	ldrh	r2, [r3, #0]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a04:	1c9a      	adds	r2, r3, #2
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006a1c:	e023      	b.n	8006a66 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1e:	f7fc f8f9 	bl	8002c14 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d803      	bhi.n	8006a36 <HAL_SPI_Transmit+0x23a>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d102      	bne.n	8006a3c <HAL_SPI_Transmit+0x240>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d114      	bne.n	8006a66 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fe2d 	bl	800769c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e0b3      	b.n	8006bce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d19b      	bne.n	80069aa <HAL_SPI_Transmit+0x1ae>
 8006a72:	e086      	b.n	8006b82 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d154      	bne.n	8006b2c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d918      	bls.n	8006ac0 <HAL_SPI_Transmit+0x2c4>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a92:	2b40      	cmp	r3, #64	@ 0x40
 8006a94:	d914      	bls.n	8006ac0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa6:	1d1a      	adds	r2, r3, #4
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b04      	subs	r3, #4
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006abe:	e059      	b.n	8006b74 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d917      	bls.n	8006afc <HAL_SPI_Transmit+0x300>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d013      	beq.n	8006afc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad8:	881a      	ldrh	r2, [r3, #0]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae2:	1c9a      	adds	r2, r3, #2
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b02      	subs	r3, #2
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006afa:	e03b      	b.n	8006b74 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3320      	adds	r3, #32
 8006b06:	7812      	ldrb	r2, [r2, #0]
 8006b08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b26:	e025      	b.n	8006b74 <HAL_SPI_Transmit+0x378>
 8006b28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b2c:	f7fc f872 	bl	8002c14 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d803      	bhi.n	8006b44 <HAL_SPI_Transmit+0x348>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d102      	bne.n	8006b4a <HAL_SPI_Transmit+0x34e>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d114      	bne.n	8006b74 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fda6 	bl	800769c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e02c      	b.n	8006bce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f47f af79 	bne.w	8006a74 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2108      	movs	r1, #8
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 fe25 	bl	80077dc <SPI_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b9e:	f043 0220 	orr.w	r2, r3, #32
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fd77 	bl	800769c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e000      	b.n	8006bce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop

08006bd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08e      	sub	sp, #56	@ 0x38
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3320      	adds	r3, #32
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3330      	adds	r3, #48	@ 0x30
 8006bf4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	3301      	adds	r3, #1
 8006c00:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c02:	f7fc f807 	bl	8002c14 <HAL_GetTick>
 8006c06:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006c08:	887b      	ldrh	r3, [r7, #2]
 8006c0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d001      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e310      	b.n	8007242 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_SPI_TransmitReceive+0x5a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_SPI_TransmitReceive+0x5a>
 8006c2c:	887b      	ldrh	r3, [r7, #2]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e305      	b.n	8007242 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_SPI_TransmitReceive+0x6c>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e2fe      	b.n	8007242 <HAL_SPI_TransmitReceive+0x66a>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	887a      	ldrh	r2, [r7, #2]
 8006c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	887a      	ldrh	r2, [r7, #2]
 8006c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	887a      	ldrh	r2, [r7, #2]
 8006c7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	887a      	ldrh	r2, [r7, #2]
 8006c84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006ca2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a70      	ldr	r2, [pc, #448]	@ (8006e6c <HAL_SPI_TransmitReceive+0x294>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_SPI_TransmitReceive+0xea>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8006e70 <HAL_SPI_TransmitReceive+0x298>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_SPI_TransmitReceive+0xea>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a6d      	ldr	r2, [pc, #436]	@ (8006e74 <HAL_SPI_TransmitReceive+0x29c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d102      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc6:	e001      	b.n	8006ccc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006cc8:	2308      	movs	r3, #8
 8006cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b69      	ldr	r3, [pc, #420]	@ (8006e78 <HAL_SPI_TransmitReceive+0x2a0>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	8879      	ldrh	r1, [r7, #2]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf8:	d107      	bne.n	8006d0a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b0f      	cmp	r3, #15
 8006d10:	f240 80a2 	bls.w	8006e58 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d16:	089b      	lsrs	r3, r3, #2
 8006d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006d1a:	e094      	b.n	8006e46 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d120      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x194>
 8006d2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01d      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006d30:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006d32:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d36:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d217      	bcs.n	8006d6c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d4c:	1d1a      	adds	r2, r3, #4
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006d74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d065      	beq.n	8006e46 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d118      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d92:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d98:	1d1a      	adds	r2, r3, #4
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006db6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006db8:	e045      	b.n	8006e46 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006dba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006dbc:	8bfb      	ldrh	r3, [r7, #30]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d21d      	bcs.n	8006dfe <HAL_SPI_TransmitReceive+0x226>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d018      	beq.n	8006dfe <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006dd6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006dfc:	e023      	b.n	8006e46 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dfe:	f7fb ff09 	bl	8002c14 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d803      	bhi.n	8006e16 <HAL_SPI_TransmitReceive+0x23e>
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d102      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x244>
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d114      	bne.n	8006e46 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fc3d 	bl	800769c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e1fd      	b.n	8007242 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f af67 	bne.w	8006d1c <HAL_SPI_TransmitReceive+0x144>
 8006e4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f af63 	bne.w	8006d1c <HAL_SPI_TransmitReceive+0x144>
 8006e56:	e1ce      	b.n	80071f6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	2b07      	cmp	r3, #7
 8006e5e:	f240 81c2 	bls.w	80071e6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e64:	085b      	lsrs	r3, r3, #1
 8006e66:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e68:	e0c9      	b.n	8006ffe <HAL_SPI_TransmitReceive+0x426>
 8006e6a:	bf00      	nop
 8006e6c:	40013000 	.word	0x40013000
 8006e70:	40003800 	.word	0x40003800
 8006e74:	40003c00 	.word	0x40003c00
 8006e78:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d11f      	bne.n	8006eca <HAL_SPI_TransmitReceive+0x2f2>
 8006e8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01c      	beq.n	8006eca <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006e90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006e92:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d216      	bcs.n	8006eca <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ec8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006ed2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8092 	beq.w	8006ffe <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d118      	bne.n	8006f1a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	8812      	ldrh	r2, [r2, #0]
 8006ef0:	b292      	uxth	r2, r2
 8006ef2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef8:	1c9a      	adds	r2, r3, #2
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f16:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f18:	e071      	b.n	8006ffe <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006f1a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006f1c:	8bfb      	ldrh	r3, [r7, #30]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d228      	bcs.n	8006f74 <HAL_SPI_TransmitReceive+0x39c>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d023      	beq.n	8006f74 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f30:	6a3a      	ldr	r2, [r7, #32]
 8006f32:	8812      	ldrh	r2, [r2, #0]
 8006f34:	b292      	uxth	r2, r2
 8006f36:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	8812      	ldrh	r2, [r2, #0]
 8006f4a:	b292      	uxth	r2, r2
 8006f4c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	3b02      	subs	r3, #2
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f70:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f72:	e044      	b.n	8006ffe <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006f74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d11d      	bne.n	8006fb6 <HAL_SPI_TransmitReceive+0x3de>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d018      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	8812      	ldrh	r2, [r2, #0]
 8006f8c:	b292      	uxth	r2, r2
 8006f8e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fb4:	e023      	b.n	8006ffe <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb6:	f7fb fe2d 	bl	8002c14 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d803      	bhi.n	8006fce <HAL_SPI_TransmitReceive+0x3f6>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x3fc>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d114      	bne.n	8006ffe <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 fb61 	bl	800769c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fe0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e121      	b.n	8007242 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ffe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007000:	2b00      	cmp	r3, #0
 8007002:	f47f af3b 	bne.w	8006e7c <HAL_SPI_TransmitReceive+0x2a4>
 8007006:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	f47f af37 	bne.w	8006e7c <HAL_SPI_TransmitReceive+0x2a4>
 800700e:	e0f2      	b.n	80071f6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b02      	cmp	r3, #2
 800701c:	d121      	bne.n	8007062 <HAL_SPI_TransmitReceive+0x48a>
 800701e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01e      	beq.n	8007062 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007024:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007026:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800702c:	429a      	cmp	r2, r3
 800702e:	d218      	bcs.n	8007062 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3320      	adds	r3, #32
 800703a:	7812      	ldrb	r2, [r2, #0]
 800703c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007060:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800706a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80ba 	beq.w	80071e6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d11b      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070b4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070b6:	e096      	b.n	80071e6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80070b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80070ba:	8bfb      	ldrh	r3, [r7, #30]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d24a      	bcs.n	8007156 <HAL_SPI_TransmitReceive+0x57e>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d045      	beq.n	8007156 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070f2:	7812      	ldrb	r2, [r2, #0]
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800710e:	7812      	ldrb	r2, [r2, #0]
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800712a:	7812      	ldrb	r2, [r2, #0]
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b04      	subs	r3, #4
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007152:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007154:	e047      	b.n	80071e6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007156:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007158:	2b03      	cmp	r3, #3
 800715a:	d820      	bhi.n	800719e <HAL_SPI_TransmitReceive+0x5c6>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01b      	beq.n	800719e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800719a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800719c:	e023      	b.n	80071e6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800719e:	f7fb fd39 	bl	8002c14 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d803      	bhi.n	80071b6 <HAL_SPI_TransmitReceive+0x5de>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d102      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x5e4>
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d114      	bne.n	80071e6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fa6d 	bl	800769c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e02d      	b.n	8007242 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80071e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f47f af11 	bne.w	8007010 <HAL_SPI_TransmitReceive+0x438>
 80071ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f af0d 	bne.w	8007010 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	2200      	movs	r2, #0
 80071fe:	2108      	movs	r1, #8
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 faeb 	bl	80077dc <SPI_WaitOnFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fa3d 	bl	800769c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007240:	2300      	movs	r3, #0
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3730      	adds	r7, #48	@ 0x30
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop

0800724c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	@ 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007264:	6a3a      	ldr	r2, [r7, #32]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4013      	ands	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007274:	2300      	movs	r3, #0
 8007276:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800727e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3330      	adds	r3, #48	@ 0x30
 8007286:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800728e:	2b00      	cmp	r3, #0
 8007290:	d010      	beq.n	80072b4 <HAL_SPI_IRQHandler+0x68>
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00b      	beq.n	80072b4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072aa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f9c3 	bl	8007638 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80072b2:	e192      	b.n	80075da <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d113      	bne.n	80072e6 <HAL_SPI_IRQHandler+0x9a>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10e      	bne.n	80072e6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
    handled = 1UL;
 80072e2:	2301      	movs	r3, #1
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10f      	bne.n	8007310 <HAL_SPI_IRQHandler+0xc4>
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4798      	blx	r3
    handled = 1UL;
 800730c:	2301      	movs	r3, #1
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10f      	bne.n	800733a <HAL_SPI_IRQHandler+0xee>
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800732a:	2b00      	cmp	r3, #0
 800732c:	d105      	bne.n	800733a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
    handled = 1UL;
 8007336:	2301      	movs	r3, #1
 8007338:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 8147 	bne.w	80075d0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 808b 	beq.w	8007464 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0208 	orr.w	r2, r2, #8
 800735c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0210 	orr.w	r2, r2, #16
 800736c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699a      	ldr	r2, [r3, #24]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800737c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0208 	bic.w	r2, r2, #8
 800738c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d13d      	bne.n	8007418 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800739c:	e036      	b.n	800740c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d90b      	bls.n	80073be <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80073b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b6:	1d1a      	adds	r2, r3, #4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	665a      	str	r2, [r3, #100]	@ 0x64
 80073bc:	e01d      	b.n	80073fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b07      	cmp	r3, #7
 80073c4:	d90b      	bls.n	80073de <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	b292      	uxth	r2, r2
 80073d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d6:	1c9a      	adds	r2, r3, #2
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	665a      	str	r2, [r3, #100]	@ 0x64
 80073dc:	e00d      	b.n	80073fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1c2      	bne.n	800739e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f93f 	bl	800769c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8f7 	bl	8007624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007436:	e0d0      	b.n	80075da <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007438:	7cfb      	ldrb	r3, [r7, #19]
 800743a:	2b05      	cmp	r3, #5
 800743c:	d103      	bne.n	8007446 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f8e6 	bl	8007610 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007444:	e0c6      	b.n	80075d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007446:	7cfb      	ldrb	r3, [r7, #19]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d103      	bne.n	8007454 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8d5 	bl	80075fc <HAL_SPI_RxCpltCallback>
    return;
 8007452:	e0bf      	b.n	80075d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007454:	7cfb      	ldrb	r3, [r7, #19]
 8007456:	2b03      	cmp	r3, #3
 8007458:	f040 80bc 	bne.w	80075d4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8c3 	bl	80075e8 <HAL_SPI_TxCpltCallback>
    return;
 8007462:	e0b7      	b.n	80075d4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80b5 	beq.w	80075da <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00f      	beq.n	800749a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007480:	f043 0204 	orr.w	r2, r3, #4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699a      	ldr	r2, [r3, #24]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007498:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00f      	beq.n	80074c4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074aa:	f043 0201 	orr.w	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00f      	beq.n	80074ee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d4:	f043 0208 	orr.w	r2, r3, #8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	699a      	ldr	r2, [r3, #24]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00f      	beq.n	8007518 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0220 	orr.w	r2, r2, #32
 8007516:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800751e:	2b00      	cmp	r3, #0
 8007520:	d05a      	beq.n	80075d8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6919      	ldr	r1, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b28      	ldr	r3, [pc, #160]	@ (80075e0 <HAL_SPI_IRQHandler+0x394>)
 800753e:	400b      	ands	r3, r1
 8007540:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007548:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800754c:	d138      	bne.n	80075c0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800755c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d013      	beq.n	800758e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800756a:	4a1e      	ldr	r2, [pc, #120]	@ (80075e4 <HAL_SPI_IRQHandler+0x398>)
 800756c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007572:	4618      	mov	r0, r3
 8007574:	f7fb fd12 	bl	8002f9c <HAL_DMA_Abort_IT>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007584:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007592:	2b00      	cmp	r3, #0
 8007594:	d020      	beq.n	80075d8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800759a:	4a12      	ldr	r2, [pc, #72]	@ (80075e4 <HAL_SPI_IRQHandler+0x398>)
 800759c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fb fcfa 	bl	8002f9c <HAL_DMA_Abort_IT>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d014      	beq.n	80075d8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80075be:	e00b      	b.n	80075d8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f82b 	bl	8007624 <HAL_SPI_ErrorCallback>
    return;
 80075ce:	e003      	b.n	80075d8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80075d0:	bf00      	nop
 80075d2:	e002      	b.n	80075da <HAL_SPI_IRQHandler+0x38e>
    return;
 80075d4:	bf00      	nop
 80075d6:	e000      	b.n	80075da <HAL_SPI_IRQHandler+0x38e>
    return;
 80075d8:	bf00      	nop
  }
}
 80075da:	3728      	adds	r7, #40	@ 0x28
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	fffffc94 	.word	0xfffffc94
 80075e4:	08007669 	.word	0x08007669

080075e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800765a:	b2db      	uxtb	r3, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff ffc8 	bl	8007624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0208 	orr.w	r2, r2, #8
 80076ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0210 	orr.w	r2, r2, #16
 80076ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6919      	ldr	r1, [r3, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4b3c      	ldr	r3, [pc, #240]	@ (80077d8 <SPI_CloseTransfer+0x13c>)
 80076e8:	400b      	ands	r3, r1
 80076ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80076fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b04      	cmp	r3, #4
 8007706:	d014      	beq.n	8007732 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00f      	beq.n	8007732 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007718:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699a      	ldr	r2, [r3, #24]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0220 	orr.w	r2, r2, #32
 8007730:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d014      	beq.n	8007768 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00f      	beq.n	8007768 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800774e:	f043 0204 	orr.w	r2, r3, #4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007766:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00f      	beq.n	8007792 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007778:	f043 0201 	orr.w	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007790:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00f      	beq.n	80077bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a2:	f043 0208 	orr.w	r2, r3, #8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	fffffc90 	.word	0xfffffc90

080077dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	4613      	mov	r3, r2
 80077ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80077ec:	e010      	b.n	8007810 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ee:	f7fb fa11 	bl	8002c14 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d803      	bhi.n	8007806 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d102      	bne.n	800780c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e00f      	b.n	8007830 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695a      	ldr	r2, [r3, #20]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4013      	ands	r3, r2
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	429a      	cmp	r2, r3
 800781e:	bf0c      	ite	eq
 8007820:	2301      	moveq	r3, #1
 8007822:	2300      	movne	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	429a      	cmp	r2, r3
 800782c:	d0df      	beq.n	80077ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	3307      	adds	r3, #7
 8007856:	08db      	lsrs	r3, r3, #3
 8007858:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e042      	b.n	8007906 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f83b 	bl	800790e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2224      	movs	r2, #36	@ 0x24
 800789c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fe29 	bl	8008510 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f8be 	bl	8007a40 <UART_SetConfig>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e01b      	b.n	8007906 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fea8 	bl	8008654 <UART_CheckIdleState>
 8007904:	4603      	mov	r3, r0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b08a      	sub	sp, #40	@ 0x28
 8007926:	af02      	add	r7, sp, #8
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007938:	2b20      	cmp	r3, #32
 800793a:	d17b      	bne.n	8007a34 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_UART_Transmit+0x26>
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e074      	b.n	8007a36 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2221      	movs	r2, #33	@ 0x21
 8007958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800795c:	f7fb f95a 	bl	8002c14 <HAL_GetTick>
 8007960:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797a:	d108      	bne.n	800798e <HAL_UART_Transmit+0x6c>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	e003      	b.n	8007996 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007996:	e030      	b.n	80079fa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	2180      	movs	r1, #128	@ 0x80
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 ff00 	bl	80087a8 <UART_WaitOnFlagUntilTimeout>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e03d      	b.n	8007a36 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	3302      	adds	r3, #2
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	e007      	b.n	80079e8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	3301      	adds	r3, #1
 80079e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1c8      	bne.n	8007998 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2140      	movs	r1, #64	@ 0x40
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fec9 	bl	80087a8 <UART_WaitOnFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e006      	b.n	8007a36 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e000      	b.n	8007a36 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a44:	b092      	sub	sp, #72	@ 0x48
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	4bbe      	ldr	r3, [pc, #760]	@ (8007d68 <UART_SetConfig+0x328>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4ab3      	ldr	r2, [pc, #716]	@ (8007d6c <UART_SetConfig+0x32c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	4baf      	ldr	r3, [pc, #700]	@ (8007d70 <UART_SetConfig+0x330>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	f023 010f 	bic.w	r1, r3, #15
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4aa6      	ldr	r2, [pc, #664]	@ (8007d74 <UART_SetConfig+0x334>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d177      	bne.n	8007bd0 <UART_SetConfig+0x190>
 8007ae0:	4ba5      	ldr	r3, [pc, #660]	@ (8007d78 <UART_SetConfig+0x338>)
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ae8:	2b28      	cmp	r3, #40	@ 0x28
 8007aea:	d86d      	bhi.n	8007bc8 <UART_SetConfig+0x188>
 8007aec:	a201      	add	r2, pc, #4	@ (adr r2, 8007af4 <UART_SetConfig+0xb4>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b99 	.word	0x08007b99
 8007af8:	08007bc9 	.word	0x08007bc9
 8007afc:	08007bc9 	.word	0x08007bc9
 8007b00:	08007bc9 	.word	0x08007bc9
 8007b04:	08007bc9 	.word	0x08007bc9
 8007b08:	08007bc9 	.word	0x08007bc9
 8007b0c:	08007bc9 	.word	0x08007bc9
 8007b10:	08007bc9 	.word	0x08007bc9
 8007b14:	08007ba1 	.word	0x08007ba1
 8007b18:	08007bc9 	.word	0x08007bc9
 8007b1c:	08007bc9 	.word	0x08007bc9
 8007b20:	08007bc9 	.word	0x08007bc9
 8007b24:	08007bc9 	.word	0x08007bc9
 8007b28:	08007bc9 	.word	0x08007bc9
 8007b2c:	08007bc9 	.word	0x08007bc9
 8007b30:	08007bc9 	.word	0x08007bc9
 8007b34:	08007ba9 	.word	0x08007ba9
 8007b38:	08007bc9 	.word	0x08007bc9
 8007b3c:	08007bc9 	.word	0x08007bc9
 8007b40:	08007bc9 	.word	0x08007bc9
 8007b44:	08007bc9 	.word	0x08007bc9
 8007b48:	08007bc9 	.word	0x08007bc9
 8007b4c:	08007bc9 	.word	0x08007bc9
 8007b50:	08007bc9 	.word	0x08007bc9
 8007b54:	08007bb1 	.word	0x08007bb1
 8007b58:	08007bc9 	.word	0x08007bc9
 8007b5c:	08007bc9 	.word	0x08007bc9
 8007b60:	08007bc9 	.word	0x08007bc9
 8007b64:	08007bc9 	.word	0x08007bc9
 8007b68:	08007bc9 	.word	0x08007bc9
 8007b6c:	08007bc9 	.word	0x08007bc9
 8007b70:	08007bc9 	.word	0x08007bc9
 8007b74:	08007bb9 	.word	0x08007bb9
 8007b78:	08007bc9 	.word	0x08007bc9
 8007b7c:	08007bc9 	.word	0x08007bc9
 8007b80:	08007bc9 	.word	0x08007bc9
 8007b84:	08007bc9 	.word	0x08007bc9
 8007b88:	08007bc9 	.word	0x08007bc9
 8007b8c:	08007bc9 	.word	0x08007bc9
 8007b90:	08007bc9 	.word	0x08007bc9
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e222      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e21e      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e21a      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e216      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007bb8:	2320      	movs	r3, #32
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e212      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007bc0:	2340      	movs	r3, #64	@ 0x40
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e20e      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007bc8:	2380      	movs	r3, #128	@ 0x80
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e20a      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a69      	ldr	r2, [pc, #420]	@ (8007d7c <UART_SetConfig+0x33c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d130      	bne.n	8007c3c <UART_SetConfig+0x1fc>
 8007bda:	4b67      	ldr	r3, [pc, #412]	@ (8007d78 <UART_SetConfig+0x338>)
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d826      	bhi.n	8007c34 <UART_SetConfig+0x1f4>
 8007be6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bec <UART_SetConfig+0x1ac>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007c0d 	.word	0x08007c0d
 8007bf4:	08007c15 	.word	0x08007c15
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c2d 	.word	0x08007c2d
 8007c04:	2300      	movs	r3, #0
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e1ec      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e1e8      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c14:	2308      	movs	r3, #8
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e1e4      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e1e0      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c24:	2320      	movs	r3, #32
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2a:	e1dc      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c2c:	2340      	movs	r3, #64	@ 0x40
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c32:	e1d8      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c34:	2380      	movs	r3, #128	@ 0x80
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3a:	e1d4      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a4f      	ldr	r2, [pc, #316]	@ (8007d80 <UART_SetConfig+0x340>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d130      	bne.n	8007ca8 <UART_SetConfig+0x268>
 8007c46:	4b4c      	ldr	r3, [pc, #304]	@ (8007d78 <UART_SetConfig+0x338>)
 8007c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	2b05      	cmp	r3, #5
 8007c50:	d826      	bhi.n	8007ca0 <UART_SetConfig+0x260>
 8007c52:	a201      	add	r2, pc, #4	@ (adr r2, 8007c58 <UART_SetConfig+0x218>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007c71 	.word	0x08007c71
 8007c5c:	08007c79 	.word	0x08007c79
 8007c60:	08007c81 	.word	0x08007c81
 8007c64:	08007c89 	.word	0x08007c89
 8007c68:	08007c91 	.word	0x08007c91
 8007c6c:	08007c99 	.word	0x08007c99
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e1b6      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e1b2      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c80:	2308      	movs	r3, #8
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e1ae      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e1aa      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c90:	2320      	movs	r3, #32
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e1a6      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007c98:	2340      	movs	r3, #64	@ 0x40
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e1a2      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e19e      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a35      	ldr	r2, [pc, #212]	@ (8007d84 <UART_SetConfig+0x344>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d130      	bne.n	8007d14 <UART_SetConfig+0x2d4>
 8007cb2:	4b31      	ldr	r3, [pc, #196]	@ (8007d78 <UART_SetConfig+0x338>)
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	d826      	bhi.n	8007d0c <UART_SetConfig+0x2cc>
 8007cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc4 <UART_SetConfig+0x284>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007cdd 	.word	0x08007cdd
 8007cc8:	08007ce5 	.word	0x08007ce5
 8007ccc:	08007ced 	.word	0x08007ced
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cfd 	.word	0x08007cfd
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e180      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e17c      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007cec:	2308      	movs	r3, #8
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e178      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e174      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007cfc:	2320      	movs	r3, #32
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e170      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d04:	2340      	movs	r3, #64	@ 0x40
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e16c      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d0c:	2380      	movs	r3, #128	@ 0x80
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e168      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1b      	ldr	r2, [pc, #108]	@ (8007d88 <UART_SetConfig+0x348>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d142      	bne.n	8007da4 <UART_SetConfig+0x364>
 8007d1e:	4b16      	ldr	r3, [pc, #88]	@ (8007d78 <UART_SetConfig+0x338>)
 8007d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d838      	bhi.n	8007d9c <UART_SetConfig+0x35c>
 8007d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <UART_SetConfig+0x2f0>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d51 	.word	0x08007d51
 8007d38:	08007d59 	.word	0x08007d59
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d8d 	.word	0x08007d8d
 8007d44:	08007d95 	.word	0x08007d95
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e14a      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e146      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e142      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e13e      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d68:	cfff69f3 	.word	0xcfff69f3
 8007d6c:	58000c00 	.word	0x58000c00
 8007d70:	11fff4ff 	.word	0x11fff4ff
 8007d74:	40011000 	.word	0x40011000
 8007d78:	58024400 	.word	0x58024400
 8007d7c:	40004400 	.word	0x40004400
 8007d80:	40004800 	.word	0x40004800
 8007d84:	40004c00 	.word	0x40004c00
 8007d88:	40005000 	.word	0x40005000
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e128      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d94:	2340      	movs	r3, #64	@ 0x40
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e124      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007d9c:	2380      	movs	r3, #128	@ 0x80
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e120      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4acb      	ldr	r2, [pc, #812]	@ (80080d8 <UART_SetConfig+0x698>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d176      	bne.n	8007e9c <UART_SetConfig+0x45c>
 8007dae:	4bcb      	ldr	r3, [pc, #812]	@ (80080dc <UART_SetConfig+0x69c>)
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007db6:	2b28      	cmp	r3, #40	@ 0x28
 8007db8:	d86c      	bhi.n	8007e94 <UART_SetConfig+0x454>
 8007dba:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc0 <UART_SetConfig+0x380>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007e65 	.word	0x08007e65
 8007dc4:	08007e95 	.word	0x08007e95
 8007dc8:	08007e95 	.word	0x08007e95
 8007dcc:	08007e95 	.word	0x08007e95
 8007dd0:	08007e95 	.word	0x08007e95
 8007dd4:	08007e95 	.word	0x08007e95
 8007dd8:	08007e95 	.word	0x08007e95
 8007ddc:	08007e95 	.word	0x08007e95
 8007de0:	08007e6d 	.word	0x08007e6d
 8007de4:	08007e95 	.word	0x08007e95
 8007de8:	08007e95 	.word	0x08007e95
 8007dec:	08007e95 	.word	0x08007e95
 8007df0:	08007e95 	.word	0x08007e95
 8007df4:	08007e95 	.word	0x08007e95
 8007df8:	08007e95 	.word	0x08007e95
 8007dfc:	08007e95 	.word	0x08007e95
 8007e00:	08007e75 	.word	0x08007e75
 8007e04:	08007e95 	.word	0x08007e95
 8007e08:	08007e95 	.word	0x08007e95
 8007e0c:	08007e95 	.word	0x08007e95
 8007e10:	08007e95 	.word	0x08007e95
 8007e14:	08007e95 	.word	0x08007e95
 8007e18:	08007e95 	.word	0x08007e95
 8007e1c:	08007e95 	.word	0x08007e95
 8007e20:	08007e7d 	.word	0x08007e7d
 8007e24:	08007e95 	.word	0x08007e95
 8007e28:	08007e95 	.word	0x08007e95
 8007e2c:	08007e95 	.word	0x08007e95
 8007e30:	08007e95 	.word	0x08007e95
 8007e34:	08007e95 	.word	0x08007e95
 8007e38:	08007e95 	.word	0x08007e95
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	08007e85 	.word	0x08007e85
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007e95 	.word	0x08007e95
 8007e4c:	08007e95 	.word	0x08007e95
 8007e50:	08007e95 	.word	0x08007e95
 8007e54:	08007e95 	.word	0x08007e95
 8007e58:	08007e95 	.word	0x08007e95
 8007e5c:	08007e95 	.word	0x08007e95
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e0bc      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007e6c:	2304      	movs	r3, #4
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e0b8      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007e74:	2308      	movs	r3, #8
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e0b4      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007e7c:	2310      	movs	r3, #16
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e0b0      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007e84:	2320      	movs	r3, #32
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8a:	e0ac      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007e8c:	2340      	movs	r3, #64	@ 0x40
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e92:	e0a8      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007e94:	2380      	movs	r3, #128	@ 0x80
 8007e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9a:	e0a4      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a8f      	ldr	r2, [pc, #572]	@ (80080e0 <UART_SetConfig+0x6a0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d130      	bne.n	8007f08 <UART_SetConfig+0x4c8>
 8007ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80080dc <UART_SetConfig+0x69c>)
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d826      	bhi.n	8007f00 <UART_SetConfig+0x4c0>
 8007eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <UART_SetConfig+0x478>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007ed1 	.word	0x08007ed1
 8007ebc:	08007ed9 	.word	0x08007ed9
 8007ec0:	08007ee1 	.word	0x08007ee1
 8007ec4:	08007ee9 	.word	0x08007ee9
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef9 	.word	0x08007ef9
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed6:	e086      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ede:	e082      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee6:	e07e      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e07a      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef6:	e076      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007ef8:	2340      	movs	r3, #64	@ 0x40
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efe:	e072      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f00:	2380      	movs	r3, #128	@ 0x80
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f06:	e06e      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a75      	ldr	r2, [pc, #468]	@ (80080e4 <UART_SetConfig+0x6a4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d130      	bne.n	8007f74 <UART_SetConfig+0x534>
 8007f12:	4b72      	ldr	r3, [pc, #456]	@ (80080dc <UART_SetConfig+0x69c>)
 8007f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d826      	bhi.n	8007f6c <UART_SetConfig+0x52c>
 8007f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f24 <UART_SetConfig+0x4e4>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f3d 	.word	0x08007f3d
 8007f28:	08007f45 	.word	0x08007f45
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f5d 	.word	0x08007f5d
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f42:	e050      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f44:	2304      	movs	r3, #4
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4a:	e04c      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f4c:	2308      	movs	r3, #8
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f52:	e048      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f54:	2310      	movs	r3, #16
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e044      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f5c:	2320      	movs	r3, #32
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f62:	e040      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f64:	2340      	movs	r3, #64	@ 0x40
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6a:	e03c      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f6c:	2380      	movs	r3, #128	@ 0x80
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e038      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a5b      	ldr	r2, [pc, #364]	@ (80080e8 <UART_SetConfig+0x6a8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d130      	bne.n	8007fe0 <UART_SetConfig+0x5a0>
 8007f7e:	4b57      	ldr	r3, [pc, #348]	@ (80080dc <UART_SetConfig+0x69c>)
 8007f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d826      	bhi.n	8007fd8 <UART_SetConfig+0x598>
 8007f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f90 <UART_SetConfig+0x550>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fa9 	.word	0x08007fa9
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	08007fb9 	.word	0x08007fb9
 8007f9c:	08007fc1 	.word	0x08007fc1
 8007fa0:	08007fc9 	.word	0x08007fc9
 8007fa4:	08007fd1 	.word	0x08007fd1
 8007fa8:	2302      	movs	r3, #2
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fae:	e01a      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007fb0:	2304      	movs	r3, #4
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb6:	e016      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007fb8:	2308      	movs	r3, #8
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fbe:	e012      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e00e      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007fc8:	2320      	movs	r3, #32
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e00a      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007fd0:	2340      	movs	r3, #64	@ 0x40
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e006      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007fd8:	2380      	movs	r3, #128	@ 0x80
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e002      	b.n	8007fe6 <UART_SetConfig+0x5a6>
 8007fe0:	2380      	movs	r3, #128	@ 0x80
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a3f      	ldr	r2, [pc, #252]	@ (80080e8 <UART_SetConfig+0x6a8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	f040 80f8 	bne.w	80081e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ff2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	dc46      	bgt.n	8008088 <UART_SetConfig+0x648>
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	f2c0 8082 	blt.w	8008104 <UART_SetConfig+0x6c4>
 8008000:	3b02      	subs	r3, #2
 8008002:	2b1e      	cmp	r3, #30
 8008004:	d87e      	bhi.n	8008104 <UART_SetConfig+0x6c4>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <UART_SetConfig+0x5cc>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	0800808f 	.word	0x0800808f
 8008010:	08008105 	.word	0x08008105
 8008014:	08008097 	.word	0x08008097
 8008018:	08008105 	.word	0x08008105
 800801c:	08008105 	.word	0x08008105
 8008020:	08008105 	.word	0x08008105
 8008024:	080080a7 	.word	0x080080a7
 8008028:	08008105 	.word	0x08008105
 800802c:	08008105 	.word	0x08008105
 8008030:	08008105 	.word	0x08008105
 8008034:	08008105 	.word	0x08008105
 8008038:	08008105 	.word	0x08008105
 800803c:	08008105 	.word	0x08008105
 8008040:	08008105 	.word	0x08008105
 8008044:	080080b7 	.word	0x080080b7
 8008048:	08008105 	.word	0x08008105
 800804c:	08008105 	.word	0x08008105
 8008050:	08008105 	.word	0x08008105
 8008054:	08008105 	.word	0x08008105
 8008058:	08008105 	.word	0x08008105
 800805c:	08008105 	.word	0x08008105
 8008060:	08008105 	.word	0x08008105
 8008064:	08008105 	.word	0x08008105
 8008068:	08008105 	.word	0x08008105
 800806c:	08008105 	.word	0x08008105
 8008070:	08008105 	.word	0x08008105
 8008074:	08008105 	.word	0x08008105
 8008078:	08008105 	.word	0x08008105
 800807c:	08008105 	.word	0x08008105
 8008080:	08008105 	.word	0x08008105
 8008084:	080080f7 	.word	0x080080f7
 8008088:	2b40      	cmp	r3, #64	@ 0x40
 800808a:	d037      	beq.n	80080fc <UART_SetConfig+0x6bc>
 800808c:	e03a      	b.n	8008104 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800808e:	f7fd fe6f 	bl	8005d70 <HAL_RCCEx_GetD3PCLK1Freq>
 8008092:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008094:	e03c      	b.n	8008110 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd fe7e 	bl	8005d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a4:	e034      	b.n	8008110 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080a6:	f107 0318 	add.w	r3, r7, #24
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fd ffca 	bl	8006044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b4:	e02c      	b.n	8008110 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080b6:	4b09      	ldr	r3, [pc, #36]	@ (80080dc <UART_SetConfig+0x69c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d016      	beq.n	80080f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080c2:	4b06      	ldr	r3, [pc, #24]	@ (80080dc <UART_SetConfig+0x69c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	08db      	lsrs	r3, r3, #3
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	4a07      	ldr	r2, [pc, #28]	@ (80080ec <UART_SetConfig+0x6ac>)
 80080ce:	fa22 f303 	lsr.w	r3, r2, r3
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080d4:	e01c      	b.n	8008110 <UART_SetConfig+0x6d0>
 80080d6:	bf00      	nop
 80080d8:	40011400 	.word	0x40011400
 80080dc:	58024400 	.word	0x58024400
 80080e0:	40007800 	.word	0x40007800
 80080e4:	40007c00 	.word	0x40007c00
 80080e8:	58000c00 	.word	0x58000c00
 80080ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80080f0:	4b9d      	ldr	r3, [pc, #628]	@ (8008368 <UART_SetConfig+0x928>)
 80080f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f4:	e00c      	b.n	8008110 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080f6:	4b9d      	ldr	r3, [pc, #628]	@ (800836c <UART_SetConfig+0x92c>)
 80080f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080fa:	e009      	b.n	8008110 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008102:	e005      	b.n	8008110 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800810e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 81de 	beq.w	80084d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811c:	4a94      	ldr	r2, [pc, #592]	@ (8008370 <UART_SetConfig+0x930>)
 800811e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008122:	461a      	mov	r2, r3
 8008124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008126:	fbb3 f3f2 	udiv	r3, r3, r2
 800812a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	4613      	mov	r3, r2
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	4413      	add	r3, r2
 8008136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008138:	429a      	cmp	r2, r3
 800813a:	d305      	bcc.n	8008148 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008144:	429a      	cmp	r2, r3
 8008146:	d903      	bls.n	8008150 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800814e:	e1c1      	b.n	80084d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008152:	2200      	movs	r2, #0
 8008154:	60bb      	str	r3, [r7, #8]
 8008156:	60fa      	str	r2, [r7, #12]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815c:	4a84      	ldr	r2, [pc, #528]	@ (8008370 <UART_SetConfig+0x930>)
 800815e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008162:	b29b      	uxth	r3, r3
 8008164:	2200      	movs	r2, #0
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008172:	f7f8 f905 	bl	8000380 <__aeabi_uldivmod>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	020b      	lsls	r3, r1, #8
 8008188:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800818c:	0202      	lsls	r2, r0, #8
 800818e:	6979      	ldr	r1, [r7, #20]
 8008190:	6849      	ldr	r1, [r1, #4]
 8008192:	0849      	lsrs	r1, r1, #1
 8008194:	2000      	movs	r0, #0
 8008196:	460c      	mov	r4, r1
 8008198:	4605      	mov	r5, r0
 800819a:	eb12 0804 	adds.w	r8, r2, r4
 800819e:	eb43 0905 	adc.w	r9, r3, r5
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	469a      	mov	sl, r3
 80081aa:	4693      	mov	fp, r2
 80081ac:	4652      	mov	r2, sl
 80081ae:	465b      	mov	r3, fp
 80081b0:	4640      	mov	r0, r8
 80081b2:	4649      	mov	r1, r9
 80081b4:	f7f8 f8e4 	bl	8000380 <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4613      	mov	r3, r2
 80081be:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081c6:	d308      	bcc.n	80081da <UART_SetConfig+0x79a>
 80081c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ce:	d204      	bcs.n	80081da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081d6:	60da      	str	r2, [r3, #12]
 80081d8:	e17c      	b.n	80084d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081e0:	e178      	b.n	80084d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081ea:	f040 80c5 	bne.w	8008378 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80081ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	dc48      	bgt.n	8008288 <UART_SetConfig+0x848>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	db7b      	blt.n	80082f2 <UART_SetConfig+0x8b2>
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d879      	bhi.n	80082f2 <UART_SetConfig+0x8b2>
 80081fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <UART_SetConfig+0x7c4>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	0800828f 	.word	0x0800828f
 8008208:	08008297 	.word	0x08008297
 800820c:	080082f3 	.word	0x080082f3
 8008210:	080082f3 	.word	0x080082f3
 8008214:	0800829f 	.word	0x0800829f
 8008218:	080082f3 	.word	0x080082f3
 800821c:	080082f3 	.word	0x080082f3
 8008220:	080082f3 	.word	0x080082f3
 8008224:	080082af 	.word	0x080082af
 8008228:	080082f3 	.word	0x080082f3
 800822c:	080082f3 	.word	0x080082f3
 8008230:	080082f3 	.word	0x080082f3
 8008234:	080082f3 	.word	0x080082f3
 8008238:	080082f3 	.word	0x080082f3
 800823c:	080082f3 	.word	0x080082f3
 8008240:	080082f3 	.word	0x080082f3
 8008244:	080082bf 	.word	0x080082bf
 8008248:	080082f3 	.word	0x080082f3
 800824c:	080082f3 	.word	0x080082f3
 8008250:	080082f3 	.word	0x080082f3
 8008254:	080082f3 	.word	0x080082f3
 8008258:	080082f3 	.word	0x080082f3
 800825c:	080082f3 	.word	0x080082f3
 8008260:	080082f3 	.word	0x080082f3
 8008264:	080082f3 	.word	0x080082f3
 8008268:	080082f3 	.word	0x080082f3
 800826c:	080082f3 	.word	0x080082f3
 8008270:	080082f3 	.word	0x080082f3
 8008274:	080082f3 	.word	0x080082f3
 8008278:	080082f3 	.word	0x080082f3
 800827c:	080082f3 	.word	0x080082f3
 8008280:	080082f3 	.word	0x080082f3
 8008284:	080082e5 	.word	0x080082e5
 8008288:	2b40      	cmp	r3, #64	@ 0x40
 800828a:	d02e      	beq.n	80082ea <UART_SetConfig+0x8aa>
 800828c:	e031      	b.n	80082f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800828e:	f7fc fb39 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8008292:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008294:	e033      	b.n	80082fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008296:	f7fc fb4b 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 800829a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800829c:	e02f      	b.n	80082fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800829e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd fd7a 	bl	8005d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ac:	e027      	b.n	80082fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ae:	f107 0318 	add.w	r3, r7, #24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fd fec6 	bl	8006044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082bc:	e01f      	b.n	80082fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082be:	4b2d      	ldr	r3, [pc, #180]	@ (8008374 <UART_SetConfig+0x934>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082ca:	4b2a      	ldr	r3, [pc, #168]	@ (8008374 <UART_SetConfig+0x934>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	08db      	lsrs	r3, r3, #3
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	4a24      	ldr	r2, [pc, #144]	@ (8008368 <UART_SetConfig+0x928>)
 80082d6:	fa22 f303 	lsr.w	r3, r2, r3
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082dc:	e00f      	b.n	80082fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80082de:	4b22      	ldr	r3, [pc, #136]	@ (8008368 <UART_SetConfig+0x928>)
 80082e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e2:	e00c      	b.n	80082fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082e4:	4b21      	ldr	r3, [pc, #132]	@ (800836c <UART_SetConfig+0x92c>)
 80082e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e8:	e009      	b.n	80082fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082f0:	e005      	b.n	80082fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80e7 	beq.w	80084d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830a:	4a19      	ldr	r2, [pc, #100]	@ (8008370 <UART_SetConfig+0x930>)
 800830c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008310:	461a      	mov	r2, r3
 8008312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008314:	fbb3 f3f2 	udiv	r3, r3, r2
 8008318:	005a      	lsls	r2, r3, #1
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	085b      	lsrs	r3, r3, #1
 8008320:	441a      	add	r2, r3
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	fbb2 f3f3 	udiv	r3, r2, r3
 800832a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	2b0f      	cmp	r3, #15
 8008330:	d916      	bls.n	8008360 <UART_SetConfig+0x920>
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008338:	d212      	bcs.n	8008360 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	b29b      	uxth	r3, r3
 800833e:	f023 030f 	bic.w	r3, r3, #15
 8008342:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	b29a      	uxth	r2, r3
 8008350:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008352:	4313      	orrs	r3, r2
 8008354:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800835c:	60da      	str	r2, [r3, #12]
 800835e:	e0b9      	b.n	80084d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008366:	e0b5      	b.n	80084d4 <UART_SetConfig+0xa94>
 8008368:	03d09000 	.word	0x03d09000
 800836c:	003d0900 	.word	0x003d0900
 8008370:	0800b1d0 	.word	0x0800b1d0
 8008374:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008378:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800837c:	2b20      	cmp	r3, #32
 800837e:	dc49      	bgt.n	8008414 <UART_SetConfig+0x9d4>
 8008380:	2b00      	cmp	r3, #0
 8008382:	db7c      	blt.n	800847e <UART_SetConfig+0xa3e>
 8008384:	2b20      	cmp	r3, #32
 8008386:	d87a      	bhi.n	800847e <UART_SetConfig+0xa3e>
 8008388:	a201      	add	r2, pc, #4	@ (adr r2, 8008390 <UART_SetConfig+0x950>)
 800838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838e:	bf00      	nop
 8008390:	0800841b 	.word	0x0800841b
 8008394:	08008423 	.word	0x08008423
 8008398:	0800847f 	.word	0x0800847f
 800839c:	0800847f 	.word	0x0800847f
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	0800847f 	.word	0x0800847f
 80083a8:	0800847f 	.word	0x0800847f
 80083ac:	0800847f 	.word	0x0800847f
 80083b0:	0800843b 	.word	0x0800843b
 80083b4:	0800847f 	.word	0x0800847f
 80083b8:	0800847f 	.word	0x0800847f
 80083bc:	0800847f 	.word	0x0800847f
 80083c0:	0800847f 	.word	0x0800847f
 80083c4:	0800847f 	.word	0x0800847f
 80083c8:	0800847f 	.word	0x0800847f
 80083cc:	0800847f 	.word	0x0800847f
 80083d0:	0800844b 	.word	0x0800844b
 80083d4:	0800847f 	.word	0x0800847f
 80083d8:	0800847f 	.word	0x0800847f
 80083dc:	0800847f 	.word	0x0800847f
 80083e0:	0800847f 	.word	0x0800847f
 80083e4:	0800847f 	.word	0x0800847f
 80083e8:	0800847f 	.word	0x0800847f
 80083ec:	0800847f 	.word	0x0800847f
 80083f0:	0800847f 	.word	0x0800847f
 80083f4:	0800847f 	.word	0x0800847f
 80083f8:	0800847f 	.word	0x0800847f
 80083fc:	0800847f 	.word	0x0800847f
 8008400:	0800847f 	.word	0x0800847f
 8008404:	0800847f 	.word	0x0800847f
 8008408:	0800847f 	.word	0x0800847f
 800840c:	0800847f 	.word	0x0800847f
 8008410:	08008471 	.word	0x08008471
 8008414:	2b40      	cmp	r3, #64	@ 0x40
 8008416:	d02e      	beq.n	8008476 <UART_SetConfig+0xa36>
 8008418:	e031      	b.n	800847e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800841a:	f7fc fa73 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 800841e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008420:	e033      	b.n	800848a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008422:	f7fc fa85 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 8008426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008428:	e02f      	b.n	800848a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800842e:	4618      	mov	r0, r3
 8008430:	f7fd fcb4 	bl	8005d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008438:	e027      	b.n	800848a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843a:	f107 0318 	add.w	r3, r7, #24
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd fe00 	bl	8006044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e01f      	b.n	800848a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800844a:	4b2d      	ldr	r3, [pc, #180]	@ (8008500 <UART_SetConfig+0xac0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008456:	4b2a      	ldr	r3, [pc, #168]	@ (8008500 <UART_SetConfig+0xac0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	08db      	lsrs	r3, r3, #3
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	4a28      	ldr	r2, [pc, #160]	@ (8008504 <UART_SetConfig+0xac4>)
 8008462:	fa22 f303 	lsr.w	r3, r2, r3
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008468:	e00f      	b.n	800848a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800846a:	4b26      	ldr	r3, [pc, #152]	@ (8008504 <UART_SetConfig+0xac4>)
 800846c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800846e:	e00c      	b.n	800848a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008470:	4b25      	ldr	r3, [pc, #148]	@ (8008508 <UART_SetConfig+0xac8>)
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008474:	e009      	b.n	800848a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800847a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847c:	e005      	b.n	800848a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008488:	bf00      	nop
    }

    if (pclk != 0U)
 800848a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d021      	beq.n	80084d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008494:	4a1d      	ldr	r2, [pc, #116]	@ (800850c <UART_SetConfig+0xacc>)
 8008496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800849a:	461a      	mov	r2, r3
 800849c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849e:	fbb3 f2f2 	udiv	r2, r3, r2
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	441a      	add	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b6:	2b0f      	cmp	r3, #15
 80084b8:	d909      	bls.n	80084ce <UART_SetConfig+0xa8e>
 80084ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084c0:	d205      	bcs.n	80084ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60da      	str	r2, [r3, #12]
 80084cc:	e002      	b.n	80084d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2201      	movs	r2, #1
 80084e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2200      	movs	r2, #0
 80084e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2200      	movs	r2, #0
 80084ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084f0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3748      	adds	r7, #72	@ 0x48
 80084f8:	46bd      	mov	sp, r7
 80084fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084fe:	bf00      	nop
 8008500:	58024400 	.word	0x58024400
 8008504:	03d09000 	.word	0x03d09000
 8008508:	003d0900 	.word	0x003d0900
 800850c:	0800b1d0 	.word	0x0800b1d0

08008510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01a      	beq.n	8008626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800860e:	d10a      	bne.n	8008626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	605a      	str	r2, [r3, #4]
  }
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b098      	sub	sp, #96	@ 0x60
 8008658:	af02      	add	r7, sp, #8
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008664:	f7fa fad6 	bl	8002c14 <HAL_GetTick>
 8008668:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b08      	cmp	r3, #8
 8008676:	d12f      	bne.n	80086d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008678:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008680:	2200      	movs	r2, #0
 8008682:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f88e 	bl	80087a8 <UART_WaitOnFlagUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d022      	beq.n	80086d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80086b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e063      	b.n	80087a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d149      	bne.n	800877a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086ee:	2200      	movs	r2, #0
 80086f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f857 	bl	80087a8 <UART_WaitOnFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d03c      	beq.n	800877a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	623b      	str	r3, [r7, #32]
   return(result);
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800871e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008720:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e6      	bne.n	8008700 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	60fb      	str	r3, [r7, #12]
   return(result);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3308      	adds	r3, #8
 8008750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008752:	61fa      	str	r2, [r7, #28]
 8008754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	69b9      	ldr	r1, [r7, #24]
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	617b      	str	r3, [r7, #20]
   return(result);
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e5      	bne.n	8008732 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e012      	b.n	80087a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3758      	adds	r7, #88	@ 0x58
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b8:	e04f      	b.n	800885a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c0:	d04b      	beq.n	800885a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c2:	f7fa fa27 	bl	8002c14 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d302      	bcc.n	80087d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e04e      	b.n	800887a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d037      	beq.n	800885a <UART_WaitOnFlagUntilTimeout+0xb2>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b80      	cmp	r3, #128	@ 0x80
 80087ee:	d034      	beq.n	800885a <UART_WaitOnFlagUntilTimeout+0xb2>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b40      	cmp	r3, #64	@ 0x40
 80087f4:	d031      	beq.n	800885a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b08      	cmp	r3, #8
 8008802:	d110      	bne.n	8008826 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2208      	movs	r2, #8
 800880a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f839 	bl	8008884 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2208      	movs	r2, #8
 8008816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e029      	b.n	800887a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008834:	d111      	bne.n	800885a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800883e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f81f 	bl	8008884 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e00f      	b.n	800887a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4013      	ands	r3, r2
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	429a      	cmp	r2, r3
 8008868:	bf0c      	ite	eq
 800886a:	2301      	moveq	r3, #1
 800886c:	2300      	movne	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	429a      	cmp	r2, r3
 8008876:	d0a0      	beq.n	80087ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b095      	sub	sp, #84	@ 0x54
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	4b1e      	ldr	r3, [pc, #120]	@ (800894c <UART_EndRxTransfer+0xc8>)
 80088d2:	4013      	ands	r3, r2
 80088d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e5      	bne.n	80088be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d118      	bne.n	800892c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	60bb      	str	r3, [r7, #8]
   return(result);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f023 0310 	bic.w	r3, r3, #16
 800890e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	613b      	str	r3, [r7, #16]
   return(result);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e6      	bne.n	80088fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2220      	movs	r2, #32
 8008930:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008940:	bf00      	nop
 8008942:	3754      	adds	r7, #84	@ 0x54
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	effffffe 	.word	0xeffffffe

08008950 <std>:
 8008950:	2300      	movs	r3, #0
 8008952:	b510      	push	{r4, lr}
 8008954:	4604      	mov	r4, r0
 8008956:	e9c0 3300 	strd	r3, r3, [r0]
 800895a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800895e:	6083      	str	r3, [r0, #8]
 8008960:	8181      	strh	r1, [r0, #12]
 8008962:	6643      	str	r3, [r0, #100]	@ 0x64
 8008964:	81c2      	strh	r2, [r0, #14]
 8008966:	6183      	str	r3, [r0, #24]
 8008968:	4619      	mov	r1, r3
 800896a:	2208      	movs	r2, #8
 800896c:	305c      	adds	r0, #92	@ 0x5c
 800896e:	f000 f906 	bl	8008b7e <memset>
 8008972:	4b0d      	ldr	r3, [pc, #52]	@ (80089a8 <std+0x58>)
 8008974:	6263      	str	r3, [r4, #36]	@ 0x24
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <std+0x5c>)
 8008978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800897a:	4b0d      	ldr	r3, [pc, #52]	@ (80089b0 <std+0x60>)
 800897c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800897e:	4b0d      	ldr	r3, [pc, #52]	@ (80089b4 <std+0x64>)
 8008980:	6323      	str	r3, [r4, #48]	@ 0x30
 8008982:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <std+0x68>)
 8008984:	6224      	str	r4, [r4, #32]
 8008986:	429c      	cmp	r4, r3
 8008988:	d006      	beq.n	8008998 <std+0x48>
 800898a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800898e:	4294      	cmp	r4, r2
 8008990:	d002      	beq.n	8008998 <std+0x48>
 8008992:	33d0      	adds	r3, #208	@ 0xd0
 8008994:	429c      	cmp	r4, r3
 8008996:	d105      	bne.n	80089a4 <std+0x54>
 8008998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800899c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a0:	f000 b966 	b.w	8008c70 <__retarget_lock_init_recursive>
 80089a4:	bd10      	pop	{r4, pc}
 80089a6:	bf00      	nop
 80089a8:	08008af9 	.word	0x08008af9
 80089ac:	08008b1b 	.word	0x08008b1b
 80089b0:	08008b53 	.word	0x08008b53
 80089b4:	08008b77 	.word	0x08008b77
 80089b8:	240001e8 	.word	0x240001e8

080089bc <stdio_exit_handler>:
 80089bc:	4a02      	ldr	r2, [pc, #8]	@ (80089c8 <stdio_exit_handler+0xc>)
 80089be:	4903      	ldr	r1, [pc, #12]	@ (80089cc <stdio_exit_handler+0x10>)
 80089c0:	4803      	ldr	r0, [pc, #12]	@ (80089d0 <stdio_exit_handler+0x14>)
 80089c2:	f000 b869 	b.w	8008a98 <_fwalk_sglue>
 80089c6:	bf00      	nop
 80089c8:	2400002c 	.word	0x2400002c
 80089cc:	0800950d 	.word	0x0800950d
 80089d0:	2400003c 	.word	0x2400003c

080089d4 <cleanup_stdio>:
 80089d4:	6841      	ldr	r1, [r0, #4]
 80089d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a08 <cleanup_stdio+0x34>)
 80089d8:	4299      	cmp	r1, r3
 80089da:	b510      	push	{r4, lr}
 80089dc:	4604      	mov	r4, r0
 80089de:	d001      	beq.n	80089e4 <cleanup_stdio+0x10>
 80089e0:	f000 fd94 	bl	800950c <_fflush_r>
 80089e4:	68a1      	ldr	r1, [r4, #8]
 80089e6:	4b09      	ldr	r3, [pc, #36]	@ (8008a0c <cleanup_stdio+0x38>)
 80089e8:	4299      	cmp	r1, r3
 80089ea:	d002      	beq.n	80089f2 <cleanup_stdio+0x1e>
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fd8d 	bl	800950c <_fflush_r>
 80089f2:	68e1      	ldr	r1, [r4, #12]
 80089f4:	4b06      	ldr	r3, [pc, #24]	@ (8008a10 <cleanup_stdio+0x3c>)
 80089f6:	4299      	cmp	r1, r3
 80089f8:	d004      	beq.n	8008a04 <cleanup_stdio+0x30>
 80089fa:	4620      	mov	r0, r4
 80089fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a00:	f000 bd84 	b.w	800950c <_fflush_r>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	bf00      	nop
 8008a08:	240001e8 	.word	0x240001e8
 8008a0c:	24000250 	.word	0x24000250
 8008a10:	240002b8 	.word	0x240002b8

08008a14 <global_stdio_init.part.0>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4b0b      	ldr	r3, [pc, #44]	@ (8008a44 <global_stdio_init.part.0+0x30>)
 8008a18:	4c0b      	ldr	r4, [pc, #44]	@ (8008a48 <global_stdio_init.part.0+0x34>)
 8008a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a4c <global_stdio_init.part.0+0x38>)
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	2200      	movs	r2, #0
 8008a22:	2104      	movs	r1, #4
 8008a24:	f7ff ff94 	bl	8008950 <std>
 8008a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	2109      	movs	r1, #9
 8008a30:	f7ff ff8e 	bl	8008950 <std>
 8008a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a38:	2202      	movs	r2, #2
 8008a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a3e:	2112      	movs	r1, #18
 8008a40:	f7ff bf86 	b.w	8008950 <std>
 8008a44:	24000320 	.word	0x24000320
 8008a48:	240001e8 	.word	0x240001e8
 8008a4c:	080089bd 	.word	0x080089bd

08008a50 <__sfp_lock_acquire>:
 8008a50:	4801      	ldr	r0, [pc, #4]	@ (8008a58 <__sfp_lock_acquire+0x8>)
 8008a52:	f000 b90e 	b.w	8008c72 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	24000329 	.word	0x24000329

08008a5c <__sfp_lock_release>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	@ (8008a64 <__sfp_lock_release+0x8>)
 8008a5e:	f000 b909 	b.w	8008c74 <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	24000329 	.word	0x24000329

08008a68 <__sinit>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	f7ff fff0 	bl	8008a50 <__sfp_lock_acquire>
 8008a70:	6a23      	ldr	r3, [r4, #32]
 8008a72:	b11b      	cbz	r3, 8008a7c <__sinit+0x14>
 8008a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a78:	f7ff bff0 	b.w	8008a5c <__sfp_lock_release>
 8008a7c:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <__sinit+0x28>)
 8008a7e:	6223      	str	r3, [r4, #32]
 8008a80:	4b04      	ldr	r3, [pc, #16]	@ (8008a94 <__sinit+0x2c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1f5      	bne.n	8008a74 <__sinit+0xc>
 8008a88:	f7ff ffc4 	bl	8008a14 <global_stdio_init.part.0>
 8008a8c:	e7f2      	b.n	8008a74 <__sinit+0xc>
 8008a8e:	bf00      	nop
 8008a90:	080089d5 	.word	0x080089d5
 8008a94:	24000320 	.word	0x24000320

08008a98 <_fwalk_sglue>:
 8008a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	4688      	mov	r8, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8008aac:	d505      	bpl.n	8008aba <_fwalk_sglue+0x22>
 8008aae:	6824      	ldr	r4, [r4, #0]
 8008ab0:	2c00      	cmp	r4, #0
 8008ab2:	d1f7      	bne.n	8008aa4 <_fwalk_sglue+0xc>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d907      	bls.n	8008ad0 <_fwalk_sglue+0x38>
 8008ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	d003      	beq.n	8008ad0 <_fwalk_sglue+0x38>
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4638      	mov	r0, r7
 8008acc:	47c0      	blx	r8
 8008ace:	4306      	orrs	r6, r0
 8008ad0:	3568      	adds	r5, #104	@ 0x68
 8008ad2:	e7e9      	b.n	8008aa8 <_fwalk_sglue+0x10>

08008ad4 <iprintf>:
 8008ad4:	b40f      	push	{r0, r1, r2, r3}
 8008ad6:	b507      	push	{r0, r1, r2, lr}
 8008ad8:	4906      	ldr	r1, [pc, #24]	@ (8008af4 <iprintf+0x20>)
 8008ada:	ab04      	add	r3, sp, #16
 8008adc:	6808      	ldr	r0, [r1, #0]
 8008ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae2:	6881      	ldr	r1, [r0, #8]
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	f000 f9e9 	bl	8008ebc <_vfiprintf_r>
 8008aea:	b003      	add	sp, #12
 8008aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008af0:	b004      	add	sp, #16
 8008af2:	4770      	bx	lr
 8008af4:	24000038 	.word	0x24000038

08008af8 <__sread>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	460c      	mov	r4, r1
 8008afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b00:	f000 f868 	bl	8008bd4 <_read_r>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	bfab      	itete	ge
 8008b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b0c:	181b      	addge	r3, r3, r0
 8008b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b12:	bfac      	ite	ge
 8008b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b16:	81a3      	strhlt	r3, [r4, #12]
 8008b18:	bd10      	pop	{r4, pc}

08008b1a <__swrite>:
 8008b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1e:	461f      	mov	r7, r3
 8008b20:	898b      	ldrh	r3, [r1, #12]
 8008b22:	05db      	lsls	r3, r3, #23
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4616      	mov	r6, r2
 8008b2a:	d505      	bpl.n	8008b38 <__swrite+0x1e>
 8008b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b30:	2302      	movs	r3, #2
 8008b32:	2200      	movs	r2, #0
 8008b34:	f000 f83c 	bl	8008bb0 <_lseek_r>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	4632      	mov	r2, r6
 8008b46:	463b      	mov	r3, r7
 8008b48:	4628      	mov	r0, r5
 8008b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	f000 b853 	b.w	8008bf8 <_write_r>

08008b52 <__sseek>:
 8008b52:	b510      	push	{r4, lr}
 8008b54:	460c      	mov	r4, r1
 8008b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5a:	f000 f829 	bl	8008bb0 <_lseek_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	bf15      	itete	ne
 8008b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b6e:	81a3      	strheq	r3, [r4, #12]
 8008b70:	bf18      	it	ne
 8008b72:	81a3      	strhne	r3, [r4, #12]
 8008b74:	bd10      	pop	{r4, pc}

08008b76 <__sclose>:
 8008b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7a:	f000 b809 	b.w	8008b90 <_close_r>

08008b7e <memset>:
 8008b7e:	4402      	add	r2, r0
 8008b80:	4603      	mov	r3, r0
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d100      	bne.n	8008b88 <memset+0xa>
 8008b86:	4770      	bx	lr
 8008b88:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8c:	e7f9      	b.n	8008b82 <memset+0x4>
	...

08008b90 <_close_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	@ (8008bac <_close_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f9 fc0f 	bl	80023be <_close>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_close_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_close_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	24000324 	.word	0x24000324

08008bb0 <_lseek_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	@ (8008bd0 <_lseek_r+0x20>)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7f9 fc24 	bl	800240c <_lseek>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_lseek_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_lseek_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	24000324 	.word	0x24000324

08008bd4 <_read_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	@ (8008bf4 <_read_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f9 fbb2 	bl	800234c <_read>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_read_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_read_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	24000324 	.word	0x24000324

08008bf8 <_write_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	@ (8008c18 <_write_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7f9 fbbd 	bl	8002386 <_write>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_write_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_write_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	24000324 	.word	0x24000324

08008c1c <__errno>:
 8008c1c:	4b01      	ldr	r3, [pc, #4]	@ (8008c24 <__errno+0x8>)
 8008c1e:	6818      	ldr	r0, [r3, #0]
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	24000038 	.word	0x24000038

08008c28 <__libc_init_array>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8008c60 <__libc_init_array+0x38>)
 8008c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8008c64 <__libc_init_array+0x3c>)
 8008c2e:	1b64      	subs	r4, r4, r5
 8008c30:	10a4      	asrs	r4, r4, #2
 8008c32:	2600      	movs	r6, #0
 8008c34:	42a6      	cmp	r6, r4
 8008c36:	d109      	bne.n	8008c4c <__libc_init_array+0x24>
 8008c38:	4d0b      	ldr	r5, [pc, #44]	@ (8008c68 <__libc_init_array+0x40>)
 8008c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8008c6c <__libc_init_array+0x44>)
 8008c3c:	f000 fdb6 	bl	80097ac <_init>
 8008c40:	1b64      	subs	r4, r4, r5
 8008c42:	10a4      	asrs	r4, r4, #2
 8008c44:	2600      	movs	r6, #0
 8008c46:	42a6      	cmp	r6, r4
 8008c48:	d105      	bne.n	8008c56 <__libc_init_array+0x2e>
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c50:	4798      	blx	r3
 8008c52:	3601      	adds	r6, #1
 8008c54:	e7ee      	b.n	8008c34 <__libc_init_array+0xc>
 8008c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c5a:	4798      	blx	r3
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	e7f2      	b.n	8008c46 <__libc_init_array+0x1e>
 8008c60:	0800b224 	.word	0x0800b224
 8008c64:	0800b224 	.word	0x0800b224
 8008c68:	0800b224 	.word	0x0800b224
 8008c6c:	0800b228 	.word	0x0800b228

08008c70 <__retarget_lock_init_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <__retarget_lock_acquire_recursive>:
 8008c72:	4770      	bx	lr

08008c74 <__retarget_lock_release_recursive>:
 8008c74:	4770      	bx	lr
	...

08008c78 <_free_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	d041      	beq.n	8008d04 <_free_r+0x8c>
 8008c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c84:	1f0c      	subs	r4, r1, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bfb8      	it	lt
 8008c8a:	18e4      	addlt	r4, r4, r3
 8008c8c:	f000 f8e0 	bl	8008e50 <__malloc_lock>
 8008c90:	4a1d      	ldr	r2, [pc, #116]	@ (8008d08 <_free_r+0x90>)
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	b933      	cbnz	r3, 8008ca4 <_free_r+0x2c>
 8008c96:	6063      	str	r3, [r4, #4]
 8008c98:	6014      	str	r4, [r2, #0]
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca0:	f000 b8dc 	b.w	8008e5c <__malloc_unlock>
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	d908      	bls.n	8008cba <_free_r+0x42>
 8008ca8:	6820      	ldr	r0, [r4, #0]
 8008caa:	1821      	adds	r1, r4, r0
 8008cac:	428b      	cmp	r3, r1
 8008cae:	bf01      	itttt	eq
 8008cb0:	6819      	ldreq	r1, [r3, #0]
 8008cb2:	685b      	ldreq	r3, [r3, #4]
 8008cb4:	1809      	addeq	r1, r1, r0
 8008cb6:	6021      	streq	r1, [r4, #0]
 8008cb8:	e7ed      	b.n	8008c96 <_free_r+0x1e>
 8008cba:	461a      	mov	r2, r3
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b10b      	cbz	r3, 8008cc4 <_free_r+0x4c>
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	d9fa      	bls.n	8008cba <_free_r+0x42>
 8008cc4:	6811      	ldr	r1, [r2, #0]
 8008cc6:	1850      	adds	r0, r2, r1
 8008cc8:	42a0      	cmp	r0, r4
 8008cca:	d10b      	bne.n	8008ce4 <_free_r+0x6c>
 8008ccc:	6820      	ldr	r0, [r4, #0]
 8008cce:	4401      	add	r1, r0
 8008cd0:	1850      	adds	r0, r2, r1
 8008cd2:	4283      	cmp	r3, r0
 8008cd4:	6011      	str	r1, [r2, #0]
 8008cd6:	d1e0      	bne.n	8008c9a <_free_r+0x22>
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	6053      	str	r3, [r2, #4]
 8008cde:	4408      	add	r0, r1
 8008ce0:	6010      	str	r0, [r2, #0]
 8008ce2:	e7da      	b.n	8008c9a <_free_r+0x22>
 8008ce4:	d902      	bls.n	8008cec <_free_r+0x74>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	e7d6      	b.n	8008c9a <_free_r+0x22>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	1821      	adds	r1, r4, r0
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	bf04      	itt	eq
 8008cf4:	6819      	ldreq	r1, [r3, #0]
 8008cf6:	685b      	ldreq	r3, [r3, #4]
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	bf04      	itt	eq
 8008cfc:	1809      	addeq	r1, r1, r0
 8008cfe:	6021      	streq	r1, [r4, #0]
 8008d00:	6054      	str	r4, [r2, #4]
 8008d02:	e7ca      	b.n	8008c9a <_free_r+0x22>
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	24000330 	.word	0x24000330

08008d0c <sbrk_aligned>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8008d4c <sbrk_aligned+0x40>)
 8008d10:	460c      	mov	r4, r1
 8008d12:	6831      	ldr	r1, [r6, #0]
 8008d14:	4605      	mov	r5, r0
 8008d16:	b911      	cbnz	r1, 8008d1e <sbrk_aligned+0x12>
 8008d18:	f000 fcb4 	bl	8009684 <_sbrk_r>
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f000 fcaf 	bl	8009684 <_sbrk_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	d103      	bne.n	8008d32 <sbrk_aligned+0x26>
 8008d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d2e:	4620      	mov	r0, r4
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	1cc4      	adds	r4, r0, #3
 8008d34:	f024 0403 	bic.w	r4, r4, #3
 8008d38:	42a0      	cmp	r0, r4
 8008d3a:	d0f8      	beq.n	8008d2e <sbrk_aligned+0x22>
 8008d3c:	1a21      	subs	r1, r4, r0
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f000 fca0 	bl	8009684 <_sbrk_r>
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1f2      	bne.n	8008d2e <sbrk_aligned+0x22>
 8008d48:	e7ef      	b.n	8008d2a <sbrk_aligned+0x1e>
 8008d4a:	bf00      	nop
 8008d4c:	2400032c 	.word	0x2400032c

08008d50 <_malloc_r>:
 8008d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	1ccd      	adds	r5, r1, #3
 8008d56:	f025 0503 	bic.w	r5, r5, #3
 8008d5a:	3508      	adds	r5, #8
 8008d5c:	2d0c      	cmp	r5, #12
 8008d5e:	bf38      	it	cc
 8008d60:	250c      	movcc	r5, #12
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	4606      	mov	r6, r0
 8008d66:	db01      	blt.n	8008d6c <_malloc_r+0x1c>
 8008d68:	42a9      	cmp	r1, r5
 8008d6a:	d904      	bls.n	8008d76 <_malloc_r+0x26>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	6033      	str	r3, [r6, #0]
 8008d70:	2000      	movs	r0, #0
 8008d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e4c <_malloc_r+0xfc>
 8008d7a:	f000 f869 	bl	8008e50 <__malloc_lock>
 8008d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d82:	461c      	mov	r4, r3
 8008d84:	bb44      	cbnz	r4, 8008dd8 <_malloc_r+0x88>
 8008d86:	4629      	mov	r1, r5
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f7ff ffbf 	bl	8008d0c <sbrk_aligned>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	4604      	mov	r4, r0
 8008d92:	d158      	bne.n	8008e46 <_malloc_r+0xf6>
 8008d94:	f8d8 4000 	ldr.w	r4, [r8]
 8008d98:	4627      	mov	r7, r4
 8008d9a:	2f00      	cmp	r7, #0
 8008d9c:	d143      	bne.n	8008e26 <_malloc_r+0xd6>
 8008d9e:	2c00      	cmp	r4, #0
 8008da0:	d04b      	beq.n	8008e3a <_malloc_r+0xea>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	4639      	mov	r1, r7
 8008da6:	4630      	mov	r0, r6
 8008da8:	eb04 0903 	add.w	r9, r4, r3
 8008dac:	f000 fc6a 	bl	8009684 <_sbrk_r>
 8008db0:	4581      	cmp	r9, r0
 8008db2:	d142      	bne.n	8008e3a <_malloc_r+0xea>
 8008db4:	6821      	ldr	r1, [r4, #0]
 8008db6:	1a6d      	subs	r5, r5, r1
 8008db8:	4629      	mov	r1, r5
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff ffa6 	bl	8008d0c <sbrk_aligned>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d03a      	beq.n	8008e3a <_malloc_r+0xea>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	442b      	add	r3, r5
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	f8d8 3000 	ldr.w	r3, [r8]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	bb62      	cbnz	r2, 8008e2c <_malloc_r+0xdc>
 8008dd2:	f8c8 7000 	str.w	r7, [r8]
 8008dd6:	e00f      	b.n	8008df8 <_malloc_r+0xa8>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	1b52      	subs	r2, r2, r5
 8008ddc:	d420      	bmi.n	8008e20 <_malloc_r+0xd0>
 8008dde:	2a0b      	cmp	r2, #11
 8008de0:	d917      	bls.n	8008e12 <_malloc_r+0xc2>
 8008de2:	1961      	adds	r1, r4, r5
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	6025      	str	r5, [r4, #0]
 8008de8:	bf18      	it	ne
 8008dea:	6059      	strne	r1, [r3, #4]
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	bf08      	it	eq
 8008df0:	f8c8 1000 	streq.w	r1, [r8]
 8008df4:	5162      	str	r2, [r4, r5]
 8008df6:	604b      	str	r3, [r1, #4]
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f000 f82f 	bl	8008e5c <__malloc_unlock>
 8008dfe:	f104 000b 	add.w	r0, r4, #11
 8008e02:	1d23      	adds	r3, r4, #4
 8008e04:	f020 0007 	bic.w	r0, r0, #7
 8008e08:	1ac2      	subs	r2, r0, r3
 8008e0a:	bf1c      	itt	ne
 8008e0c:	1a1b      	subne	r3, r3, r0
 8008e0e:	50a3      	strne	r3, [r4, r2]
 8008e10:	e7af      	b.n	8008d72 <_malloc_r+0x22>
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	bf0c      	ite	eq
 8008e18:	f8c8 2000 	streq.w	r2, [r8]
 8008e1c:	605a      	strne	r2, [r3, #4]
 8008e1e:	e7eb      	b.n	8008df8 <_malloc_r+0xa8>
 8008e20:	4623      	mov	r3, r4
 8008e22:	6864      	ldr	r4, [r4, #4]
 8008e24:	e7ae      	b.n	8008d84 <_malloc_r+0x34>
 8008e26:	463c      	mov	r4, r7
 8008e28:	687f      	ldr	r7, [r7, #4]
 8008e2a:	e7b6      	b.n	8008d9a <_malloc_r+0x4a>
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d1fb      	bne.n	8008e2c <_malloc_r+0xdc>
 8008e34:	2300      	movs	r3, #0
 8008e36:	6053      	str	r3, [r2, #4]
 8008e38:	e7de      	b.n	8008df8 <_malloc_r+0xa8>
 8008e3a:	230c      	movs	r3, #12
 8008e3c:	6033      	str	r3, [r6, #0]
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f000 f80c 	bl	8008e5c <__malloc_unlock>
 8008e44:	e794      	b.n	8008d70 <_malloc_r+0x20>
 8008e46:	6005      	str	r5, [r0, #0]
 8008e48:	e7d6      	b.n	8008df8 <_malloc_r+0xa8>
 8008e4a:	bf00      	nop
 8008e4c:	24000330 	.word	0x24000330

08008e50 <__malloc_lock>:
 8008e50:	4801      	ldr	r0, [pc, #4]	@ (8008e58 <__malloc_lock+0x8>)
 8008e52:	f7ff bf0e 	b.w	8008c72 <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	24000328 	.word	0x24000328

08008e5c <__malloc_unlock>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	@ (8008e64 <__malloc_unlock+0x8>)
 8008e5e:	f7ff bf09 	b.w	8008c74 <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	24000328 	.word	0x24000328

08008e68 <__sfputc_r>:
 8008e68:	6893      	ldr	r3, [r2, #8]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	b410      	push	{r4}
 8008e70:	6093      	str	r3, [r2, #8]
 8008e72:	da08      	bge.n	8008e86 <__sfputc_r+0x1e>
 8008e74:	6994      	ldr	r4, [r2, #24]
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	db01      	blt.n	8008e7e <__sfputc_r+0x16>
 8008e7a:	290a      	cmp	r1, #10
 8008e7c:	d103      	bne.n	8008e86 <__sfputc_r+0x1e>
 8008e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e82:	f000 bb6b 	b.w	800955c <__swbuf_r>
 8008e86:	6813      	ldr	r3, [r2, #0]
 8008e88:	1c58      	adds	r0, r3, #1
 8008e8a:	6010      	str	r0, [r2, #0]
 8008e8c:	7019      	strb	r1, [r3, #0]
 8008e8e:	4608      	mov	r0, r1
 8008e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <__sfputs_r>:
 8008e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e98:	4606      	mov	r6, r0
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	18d5      	adds	r5, r2, r3
 8008ea0:	42ac      	cmp	r4, r5
 8008ea2:	d101      	bne.n	8008ea8 <__sfputs_r+0x12>
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e007      	b.n	8008eb8 <__sfputs_r+0x22>
 8008ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eac:	463a      	mov	r2, r7
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ffda 	bl	8008e68 <__sfputc_r>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d1f3      	bne.n	8008ea0 <__sfputs_r+0xa>
 8008eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ebc <_vfiprintf_r>:
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	460d      	mov	r5, r1
 8008ec2:	b09d      	sub	sp, #116	@ 0x74
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	4698      	mov	r8, r3
 8008ec8:	4606      	mov	r6, r0
 8008eca:	b118      	cbz	r0, 8008ed4 <_vfiprintf_r+0x18>
 8008ecc:	6a03      	ldr	r3, [r0, #32]
 8008ece:	b90b      	cbnz	r3, 8008ed4 <_vfiprintf_r+0x18>
 8008ed0:	f7ff fdca 	bl	8008a68 <__sinit>
 8008ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ed6:	07d9      	lsls	r1, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_vfiprintf_r+0x2a>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_vfiprintf_r+0x2a>
 8008ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ee2:	f7ff fec6 	bl	8008c72 <__retarget_lock_acquire_recursive>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	071b      	lsls	r3, r3, #28
 8008eea:	d501      	bpl.n	8008ef0 <_vfiprintf_r+0x34>
 8008eec:	692b      	ldr	r3, [r5, #16]
 8008eee:	b99b      	cbnz	r3, 8008f18 <_vfiprintf_r+0x5c>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 fb70 	bl	80095d8 <__swsetup_r>
 8008ef8:	b170      	cbz	r0, 8008f18 <_vfiprintf_r+0x5c>
 8008efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008efc:	07dc      	lsls	r4, r3, #31
 8008efe:	d504      	bpl.n	8008f0a <_vfiprintf_r+0x4e>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	b01d      	add	sp, #116	@ 0x74
 8008f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	0598      	lsls	r0, r3, #22
 8008f0e:	d4f7      	bmi.n	8008f00 <_vfiprintf_r+0x44>
 8008f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f12:	f7ff feaf 	bl	8008c74 <__retarget_lock_release_recursive>
 8008f16:	e7f3      	b.n	8008f00 <_vfiprintf_r+0x44>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1c:	2320      	movs	r3, #32
 8008f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f26:	2330      	movs	r3, #48	@ 0x30
 8008f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80090d8 <_vfiprintf_r+0x21c>
 8008f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f30:	f04f 0901 	mov.w	r9, #1
 8008f34:	4623      	mov	r3, r4
 8008f36:	469a      	mov	sl, r3
 8008f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f3c:	b10a      	cbz	r2, 8008f42 <_vfiprintf_r+0x86>
 8008f3e:	2a25      	cmp	r2, #37	@ 0x25
 8008f40:	d1f9      	bne.n	8008f36 <_vfiprintf_r+0x7a>
 8008f42:	ebba 0b04 	subs.w	fp, sl, r4
 8008f46:	d00b      	beq.n	8008f60 <_vfiprintf_r+0xa4>
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f7ff ffa1 	bl	8008e96 <__sfputs_r>
 8008f54:	3001      	adds	r0, #1
 8008f56:	f000 80a7 	beq.w	80090a8 <_vfiprintf_r+0x1ec>
 8008f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f5c:	445a      	add	r2, fp
 8008f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f60:	f89a 3000 	ldrb.w	r3, [sl]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 809f 	beq.w	80090a8 <_vfiprintf_r+0x1ec>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f74:	f10a 0a01 	add.w	sl, sl, #1
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f82:	4654      	mov	r4, sl
 8008f84:	2205      	movs	r2, #5
 8008f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8a:	4853      	ldr	r0, [pc, #332]	@ (80090d8 <_vfiprintf_r+0x21c>)
 8008f8c:	f7f7 f9a8 	bl	80002e0 <memchr>
 8008f90:	9a04      	ldr	r2, [sp, #16]
 8008f92:	b9d8      	cbnz	r0, 8008fcc <_vfiprintf_r+0x110>
 8008f94:	06d1      	lsls	r1, r2, #27
 8008f96:	bf44      	itt	mi
 8008f98:	2320      	movmi	r3, #32
 8008f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f9e:	0713      	lsls	r3, r2, #28
 8008fa0:	bf44      	itt	mi
 8008fa2:	232b      	movmi	r3, #43	@ 0x2b
 8008fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fae:	d015      	beq.n	8008fdc <_vfiprintf_r+0x120>
 8008fb0:	9a07      	ldr	r2, [sp, #28]
 8008fb2:	4654      	mov	r4, sl
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f04f 0c0a 	mov.w	ip, #10
 8008fba:	4621      	mov	r1, r4
 8008fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc0:	3b30      	subs	r3, #48	@ 0x30
 8008fc2:	2b09      	cmp	r3, #9
 8008fc4:	d94b      	bls.n	800905e <_vfiprintf_r+0x1a2>
 8008fc6:	b1b0      	cbz	r0, 8008ff6 <_vfiprintf_r+0x13a>
 8008fc8:	9207      	str	r2, [sp, #28]
 8008fca:	e014      	b.n	8008ff6 <_vfiprintf_r+0x13a>
 8008fcc:	eba0 0308 	sub.w	r3, r0, r8
 8008fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	46a2      	mov	sl, r4
 8008fda:	e7d2      	b.n	8008f82 <_vfiprintf_r+0xc6>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	1d19      	adds	r1, r3, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	9103      	str	r1, [sp, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfbb      	ittet	lt
 8008fe8:	425b      	neglt	r3, r3
 8008fea:	f042 0202 	orrlt.w	r2, r2, #2
 8008fee:	9307      	strge	r3, [sp, #28]
 8008ff0:	9307      	strlt	r3, [sp, #28]
 8008ff2:	bfb8      	it	lt
 8008ff4:	9204      	strlt	r2, [sp, #16]
 8008ff6:	7823      	ldrb	r3, [r4, #0]
 8008ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ffa:	d10a      	bne.n	8009012 <_vfiprintf_r+0x156>
 8008ffc:	7863      	ldrb	r3, [r4, #1]
 8008ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009000:	d132      	bne.n	8009068 <_vfiprintf_r+0x1ac>
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	9203      	str	r2, [sp, #12]
 800900a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800900e:	3402      	adds	r4, #2
 8009010:	9305      	str	r3, [sp, #20]
 8009012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090e8 <_vfiprintf_r+0x22c>
 8009016:	7821      	ldrb	r1, [r4, #0]
 8009018:	2203      	movs	r2, #3
 800901a:	4650      	mov	r0, sl
 800901c:	f7f7 f960 	bl	80002e0 <memchr>
 8009020:	b138      	cbz	r0, 8009032 <_vfiprintf_r+0x176>
 8009022:	9b04      	ldr	r3, [sp, #16]
 8009024:	eba0 000a 	sub.w	r0, r0, sl
 8009028:	2240      	movs	r2, #64	@ 0x40
 800902a:	4082      	lsls	r2, r0
 800902c:	4313      	orrs	r3, r2
 800902e:	3401      	adds	r4, #1
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009036:	4829      	ldr	r0, [pc, #164]	@ (80090dc <_vfiprintf_r+0x220>)
 8009038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800903c:	2206      	movs	r2, #6
 800903e:	f7f7 f94f 	bl	80002e0 <memchr>
 8009042:	2800      	cmp	r0, #0
 8009044:	d03f      	beq.n	80090c6 <_vfiprintf_r+0x20a>
 8009046:	4b26      	ldr	r3, [pc, #152]	@ (80090e0 <_vfiprintf_r+0x224>)
 8009048:	bb1b      	cbnz	r3, 8009092 <_vfiprintf_r+0x1d6>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	3307      	adds	r3, #7
 800904e:	f023 0307 	bic.w	r3, r3, #7
 8009052:	3308      	adds	r3, #8
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009058:	443b      	add	r3, r7
 800905a:	9309      	str	r3, [sp, #36]	@ 0x24
 800905c:	e76a      	b.n	8008f34 <_vfiprintf_r+0x78>
 800905e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009062:	460c      	mov	r4, r1
 8009064:	2001      	movs	r0, #1
 8009066:	e7a8      	b.n	8008fba <_vfiprintf_r+0xfe>
 8009068:	2300      	movs	r3, #0
 800906a:	3401      	adds	r4, #1
 800906c:	9305      	str	r3, [sp, #20]
 800906e:	4619      	mov	r1, r3
 8009070:	f04f 0c0a 	mov.w	ip, #10
 8009074:	4620      	mov	r0, r4
 8009076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800907a:	3a30      	subs	r2, #48	@ 0x30
 800907c:	2a09      	cmp	r2, #9
 800907e:	d903      	bls.n	8009088 <_vfiprintf_r+0x1cc>
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0c6      	beq.n	8009012 <_vfiprintf_r+0x156>
 8009084:	9105      	str	r1, [sp, #20]
 8009086:	e7c4      	b.n	8009012 <_vfiprintf_r+0x156>
 8009088:	fb0c 2101 	mla	r1, ip, r1, r2
 800908c:	4604      	mov	r4, r0
 800908e:	2301      	movs	r3, #1
 8009090:	e7f0      	b.n	8009074 <_vfiprintf_r+0x1b8>
 8009092:	ab03      	add	r3, sp, #12
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	462a      	mov	r2, r5
 8009098:	4b12      	ldr	r3, [pc, #72]	@ (80090e4 <_vfiprintf_r+0x228>)
 800909a:	a904      	add	r1, sp, #16
 800909c:	4630      	mov	r0, r6
 800909e:	f3af 8000 	nop.w
 80090a2:	4607      	mov	r7, r0
 80090a4:	1c78      	adds	r0, r7, #1
 80090a6:	d1d6      	bne.n	8009056 <_vfiprintf_r+0x19a>
 80090a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090aa:	07d9      	lsls	r1, r3, #31
 80090ac:	d405      	bmi.n	80090ba <_vfiprintf_r+0x1fe>
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	059a      	lsls	r2, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_vfiprintf_r+0x1fe>
 80090b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090b6:	f7ff fddd 	bl	8008c74 <__retarget_lock_release_recursive>
 80090ba:	89ab      	ldrh	r3, [r5, #12]
 80090bc:	065b      	lsls	r3, r3, #25
 80090be:	f53f af1f 	bmi.w	8008f00 <_vfiprintf_r+0x44>
 80090c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090c4:	e71e      	b.n	8008f04 <_vfiprintf_r+0x48>
 80090c6:	ab03      	add	r3, sp, #12
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	462a      	mov	r2, r5
 80090cc:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <_vfiprintf_r+0x228>)
 80090ce:	a904      	add	r1, sp, #16
 80090d0:	4630      	mov	r0, r6
 80090d2:	f000 f879 	bl	80091c8 <_printf_i>
 80090d6:	e7e4      	b.n	80090a2 <_vfiprintf_r+0x1e6>
 80090d8:	0800b1e8 	.word	0x0800b1e8
 80090dc:	0800b1f2 	.word	0x0800b1f2
 80090e0:	00000000 	.word	0x00000000
 80090e4:	08008e97 	.word	0x08008e97
 80090e8:	0800b1ee 	.word	0x0800b1ee

080090ec <_printf_common>:
 80090ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	4616      	mov	r6, r2
 80090f2:	4698      	mov	r8, r3
 80090f4:	688a      	ldr	r2, [r1, #8]
 80090f6:	690b      	ldr	r3, [r1, #16]
 80090f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090fc:	4293      	cmp	r3, r2
 80090fe:	bfb8      	it	lt
 8009100:	4613      	movlt	r3, r2
 8009102:	6033      	str	r3, [r6, #0]
 8009104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009108:	4607      	mov	r7, r0
 800910a:	460c      	mov	r4, r1
 800910c:	b10a      	cbz	r2, 8009112 <_printf_common+0x26>
 800910e:	3301      	adds	r3, #1
 8009110:	6033      	str	r3, [r6, #0]
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	0699      	lsls	r1, r3, #26
 8009116:	bf42      	ittt	mi
 8009118:	6833      	ldrmi	r3, [r6, #0]
 800911a:	3302      	addmi	r3, #2
 800911c:	6033      	strmi	r3, [r6, #0]
 800911e:	6825      	ldr	r5, [r4, #0]
 8009120:	f015 0506 	ands.w	r5, r5, #6
 8009124:	d106      	bne.n	8009134 <_printf_common+0x48>
 8009126:	f104 0a19 	add.w	sl, r4, #25
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	6832      	ldr	r2, [r6, #0]
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	42ab      	cmp	r3, r5
 8009132:	dc26      	bgt.n	8009182 <_printf_common+0x96>
 8009134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009138:	6822      	ldr	r2, [r4, #0]
 800913a:	3b00      	subs	r3, #0
 800913c:	bf18      	it	ne
 800913e:	2301      	movne	r3, #1
 8009140:	0692      	lsls	r2, r2, #26
 8009142:	d42b      	bmi.n	800919c <_printf_common+0xb0>
 8009144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009148:	4641      	mov	r1, r8
 800914a:	4638      	mov	r0, r7
 800914c:	47c8      	blx	r9
 800914e:	3001      	adds	r0, #1
 8009150:	d01e      	beq.n	8009190 <_printf_common+0xa4>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	6922      	ldr	r2, [r4, #16]
 8009156:	f003 0306 	and.w	r3, r3, #6
 800915a:	2b04      	cmp	r3, #4
 800915c:	bf02      	ittt	eq
 800915e:	68e5      	ldreq	r5, [r4, #12]
 8009160:	6833      	ldreq	r3, [r6, #0]
 8009162:	1aed      	subeq	r5, r5, r3
 8009164:	68a3      	ldr	r3, [r4, #8]
 8009166:	bf0c      	ite	eq
 8009168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800916c:	2500      	movne	r5, #0
 800916e:	4293      	cmp	r3, r2
 8009170:	bfc4      	itt	gt
 8009172:	1a9b      	subgt	r3, r3, r2
 8009174:	18ed      	addgt	r5, r5, r3
 8009176:	2600      	movs	r6, #0
 8009178:	341a      	adds	r4, #26
 800917a:	42b5      	cmp	r5, r6
 800917c:	d11a      	bne.n	80091b4 <_printf_common+0xc8>
 800917e:	2000      	movs	r0, #0
 8009180:	e008      	b.n	8009194 <_printf_common+0xa8>
 8009182:	2301      	movs	r3, #1
 8009184:	4652      	mov	r2, sl
 8009186:	4641      	mov	r1, r8
 8009188:	4638      	mov	r0, r7
 800918a:	47c8      	blx	r9
 800918c:	3001      	adds	r0, #1
 800918e:	d103      	bne.n	8009198 <_printf_common+0xac>
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009198:	3501      	adds	r5, #1
 800919a:	e7c6      	b.n	800912a <_printf_common+0x3e>
 800919c:	18e1      	adds	r1, r4, r3
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	2030      	movs	r0, #48	@ 0x30
 80091a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091a6:	4422      	add	r2, r4
 80091a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091b0:	3302      	adds	r3, #2
 80091b2:	e7c7      	b.n	8009144 <_printf_common+0x58>
 80091b4:	2301      	movs	r3, #1
 80091b6:	4622      	mov	r2, r4
 80091b8:	4641      	mov	r1, r8
 80091ba:	4638      	mov	r0, r7
 80091bc:	47c8      	blx	r9
 80091be:	3001      	adds	r0, #1
 80091c0:	d0e6      	beq.n	8009190 <_printf_common+0xa4>
 80091c2:	3601      	adds	r6, #1
 80091c4:	e7d9      	b.n	800917a <_printf_common+0x8e>
	...

080091c8 <_printf_i>:
 80091c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	7e0f      	ldrb	r7, [r1, #24]
 80091ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091d0:	2f78      	cmp	r7, #120	@ 0x78
 80091d2:	4691      	mov	r9, r2
 80091d4:	4680      	mov	r8, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	469a      	mov	sl, r3
 80091da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091de:	d807      	bhi.n	80091f0 <_printf_i+0x28>
 80091e0:	2f62      	cmp	r7, #98	@ 0x62
 80091e2:	d80a      	bhi.n	80091fa <_printf_i+0x32>
 80091e4:	2f00      	cmp	r7, #0
 80091e6:	f000 80d1 	beq.w	800938c <_printf_i+0x1c4>
 80091ea:	2f58      	cmp	r7, #88	@ 0x58
 80091ec:	f000 80b8 	beq.w	8009360 <_printf_i+0x198>
 80091f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091f8:	e03a      	b.n	8009270 <_printf_i+0xa8>
 80091fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091fe:	2b15      	cmp	r3, #21
 8009200:	d8f6      	bhi.n	80091f0 <_printf_i+0x28>
 8009202:	a101      	add	r1, pc, #4	@ (adr r1, 8009208 <_printf_i+0x40>)
 8009204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009208:	08009261 	.word	0x08009261
 800920c:	08009275 	.word	0x08009275
 8009210:	080091f1 	.word	0x080091f1
 8009214:	080091f1 	.word	0x080091f1
 8009218:	080091f1 	.word	0x080091f1
 800921c:	080091f1 	.word	0x080091f1
 8009220:	08009275 	.word	0x08009275
 8009224:	080091f1 	.word	0x080091f1
 8009228:	080091f1 	.word	0x080091f1
 800922c:	080091f1 	.word	0x080091f1
 8009230:	080091f1 	.word	0x080091f1
 8009234:	08009373 	.word	0x08009373
 8009238:	0800929f 	.word	0x0800929f
 800923c:	0800932d 	.word	0x0800932d
 8009240:	080091f1 	.word	0x080091f1
 8009244:	080091f1 	.word	0x080091f1
 8009248:	08009395 	.word	0x08009395
 800924c:	080091f1 	.word	0x080091f1
 8009250:	0800929f 	.word	0x0800929f
 8009254:	080091f1 	.word	0x080091f1
 8009258:	080091f1 	.word	0x080091f1
 800925c:	08009335 	.word	0x08009335
 8009260:	6833      	ldr	r3, [r6, #0]
 8009262:	1d1a      	adds	r2, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6032      	str	r2, [r6, #0]
 8009268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800926c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009270:	2301      	movs	r3, #1
 8009272:	e09c      	b.n	80093ae <_printf_i+0x1e6>
 8009274:	6833      	ldr	r3, [r6, #0]
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	1d19      	adds	r1, r3, #4
 800927a:	6031      	str	r1, [r6, #0]
 800927c:	0606      	lsls	r6, r0, #24
 800927e:	d501      	bpl.n	8009284 <_printf_i+0xbc>
 8009280:	681d      	ldr	r5, [r3, #0]
 8009282:	e003      	b.n	800928c <_printf_i+0xc4>
 8009284:	0645      	lsls	r5, r0, #25
 8009286:	d5fb      	bpl.n	8009280 <_printf_i+0xb8>
 8009288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800928c:	2d00      	cmp	r5, #0
 800928e:	da03      	bge.n	8009298 <_printf_i+0xd0>
 8009290:	232d      	movs	r3, #45	@ 0x2d
 8009292:	426d      	negs	r5, r5
 8009294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009298:	4858      	ldr	r0, [pc, #352]	@ (80093fc <_printf_i+0x234>)
 800929a:	230a      	movs	r3, #10
 800929c:	e011      	b.n	80092c2 <_printf_i+0xfa>
 800929e:	6821      	ldr	r1, [r4, #0]
 80092a0:	6833      	ldr	r3, [r6, #0]
 80092a2:	0608      	lsls	r0, r1, #24
 80092a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80092a8:	d402      	bmi.n	80092b0 <_printf_i+0xe8>
 80092aa:	0649      	lsls	r1, r1, #25
 80092ac:	bf48      	it	mi
 80092ae:	b2ad      	uxthmi	r5, r5
 80092b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092b2:	4852      	ldr	r0, [pc, #328]	@ (80093fc <_printf_i+0x234>)
 80092b4:	6033      	str	r3, [r6, #0]
 80092b6:	bf14      	ite	ne
 80092b8:	230a      	movne	r3, #10
 80092ba:	2308      	moveq	r3, #8
 80092bc:	2100      	movs	r1, #0
 80092be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092c2:	6866      	ldr	r6, [r4, #4]
 80092c4:	60a6      	str	r6, [r4, #8]
 80092c6:	2e00      	cmp	r6, #0
 80092c8:	db05      	blt.n	80092d6 <_printf_i+0x10e>
 80092ca:	6821      	ldr	r1, [r4, #0]
 80092cc:	432e      	orrs	r6, r5
 80092ce:	f021 0104 	bic.w	r1, r1, #4
 80092d2:	6021      	str	r1, [r4, #0]
 80092d4:	d04b      	beq.n	800936e <_printf_i+0x1a6>
 80092d6:	4616      	mov	r6, r2
 80092d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80092dc:	fb03 5711 	mls	r7, r3, r1, r5
 80092e0:	5dc7      	ldrb	r7, [r0, r7]
 80092e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092e6:	462f      	mov	r7, r5
 80092e8:	42bb      	cmp	r3, r7
 80092ea:	460d      	mov	r5, r1
 80092ec:	d9f4      	bls.n	80092d8 <_printf_i+0x110>
 80092ee:	2b08      	cmp	r3, #8
 80092f0:	d10b      	bne.n	800930a <_printf_i+0x142>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	07df      	lsls	r7, r3, #31
 80092f6:	d508      	bpl.n	800930a <_printf_i+0x142>
 80092f8:	6923      	ldr	r3, [r4, #16]
 80092fa:	6861      	ldr	r1, [r4, #4]
 80092fc:	4299      	cmp	r1, r3
 80092fe:	bfde      	ittt	le
 8009300:	2330      	movle	r3, #48	@ 0x30
 8009302:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009306:	f106 36ff 	addle.w	r6, r6, #4294967295
 800930a:	1b92      	subs	r2, r2, r6
 800930c:	6122      	str	r2, [r4, #16]
 800930e:	f8cd a000 	str.w	sl, [sp]
 8009312:	464b      	mov	r3, r9
 8009314:	aa03      	add	r2, sp, #12
 8009316:	4621      	mov	r1, r4
 8009318:	4640      	mov	r0, r8
 800931a:	f7ff fee7 	bl	80090ec <_printf_common>
 800931e:	3001      	adds	r0, #1
 8009320:	d14a      	bne.n	80093b8 <_printf_i+0x1f0>
 8009322:	f04f 30ff 	mov.w	r0, #4294967295
 8009326:	b004      	add	sp, #16
 8009328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	f043 0320 	orr.w	r3, r3, #32
 8009332:	6023      	str	r3, [r4, #0]
 8009334:	4832      	ldr	r0, [pc, #200]	@ (8009400 <_printf_i+0x238>)
 8009336:	2778      	movs	r7, #120	@ 0x78
 8009338:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	6831      	ldr	r1, [r6, #0]
 8009340:	061f      	lsls	r7, r3, #24
 8009342:	f851 5b04 	ldr.w	r5, [r1], #4
 8009346:	d402      	bmi.n	800934e <_printf_i+0x186>
 8009348:	065f      	lsls	r7, r3, #25
 800934a:	bf48      	it	mi
 800934c:	b2ad      	uxthmi	r5, r5
 800934e:	6031      	str	r1, [r6, #0]
 8009350:	07d9      	lsls	r1, r3, #31
 8009352:	bf44      	itt	mi
 8009354:	f043 0320 	orrmi.w	r3, r3, #32
 8009358:	6023      	strmi	r3, [r4, #0]
 800935a:	b11d      	cbz	r5, 8009364 <_printf_i+0x19c>
 800935c:	2310      	movs	r3, #16
 800935e:	e7ad      	b.n	80092bc <_printf_i+0xf4>
 8009360:	4826      	ldr	r0, [pc, #152]	@ (80093fc <_printf_i+0x234>)
 8009362:	e7e9      	b.n	8009338 <_printf_i+0x170>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	f023 0320 	bic.w	r3, r3, #32
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	e7f6      	b.n	800935c <_printf_i+0x194>
 800936e:	4616      	mov	r6, r2
 8009370:	e7bd      	b.n	80092ee <_printf_i+0x126>
 8009372:	6833      	ldr	r3, [r6, #0]
 8009374:	6825      	ldr	r5, [r4, #0]
 8009376:	6961      	ldr	r1, [r4, #20]
 8009378:	1d18      	adds	r0, r3, #4
 800937a:	6030      	str	r0, [r6, #0]
 800937c:	062e      	lsls	r6, r5, #24
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	d501      	bpl.n	8009386 <_printf_i+0x1be>
 8009382:	6019      	str	r1, [r3, #0]
 8009384:	e002      	b.n	800938c <_printf_i+0x1c4>
 8009386:	0668      	lsls	r0, r5, #25
 8009388:	d5fb      	bpl.n	8009382 <_printf_i+0x1ba>
 800938a:	8019      	strh	r1, [r3, #0]
 800938c:	2300      	movs	r3, #0
 800938e:	6123      	str	r3, [r4, #16]
 8009390:	4616      	mov	r6, r2
 8009392:	e7bc      	b.n	800930e <_printf_i+0x146>
 8009394:	6833      	ldr	r3, [r6, #0]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	6032      	str	r2, [r6, #0]
 800939a:	681e      	ldr	r6, [r3, #0]
 800939c:	6862      	ldr	r2, [r4, #4]
 800939e:	2100      	movs	r1, #0
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7f6 ff9d 	bl	80002e0 <memchr>
 80093a6:	b108      	cbz	r0, 80093ac <_printf_i+0x1e4>
 80093a8:	1b80      	subs	r0, r0, r6
 80093aa:	6060      	str	r0, [r4, #4]
 80093ac:	6863      	ldr	r3, [r4, #4]
 80093ae:	6123      	str	r3, [r4, #16]
 80093b0:	2300      	movs	r3, #0
 80093b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093b6:	e7aa      	b.n	800930e <_printf_i+0x146>
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	4632      	mov	r2, r6
 80093bc:	4649      	mov	r1, r9
 80093be:	4640      	mov	r0, r8
 80093c0:	47d0      	blx	sl
 80093c2:	3001      	adds	r0, #1
 80093c4:	d0ad      	beq.n	8009322 <_printf_i+0x15a>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	079b      	lsls	r3, r3, #30
 80093ca:	d413      	bmi.n	80093f4 <_printf_i+0x22c>
 80093cc:	68e0      	ldr	r0, [r4, #12]
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	4298      	cmp	r0, r3
 80093d2:	bfb8      	it	lt
 80093d4:	4618      	movlt	r0, r3
 80093d6:	e7a6      	b.n	8009326 <_printf_i+0x15e>
 80093d8:	2301      	movs	r3, #1
 80093da:	4632      	mov	r2, r6
 80093dc:	4649      	mov	r1, r9
 80093de:	4640      	mov	r0, r8
 80093e0:	47d0      	blx	sl
 80093e2:	3001      	adds	r0, #1
 80093e4:	d09d      	beq.n	8009322 <_printf_i+0x15a>
 80093e6:	3501      	adds	r5, #1
 80093e8:	68e3      	ldr	r3, [r4, #12]
 80093ea:	9903      	ldr	r1, [sp, #12]
 80093ec:	1a5b      	subs	r3, r3, r1
 80093ee:	42ab      	cmp	r3, r5
 80093f0:	dcf2      	bgt.n	80093d8 <_printf_i+0x210>
 80093f2:	e7eb      	b.n	80093cc <_printf_i+0x204>
 80093f4:	2500      	movs	r5, #0
 80093f6:	f104 0619 	add.w	r6, r4, #25
 80093fa:	e7f5      	b.n	80093e8 <_printf_i+0x220>
 80093fc:	0800b1f9 	.word	0x0800b1f9
 8009400:	0800b20a 	.word	0x0800b20a

08009404 <__sflush_r>:
 8009404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940c:	0716      	lsls	r6, r2, #28
 800940e:	4605      	mov	r5, r0
 8009410:	460c      	mov	r4, r1
 8009412:	d454      	bmi.n	80094be <__sflush_r+0xba>
 8009414:	684b      	ldr	r3, [r1, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	dc02      	bgt.n	8009420 <__sflush_r+0x1c>
 800941a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	dd48      	ble.n	80094b2 <__sflush_r+0xae>
 8009420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009422:	2e00      	cmp	r6, #0
 8009424:	d045      	beq.n	80094b2 <__sflush_r+0xae>
 8009426:	2300      	movs	r3, #0
 8009428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800942c:	682f      	ldr	r7, [r5, #0]
 800942e:	6a21      	ldr	r1, [r4, #32]
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	d030      	beq.n	8009496 <__sflush_r+0x92>
 8009434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	0759      	lsls	r1, r3, #29
 800943a:	d505      	bpl.n	8009448 <__sflush_r+0x44>
 800943c:	6863      	ldr	r3, [r4, #4]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009442:	b10b      	cbz	r3, 8009448 <__sflush_r+0x44>
 8009444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	2300      	movs	r3, #0
 800944a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800944c:	6a21      	ldr	r1, [r4, #32]
 800944e:	4628      	mov	r0, r5
 8009450:	47b0      	blx	r6
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	d106      	bne.n	8009466 <__sflush_r+0x62>
 8009458:	6829      	ldr	r1, [r5, #0]
 800945a:	291d      	cmp	r1, #29
 800945c:	d82b      	bhi.n	80094b6 <__sflush_r+0xb2>
 800945e:	4a2a      	ldr	r2, [pc, #168]	@ (8009508 <__sflush_r+0x104>)
 8009460:	40ca      	lsrs	r2, r1
 8009462:	07d6      	lsls	r6, r2, #31
 8009464:	d527      	bpl.n	80094b6 <__sflush_r+0xb2>
 8009466:	2200      	movs	r2, #0
 8009468:	6062      	str	r2, [r4, #4]
 800946a:	04d9      	lsls	r1, r3, #19
 800946c:	6922      	ldr	r2, [r4, #16]
 800946e:	6022      	str	r2, [r4, #0]
 8009470:	d504      	bpl.n	800947c <__sflush_r+0x78>
 8009472:	1c42      	adds	r2, r0, #1
 8009474:	d101      	bne.n	800947a <__sflush_r+0x76>
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	b903      	cbnz	r3, 800947c <__sflush_r+0x78>
 800947a:	6560      	str	r0, [r4, #84]	@ 0x54
 800947c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800947e:	602f      	str	r7, [r5, #0]
 8009480:	b1b9      	cbz	r1, 80094b2 <__sflush_r+0xae>
 8009482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009486:	4299      	cmp	r1, r3
 8009488:	d002      	beq.n	8009490 <__sflush_r+0x8c>
 800948a:	4628      	mov	r0, r5
 800948c:	f7ff fbf4 	bl	8008c78 <_free_r>
 8009490:	2300      	movs	r3, #0
 8009492:	6363      	str	r3, [r4, #52]	@ 0x34
 8009494:	e00d      	b.n	80094b2 <__sflush_r+0xae>
 8009496:	2301      	movs	r3, #1
 8009498:	4628      	mov	r0, r5
 800949a:	47b0      	blx	r6
 800949c:	4602      	mov	r2, r0
 800949e:	1c50      	adds	r0, r2, #1
 80094a0:	d1c9      	bne.n	8009436 <__sflush_r+0x32>
 80094a2:	682b      	ldr	r3, [r5, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0c6      	beq.n	8009436 <__sflush_r+0x32>
 80094a8:	2b1d      	cmp	r3, #29
 80094aa:	d001      	beq.n	80094b0 <__sflush_r+0xac>
 80094ac:	2b16      	cmp	r3, #22
 80094ae:	d11e      	bne.n	80094ee <__sflush_r+0xea>
 80094b0:	602f      	str	r7, [r5, #0]
 80094b2:	2000      	movs	r0, #0
 80094b4:	e022      	b.n	80094fc <__sflush_r+0xf8>
 80094b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ba:	b21b      	sxth	r3, r3
 80094bc:	e01b      	b.n	80094f6 <__sflush_r+0xf2>
 80094be:	690f      	ldr	r7, [r1, #16]
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	d0f6      	beq.n	80094b2 <__sflush_r+0xae>
 80094c4:	0793      	lsls	r3, r2, #30
 80094c6:	680e      	ldr	r6, [r1, #0]
 80094c8:	bf08      	it	eq
 80094ca:	694b      	ldreq	r3, [r1, #20]
 80094cc:	600f      	str	r7, [r1, #0]
 80094ce:	bf18      	it	ne
 80094d0:	2300      	movne	r3, #0
 80094d2:	eba6 0807 	sub.w	r8, r6, r7
 80094d6:	608b      	str	r3, [r1, #8]
 80094d8:	f1b8 0f00 	cmp.w	r8, #0
 80094dc:	dde9      	ble.n	80094b2 <__sflush_r+0xae>
 80094de:	6a21      	ldr	r1, [r4, #32]
 80094e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094e2:	4643      	mov	r3, r8
 80094e4:	463a      	mov	r2, r7
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b0      	blx	r6
 80094ea:	2800      	cmp	r0, #0
 80094ec:	dc08      	bgt.n	8009500 <__sflush_r+0xfc>
 80094ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	4407      	add	r7, r0
 8009502:	eba8 0800 	sub.w	r8, r8, r0
 8009506:	e7e7      	b.n	80094d8 <__sflush_r+0xd4>
 8009508:	20400001 	.word	0x20400001

0800950c <_fflush_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	690b      	ldr	r3, [r1, #16]
 8009510:	4605      	mov	r5, r0
 8009512:	460c      	mov	r4, r1
 8009514:	b913      	cbnz	r3, 800951c <_fflush_r+0x10>
 8009516:	2500      	movs	r5, #0
 8009518:	4628      	mov	r0, r5
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	b118      	cbz	r0, 8009526 <_fflush_r+0x1a>
 800951e:	6a03      	ldr	r3, [r0, #32]
 8009520:	b90b      	cbnz	r3, 8009526 <_fflush_r+0x1a>
 8009522:	f7ff faa1 	bl	8008a68 <__sinit>
 8009526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0f3      	beq.n	8009516 <_fflush_r+0xa>
 800952e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009530:	07d0      	lsls	r0, r2, #31
 8009532:	d404      	bmi.n	800953e <_fflush_r+0x32>
 8009534:	0599      	lsls	r1, r3, #22
 8009536:	d402      	bmi.n	800953e <_fflush_r+0x32>
 8009538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800953a:	f7ff fb9a 	bl	8008c72 <__retarget_lock_acquire_recursive>
 800953e:	4628      	mov	r0, r5
 8009540:	4621      	mov	r1, r4
 8009542:	f7ff ff5f 	bl	8009404 <__sflush_r>
 8009546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009548:	07da      	lsls	r2, r3, #31
 800954a:	4605      	mov	r5, r0
 800954c:	d4e4      	bmi.n	8009518 <_fflush_r+0xc>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	059b      	lsls	r3, r3, #22
 8009552:	d4e1      	bmi.n	8009518 <_fflush_r+0xc>
 8009554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009556:	f7ff fb8d 	bl	8008c74 <__retarget_lock_release_recursive>
 800955a:	e7dd      	b.n	8009518 <_fflush_r+0xc>

0800955c <__swbuf_r>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	460e      	mov	r6, r1
 8009560:	4614      	mov	r4, r2
 8009562:	4605      	mov	r5, r0
 8009564:	b118      	cbz	r0, 800956e <__swbuf_r+0x12>
 8009566:	6a03      	ldr	r3, [r0, #32]
 8009568:	b90b      	cbnz	r3, 800956e <__swbuf_r+0x12>
 800956a:	f7ff fa7d 	bl	8008a68 <__sinit>
 800956e:	69a3      	ldr	r3, [r4, #24]
 8009570:	60a3      	str	r3, [r4, #8]
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	071a      	lsls	r2, r3, #28
 8009576:	d501      	bpl.n	800957c <__swbuf_r+0x20>
 8009578:	6923      	ldr	r3, [r4, #16]
 800957a:	b943      	cbnz	r3, 800958e <__swbuf_r+0x32>
 800957c:	4621      	mov	r1, r4
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f82a 	bl	80095d8 <__swsetup_r>
 8009584:	b118      	cbz	r0, 800958e <__swbuf_r+0x32>
 8009586:	f04f 37ff 	mov.w	r7, #4294967295
 800958a:	4638      	mov	r0, r7
 800958c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	6922      	ldr	r2, [r4, #16]
 8009592:	1a98      	subs	r0, r3, r2
 8009594:	6963      	ldr	r3, [r4, #20]
 8009596:	b2f6      	uxtb	r6, r6
 8009598:	4283      	cmp	r3, r0
 800959a:	4637      	mov	r7, r6
 800959c:	dc05      	bgt.n	80095aa <__swbuf_r+0x4e>
 800959e:	4621      	mov	r1, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	f7ff ffb3 	bl	800950c <_fflush_r>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d1ed      	bne.n	8009586 <__swbuf_r+0x2a>
 80095aa:	68a3      	ldr	r3, [r4, #8]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	60a3      	str	r3, [r4, #8]
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	6022      	str	r2, [r4, #0]
 80095b6:	701e      	strb	r6, [r3, #0]
 80095b8:	6962      	ldr	r2, [r4, #20]
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	429a      	cmp	r2, r3
 80095be:	d004      	beq.n	80095ca <__swbuf_r+0x6e>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	07db      	lsls	r3, r3, #31
 80095c4:	d5e1      	bpl.n	800958a <__swbuf_r+0x2e>
 80095c6:	2e0a      	cmp	r6, #10
 80095c8:	d1df      	bne.n	800958a <__swbuf_r+0x2e>
 80095ca:	4621      	mov	r1, r4
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7ff ff9d 	bl	800950c <_fflush_r>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d0d9      	beq.n	800958a <__swbuf_r+0x2e>
 80095d6:	e7d6      	b.n	8009586 <__swbuf_r+0x2a>

080095d8 <__swsetup_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4b29      	ldr	r3, [pc, #164]	@ (8009680 <__swsetup_r+0xa8>)
 80095dc:	4605      	mov	r5, r0
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	460c      	mov	r4, r1
 80095e2:	b118      	cbz	r0, 80095ec <__swsetup_r+0x14>
 80095e4:	6a03      	ldr	r3, [r0, #32]
 80095e6:	b90b      	cbnz	r3, 80095ec <__swsetup_r+0x14>
 80095e8:	f7ff fa3e 	bl	8008a68 <__sinit>
 80095ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f0:	0719      	lsls	r1, r3, #28
 80095f2:	d422      	bmi.n	800963a <__swsetup_r+0x62>
 80095f4:	06da      	lsls	r2, r3, #27
 80095f6:	d407      	bmi.n	8009608 <__swsetup_r+0x30>
 80095f8:	2209      	movs	r2, #9
 80095fa:	602a      	str	r2, [r5, #0]
 80095fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009600:	81a3      	strh	r3, [r4, #12]
 8009602:	f04f 30ff 	mov.w	r0, #4294967295
 8009606:	e033      	b.n	8009670 <__swsetup_r+0x98>
 8009608:	0758      	lsls	r0, r3, #29
 800960a:	d512      	bpl.n	8009632 <__swsetup_r+0x5a>
 800960c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800960e:	b141      	cbz	r1, 8009622 <__swsetup_r+0x4a>
 8009610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009614:	4299      	cmp	r1, r3
 8009616:	d002      	beq.n	800961e <__swsetup_r+0x46>
 8009618:	4628      	mov	r0, r5
 800961a:	f7ff fb2d 	bl	8008c78 <_free_r>
 800961e:	2300      	movs	r3, #0
 8009620:	6363      	str	r3, [r4, #52]	@ 0x34
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	2300      	movs	r3, #0
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f043 0308 	orr.w	r3, r3, #8
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	b94b      	cbnz	r3, 8009652 <__swsetup_r+0x7a>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009648:	d003      	beq.n	8009652 <__swsetup_r+0x7a>
 800964a:	4621      	mov	r1, r4
 800964c:	4628      	mov	r0, r5
 800964e:	f000 f84f 	bl	80096f0 <__smakebuf_r>
 8009652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009656:	f013 0201 	ands.w	r2, r3, #1
 800965a:	d00a      	beq.n	8009672 <__swsetup_r+0x9a>
 800965c:	2200      	movs	r2, #0
 800965e:	60a2      	str	r2, [r4, #8]
 8009660:	6962      	ldr	r2, [r4, #20]
 8009662:	4252      	negs	r2, r2
 8009664:	61a2      	str	r2, [r4, #24]
 8009666:	6922      	ldr	r2, [r4, #16]
 8009668:	b942      	cbnz	r2, 800967c <__swsetup_r+0xa4>
 800966a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800966e:	d1c5      	bne.n	80095fc <__swsetup_r+0x24>
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	0799      	lsls	r1, r3, #30
 8009674:	bf58      	it	pl
 8009676:	6962      	ldrpl	r2, [r4, #20]
 8009678:	60a2      	str	r2, [r4, #8]
 800967a:	e7f4      	b.n	8009666 <__swsetup_r+0x8e>
 800967c:	2000      	movs	r0, #0
 800967e:	e7f7      	b.n	8009670 <__swsetup_r+0x98>
 8009680:	24000038 	.word	0x24000038

08009684 <_sbrk_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d06      	ldr	r5, [pc, #24]	@ (80096a0 <_sbrk_r+0x1c>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	f7f8 feca 	bl	8002428 <_sbrk>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_sbrk_r+0x1a>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_sbrk_r+0x1a>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	24000324 	.word	0x24000324

080096a4 <__swhatbuf_r>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	460c      	mov	r4, r1
 80096a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ac:	2900      	cmp	r1, #0
 80096ae:	b096      	sub	sp, #88	@ 0x58
 80096b0:	4615      	mov	r5, r2
 80096b2:	461e      	mov	r6, r3
 80096b4:	da0d      	bge.n	80096d2 <__swhatbuf_r+0x2e>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096bc:	f04f 0100 	mov.w	r1, #0
 80096c0:	bf14      	ite	ne
 80096c2:	2340      	movne	r3, #64	@ 0x40
 80096c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096c8:	2000      	movs	r0, #0
 80096ca:	6031      	str	r1, [r6, #0]
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	b016      	add	sp, #88	@ 0x58
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	466a      	mov	r2, sp
 80096d4:	f000 f848 	bl	8009768 <_fstat_r>
 80096d8:	2800      	cmp	r0, #0
 80096da:	dbec      	blt.n	80096b6 <__swhatbuf_r+0x12>
 80096dc:	9901      	ldr	r1, [sp, #4]
 80096de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096e6:	4259      	negs	r1, r3
 80096e8:	4159      	adcs	r1, r3
 80096ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096ee:	e7eb      	b.n	80096c8 <__swhatbuf_r+0x24>

080096f0 <__smakebuf_r>:
 80096f0:	898b      	ldrh	r3, [r1, #12]
 80096f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f4:	079d      	lsls	r5, r3, #30
 80096f6:	4606      	mov	r6, r0
 80096f8:	460c      	mov	r4, r1
 80096fa:	d507      	bpl.n	800970c <__smakebuf_r+0x1c>
 80096fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	2301      	movs	r3, #1
 8009706:	6163      	str	r3, [r4, #20]
 8009708:	b003      	add	sp, #12
 800970a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800970c:	ab01      	add	r3, sp, #4
 800970e:	466a      	mov	r2, sp
 8009710:	f7ff ffc8 	bl	80096a4 <__swhatbuf_r>
 8009714:	9f00      	ldr	r7, [sp, #0]
 8009716:	4605      	mov	r5, r0
 8009718:	4639      	mov	r1, r7
 800971a:	4630      	mov	r0, r6
 800971c:	f7ff fb18 	bl	8008d50 <_malloc_r>
 8009720:	b948      	cbnz	r0, 8009736 <__smakebuf_r+0x46>
 8009722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009726:	059a      	lsls	r2, r3, #22
 8009728:	d4ee      	bmi.n	8009708 <__smakebuf_r+0x18>
 800972a:	f023 0303 	bic.w	r3, r3, #3
 800972e:	f043 0302 	orr.w	r3, r3, #2
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	e7e2      	b.n	80096fc <__smakebuf_r+0xc>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	6020      	str	r0, [r4, #0]
 800973a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973e:	81a3      	strh	r3, [r4, #12]
 8009740:	9b01      	ldr	r3, [sp, #4]
 8009742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009746:	b15b      	cbz	r3, 8009760 <__smakebuf_r+0x70>
 8009748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800974c:	4630      	mov	r0, r6
 800974e:	f000 f81d 	bl	800978c <_isatty_r>
 8009752:	b128      	cbz	r0, 8009760 <__smakebuf_r+0x70>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	431d      	orrs	r5, r3
 8009764:	81a5      	strh	r5, [r4, #12]
 8009766:	e7cf      	b.n	8009708 <__smakebuf_r+0x18>

08009768 <_fstat_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4d07      	ldr	r5, [pc, #28]	@ (8009788 <_fstat_r+0x20>)
 800976c:	2300      	movs	r3, #0
 800976e:	4604      	mov	r4, r0
 8009770:	4608      	mov	r0, r1
 8009772:	4611      	mov	r1, r2
 8009774:	602b      	str	r3, [r5, #0]
 8009776:	f7f8 fe2e 	bl	80023d6 <_fstat>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	d102      	bne.n	8009784 <_fstat_r+0x1c>
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	b103      	cbz	r3, 8009784 <_fstat_r+0x1c>
 8009782:	6023      	str	r3, [r4, #0]
 8009784:	bd38      	pop	{r3, r4, r5, pc}
 8009786:	bf00      	nop
 8009788:	24000324 	.word	0x24000324

0800978c <_isatty_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d06      	ldr	r5, [pc, #24]	@ (80097a8 <_isatty_r+0x1c>)
 8009790:	2300      	movs	r3, #0
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	f7f8 fe2d 	bl	80023f6 <_isatty>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_isatty_r+0x1a>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_isatty_r+0x1a>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	24000324 	.word	0x24000324

080097ac <_init>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr

080097b8 <_fini>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr
